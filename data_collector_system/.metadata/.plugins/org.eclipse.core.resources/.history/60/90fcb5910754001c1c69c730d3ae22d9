#include <stdio.h>
#include <stdint.h>
#include <io.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

//NRF_CSN_BASE, NRF_SCK_BASE, NRF_MOSI_BASE, NRF_MISO_BASE, NRF_CE_BASE, NRF_IRQ_BASE

long signed int t_fine;
unsigned short dig_T1;
signed short dig_T2;
signed short dig_T3;
int8_t test_input[10];
int8_t test_output[10];

long signed int BME280_compensate_T_int32(long signed int adc_T)
{
	long signed int var1, var2, T;
	var1 = ((((adc_T>>3) - ((long signed int)dig_T1<<1))) * ((long signed int)dig_T2)) >> 11;
	var2 = (((((adc_T>>4) - ((long signed int)dig_T1)) * ((adc_T>>4) - ((long signed int)dig_T1))) >> 12) * ((long signed int)dig_T3)) >> 14;
	t_fine = var1 + var2;
	T = (t_fine * 5 + 128) >> 8;
return T;
}

void bme_init()
{
	IOWR(BME_SCK_BASE, 0, 0);	//Initializes clock to 0
	IOWR(BME_CSN_BASE, 0, 1);	//Initializes csn to 1
	//alt_irq_register(NRF_IRQ_IRQ, NRF_IRQ_BASE, nrf_int_handler);
}

void spi_comm (int8_t input[], int8_t output[], int in_length, int out_length)
{
	for(int i = 0; i < out_length; i++)	//Initializing output array to all zeros
	{
		output[i] = 0;
	}

	IOWR(BME_CSN_BASE, 0, 0);	//CSN to 0 to begin comm
	for(int i = 0; i < ((in_length > out_length)?in_length:out_length); i++)	//Loop once for each byte of communication
	{
		for(int j = 7; j >= 0; j--)	//Loop 8 times for each byte
		{
			IOWR(BME_SCK_BASE, 0, 0);	//Clock falling edge
			if(i < in_length)	//Change input byte (if still inputting)
				IOWR(BME_MOSI_BASE, 0, (input[i] & (1 << j))?1:0);
			if(i < out_length)	//Change output byte (if still outputting)
				output[i] = output[i] | (IORD(BME_MISO_BASE, 0) << j);
			IOWR(BME_SCK_BASE, 0, 1);	//Clock rising edge (when input is read by transceiver
		}
	}
	IOWR(BME_SCK_BASE, 0, 0);	//Reset clock back to 0
	IOWR(BME_CSN_BASE, 0, 1);	//Reset CSN back to 1, ending communication
}

void print_array_v (int8_t a[], int size)
{
	if(size > 1)
	{
		for(int i = 0; i < size - 1; i++)
		{
			alt_printf("%x, ", (a[i] & 0xFF));
		}
	}
	alt_printf("%x\n", (a[size - 1] & 0xFF));

	long signed int t = (a[1] << 16) + (a[2] << 8) + a[3];
	long signed int T = BME280_compensate_T_int32(t);
	printf("conversion T: %i\n", T);
	return;
}

int8_t print_array (int8_t a[], int size)
{
	if(size > 1)
	{
		for(int i = 0; i < size - 1; i++)
		{
			alt_printf("%x, ", (a[i] & 0xFF));
		}
	}

	alt_printf("%x\n", (a[size - 1] & 0xFF));
	int8_t ret = (a[size - 1] & 0xFF);
	return ret;
}

void handle_timer_interrupts(){

	test_input[0] = 0xF7;
	spi_comm(test_input, test_output, 1, 8);
	print_array_v(test_output, 8);
	IOWR(TIMER_0_BASE, 0, 0);
}

void pio_init(){
	IOWR(TIMER_0_BASE, 1, 8);
	IOWR(TIMER_0_BASE, 3, 10000);
	IOWR(TIMER_0_BASE, 1, 7);
	alt_irq_register(TIMER_0_IRQ, TIMER_0_BASE, handle_timer_interrupts);
	return;
}


//

int main ()
{
	IOWR(SEVEN_SEG_0_BASE, 0, 0xFFFFFFFF);
	IOWR(SEVEN_SEG_1_BASE, 0, 0xFFFFFFFF);

	bme_init();




	test_input[0] = 0x74;
	test_input[1] = 0x27;
	spi_comm(test_input, test_output, 2, 0);
	int j = 0;
	for (int i = 0; i < 10000; i++){j = i;}

	test_input[0] = 0x72;
	test_input[1] = 0x04;
	spi_comm(test_input, test_output, 2, 0);

	test_input[0] = 0x88;
	spi_comm(test_input, test_output, 1, 7);
	print_array_v(test_output, 7);
	dig_T1 = (test_output[1] << 8) + (test_output[2]);
	dig_T2 = (test_output[3] << 8) + (test_output[4]);
	dig_T3 = (test_output[5] << 8) + (test_output[6]);
	printf("%i %i %i\n", dig_T1, dig_T2, dig_T3);
//	test_input[0] = 0xF3;	//Setting input (can be multi-byte), in this case a command to read reg 0
//	spi_comm(test_input, test_output, 1, 2);	//Calling function using the input array, output array, byte length of input, and byte length of output
//	print_array(test_output, 2);	//Printing response (first byte is always the status register)
	int count = 0;
	int8_t num = -1;
//	while (count < 1000000) {
//		test_input[0] = 0xF3;	//Setting input (can be multi-byte), in this case a command to read reg 0
//		spi_comm(test_input, test_output, 1, 2);	//Calling function using the input array, output array, byte length of input, and byte length of output
//		num = print_array(test_output, 2);
//		if (num != -1) {
//			test_input[0] = 0xF7;
//			spi_comm(test_input, test_output, 1, 8);
//			print_array_v(test_output, 8);
//		}
//		count++;
//	}
	printf("exited loop\n");
}
