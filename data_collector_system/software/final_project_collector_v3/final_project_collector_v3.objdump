
final_project_collector_v3.elf:     file format elf32-littlenios2
final_project_collector_v3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011fcc memsz 0x00011fcc flags r-x
    LOAD off    0x00012fec vaddr 0x08011fec paddr 0x08013ae4 align 2**12
         filesz 0x00001af8 memsz 0x00001af8 flags rw-
    LOAD off    0x000155dc vaddr 0x080155dc paddr 0x080155dc align 2**12
         filesz 0x00000000 memsz 0x000001c8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011a24  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000384  08011c68  08011c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af8  08011fec  08013ae4  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001c8  080155dc  080155dc  000155dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014ae4  2**0
                  CONTENTS
  7 .new_sdram_controller_0 00000000  080157a4  080157a4  00014ae4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014ae4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fe0  00000000  00000000  00014b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025ff6  00000000  00000000  00015ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009d29  00000000  00000000  0003bade  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c070  00000000  00000000  00045807  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002448  00000000  00000000  00051878  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003c22  00000000  00000000  00053cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000195ae  00000000  00000000  000578e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00070e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b48  00000000  00000000  00070ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007615a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007615d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00076169  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007616a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007616b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007616f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00076173  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00076177  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00076182  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007618d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00076198  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000056  00000000  00000000  000761a3  2**0
                  CONTENTS, READONLY
 30 .jdi          00004c25  00000000  00000000  000761f9  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a7071  00000000  00000000  0007ae1e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
08011c68 l    d  .rodata	00000000 .rodata
08011fec l    d  .rwdata	00000000 .rwdata
080155dc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
080157a4 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_collector_v3_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
08001990 l     F .text	00000090 pio_init
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011e32 l     O .rodata	00000010 zeroes.4404
080053ac l     F .text	000000bc __sbprintf
08011e42 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080055bc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080070ec l     F .text	00000008 __fp_unlock
08007100 l     F .text	0000019c __sinit.part.1
0800729c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08011fec l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08012430 l     O .rwdata	00000020 lc_ctype_charset
08012410 l     O .rwdata	00000020 lc_message_charset
08012450 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08011e74 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08009d1c l     F .text	000000fc __sprint_r.part.0
08011fa8 l     O .rodata	00000010 blanks.4348
08011f98 l     O .rodata	00000010 zeroes.4349
0800b2a8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0800f0d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800f1e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800f20c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0800f478 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800f558 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800f644 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0800fa80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08013ad8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800fccc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800fe00 l     F .text	00000034 alt_dev_reg
08012a38 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080100f0 l     F .text	0000020c altera_avalon_jtag_uart_irq
080102fc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08010934 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08010b9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08011010 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
08011150 l     F .text	0000003c alt_get_errno
0801118c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08015650 g     O .bss	00000004 alt_instruction_exception_handler
08003180 g     F .text	00000018 putchar
080096c4 g     F .text	00000074 _mprec_log10
080097b0 g     F .text	0000008c __any_on
0800be58 g     F .text	00000054 _isatty_r
08011e80 g     O .rodata	00000028 __mprec_tinytens
0800f754 g     F .text	0000007c alt_main
080156a4 g     O .bss	00000100 alt_irq
0800beac g     F .text	00000060 _lseek_r
08013ae4 g       *ABS*	00000000 __flash_rwdata_start
0800e458 g     F .text	00000088 .hidden __eqdf2
08001af8 g     F .text	000005c8 .hidden __divdi3
080155ec g     O .bss	00000002 dig_P7
080157a4 g       *ABS*	00000000 __alt_heap_start
0800313c g     F .text	0000003c printf
0800c62c g     F .text	0000009c _wcrtomb_r
08009b44 g     F .text	0000005c __sseek
0800743c g     F .text	00000010 __sinit
0800b364 g     F .text	00000140 __swbuf_r
080155dc g     O .bss	00000002 dig_T1
08007a48 g     F .text	0000007c _setlocale_r
080072a4 g     F .text	00000068 __sfmoreglue
0800f7f4 g     F .text	00000024 __malloc_unlock
08002274 g     F .text	00000440 .hidden __divsf3
0800bf0c g     F .text	0000015c memmove
08007424 g     F .text	00000018 _cleanup
08008840 g     F .text	000000a8 _Balloc
0800e4e0 g     F .text	000000dc .hidden __gtdf2
08011548 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800b940 g     F .text	0000005c _fstat_r
08015634 g     O .bss	00000004 errno
08009ac0 g     F .text	00000008 __seofread
08015640 g     O .bss	00000004 alt_argv
0801ba98 g       *ABS*	00000000 _gp
080128b8 g     O .rwdata	00000180 alt_fd_list
08003178 g     F .text	00000008 _putchar_r
0801156c g     F .text	00000090 alt_find_dev
080085d0 g     F .text	00000148 memcpy
080070f4 g     F .text	0000000c _cleanup_r
08002ebc g     F .text	000000dc .hidden __floatsidf
080110d4 g     F .text	0000007c alt_io_redirect
0800e5bc g     F .text	000000f4 .hidden __ltdf2
08000358 g     F .text	000005e8 BME280_compensate_P_int64
08011c68 g       *ABS*	00000000 __DTOR_END__
08011838 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08015614 g     O .bss	00000004 SETUP
080155f8 g     O .bss	00000002 dig_H4
080155de g     O .bss	00000002 dig_T2
080099a4 g     F .text	00000074 __fpclassifyd
08009620 g     F .text	000000a4 __ratio
0800b28c g     F .text	0000001c __vfiprintf_internal
080104f4 g     F .text	0000021c altera_avalon_jtag_uart_read
0800310c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
080021b8 g     F .text	00000064 .hidden __udivsi3
0800f4b4 g     F .text	000000a4 isatty
08011ed0 g     O .rodata	000000c8 __mprec_tens
08007ac4 g     F .text	0000000c __locale_charset
080117a8 g     F .text	00000090 alt_icache_flush
08015630 g     O .bss	00000004 __malloc_top_pad
08013aac g     O .rwdata	00000004 __mb_cur_max
08007af4 g     F .text	0000000c _localeconv_r
0800b99c g     F .text	000004bc __sfvwrite_r
08008c4c g     F .text	0000003c __i2b
08015604 g     O .bss	00000004 p_result
080155f2 g     O .bss	00000001 dig_H1
08009a18 g     F .text	00000054 _sbrk_r
0800c068 g     F .text	00000060 _read_r
08013acc g     O .rwdata	00000004 alt_max_fd
0800b634 g     F .text	000000f0 _fclose_r
080070bc g     F .text	00000030 fflush
0801562c g     O .bss	00000004 __malloc_max_sbrked_mem
0800f2f8 g     F .text	00000180 alt_irq_register
08002f98 g     F .text	00000110 .hidden __extendsfdf2
0800d2c4 g     F .text	000008ac .hidden __adddf3
080093c8 g     F .text	0000010c __b2d
0800cd8c g     F .text	00000538 .hidden __umoddi3
08015608 g     O .bss	00000004 p_result_float
0800f680 g     F .text	000000d4 lseek
08013aa4 g     O .rwdata	00000004 _global_impure_ptr
0800c0c8 g     F .text	00000564 _realloc_r
080157a4 g       *ABS*	00000000 __bss_end
08010f20 g     F .text	000000f0 alt_iic_isr_register
08011440 g     F .text	00000108 alt_tick
0800c814 g     F .text	00000578 .hidden __udivdi3
0800b89c g     F .text	00000024 _fputwc_r
08011ea8 g     O .rodata	00000028 __mprec_bigtens
08008a30 g     F .text	00000104 __s2b
0800f02c g     F .text	000000a8 .hidden __floatunsidf
08009108 g     F .text	00000060 __mcmp
0800745c g     F .text	00000018 __fp_lock_all
08010ed4 g     F .text	0000004c alt_ic_irq_enabled
080113a4 g     F .text	0000009c alt_alarm_stop
08000abc g     F .text	00000168 spi_comm
08015638 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
08012890 g     O .rwdata	00000028 alt_dev_null
080155e2 g     O .bss	00000002 dig_P2
08013a9c g     O .rwdata	00000004 PERIOD_INIT
080155e6 g     O .bss	00000002 dig_P4
08010b54 g     F .text	00000048 alt_dcache_flush_all
08008b34 g     F .text	00000068 __hi0bits
0800efac g     F .text	00000080 .hidden __fixdfsi
08013ae4 g       *ABS*	00000000 __ram_rwdata_end
08013ac4 g     O .rwdata	00000008 alt_dev_list
0800fd08 g     F .text	000000f8 write
0800983c g     F .text	000000a0 _putc_r
08011fec g       *ABS*	00000000 __ram_rodata_end
08001190 g     F .text	00000800 timer_int_handler
0800f248 g     F .text	000000b0 fstat
0800e5bc g     F .text	000000f4 .hidden __ledf2
08008e80 g     F .text	00000140 __pow5mult
08009e30 g     F .text	0000145c ___vfiprintf_internal_r
08015624 g     O .bss	00000004 __nlocale_changed
0800221c g     F .text	00000058 .hidden __umodsi3
080155fc g     O .bss	00000001 dig_H6
080157a4 g       *ABS*	00000000 end
0801567c g     O .bss	00000014 test_output
08010030 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
08011c68 g       *ABS*	00000000 __CTOR_LIST__
09000000 g       *ABS*	00000000 __alt_stack_pointer
080109ac g     F .text	0000007c alt_avalon_timer_sc_init
080030a8 g     F .text	00000064 .hidden __clzsi2
08010710 g     F .text	00000224 altera_avalon_jtag_uart_write
0800744c g     F .text	00000004 __sfp_lock_acquire
080084ec g     F .text	000000e4 memchr
08003198 g     F .text	000021f8 ___vfprintf_internal_r
080075b0 g     F .text	00000310 _free_r
0800f818 g     F .text	0000022c alt_printf
08000e70 g     F .text	00000320 print_array_v
08007ad0 g     F .text	00000010 __locale_mb_cur_max
08011ab4 g     F .text	00000180 __call_exitprocs
08015620 g     O .bss	00000004 __mlocale_changed
08013ab0 g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
08015648 g     O .bss	00000004 _alt_tick_rate
08008fc0 g     F .text	00000148 __lshift
0801564c g     O .bss	00000004 _alt_nticks
0800fabc g     F .text	000000fc read
0800fe6c g     F .text	00000060 alt_sys_init
0801199c g     F .text	00000118 __register_exitproc
080155e8 g     O .bss	00000002 dig_P5
08008c88 g     F .text	000001f8 __multiply
0801039c g     F .text	00000068 altera_avalon_jtag_uart_close
08011fec g       *ABS*	00000000 __ram_rwdata_start
08011c68 g       *ABS*	00000000 __ram_rodata_start
08015654 g     O .bss	00000028 __malloc_current_mallinfo
080094d4 g     F .text	0000014c __d2b
08000940 g     F .text	00000144 bme280_compensate_H_int32
0800fecc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08011704 g     F .text	000000a4 alt_get_fd
08015690 g     O .bss	00000014 test_input
0801560c g     O .bss	00000004 h_result
0800b51c g     F .text	00000054 _close_r
08011920 g     F .text	0000007c memcmp
0800ff8c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080157a4 g       *ABS*	00000000 __alt_stack_base
0800ffdc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08005468 g     F .text	00000154 __swsetup_r
0800db70 g     F .text	000008e8 .hidden __divdf3
0800730c g     F .text	00000118 __sfp
08009738 g     F .text	00000078 __copybits
08012488 g     O .rwdata	00000408 __malloc_av_
08007458 g     F .text	00000004 __sinit_lock_release
080027a4 g     F .text	00000718 .hidden __muldf3
08009a6c g     F .text	00000054 __sread
080115fc g     F .text	00000108 alt_find_file
08010bd8 g     F .text	000000a4 alt_dev_llist_insert
0800f7d0 g     F .text	00000024 __malloc_lock
0800fc1c g     F .text	000000b0 sbrk
08007060 g     F .text	0000005c _fflush_r
0800b570 g     F .text	000000c4 _calloc_r
080155dc g       *ABS*	00000000 __bss_start
08008718 g     F .text	00000128 memset
08001a20 g     F .text	00000078 main
08015644 g     O .bss	00000004 alt_envp
08015628 g     O .bss	00000004 __malloc_max_total_mem
0800ff2c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800b4a4 g     F .text	00000018 __swbuf
08009ba0 g     F .text	00000008 __sclose
09000000 g       *ABS*	00000000 __alt_heap_limit
0800b724 g     F .text	00000014 fclose
080057bc g     F .text	00001688 _dtoa_r
08007ce0 g     F .text	0000080c _malloc_r
0800c788 g     F .text	00000030 __ascii_wctomb
08013ad0 g     O .rwdata	00000004 alt_errno
080078c0 g     F .text	000000c4 _fwalk
080098dc g     F .text	000000c8 putc
080020c0 g     F .text	00000084 .hidden __divsi3
0800748c g     F .text	00000124 _malloc_trim_r
08011c68 g       *ABS*	00000000 __CTOR_END__
08009ba8 g     F .text	000000dc strcmp
08011c68 g       *ABS*	00000000 __flash_rodata_start
08011c68 g       *ABS*	00000000 __DTOR_LIST__
08013a98 g     O .rwdata	00000002 dig_P1
080155e4 g     O .bss	00000002 dig_P3
080155ee g     O .bss	00000002 dig_P8
0800e458 g     F .text	00000088 .hidden __nedf2
08013aa0 g     O .rwdata	00000004 PERIOD
0800fe34 g     F .text	00000038 alt_irq_init
0800fbb8 g     F .text	00000064 alt_release_fd
08011ced g     O .rodata	00000100 .hidden __clz_tab
0801561c g     O .bss	00000004 _PathLocale
080118d4 g     F .text	00000014 atexit
0800b4bc g     F .text	00000060 _write_r
08007b00 g     F .text	00000018 setlocale
08013aa8 g     O .rwdata	00000004 _impure_ptr
0801563c g     O .bss	00000004 alt_argc
08006e44 g     F .text	0000021c __sflush_r
08010cdc g     F .text	00000060 _do_dtors
08007aec g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08009364 g     F .text	00000064 __ulp
08007474 g     F .text	00000018 __fp_unlock_all
080155fa g     O .bss	00000002 dig_H5
08013abc g     O .rwdata	00000008 alt_fs_list
08000c24 g     F .text	00000168 spi_comm_nrf
08015600 g     O .bss	00000004 t_result
08000020 g       *ABS*	00000000 __ram_exceptions_start
08007b18 g     F .text	0000000c localeconv
08000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
08010d70 g     F .text	00000050 alt_ic_isr_register
08013ae4 g       *ABS*	00000000 _edata
080157a4 g       *ABS*	00000000 _end
0800b738 g     F .text	00000164 __fputwc
08000244 g       *ABS*	00000000 __ram_exceptions_end
08010404 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080155f6 g     O .bss	00000001 dig_H3
08010e48 g     F .text	0000008c alt_ic_irq_disable
08009ac8 g     F .text	0000007c __swrite
08013ab4 g     O .rwdata	00000004 __malloc_trim_threshold
08007ae0 g     F .text	0000000c __locale_msgcharset
080118e8 g     F .text	00000038 exit
08007984 g     F .text	000000c4 _fwalk_reent
080026b4 g     F .text	000000f0 .hidden __floatunsisf
08009168 g     F .text	000001fc __mdiff
08000290 g     F .text	000000c8 BME280_compensate_T_int32
08002144 g     F .text	00000074 .hidden __modsi3
09000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08007450 g     F .text	00000004 __sfp_lock_release
080155f0 g     O .bss	00000002 dig_P9
080155e0 g     O .bss	00000002 dig_T3
08015610 g     O .bss	00000004 h_result_float
08011c34 g     F .text	00000034 _exit
08010a28 g     F .text	0000012c alt_alarm_start
08001a98 g     F .text	00000060 .hidden __muldi3
08000d8c g     F .text	000000e4 nrf_init
080155ea g     O .bss	00000002 dig_P6
08007b24 g     F .text	000001bc __smakebuf_r
08000a84 g     F .text	00000038 bme_init
08009c84 g     F .text	00000098 strlen
08011250 g     F .text	00000154 open
0800e4e0 g     F .text	000000dc .hidden __gedf2
0800fa44 g     F .text	0000003c alt_putchar
08013ab8 g     O .rwdata	00000004 __wctomb
08009e18 g     F .text	00000018 __sprint_r
08010d3c g     F .text	00000034 alt_icache_flush_all
080155f4 g     O .bss	00000002 dig_H2
08013ad4 g     O .rwdata	00000004 alt_priority_mask
08010dc0 g     F .text	00000088 alt_ic_irq_enable
08005390 g     F .text	0000001c __vfprintf_internal
0800c7b8 g     F .text	0000005c _wctomb_r
0800e6b0 g     F .text	000008fc .hidden __subdf3
08008b9c g     F .text	000000b0 __lo0bits
08013adc g     O .rwdata	00000008 alt_alarm_list
08010c7c g     F .text	00000060 _do_ctors
08015618 g     O .bss	00000004 t_fine
0800c6c8 g     F .text	000000c0 wcrtomb
0800f110 g     F .text	000000d0 close
0800f5c0 g     F .text	00000084 alt_load
0800b8c0 g     F .text	00000080 fputwc
08007454 g     F .text	00000004 __sinit_lock_acquire
08008910 g     F .text	00000120 __multadd
080088e8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	1095a904 	addi	r2,r2,22180
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	1095a904 	addi	r2,r2,22180
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a6ee17 	ldw	r2,-25672(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a6ee17 	ldw	r2,-25672(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c24034 	movhi	sp,2304
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000260:	d6aea614 	ori	gp,gp,47768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000268:	10957714 	ori	r2,r2,21980

    movhi r3, %hi(__bss_end)
 800026c:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000270:	18d5e914 	ori	r3,r3,22436

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	800f5c00 	call	800f5c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	800f7540 	call	800f754 <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <__alt_data_end+0xff00028c>

08000290 <BME280_compensate_T_int32>:
	float f;
};

// Compensate ADC temperature input from data sheet
long signed int BME280_compensate_T_int32(long signed int adc_T)
{
 8000290:	defffb04 	addi	sp,sp,-20
 8000294:	df000415 	stw	fp,16(sp)
 8000298:	df000404 	addi	fp,sp,16
 800029c:	e13fff15 	stw	r4,-4(fp)
    long signed int var1, var2, T;
    var1 = ((((adc_T>>3) - ((long signed int)dig_T1<<1))) * ((long signed int)dig_T2)) >> 11;
 80002a0:	e0bfff17 	ldw	r2,-4(fp)
 80002a4:	1007d0fa 	srai	r3,r2,3
 80002a8:	d0a6d10b 	ldhu	r2,-25788(gp)
 80002ac:	10bfffcc 	andi	r2,r2,65535
 80002b0:	1085883a 	add	r2,r2,r2
 80002b4:	1887c83a 	sub	r3,r3,r2
 80002b8:	d0a6d18b 	ldhu	r2,-25786(gp)
 80002bc:	10bfffcc 	andi	r2,r2,65535
 80002c0:	10a0001c 	xori	r2,r2,32768
 80002c4:	10a00004 	addi	r2,r2,-32768
 80002c8:	1885383a 	mul	r2,r3,r2
 80002cc:	1005d2fa 	srai	r2,r2,11
 80002d0:	e0bffc15 	stw	r2,-16(fp)
    var2 = (((((adc_T>>4) - ((long signed int)dig_T1)) * ((adc_T>>4) - ((long signed int)dig_T1))) >> 12) * ((long signed int)dig_T3)) >> 14;
 80002d4:	e0bfff17 	ldw	r2,-4(fp)
 80002d8:	1007d13a 	srai	r3,r2,4
 80002dc:	d0a6d10b 	ldhu	r2,-25788(gp)
 80002e0:	10bfffcc 	andi	r2,r2,65535
 80002e4:	1887c83a 	sub	r3,r3,r2
 80002e8:	e0bfff17 	ldw	r2,-4(fp)
 80002ec:	1009d13a 	srai	r4,r2,4
 80002f0:	d0a6d10b 	ldhu	r2,-25788(gp)
 80002f4:	10bfffcc 	andi	r2,r2,65535
 80002f8:	2085c83a 	sub	r2,r4,r2
 80002fc:	1885383a 	mul	r2,r3,r2
 8000300:	1007d33a 	srai	r3,r2,12
 8000304:	d0a6d20b 	ldhu	r2,-25784(gp)
 8000308:	10bfffcc 	andi	r2,r2,65535
 800030c:	10a0001c 	xori	r2,r2,32768
 8000310:	10a00004 	addi	r2,r2,-32768
 8000314:	1885383a 	mul	r2,r3,r2
 8000318:	1005d3ba 	srai	r2,r2,14
 800031c:	e0bffd15 	stw	r2,-12(fp)
    t_fine = var1 + var2;
 8000320:	e0fffc17 	ldw	r3,-16(fp)
 8000324:	e0bffd17 	ldw	r2,-12(fp)
 8000328:	1885883a 	add	r2,r3,r2
 800032c:	d0a6e015 	stw	r2,-25728(gp)
    T = (t_fine * 5 + 128) >> 8;
 8000330:	d0a6e017 	ldw	r2,-25728(gp)
 8000334:	10800164 	muli	r2,r2,5
 8000338:	10802004 	addi	r2,r2,128
 800033c:	1005d23a 	srai	r2,r2,8
 8000340:	e0bffe15 	stw	r2,-8(fp)
    return T;
 8000344:	e0bffe17 	ldw	r2,-8(fp)
}
 8000348:	e037883a 	mov	sp,fp
 800034c:	df000017 	ldw	fp,0(sp)
 8000350:	dec00104 	addi	sp,sp,4
 8000354:	f800283a 	ret

08000358 <BME280_compensate_P_int64>:

// Compensate ADC pressure input from data sheet
long unsigned int BME280_compensate_P_int64(long unsigned int adc_P)
{
 8000358:	deffd304 	addi	sp,sp,-180
 800035c:	dfc02c15 	stw	ra,176(sp)
 8000360:	df002b15 	stw	fp,172(sp)
 8000364:	ddc02a15 	stw	r23,168(sp)
 8000368:	dd802915 	stw	r22,164(sp)
 800036c:	dd402815 	stw	r21,160(sp)
 8000370:	dd002715 	stw	r20,156(sp)
 8000374:	dcc02615 	stw	r19,152(sp)
 8000378:	dc802515 	stw	r18,148(sp)
 800037c:	dc402415 	stw	r17,144(sp)
 8000380:	dc002315 	stw	r16,140(sp)
 8000384:	df002b04 	addi	fp,sp,172
 8000388:	e13fdb15 	stw	r4,-148(fp)
	long long signed int var1, var2, p;
	var1 = ((long long signed int)t_fine) - 128000;
 800038c:	d0a6e017 	ldw	r2,-25728(gp)
 8000390:	100f883a 	mov	r7,r2
 8000394:	1005d7fa 	srai	r2,r2,31
 8000398:	1011883a 	mov	r8,r2
 800039c:	013fffb4 	movhi	r4,65534
 80003a0:	21030004 	addi	r4,r4,3072
 80003a4:	017fffc4 	movi	r5,-1
 80003a8:	3905883a 	add	r2,r7,r4
 80003ac:	11cd803a 	cmpltu	r6,r2,r7
 80003b0:	4147883a 	add	r3,r8,r5
 80003b4:	30c9883a 	add	r4,r6,r3
 80003b8:	2007883a 	mov	r3,r4
 80003bc:	e0bfd515 	stw	r2,-172(fp)
 80003c0:	e0ffd615 	stw	r3,-168(fp)
	var2 = var1 * var1 * (long long signed int)dig_P6;
 80003c4:	e1bfd517 	ldw	r6,-172(fp)
 80003c8:	e1ffd617 	ldw	r7,-168(fp)
 80003cc:	e13fd517 	ldw	r4,-172(fp)
 80003d0:	e17fd617 	ldw	r5,-168(fp)
 80003d4:	8001a980 	call	8001a98 <__muldi3>
 80003d8:	1009883a 	mov	r4,r2
 80003dc:	180b883a 	mov	r5,r3
 80003e0:	2011883a 	mov	r8,r4
 80003e4:	2813883a 	mov	r9,r5
 80003e8:	d0a6d48b 	ldhu	r2,-25774(gp)
 80003ec:	10bfffcc 	andi	r2,r2,65535
 80003f0:	10a0001c 	xori	r2,r2,32768
 80003f4:	10a00004 	addi	r2,r2,-32768
 80003f8:	e0bfdc15 	stw	r2,-144(fp)
 80003fc:	1005d7fa 	srai	r2,r2,31
 8000400:	e0bfdd15 	stw	r2,-140(fp)
 8000404:	e1bfdc17 	ldw	r6,-144(fp)
 8000408:	e1ffdd17 	ldw	r7,-140(fp)
 800040c:	4009883a 	mov	r4,r8
 8000410:	480b883a 	mov	r5,r9
 8000414:	8001a980 	call	8001a98 <__muldi3>
 8000418:	1009883a 	mov	r4,r2
 800041c:	180b883a 	mov	r5,r3
 8000420:	e13fd715 	stw	r4,-164(fp)
 8000424:	e17fd815 	stw	r5,-160(fp)
	var2 = var2 + ((var1*(long long signed int)dig_P5)<<17);
 8000428:	d0a6d40b 	ldhu	r2,-25776(gp)
 800042c:	10bfffcc 	andi	r2,r2,65535
 8000430:	10a0001c 	xori	r2,r2,32768
 8000434:	10a00004 	addi	r2,r2,-32768
 8000438:	e0bfde15 	stw	r2,-136(fp)
 800043c:	1005d7fa 	srai	r2,r2,31
 8000440:	e0bfdf15 	stw	r2,-132(fp)
 8000444:	e1bfd517 	ldw	r6,-172(fp)
 8000448:	e1ffd617 	ldw	r7,-168(fp)
 800044c:	e13fde17 	ldw	r4,-136(fp)
 8000450:	e17fdf17 	ldw	r5,-132(fp)
 8000454:	8001a980 	call	8001a98 <__muldi3>
 8000458:	1009883a 	mov	r4,r2
 800045c:	180b883a 	mov	r5,r3
 8000460:	2005883a 	mov	r2,r4
 8000464:	2807883a 	mov	r3,r5
 8000468:	1008d3fa 	srli	r4,r2,15
 800046c:	1822947a 	slli	r17,r3,17
 8000470:	2462b03a 	or	r17,r4,r17
 8000474:	1020947a 	slli	r16,r2,17
 8000478:	e13fd717 	ldw	r4,-164(fp)
 800047c:	e17fd817 	ldw	r5,-160(fp)
 8000480:	2405883a 	add	r2,r4,r16
 8000484:	110d803a 	cmpltu	r6,r2,r4
 8000488:	2c47883a 	add	r3,r5,r17
 800048c:	30c9883a 	add	r4,r6,r3
 8000490:	2007883a 	mov	r3,r4
 8000494:	e0bfd715 	stw	r2,-164(fp)
 8000498:	e0ffd815 	stw	r3,-160(fp)
	var2 = var2 + (((long long signed int)dig_P4)<<35);
 800049c:	d0a6d38b 	ldhu	r2,-25778(gp)
 80004a0:	10bfffcc 	andi	r2,r2,65535
 80004a4:	10a0001c 	xori	r2,r2,32768
 80004a8:	10a00004 	addi	r2,r2,-32768
 80004ac:	e0bfe015 	stw	r2,-128(fp)
 80004b0:	1005d7fa 	srai	r2,r2,31
 80004b4:	e0bfe115 	stw	r2,-124(fp)
 80004b8:	e0bfe017 	ldw	r2,-128(fp)
 80004bc:	100490fa 	slli	r2,r2,3
 80004c0:	e0bfe315 	stw	r2,-116(fp)
 80004c4:	e03fe215 	stw	zero,-120(fp)
 80004c8:	e13fd717 	ldw	r4,-164(fp)
 80004cc:	e17fd817 	ldw	r5,-160(fp)
 80004d0:	e1bfe217 	ldw	r6,-120(fp)
 80004d4:	2185883a 	add	r2,r4,r6
 80004d8:	110d803a 	cmpltu	r6,r2,r4
 80004dc:	e1ffe317 	ldw	r7,-116(fp)
 80004e0:	29c7883a 	add	r3,r5,r7
 80004e4:	30c9883a 	add	r4,r6,r3
 80004e8:	2007883a 	mov	r3,r4
 80004ec:	e0bfd715 	stw	r2,-164(fp)
 80004f0:	e0ffd815 	stw	r3,-160(fp)
	var1 = ((var1 * var1 * (long long signed int)dig_P3)>>8) + ((var1 * (long long signed int)dig_P2)<<12);
 80004f4:	e1bfd517 	ldw	r6,-172(fp)
 80004f8:	e1ffd617 	ldw	r7,-168(fp)
 80004fc:	e13fd517 	ldw	r4,-172(fp)
 8000500:	e17fd617 	ldw	r5,-168(fp)
 8000504:	8001a980 	call	8001a98 <__muldi3>
 8000508:	1009883a 	mov	r4,r2
 800050c:	180b883a 	mov	r5,r3
 8000510:	2011883a 	mov	r8,r4
 8000514:	2813883a 	mov	r9,r5
 8000518:	d0a6d30b 	ldhu	r2,-25780(gp)
 800051c:	10bfffcc 	andi	r2,r2,65535
 8000520:	10a0001c 	xori	r2,r2,32768
 8000524:	10a00004 	addi	r2,r2,-32768
 8000528:	e0bfe415 	stw	r2,-112(fp)
 800052c:	1005d7fa 	srai	r2,r2,31
 8000530:	e0bfe515 	stw	r2,-108(fp)
 8000534:	e1bfe417 	ldw	r6,-112(fp)
 8000538:	e1ffe517 	ldw	r7,-108(fp)
 800053c:	4009883a 	mov	r4,r8
 8000540:	480b883a 	mov	r5,r9
 8000544:	8001a980 	call	8001a98 <__muldi3>
 8000548:	1009883a 	mov	r4,r2
 800054c:	180b883a 	mov	r5,r3
 8000550:	2005883a 	mov	r2,r4
 8000554:	2807883a 	mov	r3,r5
 8000558:	1808963a 	slli	r4,r3,24
 800055c:	102cd23a 	srli	r22,r2,8
 8000560:	25acb03a 	or	r22,r4,r22
 8000564:	182fd23a 	srai	r23,r3,8
 8000568:	d0a6d28b 	ldhu	r2,-25782(gp)
 800056c:	10bfffcc 	andi	r2,r2,65535
 8000570:	10a0001c 	xori	r2,r2,32768
 8000574:	10a00004 	addi	r2,r2,-32768
 8000578:	e0bfe615 	stw	r2,-104(fp)
 800057c:	1005d7fa 	srai	r2,r2,31
 8000580:	e0bfe715 	stw	r2,-100(fp)
 8000584:	e1bfd517 	ldw	r6,-172(fp)
 8000588:	e1ffd617 	ldw	r7,-168(fp)
 800058c:	e13fe617 	ldw	r4,-104(fp)
 8000590:	e17fe717 	ldw	r5,-100(fp)
 8000594:	8001a980 	call	8001a98 <__muldi3>
 8000598:	1009883a 	mov	r4,r2
 800059c:	180b883a 	mov	r5,r3
 80005a0:	2005883a 	mov	r2,r4
 80005a4:	2807883a 	mov	r3,r5
 80005a8:	1008d53a 	srli	r4,r2,20
 80005ac:	180a933a 	slli	r5,r3,12
 80005b0:	e17fe915 	stw	r5,-92(fp)
 80005b4:	e1bfe917 	ldw	r6,-92(fp)
 80005b8:	2188b03a 	or	r4,r4,r6
 80005bc:	e13fe915 	stw	r4,-92(fp)
 80005c0:	100e933a 	slli	r7,r2,12
 80005c4:	e1ffe815 	stw	r7,-96(fp)
 80005c8:	e13fe817 	ldw	r4,-96(fp)
 80005cc:	b105883a 	add	r2,r22,r4
 80005d0:	1589803a 	cmpltu	r4,r2,r22
 80005d4:	e17fe917 	ldw	r5,-92(fp)
 80005d8:	b947883a 	add	r3,r23,r5
 80005dc:	20c9883a 	add	r4,r4,r3
 80005e0:	2007883a 	mov	r3,r4
 80005e4:	e0bfd515 	stw	r2,-172(fp)
 80005e8:	e0ffd615 	stw	r3,-168(fp)
	var1 = (((((long long signed int)1)<<47)+var1))*((long long signed int)dig_P1)>>33;
 80005ec:	e13fd517 	ldw	r4,-172(fp)
 80005f0:	e17fd617 	ldw	r5,-168(fp)
 80005f4:	000d883a 	mov	r6,zero
 80005f8:	01e00014 	movui	r7,32768
 80005fc:	2185883a 	add	r2,r4,r6
 8000600:	1111803a 	cmpltu	r8,r2,r4
 8000604:	29c7883a 	add	r3,r5,r7
 8000608:	40c9883a 	add	r4,r8,r3
 800060c:	2007883a 	mov	r3,r4
 8000610:	1011883a 	mov	r8,r2
 8000614:	1813883a 	mov	r9,r3
 8000618:	d0a0000b 	ldhu	r2,-32768(gp)
 800061c:	10bfffcc 	andi	r2,r2,65535
 8000620:	e0bfea15 	stw	r2,-88(fp)
 8000624:	e03feb15 	stw	zero,-84(fp)
 8000628:	e1bfea17 	ldw	r6,-88(fp)
 800062c:	e1ffeb17 	ldw	r7,-84(fp)
 8000630:	4009883a 	mov	r4,r8
 8000634:	480b883a 	mov	r5,r9
 8000638:	8001a980 	call	8001a98 <__muldi3>
 800063c:	1009883a 	mov	r4,r2
 8000640:	180b883a 	mov	r5,r3
 8000644:	2005883a 	mov	r2,r4
 8000648:	2807883a 	mov	r3,r5
 800064c:	1809d07a 	srai	r4,r3,1
 8000650:	e13fd515 	stw	r4,-172(fp)
 8000654:	1805d7fa 	srai	r2,r3,31
 8000658:	e0bfd615 	stw	r2,-168(fp)
	if (var1 == 0)
 800065c:	e0bfd517 	ldw	r2,-172(fp)
 8000660:	e0ffd617 	ldw	r3,-168(fp)
 8000664:	10c4b03a 	or	r2,r2,r3
 8000668:	1000021e 	bne	r2,zero,8000674 <BME280_compensate_P_int64+0x31c>
	{
		return 0; // avoid exception caused by division by zero
 800066c:	0005883a 	mov	r2,zero
 8000670:	0000a606 	br	800090c <BME280_compensate_P_int64+0x5b4>
	}
	p = 1048576-adc_P;
 8000674:	00c00434 	movhi	r3,16
 8000678:	e0bfdb17 	ldw	r2,-148(fp)
 800067c:	1885c83a 	sub	r2,r3,r2
 8000680:	e0bfd915 	stw	r2,-156(fp)
 8000684:	e03fda15 	stw	zero,-152(fp)
	p = (((p<<31)-var2)*3125)/var1;
 8000688:	e0bfd917 	ldw	r2,-156(fp)
 800068c:	1004d07a 	srli	r2,r2,1
 8000690:	e0ffda17 	ldw	r3,-152(fp)
 8000694:	182a97fa 	slli	r21,r3,31
 8000698:	156ab03a 	or	r21,r2,r21
 800069c:	e0bfd917 	ldw	r2,-156(fp)
 80006a0:	102897fa 	slli	r20,r2,31
 80006a4:	e13fd717 	ldw	r4,-164(fp)
 80006a8:	e17fd817 	ldw	r5,-160(fp)
 80006ac:	a105c83a 	sub	r2,r20,r4
 80006b0:	a08d803a 	cmpltu	r6,r20,r2
 80006b4:	a947c83a 	sub	r3,r21,r5
 80006b8:	1989c83a 	sub	r4,r3,r6
 80006bc:	2007883a 	mov	r3,r4
 80006c0:	1011883a 	mov	r8,r2
 80006c4:	1813883a 	mov	r9,r3
 80006c8:	01830d44 	movi	r6,3125
 80006cc:	000f883a 	mov	r7,zero
 80006d0:	4009883a 	mov	r4,r8
 80006d4:	480b883a 	mov	r5,r9
 80006d8:	8001a980 	call	8001a98 <__muldi3>
 80006dc:	1009883a 	mov	r4,r2
 80006e0:	180b883a 	mov	r5,r3
 80006e4:	2005883a 	mov	r2,r4
 80006e8:	2807883a 	mov	r3,r5
 80006ec:	e1bfd517 	ldw	r6,-172(fp)
 80006f0:	e1ffd617 	ldw	r7,-168(fp)
 80006f4:	1009883a 	mov	r4,r2
 80006f8:	180b883a 	mov	r5,r3
 80006fc:	8001af80 	call	8001af8 <__divdi3>
 8000700:	1009883a 	mov	r4,r2
 8000704:	180b883a 	mov	r5,r3
 8000708:	e13fd915 	stw	r4,-156(fp)
 800070c:	e17fda15 	stw	r5,-152(fp)
	var1 = (((long long signed int)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000710:	d0a6d60b 	ldhu	r2,-25768(gp)
 8000714:	10bfffcc 	andi	r2,r2,65535
 8000718:	10a0001c 	xori	r2,r2,32768
 800071c:	10a00004 	addi	r2,r2,-32768
 8000720:	e0bfec15 	stw	r2,-80(fp)
 8000724:	1005d7fa 	srai	r2,r2,31
 8000728:	e0bfed15 	stw	r2,-76(fp)
 800072c:	e0bfda17 	ldw	r2,-152(fp)
 8000730:	100494fa 	slli	r2,r2,19
 8000734:	e0ffd917 	ldw	r3,-156(fp)
 8000738:	1806d37a 	srli	r3,r3,13
 800073c:	e0ffee15 	stw	r3,-72(fp)
 8000740:	e1bfee17 	ldw	r6,-72(fp)
 8000744:	1184b03a 	or	r2,r2,r6
 8000748:	e0bfee15 	stw	r2,-72(fp)
 800074c:	e0bfda17 	ldw	r2,-152(fp)
 8000750:	1005d37a 	srai	r2,r2,13
 8000754:	e0bfef15 	stw	r2,-68(fp)
 8000758:	e1bfee17 	ldw	r6,-72(fp)
 800075c:	e1ffef17 	ldw	r7,-68(fp)
 8000760:	e13fec17 	ldw	r4,-80(fp)
 8000764:	e17fed17 	ldw	r5,-76(fp)
 8000768:	8001a980 	call	8001a98 <__muldi3>
 800076c:	1009883a 	mov	r4,r2
 8000770:	180b883a 	mov	r5,r3
 8000774:	2005883a 	mov	r2,r4
 8000778:	2807883a 	mov	r3,r5
 800077c:	e13fda17 	ldw	r4,-152(fp)
 8000780:	200894fa 	slli	r4,r4,19
 8000784:	e17fd917 	ldw	r5,-156(fp)
 8000788:	280ad37a 	srli	r5,r5,13
 800078c:	e17ff015 	stw	r5,-64(fp)
 8000790:	e1fff017 	ldw	r7,-64(fp)
 8000794:	21c8b03a 	or	r4,r4,r7
 8000798:	e13ff015 	stw	r4,-64(fp)
 800079c:	e13fda17 	ldw	r4,-152(fp)
 80007a0:	2009d37a 	srai	r4,r4,13
 80007a4:	e13ff115 	stw	r4,-60(fp)
 80007a8:	e1bff017 	ldw	r6,-64(fp)
 80007ac:	e1fff117 	ldw	r7,-60(fp)
 80007b0:	1009883a 	mov	r4,r2
 80007b4:	180b883a 	mov	r5,r3
 80007b8:	8001a980 	call	8001a98 <__muldi3>
 80007bc:	1009883a 	mov	r4,r2
 80007c0:	180b883a 	mov	r5,r3
 80007c4:	2005883a 	mov	r2,r4
 80007c8:	2807883a 	mov	r3,r5
 80007cc:	180891fa 	slli	r4,r3,7
 80007d0:	100ad67a 	srli	r5,r2,25
 80007d4:	2908b03a 	or	r4,r5,r4
 80007d8:	e13fd515 	stw	r4,-172(fp)
 80007dc:	1805d67a 	srai	r2,r3,25
 80007e0:	e0bfd615 	stw	r2,-168(fp)
	var2 = (((long long signed int)dig_P8) * p) >> 19;
 80007e4:	d0a6d58b 	ldhu	r2,-25770(gp)
 80007e8:	10bfffcc 	andi	r2,r2,65535
 80007ec:	10a0001c 	xori	r2,r2,32768
 80007f0:	10a00004 	addi	r2,r2,-32768
 80007f4:	e0bff215 	stw	r2,-56(fp)
 80007f8:	1005d7fa 	srai	r2,r2,31
 80007fc:	e0bff315 	stw	r2,-52(fp)
 8000800:	e1bfd917 	ldw	r6,-156(fp)
 8000804:	e1ffda17 	ldw	r7,-152(fp)
 8000808:	e13ff217 	ldw	r4,-56(fp)
 800080c:	e17ff317 	ldw	r5,-52(fp)
 8000810:	8001a980 	call	8001a98 <__muldi3>
 8000814:	1009883a 	mov	r4,r2
 8000818:	180b883a 	mov	r5,r3
 800081c:	2005883a 	mov	r2,r4
 8000820:	2807883a 	mov	r3,r5
 8000824:	1808937a 	slli	r4,r3,13
 8000828:	100ad4fa 	srli	r5,r2,19
 800082c:	2908b03a 	or	r4,r5,r4
 8000830:	e13fd715 	stw	r4,-164(fp)
 8000834:	1805d4fa 	srai	r2,r3,19
 8000838:	e0bfd815 	stw	r2,-160(fp)
	p = ((p + var1 + var2) >> 8) + (((long long signed int)dig_P7)<<4);
 800083c:	e13fd917 	ldw	r4,-156(fp)
 8000840:	e17fda17 	ldw	r5,-152(fp)
 8000844:	e1bfd517 	ldw	r6,-172(fp)
 8000848:	e1ffd617 	ldw	r7,-168(fp)
 800084c:	2185883a 	add	r2,r4,r6
 8000850:	1111803a 	cmpltu	r8,r2,r4
 8000854:	29c7883a 	add	r3,r5,r7
 8000858:	40c9883a 	add	r4,r8,r3
 800085c:	2007883a 	mov	r3,r4
 8000860:	100d883a 	mov	r6,r2
 8000864:	180f883a 	mov	r7,r3
 8000868:	e13fd717 	ldw	r4,-164(fp)
 800086c:	e17fd817 	ldw	r5,-160(fp)
 8000870:	3105883a 	add	r2,r6,r4
 8000874:	1191803a 	cmpltu	r8,r2,r6
 8000878:	3947883a 	add	r3,r7,r5
 800087c:	40c9883a 	add	r4,r8,r3
 8000880:	2007883a 	mov	r3,r4
 8000884:	1009883a 	mov	r4,r2
 8000888:	180b883a 	mov	r5,r3
 800088c:	2804963a 	slli	r2,r5,24
 8000890:	2024d23a 	srli	r18,r4,8
 8000894:	14a4b03a 	or	r18,r2,r18
 8000898:	2827d23a 	srai	r19,r5,8
 800089c:	d0a6d50b 	ldhu	r2,-25772(gp)
 80008a0:	10bfffcc 	andi	r2,r2,65535
 80008a4:	10a0001c 	xori	r2,r2,32768
 80008a8:	10a00004 	addi	r2,r2,-32768
 80008ac:	e0bff415 	stw	r2,-48(fp)
 80008b0:	1005d7fa 	srai	r2,r2,31
 80008b4:	e0bff515 	stw	r2,-44(fp)
 80008b8:	e0fff417 	ldw	r3,-48(fp)
 80008bc:	1804d73a 	srli	r2,r3,28
 80008c0:	e13ff517 	ldw	r4,-44(fp)
 80008c4:	2008913a 	slli	r4,r4,4
 80008c8:	e13ff715 	stw	r4,-36(fp)
 80008cc:	e17ff717 	ldw	r5,-36(fp)
 80008d0:	1144b03a 	or	r2,r2,r5
 80008d4:	e0bff715 	stw	r2,-36(fp)
 80008d8:	e1bff417 	ldw	r6,-48(fp)
 80008dc:	300c913a 	slli	r6,r6,4
 80008e0:	e1bff615 	stw	r6,-40(fp)
 80008e4:	e1fff617 	ldw	r7,-40(fp)
 80008e8:	91c5883a 	add	r2,r18,r7
 80008ec:	1489803a 	cmpltu	r4,r2,r18
 80008f0:	e17ff717 	ldw	r5,-36(fp)
 80008f4:	9947883a 	add	r3,r19,r5
 80008f8:	20c9883a 	add	r4,r4,r3
 80008fc:	2007883a 	mov	r3,r4
 8000900:	e0bfd915 	stw	r2,-156(fp)
 8000904:	e0ffda15 	stw	r3,-152(fp)
	return (long unsigned int)p;
 8000908:	e0bfd917 	ldw	r2,-156(fp)
}
 800090c:	e6fff804 	addi	sp,fp,-32
 8000910:	dfc00917 	ldw	ra,36(sp)
 8000914:	df000817 	ldw	fp,32(sp)
 8000918:	ddc00717 	ldw	r23,28(sp)
 800091c:	dd800617 	ldw	r22,24(sp)
 8000920:	dd400517 	ldw	r21,20(sp)
 8000924:	dd000417 	ldw	r20,16(sp)
 8000928:	dcc00317 	ldw	r19,12(sp)
 800092c:	dc800217 	ldw	r18,8(sp)
 8000930:	dc400117 	ldw	r17,4(sp)
 8000934:	dc000017 	ldw	r16,0(sp)
 8000938:	dec00a04 	addi	sp,sp,40
 800093c:	f800283a 	ret

08000940 <bme280_compensate_H_int32>:

// Compensate ADC humidity input from data sheet
long unsigned int bme280_compensate_H_int32(long signed int adc_H)
{
 8000940:	defffd04 	addi	sp,sp,-12
 8000944:	df000215 	stw	fp,8(sp)
 8000948:	df000204 	addi	fp,sp,8
 800094c:	e13fff15 	stw	r4,-4(fp)
	long signed int v_x1_u32r;
	v_x1_u32r = (t_fine - ((long signed int)76800));
 8000950:	d0e6e017 	ldw	r3,-25728(gp)
 8000954:	00bffff4 	movhi	r2,65535
 8000958:	10b50004 	addi	r2,r2,-11264
 800095c:	1885883a 	add	r2,r3,r2
 8000960:	e0bffe15 	stw	r2,-8(fp)
	v_x1_u32r = (((((adc_H << 14) - (((long signed int)dig_H4) << 20) - (((long signed int)dig_H5) * v_x1_u32r)) +
 8000964:	e0bfff17 	ldw	r2,-4(fp)
 8000968:	100693ba 	slli	r3,r2,14
 800096c:	d0a6d80b 	ldhu	r2,-25760(gp)
 8000970:	10bfffcc 	andi	r2,r2,65535
 8000974:	10a0001c 	xori	r2,r2,32768
 8000978:	10a00004 	addi	r2,r2,-32768
 800097c:	1004953a 	slli	r2,r2,20
 8000980:	1887c83a 	sub	r3,r3,r2
 8000984:	d0a6d88b 	ldhu	r2,-25758(gp)
 8000988:	113fffcc 	andi	r4,r2,65535
 800098c:	2120001c 	xori	r4,r4,32768
 8000990:	21200004 	addi	r4,r4,-32768
 8000994:	e0bffe17 	ldw	r2,-8(fp)
 8000998:	2085383a 	mul	r2,r4,r2
 800099c:	1885c83a 	sub	r2,r3,r2
 80009a0:	10900004 	addi	r2,r2,16384
	((long signed int)16384)) >> 15) * (((((((v_x1_u32r * ((long signed int)dig_H6)) >> 10) * (((v_x1_u32r *
 80009a4:	1007d3fa 	srai	r3,r2,15
 80009a8:	d0a6d903 	ldbu	r2,-25756(gp)
 80009ac:	11003fcc 	andi	r4,r2,255
 80009b0:	2100201c 	xori	r4,r4,128
 80009b4:	213fe004 	addi	r4,r4,-128
 80009b8:	e0bffe17 	ldw	r2,-8(fp)
 80009bc:	2085383a 	mul	r2,r4,r2
 80009c0:	1009d2ba 	srai	r4,r2,10
	((long signed int)dig_H3)) >> 11) + ((long signed int)32768))) >> 10) + ((long signed int)2097152)) *
 80009c4:	d0a6d783 	ldbu	r2,-25762(gp)
 80009c8:	11403fcc 	andi	r5,r2,255
long unsigned int bme280_compensate_H_int32(long signed int adc_H)
{
	long signed int v_x1_u32r;
	v_x1_u32r = (t_fine - ((long signed int)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long signed int)dig_H4) << 20) - (((long signed int)dig_H5) * v_x1_u32r)) +
	((long signed int)16384)) >> 15) * (((((((v_x1_u32r * ((long signed int)dig_H6)) >> 10) * (((v_x1_u32r *
 80009cc:	e0bffe17 	ldw	r2,-8(fp)
 80009d0:	2885383a 	mul	r2,r5,r2
	((long signed int)dig_H3)) >> 11) + ((long signed int)32768))) >> 10) + ((long signed int)2097152)) *
 80009d4:	100bd2fa 	srai	r5,r2,11
 80009d8:	00a00014 	movui	r2,32768
 80009dc:	2885883a 	add	r2,r5,r2
long unsigned int bme280_compensate_H_int32(long signed int adc_H)
{
	long signed int v_x1_u32r;
	v_x1_u32r = (t_fine - ((long signed int)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long signed int)dig_H4) << 20) - (((long signed int)dig_H5) * v_x1_u32r)) +
	((long signed int)16384)) >> 15) * (((((((v_x1_u32r * ((long signed int)dig_H6)) >> 10) * (((v_x1_u32r *
 80009e0:	2085383a 	mul	r2,r4,r2
	((long signed int)dig_H3)) >> 11) + ((long signed int)32768))) >> 10) + ((long signed int)2097152)) *
 80009e4:	1009d2ba 	srai	r4,r2,10
 80009e8:	00800834 	movhi	r2,32
 80009ec:	2089883a 	add	r4,r4,r2
	((long signed int)dig_H2) + 8192) >> 14));
 80009f0:	d0a6d70b 	ldhu	r2,-25764(gp)
 80009f4:	10bfffcc 	andi	r2,r2,65535
 80009f8:	10a0001c 	xori	r2,r2,32768
 80009fc:	10a00004 	addi	r2,r2,-32768
{
	long signed int v_x1_u32r;
	v_x1_u32r = (t_fine - ((long signed int)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long signed int)dig_H4) << 20) - (((long signed int)dig_H5) * v_x1_u32r)) +
	((long signed int)16384)) >> 15) * (((((((v_x1_u32r * ((long signed int)dig_H6)) >> 10) * (((v_x1_u32r *
	((long signed int)dig_H3)) >> 11) + ((long signed int)32768))) >> 10) + ((long signed int)2097152)) *
 8000a00:	2085383a 	mul	r2,r4,r2
	((long signed int)dig_H2) + 8192) >> 14));
 8000a04:	10880004 	addi	r2,r2,8192
 8000a08:	1005d3ba 	srai	r2,r2,14
// Compensate ADC humidity input from data sheet
long unsigned int bme280_compensate_H_int32(long signed int adc_H)
{
	long signed int v_x1_u32r;
	v_x1_u32r = (t_fine - ((long signed int)76800));
	v_x1_u32r = (((((adc_H << 14) - (((long signed int)dig_H4) << 20) - (((long signed int)dig_H5) * v_x1_u32r)) +
 8000a0c:	1885383a 	mul	r2,r3,r2
 8000a10:	e0bffe15 	stw	r2,-8(fp)
	((long signed int)16384)) >> 15) * (((((((v_x1_u32r * ((long signed int)dig_H6)) >> 10) * (((v_x1_u32r *
	((long signed int)dig_H3)) >> 11) + ((long signed int)32768))) >> 10) + ((long signed int)2097152)) *
	((long signed int)dig_H2) + 8192) >> 14));
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((long signed int)dig_H1)) >> 4));
 8000a14:	e0bffe17 	ldw	r2,-8(fp)
 8000a18:	1007d3fa 	srai	r3,r2,15
 8000a1c:	e0bffe17 	ldw	r2,-8(fp)
 8000a20:	1005d3fa 	srai	r2,r2,15
 8000a24:	1885383a 	mul	r2,r3,r2
 8000a28:	1007d1fa 	srai	r3,r2,7
 8000a2c:	d0a6d683 	ldbu	r2,-25766(gp)
 8000a30:	10803fcc 	andi	r2,r2,255
 8000a34:	1885383a 	mul	r2,r3,r2
 8000a38:	1005d13a 	srai	r2,r2,4
 8000a3c:	e0fffe17 	ldw	r3,-8(fp)
 8000a40:	1885c83a 	sub	r2,r3,r2
 8000a44:	e0bffe15 	stw	r2,-8(fp)
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8000a48:	e0bffe17 	ldw	r2,-8(fp)
 8000a4c:	1000010e 	bge	r2,zero,8000a54 <bme280_compensate_H_int32+0x114>
 8000a50:	0005883a 	mov	r2,zero
 8000a54:	e0bffe15 	stw	r2,-8(fp)
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8000a58:	e0bffe17 	ldw	r2,-8(fp)
 8000a5c:	00c64034 	movhi	r3,6400
 8000a60:	1880010e 	bge	r3,r2,8000a68 <bme280_compensate_H_int32+0x128>
 8000a64:	00864034 	movhi	r2,6400
 8000a68:	e0bffe15 	stw	r2,-8(fp)
	return (long unsigned int)(v_x1_u32r>>12);
 8000a6c:	e0bffe17 	ldw	r2,-8(fp)
 8000a70:	1005d33a 	srai	r2,r2,12
}
 8000a74:	e037883a 	mov	sp,fp
 8000a78:	df000017 	ldw	fp,0(sp)
 8000a7c:	dec00104 	addi	sp,sp,4
 8000a80:	f800283a 	ret

08000a84 <bme_init>:

void bme_init()
{
 8000a84:	deffff04 	addi	sp,sp,-4
 8000a88:	df000015 	stw	fp,0(sp)
 8000a8c:	d839883a 	mov	fp,sp
	IOWR(BME_SCK_BASE, 0, 0);	//Initializes clock to 0
 8000a90:	0007883a 	mov	r3,zero
 8000a94:	00882c04 	movi	r2,8368
 8000a98:	10c00035 	stwio	r3,0(r2)
	IOWR(BME_CSN_BASE, 0, 1);	//Initializes csn to 1
 8000a9c:	00c00044 	movi	r3,1
 8000aa0:	00883004 	movi	r2,8384
 8000aa4:	10c00035 	stwio	r3,0(r2)
}
 8000aa8:	0001883a 	nop
 8000aac:	e037883a 	mov	sp,fp
 8000ab0:	df000017 	ldw	fp,0(sp)
 8000ab4:	dec00104 	addi	sp,sp,4
 8000ab8:	f800283a 	ret

08000abc <spi_comm>:



void spi_comm (uint8_t input[], uint8_t output[], int in_length, int out_length)
{
 8000abc:	defff804 	addi	sp,sp,-32
 8000ac0:	df000715 	stw	fp,28(sp)
 8000ac4:	df000704 	addi	fp,sp,28
 8000ac8:	e13ffc15 	stw	r4,-16(fp)
 8000acc:	e17ffd15 	stw	r5,-12(fp)
 8000ad0:	e1bffe15 	stw	r6,-8(fp)
 8000ad4:	e1ffff15 	stw	r7,-4(fp)
	for(int i = 0; i < out_length; i++)	//Initializing output array to all zeros
 8000ad8:	e03ff915 	stw	zero,-28(fp)
 8000adc:	00000706 	br	8000afc <spi_comm+0x40>
	{
		output[i] = 0;
 8000ae0:	e0bff917 	ldw	r2,-28(fp)
 8000ae4:	e0fffd17 	ldw	r3,-12(fp)
 8000ae8:	1885883a 	add	r2,r3,r2
 8000aec:	10000005 	stb	zero,0(r2)



void spi_comm (uint8_t input[], uint8_t output[], int in_length, int out_length)
{
	for(int i = 0; i < out_length; i++)	//Initializing output array to all zeros
 8000af0:	e0bff917 	ldw	r2,-28(fp)
 8000af4:	10800044 	addi	r2,r2,1
 8000af8:	e0bff915 	stw	r2,-28(fp)
 8000afc:	e0fff917 	ldw	r3,-28(fp)
 8000b00:	e0bfff17 	ldw	r2,-4(fp)
 8000b04:	18bff616 	blt	r3,r2,8000ae0 <__alt_data_end+0xff000ae0>
	{
		output[i] = 0;
	}

	IOWR(BME_CSN_BASE, 0, 0);	//CSN to 0 to begin comm
 8000b08:	0007883a 	mov	r3,zero
 8000b0c:	00883004 	movi	r2,8384
 8000b10:	10c00035 	stwio	r3,0(r2)
	for(int i = 0; i < ((in_length > out_length)?in_length:out_length); i++)	//Loop once for each byte of communication
 8000b14:	e03ffa15 	stw	zero,-24(fp)
 8000b18:	00003106 	br	8000be0 <spi_comm+0x124>
	{
		for(int j = 7; j >= 0; j--)	//Loop 8 times for each byte
 8000b1c:	008001c4 	movi	r2,7
 8000b20:	e0bffb15 	stw	r2,-20(fp)
 8000b24:	00002906 	br	8000bcc <spi_comm+0x110>
		{
			IOWR(BME_SCK_BASE, 0, 0);	//Clock falling edge
 8000b28:	0007883a 	mov	r3,zero
 8000b2c:	00882c04 	movi	r2,8368
 8000b30:	10c00035 	stwio	r3,0(r2)
			if(i < in_length)	//Change input byte (if still inputting)
 8000b34:	e0fffa17 	ldw	r3,-24(fp)
 8000b38:	e0bffe17 	ldw	r2,-8(fp)
 8000b3c:	18800c0e 	bge	r3,r2,8000b70 <spi_comm+0xb4>
				IOWR(BME_MOSI_BASE, 0, (input[i] & (1 << j))?1:0);
 8000b40:	e0bffa17 	ldw	r2,-24(fp)
 8000b44:	e0fffc17 	ldw	r3,-16(fp)
 8000b48:	1885883a 	add	r2,r3,r2
 8000b4c:	10800003 	ldbu	r2,0(r2)
 8000b50:	10c03fcc 	andi	r3,r2,255
 8000b54:	e0bffb17 	ldw	r2,-20(fp)
 8000b58:	1885d83a 	sra	r2,r3,r2
 8000b5c:	1080004c 	andi	r2,r2,1
 8000b60:	1004c03a 	cmpne	r2,r2,zero
 8000b64:	10c03fcc 	andi	r3,r2,255
 8000b68:	00882804 	movi	r2,8352
 8000b6c:	10c00035 	stwio	r3,0(r2)
			if(i < out_length)	//Change output byte (if still outputting)
 8000b70:	e0fffa17 	ldw	r3,-24(fp)
 8000b74:	e0bfff17 	ldw	r2,-4(fp)
 8000b78:	18800e0e 	bge	r3,r2,8000bb4 <spi_comm+0xf8>
				output[i] = output[i] | (IORD(BME_MISO_BASE, 0) << j);
 8000b7c:	e0bffa17 	ldw	r2,-24(fp)
 8000b80:	e0fffd17 	ldw	r3,-12(fp)
 8000b84:	1885883a 	add	r2,r3,r2
 8000b88:	e0fffa17 	ldw	r3,-24(fp)
 8000b8c:	e13ffd17 	ldw	r4,-12(fp)
 8000b90:	20c7883a 	add	r3,r4,r3
 8000b94:	18c00003 	ldbu	r3,0(r3)
 8000b98:	180b883a 	mov	r5,r3
 8000b9c:	00c82404 	movi	r3,8336
 8000ba0:	19000037 	ldwio	r4,0(r3)
 8000ba4:	e0fffb17 	ldw	r3,-20(fp)
 8000ba8:	20c6983a 	sll	r3,r4,r3
 8000bac:	28c6b03a 	or	r3,r5,r3
 8000bb0:	10c00005 	stb	r3,0(r2)
			IOWR(BME_SCK_BASE, 0, 1);	//Clock rising edge (when input is read by transceiver
 8000bb4:	00c00044 	movi	r3,1
 8000bb8:	00882c04 	movi	r2,8368
 8000bbc:	10c00035 	stwio	r3,0(r2)
	}

	IOWR(BME_CSN_BASE, 0, 0);	//CSN to 0 to begin comm
	for(int i = 0; i < ((in_length > out_length)?in_length:out_length); i++)	//Loop once for each byte of communication
	{
		for(int j = 7; j >= 0; j--)	//Loop 8 times for each byte
 8000bc0:	e0bffb17 	ldw	r2,-20(fp)
 8000bc4:	10bfffc4 	addi	r2,r2,-1
 8000bc8:	e0bffb15 	stw	r2,-20(fp)
 8000bcc:	e0bffb17 	ldw	r2,-20(fp)
 8000bd0:	103fd50e 	bge	r2,zero,8000b28 <__alt_data_end+0xff000b28>
	{
		output[i] = 0;
	}

	IOWR(BME_CSN_BASE, 0, 0);	//CSN to 0 to begin comm
	for(int i = 0; i < ((in_length > out_length)?in_length:out_length); i++)	//Loop once for each byte of communication
 8000bd4:	e0bffa17 	ldw	r2,-24(fp)
 8000bd8:	10800044 	addi	r2,r2,1
 8000bdc:	e0bffa15 	stw	r2,-24(fp)
 8000be0:	e0fffe17 	ldw	r3,-8(fp)
 8000be4:	e0bfff17 	ldw	r2,-4(fp)
 8000be8:	10c0010e 	bge	r2,r3,8000bf0 <spi_comm+0x134>
 8000bec:	1805883a 	mov	r2,r3
 8000bf0:	e0fffa17 	ldw	r3,-24(fp)
 8000bf4:	18bfc916 	blt	r3,r2,8000b1c <__alt_data_end+0xff000b1c>
			if(i < out_length)	//Change output byte (if still outputting)
				output[i] = output[i] | (IORD(BME_MISO_BASE, 0) << j);
			IOWR(BME_SCK_BASE, 0, 1);	//Clock rising edge (when input is read by transceiver
		}
	}
	IOWR(BME_SCK_BASE, 0, 0);	//Reset clock back to 0
 8000bf8:	0007883a 	mov	r3,zero
 8000bfc:	00882c04 	movi	r2,8368
 8000c00:	10c00035 	stwio	r3,0(r2)
	IOWR(BME_CSN_BASE, 0, 1);	//Reset CSN back to 1, ending communication
 8000c04:	00c00044 	movi	r3,1
 8000c08:	00883004 	movi	r2,8384
 8000c0c:	10c00035 	stwio	r3,0(r2)
}
 8000c10:	0001883a 	nop
 8000c14:	e037883a 	mov	sp,fp
 8000c18:	df000017 	ldw	fp,0(sp)
 8000c1c:	dec00104 	addi	sp,sp,4
 8000c20:	f800283a 	ret

08000c24 <spi_comm_nrf>:


void spi_comm_nrf(uint8_t input[], uint8_t output[], int in_length, int out_length)
{
 8000c24:	defff804 	addi	sp,sp,-32
 8000c28:	df000715 	stw	fp,28(sp)
 8000c2c:	df000704 	addi	fp,sp,28
 8000c30:	e13ffc15 	stw	r4,-16(fp)
 8000c34:	e17ffd15 	stw	r5,-12(fp)
 8000c38:	e1bffe15 	stw	r6,-8(fp)
 8000c3c:	e1ffff15 	stw	r7,-4(fp)
	for(int i = 0; i < out_length; i++)	//Initializing output array to all zeros
 8000c40:	e03ff915 	stw	zero,-28(fp)
 8000c44:	00000706 	br	8000c64 <spi_comm_nrf+0x40>
	{
		output[i] = 0;
 8000c48:	e0bff917 	ldw	r2,-28(fp)
 8000c4c:	e0fffd17 	ldw	r3,-12(fp)
 8000c50:	1885883a 	add	r2,r3,r2
 8000c54:	10000005 	stb	zero,0(r2)
}


void spi_comm_nrf(uint8_t input[], uint8_t output[], int in_length, int out_length)
{
	for(int i = 0; i < out_length; i++)	//Initializing output array to all zeros
 8000c58:	e0bff917 	ldw	r2,-28(fp)
 8000c5c:	10800044 	addi	r2,r2,1
 8000c60:	e0bff915 	stw	r2,-28(fp)
 8000c64:	e0fff917 	ldw	r3,-28(fp)
 8000c68:	e0bfff17 	ldw	r2,-4(fp)
 8000c6c:	18bff616 	blt	r3,r2,8000c48 <__alt_data_end+0xff000c48>
	{
		output[i] = 0;
	}

	IOWR(NRF_CSN_BASE, 0, 0);	//CSN to 0 to begin comm
 8000c70:	0007883a 	mov	r3,zero
 8000c74:	00881c04 	movi	r2,8304
 8000c78:	10c00035 	stwio	r3,0(r2)
	for(int i = 0; i < ((in_length > out_length)?in_length:out_length); i++)	//Loop once for each byte of communication
 8000c7c:	e03ffa15 	stw	zero,-24(fp)
 8000c80:	00003106 	br	8000d48 <spi_comm_nrf+0x124>
	{
		for(int j = 7; j >= 0; j--)	//Loop 8 times for each byte
 8000c84:	008001c4 	movi	r2,7
 8000c88:	e0bffb15 	stw	r2,-20(fp)
 8000c8c:	00002906 	br	8000d34 <spi_comm_nrf+0x110>
		{
			IOWR(NRF_SCK_BASE, 0, 0);	//Clock falling edge
 8000c90:	0007883a 	mov	r3,zero
 8000c94:	00881804 	movi	r2,8288
 8000c98:	10c00035 	stwio	r3,0(r2)
			if(i < in_length)	//Change input byte (if still inputting)
 8000c9c:	e0fffa17 	ldw	r3,-24(fp)
 8000ca0:	e0bffe17 	ldw	r2,-8(fp)
 8000ca4:	18800c0e 	bge	r3,r2,8000cd8 <spi_comm_nrf+0xb4>
				IOWR(NRF_MOSI_BASE, 0, (input[i] & (1 << j))?1:0);
 8000ca8:	e0bffa17 	ldw	r2,-24(fp)
 8000cac:	e0fffc17 	ldw	r3,-16(fp)
 8000cb0:	1885883a 	add	r2,r3,r2
 8000cb4:	10800003 	ldbu	r2,0(r2)
 8000cb8:	10c03fcc 	andi	r3,r2,255
 8000cbc:	e0bffb17 	ldw	r2,-20(fp)
 8000cc0:	1885d83a 	sra	r2,r3,r2
 8000cc4:	1080004c 	andi	r2,r2,1
 8000cc8:	1004c03a 	cmpne	r2,r2,zero
 8000ccc:	10c03fcc 	andi	r3,r2,255
 8000cd0:	00881404 	movi	r2,8272
 8000cd4:	10c00035 	stwio	r3,0(r2)
			if(i < out_length)	//Change output byte (if still outputting)
 8000cd8:	e0fffa17 	ldw	r3,-24(fp)
 8000cdc:	e0bfff17 	ldw	r2,-4(fp)
 8000ce0:	18800e0e 	bge	r3,r2,8000d1c <spi_comm_nrf+0xf8>
				output[i] = output[i] | (IORD(NRF_MISO_BASE, 0) << j);
 8000ce4:	e0bffa17 	ldw	r2,-24(fp)
 8000ce8:	e0fffd17 	ldw	r3,-12(fp)
 8000cec:	1885883a 	add	r2,r3,r2
 8000cf0:	e0fffa17 	ldw	r3,-24(fp)
 8000cf4:	e13ffd17 	ldw	r4,-12(fp)
 8000cf8:	20c7883a 	add	r3,r4,r3
 8000cfc:	18c00003 	ldbu	r3,0(r3)
 8000d00:	180b883a 	mov	r5,r3
 8000d04:	00c81004 	movi	r3,8256
 8000d08:	19000037 	ldwio	r4,0(r3)
 8000d0c:	e0fffb17 	ldw	r3,-20(fp)
 8000d10:	20c6983a 	sll	r3,r4,r3
 8000d14:	28c6b03a 	or	r3,r5,r3
 8000d18:	10c00005 	stb	r3,0(r2)
			IOWR(NRF_SCK_BASE, 0, 1);	//Clock rising edge (when input is read by transceiver
 8000d1c:	00c00044 	movi	r3,1
 8000d20:	00881804 	movi	r2,8288
 8000d24:	10c00035 	stwio	r3,0(r2)
	}

	IOWR(NRF_CSN_BASE, 0, 0);	//CSN to 0 to begin comm
	for(int i = 0; i < ((in_length > out_length)?in_length:out_length); i++)	//Loop once for each byte of communication
	{
		for(int j = 7; j >= 0; j--)	//Loop 8 times for each byte
 8000d28:	e0bffb17 	ldw	r2,-20(fp)
 8000d2c:	10bfffc4 	addi	r2,r2,-1
 8000d30:	e0bffb15 	stw	r2,-20(fp)
 8000d34:	e0bffb17 	ldw	r2,-20(fp)
 8000d38:	103fd50e 	bge	r2,zero,8000c90 <__alt_data_end+0xff000c90>
	{
		output[i] = 0;
	}

	IOWR(NRF_CSN_BASE, 0, 0);	//CSN to 0 to begin comm
	for(int i = 0; i < ((in_length > out_length)?in_length:out_length); i++)	//Loop once for each byte of communication
 8000d3c:	e0bffa17 	ldw	r2,-24(fp)
 8000d40:	10800044 	addi	r2,r2,1
 8000d44:	e0bffa15 	stw	r2,-24(fp)
 8000d48:	e0fffe17 	ldw	r3,-8(fp)
 8000d4c:	e0bfff17 	ldw	r2,-4(fp)
 8000d50:	10c0010e 	bge	r2,r3,8000d58 <spi_comm_nrf+0x134>
 8000d54:	1805883a 	mov	r2,r3
 8000d58:	e0fffa17 	ldw	r3,-24(fp)
 8000d5c:	18bfc916 	blt	r3,r2,8000c84 <__alt_data_end+0xff000c84>
			if(i < out_length)	//Change output byte (if still outputting)
				output[i] = output[i] | (IORD(NRF_MISO_BASE, 0) << j);
			IOWR(NRF_SCK_BASE, 0, 1);	//Clock rising edge (when input is read by transceiver
		}
	}
	IOWR(NRF_SCK_BASE, 0, 0);	//Reset clock back to 0
 8000d60:	0007883a 	mov	r3,zero
 8000d64:	00881804 	movi	r2,8288
 8000d68:	10c00035 	stwio	r3,0(r2)
	IOWR(NRF_CSN_BASE, 0, 1);	//Reset CSN back to 1, ending communication
 8000d6c:	00c00044 	movi	r3,1
 8000d70:	00881c04 	movi	r2,8304
 8000d74:	10c00035 	stwio	r3,0(r2)
}
 8000d78:	0001883a 	nop
 8000d7c:	e037883a 	mov	sp,fp
 8000d80:	df000017 	ldw	fp,0(sp)
 8000d84:	dec00104 	addi	sp,sp,4
 8000d88:	f800283a 	ret

08000d8c <nrf_init>:

void nrf_init() {
 8000d8c:	defffe04 	addi	sp,sp,-8
 8000d90:	dfc00115 	stw	ra,4(sp)
 8000d94:	df000015 	stw	fp,0(sp)
 8000d98:	d839883a 	mov	fp,sp

	// setting CLK to 0 and setting CSN to 1
	IOWR(NRF_SCK_BASE, 0, 0);
 8000d9c:	0007883a 	mov	r3,zero
 8000da0:	00881804 	movi	r2,8288
 8000da4:	10c00035 	stwio	r3,0(r2)
	IOWR(NRF_CSN_BASE, 0, 1);
 8000da8:	00c00044 	movi	r3,1
 8000dac:	00881c04 	movi	r2,8304
 8000db0:	10c00035 	stwio	r3,0(r2)

	test_input[0] = 0b00111101;
 8000db4:	00820074 	movhi	r2,2049
 8000db8:	1095a404 	addi	r2,r2,22160
 8000dbc:	00c00f44 	movi	r3,61
 8000dc0:	10c00005 	stb	r3,0(r2)
	test_input[1] = 0x6;
 8000dc4:	00820074 	movhi	r2,2049
 8000dc8:	1095a404 	addi	r2,r2,22160
 8000dcc:	00c00184 	movi	r3,6
 8000dd0:	10c00045 	stb	r3,1(r2)
	spi_comm_nrf(test_input, test_output, 2, 0);
 8000dd4:	000f883a 	mov	r7,zero
 8000dd8:	01800084 	movi	r6,2
 8000ddc:	01420074 	movhi	r5,2049
 8000de0:	29559f04 	addi	r5,r5,22140
 8000de4:	01020074 	movhi	r4,2049
 8000de8:	2115a404 	addi	r4,r4,22160
 8000dec:	8000c240 	call	8000c24 <spi_comm_nrf>

	test_input[0] = 0b11100001;
 8000df0:	00820074 	movhi	r2,2049
 8000df4:	1095a404 	addi	r2,r2,22160
 8000df8:	00fff844 	movi	r3,-31
 8000dfc:	10c00005 	stb	r3,0(r2)
	spi_comm_nrf(test_input, test_output, 1, 0);
 8000e00:	000f883a 	mov	r7,zero
 8000e04:	01800044 	movi	r6,1
 8000e08:	01420074 	movhi	r5,2049
 8000e0c:	29559f04 	addi	r5,r5,22140
 8000e10:	01020074 	movhi	r4,2049
 8000e14:	2115a404 	addi	r4,r4,22160
 8000e18:	8000c240 	call	8000c24 <spi_comm_nrf>

	test_input[0] = 0x27;
 8000e1c:	00820074 	movhi	r2,2049
 8000e20:	1095a404 	addi	r2,r2,22160
 8000e24:	00c009c4 	movi	r3,39
 8000e28:	10c00005 	stb	r3,0(r2)
	test_input[1] = 0x1E;
 8000e2c:	00820074 	movhi	r2,2049
 8000e30:	1095a404 	addi	r2,r2,22160
 8000e34:	00c00784 	movi	r3,30
 8000e38:	10c00045 	stb	r3,1(r2)
	spi_comm_nrf(test_input, test_output, 2, 0);
 8000e3c:	000f883a 	mov	r7,zero
 8000e40:	01800084 	movi	r6,2
 8000e44:	01420074 	movhi	r5,2049
 8000e48:	29559f04 	addi	r5,r5,22140
 8000e4c:	01020074 	movhi	r4,2049
 8000e50:	2115a404 	addi	r4,r4,22160
 8000e54:	8000c240 	call	8000c24 <spi_comm_nrf>

}
 8000e58:	0001883a 	nop
 8000e5c:	e037883a 	mov	sp,fp
 8000e60:	dfc00117 	ldw	ra,4(sp)
 8000e64:	df000017 	ldw	fp,0(sp)
 8000e68:	dec00204 	addi	sp,sp,8
 8000e6c:	f800283a 	ret

08000e70 <print_array_v>:

void print_array_v (int8_t a[], int size)
{
 8000e70:	defff804 	addi	sp,sp,-32
 8000e74:	dfc00715 	stw	ra,28(sp)
 8000e78:	df000615 	stw	fp,24(sp)
 8000e7c:	df000604 	addi	fp,sp,24
 8000e80:	e13ffe15 	stw	r4,-8(fp)
 8000e84:	e17fff15 	stw	r5,-4(fp)
	if(size > 1)
 8000e88:	e0bfff17 	ldw	r2,-4(fp)
 8000e8c:	10800090 	cmplti	r2,r2,2
 8000e90:	1000181e 	bne	r2,zero,8000ef4 <print_array_v+0x84>
	{
		printf("Received Sensor Data: ");
 8000e94:	01020074 	movhi	r4,2049
 8000e98:	21071a04 	addi	r4,r4,7272
 8000e9c:	800313c0 	call	800313c <printf>
		for(int i = 0; i < size - 1; i++)
 8000ea0:	e03ffa15 	stw	zero,-24(fp)
 8000ea4:	00000f06 	br	8000ee4 <print_array_v+0x74>
		{
			alt_printf("%x, ", (a[i] & 0xFF));
 8000ea8:	e0bffa17 	ldw	r2,-24(fp)
 8000eac:	e0fffe17 	ldw	r3,-8(fp)
 8000eb0:	1885883a 	add	r2,r3,r2
 8000eb4:	10800003 	ldbu	r2,0(r2)
 8000eb8:	10803fcc 	andi	r2,r2,255
 8000ebc:	1080201c 	xori	r2,r2,128
 8000ec0:	10bfe004 	addi	r2,r2,-128
 8000ec4:	10803fcc 	andi	r2,r2,255
 8000ec8:	100b883a 	mov	r5,r2
 8000ecc:	01020074 	movhi	r4,2049
 8000ed0:	21072004 	addi	r4,r4,7296
 8000ed4:	800f8180 	call	800f818 <alt_printf>
void print_array_v (int8_t a[], int size)
{
	if(size > 1)
	{
		printf("Received Sensor Data: ");
		for(int i = 0; i < size - 1; i++)
 8000ed8:	e0bffa17 	ldw	r2,-24(fp)
 8000edc:	10800044 	addi	r2,r2,1
 8000ee0:	e0bffa15 	stw	r2,-24(fp)
 8000ee4:	e0bfff17 	ldw	r2,-4(fp)
 8000ee8:	10bfffc4 	addi	r2,r2,-1
 8000eec:	e0fffa17 	ldw	r3,-24(fp)
 8000ef0:	18bfed16 	blt	r3,r2,8000ea8 <__alt_data_end+0xff000ea8>
		{
			alt_printf("%x, ", (a[i] & 0xFF));
		}
	}
	alt_printf("%x\n", (a[size - 1] & 0xFF));
 8000ef4:	e0bfff17 	ldw	r2,-4(fp)
 8000ef8:	10bfffc4 	addi	r2,r2,-1
 8000efc:	e0fffe17 	ldw	r3,-8(fp)
 8000f00:	1885883a 	add	r2,r3,r2
 8000f04:	10800003 	ldbu	r2,0(r2)
 8000f08:	10803fcc 	andi	r2,r2,255
 8000f0c:	1080201c 	xori	r2,r2,128
 8000f10:	10bfe004 	addi	r2,r2,-128
 8000f14:	10803fcc 	andi	r2,r2,255
 8000f18:	100b883a 	mov	r5,r2
 8000f1c:	01020074 	movhi	r4,2049
 8000f20:	21072204 	addi	r4,r4,7304
 8000f24:	800f8180 	call	800f818 <alt_printf>

	long signed int t = 0;
 8000f28:	e03ffb15 	stw	zero,-20(fp)
	t = (a[4] << 12) + (a[5] << 4) + a[6];
 8000f2c:	e0bffe17 	ldw	r2,-8(fp)
 8000f30:	10800104 	addi	r2,r2,4
 8000f34:	10800003 	ldbu	r2,0(r2)
 8000f38:	10803fcc 	andi	r2,r2,255
 8000f3c:	1080201c 	xori	r2,r2,128
 8000f40:	10bfe004 	addi	r2,r2,-128
 8000f44:	1006933a 	slli	r3,r2,12
 8000f48:	e0bffe17 	ldw	r2,-8(fp)
 8000f4c:	10800144 	addi	r2,r2,5
 8000f50:	10800003 	ldbu	r2,0(r2)
 8000f54:	10803fcc 	andi	r2,r2,255
 8000f58:	1080201c 	xori	r2,r2,128
 8000f5c:	10bfe004 	addi	r2,r2,-128
 8000f60:	1004913a 	slli	r2,r2,4
 8000f64:	1887883a 	add	r3,r3,r2
 8000f68:	e0bffe17 	ldw	r2,-8(fp)
 8000f6c:	10800184 	addi	r2,r2,6
 8000f70:	10800003 	ldbu	r2,0(r2)
 8000f74:	10803fcc 	andi	r2,r2,255
 8000f78:	1080201c 	xori	r2,r2,128
 8000f7c:	10bfe004 	addi	r2,r2,-128
 8000f80:	1885883a 	add	r2,r3,r2
 8000f84:	e0bffb15 	stw	r2,-20(fp)
	t = t & 0x000FFFFF;
 8000f88:	e0fffb17 	ldw	r3,-20(fp)
 8000f8c:	00800434 	movhi	r2,16
 8000f90:	10bfffc4 	addi	r2,r2,-1
 8000f94:	1884703a 	and	r2,r3,r2
 8000f98:	e0bffb15 	stw	r2,-20(fp)
//	printf("t: %x\n", t);
	t_result = BME280_compensate_T_int32(t);
 8000f9c:	e13ffb17 	ldw	r4,-20(fp)
 8000fa0:	80002900 	call	8000290 <BME280_compensate_T_int32>
 8000fa4:	d0a6da15 	stw	r2,-25752(gp)
	printf("compensated T: %g\n", t_result * 0.01);
 8000fa8:	d0a6da17 	ldw	r2,-25752(gp)
 8000fac:	1009883a 	mov	r4,r2
 8000fb0:	8002ebc0 	call	8002ebc <__floatsidf>
 8000fb4:	1011883a 	mov	r8,r2
 8000fb8:	1813883a 	mov	r9,r3
 8000fbc:	0191ebb4 	movhi	r6,18350
 8000fc0:	31851ec4 	addi	r6,r6,5243
 8000fc4:	01cfe134 	movhi	r7,16260
 8000fc8:	39deb844 	addi	r7,r7,31457
 8000fcc:	4009883a 	mov	r4,r8
 8000fd0:	480b883a 	mov	r5,r9
 8000fd4:	80027a40 	call	80027a4 <__muldf3>
 8000fd8:	1009883a 	mov	r4,r2
 8000fdc:	180b883a 	mov	r5,r3
 8000fe0:	2005883a 	mov	r2,r4
 8000fe4:	2807883a 	mov	r3,r5
 8000fe8:	100b883a 	mov	r5,r2
 8000fec:	180d883a 	mov	r6,r3
 8000ff0:	01020074 	movhi	r4,2049
 8000ff4:	21072304 	addi	r4,r4,7308
 8000ff8:	800313c0 	call	800313c <printf>

	long signed int p = 0;
 8000ffc:	e03ffc15 	stw	zero,-16(fp)
	p = (a[1] << 12) + (a[2] << 4) + a[3];
 8001000:	e0bffe17 	ldw	r2,-8(fp)
 8001004:	10800044 	addi	r2,r2,1
 8001008:	10800003 	ldbu	r2,0(r2)
 800100c:	10803fcc 	andi	r2,r2,255
 8001010:	1080201c 	xori	r2,r2,128
 8001014:	10bfe004 	addi	r2,r2,-128
 8001018:	1006933a 	slli	r3,r2,12
 800101c:	e0bffe17 	ldw	r2,-8(fp)
 8001020:	10800084 	addi	r2,r2,2
 8001024:	10800003 	ldbu	r2,0(r2)
 8001028:	10803fcc 	andi	r2,r2,255
 800102c:	1080201c 	xori	r2,r2,128
 8001030:	10bfe004 	addi	r2,r2,-128
 8001034:	1004913a 	slli	r2,r2,4
 8001038:	1887883a 	add	r3,r3,r2
 800103c:	e0bffe17 	ldw	r2,-8(fp)
 8001040:	108000c4 	addi	r2,r2,3
 8001044:	10800003 	ldbu	r2,0(r2)
 8001048:	10803fcc 	andi	r2,r2,255
 800104c:	1080201c 	xori	r2,r2,128
 8001050:	10bfe004 	addi	r2,r2,-128
 8001054:	1885883a 	add	r2,r3,r2
 8001058:	e0bffc15 	stw	r2,-16(fp)
	p = p & 0x000FFFFF;
 800105c:	e0fffc17 	ldw	r3,-16(fp)
 8001060:	00800434 	movhi	r2,16
 8001064:	10bfffc4 	addi	r2,r2,-1
 8001068:	1884703a 	and	r2,r3,r2
 800106c:	e0bffc15 	stw	r2,-16(fp)
//	printf("p: %x\n", p);
	p_result = BME280_compensate_P_int64(p);
 8001070:	e0bffc17 	ldw	r2,-16(fp)
 8001074:	1009883a 	mov	r4,r2
 8001078:	80003580 	call	8000358 <BME280_compensate_P_int64>
 800107c:	d0a6db15 	stw	r2,-25748(gp)
	p_result_float = ((float)p_result/256);
 8001080:	d0a6db17 	ldw	r2,-25748(gp)
 8001084:	1009883a 	mov	r4,r2
 8001088:	80026b40 	call	80026b4 <__floatunsisf>
 800108c:	1007883a 	mov	r3,r2
 8001090:	0150e034 	movhi	r5,17280
 8001094:	1809883a 	mov	r4,r3
 8001098:	80022740 	call	8002274 <__divsf3>
 800109c:	1007883a 	mov	r3,r2
 80010a0:	1805883a 	mov	r2,r3
 80010a4:	d0a6dc15 	stw	r2,-25744(gp)
	printf("compensated P: %g\n", p_result_float);
 80010a8:	d0a6dc17 	ldw	r2,-25744(gp)
 80010ac:	1009883a 	mov	r4,r2
 80010b0:	8002f980 	call	8002f98 <__extendsfdf2>
 80010b4:	100d883a 	mov	r6,r2
 80010b8:	180f883a 	mov	r7,r3
 80010bc:	300b883a 	mov	r5,r6
 80010c0:	380d883a 	mov	r6,r7
 80010c4:	01020074 	movhi	r4,2049
 80010c8:	21072804 	addi	r4,r4,7328
 80010cc:	800313c0 	call	800313c <printf>

	long signed int h = 0;
 80010d0:	e03ffd15 	stw	zero,-12(fp)
	h = (a[7] << 8) + a[8];
 80010d4:	e0bffe17 	ldw	r2,-8(fp)
 80010d8:	108001c4 	addi	r2,r2,7
 80010dc:	10800003 	ldbu	r2,0(r2)
 80010e0:	10803fcc 	andi	r2,r2,255
 80010e4:	1080201c 	xori	r2,r2,128
 80010e8:	10bfe004 	addi	r2,r2,-128
 80010ec:	1006923a 	slli	r3,r2,8
 80010f0:	e0bffe17 	ldw	r2,-8(fp)
 80010f4:	10800204 	addi	r2,r2,8
 80010f8:	10800003 	ldbu	r2,0(r2)
 80010fc:	10803fcc 	andi	r2,r2,255
 8001100:	1080201c 	xori	r2,r2,128
 8001104:	10bfe004 	addi	r2,r2,-128
 8001108:	1885883a 	add	r2,r3,r2
 800110c:	e0bffd15 	stw	r2,-12(fp)
	h = h & 0xFFFF;
 8001110:	e0bffd17 	ldw	r2,-12(fp)
 8001114:	10bfffcc 	andi	r2,r2,65535
 8001118:	e0bffd15 	stw	r2,-12(fp)
	h_result = bme280_compensate_H_int32(h);
 800111c:	e13ffd17 	ldw	r4,-12(fp)
 8001120:	80009400 	call	8000940 <bme280_compensate_H_int32>
 8001124:	d0a6dd15 	stw	r2,-25740(gp)
	h_result_float = ((float)h_result / 1024);
 8001128:	d0a6dd17 	ldw	r2,-25740(gp)
 800112c:	1009883a 	mov	r4,r2
 8001130:	80026b40 	call	80026b4 <__floatunsisf>
 8001134:	1007883a 	mov	r3,r2
 8001138:	01512034 	movhi	r5,17536
 800113c:	1809883a 	mov	r4,r3
 8001140:	80022740 	call	8002274 <__divsf3>
 8001144:	1007883a 	mov	r3,r2
 8001148:	1805883a 	mov	r2,r3
 800114c:	d0a6de15 	stw	r2,-25736(gp)
	printf("compensated H: %g\n", h_result_float);
 8001150:	d0a6de17 	ldw	r2,-25736(gp)
 8001154:	1009883a 	mov	r4,r2
 8001158:	8002f980 	call	8002f98 <__extendsfdf2>
 800115c:	100d883a 	mov	r6,r2
 8001160:	180f883a 	mov	r7,r3
 8001164:	300b883a 	mov	r5,r6
 8001168:	380d883a 	mov	r6,r7
 800116c:	01020074 	movhi	r4,2049
 8001170:	21072d04 	addi	r4,r4,7348
 8001174:	800313c0 	call	800313c <printf>
	return;
 8001178:	0001883a 	nop
}
 800117c:	e037883a 	mov	sp,fp
 8001180:	dfc00117 	ldw	ra,4(sp)
 8001184:	df000017 	ldw	fp,0(sp)
 8001188:	dec00204 	addi	sp,sp,8
 800118c:	f800283a 	ret

08001190 <timer_int_handler>:


void timer_int_handler()
{
 8001190:	defff904 	addi	sp,sp,-28
 8001194:	dfc00615 	stw	ra,24(sp)
 8001198:	df000515 	stw	fp,20(sp)
 800119c:	df000504 	addi	fp,sp,20
//	printf("interrupt\n");
	if (SETUP == 1) {
 80011a0:	d0a6df17 	ldw	r2,-25732(gp)
 80011a4:	10800058 	cmpnei	r2,r2,1
 80011a8:	10010b1e 	bne	r2,zero,80015d8 <timer_int_handler+0x448>

		// secondary setup
		// writing to ctrl_hum
		// setting osrs_h to 100
		test_input[0] = 0x72;
 80011ac:	00820074 	movhi	r2,2049
 80011b0:	1095a404 	addi	r2,r2,22160
 80011b4:	00c01c84 	movi	r3,114
 80011b8:	10c00005 	stb	r3,0(r2)
		test_input[1] = 0x04;
 80011bc:	00820074 	movhi	r2,2049
 80011c0:	1095a404 	addi	r2,r2,22160
 80011c4:	00c00104 	movi	r3,4
 80011c8:	10c00045 	stb	r3,1(r2)
		spi_comm(test_input, test_output, 2, 0);
 80011cc:	000f883a 	mov	r7,zero
 80011d0:	01800084 	movi	r6,2
 80011d4:	01420074 	movhi	r5,2049
 80011d8:	29559f04 	addi	r5,r5,22140
 80011dc:	01020074 	movhi	r4,2049
 80011e0:	2115a404 	addi	r4,r4,22160
 80011e4:	8000abc0 	call	8000abc <spi_comm>

		// reading calib data for temperature
		test_input[0] = 0x88;
 80011e8:	00820074 	movhi	r2,2049
 80011ec:	1095a404 	addi	r2,r2,22160
 80011f0:	00ffe204 	movi	r3,-120
 80011f4:	10c00005 	stb	r3,0(r2)
		spi_comm(test_input, test_output, 1, 7);
 80011f8:	01c001c4 	movi	r7,7
 80011fc:	01800044 	movi	r6,1
 8001200:	01420074 	movhi	r5,2049
 8001204:	29559f04 	addi	r5,r5,22140
 8001208:	01020074 	movhi	r4,2049
 800120c:	2115a404 	addi	r4,r4,22160
 8001210:	8000abc0 	call	8000abc <spi_comm>
		dig_T1 = (test_output[2] << 8) + (test_output[1]);
 8001214:	00820074 	movhi	r2,2049
 8001218:	10959f04 	addi	r2,r2,22140
 800121c:	10800083 	ldbu	r2,2(r2)
 8001220:	10803fcc 	andi	r2,r2,255
 8001224:	1004923a 	slli	r2,r2,8
 8001228:	1007883a 	mov	r3,r2
 800122c:	00820074 	movhi	r2,2049
 8001230:	10959f04 	addi	r2,r2,22140
 8001234:	10800043 	ldbu	r2,1(r2)
 8001238:	10803fcc 	andi	r2,r2,255
 800123c:	1885883a 	add	r2,r3,r2
 8001240:	d0a6d10d 	sth	r2,-25788(gp)
		dig_T2 = (test_output[4] << 8) + (test_output[3]);
 8001244:	00820074 	movhi	r2,2049
 8001248:	10959f04 	addi	r2,r2,22140
 800124c:	10800103 	ldbu	r2,4(r2)
 8001250:	10803fcc 	andi	r2,r2,255
 8001254:	1004923a 	slli	r2,r2,8
 8001258:	1007883a 	mov	r3,r2
 800125c:	00820074 	movhi	r2,2049
 8001260:	10959f04 	addi	r2,r2,22140
 8001264:	108000c3 	ldbu	r2,3(r2)
 8001268:	10803fcc 	andi	r2,r2,255
 800126c:	1885883a 	add	r2,r3,r2
 8001270:	d0a6d18d 	sth	r2,-25786(gp)
		dig_T3 = (test_output[6] << 8) + (test_output[5]);
 8001274:	00820074 	movhi	r2,2049
 8001278:	10959f04 	addi	r2,r2,22140
 800127c:	10800183 	ldbu	r2,6(r2)
 8001280:	10803fcc 	andi	r2,r2,255
 8001284:	1004923a 	slli	r2,r2,8
 8001288:	1007883a 	mov	r3,r2
 800128c:	00820074 	movhi	r2,2049
 8001290:	10959f04 	addi	r2,r2,22140
 8001294:	10800143 	ldbu	r2,5(r2)
 8001298:	10803fcc 	andi	r2,r2,255
 800129c:	1885883a 	add	r2,r3,r2
 80012a0:	d0a6d20d 	sth	r2,-25784(gp)
//		printf("%x %x %x\n", dig_T1, dig_T2, dig_T3);

		// reading calib data for pressure
		test_input[0] = 0x8E;
 80012a4:	00820074 	movhi	r2,2049
 80012a8:	1095a404 	addi	r2,r2,22160
 80012ac:	00ffe384 	movi	r3,-114
 80012b0:	10c00005 	stb	r3,0(r2)
		spi_comm(test_input, test_output, 1, 19);
 80012b4:	01c004c4 	movi	r7,19
 80012b8:	01800044 	movi	r6,1
 80012bc:	01420074 	movhi	r5,2049
 80012c0:	29559f04 	addi	r5,r5,22140
 80012c4:	01020074 	movhi	r4,2049
 80012c8:	2115a404 	addi	r4,r4,22160
 80012cc:	8000abc0 	call	8000abc <spi_comm>
//		print_array_v(test_output, 19);

		dig_P1 = ((test_output[2] << 8) + (test_output[1])) & 0xFFFF;
 80012d0:	00820074 	movhi	r2,2049
 80012d4:	10959f04 	addi	r2,r2,22140
 80012d8:	10800083 	ldbu	r2,2(r2)
 80012dc:	10803fcc 	andi	r2,r2,255
 80012e0:	1004923a 	slli	r2,r2,8
 80012e4:	1007883a 	mov	r3,r2
 80012e8:	00820074 	movhi	r2,2049
 80012ec:	10959f04 	addi	r2,r2,22140
 80012f0:	10800043 	ldbu	r2,1(r2)
 80012f4:	10803fcc 	andi	r2,r2,255
 80012f8:	1885883a 	add	r2,r3,r2
 80012fc:	d0a0000d 	sth	r2,-32768(gp)
		dig_P2 = (test_output[4] << 8) + (test_output[3])& 0xFFFF;
 8001300:	00820074 	movhi	r2,2049
 8001304:	10959f04 	addi	r2,r2,22140
 8001308:	10800103 	ldbu	r2,4(r2)
 800130c:	10803fcc 	andi	r2,r2,255
 8001310:	1004923a 	slli	r2,r2,8
 8001314:	1007883a 	mov	r3,r2
 8001318:	00820074 	movhi	r2,2049
 800131c:	10959f04 	addi	r2,r2,22140
 8001320:	108000c3 	ldbu	r2,3(r2)
 8001324:	10803fcc 	andi	r2,r2,255
 8001328:	1885883a 	add	r2,r3,r2
 800132c:	d0a6d28d 	sth	r2,-25782(gp)
		dig_P3 = ((test_output[6] << 8) + (test_output[5]))& 0xFFFF;
 8001330:	00820074 	movhi	r2,2049
 8001334:	10959f04 	addi	r2,r2,22140
 8001338:	10800183 	ldbu	r2,6(r2)
 800133c:	10803fcc 	andi	r2,r2,255
 8001340:	1004923a 	slli	r2,r2,8
 8001344:	1007883a 	mov	r3,r2
 8001348:	00820074 	movhi	r2,2049
 800134c:	10959f04 	addi	r2,r2,22140
 8001350:	10800143 	ldbu	r2,5(r2)
 8001354:	10803fcc 	andi	r2,r2,255
 8001358:	1885883a 	add	r2,r3,r2
 800135c:	d0a6d30d 	sth	r2,-25780(gp)
		dig_P4 = ((test_output[8] << 8) + (test_output[7]))& 0xFFFF;
 8001360:	00820074 	movhi	r2,2049
 8001364:	10959f04 	addi	r2,r2,22140
 8001368:	10800203 	ldbu	r2,8(r2)
 800136c:	10803fcc 	andi	r2,r2,255
 8001370:	1004923a 	slli	r2,r2,8
 8001374:	1007883a 	mov	r3,r2
 8001378:	00820074 	movhi	r2,2049
 800137c:	10959f04 	addi	r2,r2,22140
 8001380:	108001c3 	ldbu	r2,7(r2)
 8001384:	10803fcc 	andi	r2,r2,255
 8001388:	1885883a 	add	r2,r3,r2
 800138c:	d0a6d38d 	sth	r2,-25778(gp)
		dig_P5 = ((test_output[10] << 8) + (test_output[9]))& 0xFFFF;
 8001390:	00820074 	movhi	r2,2049
 8001394:	10959f04 	addi	r2,r2,22140
 8001398:	10800283 	ldbu	r2,10(r2)
 800139c:	10803fcc 	andi	r2,r2,255
 80013a0:	1004923a 	slli	r2,r2,8
 80013a4:	1007883a 	mov	r3,r2
 80013a8:	00820074 	movhi	r2,2049
 80013ac:	10959f04 	addi	r2,r2,22140
 80013b0:	10800243 	ldbu	r2,9(r2)
 80013b4:	10803fcc 	andi	r2,r2,255
 80013b8:	1885883a 	add	r2,r3,r2
 80013bc:	d0a6d40d 	sth	r2,-25776(gp)
		dig_P6 = ((test_output[12] << 8) + (test_output[11]))& 0xFFFF;
 80013c0:	00820074 	movhi	r2,2049
 80013c4:	10959f04 	addi	r2,r2,22140
 80013c8:	10800303 	ldbu	r2,12(r2)
 80013cc:	10803fcc 	andi	r2,r2,255
 80013d0:	1004923a 	slli	r2,r2,8
 80013d4:	1007883a 	mov	r3,r2
 80013d8:	00820074 	movhi	r2,2049
 80013dc:	10959f04 	addi	r2,r2,22140
 80013e0:	108002c3 	ldbu	r2,11(r2)
 80013e4:	10803fcc 	andi	r2,r2,255
 80013e8:	1885883a 	add	r2,r3,r2
 80013ec:	d0a6d48d 	sth	r2,-25774(gp)
		dig_P7 = ((test_output[14] << 8) + (test_output[13]))& 0xFFFF;
 80013f0:	00820074 	movhi	r2,2049
 80013f4:	10959f04 	addi	r2,r2,22140
 80013f8:	10800383 	ldbu	r2,14(r2)
 80013fc:	10803fcc 	andi	r2,r2,255
 8001400:	1004923a 	slli	r2,r2,8
 8001404:	1007883a 	mov	r3,r2
 8001408:	00820074 	movhi	r2,2049
 800140c:	10959f04 	addi	r2,r2,22140
 8001410:	10800343 	ldbu	r2,13(r2)
 8001414:	10803fcc 	andi	r2,r2,255
 8001418:	1885883a 	add	r2,r3,r2
 800141c:	d0a6d50d 	sth	r2,-25772(gp)
		dig_P8 = ((test_output[16] << 8) + (test_output[15]))& 0xFFFF;
 8001420:	00820074 	movhi	r2,2049
 8001424:	10959f04 	addi	r2,r2,22140
 8001428:	10800403 	ldbu	r2,16(r2)
 800142c:	10803fcc 	andi	r2,r2,255
 8001430:	1004923a 	slli	r2,r2,8
 8001434:	1007883a 	mov	r3,r2
 8001438:	00820074 	movhi	r2,2049
 800143c:	10959f04 	addi	r2,r2,22140
 8001440:	108003c3 	ldbu	r2,15(r2)
 8001444:	10803fcc 	andi	r2,r2,255
 8001448:	1885883a 	add	r2,r3,r2
 800144c:	d0a6d58d 	sth	r2,-25770(gp)
		dig_P9 = ((test_output[18] << 8) + (test_output[17]))& 0xFFFF;
 8001450:	00820074 	movhi	r2,2049
 8001454:	10959f04 	addi	r2,r2,22140
 8001458:	10800483 	ldbu	r2,18(r2)
 800145c:	10803fcc 	andi	r2,r2,255
 8001460:	1004923a 	slli	r2,r2,8
 8001464:	1007883a 	mov	r3,r2
 8001468:	00820074 	movhi	r2,2049
 800146c:	10959f04 	addi	r2,r2,22140
 8001470:	10800443 	ldbu	r2,17(r2)
 8001474:	10803fcc 	andi	r2,r2,255
 8001478:	1885883a 	add	r2,r3,r2
 800147c:	d0a6d60d 	sth	r2,-25768(gp)
//		printf("%x %x %x %x %x %x %x %x %x\n", dig_P1, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9);


		// reading calib data for humidity
		test_input[0] = 0xA1;
 8001480:	00820074 	movhi	r2,2049
 8001484:	1095a404 	addi	r2,r2,22160
 8001488:	00ffe844 	movi	r3,-95
 800148c:	10c00005 	stb	r3,0(r2)
		spi_comm(test_input, test_output, 1, 2);
 8001490:	01c00084 	movi	r7,2
 8001494:	01800044 	movi	r6,1
 8001498:	01420074 	movhi	r5,2049
 800149c:	29559f04 	addi	r5,r5,22140
 80014a0:	01020074 	movhi	r4,2049
 80014a4:	2115a404 	addi	r4,r4,22160
 80014a8:	8000abc0 	call	8000abc <spi_comm>

		dig_H1 = test_output[1];
 80014ac:	00820074 	movhi	r2,2049
 80014b0:	10959f04 	addi	r2,r2,22140
 80014b4:	10800043 	ldbu	r2,1(r2)
 80014b8:	d0a6d685 	stb	r2,-25766(gp)
		test_input[0] = 0xE1;
 80014bc:	00820074 	movhi	r2,2049
 80014c0:	1095a404 	addi	r2,r2,22160
 80014c4:	00fff844 	movi	r3,-31
 80014c8:	10c00005 	stb	r3,0(r2)
		spi_comm(test_input, test_output, 1, 8);
 80014cc:	01c00204 	movi	r7,8
 80014d0:	01800044 	movi	r6,1
 80014d4:	01420074 	movhi	r5,2049
 80014d8:	29559f04 	addi	r5,r5,22140
 80014dc:	01020074 	movhi	r4,2049
 80014e0:	2115a404 	addi	r4,r4,22160
 80014e4:	8000abc0 	call	8000abc <spi_comm>

		dig_H2 = (test_output[2] << 8) + (test_output[1])& 0xFFFF;
 80014e8:	00820074 	movhi	r2,2049
 80014ec:	10959f04 	addi	r2,r2,22140
 80014f0:	10800083 	ldbu	r2,2(r2)
 80014f4:	10803fcc 	andi	r2,r2,255
 80014f8:	1004923a 	slli	r2,r2,8
 80014fc:	1007883a 	mov	r3,r2
 8001500:	00820074 	movhi	r2,2049
 8001504:	10959f04 	addi	r2,r2,22140
 8001508:	10800043 	ldbu	r2,1(r2)
 800150c:	10803fcc 	andi	r2,r2,255
 8001510:	1885883a 	add	r2,r3,r2
 8001514:	d0a6d70d 	sth	r2,-25764(gp)
		dig_H3 = test_output[3];
 8001518:	00820074 	movhi	r2,2049
 800151c:	10959f04 	addi	r2,r2,22140
 8001520:	108000c3 	ldbu	r2,3(r2)
 8001524:	d0a6d785 	stb	r2,-25762(gp)
		dig_H4 = (test_output[4] << 4) + (test_output[5] & 0x0F)& 0xFFF;
 8001528:	00820074 	movhi	r2,2049
 800152c:	10959f04 	addi	r2,r2,22140
 8001530:	10800103 	ldbu	r2,4(r2)
 8001534:	10803fcc 	andi	r2,r2,255
 8001538:	1004913a 	slli	r2,r2,4
 800153c:	1007883a 	mov	r3,r2
 8001540:	00820074 	movhi	r2,2049
 8001544:	10959f04 	addi	r2,r2,22140
 8001548:	10800143 	ldbu	r2,5(r2)
 800154c:	10803fcc 	andi	r2,r2,255
 8001550:	108003cc 	andi	r2,r2,15
 8001554:	1885883a 	add	r2,r3,r2
 8001558:	1083ffcc 	andi	r2,r2,4095
 800155c:	d0a6d80d 	sth	r2,-25760(gp)
		dig_H5 = (test_output[6] << 4) + (test_output[5] & 0xF0)& 0xFFF;
 8001560:	00820074 	movhi	r2,2049
 8001564:	10959f04 	addi	r2,r2,22140
 8001568:	10800183 	ldbu	r2,6(r2)
 800156c:	10803fcc 	andi	r2,r2,255
 8001570:	1004913a 	slli	r2,r2,4
 8001574:	1007883a 	mov	r3,r2
 8001578:	00820074 	movhi	r2,2049
 800157c:	10959f04 	addi	r2,r2,22140
 8001580:	10800143 	ldbu	r2,5(r2)
 8001584:	10803fcc 	andi	r2,r2,255
 8001588:	10803c0c 	andi	r2,r2,240
 800158c:	1885883a 	add	r2,r3,r2
 8001590:	1083ffcc 	andi	r2,r2,4095
 8001594:	d0a6d88d 	sth	r2,-25758(gp)
		dig_H6 = test_output[7];
 8001598:	00820074 	movhi	r2,2049
 800159c:	10959f04 	addi	r2,r2,22140
 80015a0:	108001c3 	ldbu	r2,7(r2)
 80015a4:	d0a6d905 	stb	r2,-25756(gp)

		SETUP = 2;
 80015a8:	00800084 	movi	r2,2
 80015ac:	d0a6df15 	stw	r2,-25732(gp)
		IOWR(TIMER_0_BASE, 1, 8);
 80015b0:	00c00204 	movi	r3,8
 80015b4:	00880104 	movi	r2,8196
 80015b8:	10c00035 	stwio	r3,0(r2)
		IOWR(TIMER_0_BASE, 3, PERIOD);
 80015bc:	d0e00217 	ldw	r3,-32760(gp)
 80015c0:	00880304 	movi	r2,8204
 80015c4:	10c00035 	stwio	r3,0(r2)
		IOWR(TIMER_0_BASE, 1, 7);
 80015c8:	00c001c4 	movi	r3,7
 80015cc:	00880104 	movi	r2,8196
 80015d0:	10c00035 	stwio	r3,0(r2)
 80015d4:	0000e506 	br	800196c <timer_int_handler+0x7dc>
	} else if (SETUP == 2) {
 80015d8:	d0a6df17 	ldw	r2,-25732(gp)
 80015dc:	10800098 	cmpnei	r2,r2,2
 80015e0:	1000181e 	bne	r2,zero,8001644 <timer_int_handler+0x4b4>
		// tx mode
		test_input[0] = 0b00100000;
 80015e4:	00820074 	movhi	r2,2049
 80015e8:	1095a404 	addi	r2,r2,22160
 80015ec:	00c00804 	movi	r3,32
 80015f0:	10c00005 	stb	r3,0(r2)
		test_input[1] = 0b00001010; // power up
 80015f4:	00820074 	movhi	r2,2049
 80015f8:	1095a404 	addi	r2,r2,22160
 80015fc:	00c00284 	movi	r3,10
 8001600:	10c00045 	stb	r3,1(r2)
		spi_comm_nrf(test_input, test_output, 2, 0);
 8001604:	000f883a 	mov	r7,zero
 8001608:	01800084 	movi	r6,2
 800160c:	01420074 	movhi	r5,2049
 8001610:	29559f04 	addi	r5,r5,22140
 8001614:	01020074 	movhi	r4,2049
 8001618:	2115a404 	addi	r4,r4,22160
 800161c:	8000c240 	call	8000c24 <spi_comm_nrf>
		SETUP = 3;
 8001620:	008000c4 	movi	r2,3
 8001624:	d0a6df15 	stw	r2,-25732(gp)

		IOWR(TIMER_0_BASE, 3, 2);
 8001628:	00c00084 	movi	r3,2
 800162c:	00880304 	movi	r2,8204
 8001630:	10c00035 	stwio	r3,0(r2)
		IOWR(TIMER_0_BASE, 1, 7);
 8001634:	00c001c4 	movi	r3,7
 8001638:	00880104 	movi	r2,8196
 800163c:	10c00035 	stwio	r3,0(r2)
 8001640:	0000ca06 	br	800196c <timer_int_handler+0x7dc>
	} else if (SETUP == 3) {
 8001644:	d0a6df17 	ldw	r2,-25732(gp)
 8001648:	108000d8 	cmpnei	r2,r2,3
 800164c:	1000941e 	bne	r2,zero,80018a0 <timer_int_handler+0x710>
		IOWR(TIMER_0_BASE, 1, 8);
 8001650:	00c00204 	movi	r3,8
 8001654:	00880104 	movi	r2,8196
 8001658:	10c00035 	stwio	r3,0(r2)
		test_input[0] = 0xF7;
 800165c:	00820074 	movhi	r2,2049
 8001660:	1095a404 	addi	r2,r2,22160
 8001664:	00fffdc4 	movi	r3,-9
 8001668:	10c00005 	stb	r3,0(r2)
		spi_comm(test_input, test_output, 1, 9);
 800166c:	01c00244 	movi	r7,9
 8001670:	01800044 	movi	r6,1
 8001674:	01420074 	movhi	r5,2049
 8001678:	29559f04 	addi	r5,r5,22140
 800167c:	01020074 	movhi	r4,2049
 8001680:	2115a404 	addi	r4,r4,22160
 8001684:	8000abc0 	call	8000abc <spi_comm>
		print_array_v(test_output, 9);
 8001688:	01400244 	movi	r5,9
 800168c:	01020074 	movhi	r4,2049
 8001690:	21159f04 	addi	r4,r4,22140
 8001694:	8000e700 	call	8000e70 <print_array_v>


		IOWR(NRF_CE_BASE, 0, 1);
 8001698:	00c00044 	movi	r3,1
 800169c:	00880c04 	movi	r2,8240
 80016a0:	10c00035 	stwio	r3,0(r2)
		int j =0;
 80016a4:	e03ffd15 	stw	zero,-12(fp)
		for (int i = 0; i < 10000; i++) {
 80016a8:	e03ffb15 	stw	zero,-20(fp)
 80016ac:	00000506 	br	80016c4 <timer_int_handler+0x534>
			j = 1;
 80016b0:	00800044 	movi	r2,1
 80016b4:	e0bffd15 	stw	r2,-12(fp)
		print_array_v(test_output, 9);


		IOWR(NRF_CE_BASE, 0, 1);
		int j =0;
		for (int i = 0; i < 10000; i++) {
 80016b8:	e0bffb17 	ldw	r2,-20(fp)
 80016bc:	10800044 	addi	r2,r2,1
 80016c0:	e0bffb15 	stw	r2,-20(fp)
 80016c4:	e0bffb17 	ldw	r2,-20(fp)
 80016c8:	1089c410 	cmplti	r2,r2,10000
 80016cc:	103ff81e 	bne	r2,zero,80016b0 <__alt_data_end+0xff0016b0>
			j = 1;
		}
		test_input[0] = 0b10100000;
 80016d0:	00820074 	movhi	r2,2049
 80016d4:	1095a404 	addi	r2,r2,22160
 80016d8:	00ffe804 	movi	r3,-96
 80016dc:	10c00005 	stb	r3,0(r2)
		union float_by_bit p;
		p.f = p_result_float;
 80016e0:	d0a6dc17 	ldw	r2,-25744(gp)
 80016e4:	e0bffe15 	stw	r2,-8(fp)
		union float_by_bit h;
		h.f = h_result_float;
 80016e8:	d0a6de17 	ldw	r2,-25736(gp)
 80016ec:	e0bfff15 	stw	r2,-4(fp)
		test_input[1] = (t_result >> 24) & 0xFF;
 80016f0:	d0a6da17 	ldw	r2,-25752(gp)
 80016f4:	1004d63a 	srli	r2,r2,24
 80016f8:	1007883a 	mov	r3,r2
 80016fc:	00820074 	movhi	r2,2049
 8001700:	1095a404 	addi	r2,r2,22160
 8001704:	10c00045 	stb	r3,1(r2)
		test_input[2] = (t_result >> 16) & 0xFF;
 8001708:	d0a6da17 	ldw	r2,-25752(gp)
 800170c:	1005d43a 	srai	r2,r2,16
 8001710:	1007883a 	mov	r3,r2
 8001714:	00820074 	movhi	r2,2049
 8001718:	1095a404 	addi	r2,r2,22160
 800171c:	10c00085 	stb	r3,2(r2)
		test_input[3] = (t_result >> 8) & 0xFF;
 8001720:	d0a6da17 	ldw	r2,-25752(gp)
 8001724:	1005d23a 	srai	r2,r2,8
 8001728:	1007883a 	mov	r3,r2
 800172c:	00820074 	movhi	r2,2049
 8001730:	1095a404 	addi	r2,r2,22160
 8001734:	10c000c5 	stb	r3,3(r2)
		test_input[4] = (t_result >> 0) & 0xFF;
 8001738:	d0a6da17 	ldw	r2,-25752(gp)
 800173c:	1007883a 	mov	r3,r2
 8001740:	00820074 	movhi	r2,2049
 8001744:	1095a404 	addi	r2,r2,22160
 8001748:	10c00105 	stb	r3,4(r2)
		test_input[5] = (p.i >> 24) & 0xFF;
 800174c:	e0bffe17 	ldw	r2,-8(fp)
 8001750:	1004d63a 	srli	r2,r2,24
 8001754:	1007883a 	mov	r3,r2
 8001758:	00820074 	movhi	r2,2049
 800175c:	1095a404 	addi	r2,r2,22160
 8001760:	10c00145 	stb	r3,5(r2)
		test_input[6] = (p.i >> 16) & 0xFF;
 8001764:	e0bffe17 	ldw	r2,-8(fp)
 8001768:	1005d43a 	srai	r2,r2,16
 800176c:	1007883a 	mov	r3,r2
 8001770:	00820074 	movhi	r2,2049
 8001774:	1095a404 	addi	r2,r2,22160
 8001778:	10c00185 	stb	r3,6(r2)
		test_input[7] = (p.i >> 8) & 0xFF;
 800177c:	e0bffe17 	ldw	r2,-8(fp)
 8001780:	1005d23a 	srai	r2,r2,8
 8001784:	1007883a 	mov	r3,r2
 8001788:	00820074 	movhi	r2,2049
 800178c:	1095a404 	addi	r2,r2,22160
 8001790:	10c001c5 	stb	r3,7(r2)
		test_input[8] = (p.i >> 0) & 0xFF;
 8001794:	e0bffe17 	ldw	r2,-8(fp)
 8001798:	1007883a 	mov	r3,r2
 800179c:	00820074 	movhi	r2,2049
 80017a0:	1095a404 	addi	r2,r2,22160
 80017a4:	10c00205 	stb	r3,8(r2)
		test_input[9] = (h.i >> 24) & 0xFF;
 80017a8:	e0bfff17 	ldw	r2,-4(fp)
 80017ac:	1004d63a 	srli	r2,r2,24
 80017b0:	1007883a 	mov	r3,r2
 80017b4:	00820074 	movhi	r2,2049
 80017b8:	1095a404 	addi	r2,r2,22160
 80017bc:	10c00245 	stb	r3,9(r2)
		test_input[10] = (h.i >> 16) & 0xFF;
 80017c0:	e0bfff17 	ldw	r2,-4(fp)
 80017c4:	1005d43a 	srai	r2,r2,16
 80017c8:	1007883a 	mov	r3,r2
 80017cc:	00820074 	movhi	r2,2049
 80017d0:	1095a404 	addi	r2,r2,22160
 80017d4:	10c00285 	stb	r3,10(r2)
		test_input[11] = (h.i >> 8) & 0xFF;
 80017d8:	e0bfff17 	ldw	r2,-4(fp)
 80017dc:	1005d23a 	srai	r2,r2,8
 80017e0:	1007883a 	mov	r3,r2
 80017e4:	00820074 	movhi	r2,2049
 80017e8:	1095a404 	addi	r2,r2,22160
 80017ec:	10c002c5 	stb	r3,11(r2)
		test_input[12] = (h.i >> 0) & 0xFF;
 80017f0:	e0bfff17 	ldw	r2,-4(fp)
 80017f4:	1007883a 	mov	r3,r2
 80017f8:	00820074 	movhi	r2,2049
 80017fc:	1095a404 	addi	r2,r2,22160
 8001800:	10c00305 	stb	r3,12(r2)
		printf("Transmitted data: ");
 8001804:	01020074 	movhi	r4,2049
 8001808:	21073204 	addi	r4,r4,7368
 800180c:	800313c0 	call	800313c <printf>
		for (int i = 0; i < 13; i++) {
 8001810:	e03ffc15 	stw	zero,-16(fp)
 8001814:	00000d06 	br	800184c <timer_int_handler+0x6bc>
			printf("%x ", test_input[i]);
 8001818:	00820074 	movhi	r2,2049
 800181c:	1095a404 	addi	r2,r2,22160
 8001820:	e0fffc17 	ldw	r3,-16(fp)
 8001824:	10c5883a 	add	r2,r2,r3
 8001828:	10800003 	ldbu	r2,0(r2)
 800182c:	10803fcc 	andi	r2,r2,255
 8001830:	100b883a 	mov	r5,r2
 8001834:	01020074 	movhi	r4,2049
 8001838:	21073704 	addi	r4,r4,7388
 800183c:	800313c0 	call	800313c <printf>
		test_input[9] = (h.i >> 24) & 0xFF;
		test_input[10] = (h.i >> 16) & 0xFF;
		test_input[11] = (h.i >> 8) & 0xFF;
		test_input[12] = (h.i >> 0) & 0xFF;
		printf("Transmitted data: ");
		for (int i = 0; i < 13; i++) {
 8001840:	e0bffc17 	ldw	r2,-16(fp)
 8001844:	10800044 	addi	r2,r2,1
 8001848:	e0bffc15 	stw	r2,-16(fp)
 800184c:	e0bffc17 	ldw	r2,-16(fp)
 8001850:	10800350 	cmplti	r2,r2,13
 8001854:	103ff01e 	bne	r2,zero,8001818 <__alt_data_end+0xff001818>
			printf("%x ", test_input[i]);
		}
		printf("\n");
 8001858:	01000284 	movi	r4,10
 800185c:	80031800 	call	8003180 <putchar>
		spi_comm_nrf(test_input, test_output, 13, 0);
 8001860:	000f883a 	mov	r7,zero
 8001864:	01800344 	movi	r6,13
 8001868:	01420074 	movhi	r5,2049
 800186c:	29559f04 	addi	r5,r5,22140
 8001870:	01020074 	movhi	r4,2049
 8001874:	2115a404 	addi	r4,r4,22160
 8001878:	8000c240 	call	8000c24 <spi_comm_nrf>

		SETUP = 4;
 800187c:	00800104 	movi	r2,4
 8001880:	d0a6df15 	stw	r2,-25732(gp)
		IOWR(TIMER_0_BASE, 3, 1);
 8001884:	00c00044 	movi	r3,1
 8001888:	00880304 	movi	r2,8204
 800188c:	10c00035 	stwio	r3,0(r2)
		IOWR(TIMER_0_BASE, 1, 7);
 8001890:	00c001c4 	movi	r3,7
 8001894:	00880104 	movi	r2,8196
 8001898:	10c00035 	stwio	r3,0(r2)
 800189c:	00003306 	br	800196c <timer_int_handler+0x7dc>
	} else if (SETUP == 4) {
 80018a0:	d0a6df17 	ldw	r2,-25732(gp)
 80018a4:	10800118 	cmpnei	r2,r2,4
 80018a8:	1000301e 	bne	r2,zero,800196c <timer_int_handler+0x7dc>
		IOWR(TIMER_0_BASE, 1, 8);
 80018ac:	00c00204 	movi	r3,8
 80018b0:	00880104 	movi	r2,8196
 80018b4:	10c00035 	stwio	r3,0(r2)
		IOWR(NRF_CE_BASE, 0, 0);
 80018b8:	0007883a 	mov	r3,zero
 80018bc:	00880c04 	movi	r2,8240
 80018c0:	10c00035 	stwio	r3,0(r2)
		IOWR(TIMER_0_BASE, 3, PERIOD);
 80018c4:	d0e00217 	ldw	r3,-32760(gp)
 80018c8:	00880304 	movi	r2,8204
 80018cc:	10c00035 	stwio	r3,0(r2)
		IOWR(TIMER_0_BASE, 1, 7);
 80018d0:	00c001c4 	movi	r3,7
 80018d4:	00880104 	movi	r2,8196
 80018d8:	10c00035 	stwio	r3,0(r2)

		test_input[0] = 0xFF;
 80018dc:	00820074 	movhi	r2,2049
 80018e0:	1095a404 	addi	r2,r2,22160
 80018e4:	00ffffc4 	movi	r3,-1
 80018e8:	10c00005 	stb	r3,0(r2)
		spi_comm_nrf(test_input, test_output, 1, 1);
 80018ec:	01c00044 	movi	r7,1
 80018f0:	01800044 	movi	r6,1
 80018f4:	01420074 	movhi	r5,2049
 80018f8:	29559f04 	addi	r5,r5,22140
 80018fc:	01020074 	movhi	r4,2049
 8001900:	2115a404 	addi	r4,r4,22160
 8001904:	8000c240 	call	8000c24 <spi_comm_nrf>
		printf("Status: %x\n\n", test_output[0]);
 8001908:	00820074 	movhi	r2,2049
 800190c:	10959f04 	addi	r2,r2,22140
 8001910:	10800003 	ldbu	r2,0(r2)
 8001914:	10803fcc 	andi	r2,r2,255
 8001918:	100b883a 	mov	r5,r2
 800191c:	01020074 	movhi	r4,2049
 8001920:	21073804 	addi	r4,r4,7392
 8001924:	800313c0 	call	800313c <printf>

		test_input[0]=0x27;
 8001928:	00820074 	movhi	r2,2049
 800192c:	1095a404 	addi	r2,r2,22160
 8001930:	00c009c4 	movi	r3,39
 8001934:	10c00005 	stb	r3,0(r2)
		test_input[1]=0x2E;
 8001938:	00820074 	movhi	r2,2049
 800193c:	1095a404 	addi	r2,r2,22160
 8001940:	00c00b84 	movi	r3,46
 8001944:	10c00045 	stb	r3,1(r2)
		spi_comm_nrf(test_input, test_output, 2, 0);
 8001948:	000f883a 	mov	r7,zero
 800194c:	01800084 	movi	r6,2
 8001950:	01420074 	movhi	r5,2049
 8001954:	29559f04 	addi	r5,r5,22140
 8001958:	01020074 	movhi	r4,2049
 800195c:	2115a404 	addi	r4,r4,22160
 8001960:	8000c240 	call	8000c24 <spi_comm_nrf>
		SETUP = 2;
 8001964:	00800084 	movi	r2,2
 8001968:	d0a6df15 	stw	r2,-25732(gp)
	}
	IOWR(TIMER_0_BASE, 0, 0);
 800196c:	0007883a 	mov	r3,zero
 8001970:	00880004 	movi	r2,8192
 8001974:	10c00035 	stwio	r3,0(r2)
	return;
 8001978:	0001883a 	nop
}
 800197c:	e037883a 	mov	sp,fp
 8001980:	dfc00117 	ldw	ra,4(sp)
 8001984:	df000017 	ldw	fp,0(sp)
 8001988:	dec00204 	addi	sp,sp,8
 800198c:	f800283a 	ret

08001990 <pio_init>:

static void pio_init()
{
 8001990:	defffe04 	addi	sp,sp,-8
 8001994:	dfc00115 	stw	ra,4(sp)
 8001998:	df000015 	stw	fp,0(sp)
 800199c:	d839883a 	mov	fp,sp

	IOWR(SEVEN_SEG_0_BASE,0, -1);
 80019a0:	00ffffc4 	movi	r3,-1
 80019a4:	00884004 	movi	r2,8448
 80019a8:	10c00035 	stwio	r3,0(r2)
	IOWR(SEVEN_SEG_1_BASE, 0, -1);
 80019ac:	00ffffc4 	movi	r3,-1
 80019b0:	00883c04 	movi	r2,8432
 80019b4:	10c00035 	stwio	r3,0(r2)
	IOWR(LEDS_R_BASE, 0, 0);
 80019b8:	0007883a 	mov	r3,zero
 80019bc:	00884404 	movi	r2,8464
 80019c0:	10c00035 	stwio	r3,0(r2)
	IOWR(LEDS_G_BASE, 0, 0);
 80019c4:	0007883a 	mov	r3,zero
 80019c8:	00883404 	movi	r2,8400
 80019cc:	10c00035 	stwio	r3,0(r2)
	IOWR(TIMER_0_BASE, 1, 8);
 80019d0:	00c00204 	movi	r3,8
 80019d4:	00880104 	movi	r2,8196
 80019d8:	10c00035 	stwio	r3,0(r2)
	IOWR(TIMER_0_BASE, 3, PERIOD_INIT);
 80019dc:	d0e00117 	ldw	r3,-32764(gp)
 80019e0:	00880304 	movi	r2,8204
 80019e4:	10c00035 	stwio	r3,0(r2)
	IOWR(TIMER_0_BASE, 1, 7);
 80019e8:	00c001c4 	movi	r3,7
 80019ec:	00880104 	movi	r2,8196
 80019f0:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(TIMER_0_IRQ, TIMER_0_BASE, timer_int_handler);
 80019f4:	01820034 	movhi	r6,2048
 80019f8:	31846404 	addi	r6,r6,4496
 80019fc:	01480004 	movi	r5,8192
 8001a00:	01000044 	movi	r4,1
 8001a04:	800f2f80 	call	800f2f8 <alt_irq_register>

	return;
 8001a08:	0001883a 	nop
}
 8001a0c:	e037883a 	mov	sp,fp
 8001a10:	dfc00117 	ldw	ra,4(sp)
 8001a14:	df000017 	ldw	fp,0(sp)
 8001a18:	dec00204 	addi	sp,sp,8
 8001a1c:	f800283a 	ret

08001a20 <main>:


//

int main ()
{
 8001a20:	defffe04 	addi	sp,sp,-8
 8001a24:	dfc00115 	stw	ra,4(sp)
 8001a28:	df000015 	stw	fp,0(sp)
 8001a2c:	d839883a 	mov	fp,sp


	pio_init();
 8001a30:	80019900 	call	8001990 <pio_init>
	bme_init();
 8001a34:	8000a840 	call	8000a84 <bme_init>
	nrf_init();
 8001a38:	8000d8c0 	call	8000d8c <nrf_init>

	// initial setup
	// writing to crtl_meas to set up osrs_t and osrs_p and set mode
	// osrs_t = 001, osrs_p = 001, mode = 11
	test_input[0] = 0x74;
 8001a3c:	00820074 	movhi	r2,2049
 8001a40:	1095a404 	addi	r2,r2,22160
 8001a44:	00c01d04 	movi	r3,116
 8001a48:	10c00005 	stb	r3,0(r2)
	test_input[1] = 0x27;
 8001a4c:	00820074 	movhi	r2,2049
 8001a50:	1095a404 	addi	r2,r2,22160
 8001a54:	00c009c4 	movi	r3,39
 8001a58:	10c00045 	stb	r3,1(r2)
	spi_comm(test_input, test_output, 2, 0);
 8001a5c:	000f883a 	mov	r7,zero
 8001a60:	01800084 	movi	r6,2
 8001a64:	01420074 	movhi	r5,2049
 8001a68:	29559f04 	addi	r5,r5,22140
 8001a6c:	01020074 	movhi	r4,2049
 8001a70:	2115a404 	addi	r4,r4,22160
 8001a74:	8000abc0 	call	8000abc <spi_comm>
	SETUP = 1;
 8001a78:	00800044 	movi	r2,1
 8001a7c:	d0a6df15 	stw	r2,-25732(gp)

	return 0;
 8001a80:	0005883a 	mov	r2,zero
}
 8001a84:	e037883a 	mov	sp,fp
 8001a88:	dfc00117 	ldw	ra,4(sp)
 8001a8c:	df000017 	ldw	fp,0(sp)
 8001a90:	dec00204 	addi	sp,sp,8
 8001a94:	f800283a 	ret

08001a98 <__muldi3>:
 8001a98:	223fffcc 	andi	r8,r4,65535
 8001a9c:	2006d43a 	srli	r3,r4,16
 8001aa0:	32bfffcc 	andi	r10,r6,65535
 8001aa4:	3012d43a 	srli	r9,r6,16
 8001aa8:	4297383a 	mul	r11,r8,r10
 8001aac:	1a95383a 	mul	r10,r3,r10
 8001ab0:	4251383a 	mul	r8,r8,r9
 8001ab4:	5804d43a 	srli	r2,r11,16
 8001ab8:	4291883a 	add	r8,r8,r10
 8001abc:	1205883a 	add	r2,r2,r8
 8001ac0:	1a51383a 	mul	r8,r3,r9
 8001ac4:	1280022e 	bgeu	r2,r10,8001ad0 <__muldi3+0x38>
 8001ac8:	00c00074 	movhi	r3,1
 8001acc:	40d1883a 	add	r8,r8,r3
 8001ad0:	1006d43a 	srli	r3,r2,16
 8001ad4:	21cf383a 	mul	r7,r4,r7
 8001ad8:	314b383a 	mul	r5,r6,r5
 8001adc:	1004943a 	slli	r2,r2,16
 8001ae0:	1a11883a 	add	r8,r3,r8
 8001ae4:	5affffcc 	andi	r11,r11,65535
 8001ae8:	3947883a 	add	r3,r7,r5
 8001aec:	12c5883a 	add	r2,r2,r11
 8001af0:	1a07883a 	add	r3,r3,r8
 8001af4:	f800283a 	ret

08001af8 <__divdi3>:
 8001af8:	defff404 	addi	sp,sp,-48
 8001afc:	dfc00b15 	stw	ra,44(sp)
 8001b00:	df000a15 	stw	fp,40(sp)
 8001b04:	ddc00915 	stw	r23,36(sp)
 8001b08:	dd800815 	stw	r22,32(sp)
 8001b0c:	dd400715 	stw	r21,28(sp)
 8001b10:	dd000615 	stw	r20,24(sp)
 8001b14:	dcc00515 	stw	r19,20(sp)
 8001b18:	dc800415 	stw	r18,16(sp)
 8001b1c:	dc400315 	stw	r17,12(sp)
 8001b20:	dc000215 	stw	r16,8(sp)
 8001b24:	2800b416 	blt	r5,zero,8001df8 <__divdi3+0x300>
 8001b28:	2027883a 	mov	r19,r4
 8001b2c:	2825883a 	mov	r18,r5
 8001b30:	0021883a 	mov	r16,zero
 8001b34:	3800aa16 	blt	r7,zero,8001de0 <__divdi3+0x2e8>
 8001b38:	302d883a 	mov	r22,r6
 8001b3c:	9823883a 	mov	r17,r19
 8001b40:	902b883a 	mov	r21,r18
 8001b44:	38003f1e 	bne	r7,zero,8001c44 <__divdi3+0x14c>
 8001b48:	9180662e 	bgeu	r18,r6,8001ce4 <__divdi3+0x1ec>
 8001b4c:	00bfffd4 	movui	r2,65535
 8001b50:	1180b42e 	bgeu	r2,r6,8001e24 <__divdi3+0x32c>
 8001b54:	00804034 	movhi	r2,256
 8001b58:	10bfffc4 	addi	r2,r2,-1
 8001b5c:	11814136 	bltu	r2,r6,8002064 <__divdi3+0x56c>
 8001b60:	00800404 	movi	r2,16
 8001b64:	3088d83a 	srl	r4,r6,r2
 8001b68:	00c20074 	movhi	r3,2049
 8001b6c:	18c73b44 	addi	r3,r3,7405
 8001b70:	1909883a 	add	r4,r3,r4
 8001b74:	20c00003 	ldbu	r3,0(r4)
 8001b78:	01c00804 	movi	r7,32
 8001b7c:	1885883a 	add	r2,r3,r2
 8001b80:	388fc83a 	sub	r7,r7,r2
 8001b84:	38000526 	beq	r7,zero,8001b9c <__divdi3+0xa4>
 8001b88:	91ca983a 	sll	r5,r18,r7
 8001b8c:	9884d83a 	srl	r2,r19,r2
 8001b90:	31ec983a 	sll	r22,r6,r7
 8001b94:	99e2983a 	sll	r17,r19,r7
 8001b98:	116ab03a 	or	r21,r2,r5
 8001b9c:	b028d43a 	srli	r20,r22,16
 8001ba0:	a809883a 	mov	r4,r21
 8001ba4:	b4ffffcc 	andi	r19,r22,65535
 8001ba8:	a00b883a 	mov	r5,r20
 8001bac:	800221c0 	call	800221c <__umodsi3>
 8001bb0:	a00b883a 	mov	r5,r20
 8001bb4:	a809883a 	mov	r4,r21
 8001bb8:	1025883a 	mov	r18,r2
 8001bbc:	80021b80 	call	80021b8 <__udivsi3>
 8001bc0:	102f883a 	mov	r23,r2
 8001bc4:	9006943a 	slli	r3,r18,16
 8001bc8:	8804d43a 	srli	r2,r17,16
 8001bcc:	9de5383a 	mul	r18,r19,r23
 8001bd0:	10c4b03a 	or	r2,r2,r3
 8001bd4:	1480052e 	bgeu	r2,r18,8001bec <__divdi3+0xf4>
 8001bd8:	1585883a 	add	r2,r2,r22
 8001bdc:	b8ffffc4 	addi	r3,r23,-1
 8001be0:	15800136 	bltu	r2,r22,8001be8 <__divdi3+0xf0>
 8001be4:	14813036 	bltu	r2,r18,80020a8 <__divdi3+0x5b0>
 8001be8:	182f883a 	mov	r23,r3
 8001bec:	14a5c83a 	sub	r18,r2,r18
 8001bf0:	a00b883a 	mov	r5,r20
 8001bf4:	9009883a 	mov	r4,r18
 8001bf8:	800221c0 	call	800221c <__umodsi3>
 8001bfc:	102b883a 	mov	r21,r2
 8001c00:	a00b883a 	mov	r5,r20
 8001c04:	9009883a 	mov	r4,r18
 8001c08:	80021b80 	call	80021b8 <__udivsi3>
 8001c0c:	a82a943a 	slli	r21,r21,16
 8001c10:	98a7383a 	mul	r19,r19,r2
 8001c14:	8c7fffcc 	andi	r17,r17,65535
 8001c18:	8d62b03a 	or	r17,r17,r21
 8001c1c:	8cc0052e 	bgeu	r17,r19,8001c34 <__divdi3+0x13c>
 8001c20:	b463883a 	add	r17,r22,r17
 8001c24:	10ffffc4 	addi	r3,r2,-1
 8001c28:	8d800136 	bltu	r17,r22,8001c30 <__divdi3+0x138>
 8001c2c:	8cc11c36 	bltu	r17,r19,80020a0 <__divdi3+0x5a8>
 8001c30:	1805883a 	mov	r2,r3
 8001c34:	b80c943a 	slli	r6,r23,16
 8001c38:	0027883a 	mov	r19,zero
 8001c3c:	3084b03a 	or	r2,r6,r2
 8001c40:	00000306 	br	8001c50 <__divdi3+0x158>
 8001c44:	91c0142e 	bgeu	r18,r7,8001c98 <__divdi3+0x1a0>
 8001c48:	0027883a 	mov	r19,zero
 8001c4c:	0005883a 	mov	r2,zero
 8001c50:	9807883a 	mov	r3,r19
 8001c54:	80000426 	beq	r16,zero,8001c68 <__divdi3+0x170>
 8001c58:	0085c83a 	sub	r2,zero,r2
 8001c5c:	1008c03a 	cmpne	r4,r2,zero
 8001c60:	04c7c83a 	sub	r3,zero,r19
 8001c64:	1907c83a 	sub	r3,r3,r4
 8001c68:	dfc00b17 	ldw	ra,44(sp)
 8001c6c:	df000a17 	ldw	fp,40(sp)
 8001c70:	ddc00917 	ldw	r23,36(sp)
 8001c74:	dd800817 	ldw	r22,32(sp)
 8001c78:	dd400717 	ldw	r21,28(sp)
 8001c7c:	dd000617 	ldw	r20,24(sp)
 8001c80:	dcc00517 	ldw	r19,20(sp)
 8001c84:	dc800417 	ldw	r18,16(sp)
 8001c88:	dc400317 	ldw	r17,12(sp)
 8001c8c:	dc000217 	ldw	r16,8(sp)
 8001c90:	dec00c04 	addi	sp,sp,48
 8001c94:	f800283a 	ret
 8001c98:	00bfffd4 	movui	r2,65535
 8001c9c:	11c0652e 	bgeu	r2,r7,8001e34 <__divdi3+0x33c>
 8001ca0:	00804034 	movhi	r2,256
 8001ca4:	10bfffc4 	addi	r2,r2,-1
 8001ca8:	11c0ec36 	bltu	r2,r7,800205c <__divdi3+0x564>
 8001cac:	00800404 	movi	r2,16
 8001cb0:	3886d83a 	srl	r3,r7,r2
 8001cb4:	01020074 	movhi	r4,2049
 8001cb8:	21073b44 	addi	r4,r4,7405
 8001cbc:	20c7883a 	add	r3,r4,r3
 8001cc0:	1c400003 	ldbu	r17,0(r3)
 8001cc4:	05800804 	movi	r22,32
 8001cc8:	8885883a 	add	r2,r17,r2
 8001ccc:	b0adc83a 	sub	r22,r22,r2
 8001cd0:	b0008e1e 	bne	r22,zero,8001f0c <__divdi3+0x414>
 8001cd4:	3c80e536 	bltu	r7,r18,800206c <__divdi3+0x574>
 8001cd8:	9985403a 	cmpgeu	r2,r19,r6
 8001cdc:	0027883a 	mov	r19,zero
 8001ce0:	003fdb06 	br	8001c50 <__alt_data_end+0xff001c50>
 8001ce4:	3000041e 	bne	r6,zero,8001cf8 <__divdi3+0x200>
 8001ce8:	000b883a 	mov	r5,zero
 8001cec:	01000044 	movi	r4,1
 8001cf0:	80021b80 	call	80021b8 <__udivsi3>
 8001cf4:	102d883a 	mov	r22,r2
 8001cf8:	00bfffd4 	movui	r2,65535
 8001cfc:	1580452e 	bgeu	r2,r22,8001e14 <__divdi3+0x31c>
 8001d00:	00804034 	movhi	r2,256
 8001d04:	10bfffc4 	addi	r2,r2,-1
 8001d08:	1580d236 	bltu	r2,r22,8002054 <__divdi3+0x55c>
 8001d0c:	00800404 	movi	r2,16
 8001d10:	b086d83a 	srl	r3,r22,r2
 8001d14:	01020074 	movhi	r4,2049
 8001d18:	21073b44 	addi	r4,r4,7405
 8001d1c:	20c7883a 	add	r3,r4,r3
 8001d20:	18c00003 	ldbu	r3,0(r3)
 8001d24:	01800804 	movi	r6,32
 8001d28:	1885883a 	add	r2,r3,r2
 8001d2c:	308dc83a 	sub	r6,r6,r2
 8001d30:	3000441e 	bne	r6,zero,8001e44 <__divdi3+0x34c>
 8001d34:	b02ad43a 	srli	r21,r22,16
 8001d38:	95afc83a 	sub	r23,r18,r22
 8001d3c:	b53fffcc 	andi	r20,r22,65535
 8001d40:	04c00044 	movi	r19,1
 8001d44:	a80b883a 	mov	r5,r21
 8001d48:	b809883a 	mov	r4,r23
 8001d4c:	800221c0 	call	800221c <__umodsi3>
 8001d50:	b809883a 	mov	r4,r23
 8001d54:	a80b883a 	mov	r5,r21
 8001d58:	1025883a 	mov	r18,r2
 8001d5c:	80021b80 	call	80021b8 <__udivsi3>
 8001d60:	900e943a 	slli	r7,r18,16
 8001d64:	8808d43a 	srli	r4,r17,16
 8001d68:	1525383a 	mul	r18,r2,r20
 8001d6c:	1039883a 	mov	fp,r2
 8001d70:	21c8b03a 	or	r4,r4,r7
 8001d74:	2480052e 	bgeu	r4,r18,8001d8c <__divdi3+0x294>
 8001d78:	2589883a 	add	r4,r4,r22
 8001d7c:	e0bfffc4 	addi	r2,fp,-1
 8001d80:	25800136 	bltu	r4,r22,8001d88 <__divdi3+0x290>
 8001d84:	2480cb36 	bltu	r4,r18,80020b4 <__divdi3+0x5bc>
 8001d88:	1039883a 	mov	fp,r2
 8001d8c:	24a5c83a 	sub	r18,r4,r18
 8001d90:	a80b883a 	mov	r5,r21
 8001d94:	9009883a 	mov	r4,r18
 8001d98:	800221c0 	call	800221c <__umodsi3>
 8001d9c:	102f883a 	mov	r23,r2
 8001da0:	a80b883a 	mov	r5,r21
 8001da4:	9009883a 	mov	r4,r18
 8001da8:	80021b80 	call	80021b8 <__udivsi3>
 8001dac:	b82e943a 	slli	r23,r23,16
 8001db0:	1529383a 	mul	r20,r2,r20
 8001db4:	8c7fffcc 	andi	r17,r17,65535
 8001db8:	8de2b03a 	or	r17,r17,r23
 8001dbc:	8d00052e 	bgeu	r17,r20,8001dd4 <__divdi3+0x2dc>
 8001dc0:	b463883a 	add	r17,r22,r17
 8001dc4:	10ffffc4 	addi	r3,r2,-1
 8001dc8:	8d800136 	bltu	r17,r22,8001dd0 <__divdi3+0x2d8>
 8001dcc:	8d00b236 	bltu	r17,r20,8002098 <__divdi3+0x5a0>
 8001dd0:	1805883a 	mov	r2,r3
 8001dd4:	e00c943a 	slli	r6,fp,16
 8001dd8:	3084b03a 	or	r2,r6,r2
 8001ddc:	003f9c06 	br	8001c50 <__alt_data_end+0xff001c50>
 8001de0:	018dc83a 	sub	r6,zero,r6
 8001de4:	3004c03a 	cmpne	r2,r6,zero
 8001de8:	01cfc83a 	sub	r7,zero,r7
 8001dec:	0420303a 	nor	r16,zero,r16
 8001df0:	388fc83a 	sub	r7,r7,r2
 8001df4:	003f5006 	br	8001b38 <__alt_data_end+0xff001b38>
 8001df8:	0105c83a 	sub	r2,zero,r4
 8001dfc:	1006c03a 	cmpne	r3,r2,zero
 8001e00:	014bc83a 	sub	r5,zero,r5
 8001e04:	1027883a 	mov	r19,r2
 8001e08:	28e5c83a 	sub	r18,r5,r3
 8001e0c:	043fffc4 	movi	r16,-1
 8001e10:	003f4806 	br	8001b34 <__alt_data_end+0xff001b34>
 8001e14:	00803fc4 	movi	r2,255
 8001e18:	1585803a 	cmpltu	r2,r2,r22
 8001e1c:	100490fa 	slli	r2,r2,3
 8001e20:	003fbb06 	br	8001d10 <__alt_data_end+0xff001d10>
 8001e24:	00803fc4 	movi	r2,255
 8001e28:	1185803a 	cmpltu	r2,r2,r6
 8001e2c:	100490fa 	slli	r2,r2,3
 8001e30:	003f4c06 	br	8001b64 <__alt_data_end+0xff001b64>
 8001e34:	00803fc4 	movi	r2,255
 8001e38:	11c5803a 	cmpltu	r2,r2,r7
 8001e3c:	100490fa 	slli	r2,r2,3
 8001e40:	003f9b06 	br	8001cb0 <__alt_data_end+0xff001cb0>
 8001e44:	b1ac983a 	sll	r22,r22,r6
 8001e48:	90a8d83a 	srl	r20,r18,r2
 8001e4c:	9186983a 	sll	r3,r18,r6
 8001e50:	b02ad43a 	srli	r21,r22,16
 8001e54:	9884d83a 	srl	r2,r19,r2
 8001e58:	a009883a 	mov	r4,r20
 8001e5c:	a80b883a 	mov	r5,r21
 8001e60:	10f8b03a 	or	fp,r2,r3
 8001e64:	99a2983a 	sll	r17,r19,r6
 8001e68:	800221c0 	call	800221c <__umodsi3>
 8001e6c:	a009883a 	mov	r4,r20
 8001e70:	a80b883a 	mov	r5,r21
 8001e74:	1025883a 	mov	r18,r2
 8001e78:	80021b80 	call	80021b8 <__udivsi3>
 8001e7c:	1027883a 	mov	r19,r2
 8001e80:	9008943a 	slli	r4,r18,16
 8001e84:	b53fffcc 	andi	r20,r22,65535
 8001e88:	e004d43a 	srli	r2,fp,16
 8001e8c:	a4e5383a 	mul	r18,r20,r19
 8001e90:	1104b03a 	or	r2,r2,r4
 8001e94:	1480062e 	bgeu	r2,r18,8001eb0 <__divdi3+0x3b8>
 8001e98:	1585883a 	add	r2,r2,r22
 8001e9c:	98ffffc4 	addi	r3,r19,-1
 8001ea0:	15807b36 	bltu	r2,r22,8002090 <__divdi3+0x598>
 8001ea4:	14807a2e 	bgeu	r2,r18,8002090 <__divdi3+0x598>
 8001ea8:	9cffff84 	addi	r19,r19,-2
 8001eac:	1585883a 	add	r2,r2,r22
 8001eb0:	14a5c83a 	sub	r18,r2,r18
 8001eb4:	9009883a 	mov	r4,r18
 8001eb8:	a80b883a 	mov	r5,r21
 8001ebc:	800221c0 	call	800221c <__umodsi3>
 8001ec0:	9009883a 	mov	r4,r18
 8001ec4:	a80b883a 	mov	r5,r21
 8001ec8:	102f883a 	mov	r23,r2
 8001ecc:	80021b80 	call	80021b8 <__udivsi3>
 8001ed0:	b808943a 	slli	r4,r23,16
 8001ed4:	a0a5383a 	mul	r18,r20,r2
 8001ed8:	e73fffcc 	andi	fp,fp,65535
 8001edc:	e108b03a 	or	r4,fp,r4
 8001ee0:	2480062e 	bgeu	r4,r18,8001efc <__divdi3+0x404>
 8001ee4:	2589883a 	add	r4,r4,r22
 8001ee8:	10ffffc4 	addi	r3,r2,-1
 8001eec:	25806436 	bltu	r4,r22,8002080 <__divdi3+0x588>
 8001ef0:	2480632e 	bgeu	r4,r18,8002080 <__divdi3+0x588>
 8001ef4:	10bfff84 	addi	r2,r2,-2
 8001ef8:	2589883a 	add	r4,r4,r22
 8001efc:	9826943a 	slli	r19,r19,16
 8001f00:	24afc83a 	sub	r23,r4,r18
 8001f04:	98a6b03a 	or	r19,r19,r2
 8001f08:	003f8e06 	br	8001d44 <__alt_data_end+0xff001d44>
 8001f0c:	30b8d83a 	srl	fp,r6,r2
 8001f10:	3d8e983a 	sll	r7,r7,r22
 8001f14:	90aed83a 	srl	r23,r18,r2
 8001f18:	9586983a 	sll	r3,r18,r22
 8001f1c:	3f38b03a 	or	fp,r7,fp
 8001f20:	e028d43a 	srli	r20,fp,16
 8001f24:	9884d83a 	srl	r2,r19,r2
 8001f28:	b809883a 	mov	r4,r23
 8001f2c:	a00b883a 	mov	r5,r20
 8001f30:	10e2b03a 	or	r17,r2,r3
 8001f34:	35aa983a 	sll	r21,r6,r22
 8001f38:	800221c0 	call	800221c <__umodsi3>
 8001f3c:	a00b883a 	mov	r5,r20
 8001f40:	b809883a 	mov	r4,r23
 8001f44:	1025883a 	mov	r18,r2
 8001f48:	80021b80 	call	80021b8 <__udivsi3>
 8001f4c:	100d883a 	mov	r6,r2
 8001f50:	9006943a 	slli	r3,r18,16
 8001f54:	e1ffffcc 	andi	r7,fp,65535
 8001f58:	8804d43a 	srli	r2,r17,16
 8001f5c:	39a5383a 	mul	r18,r7,r6
 8001f60:	10c4b03a 	or	r2,r2,r3
 8001f64:	1480062e 	bgeu	r2,r18,8001f80 <__divdi3+0x488>
 8001f68:	1705883a 	add	r2,r2,fp
 8001f6c:	30ffffc4 	addi	r3,r6,-1
 8001f70:	17004536 	bltu	r2,fp,8002088 <__divdi3+0x590>
 8001f74:	1480442e 	bgeu	r2,r18,8002088 <__divdi3+0x590>
 8001f78:	31bfff84 	addi	r6,r6,-2
 8001f7c:	1705883a 	add	r2,r2,fp
 8001f80:	14a5c83a 	sub	r18,r2,r18
 8001f84:	a00b883a 	mov	r5,r20
 8001f88:	9009883a 	mov	r4,r18
 8001f8c:	d9800115 	stw	r6,4(sp)
 8001f90:	d9c00015 	stw	r7,0(sp)
 8001f94:	800221c0 	call	800221c <__umodsi3>
 8001f98:	a00b883a 	mov	r5,r20
 8001f9c:	9009883a 	mov	r4,r18
 8001fa0:	102f883a 	mov	r23,r2
 8001fa4:	80021b80 	call	80021b8 <__udivsi3>
 8001fa8:	d9c00017 	ldw	r7,0(sp)
 8001fac:	b82e943a 	slli	r23,r23,16
 8001fb0:	88ffffcc 	andi	r3,r17,65535
 8001fb4:	388b383a 	mul	r5,r7,r2
 8001fb8:	1dc6b03a 	or	r3,r3,r23
 8001fbc:	d9800117 	ldw	r6,4(sp)
 8001fc0:	1940062e 	bgeu	r3,r5,8001fdc <__divdi3+0x4e4>
 8001fc4:	1f07883a 	add	r3,r3,fp
 8001fc8:	113fffc4 	addi	r4,r2,-1
 8001fcc:	1f002a36 	bltu	r3,fp,8002078 <__divdi3+0x580>
 8001fd0:	1940292e 	bgeu	r3,r5,8002078 <__divdi3+0x580>
 8001fd4:	10bfff84 	addi	r2,r2,-2
 8001fd8:	1f07883a 	add	r3,r3,fp
 8001fdc:	3008943a 	slli	r4,r6,16
 8001fe0:	a9ffffcc 	andi	r7,r21,65535
 8001fe4:	a82ad43a 	srli	r21,r21,16
 8001fe8:	2084b03a 	or	r2,r4,r2
 8001fec:	113fffcc 	andi	r4,r2,65535
 8001ff0:	100cd43a 	srli	r6,r2,16
 8001ff4:	21d1383a 	mul	r8,r4,r7
 8001ff8:	2549383a 	mul	r4,r4,r21
 8001ffc:	31cf383a 	mul	r7,r6,r7
 8002000:	4012d43a 	srli	r9,r8,16
 8002004:	1947c83a 	sub	r3,r3,r5
 8002008:	21c9883a 	add	r4,r4,r7
 800200c:	4909883a 	add	r4,r9,r4
 8002010:	356b383a 	mul	r21,r6,r21
 8002014:	21c0022e 	bgeu	r4,r7,8002020 <__divdi3+0x528>
 8002018:	01400074 	movhi	r5,1
 800201c:	a96b883a 	add	r21,r21,r5
 8002020:	200ad43a 	srli	r5,r4,16
 8002024:	2d6b883a 	add	r21,r5,r21
 8002028:	1d400836 	bltu	r3,r21,800204c <__divdi3+0x554>
 800202c:	1d400226 	beq	r3,r21,8002038 <__divdi3+0x540>
 8002030:	0027883a 	mov	r19,zero
 8002034:	003f0606 	br	8001c50 <__alt_data_end+0xff001c50>
 8002038:	2008943a 	slli	r4,r4,16
 800203c:	9da6983a 	sll	r19,r19,r22
 8002040:	423fffcc 	andi	r8,r8,65535
 8002044:	2209883a 	add	r4,r4,r8
 8002048:	993ff92e 	bgeu	r19,r4,8002030 <__alt_data_end+0xff002030>
 800204c:	10bfffc4 	addi	r2,r2,-1
 8002050:	003ff706 	br	8002030 <__alt_data_end+0xff002030>
 8002054:	00800604 	movi	r2,24
 8002058:	003f2d06 	br	8001d10 <__alt_data_end+0xff001d10>
 800205c:	00800604 	movi	r2,24
 8002060:	003f1306 	br	8001cb0 <__alt_data_end+0xff001cb0>
 8002064:	00800604 	movi	r2,24
 8002068:	003ebe06 	br	8001b64 <__alt_data_end+0xff001b64>
 800206c:	0027883a 	mov	r19,zero
 8002070:	00800044 	movi	r2,1
 8002074:	003ef606 	br	8001c50 <__alt_data_end+0xff001c50>
 8002078:	2005883a 	mov	r2,r4
 800207c:	003fd706 	br	8001fdc <__alt_data_end+0xff001fdc>
 8002080:	1805883a 	mov	r2,r3
 8002084:	003f9d06 	br	8001efc <__alt_data_end+0xff001efc>
 8002088:	180d883a 	mov	r6,r3
 800208c:	003fbc06 	br	8001f80 <__alt_data_end+0xff001f80>
 8002090:	1827883a 	mov	r19,r3
 8002094:	003f8606 	br	8001eb0 <__alt_data_end+0xff001eb0>
 8002098:	10bfff84 	addi	r2,r2,-2
 800209c:	003f4d06 	br	8001dd4 <__alt_data_end+0xff001dd4>
 80020a0:	10bfff84 	addi	r2,r2,-2
 80020a4:	003ee306 	br	8001c34 <__alt_data_end+0xff001c34>
 80020a8:	bdffff84 	addi	r23,r23,-2
 80020ac:	1585883a 	add	r2,r2,r22
 80020b0:	003ece06 	br	8001bec <__alt_data_end+0xff001bec>
 80020b4:	e73fff84 	addi	fp,fp,-2
 80020b8:	2589883a 	add	r4,r4,r22
 80020bc:	003f3306 	br	8001d8c <__alt_data_end+0xff001d8c>

080020c0 <__divsi3>:
 80020c0:	20001b16 	blt	r4,zero,8002130 <__divsi3+0x70>
 80020c4:	000f883a 	mov	r7,zero
 80020c8:	28001616 	blt	r5,zero,8002124 <__divsi3+0x64>
 80020cc:	200d883a 	mov	r6,r4
 80020d0:	29001a2e 	bgeu	r5,r4,800213c <__divsi3+0x7c>
 80020d4:	00800804 	movi	r2,32
 80020d8:	00c00044 	movi	r3,1
 80020dc:	00000106 	br	80020e4 <__divsi3+0x24>
 80020e0:	10000d26 	beq	r2,zero,8002118 <__divsi3+0x58>
 80020e4:	294b883a 	add	r5,r5,r5
 80020e8:	10bfffc4 	addi	r2,r2,-1
 80020ec:	18c7883a 	add	r3,r3,r3
 80020f0:	293ffb36 	bltu	r5,r4,80020e0 <__alt_data_end+0xff0020e0>
 80020f4:	0005883a 	mov	r2,zero
 80020f8:	18000726 	beq	r3,zero,8002118 <__divsi3+0x58>
 80020fc:	0005883a 	mov	r2,zero
 8002100:	31400236 	bltu	r6,r5,800210c <__divsi3+0x4c>
 8002104:	314dc83a 	sub	r6,r6,r5
 8002108:	10c4b03a 	or	r2,r2,r3
 800210c:	1806d07a 	srli	r3,r3,1
 8002110:	280ad07a 	srli	r5,r5,1
 8002114:	183ffa1e 	bne	r3,zero,8002100 <__alt_data_end+0xff002100>
 8002118:	38000126 	beq	r7,zero,8002120 <__divsi3+0x60>
 800211c:	0085c83a 	sub	r2,zero,r2
 8002120:	f800283a 	ret
 8002124:	014bc83a 	sub	r5,zero,r5
 8002128:	39c0005c 	xori	r7,r7,1
 800212c:	003fe706 	br	80020cc <__alt_data_end+0xff0020cc>
 8002130:	0109c83a 	sub	r4,zero,r4
 8002134:	01c00044 	movi	r7,1
 8002138:	003fe306 	br	80020c8 <__alt_data_end+0xff0020c8>
 800213c:	00c00044 	movi	r3,1
 8002140:	003fee06 	br	80020fc <__alt_data_end+0xff0020fc>

08002144 <__modsi3>:
 8002144:	20001716 	blt	r4,zero,80021a4 <__modsi3+0x60>
 8002148:	000f883a 	mov	r7,zero
 800214c:	2005883a 	mov	r2,r4
 8002150:	28001216 	blt	r5,zero,800219c <__modsi3+0x58>
 8002154:	2900162e 	bgeu	r5,r4,80021b0 <__modsi3+0x6c>
 8002158:	01800804 	movi	r6,32
 800215c:	00c00044 	movi	r3,1
 8002160:	00000106 	br	8002168 <__modsi3+0x24>
 8002164:	30000a26 	beq	r6,zero,8002190 <__modsi3+0x4c>
 8002168:	294b883a 	add	r5,r5,r5
 800216c:	31bfffc4 	addi	r6,r6,-1
 8002170:	18c7883a 	add	r3,r3,r3
 8002174:	293ffb36 	bltu	r5,r4,8002164 <__alt_data_end+0xff002164>
 8002178:	18000526 	beq	r3,zero,8002190 <__modsi3+0x4c>
 800217c:	1806d07a 	srli	r3,r3,1
 8002180:	11400136 	bltu	r2,r5,8002188 <__modsi3+0x44>
 8002184:	1145c83a 	sub	r2,r2,r5
 8002188:	280ad07a 	srli	r5,r5,1
 800218c:	183ffb1e 	bne	r3,zero,800217c <__alt_data_end+0xff00217c>
 8002190:	38000126 	beq	r7,zero,8002198 <__modsi3+0x54>
 8002194:	0085c83a 	sub	r2,zero,r2
 8002198:	f800283a 	ret
 800219c:	014bc83a 	sub	r5,zero,r5
 80021a0:	003fec06 	br	8002154 <__alt_data_end+0xff002154>
 80021a4:	0109c83a 	sub	r4,zero,r4
 80021a8:	01c00044 	movi	r7,1
 80021ac:	003fe706 	br	800214c <__alt_data_end+0xff00214c>
 80021b0:	00c00044 	movi	r3,1
 80021b4:	003ff106 	br	800217c <__alt_data_end+0xff00217c>

080021b8 <__udivsi3>:
 80021b8:	200d883a 	mov	r6,r4
 80021bc:	2900152e 	bgeu	r5,r4,8002214 <__udivsi3+0x5c>
 80021c0:	28001416 	blt	r5,zero,8002214 <__udivsi3+0x5c>
 80021c4:	00800804 	movi	r2,32
 80021c8:	00c00044 	movi	r3,1
 80021cc:	00000206 	br	80021d8 <__udivsi3+0x20>
 80021d0:	10000e26 	beq	r2,zero,800220c <__udivsi3+0x54>
 80021d4:	28000516 	blt	r5,zero,80021ec <__udivsi3+0x34>
 80021d8:	294b883a 	add	r5,r5,r5
 80021dc:	10bfffc4 	addi	r2,r2,-1
 80021e0:	18c7883a 	add	r3,r3,r3
 80021e4:	293ffa36 	bltu	r5,r4,80021d0 <__alt_data_end+0xff0021d0>
 80021e8:	18000826 	beq	r3,zero,800220c <__udivsi3+0x54>
 80021ec:	0005883a 	mov	r2,zero
 80021f0:	31400236 	bltu	r6,r5,80021fc <__udivsi3+0x44>
 80021f4:	314dc83a 	sub	r6,r6,r5
 80021f8:	10c4b03a 	or	r2,r2,r3
 80021fc:	1806d07a 	srli	r3,r3,1
 8002200:	280ad07a 	srli	r5,r5,1
 8002204:	183ffa1e 	bne	r3,zero,80021f0 <__alt_data_end+0xff0021f0>
 8002208:	f800283a 	ret
 800220c:	0005883a 	mov	r2,zero
 8002210:	f800283a 	ret
 8002214:	00c00044 	movi	r3,1
 8002218:	003ff406 	br	80021ec <__alt_data_end+0xff0021ec>

0800221c <__umodsi3>:
 800221c:	2005883a 	mov	r2,r4
 8002220:	2900122e 	bgeu	r5,r4,800226c <__umodsi3+0x50>
 8002224:	28001116 	blt	r5,zero,800226c <__umodsi3+0x50>
 8002228:	01800804 	movi	r6,32
 800222c:	00c00044 	movi	r3,1
 8002230:	00000206 	br	800223c <__umodsi3+0x20>
 8002234:	30000c26 	beq	r6,zero,8002268 <__umodsi3+0x4c>
 8002238:	28000516 	blt	r5,zero,8002250 <__umodsi3+0x34>
 800223c:	294b883a 	add	r5,r5,r5
 8002240:	31bfffc4 	addi	r6,r6,-1
 8002244:	18c7883a 	add	r3,r3,r3
 8002248:	293ffa36 	bltu	r5,r4,8002234 <__alt_data_end+0xff002234>
 800224c:	18000626 	beq	r3,zero,8002268 <__umodsi3+0x4c>
 8002250:	1806d07a 	srli	r3,r3,1
 8002254:	11400136 	bltu	r2,r5,800225c <__umodsi3+0x40>
 8002258:	1145c83a 	sub	r2,r2,r5
 800225c:	280ad07a 	srli	r5,r5,1
 8002260:	183ffb1e 	bne	r3,zero,8002250 <__alt_data_end+0xff002250>
 8002264:	f800283a 	ret
 8002268:	f800283a 	ret
 800226c:	00c00044 	movi	r3,1
 8002270:	003ff706 	br	8002250 <__alt_data_end+0xff002250>

08002274 <__divsf3>:
 8002274:	defff504 	addi	sp,sp,-44
 8002278:	200cd5fa 	srli	r6,r4,23
 800227c:	dcc00415 	stw	r19,16(sp)
 8002280:	2026d7fa 	srli	r19,r4,31
 8002284:	00c02034 	movhi	r3,128
 8002288:	dd800715 	stw	r22,28(sp)
 800228c:	dd000515 	stw	r20,20(sp)
 8002290:	dc800315 	stw	r18,12(sp)
 8002294:	18ffffc4 	addi	r3,r3,-1
 8002298:	dfc00a15 	stw	ra,40(sp)
 800229c:	df000915 	stw	fp,36(sp)
 80022a0:	ddc00815 	stw	r23,32(sp)
 80022a4:	dd400615 	stw	r21,24(sp)
 80022a8:	dc400215 	stw	r17,8(sp)
 80022ac:	dc000115 	stw	r16,4(sp)
 80022b0:	35003fcc 	andi	r20,r6,255
 80022b4:	1924703a 	and	r18,r3,r4
 80022b8:	9d803fcc 	andi	r22,r19,255
 80022bc:	a0005226 	beq	r20,zero,8002408 <__divsf3+0x194>
 80022c0:	00803fc4 	movi	r2,255
 80022c4:	a0802e26 	beq	r20,r2,8002380 <__divsf3+0x10c>
 80022c8:	91002034 	orhi	r4,r18,128
 80022cc:	202490fa 	slli	r18,r4,3
 80022d0:	a53fe044 	addi	r20,r20,-127
 80022d4:	0021883a 	mov	r16,zero
 80022d8:	002f883a 	mov	r23,zero
 80022dc:	280cd5fa 	srli	r6,r5,23
 80022e0:	282ad7fa 	srli	r21,r5,31
 80022e4:	00c02034 	movhi	r3,128
 80022e8:	18ffffc4 	addi	r3,r3,-1
 80022ec:	31803fcc 	andi	r6,r6,255
 80022f0:	1962703a 	and	r17,r3,r5
 80022f4:	af003fcc 	andi	fp,r21,255
 80022f8:	30004a26 	beq	r6,zero,8002424 <__divsf3+0x1b0>
 80022fc:	00803fc4 	movi	r2,255
 8002300:	30804526 	beq	r6,r2,8002418 <__divsf3+0x1a4>
 8002304:	89402034 	orhi	r5,r17,128
 8002308:	282290fa 	slli	r17,r5,3
 800230c:	31bfe044 	addi	r6,r6,-127
 8002310:	000b883a 	mov	r5,zero
 8002314:	2c20b03a 	or	r16,r5,r16
 8002318:	802090ba 	slli	r16,r16,2
 800231c:	00820034 	movhi	r2,2048
 8002320:	1088d004 	addi	r2,r2,9024
 8002324:	80a1883a 	add	r16,r16,r2
 8002328:	81000017 	ldw	r4,0(r16)
 800232c:	9d46f03a 	xor	r3,r19,r21
 8002330:	180f883a 	mov	r7,r3
 8002334:	18803fcc 	andi	r2,r3,255
 8002338:	a18dc83a 	sub	r6,r20,r6
 800233c:	2000683a 	jmp	r4
 8002340:	08002524 	muli	zero,at,148
 8002344:	080023a8 	cmpgeui	zero,at,142
 8002348:	08002518 	cmpnei	zero,at,148
 800234c:	08002394 	ori	zero,at,142
 8002350:	08002518 	cmpnei	zero,at,148
 8002354:	080024f0 	cmpltui	zero,at,147
 8002358:	08002518 	cmpnei	zero,at,148
 800235c:	08002394 	ori	zero,at,142
 8002360:	080023a8 	cmpgeui	zero,at,142
 8002364:	080023a8 	cmpgeui	zero,at,142
 8002368:	080024f0 	cmpltui	zero,at,147
 800236c:	08002394 	ori	zero,at,142
 8002370:	08002604 	addi	zero,at,152
 8002374:	08002604 	addi	zero,at,152
 8002378:	08002604 	addi	zero,at,152
 800237c:	080025b8 	rdprs	zero,at,150
 8002380:	9000581e 	bne	r18,zero,80024e4 <__divsf3+0x270>
 8002384:	04000204 	movi	r16,8
 8002388:	05c00084 	movi	r23,2
 800238c:	003fd306 	br	80022dc <__alt_data_end+0xff0022dc>
 8002390:	0023883a 	mov	r17,zero
 8002394:	e02d883a 	mov	r22,fp
 8002398:	282f883a 	mov	r23,r5
 800239c:	00800084 	movi	r2,2
 80023a0:	b8808f1e 	bne	r23,r2,80025e0 <__divsf3+0x36c>
 80023a4:	b005883a 	mov	r2,r22
 80023a8:	11c0004c 	andi	r7,r2,1
 80023ac:	013fffc4 	movi	r4,-1
 80023b0:	000d883a 	mov	r6,zero
 80023b4:	21003fcc 	andi	r4,r4,255
 80023b8:	200895fa 	slli	r4,r4,23
 80023bc:	38803fcc 	andi	r2,r7,255
 80023c0:	00c02034 	movhi	r3,128
 80023c4:	100497fa 	slli	r2,r2,31
 80023c8:	18ffffc4 	addi	r3,r3,-1
 80023cc:	30c6703a 	and	r3,r6,r3
 80023d0:	1906b03a 	or	r3,r3,r4
 80023d4:	1884b03a 	or	r2,r3,r2
 80023d8:	dfc00a17 	ldw	ra,40(sp)
 80023dc:	df000917 	ldw	fp,36(sp)
 80023e0:	ddc00817 	ldw	r23,32(sp)
 80023e4:	dd800717 	ldw	r22,28(sp)
 80023e8:	dd400617 	ldw	r21,24(sp)
 80023ec:	dd000517 	ldw	r20,20(sp)
 80023f0:	dcc00417 	ldw	r19,16(sp)
 80023f4:	dc800317 	ldw	r18,12(sp)
 80023f8:	dc400217 	ldw	r17,8(sp)
 80023fc:	dc000117 	ldw	r16,4(sp)
 8002400:	dec00b04 	addi	sp,sp,44
 8002404:	f800283a 	ret
 8002408:	90002b1e 	bne	r18,zero,80024b8 <__divsf3+0x244>
 800240c:	04000104 	movi	r16,4
 8002410:	05c00044 	movi	r23,1
 8002414:	003fb106 	br	80022dc <__alt_data_end+0xff0022dc>
 8002418:	8800251e 	bne	r17,zero,80024b0 <__divsf3+0x23c>
 800241c:	01400084 	movi	r5,2
 8002420:	00000206 	br	800242c <__divsf3+0x1b8>
 8002424:	88001a1e 	bne	r17,zero,8002490 <__divsf3+0x21c>
 8002428:	01400044 	movi	r5,1
 800242c:	8160b03a 	or	r16,r16,r5
 8002430:	802090ba 	slli	r16,r16,2
 8002434:	00c20034 	movhi	r3,2048
 8002438:	18c91404 	addi	r3,r3,9296
 800243c:	80e1883a 	add	r16,r16,r3
 8002440:	80c00017 	ldw	r3,0(r16)
 8002444:	9d44f03a 	xor	r2,r19,r21
 8002448:	a18dc83a 	sub	r6,r20,r6
 800244c:	1800683a 	jmp	r3
 8002450:	080023a8 	cmpgeui	zero,at,142
 8002454:	080023a8 	cmpgeui	zero,at,142
 8002458:	080025f4 	orhi	zero,at,151
 800245c:	08002390 	cmplti	zero,at,142
 8002460:	080025f4 	orhi	zero,at,151
 8002464:	080024f0 	cmpltui	zero,at,147
 8002468:	080025f4 	orhi	zero,at,151
 800246c:	08002390 	cmplti	zero,at,142
 8002470:	080023a8 	cmpgeui	zero,at,142
 8002474:	080023a8 	cmpgeui	zero,at,142
 8002478:	080024f0 	cmpltui	zero,at,147
 800247c:	08002390 	cmplti	zero,at,142
 8002480:	08002604 	addi	zero,at,152
 8002484:	08002604 	addi	zero,at,152
 8002488:	08002604 	addi	zero,at,152
 800248c:	0800261c 	xori	zero,at,152
 8002490:	8809883a 	mov	r4,r17
 8002494:	80030a80 	call	80030a8 <__clzsi2>
 8002498:	10fffec4 	addi	r3,r2,-5
 800249c:	10801d84 	addi	r2,r2,118
 80024a0:	88e2983a 	sll	r17,r17,r3
 80024a4:	008dc83a 	sub	r6,zero,r2
 80024a8:	000b883a 	mov	r5,zero
 80024ac:	003f9906 	br	8002314 <__alt_data_end+0xff002314>
 80024b0:	014000c4 	movi	r5,3
 80024b4:	003f9706 	br	8002314 <__alt_data_end+0xff002314>
 80024b8:	9009883a 	mov	r4,r18
 80024bc:	d9400015 	stw	r5,0(sp)
 80024c0:	80030a80 	call	80030a8 <__clzsi2>
 80024c4:	10fffec4 	addi	r3,r2,-5
 80024c8:	11801d84 	addi	r6,r2,118
 80024cc:	90e4983a 	sll	r18,r18,r3
 80024d0:	01a9c83a 	sub	r20,zero,r6
 80024d4:	0021883a 	mov	r16,zero
 80024d8:	002f883a 	mov	r23,zero
 80024dc:	d9400017 	ldw	r5,0(sp)
 80024e0:	003f7e06 	br	80022dc <__alt_data_end+0xff0022dc>
 80024e4:	04000304 	movi	r16,12
 80024e8:	05c000c4 	movi	r23,3
 80024ec:	003f7b06 	br	80022dc <__alt_data_end+0xff0022dc>
 80024f0:	01802034 	movhi	r6,128
 80024f4:	000f883a 	mov	r7,zero
 80024f8:	31bfffc4 	addi	r6,r6,-1
 80024fc:	013fffc4 	movi	r4,-1
 8002500:	003fac06 	br	80023b4 <__alt_data_end+0xff0023b4>
 8002504:	01400044 	movi	r5,1
 8002508:	2909c83a 	sub	r4,r5,r4
 800250c:	00c006c4 	movi	r3,27
 8002510:	19004b0e 	bge	r3,r4,8002640 <__divsf3+0x3cc>
 8002514:	114e703a 	and	r7,r2,r5
 8002518:	0009883a 	mov	r4,zero
 800251c:	000d883a 	mov	r6,zero
 8002520:	003fa406 	br	80023b4 <__alt_data_end+0xff0023b4>
 8002524:	9006917a 	slli	r3,r18,5
 8002528:	8822917a 	slli	r17,r17,5
 800252c:	1c40372e 	bgeu	r3,r17,800260c <__divsf3+0x398>
 8002530:	31bfffc4 	addi	r6,r6,-1
 8002534:	010006c4 	movi	r4,27
 8002538:	000b883a 	mov	r5,zero
 800253c:	180f883a 	mov	r7,r3
 8002540:	294b883a 	add	r5,r5,r5
 8002544:	18c7883a 	add	r3,r3,r3
 8002548:	38000116 	blt	r7,zero,8002550 <__divsf3+0x2dc>
 800254c:	1c400236 	bltu	r3,r17,8002558 <__divsf3+0x2e4>
 8002550:	1c47c83a 	sub	r3,r3,r17
 8002554:	29400054 	ori	r5,r5,1
 8002558:	213fffc4 	addi	r4,r4,-1
 800255c:	203ff71e 	bne	r4,zero,800253c <__alt_data_end+0xff00253c>
 8002560:	1806c03a 	cmpne	r3,r3,zero
 8002564:	1962b03a 	or	r17,r3,r5
 8002568:	31001fc4 	addi	r4,r6,127
 800256c:	013fe50e 	bge	zero,r4,8002504 <__alt_data_end+0xff002504>
 8002570:	88c001cc 	andi	r3,r17,7
 8002574:	18000426 	beq	r3,zero,8002588 <__divsf3+0x314>
 8002578:	88c003cc 	andi	r3,r17,15
 800257c:	01400104 	movi	r5,4
 8002580:	19400126 	beq	r3,r5,8002588 <__divsf3+0x314>
 8002584:	8963883a 	add	r17,r17,r5
 8002588:	88c2002c 	andhi	r3,r17,2048
 800258c:	18000426 	beq	r3,zero,80025a0 <__divsf3+0x32c>
 8002590:	00fe0034 	movhi	r3,63488
 8002594:	18ffffc4 	addi	r3,r3,-1
 8002598:	31002004 	addi	r4,r6,128
 800259c:	88e2703a 	and	r17,r17,r3
 80025a0:	00c03f84 	movi	r3,254
 80025a4:	193f8016 	blt	r3,r4,80023a8 <__alt_data_end+0xff0023a8>
 80025a8:	880c91ba 	slli	r6,r17,6
 80025ac:	11c0004c 	andi	r7,r2,1
 80025b0:	300cd27a 	srli	r6,r6,9
 80025b4:	003f7f06 	br	80023b4 <__alt_data_end+0xff0023b4>
 80025b8:	9080102c 	andhi	r2,r18,64
 80025bc:	10000226 	beq	r2,zero,80025c8 <__divsf3+0x354>
 80025c0:	8880102c 	andhi	r2,r17,64
 80025c4:	10001826 	beq	r2,zero,8002628 <__divsf3+0x3b4>
 80025c8:	00802034 	movhi	r2,128
 80025cc:	91801034 	orhi	r6,r18,64
 80025d0:	10bfffc4 	addi	r2,r2,-1
 80025d4:	980f883a 	mov	r7,r19
 80025d8:	308c703a 	and	r6,r6,r2
 80025dc:	003fc706 	br	80024fc <__alt_data_end+0xff0024fc>
 80025e0:	008000c4 	movi	r2,3
 80025e4:	b8802d26 	beq	r23,r2,800269c <__divsf3+0x428>
 80025e8:	00c00044 	movi	r3,1
 80025ec:	b005883a 	mov	r2,r22
 80025f0:	b8ffdd1e 	bne	r23,r3,8002568 <__alt_data_end+0xff002568>
 80025f4:	11c0004c 	andi	r7,r2,1
 80025f8:	0009883a 	mov	r4,zero
 80025fc:	000d883a 	mov	r6,zero
 8002600:	003f6c06 	br	80023b4 <__alt_data_end+0xff0023b4>
 8002604:	9023883a 	mov	r17,r18
 8002608:	003f6406 	br	800239c <__alt_data_end+0xff00239c>
 800260c:	1c47c83a 	sub	r3,r3,r17
 8002610:	01000684 	movi	r4,26
 8002614:	01400044 	movi	r5,1
 8002618:	003fc806 	br	800253c <__alt_data_end+0xff00253c>
 800261c:	9080102c 	andhi	r2,r18,64
 8002620:	103fe926 	beq	r2,zero,80025c8 <__alt_data_end+0xff0025c8>
 8002624:	0023883a 	mov	r17,zero
 8002628:	00802034 	movhi	r2,128
 800262c:	89801034 	orhi	r6,r17,64
 8002630:	10bfffc4 	addi	r2,r2,-1
 8002634:	a80f883a 	mov	r7,r21
 8002638:	308c703a 	and	r6,r6,r2
 800263c:	003faf06 	br	80024fc <__alt_data_end+0xff0024fc>
 8002640:	01c00804 	movi	r7,32
 8002644:	390fc83a 	sub	r7,r7,r4
 8002648:	89ce983a 	sll	r7,r17,r7
 800264c:	890ad83a 	srl	r5,r17,r4
 8002650:	380ec03a 	cmpne	r7,r7,zero
 8002654:	29cab03a 	or	r5,r5,r7
 8002658:	28c001cc 	andi	r3,r5,7
 800265c:	18000426 	beq	r3,zero,8002670 <__divsf3+0x3fc>
 8002660:	28c003cc 	andi	r3,r5,15
 8002664:	01000104 	movi	r4,4
 8002668:	19000126 	beq	r3,r4,8002670 <__divsf3+0x3fc>
 800266c:	290b883a 	add	r5,r5,r4
 8002670:	28c1002c 	andhi	r3,r5,1024
 8002674:	18000426 	beq	r3,zero,8002688 <__divsf3+0x414>
 8002678:	11c0004c 	andi	r7,r2,1
 800267c:	01000044 	movi	r4,1
 8002680:	000d883a 	mov	r6,zero
 8002684:	003f4b06 	br	80023b4 <__alt_data_end+0xff0023b4>
 8002688:	280a91ba 	slli	r5,r5,6
 800268c:	11c0004c 	andi	r7,r2,1
 8002690:	0009883a 	mov	r4,zero
 8002694:	280cd27a 	srli	r6,r5,9
 8002698:	003f4606 	br	80023b4 <__alt_data_end+0xff0023b4>
 800269c:	00802034 	movhi	r2,128
 80026a0:	89801034 	orhi	r6,r17,64
 80026a4:	10bfffc4 	addi	r2,r2,-1
 80026a8:	b00f883a 	mov	r7,r22
 80026ac:	308c703a 	and	r6,r6,r2
 80026b0:	003f9206 	br	80024fc <__alt_data_end+0xff0024fc>

080026b4 <__floatunsisf>:
 80026b4:	defffe04 	addi	sp,sp,-8
 80026b8:	dfc00115 	stw	ra,4(sp)
 80026bc:	dc000015 	stw	r16,0(sp)
 80026c0:	20002c26 	beq	r4,zero,8002774 <__floatunsisf+0xc0>
 80026c4:	2021883a 	mov	r16,r4
 80026c8:	80030a80 	call	80030a8 <__clzsi2>
 80026cc:	00c02784 	movi	r3,158
 80026d0:	1887c83a 	sub	r3,r3,r2
 80026d4:	01002584 	movi	r4,150
 80026d8:	20c00f16 	blt	r4,r3,8002718 <__floatunsisf+0x64>
 80026dc:	20c9c83a 	sub	r4,r4,r3
 80026e0:	8108983a 	sll	r4,r16,r4
 80026e4:	00802034 	movhi	r2,128
 80026e8:	10bfffc4 	addi	r2,r2,-1
 80026ec:	2088703a 	and	r4,r4,r2
 80026f0:	18803fcc 	andi	r2,r3,255
 80026f4:	100695fa 	slli	r3,r2,23
 80026f8:	00802034 	movhi	r2,128
 80026fc:	10bfffc4 	addi	r2,r2,-1
 8002700:	2084703a 	and	r2,r4,r2
 8002704:	10c4b03a 	or	r2,r2,r3
 8002708:	dfc00117 	ldw	ra,4(sp)
 800270c:	dc000017 	ldw	r16,0(sp)
 8002710:	dec00204 	addi	sp,sp,8
 8002714:	f800283a 	ret
 8002718:	01002644 	movi	r4,153
 800271c:	20c01816 	blt	r4,r3,8002780 <__floatunsisf+0xcc>
 8002720:	20c9c83a 	sub	r4,r4,r3
 8002724:	8108983a 	sll	r4,r16,r4
 8002728:	017f0034 	movhi	r5,64512
 800272c:	297fffc4 	addi	r5,r5,-1
 8002730:	218001cc 	andi	r6,r4,7
 8002734:	214a703a 	and	r5,r4,r5
 8002738:	30000426 	beq	r6,zero,800274c <__floatunsisf+0x98>
 800273c:	210003cc 	andi	r4,r4,15
 8002740:	01800104 	movi	r6,4
 8002744:	21800126 	beq	r4,r6,800274c <__floatunsisf+0x98>
 8002748:	298b883a 	add	r5,r5,r6
 800274c:	2901002c 	andhi	r4,r5,1024
 8002750:	20000526 	beq	r4,zero,8002768 <__floatunsisf+0xb4>
 8002754:	00c027c4 	movi	r3,159
 8002758:	1887c83a 	sub	r3,r3,r2
 800275c:	00bf0034 	movhi	r2,64512
 8002760:	10bfffc4 	addi	r2,r2,-1
 8002764:	288a703a 	and	r5,r5,r2
 8002768:	280891ba 	slli	r4,r5,6
 800276c:	2008d27a 	srli	r4,r4,9
 8002770:	003fdf06 	br	80026f0 <__alt_data_end+0xff0026f0>
 8002774:	0007883a 	mov	r3,zero
 8002778:	0009883a 	mov	r4,zero
 800277c:	003fdc06 	br	80026f0 <__alt_data_end+0xff0026f0>
 8002780:	01402e44 	movi	r5,185
 8002784:	28cbc83a 	sub	r5,r5,r3
 8002788:	01000144 	movi	r4,5
 800278c:	2089c83a 	sub	r4,r4,r2
 8002790:	814a983a 	sll	r5,r16,r5
 8002794:	8108d83a 	srl	r4,r16,r4
 8002798:	2820c03a 	cmpne	r16,r5,zero
 800279c:	2408b03a 	or	r4,r4,r16
 80027a0:	003fe106 	br	8002728 <__alt_data_end+0xff002728>

080027a4 <__muldf3>:
 80027a4:	defff304 	addi	sp,sp,-52
 80027a8:	2804d53a 	srli	r2,r5,20
 80027ac:	dd800915 	stw	r22,36(sp)
 80027b0:	282cd7fa 	srli	r22,r5,31
 80027b4:	dc000315 	stw	r16,12(sp)
 80027b8:	04000434 	movhi	r16,16
 80027bc:	dd400815 	stw	r21,32(sp)
 80027c0:	dc800515 	stw	r18,20(sp)
 80027c4:	843fffc4 	addi	r16,r16,-1
 80027c8:	dfc00c15 	stw	ra,48(sp)
 80027cc:	df000b15 	stw	fp,44(sp)
 80027d0:	ddc00a15 	stw	r23,40(sp)
 80027d4:	dd000715 	stw	r20,28(sp)
 80027d8:	dcc00615 	stw	r19,24(sp)
 80027dc:	dc400415 	stw	r17,16(sp)
 80027e0:	1481ffcc 	andi	r18,r2,2047
 80027e4:	2c20703a 	and	r16,r5,r16
 80027e8:	b02b883a 	mov	r21,r22
 80027ec:	b2403fcc 	andi	r9,r22,255
 80027f0:	90006026 	beq	r18,zero,8002974 <__muldf3+0x1d0>
 80027f4:	0081ffc4 	movi	r2,2047
 80027f8:	2029883a 	mov	r20,r4
 80027fc:	90803626 	beq	r18,r2,80028d8 <__muldf3+0x134>
 8002800:	80800434 	orhi	r2,r16,16
 8002804:	100490fa 	slli	r2,r2,3
 8002808:	2020d77a 	srli	r16,r4,29
 800280c:	202890fa 	slli	r20,r4,3
 8002810:	94bf0044 	addi	r18,r18,-1023
 8002814:	80a0b03a 	or	r16,r16,r2
 8002818:	0027883a 	mov	r19,zero
 800281c:	0039883a 	mov	fp,zero
 8002820:	3804d53a 	srli	r2,r7,20
 8002824:	382ed7fa 	srli	r23,r7,31
 8002828:	04400434 	movhi	r17,16
 800282c:	8c7fffc4 	addi	r17,r17,-1
 8002830:	1081ffcc 	andi	r2,r2,2047
 8002834:	3011883a 	mov	r8,r6
 8002838:	3c62703a 	and	r17,r7,r17
 800283c:	ba803fcc 	andi	r10,r23,255
 8002840:	10006d26 	beq	r2,zero,80029f8 <__muldf3+0x254>
 8002844:	00c1ffc4 	movi	r3,2047
 8002848:	10c06526 	beq	r2,r3,80029e0 <__muldf3+0x23c>
 800284c:	88c00434 	orhi	r3,r17,16
 8002850:	180690fa 	slli	r3,r3,3
 8002854:	3022d77a 	srli	r17,r6,29
 8002858:	301090fa 	slli	r8,r6,3
 800285c:	10bf0044 	addi	r2,r2,-1023
 8002860:	88e2b03a 	or	r17,r17,r3
 8002864:	000b883a 	mov	r5,zero
 8002868:	9085883a 	add	r2,r18,r2
 800286c:	2cc8b03a 	or	r4,r5,r19
 8002870:	00c003c4 	movi	r3,15
 8002874:	bdacf03a 	xor	r22,r23,r22
 8002878:	12c00044 	addi	r11,r2,1
 800287c:	19009936 	bltu	r3,r4,8002ae4 <__muldf3+0x340>
 8002880:	200890ba 	slli	r4,r4,2
 8002884:	00c20034 	movhi	r3,2048
 8002888:	18ca2604 	addi	r3,r3,10392
 800288c:	20c9883a 	add	r4,r4,r3
 8002890:	20c00017 	ldw	r3,0(r4)
 8002894:	1800683a 	jmp	r3
 8002898:	08002ae4 	muli	zero,at,171
 800289c:	080028f8 	rdprs	zero,at,163
 80028a0:	080028f8 	rdprs	zero,at,163
 80028a4:	080028f4 	orhi	zero,at,163
 80028a8:	08002ac0 	call	8002ac <__alt_mem_onchip_memory2_0+0x8002ac>
 80028ac:	08002ac0 	call	8002ac <__alt_mem_onchip_memory2_0+0x8002ac>
 80028b0:	08002aa8 	cmpgeui	zero,at,170
 80028b4:	080028f4 	orhi	zero,at,163
 80028b8:	08002ac0 	call	8002ac <__alt_mem_onchip_memory2_0+0x8002ac>
 80028bc:	08002aa8 	cmpgeui	zero,at,170
 80028c0:	08002ac0 	call	8002ac <__alt_mem_onchip_memory2_0+0x8002ac>
 80028c4:	080028f4 	orhi	zero,at,163
 80028c8:	08002ad0 	cmplti	zero,at,171
 80028cc:	08002ad0 	cmplti	zero,at,171
 80028d0:	08002ad0 	cmplti	zero,at,171
 80028d4:	08002cec 	andhi	zero,at,179
 80028d8:	2404b03a 	or	r2,r4,r16
 80028dc:	10006f1e 	bne	r2,zero,8002a9c <__muldf3+0x2f8>
 80028e0:	04c00204 	movi	r19,8
 80028e4:	0021883a 	mov	r16,zero
 80028e8:	0029883a 	mov	r20,zero
 80028ec:	07000084 	movi	fp,2
 80028f0:	003fcb06 	br	8002820 <__alt_data_end+0xff002820>
 80028f4:	502d883a 	mov	r22,r10
 80028f8:	00800084 	movi	r2,2
 80028fc:	28805726 	beq	r5,r2,8002a5c <__muldf3+0x2b8>
 8002900:	008000c4 	movi	r2,3
 8002904:	28816626 	beq	r5,r2,8002ea0 <__muldf3+0x6fc>
 8002908:	00800044 	movi	r2,1
 800290c:	2881411e 	bne	r5,r2,8002e14 <__muldf3+0x670>
 8002910:	b02b883a 	mov	r21,r22
 8002914:	0005883a 	mov	r2,zero
 8002918:	000b883a 	mov	r5,zero
 800291c:	0029883a 	mov	r20,zero
 8002920:	1004953a 	slli	r2,r2,20
 8002924:	a8c03fcc 	andi	r3,r21,255
 8002928:	04400434 	movhi	r17,16
 800292c:	8c7fffc4 	addi	r17,r17,-1
 8002930:	180697fa 	slli	r3,r3,31
 8002934:	2c4a703a 	and	r5,r5,r17
 8002938:	288ab03a 	or	r5,r5,r2
 800293c:	28c6b03a 	or	r3,r5,r3
 8002940:	a005883a 	mov	r2,r20
 8002944:	dfc00c17 	ldw	ra,48(sp)
 8002948:	df000b17 	ldw	fp,44(sp)
 800294c:	ddc00a17 	ldw	r23,40(sp)
 8002950:	dd800917 	ldw	r22,36(sp)
 8002954:	dd400817 	ldw	r21,32(sp)
 8002958:	dd000717 	ldw	r20,28(sp)
 800295c:	dcc00617 	ldw	r19,24(sp)
 8002960:	dc800517 	ldw	r18,20(sp)
 8002964:	dc400417 	ldw	r17,16(sp)
 8002968:	dc000317 	ldw	r16,12(sp)
 800296c:	dec00d04 	addi	sp,sp,52
 8002970:	f800283a 	ret
 8002974:	2404b03a 	or	r2,r4,r16
 8002978:	2027883a 	mov	r19,r4
 800297c:	10004226 	beq	r2,zero,8002a88 <__muldf3+0x2e4>
 8002980:	8000fc26 	beq	r16,zero,8002d74 <__muldf3+0x5d0>
 8002984:	8009883a 	mov	r4,r16
 8002988:	d9800215 	stw	r6,8(sp)
 800298c:	d9c00015 	stw	r7,0(sp)
 8002990:	da400115 	stw	r9,4(sp)
 8002994:	80030a80 	call	80030a8 <__clzsi2>
 8002998:	d9800217 	ldw	r6,8(sp)
 800299c:	d9c00017 	ldw	r7,0(sp)
 80029a0:	da400117 	ldw	r9,4(sp)
 80029a4:	113ffd44 	addi	r4,r2,-11
 80029a8:	00c00704 	movi	r3,28
 80029ac:	1900ed16 	blt	r3,r4,8002d64 <__muldf3+0x5c0>
 80029b0:	00c00744 	movi	r3,29
 80029b4:	147ffe04 	addi	r17,r2,-8
 80029b8:	1907c83a 	sub	r3,r3,r4
 80029bc:	8460983a 	sll	r16,r16,r17
 80029c0:	98c6d83a 	srl	r3,r19,r3
 80029c4:	9c68983a 	sll	r20,r19,r17
 80029c8:	1c20b03a 	or	r16,r3,r16
 80029cc:	1080fcc4 	addi	r2,r2,1011
 80029d0:	00a5c83a 	sub	r18,zero,r2
 80029d4:	0027883a 	mov	r19,zero
 80029d8:	0039883a 	mov	fp,zero
 80029dc:	003f9006 	br	8002820 <__alt_data_end+0xff002820>
 80029e0:	3446b03a 	or	r3,r6,r17
 80029e4:	1800261e 	bne	r3,zero,8002a80 <__muldf3+0x2dc>
 80029e8:	0023883a 	mov	r17,zero
 80029ec:	0011883a 	mov	r8,zero
 80029f0:	01400084 	movi	r5,2
 80029f4:	003f9c06 	br	8002868 <__alt_data_end+0xff002868>
 80029f8:	3446b03a 	or	r3,r6,r17
 80029fc:	18001c26 	beq	r3,zero,8002a70 <__muldf3+0x2cc>
 8002a00:	8800ce26 	beq	r17,zero,8002d3c <__muldf3+0x598>
 8002a04:	8809883a 	mov	r4,r17
 8002a08:	d9800215 	stw	r6,8(sp)
 8002a0c:	da400115 	stw	r9,4(sp)
 8002a10:	da800015 	stw	r10,0(sp)
 8002a14:	80030a80 	call	80030a8 <__clzsi2>
 8002a18:	d9800217 	ldw	r6,8(sp)
 8002a1c:	da400117 	ldw	r9,4(sp)
 8002a20:	da800017 	ldw	r10,0(sp)
 8002a24:	113ffd44 	addi	r4,r2,-11
 8002a28:	00c00704 	movi	r3,28
 8002a2c:	1900bf16 	blt	r3,r4,8002d2c <__muldf3+0x588>
 8002a30:	00c00744 	movi	r3,29
 8002a34:	123ffe04 	addi	r8,r2,-8
 8002a38:	1907c83a 	sub	r3,r3,r4
 8002a3c:	8a22983a 	sll	r17,r17,r8
 8002a40:	30c6d83a 	srl	r3,r6,r3
 8002a44:	3210983a 	sll	r8,r6,r8
 8002a48:	1c62b03a 	or	r17,r3,r17
 8002a4c:	1080fcc4 	addi	r2,r2,1011
 8002a50:	0085c83a 	sub	r2,zero,r2
 8002a54:	000b883a 	mov	r5,zero
 8002a58:	003f8306 	br	8002868 <__alt_data_end+0xff002868>
 8002a5c:	b02b883a 	mov	r21,r22
 8002a60:	0081ffc4 	movi	r2,2047
 8002a64:	000b883a 	mov	r5,zero
 8002a68:	0029883a 	mov	r20,zero
 8002a6c:	003fac06 	br	8002920 <__alt_data_end+0xff002920>
 8002a70:	0023883a 	mov	r17,zero
 8002a74:	0011883a 	mov	r8,zero
 8002a78:	01400044 	movi	r5,1
 8002a7c:	003f7a06 	br	8002868 <__alt_data_end+0xff002868>
 8002a80:	014000c4 	movi	r5,3
 8002a84:	003f7806 	br	8002868 <__alt_data_end+0xff002868>
 8002a88:	04c00104 	movi	r19,4
 8002a8c:	0021883a 	mov	r16,zero
 8002a90:	0029883a 	mov	r20,zero
 8002a94:	07000044 	movi	fp,1
 8002a98:	003f6106 	br	8002820 <__alt_data_end+0xff002820>
 8002a9c:	04c00304 	movi	r19,12
 8002aa0:	070000c4 	movi	fp,3
 8002aa4:	003f5e06 	br	8002820 <__alt_data_end+0xff002820>
 8002aa8:	01400434 	movhi	r5,16
 8002aac:	002b883a 	mov	r21,zero
 8002ab0:	297fffc4 	addi	r5,r5,-1
 8002ab4:	053fffc4 	movi	r20,-1
 8002ab8:	0081ffc4 	movi	r2,2047
 8002abc:	003f9806 	br	8002920 <__alt_data_end+0xff002920>
 8002ac0:	8023883a 	mov	r17,r16
 8002ac4:	a011883a 	mov	r8,r20
 8002ac8:	e00b883a 	mov	r5,fp
 8002acc:	003f8a06 	br	80028f8 <__alt_data_end+0xff0028f8>
 8002ad0:	8023883a 	mov	r17,r16
 8002ad4:	a011883a 	mov	r8,r20
 8002ad8:	482d883a 	mov	r22,r9
 8002adc:	e00b883a 	mov	r5,fp
 8002ae0:	003f8506 	br	80028f8 <__alt_data_end+0xff0028f8>
 8002ae4:	a00ad43a 	srli	r5,r20,16
 8002ae8:	401ad43a 	srli	r13,r8,16
 8002aec:	a53fffcc 	andi	r20,r20,65535
 8002af0:	423fffcc 	andi	r8,r8,65535
 8002af4:	4519383a 	mul	r12,r8,r20
 8002af8:	4147383a 	mul	r3,r8,r5
 8002afc:	6d09383a 	mul	r4,r13,r20
 8002b00:	600cd43a 	srli	r6,r12,16
 8002b04:	2b5d383a 	mul	r14,r5,r13
 8002b08:	20c9883a 	add	r4,r4,r3
 8002b0c:	310d883a 	add	r6,r6,r4
 8002b10:	30c0022e 	bgeu	r6,r3,8002b1c <__muldf3+0x378>
 8002b14:	00c00074 	movhi	r3,1
 8002b18:	70dd883a 	add	r14,r14,r3
 8002b1c:	8826d43a 	srli	r19,r17,16
 8002b20:	8bffffcc 	andi	r15,r17,65535
 8002b24:	7d23383a 	mul	r17,r15,r20
 8002b28:	7949383a 	mul	r4,r15,r5
 8002b2c:	9d29383a 	mul	r20,r19,r20
 8002b30:	8814d43a 	srli	r10,r17,16
 8002b34:	3012943a 	slli	r9,r6,16
 8002b38:	a129883a 	add	r20,r20,r4
 8002b3c:	633fffcc 	andi	r12,r12,65535
 8002b40:	5515883a 	add	r10,r10,r20
 8002b44:	3006d43a 	srli	r3,r6,16
 8002b48:	4b13883a 	add	r9,r9,r12
 8002b4c:	2ccb383a 	mul	r5,r5,r19
 8002b50:	5100022e 	bgeu	r10,r4,8002b5c <__muldf3+0x3b8>
 8002b54:	01000074 	movhi	r4,1
 8002b58:	290b883a 	add	r5,r5,r4
 8002b5c:	802ad43a 	srli	r21,r16,16
 8002b60:	843fffcc 	andi	r16,r16,65535
 8002b64:	440d383a 	mul	r6,r8,r16
 8002b68:	4565383a 	mul	r18,r8,r21
 8002b6c:	8349383a 	mul	r4,r16,r13
 8002b70:	500e943a 	slli	r7,r10,16
 8002b74:	3010d43a 	srli	r8,r6,16
 8002b78:	5028d43a 	srli	r20,r10,16
 8002b7c:	2489883a 	add	r4,r4,r18
 8002b80:	8abfffcc 	andi	r10,r17,65535
 8002b84:	3a95883a 	add	r10,r7,r10
 8002b88:	4119883a 	add	r12,r8,r4
 8002b8c:	a169883a 	add	r20,r20,r5
 8002b90:	1a87883a 	add	r3,r3,r10
 8002b94:	6d5b383a 	mul	r13,r13,r21
 8002b98:	6480022e 	bgeu	r12,r18,8002ba4 <__muldf3+0x400>
 8002b9c:	01000074 	movhi	r4,1
 8002ba0:	691b883a 	add	r13,r13,r4
 8002ba4:	7c25383a 	mul	r18,r15,r16
 8002ba8:	7d4b383a 	mul	r5,r15,r21
 8002bac:	84cf383a 	mul	r7,r16,r19
 8002bb0:	901ed43a 	srli	r15,r18,16
 8002bb4:	6008d43a 	srli	r4,r12,16
 8002bb8:	6010943a 	slli	r8,r12,16
 8002bbc:	394f883a 	add	r7,r7,r5
 8002bc0:	333fffcc 	andi	r12,r6,65535
 8002bc4:	79df883a 	add	r15,r15,r7
 8002bc8:	235b883a 	add	r13,r4,r13
 8002bcc:	9d63383a 	mul	r17,r19,r21
 8002bd0:	4309883a 	add	r4,r8,r12
 8002bd4:	7940022e 	bgeu	r15,r5,8002be0 <__muldf3+0x43c>
 8002bd8:	01400074 	movhi	r5,1
 8002bdc:	8963883a 	add	r17,r17,r5
 8002be0:	780a943a 	slli	r5,r15,16
 8002be4:	91bfffcc 	andi	r6,r18,65535
 8002be8:	70c7883a 	add	r3,r14,r3
 8002bec:	298d883a 	add	r6,r5,r6
 8002bf0:	1a8f803a 	cmpltu	r7,r3,r10
 8002bf4:	350b883a 	add	r5,r6,r20
 8002bf8:	20c7883a 	add	r3,r4,r3
 8002bfc:	3955883a 	add	r10,r7,r5
 8002c00:	1909803a 	cmpltu	r4,r3,r4
 8002c04:	6a91883a 	add	r8,r13,r10
 8002c08:	780cd43a 	srli	r6,r15,16
 8002c0c:	2219883a 	add	r12,r4,r8
 8002c10:	2d0b803a 	cmpltu	r5,r5,r20
 8002c14:	51cf803a 	cmpltu	r7,r10,r7
 8002c18:	29ceb03a 	or	r7,r5,r7
 8002c1c:	4351803a 	cmpltu	r8,r8,r13
 8002c20:	610b803a 	cmpltu	r5,r12,r4
 8002c24:	4148b03a 	or	r4,r8,r5
 8002c28:	398f883a 	add	r7,r7,r6
 8002c2c:	3909883a 	add	r4,r7,r4
 8002c30:	1810927a 	slli	r8,r3,9
 8002c34:	2449883a 	add	r4,r4,r17
 8002c38:	2008927a 	slli	r4,r4,9
 8002c3c:	6022d5fa 	srli	r17,r12,23
 8002c40:	1806d5fa 	srli	r3,r3,23
 8002c44:	4252b03a 	or	r9,r8,r9
 8002c48:	600a927a 	slli	r5,r12,9
 8002c4c:	4810c03a 	cmpne	r8,r9,zero
 8002c50:	2462b03a 	or	r17,r4,r17
 8002c54:	40c6b03a 	or	r3,r8,r3
 8002c58:	8900402c 	andhi	r4,r17,256
 8002c5c:	1950b03a 	or	r8,r3,r5
 8002c60:	20000726 	beq	r4,zero,8002c80 <__muldf3+0x4dc>
 8002c64:	4006d07a 	srli	r3,r8,1
 8002c68:	880497fa 	slli	r2,r17,31
 8002c6c:	4200004c 	andi	r8,r8,1
 8002c70:	8822d07a 	srli	r17,r17,1
 8002c74:	1a10b03a 	or	r8,r3,r8
 8002c78:	1210b03a 	or	r8,r2,r8
 8002c7c:	5805883a 	mov	r2,r11
 8002c80:	1140ffc4 	addi	r5,r2,1023
 8002c84:	0140440e 	bge	zero,r5,8002d98 <__muldf3+0x5f4>
 8002c88:	40c001cc 	andi	r3,r8,7
 8002c8c:	18000726 	beq	r3,zero,8002cac <__muldf3+0x508>
 8002c90:	40c003cc 	andi	r3,r8,15
 8002c94:	01000104 	movi	r4,4
 8002c98:	19000426 	beq	r3,r4,8002cac <__muldf3+0x508>
 8002c9c:	4107883a 	add	r3,r8,r4
 8002ca0:	1a11803a 	cmpltu	r8,r3,r8
 8002ca4:	8a23883a 	add	r17,r17,r8
 8002ca8:	1811883a 	mov	r8,r3
 8002cac:	88c0402c 	andhi	r3,r17,256
 8002cb0:	18000426 	beq	r3,zero,8002cc4 <__muldf3+0x520>
 8002cb4:	11410004 	addi	r5,r2,1024
 8002cb8:	00bfc034 	movhi	r2,65280
 8002cbc:	10bfffc4 	addi	r2,r2,-1
 8002cc0:	88a2703a 	and	r17,r17,r2
 8002cc4:	0081ff84 	movi	r2,2046
 8002cc8:	117f6416 	blt	r2,r5,8002a5c <__alt_data_end+0xff002a5c>
 8002ccc:	8828977a 	slli	r20,r17,29
 8002cd0:	4010d0fa 	srli	r8,r8,3
 8002cd4:	8822927a 	slli	r17,r17,9
 8002cd8:	2881ffcc 	andi	r2,r5,2047
 8002cdc:	a228b03a 	or	r20,r20,r8
 8002ce0:	880ad33a 	srli	r5,r17,12
 8002ce4:	b02b883a 	mov	r21,r22
 8002ce8:	003f0d06 	br	8002920 <__alt_data_end+0xff002920>
 8002cec:	8080022c 	andhi	r2,r16,8
 8002cf0:	10000926 	beq	r2,zero,8002d18 <__muldf3+0x574>
 8002cf4:	8880022c 	andhi	r2,r17,8
 8002cf8:	1000071e 	bne	r2,zero,8002d18 <__muldf3+0x574>
 8002cfc:	00800434 	movhi	r2,16
 8002d00:	89400234 	orhi	r5,r17,8
 8002d04:	10bfffc4 	addi	r2,r2,-1
 8002d08:	b82b883a 	mov	r21,r23
 8002d0c:	288a703a 	and	r5,r5,r2
 8002d10:	4029883a 	mov	r20,r8
 8002d14:	003f6806 	br	8002ab8 <__alt_data_end+0xff002ab8>
 8002d18:	00800434 	movhi	r2,16
 8002d1c:	81400234 	orhi	r5,r16,8
 8002d20:	10bfffc4 	addi	r2,r2,-1
 8002d24:	288a703a 	and	r5,r5,r2
 8002d28:	003f6306 	br	8002ab8 <__alt_data_end+0xff002ab8>
 8002d2c:	147ff604 	addi	r17,r2,-40
 8002d30:	3462983a 	sll	r17,r6,r17
 8002d34:	0011883a 	mov	r8,zero
 8002d38:	003f4406 	br	8002a4c <__alt_data_end+0xff002a4c>
 8002d3c:	3009883a 	mov	r4,r6
 8002d40:	d9800215 	stw	r6,8(sp)
 8002d44:	da400115 	stw	r9,4(sp)
 8002d48:	da800015 	stw	r10,0(sp)
 8002d4c:	80030a80 	call	80030a8 <__clzsi2>
 8002d50:	10800804 	addi	r2,r2,32
 8002d54:	da800017 	ldw	r10,0(sp)
 8002d58:	da400117 	ldw	r9,4(sp)
 8002d5c:	d9800217 	ldw	r6,8(sp)
 8002d60:	003f3006 	br	8002a24 <__alt_data_end+0xff002a24>
 8002d64:	143ff604 	addi	r16,r2,-40
 8002d68:	9c20983a 	sll	r16,r19,r16
 8002d6c:	0029883a 	mov	r20,zero
 8002d70:	003f1606 	br	80029cc <__alt_data_end+0xff0029cc>
 8002d74:	d9800215 	stw	r6,8(sp)
 8002d78:	d9c00015 	stw	r7,0(sp)
 8002d7c:	da400115 	stw	r9,4(sp)
 8002d80:	80030a80 	call	80030a8 <__clzsi2>
 8002d84:	10800804 	addi	r2,r2,32
 8002d88:	da400117 	ldw	r9,4(sp)
 8002d8c:	d9c00017 	ldw	r7,0(sp)
 8002d90:	d9800217 	ldw	r6,8(sp)
 8002d94:	003f0306 	br	80029a4 <__alt_data_end+0xff0029a4>
 8002d98:	00c00044 	movi	r3,1
 8002d9c:	1947c83a 	sub	r3,r3,r5
 8002da0:	00800e04 	movi	r2,56
 8002da4:	10feda16 	blt	r2,r3,8002910 <__alt_data_end+0xff002910>
 8002da8:	008007c4 	movi	r2,31
 8002dac:	10c01b16 	blt	r2,r3,8002e1c <__muldf3+0x678>
 8002db0:	00800804 	movi	r2,32
 8002db4:	10c5c83a 	sub	r2,r2,r3
 8002db8:	888a983a 	sll	r5,r17,r2
 8002dbc:	40c8d83a 	srl	r4,r8,r3
 8002dc0:	4084983a 	sll	r2,r8,r2
 8002dc4:	88e2d83a 	srl	r17,r17,r3
 8002dc8:	2906b03a 	or	r3,r5,r4
 8002dcc:	1004c03a 	cmpne	r2,r2,zero
 8002dd0:	1886b03a 	or	r3,r3,r2
 8002dd4:	188001cc 	andi	r2,r3,7
 8002dd8:	10000726 	beq	r2,zero,8002df8 <__muldf3+0x654>
 8002ddc:	188003cc 	andi	r2,r3,15
 8002de0:	01000104 	movi	r4,4
 8002de4:	11000426 	beq	r2,r4,8002df8 <__muldf3+0x654>
 8002de8:	1805883a 	mov	r2,r3
 8002dec:	10c00104 	addi	r3,r2,4
 8002df0:	1885803a 	cmpltu	r2,r3,r2
 8002df4:	88a3883a 	add	r17,r17,r2
 8002df8:	8880202c 	andhi	r2,r17,128
 8002dfc:	10001c26 	beq	r2,zero,8002e70 <__muldf3+0x6cc>
 8002e00:	b02b883a 	mov	r21,r22
 8002e04:	00800044 	movi	r2,1
 8002e08:	000b883a 	mov	r5,zero
 8002e0c:	0029883a 	mov	r20,zero
 8002e10:	003ec306 	br	8002920 <__alt_data_end+0xff002920>
 8002e14:	5805883a 	mov	r2,r11
 8002e18:	003f9906 	br	8002c80 <__alt_data_end+0xff002c80>
 8002e1c:	00bff844 	movi	r2,-31
 8002e20:	1145c83a 	sub	r2,r2,r5
 8002e24:	8888d83a 	srl	r4,r17,r2
 8002e28:	00800804 	movi	r2,32
 8002e2c:	18801a26 	beq	r3,r2,8002e98 <__muldf3+0x6f4>
 8002e30:	00801004 	movi	r2,64
 8002e34:	10c5c83a 	sub	r2,r2,r3
 8002e38:	8884983a 	sll	r2,r17,r2
 8002e3c:	1204b03a 	or	r2,r2,r8
 8002e40:	1004c03a 	cmpne	r2,r2,zero
 8002e44:	2084b03a 	or	r2,r4,r2
 8002e48:	144001cc 	andi	r17,r2,7
 8002e4c:	88000d1e 	bne	r17,zero,8002e84 <__muldf3+0x6e0>
 8002e50:	000b883a 	mov	r5,zero
 8002e54:	1028d0fa 	srli	r20,r2,3
 8002e58:	b02b883a 	mov	r21,r22
 8002e5c:	0005883a 	mov	r2,zero
 8002e60:	a468b03a 	or	r20,r20,r17
 8002e64:	003eae06 	br	8002920 <__alt_data_end+0xff002920>
 8002e68:	1007883a 	mov	r3,r2
 8002e6c:	0023883a 	mov	r17,zero
 8002e70:	880a927a 	slli	r5,r17,9
 8002e74:	1805883a 	mov	r2,r3
 8002e78:	8822977a 	slli	r17,r17,29
 8002e7c:	280ad33a 	srli	r5,r5,12
 8002e80:	003ff406 	br	8002e54 <__alt_data_end+0xff002e54>
 8002e84:	10c003cc 	andi	r3,r2,15
 8002e88:	01000104 	movi	r4,4
 8002e8c:	193ff626 	beq	r3,r4,8002e68 <__alt_data_end+0xff002e68>
 8002e90:	0023883a 	mov	r17,zero
 8002e94:	003fd506 	br	8002dec <__alt_data_end+0xff002dec>
 8002e98:	0005883a 	mov	r2,zero
 8002e9c:	003fe706 	br	8002e3c <__alt_data_end+0xff002e3c>
 8002ea0:	00800434 	movhi	r2,16
 8002ea4:	89400234 	orhi	r5,r17,8
 8002ea8:	10bfffc4 	addi	r2,r2,-1
 8002eac:	b02b883a 	mov	r21,r22
 8002eb0:	288a703a 	and	r5,r5,r2
 8002eb4:	4029883a 	mov	r20,r8
 8002eb8:	003eff06 	br	8002ab8 <__alt_data_end+0xff002ab8>

08002ebc <__floatsidf>:
 8002ebc:	defffd04 	addi	sp,sp,-12
 8002ec0:	dfc00215 	stw	ra,8(sp)
 8002ec4:	dc400115 	stw	r17,4(sp)
 8002ec8:	dc000015 	stw	r16,0(sp)
 8002ecc:	20002b26 	beq	r4,zero,8002f7c <__floatsidf+0xc0>
 8002ed0:	2023883a 	mov	r17,r4
 8002ed4:	2020d7fa 	srli	r16,r4,31
 8002ed8:	20002d16 	blt	r4,zero,8002f90 <__floatsidf+0xd4>
 8002edc:	8809883a 	mov	r4,r17
 8002ee0:	80030a80 	call	80030a8 <__clzsi2>
 8002ee4:	01410784 	movi	r5,1054
 8002ee8:	288bc83a 	sub	r5,r5,r2
 8002eec:	01010cc4 	movi	r4,1075
 8002ef0:	2149c83a 	sub	r4,r4,r5
 8002ef4:	00c007c4 	movi	r3,31
 8002ef8:	1900160e 	bge	r3,r4,8002f54 <__floatsidf+0x98>
 8002efc:	00c104c4 	movi	r3,1043
 8002f00:	1947c83a 	sub	r3,r3,r5
 8002f04:	88c6983a 	sll	r3,r17,r3
 8002f08:	00800434 	movhi	r2,16
 8002f0c:	10bfffc4 	addi	r2,r2,-1
 8002f10:	1886703a 	and	r3,r3,r2
 8002f14:	2941ffcc 	andi	r5,r5,2047
 8002f18:	800d883a 	mov	r6,r16
 8002f1c:	0005883a 	mov	r2,zero
 8002f20:	280a953a 	slli	r5,r5,20
 8002f24:	31803fcc 	andi	r6,r6,255
 8002f28:	01000434 	movhi	r4,16
 8002f2c:	300c97fa 	slli	r6,r6,31
 8002f30:	213fffc4 	addi	r4,r4,-1
 8002f34:	1906703a 	and	r3,r3,r4
 8002f38:	1946b03a 	or	r3,r3,r5
 8002f3c:	1986b03a 	or	r3,r3,r6
 8002f40:	dfc00217 	ldw	ra,8(sp)
 8002f44:	dc400117 	ldw	r17,4(sp)
 8002f48:	dc000017 	ldw	r16,0(sp)
 8002f4c:	dec00304 	addi	sp,sp,12
 8002f50:	f800283a 	ret
 8002f54:	00c002c4 	movi	r3,11
 8002f58:	1887c83a 	sub	r3,r3,r2
 8002f5c:	88c6d83a 	srl	r3,r17,r3
 8002f60:	8904983a 	sll	r2,r17,r4
 8002f64:	01000434 	movhi	r4,16
 8002f68:	213fffc4 	addi	r4,r4,-1
 8002f6c:	2941ffcc 	andi	r5,r5,2047
 8002f70:	1906703a 	and	r3,r3,r4
 8002f74:	800d883a 	mov	r6,r16
 8002f78:	003fe906 	br	8002f20 <__alt_data_end+0xff002f20>
 8002f7c:	000d883a 	mov	r6,zero
 8002f80:	000b883a 	mov	r5,zero
 8002f84:	0007883a 	mov	r3,zero
 8002f88:	0005883a 	mov	r2,zero
 8002f8c:	003fe406 	br	8002f20 <__alt_data_end+0xff002f20>
 8002f90:	0123c83a 	sub	r17,zero,r4
 8002f94:	003fd106 	br	8002edc <__alt_data_end+0xff002edc>

08002f98 <__extendsfdf2>:
 8002f98:	200ad5fa 	srli	r5,r4,23
 8002f9c:	defffd04 	addi	sp,sp,-12
 8002fa0:	dc400115 	stw	r17,4(sp)
 8002fa4:	29403fcc 	andi	r5,r5,255
 8002fa8:	29800044 	addi	r6,r5,1
 8002fac:	04402034 	movhi	r17,128
 8002fb0:	dc000015 	stw	r16,0(sp)
 8002fb4:	8c7fffc4 	addi	r17,r17,-1
 8002fb8:	dfc00215 	stw	ra,8(sp)
 8002fbc:	31803fcc 	andi	r6,r6,255
 8002fc0:	00800044 	movi	r2,1
 8002fc4:	8922703a 	and	r17,r17,r4
 8002fc8:	2020d7fa 	srli	r16,r4,31
 8002fcc:	1180110e 	bge	r2,r6,8003014 <__extendsfdf2+0x7c>
 8002fd0:	880cd0fa 	srli	r6,r17,3
 8002fd4:	8822977a 	slli	r17,r17,29
 8002fd8:	2940e004 	addi	r5,r5,896
 8002fdc:	2941ffcc 	andi	r5,r5,2047
 8002fe0:	2804953a 	slli	r2,r5,20
 8002fe4:	01400434 	movhi	r5,16
 8002fe8:	800697fa 	slli	r3,r16,31
 8002fec:	297fffc4 	addi	r5,r5,-1
 8002ff0:	314a703a 	and	r5,r6,r5
 8002ff4:	288ab03a 	or	r5,r5,r2
 8002ff8:	28c6b03a 	or	r3,r5,r3
 8002ffc:	8805883a 	mov	r2,r17
 8003000:	dfc00217 	ldw	ra,8(sp)
 8003004:	dc400117 	ldw	r17,4(sp)
 8003008:	dc000017 	ldw	r16,0(sp)
 800300c:	dec00304 	addi	sp,sp,12
 8003010:	f800283a 	ret
 8003014:	2800111e 	bne	r5,zero,800305c <__extendsfdf2+0xc4>
 8003018:	88001c26 	beq	r17,zero,800308c <__extendsfdf2+0xf4>
 800301c:	8809883a 	mov	r4,r17
 8003020:	80030a80 	call	80030a8 <__clzsi2>
 8003024:	00c00284 	movi	r3,10
 8003028:	18801b16 	blt	r3,r2,8003098 <__extendsfdf2+0x100>
 800302c:	018002c4 	movi	r6,11
 8003030:	308dc83a 	sub	r6,r6,r2
 8003034:	11000544 	addi	r4,r2,21
 8003038:	8986d83a 	srl	r3,r17,r6
 800303c:	8922983a 	sll	r17,r17,r4
 8003040:	0180e244 	movi	r6,905
 8003044:	01400434 	movhi	r5,16
 8003048:	3085c83a 	sub	r2,r6,r2
 800304c:	297fffc4 	addi	r5,r5,-1
 8003050:	194c703a 	and	r6,r3,r5
 8003054:	1141ffcc 	andi	r5,r2,2047
 8003058:	003fe006 	br	8002fdc <__alt_data_end+0xff002fdc>
 800305c:	88000826 	beq	r17,zero,8003080 <__extendsfdf2+0xe8>
 8003060:	880cd0fa 	srli	r6,r17,3
 8003064:	00800434 	movhi	r2,16
 8003068:	10bfffc4 	addi	r2,r2,-1
 800306c:	31800234 	orhi	r6,r6,8
 8003070:	8822977a 	slli	r17,r17,29
 8003074:	308c703a 	and	r6,r6,r2
 8003078:	0141ffc4 	movi	r5,2047
 800307c:	003fd706 	br	8002fdc <__alt_data_end+0xff002fdc>
 8003080:	0141ffc4 	movi	r5,2047
 8003084:	000d883a 	mov	r6,zero
 8003088:	003fd406 	br	8002fdc <__alt_data_end+0xff002fdc>
 800308c:	000b883a 	mov	r5,zero
 8003090:	000d883a 	mov	r6,zero
 8003094:	003fd106 	br	8002fdc <__alt_data_end+0xff002fdc>
 8003098:	11bffd44 	addi	r6,r2,-11
 800309c:	8986983a 	sll	r3,r17,r6
 80030a0:	0023883a 	mov	r17,zero
 80030a4:	003fe606 	br	8003040 <__alt_data_end+0xff003040>

080030a8 <__clzsi2>:
 80030a8:	00bfffd4 	movui	r2,65535
 80030ac:	11000536 	bltu	r2,r4,80030c4 <__clzsi2+0x1c>
 80030b0:	00803fc4 	movi	r2,255
 80030b4:	11000f36 	bltu	r2,r4,80030f4 <__clzsi2+0x4c>
 80030b8:	00800804 	movi	r2,32
 80030bc:	0007883a 	mov	r3,zero
 80030c0:	00000506 	br	80030d8 <__clzsi2+0x30>
 80030c4:	00804034 	movhi	r2,256
 80030c8:	10bfffc4 	addi	r2,r2,-1
 80030cc:	11000c2e 	bgeu	r2,r4,8003100 <__clzsi2+0x58>
 80030d0:	00800204 	movi	r2,8
 80030d4:	00c00604 	movi	r3,24
 80030d8:	20c8d83a 	srl	r4,r4,r3
 80030dc:	00c20074 	movhi	r3,2049
 80030e0:	18c73b44 	addi	r3,r3,7405
 80030e4:	1909883a 	add	r4,r3,r4
 80030e8:	20c00003 	ldbu	r3,0(r4)
 80030ec:	10c5c83a 	sub	r2,r2,r3
 80030f0:	f800283a 	ret
 80030f4:	00800604 	movi	r2,24
 80030f8:	00c00204 	movi	r3,8
 80030fc:	003ff606 	br	80030d8 <__alt_data_end+0xff0030d8>
 8003100:	00800404 	movi	r2,16
 8003104:	1007883a 	mov	r3,r2
 8003108:	003ff306 	br	80030d8 <__alt_data_end+0xff0030d8>

0800310c <_printf_r>:
 800310c:	defffd04 	addi	sp,sp,-12
 8003110:	2805883a 	mov	r2,r5
 8003114:	dfc00015 	stw	ra,0(sp)
 8003118:	d9800115 	stw	r6,4(sp)
 800311c:	d9c00215 	stw	r7,8(sp)
 8003120:	21400217 	ldw	r5,8(r4)
 8003124:	d9c00104 	addi	r7,sp,4
 8003128:	100d883a 	mov	r6,r2
 800312c:	80031980 	call	8003198 <___vfprintf_internal_r>
 8003130:	dfc00017 	ldw	ra,0(sp)
 8003134:	dec00304 	addi	sp,sp,12
 8003138:	f800283a 	ret

0800313c <printf>:
 800313c:	defffc04 	addi	sp,sp,-16
 8003140:	dfc00015 	stw	ra,0(sp)
 8003144:	d9400115 	stw	r5,4(sp)
 8003148:	d9800215 	stw	r6,8(sp)
 800314c:	d9c00315 	stw	r7,12(sp)
 8003150:	00820074 	movhi	r2,2049
 8003154:	108eaa04 	addi	r2,r2,15016
 8003158:	10800017 	ldw	r2,0(r2)
 800315c:	200b883a 	mov	r5,r4
 8003160:	d9800104 	addi	r6,sp,4
 8003164:	11000217 	ldw	r4,8(r2)
 8003168:	80053900 	call	8005390 <__vfprintf_internal>
 800316c:	dfc00017 	ldw	ra,0(sp)
 8003170:	dec00404 	addi	sp,sp,16
 8003174:	f800283a 	ret

08003178 <_putchar_r>:
 8003178:	21800217 	ldw	r6,8(r4)
 800317c:	800983c1 	jmpi	800983c <_putc_r>

08003180 <putchar>:
 8003180:	00820074 	movhi	r2,2049
 8003184:	108eaa04 	addi	r2,r2,15016
 8003188:	200b883a 	mov	r5,r4
 800318c:	11000017 	ldw	r4,0(r2)
 8003190:	21800217 	ldw	r6,8(r4)
 8003194:	800983c1 	jmpi	800983c <_putc_r>

08003198 <___vfprintf_internal_r>:
 8003198:	deffb804 	addi	sp,sp,-288
 800319c:	dfc04715 	stw	ra,284(sp)
 80031a0:	ddc04515 	stw	r23,276(sp)
 80031a4:	dd404315 	stw	r21,268(sp)
 80031a8:	d9002c15 	stw	r4,176(sp)
 80031ac:	282f883a 	mov	r23,r5
 80031b0:	302b883a 	mov	r21,r6
 80031b4:	d9c02d15 	stw	r7,180(sp)
 80031b8:	df004615 	stw	fp,280(sp)
 80031bc:	dd804415 	stw	r22,272(sp)
 80031c0:	dd004215 	stw	r20,264(sp)
 80031c4:	dcc04115 	stw	r19,260(sp)
 80031c8:	dc804015 	stw	r18,256(sp)
 80031cc:	dc403f15 	stw	r17,252(sp)
 80031d0:	dc003e15 	stw	r16,248(sp)
 80031d4:	8007af40 	call	8007af4 <_localeconv_r>
 80031d8:	10800017 	ldw	r2,0(r2)
 80031dc:	1009883a 	mov	r4,r2
 80031e0:	d8803415 	stw	r2,208(sp)
 80031e4:	8009c840 	call	8009c84 <strlen>
 80031e8:	d8803715 	stw	r2,220(sp)
 80031ec:	d8802c17 	ldw	r2,176(sp)
 80031f0:	10000226 	beq	r2,zero,80031fc <___vfprintf_internal_r+0x64>
 80031f4:	10800e17 	ldw	r2,56(r2)
 80031f8:	1000f926 	beq	r2,zero,80035e0 <___vfprintf_internal_r+0x448>
 80031fc:	b880030b 	ldhu	r2,12(r23)
 8003200:	10c8000c 	andi	r3,r2,8192
 8003204:	1800061e 	bne	r3,zero,8003220 <___vfprintf_internal_r+0x88>
 8003208:	b9001917 	ldw	r4,100(r23)
 800320c:	00f7ffc4 	movi	r3,-8193
 8003210:	10880014 	ori	r2,r2,8192
 8003214:	20c6703a 	and	r3,r4,r3
 8003218:	b880030d 	sth	r2,12(r23)
 800321c:	b8c01915 	stw	r3,100(r23)
 8003220:	10c0020c 	andi	r3,r2,8
 8003224:	1800c126 	beq	r3,zero,800352c <___vfprintf_internal_r+0x394>
 8003228:	b8c00417 	ldw	r3,16(r23)
 800322c:	1800bf26 	beq	r3,zero,800352c <___vfprintf_internal_r+0x394>
 8003230:	1080068c 	andi	r2,r2,26
 8003234:	00c00284 	movi	r3,10
 8003238:	10c0c426 	beq	r2,r3,800354c <___vfprintf_internal_r+0x3b4>
 800323c:	d8c00404 	addi	r3,sp,16
 8003240:	05020074 	movhi	r20,2049
 8003244:	d9001e04 	addi	r4,sp,120
 8003248:	a5078c84 	addi	r20,r20,7730
 800324c:	d8c01e15 	stw	r3,120(sp)
 8003250:	d8002015 	stw	zero,128(sp)
 8003254:	d8001f15 	stw	zero,124(sp)
 8003258:	d8003315 	stw	zero,204(sp)
 800325c:	d8003615 	stw	zero,216(sp)
 8003260:	d8003815 	stw	zero,224(sp)
 8003264:	1811883a 	mov	r8,r3
 8003268:	d8003915 	stw	zero,228(sp)
 800326c:	d8003a15 	stw	zero,232(sp)
 8003270:	d8002f15 	stw	zero,188(sp)
 8003274:	d9002815 	stw	r4,160(sp)
 8003278:	a8800007 	ldb	r2,0(r21)
 800327c:	10027b26 	beq	r2,zero,8003c6c <___vfprintf_internal_r+0xad4>
 8003280:	00c00944 	movi	r3,37
 8003284:	a821883a 	mov	r16,r21
 8003288:	10c0021e 	bne	r2,r3,8003294 <___vfprintf_internal_r+0xfc>
 800328c:	00001406 	br	80032e0 <___vfprintf_internal_r+0x148>
 8003290:	10c00326 	beq	r2,r3,80032a0 <___vfprintf_internal_r+0x108>
 8003294:	84000044 	addi	r16,r16,1
 8003298:	80800007 	ldb	r2,0(r16)
 800329c:	103ffc1e 	bne	r2,zero,8003290 <__alt_data_end+0xff003290>
 80032a0:	8563c83a 	sub	r17,r16,r21
 80032a4:	88000e26 	beq	r17,zero,80032e0 <___vfprintf_internal_r+0x148>
 80032a8:	d8c02017 	ldw	r3,128(sp)
 80032ac:	d8801f17 	ldw	r2,124(sp)
 80032b0:	45400015 	stw	r21,0(r8)
 80032b4:	1c47883a 	add	r3,r3,r17
 80032b8:	10800044 	addi	r2,r2,1
 80032bc:	d8c02015 	stw	r3,128(sp)
 80032c0:	44400115 	stw	r17,4(r8)
 80032c4:	d8801f15 	stw	r2,124(sp)
 80032c8:	00c001c4 	movi	r3,7
 80032cc:	1880a716 	blt	r3,r2,800356c <___vfprintf_internal_r+0x3d4>
 80032d0:	42000204 	addi	r8,r8,8
 80032d4:	d9402f17 	ldw	r5,188(sp)
 80032d8:	2c4b883a 	add	r5,r5,r17
 80032dc:	d9402f15 	stw	r5,188(sp)
 80032e0:	80800007 	ldb	r2,0(r16)
 80032e4:	1000a826 	beq	r2,zero,8003588 <___vfprintf_internal_r+0x3f0>
 80032e8:	84400047 	ldb	r17,1(r16)
 80032ec:	00bfffc4 	movi	r2,-1
 80032f0:	85400044 	addi	r21,r16,1
 80032f4:	d8002785 	stb	zero,158(sp)
 80032f8:	0007883a 	mov	r3,zero
 80032fc:	000f883a 	mov	r7,zero
 8003300:	d8802915 	stw	r2,164(sp)
 8003304:	d8003115 	stw	zero,196(sp)
 8003308:	0025883a 	mov	r18,zero
 800330c:	01401604 	movi	r5,88
 8003310:	01800244 	movi	r6,9
 8003314:	02800a84 	movi	r10,42
 8003318:	02401b04 	movi	r9,108
 800331c:	ad400044 	addi	r21,r21,1
 8003320:	88bff804 	addi	r2,r17,-32
 8003324:	28830436 	bltu	r5,r2,8003f38 <___vfprintf_internal_r+0xda0>
 8003328:	100490ba 	slli	r2,r2,2
 800332c:	01020034 	movhi	r4,2048
 8003330:	210cd004 	addi	r4,r4,13120
 8003334:	1105883a 	add	r2,r2,r4
 8003338:	10800017 	ldw	r2,0(r2)
 800333c:	1000683a 	jmp	r2
 8003340:	08003e58 	cmpnei	zero,at,249
 8003344:	08003f38 	rdprs	zero,at,252
 8003348:	08003f38 	rdprs	zero,at,252
 800334c:	08003e78 	rdprs	zero,at,249
 8003350:	08003f38 	rdprs	zero,at,252
 8003354:	08003f38 	rdprs	zero,at,252
 8003358:	08003f38 	rdprs	zero,at,252
 800335c:	08003f38 	rdprs	zero,at,252
 8003360:	08003f38 	rdprs	zero,at,252
 8003364:	08003f38 	rdprs	zero,at,252
 8003368:	080035ec 	andhi	zero,at,215
 800336c:	08003d94 	ori	zero,at,246
 8003370:	08003f38 	rdprs	zero,at,252
 8003374:	080034b4 	orhi	zero,at,210
 8003378:	08003614 	ori	zero,at,216
 800337c:	08003f38 	rdprs	zero,at,252
 8003380:	08003654 	ori	zero,at,217
 8003384:	08003660 	cmpeqi	zero,at,217
 8003388:	08003660 	cmpeqi	zero,at,217
 800338c:	08003660 	cmpeqi	zero,at,217
 8003390:	08003660 	cmpeqi	zero,at,217
 8003394:	08003660 	cmpeqi	zero,at,217
 8003398:	08003660 	cmpeqi	zero,at,217
 800339c:	08003660 	cmpeqi	zero,at,217
 80033a0:	08003660 	cmpeqi	zero,at,217
 80033a4:	08003660 	cmpeqi	zero,at,217
 80033a8:	08003f38 	rdprs	zero,at,252
 80033ac:	08003f38 	rdprs	zero,at,252
 80033b0:	08003f38 	rdprs	zero,at,252
 80033b4:	08003f38 	rdprs	zero,at,252
 80033b8:	08003f38 	rdprs	zero,at,252
 80033bc:	08003f38 	rdprs	zero,at,252
 80033c0:	08003f38 	rdprs	zero,at,252
 80033c4:	08003f38 	rdprs	zero,at,252
 80033c8:	08003f38 	rdprs	zero,at,252
 80033cc:	08003f38 	rdprs	zero,at,252
 80033d0:	08003694 	ori	zero,at,218
 80033d4:	08003750 	cmplti	zero,at,221
 80033d8:	08003f38 	rdprs	zero,at,252
 80033dc:	08003750 	cmplti	zero,at,221
 80033e0:	08003f38 	rdprs	zero,at,252
 80033e4:	08003f38 	rdprs	zero,at,252
 80033e8:	08003f38 	rdprs	zero,at,252
 80033ec:	08003f38 	rdprs	zero,at,252
 80033f0:	080037f0 	cmpltui	zero,at,223
 80033f4:	08003f38 	rdprs	zero,at,252
 80033f8:	08003f38 	rdprs	zero,at,252
 80033fc:	080037fc 	xorhi	zero,at,223
 8003400:	08003f38 	rdprs	zero,at,252
 8003404:	08003f38 	rdprs	zero,at,252
 8003408:	08003f38 	rdprs	zero,at,252
 800340c:	08003f38 	rdprs	zero,at,252
 8003410:	08003f38 	rdprs	zero,at,252
 8003414:	08003c74 	orhi	zero,at,241
 8003418:	08003f38 	rdprs	zero,at,252
 800341c:	08003f38 	rdprs	zero,at,252
 8003420:	08003cd4 	ori	zero,at,243
 8003424:	08003f38 	rdprs	zero,at,252
 8003428:	08003f38 	rdprs	zero,at,252
 800342c:	08003f38 	rdprs	zero,at,252
 8003430:	08003f38 	rdprs	zero,at,252
 8003434:	08003f38 	rdprs	zero,at,252
 8003438:	08003f38 	rdprs	zero,at,252
 800343c:	08003f38 	rdprs	zero,at,252
 8003440:	08003f38 	rdprs	zero,at,252
 8003444:	08003f38 	rdprs	zero,at,252
 8003448:	08003f38 	rdprs	zero,at,252
 800344c:	08003ee4 	muli	zero,at,251
 8003450:	08003e84 	addi	zero,at,250
 8003454:	08003750 	cmplti	zero,at,221
 8003458:	08003750 	cmplti	zero,at,221
 800345c:	08003750 	cmplti	zero,at,221
 8003460:	08003e94 	ori	zero,at,250
 8003464:	08003e84 	addi	zero,at,250
 8003468:	08003f38 	rdprs	zero,at,252
 800346c:	08003f38 	rdprs	zero,at,252
 8003470:	08003ea0 	cmpeqi	zero,at,250
 8003474:	08003f38 	rdprs	zero,at,252
 8003478:	08003eb0 	cmpltui	zero,at,250
 800347c:	08003d84 	addi	zero,at,246
 8003480:	080034c0 	call	80034c <__alt_mem_onchip_memory2_0+0x80034c>
 8003484:	08003da4 	muli	zero,at,246
 8003488:	08003f38 	rdprs	zero,at,252
 800348c:	08003db0 	cmpltui	zero,at,246
 8003490:	08003f38 	rdprs	zero,at,252
 8003494:	08003e0c 	andi	zero,at,248
 8003498:	08003f38 	rdprs	zero,at,252
 800349c:	08003f38 	rdprs	zero,at,252
 80034a0:	08003e1c 	xori	zero,at,248
 80034a4:	d9003117 	ldw	r4,196(sp)
 80034a8:	d8802d15 	stw	r2,180(sp)
 80034ac:	0109c83a 	sub	r4,zero,r4
 80034b0:	d9003115 	stw	r4,196(sp)
 80034b4:	94800114 	ori	r18,r18,4
 80034b8:	ac400007 	ldb	r17,0(r21)
 80034bc:	003f9706 	br	800331c <__alt_data_end+0xff00331c>
 80034c0:	00800c04 	movi	r2,48
 80034c4:	d9002d17 	ldw	r4,180(sp)
 80034c8:	d9402917 	ldw	r5,164(sp)
 80034cc:	d8802705 	stb	r2,156(sp)
 80034d0:	00801e04 	movi	r2,120
 80034d4:	d8802745 	stb	r2,157(sp)
 80034d8:	d8002785 	stb	zero,158(sp)
 80034dc:	20c00104 	addi	r3,r4,4
 80034e0:	24c00017 	ldw	r19,0(r4)
 80034e4:	002d883a 	mov	r22,zero
 80034e8:	90800094 	ori	r2,r18,2
 80034ec:	28029a16 	blt	r5,zero,8003f58 <___vfprintf_internal_r+0xdc0>
 80034f0:	00bfdfc4 	movi	r2,-129
 80034f4:	90a4703a 	and	r18,r18,r2
 80034f8:	d8c02d15 	stw	r3,180(sp)
 80034fc:	94800094 	ori	r18,r18,2
 8003500:	9802871e 	bne	r19,zero,8003f20 <___vfprintf_internal_r+0xd88>
 8003504:	00820074 	movhi	r2,2049
 8003508:	10878504 	addi	r2,r2,7700
 800350c:	d8803915 	stw	r2,228(sp)
 8003510:	04401e04 	movi	r17,120
 8003514:	d8802917 	ldw	r2,164(sp)
 8003518:	0039883a 	mov	fp,zero
 800351c:	1001e926 	beq	r2,zero,8003cc4 <___vfprintf_internal_r+0xb2c>
 8003520:	0027883a 	mov	r19,zero
 8003524:	002d883a 	mov	r22,zero
 8003528:	00020506 	br	8003d40 <___vfprintf_internal_r+0xba8>
 800352c:	d9002c17 	ldw	r4,176(sp)
 8003530:	b80b883a 	mov	r5,r23
 8003534:	80054680 	call	8005468 <__swsetup_r>
 8003538:	1005ac1e 	bne	r2,zero,8004bec <___vfprintf_internal_r+0x1a54>
 800353c:	b880030b 	ldhu	r2,12(r23)
 8003540:	00c00284 	movi	r3,10
 8003544:	1080068c 	andi	r2,r2,26
 8003548:	10ff3c1e 	bne	r2,r3,800323c <__alt_data_end+0xff00323c>
 800354c:	b880038f 	ldh	r2,14(r23)
 8003550:	103f3a16 	blt	r2,zero,800323c <__alt_data_end+0xff00323c>
 8003554:	d9c02d17 	ldw	r7,180(sp)
 8003558:	d9002c17 	ldw	r4,176(sp)
 800355c:	a80d883a 	mov	r6,r21
 8003560:	b80b883a 	mov	r5,r23
 8003564:	80053ac0 	call	80053ac <__sbprintf>
 8003568:	00001106 	br	80035b0 <___vfprintf_internal_r+0x418>
 800356c:	d9002c17 	ldw	r4,176(sp)
 8003570:	d9801e04 	addi	r6,sp,120
 8003574:	b80b883a 	mov	r5,r23
 8003578:	8009e180 	call	8009e18 <__sprint_r>
 800357c:	1000081e 	bne	r2,zero,80035a0 <___vfprintf_internal_r+0x408>
 8003580:	da000404 	addi	r8,sp,16
 8003584:	003f5306 	br	80032d4 <__alt_data_end+0xff0032d4>
 8003588:	d8802017 	ldw	r2,128(sp)
 800358c:	10000426 	beq	r2,zero,80035a0 <___vfprintf_internal_r+0x408>
 8003590:	d9002c17 	ldw	r4,176(sp)
 8003594:	d9801e04 	addi	r6,sp,120
 8003598:	b80b883a 	mov	r5,r23
 800359c:	8009e180 	call	8009e18 <__sprint_r>
 80035a0:	b880030b 	ldhu	r2,12(r23)
 80035a4:	1080100c 	andi	r2,r2,64
 80035a8:	1005901e 	bne	r2,zero,8004bec <___vfprintf_internal_r+0x1a54>
 80035ac:	d8802f17 	ldw	r2,188(sp)
 80035b0:	dfc04717 	ldw	ra,284(sp)
 80035b4:	df004617 	ldw	fp,280(sp)
 80035b8:	ddc04517 	ldw	r23,276(sp)
 80035bc:	dd804417 	ldw	r22,272(sp)
 80035c0:	dd404317 	ldw	r21,268(sp)
 80035c4:	dd004217 	ldw	r20,264(sp)
 80035c8:	dcc04117 	ldw	r19,260(sp)
 80035cc:	dc804017 	ldw	r18,256(sp)
 80035d0:	dc403f17 	ldw	r17,252(sp)
 80035d4:	dc003e17 	ldw	r16,248(sp)
 80035d8:	dec04804 	addi	sp,sp,288
 80035dc:	f800283a 	ret
 80035e0:	d9002c17 	ldw	r4,176(sp)
 80035e4:	800743c0 	call	800743c <__sinit>
 80035e8:	003f0406 	br	80031fc <__alt_data_end+0xff0031fc>
 80035ec:	d8802d17 	ldw	r2,180(sp)
 80035f0:	d9002d17 	ldw	r4,180(sp)
 80035f4:	10800017 	ldw	r2,0(r2)
 80035f8:	d8803115 	stw	r2,196(sp)
 80035fc:	20800104 	addi	r2,r4,4
 8003600:	d9003117 	ldw	r4,196(sp)
 8003604:	203fa716 	blt	r4,zero,80034a4 <__alt_data_end+0xff0034a4>
 8003608:	d8802d15 	stw	r2,180(sp)
 800360c:	ac400007 	ldb	r17,0(r21)
 8003610:	003f4206 	br	800331c <__alt_data_end+0xff00331c>
 8003614:	ac400007 	ldb	r17,0(r21)
 8003618:	aac00044 	addi	r11,r21,1
 800361c:	8a872826 	beq	r17,r10,80052c0 <___vfprintf_internal_r+0x2128>
 8003620:	88bff404 	addi	r2,r17,-48
 8003624:	0009883a 	mov	r4,zero
 8003628:	30867d36 	bltu	r6,r2,8005020 <___vfprintf_internal_r+0x1e88>
 800362c:	5c400007 	ldb	r17,0(r11)
 8003630:	210002a4 	muli	r4,r4,10
 8003634:	5d400044 	addi	r21,r11,1
 8003638:	a817883a 	mov	r11,r21
 800363c:	2089883a 	add	r4,r4,r2
 8003640:	88bff404 	addi	r2,r17,-48
 8003644:	30bff92e 	bgeu	r6,r2,800362c <__alt_data_end+0xff00362c>
 8003648:	2005c916 	blt	r4,zero,8004d70 <___vfprintf_internal_r+0x1bd8>
 800364c:	d9002915 	stw	r4,164(sp)
 8003650:	003f3306 	br	8003320 <__alt_data_end+0xff003320>
 8003654:	94802014 	ori	r18,r18,128
 8003658:	ac400007 	ldb	r17,0(r21)
 800365c:	003f2f06 	br	800331c <__alt_data_end+0xff00331c>
 8003660:	a809883a 	mov	r4,r21
 8003664:	d8003115 	stw	zero,196(sp)
 8003668:	88bff404 	addi	r2,r17,-48
 800366c:	0017883a 	mov	r11,zero
 8003670:	24400007 	ldb	r17,0(r4)
 8003674:	5ac002a4 	muli	r11,r11,10
 8003678:	ad400044 	addi	r21,r21,1
 800367c:	a809883a 	mov	r4,r21
 8003680:	12d7883a 	add	r11,r2,r11
 8003684:	88bff404 	addi	r2,r17,-48
 8003688:	30bff92e 	bgeu	r6,r2,8003670 <__alt_data_end+0xff003670>
 800368c:	dac03115 	stw	r11,196(sp)
 8003690:	003f2306 	br	8003320 <__alt_data_end+0xff003320>
 8003694:	18c03fcc 	andi	r3,r3,255
 8003698:	18072b1e 	bne	r3,zero,8005348 <___vfprintf_internal_r+0x21b0>
 800369c:	94800414 	ori	r18,r18,16
 80036a0:	9080080c 	andi	r2,r18,32
 80036a4:	10037b26 	beq	r2,zero,8004494 <___vfprintf_internal_r+0x12fc>
 80036a8:	d9402d17 	ldw	r5,180(sp)
 80036ac:	28800117 	ldw	r2,4(r5)
 80036b0:	2cc00017 	ldw	r19,0(r5)
 80036b4:	29400204 	addi	r5,r5,8
 80036b8:	d9402d15 	stw	r5,180(sp)
 80036bc:	102d883a 	mov	r22,r2
 80036c0:	10044b16 	blt	r2,zero,80047f0 <___vfprintf_internal_r+0x1658>
 80036c4:	d9402917 	ldw	r5,164(sp)
 80036c8:	df002783 	ldbu	fp,158(sp)
 80036cc:	2803bc16 	blt	r5,zero,80045c0 <___vfprintf_internal_r+0x1428>
 80036d0:	00ffdfc4 	movi	r3,-129
 80036d4:	9d84b03a 	or	r2,r19,r22
 80036d8:	90e4703a 	and	r18,r18,r3
 80036dc:	10017726 	beq	r2,zero,8003cbc <___vfprintf_internal_r+0xb24>
 80036e0:	b0038326 	beq	r22,zero,80044f0 <___vfprintf_internal_r+0x1358>
 80036e4:	dc402a15 	stw	r17,168(sp)
 80036e8:	dc001e04 	addi	r16,sp,120
 80036ec:	b023883a 	mov	r17,r22
 80036f0:	402d883a 	mov	r22,r8
 80036f4:	9809883a 	mov	r4,r19
 80036f8:	880b883a 	mov	r5,r17
 80036fc:	01800284 	movi	r6,10
 8003700:	000f883a 	mov	r7,zero
 8003704:	800cd8c0 	call	800cd8c <__umoddi3>
 8003708:	10800c04 	addi	r2,r2,48
 800370c:	843fffc4 	addi	r16,r16,-1
 8003710:	9809883a 	mov	r4,r19
 8003714:	880b883a 	mov	r5,r17
 8003718:	80800005 	stb	r2,0(r16)
 800371c:	01800284 	movi	r6,10
 8003720:	000f883a 	mov	r7,zero
 8003724:	800c8140 	call	800c814 <__udivdi3>
 8003728:	1027883a 	mov	r19,r2
 800372c:	10c4b03a 	or	r2,r2,r3
 8003730:	1823883a 	mov	r17,r3
 8003734:	103fef1e 	bne	r2,zero,80036f4 <__alt_data_end+0xff0036f4>
 8003738:	d8c02817 	ldw	r3,160(sp)
 800373c:	dc402a17 	ldw	r17,168(sp)
 8003740:	b011883a 	mov	r8,r22
 8003744:	1c07c83a 	sub	r3,r3,r16
 8003748:	d8c02e15 	stw	r3,184(sp)
 800374c:	00005906 	br	80038b4 <___vfprintf_internal_r+0x71c>
 8003750:	18c03fcc 	andi	r3,r3,255
 8003754:	1806fa1e 	bne	r3,zero,8005340 <___vfprintf_internal_r+0x21a8>
 8003758:	9080020c 	andi	r2,r18,8
 800375c:	10048a26 	beq	r2,zero,8004988 <___vfprintf_internal_r+0x17f0>
 8003760:	d8c02d17 	ldw	r3,180(sp)
 8003764:	d9002d17 	ldw	r4,180(sp)
 8003768:	d9402d17 	ldw	r5,180(sp)
 800376c:	18c00017 	ldw	r3,0(r3)
 8003770:	21000117 	ldw	r4,4(r4)
 8003774:	29400204 	addi	r5,r5,8
 8003778:	d8c03615 	stw	r3,216(sp)
 800377c:	d9003815 	stw	r4,224(sp)
 8003780:	d9402d15 	stw	r5,180(sp)
 8003784:	d9003617 	ldw	r4,216(sp)
 8003788:	d9403817 	ldw	r5,224(sp)
 800378c:	da003d15 	stw	r8,244(sp)
 8003790:	04000044 	movi	r16,1
 8003794:	80099a40 	call	80099a4 <__fpclassifyd>
 8003798:	da003d17 	ldw	r8,244(sp)
 800379c:	14041f1e 	bne	r2,r16,800481c <___vfprintf_internal_r+0x1684>
 80037a0:	d9003617 	ldw	r4,216(sp)
 80037a4:	d9403817 	ldw	r5,224(sp)
 80037a8:	000d883a 	mov	r6,zero
 80037ac:	000f883a 	mov	r7,zero
 80037b0:	800e5bc0 	call	800e5bc <__ledf2>
 80037b4:	da003d17 	ldw	r8,244(sp)
 80037b8:	1005be16 	blt	r2,zero,8004eb4 <___vfprintf_internal_r+0x1d1c>
 80037bc:	df002783 	ldbu	fp,158(sp)
 80037c0:	008011c4 	movi	r2,71
 80037c4:	1445330e 	bge	r2,r17,8004c94 <___vfprintf_internal_r+0x1afc>
 80037c8:	04020074 	movhi	r16,2049
 80037cc:	84077d04 	addi	r16,r16,7668
 80037d0:	00c000c4 	movi	r3,3
 80037d4:	00bfdfc4 	movi	r2,-129
 80037d8:	d8c02a15 	stw	r3,168(sp)
 80037dc:	90a4703a 	and	r18,r18,r2
 80037e0:	d8c02e15 	stw	r3,184(sp)
 80037e4:	d8002915 	stw	zero,164(sp)
 80037e8:	d8003215 	stw	zero,200(sp)
 80037ec:	00003706 	br	80038cc <___vfprintf_internal_r+0x734>
 80037f0:	94800214 	ori	r18,r18,8
 80037f4:	ac400007 	ldb	r17,0(r21)
 80037f8:	003ec806 	br	800331c <__alt_data_end+0xff00331c>
 80037fc:	18c03fcc 	andi	r3,r3,255
 8003800:	1806db1e 	bne	r3,zero,8005370 <___vfprintf_internal_r+0x21d8>
 8003804:	94800414 	ori	r18,r18,16
 8003808:	9080080c 	andi	r2,r18,32
 800380c:	1002d826 	beq	r2,zero,8004370 <___vfprintf_internal_r+0x11d8>
 8003810:	d9402d17 	ldw	r5,180(sp)
 8003814:	d8c02917 	ldw	r3,164(sp)
 8003818:	d8002785 	stb	zero,158(sp)
 800381c:	28800204 	addi	r2,r5,8
 8003820:	2cc00017 	ldw	r19,0(r5)
 8003824:	2d800117 	ldw	r22,4(r5)
 8003828:	18048f16 	blt	r3,zero,8004a68 <___vfprintf_internal_r+0x18d0>
 800382c:	013fdfc4 	movi	r4,-129
 8003830:	9d86b03a 	or	r3,r19,r22
 8003834:	d8802d15 	stw	r2,180(sp)
 8003838:	9124703a 	and	r18,r18,r4
 800383c:	1802d91e 	bne	r3,zero,80043a4 <___vfprintf_internal_r+0x120c>
 8003840:	d8c02917 	ldw	r3,164(sp)
 8003844:	0039883a 	mov	fp,zero
 8003848:	1805c326 	beq	r3,zero,8004f58 <___vfprintf_internal_r+0x1dc0>
 800384c:	0027883a 	mov	r19,zero
 8003850:	002d883a 	mov	r22,zero
 8003854:	dc001e04 	addi	r16,sp,120
 8003858:	9806d0fa 	srli	r3,r19,3
 800385c:	b008977a 	slli	r4,r22,29
 8003860:	b02cd0fa 	srli	r22,r22,3
 8003864:	9cc001cc 	andi	r19,r19,7
 8003868:	98800c04 	addi	r2,r19,48
 800386c:	843fffc4 	addi	r16,r16,-1
 8003870:	20e6b03a 	or	r19,r4,r3
 8003874:	80800005 	stb	r2,0(r16)
 8003878:	9d86b03a 	or	r3,r19,r22
 800387c:	183ff61e 	bne	r3,zero,8003858 <__alt_data_end+0xff003858>
 8003880:	90c0004c 	andi	r3,r18,1
 8003884:	18013b26 	beq	r3,zero,8003d74 <___vfprintf_internal_r+0xbdc>
 8003888:	10803fcc 	andi	r2,r2,255
 800388c:	1080201c 	xori	r2,r2,128
 8003890:	10bfe004 	addi	r2,r2,-128
 8003894:	00c00c04 	movi	r3,48
 8003898:	10c13626 	beq	r2,r3,8003d74 <___vfprintf_internal_r+0xbdc>
 800389c:	80ffffc5 	stb	r3,-1(r16)
 80038a0:	d8c02817 	ldw	r3,160(sp)
 80038a4:	80bfffc4 	addi	r2,r16,-1
 80038a8:	1021883a 	mov	r16,r2
 80038ac:	1887c83a 	sub	r3,r3,r2
 80038b0:	d8c02e15 	stw	r3,184(sp)
 80038b4:	d8802e17 	ldw	r2,184(sp)
 80038b8:	d9002917 	ldw	r4,164(sp)
 80038bc:	1100010e 	bge	r2,r4,80038c4 <___vfprintf_internal_r+0x72c>
 80038c0:	2005883a 	mov	r2,r4
 80038c4:	d8802a15 	stw	r2,168(sp)
 80038c8:	d8003215 	stw	zero,200(sp)
 80038cc:	e7003fcc 	andi	fp,fp,255
 80038d0:	e700201c 	xori	fp,fp,128
 80038d4:	e73fe004 	addi	fp,fp,-128
 80038d8:	e0000326 	beq	fp,zero,80038e8 <___vfprintf_internal_r+0x750>
 80038dc:	d8c02a17 	ldw	r3,168(sp)
 80038e0:	18c00044 	addi	r3,r3,1
 80038e4:	d8c02a15 	stw	r3,168(sp)
 80038e8:	90c0008c 	andi	r3,r18,2
 80038ec:	d8c02b15 	stw	r3,172(sp)
 80038f0:	18000326 	beq	r3,zero,8003900 <___vfprintf_internal_r+0x768>
 80038f4:	d8c02a17 	ldw	r3,168(sp)
 80038f8:	18c00084 	addi	r3,r3,2
 80038fc:	d8c02a15 	stw	r3,168(sp)
 8003900:	90c0210c 	andi	r3,r18,132
 8003904:	d8c03015 	stw	r3,192(sp)
 8003908:	1801a31e 	bne	r3,zero,8003f98 <___vfprintf_internal_r+0xe00>
 800390c:	d9003117 	ldw	r4,196(sp)
 8003910:	d8c02a17 	ldw	r3,168(sp)
 8003914:	20e7c83a 	sub	r19,r4,r3
 8003918:	04c19f0e 	bge	zero,r19,8003f98 <___vfprintf_internal_r+0xe00>
 800391c:	02400404 	movi	r9,16
 8003920:	d8c02017 	ldw	r3,128(sp)
 8003924:	d8801f17 	ldw	r2,124(sp)
 8003928:	4cc50d0e 	bge	r9,r19,8004d60 <___vfprintf_internal_r+0x1bc8>
 800392c:	01420074 	movhi	r5,2049
 8003930:	29479084 	addi	r5,r5,7746
 8003934:	dc403b15 	stw	r17,236(sp)
 8003938:	d9403515 	stw	r5,212(sp)
 800393c:	9823883a 	mov	r17,r19
 8003940:	482d883a 	mov	r22,r9
 8003944:	9027883a 	mov	r19,r18
 8003948:	070001c4 	movi	fp,7
 800394c:	8025883a 	mov	r18,r16
 8003950:	dc002c17 	ldw	r16,176(sp)
 8003954:	00000306 	br	8003964 <___vfprintf_internal_r+0x7cc>
 8003958:	8c7ffc04 	addi	r17,r17,-16
 800395c:	42000204 	addi	r8,r8,8
 8003960:	b440130e 	bge	r22,r17,80039b0 <___vfprintf_internal_r+0x818>
 8003964:	01020074 	movhi	r4,2049
 8003968:	18c00404 	addi	r3,r3,16
 800396c:	10800044 	addi	r2,r2,1
 8003970:	21079084 	addi	r4,r4,7746
 8003974:	41000015 	stw	r4,0(r8)
 8003978:	45800115 	stw	r22,4(r8)
 800397c:	d8c02015 	stw	r3,128(sp)
 8003980:	d8801f15 	stw	r2,124(sp)
 8003984:	e0bff40e 	bge	fp,r2,8003958 <__alt_data_end+0xff003958>
 8003988:	d9801e04 	addi	r6,sp,120
 800398c:	b80b883a 	mov	r5,r23
 8003990:	8009883a 	mov	r4,r16
 8003994:	8009e180 	call	8009e18 <__sprint_r>
 8003998:	103f011e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 800399c:	8c7ffc04 	addi	r17,r17,-16
 80039a0:	d8c02017 	ldw	r3,128(sp)
 80039a4:	d8801f17 	ldw	r2,124(sp)
 80039a8:	da000404 	addi	r8,sp,16
 80039ac:	b47fed16 	blt	r22,r17,8003964 <__alt_data_end+0xff003964>
 80039b0:	9021883a 	mov	r16,r18
 80039b4:	9825883a 	mov	r18,r19
 80039b8:	8827883a 	mov	r19,r17
 80039bc:	dc403b17 	ldw	r17,236(sp)
 80039c0:	d9403517 	ldw	r5,212(sp)
 80039c4:	98c7883a 	add	r3,r19,r3
 80039c8:	10800044 	addi	r2,r2,1
 80039cc:	41400015 	stw	r5,0(r8)
 80039d0:	44c00115 	stw	r19,4(r8)
 80039d4:	d8c02015 	stw	r3,128(sp)
 80039d8:	d8801f15 	stw	r2,124(sp)
 80039dc:	010001c4 	movi	r4,7
 80039e0:	2082a316 	blt	r4,r2,8004470 <___vfprintf_internal_r+0x12d8>
 80039e4:	df002787 	ldb	fp,158(sp)
 80039e8:	42000204 	addi	r8,r8,8
 80039ec:	e0000c26 	beq	fp,zero,8003a20 <___vfprintf_internal_r+0x888>
 80039f0:	d8801f17 	ldw	r2,124(sp)
 80039f4:	d9002784 	addi	r4,sp,158
 80039f8:	18c00044 	addi	r3,r3,1
 80039fc:	10800044 	addi	r2,r2,1
 8003a00:	41000015 	stw	r4,0(r8)
 8003a04:	01000044 	movi	r4,1
 8003a08:	41000115 	stw	r4,4(r8)
 8003a0c:	d8c02015 	stw	r3,128(sp)
 8003a10:	d8801f15 	stw	r2,124(sp)
 8003a14:	010001c4 	movi	r4,7
 8003a18:	20823c16 	blt	r4,r2,800430c <___vfprintf_internal_r+0x1174>
 8003a1c:	42000204 	addi	r8,r8,8
 8003a20:	d8802b17 	ldw	r2,172(sp)
 8003a24:	10000c26 	beq	r2,zero,8003a58 <___vfprintf_internal_r+0x8c0>
 8003a28:	d8801f17 	ldw	r2,124(sp)
 8003a2c:	d9002704 	addi	r4,sp,156
 8003a30:	18c00084 	addi	r3,r3,2
 8003a34:	10800044 	addi	r2,r2,1
 8003a38:	41000015 	stw	r4,0(r8)
 8003a3c:	01000084 	movi	r4,2
 8003a40:	41000115 	stw	r4,4(r8)
 8003a44:	d8c02015 	stw	r3,128(sp)
 8003a48:	d8801f15 	stw	r2,124(sp)
 8003a4c:	010001c4 	movi	r4,7
 8003a50:	20823616 	blt	r4,r2,800432c <___vfprintf_internal_r+0x1194>
 8003a54:	42000204 	addi	r8,r8,8
 8003a58:	d9003017 	ldw	r4,192(sp)
 8003a5c:	00802004 	movi	r2,128
 8003a60:	20819926 	beq	r4,r2,80040c8 <___vfprintf_internal_r+0xf30>
 8003a64:	d9402917 	ldw	r5,164(sp)
 8003a68:	d8802e17 	ldw	r2,184(sp)
 8003a6c:	28adc83a 	sub	r22,r5,r2
 8003a70:	0580310e 	bge	zero,r22,8003b38 <___vfprintf_internal_r+0x9a0>
 8003a74:	07000404 	movi	fp,16
 8003a78:	d8801f17 	ldw	r2,124(sp)
 8003a7c:	e584140e 	bge	fp,r22,8004ad0 <___vfprintf_internal_r+0x1938>
 8003a80:	01420074 	movhi	r5,2049
 8003a84:	29478c84 	addi	r5,r5,7730
 8003a88:	dc402915 	stw	r17,164(sp)
 8003a8c:	d9402b15 	stw	r5,172(sp)
 8003a90:	b023883a 	mov	r17,r22
 8003a94:	04c001c4 	movi	r19,7
 8003a98:	a82d883a 	mov	r22,r21
 8003a9c:	902b883a 	mov	r21,r18
 8003aa0:	8025883a 	mov	r18,r16
 8003aa4:	dc002c17 	ldw	r16,176(sp)
 8003aa8:	00000306 	br	8003ab8 <___vfprintf_internal_r+0x920>
 8003aac:	8c7ffc04 	addi	r17,r17,-16
 8003ab0:	42000204 	addi	r8,r8,8
 8003ab4:	e440110e 	bge	fp,r17,8003afc <___vfprintf_internal_r+0x964>
 8003ab8:	18c00404 	addi	r3,r3,16
 8003abc:	10800044 	addi	r2,r2,1
 8003ac0:	45000015 	stw	r20,0(r8)
 8003ac4:	47000115 	stw	fp,4(r8)
 8003ac8:	d8c02015 	stw	r3,128(sp)
 8003acc:	d8801f15 	stw	r2,124(sp)
 8003ad0:	98bff60e 	bge	r19,r2,8003aac <__alt_data_end+0xff003aac>
 8003ad4:	d9801e04 	addi	r6,sp,120
 8003ad8:	b80b883a 	mov	r5,r23
 8003adc:	8009883a 	mov	r4,r16
 8003ae0:	8009e180 	call	8009e18 <__sprint_r>
 8003ae4:	103eae1e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8003ae8:	8c7ffc04 	addi	r17,r17,-16
 8003aec:	d8c02017 	ldw	r3,128(sp)
 8003af0:	d8801f17 	ldw	r2,124(sp)
 8003af4:	da000404 	addi	r8,sp,16
 8003af8:	e47fef16 	blt	fp,r17,8003ab8 <__alt_data_end+0xff003ab8>
 8003afc:	9021883a 	mov	r16,r18
 8003b00:	a825883a 	mov	r18,r21
 8003b04:	b02b883a 	mov	r21,r22
 8003b08:	882d883a 	mov	r22,r17
 8003b0c:	dc402917 	ldw	r17,164(sp)
 8003b10:	d9002b17 	ldw	r4,172(sp)
 8003b14:	1d87883a 	add	r3,r3,r22
 8003b18:	10800044 	addi	r2,r2,1
 8003b1c:	41000015 	stw	r4,0(r8)
 8003b20:	45800115 	stw	r22,4(r8)
 8003b24:	d8c02015 	stw	r3,128(sp)
 8003b28:	d8801f15 	stw	r2,124(sp)
 8003b2c:	010001c4 	movi	r4,7
 8003b30:	2081ee16 	blt	r4,r2,80042ec <___vfprintf_internal_r+0x1154>
 8003b34:	42000204 	addi	r8,r8,8
 8003b38:	9080400c 	andi	r2,r18,256
 8003b3c:	1001181e 	bne	r2,zero,8003fa0 <___vfprintf_internal_r+0xe08>
 8003b40:	d9402e17 	ldw	r5,184(sp)
 8003b44:	d8801f17 	ldw	r2,124(sp)
 8003b48:	44000015 	stw	r16,0(r8)
 8003b4c:	1947883a 	add	r3,r3,r5
 8003b50:	10800044 	addi	r2,r2,1
 8003b54:	41400115 	stw	r5,4(r8)
 8003b58:	d8c02015 	stw	r3,128(sp)
 8003b5c:	d8801f15 	stw	r2,124(sp)
 8003b60:	010001c4 	movi	r4,7
 8003b64:	2081d316 	blt	r4,r2,80042b4 <___vfprintf_internal_r+0x111c>
 8003b68:	42000204 	addi	r8,r8,8
 8003b6c:	9480010c 	andi	r18,r18,4
 8003b70:	90003226 	beq	r18,zero,8003c3c <___vfprintf_internal_r+0xaa4>
 8003b74:	d9403117 	ldw	r5,196(sp)
 8003b78:	d8802a17 	ldw	r2,168(sp)
 8003b7c:	28a1c83a 	sub	r16,r5,r2
 8003b80:	04002e0e 	bge	zero,r16,8003c3c <___vfprintf_internal_r+0xaa4>
 8003b84:	04400404 	movi	r17,16
 8003b88:	d8801f17 	ldw	r2,124(sp)
 8003b8c:	8c04a20e 	bge	r17,r16,8004e18 <___vfprintf_internal_r+0x1c80>
 8003b90:	01420074 	movhi	r5,2049
 8003b94:	29479084 	addi	r5,r5,7746
 8003b98:	d9403515 	stw	r5,212(sp)
 8003b9c:	048001c4 	movi	r18,7
 8003ba0:	dcc02c17 	ldw	r19,176(sp)
 8003ba4:	00000306 	br	8003bb4 <___vfprintf_internal_r+0xa1c>
 8003ba8:	843ffc04 	addi	r16,r16,-16
 8003bac:	42000204 	addi	r8,r8,8
 8003bb0:	8c00130e 	bge	r17,r16,8003c00 <___vfprintf_internal_r+0xa68>
 8003bb4:	01020074 	movhi	r4,2049
 8003bb8:	18c00404 	addi	r3,r3,16
 8003bbc:	10800044 	addi	r2,r2,1
 8003bc0:	21079084 	addi	r4,r4,7746
 8003bc4:	41000015 	stw	r4,0(r8)
 8003bc8:	44400115 	stw	r17,4(r8)
 8003bcc:	d8c02015 	stw	r3,128(sp)
 8003bd0:	d8801f15 	stw	r2,124(sp)
 8003bd4:	90bff40e 	bge	r18,r2,8003ba8 <__alt_data_end+0xff003ba8>
 8003bd8:	d9801e04 	addi	r6,sp,120
 8003bdc:	b80b883a 	mov	r5,r23
 8003be0:	9809883a 	mov	r4,r19
 8003be4:	8009e180 	call	8009e18 <__sprint_r>
 8003be8:	103e6d1e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8003bec:	843ffc04 	addi	r16,r16,-16
 8003bf0:	d8c02017 	ldw	r3,128(sp)
 8003bf4:	d8801f17 	ldw	r2,124(sp)
 8003bf8:	da000404 	addi	r8,sp,16
 8003bfc:	8c3fed16 	blt	r17,r16,8003bb4 <__alt_data_end+0xff003bb4>
 8003c00:	d9403517 	ldw	r5,212(sp)
 8003c04:	1c07883a 	add	r3,r3,r16
 8003c08:	10800044 	addi	r2,r2,1
 8003c0c:	41400015 	stw	r5,0(r8)
 8003c10:	44000115 	stw	r16,4(r8)
 8003c14:	d8c02015 	stw	r3,128(sp)
 8003c18:	d8801f15 	stw	r2,124(sp)
 8003c1c:	010001c4 	movi	r4,7
 8003c20:	2080060e 	bge	r4,r2,8003c3c <___vfprintf_internal_r+0xaa4>
 8003c24:	d9002c17 	ldw	r4,176(sp)
 8003c28:	d9801e04 	addi	r6,sp,120
 8003c2c:	b80b883a 	mov	r5,r23
 8003c30:	8009e180 	call	8009e18 <__sprint_r>
 8003c34:	103e5a1e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8003c38:	d8c02017 	ldw	r3,128(sp)
 8003c3c:	d8803117 	ldw	r2,196(sp)
 8003c40:	d9002a17 	ldw	r4,168(sp)
 8003c44:	1100010e 	bge	r2,r4,8003c4c <___vfprintf_internal_r+0xab4>
 8003c48:	2005883a 	mov	r2,r4
 8003c4c:	d9402f17 	ldw	r5,188(sp)
 8003c50:	288b883a 	add	r5,r5,r2
 8003c54:	d9402f15 	stw	r5,188(sp)
 8003c58:	18019e1e 	bne	r3,zero,80042d4 <___vfprintf_internal_r+0x113c>
 8003c5c:	a8800007 	ldb	r2,0(r21)
 8003c60:	d8001f15 	stw	zero,124(sp)
 8003c64:	da000404 	addi	r8,sp,16
 8003c68:	103d851e 	bne	r2,zero,8003280 <__alt_data_end+0xff003280>
 8003c6c:	a821883a 	mov	r16,r21
 8003c70:	003d9b06 	br	80032e0 <__alt_data_end+0xff0032e0>
 8003c74:	18c03fcc 	andi	r3,r3,255
 8003c78:	1805c11e 	bne	r3,zero,8005380 <___vfprintf_internal_r+0x21e8>
 8003c7c:	94800414 	ori	r18,r18,16
 8003c80:	9080080c 	andi	r2,r18,32
 8003c84:	10020c26 	beq	r2,zero,80044b8 <___vfprintf_internal_r+0x1320>
 8003c88:	d8802d17 	ldw	r2,180(sp)
 8003c8c:	d9002917 	ldw	r4,164(sp)
 8003c90:	d8002785 	stb	zero,158(sp)
 8003c94:	10c00204 	addi	r3,r2,8
 8003c98:	14c00017 	ldw	r19,0(r2)
 8003c9c:	15800117 	ldw	r22,4(r2)
 8003ca0:	20040f16 	blt	r4,zero,8004ce0 <___vfprintf_internal_r+0x1b48>
 8003ca4:	013fdfc4 	movi	r4,-129
 8003ca8:	9d84b03a 	or	r2,r19,r22
 8003cac:	d8c02d15 	stw	r3,180(sp)
 8003cb0:	9124703a 	and	r18,r18,r4
 8003cb4:	0039883a 	mov	fp,zero
 8003cb8:	103e891e 	bne	r2,zero,80036e0 <__alt_data_end+0xff0036e0>
 8003cbc:	d9002917 	ldw	r4,164(sp)
 8003cc0:	2002c11e 	bne	r4,zero,80047c8 <___vfprintf_internal_r+0x1630>
 8003cc4:	d8002915 	stw	zero,164(sp)
 8003cc8:	d8002e15 	stw	zero,184(sp)
 8003ccc:	dc001e04 	addi	r16,sp,120
 8003cd0:	003ef806 	br	80038b4 <__alt_data_end+0xff0038b4>
 8003cd4:	18c03fcc 	andi	r3,r3,255
 8003cd8:	18059d1e 	bne	r3,zero,8005350 <___vfprintf_internal_r+0x21b8>
 8003cdc:	01420074 	movhi	r5,2049
 8003ce0:	29478004 	addi	r5,r5,7680
 8003ce4:	d9403915 	stw	r5,228(sp)
 8003ce8:	9080080c 	andi	r2,r18,32
 8003cec:	10005226 	beq	r2,zero,8003e38 <___vfprintf_internal_r+0xca0>
 8003cf0:	d8802d17 	ldw	r2,180(sp)
 8003cf4:	14c00017 	ldw	r19,0(r2)
 8003cf8:	15800117 	ldw	r22,4(r2)
 8003cfc:	10800204 	addi	r2,r2,8
 8003d00:	d8802d15 	stw	r2,180(sp)
 8003d04:	9080004c 	andi	r2,r18,1
 8003d08:	10019026 	beq	r2,zero,800434c <___vfprintf_internal_r+0x11b4>
 8003d0c:	9d84b03a 	or	r2,r19,r22
 8003d10:	10036926 	beq	r2,zero,8004ab8 <___vfprintf_internal_r+0x1920>
 8003d14:	d8c02917 	ldw	r3,164(sp)
 8003d18:	00800c04 	movi	r2,48
 8003d1c:	d8802705 	stb	r2,156(sp)
 8003d20:	dc402745 	stb	r17,157(sp)
 8003d24:	d8002785 	stb	zero,158(sp)
 8003d28:	90800094 	ori	r2,r18,2
 8003d2c:	18045d16 	blt	r3,zero,8004ea4 <___vfprintf_internal_r+0x1d0c>
 8003d30:	00bfdfc4 	movi	r2,-129
 8003d34:	90a4703a 	and	r18,r18,r2
 8003d38:	94800094 	ori	r18,r18,2
 8003d3c:	0039883a 	mov	fp,zero
 8003d40:	d9003917 	ldw	r4,228(sp)
 8003d44:	dc001e04 	addi	r16,sp,120
 8003d48:	988003cc 	andi	r2,r19,15
 8003d4c:	b006973a 	slli	r3,r22,28
 8003d50:	2085883a 	add	r2,r4,r2
 8003d54:	9826d13a 	srli	r19,r19,4
 8003d58:	10800003 	ldbu	r2,0(r2)
 8003d5c:	b02cd13a 	srli	r22,r22,4
 8003d60:	843fffc4 	addi	r16,r16,-1
 8003d64:	1ce6b03a 	or	r19,r3,r19
 8003d68:	80800005 	stb	r2,0(r16)
 8003d6c:	9d84b03a 	or	r2,r19,r22
 8003d70:	103ff51e 	bne	r2,zero,8003d48 <__alt_data_end+0xff003d48>
 8003d74:	d8c02817 	ldw	r3,160(sp)
 8003d78:	1c07c83a 	sub	r3,r3,r16
 8003d7c:	d8c02e15 	stw	r3,184(sp)
 8003d80:	003ecc06 	br	80038b4 <__alt_data_end+0xff0038b4>
 8003d84:	18c03fcc 	andi	r3,r3,255
 8003d88:	183e9f26 	beq	r3,zero,8003808 <__alt_data_end+0xff003808>
 8003d8c:	d9c02785 	stb	r7,158(sp)
 8003d90:	003e9d06 	br	8003808 <__alt_data_end+0xff003808>
 8003d94:	00c00044 	movi	r3,1
 8003d98:	01c00ac4 	movi	r7,43
 8003d9c:	ac400007 	ldb	r17,0(r21)
 8003da0:	003d5e06 	br	800331c <__alt_data_end+0xff00331c>
 8003da4:	94800814 	ori	r18,r18,32
 8003da8:	ac400007 	ldb	r17,0(r21)
 8003dac:	003d5b06 	br	800331c <__alt_data_end+0xff00331c>
 8003db0:	d8c02d17 	ldw	r3,180(sp)
 8003db4:	d8002785 	stb	zero,158(sp)
 8003db8:	1c000017 	ldw	r16,0(r3)
 8003dbc:	1cc00104 	addi	r19,r3,4
 8003dc0:	80041926 	beq	r16,zero,8004e28 <___vfprintf_internal_r+0x1c90>
 8003dc4:	d9002917 	ldw	r4,164(sp)
 8003dc8:	2003d016 	blt	r4,zero,8004d0c <___vfprintf_internal_r+0x1b74>
 8003dcc:	200d883a 	mov	r6,r4
 8003dd0:	000b883a 	mov	r5,zero
 8003dd4:	8009883a 	mov	r4,r16
 8003dd8:	da003d15 	stw	r8,244(sp)
 8003ddc:	80084ec0 	call	80084ec <memchr>
 8003de0:	da003d17 	ldw	r8,244(sp)
 8003de4:	10045426 	beq	r2,zero,8004f38 <___vfprintf_internal_r+0x1da0>
 8003de8:	1405c83a 	sub	r2,r2,r16
 8003dec:	d8802e15 	stw	r2,184(sp)
 8003df0:	1003cc16 	blt	r2,zero,8004d24 <___vfprintf_internal_r+0x1b8c>
 8003df4:	df002783 	ldbu	fp,158(sp)
 8003df8:	d8802a15 	stw	r2,168(sp)
 8003dfc:	dcc02d15 	stw	r19,180(sp)
 8003e00:	d8002915 	stw	zero,164(sp)
 8003e04:	d8003215 	stw	zero,200(sp)
 8003e08:	003eb006 	br	80038cc <__alt_data_end+0xff0038cc>
 8003e0c:	18c03fcc 	andi	r3,r3,255
 8003e10:	183f9b26 	beq	r3,zero,8003c80 <__alt_data_end+0xff003c80>
 8003e14:	d9c02785 	stb	r7,158(sp)
 8003e18:	003f9906 	br	8003c80 <__alt_data_end+0xff003c80>
 8003e1c:	18c03fcc 	andi	r3,r3,255
 8003e20:	1805551e 	bne	r3,zero,8005378 <___vfprintf_internal_r+0x21e0>
 8003e24:	01420074 	movhi	r5,2049
 8003e28:	29478504 	addi	r5,r5,7700
 8003e2c:	d9403915 	stw	r5,228(sp)
 8003e30:	9080080c 	andi	r2,r18,32
 8003e34:	103fae1e 	bne	r2,zero,8003cf0 <__alt_data_end+0xff003cf0>
 8003e38:	9080040c 	andi	r2,r18,16
 8003e3c:	1002de26 	beq	r2,zero,80049b8 <___vfprintf_internal_r+0x1820>
 8003e40:	d8c02d17 	ldw	r3,180(sp)
 8003e44:	002d883a 	mov	r22,zero
 8003e48:	1cc00017 	ldw	r19,0(r3)
 8003e4c:	18c00104 	addi	r3,r3,4
 8003e50:	d8c02d15 	stw	r3,180(sp)
 8003e54:	003fab06 	br	8003d04 <__alt_data_end+0xff003d04>
 8003e58:	38803fcc 	andi	r2,r7,255
 8003e5c:	1080201c 	xori	r2,r2,128
 8003e60:	10bfe004 	addi	r2,r2,-128
 8003e64:	1002d21e 	bne	r2,zero,80049b0 <___vfprintf_internal_r+0x1818>
 8003e68:	00c00044 	movi	r3,1
 8003e6c:	01c00804 	movi	r7,32
 8003e70:	ac400007 	ldb	r17,0(r21)
 8003e74:	003d2906 	br	800331c <__alt_data_end+0xff00331c>
 8003e78:	94800054 	ori	r18,r18,1
 8003e7c:	ac400007 	ldb	r17,0(r21)
 8003e80:	003d2606 	br	800331c <__alt_data_end+0xff00331c>
 8003e84:	18c03fcc 	andi	r3,r3,255
 8003e88:	183e0526 	beq	r3,zero,80036a0 <__alt_data_end+0xff0036a0>
 8003e8c:	d9c02785 	stb	r7,158(sp)
 8003e90:	003e0306 	br	80036a0 <__alt_data_end+0xff0036a0>
 8003e94:	94801014 	ori	r18,r18,64
 8003e98:	ac400007 	ldb	r17,0(r21)
 8003e9c:	003d1f06 	br	800331c <__alt_data_end+0xff00331c>
 8003ea0:	ac400007 	ldb	r17,0(r21)
 8003ea4:	8a438726 	beq	r17,r9,8004cc4 <___vfprintf_internal_r+0x1b2c>
 8003ea8:	94800414 	ori	r18,r18,16
 8003eac:	003d1b06 	br	800331c <__alt_data_end+0xff00331c>
 8003eb0:	18c03fcc 	andi	r3,r3,255
 8003eb4:	1805341e 	bne	r3,zero,8005388 <___vfprintf_internal_r+0x21f0>
 8003eb8:	9080080c 	andi	r2,r18,32
 8003ebc:	1002cd26 	beq	r2,zero,80049f4 <___vfprintf_internal_r+0x185c>
 8003ec0:	d9402d17 	ldw	r5,180(sp)
 8003ec4:	d9002f17 	ldw	r4,188(sp)
 8003ec8:	28800017 	ldw	r2,0(r5)
 8003ecc:	2007d7fa 	srai	r3,r4,31
 8003ed0:	29400104 	addi	r5,r5,4
 8003ed4:	d9402d15 	stw	r5,180(sp)
 8003ed8:	11000015 	stw	r4,0(r2)
 8003edc:	10c00115 	stw	r3,4(r2)
 8003ee0:	003ce506 	br	8003278 <__alt_data_end+0xff003278>
 8003ee4:	d8c02d17 	ldw	r3,180(sp)
 8003ee8:	d9002d17 	ldw	r4,180(sp)
 8003eec:	d8002785 	stb	zero,158(sp)
 8003ef0:	18800017 	ldw	r2,0(r3)
 8003ef4:	21000104 	addi	r4,r4,4
 8003ef8:	00c00044 	movi	r3,1
 8003efc:	d8c02a15 	stw	r3,168(sp)
 8003f00:	d8801405 	stb	r2,80(sp)
 8003f04:	d9002d15 	stw	r4,180(sp)
 8003f08:	d8c02e15 	stw	r3,184(sp)
 8003f0c:	d8002915 	stw	zero,164(sp)
 8003f10:	d8003215 	stw	zero,200(sp)
 8003f14:	dc001404 	addi	r16,sp,80
 8003f18:	0039883a 	mov	fp,zero
 8003f1c:	003e7206 	br	80038e8 <__alt_data_end+0xff0038e8>
 8003f20:	01020074 	movhi	r4,2049
 8003f24:	21078504 	addi	r4,r4,7700
 8003f28:	0039883a 	mov	fp,zero
 8003f2c:	d9003915 	stw	r4,228(sp)
 8003f30:	04401e04 	movi	r17,120
 8003f34:	003f8206 	br	8003d40 <__alt_data_end+0xff003d40>
 8003f38:	18c03fcc 	andi	r3,r3,255
 8003f3c:	1805061e 	bne	r3,zero,8005358 <___vfprintf_internal_r+0x21c0>
 8003f40:	883d9126 	beq	r17,zero,8003588 <__alt_data_end+0xff003588>
 8003f44:	00c00044 	movi	r3,1
 8003f48:	d8c02a15 	stw	r3,168(sp)
 8003f4c:	dc401405 	stb	r17,80(sp)
 8003f50:	d8002785 	stb	zero,158(sp)
 8003f54:	003fec06 	br	8003f08 <__alt_data_end+0xff003f08>
 8003f58:	01420074 	movhi	r5,2049
 8003f5c:	29478504 	addi	r5,r5,7700
 8003f60:	d9403915 	stw	r5,228(sp)
 8003f64:	d8c02d15 	stw	r3,180(sp)
 8003f68:	1025883a 	mov	r18,r2
 8003f6c:	04401e04 	movi	r17,120
 8003f70:	9d84b03a 	or	r2,r19,r22
 8003f74:	1000fc1e 	bne	r2,zero,8004368 <___vfprintf_internal_r+0x11d0>
 8003f78:	0039883a 	mov	fp,zero
 8003f7c:	00800084 	movi	r2,2
 8003f80:	10803fcc 	andi	r2,r2,255
 8003f84:	00c00044 	movi	r3,1
 8003f88:	10c20f26 	beq	r2,r3,80047c8 <___vfprintf_internal_r+0x1630>
 8003f8c:	00c00084 	movi	r3,2
 8003f90:	10fd6326 	beq	r2,r3,8003520 <__alt_data_end+0xff003520>
 8003f94:	003e2d06 	br	800384c <__alt_data_end+0xff00384c>
 8003f98:	d8c02017 	ldw	r3,128(sp)
 8003f9c:	003e9306 	br	80039ec <__alt_data_end+0xff0039ec>
 8003fa0:	00801944 	movi	r2,101
 8003fa4:	14407e0e 	bge	r2,r17,80041a0 <___vfprintf_internal_r+0x1008>
 8003fa8:	d9003617 	ldw	r4,216(sp)
 8003fac:	d9403817 	ldw	r5,224(sp)
 8003fb0:	000d883a 	mov	r6,zero
 8003fb4:	000f883a 	mov	r7,zero
 8003fb8:	d8c03c15 	stw	r3,240(sp)
 8003fbc:	da003d15 	stw	r8,244(sp)
 8003fc0:	800e4580 	call	800e458 <__eqdf2>
 8003fc4:	d8c03c17 	ldw	r3,240(sp)
 8003fc8:	da003d17 	ldw	r8,244(sp)
 8003fcc:	1000f71e 	bne	r2,zero,80043ac <___vfprintf_internal_r+0x1214>
 8003fd0:	d8801f17 	ldw	r2,124(sp)
 8003fd4:	01020074 	movhi	r4,2049
 8003fd8:	21078c04 	addi	r4,r4,7728
 8003fdc:	18c00044 	addi	r3,r3,1
 8003fe0:	10800044 	addi	r2,r2,1
 8003fe4:	41000015 	stw	r4,0(r8)
 8003fe8:	01000044 	movi	r4,1
 8003fec:	41000115 	stw	r4,4(r8)
 8003ff0:	d8c02015 	stw	r3,128(sp)
 8003ff4:	d8801f15 	stw	r2,124(sp)
 8003ff8:	010001c4 	movi	r4,7
 8003ffc:	2082b816 	blt	r4,r2,8004ae0 <___vfprintf_internal_r+0x1948>
 8004000:	42000204 	addi	r8,r8,8
 8004004:	d8802617 	ldw	r2,152(sp)
 8004008:	d9403317 	ldw	r5,204(sp)
 800400c:	11400216 	blt	r2,r5,8004018 <___vfprintf_internal_r+0xe80>
 8004010:	9080004c 	andi	r2,r18,1
 8004014:	103ed526 	beq	r2,zero,8003b6c <__alt_data_end+0xff003b6c>
 8004018:	d8803717 	ldw	r2,220(sp)
 800401c:	d9003417 	ldw	r4,208(sp)
 8004020:	d9403717 	ldw	r5,220(sp)
 8004024:	1887883a 	add	r3,r3,r2
 8004028:	d8801f17 	ldw	r2,124(sp)
 800402c:	41000015 	stw	r4,0(r8)
 8004030:	41400115 	stw	r5,4(r8)
 8004034:	10800044 	addi	r2,r2,1
 8004038:	d8c02015 	stw	r3,128(sp)
 800403c:	d8801f15 	stw	r2,124(sp)
 8004040:	010001c4 	movi	r4,7
 8004044:	20832916 	blt	r4,r2,8004cec <___vfprintf_internal_r+0x1b54>
 8004048:	42000204 	addi	r8,r8,8
 800404c:	d8803317 	ldw	r2,204(sp)
 8004050:	143fffc4 	addi	r16,r2,-1
 8004054:	043ec50e 	bge	zero,r16,8003b6c <__alt_data_end+0xff003b6c>
 8004058:	04400404 	movi	r17,16
 800405c:	d8801f17 	ldw	r2,124(sp)
 8004060:	8c00880e 	bge	r17,r16,8004284 <___vfprintf_internal_r+0x10ec>
 8004064:	01420074 	movhi	r5,2049
 8004068:	29478c84 	addi	r5,r5,7730
 800406c:	d9402b15 	stw	r5,172(sp)
 8004070:	058001c4 	movi	r22,7
 8004074:	dcc02c17 	ldw	r19,176(sp)
 8004078:	00000306 	br	8004088 <___vfprintf_internal_r+0xef0>
 800407c:	42000204 	addi	r8,r8,8
 8004080:	843ffc04 	addi	r16,r16,-16
 8004084:	8c00820e 	bge	r17,r16,8004290 <___vfprintf_internal_r+0x10f8>
 8004088:	18c00404 	addi	r3,r3,16
 800408c:	10800044 	addi	r2,r2,1
 8004090:	45000015 	stw	r20,0(r8)
 8004094:	44400115 	stw	r17,4(r8)
 8004098:	d8c02015 	stw	r3,128(sp)
 800409c:	d8801f15 	stw	r2,124(sp)
 80040a0:	b0bff60e 	bge	r22,r2,800407c <__alt_data_end+0xff00407c>
 80040a4:	d9801e04 	addi	r6,sp,120
 80040a8:	b80b883a 	mov	r5,r23
 80040ac:	9809883a 	mov	r4,r19
 80040b0:	8009e180 	call	8009e18 <__sprint_r>
 80040b4:	103d3a1e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 80040b8:	d8c02017 	ldw	r3,128(sp)
 80040bc:	d8801f17 	ldw	r2,124(sp)
 80040c0:	da000404 	addi	r8,sp,16
 80040c4:	003fee06 	br	8004080 <__alt_data_end+0xff004080>
 80040c8:	d9403117 	ldw	r5,196(sp)
 80040cc:	d8802a17 	ldw	r2,168(sp)
 80040d0:	28adc83a 	sub	r22,r5,r2
 80040d4:	05be630e 	bge	zero,r22,8003a64 <__alt_data_end+0xff003a64>
 80040d8:	07000404 	movi	fp,16
 80040dc:	d8801f17 	ldw	r2,124(sp)
 80040e0:	e5838f0e 	bge	fp,r22,8004f20 <___vfprintf_internal_r+0x1d88>
 80040e4:	01420074 	movhi	r5,2049
 80040e8:	29478c84 	addi	r5,r5,7730
 80040ec:	dc403015 	stw	r17,192(sp)
 80040f0:	d9402b15 	stw	r5,172(sp)
 80040f4:	b023883a 	mov	r17,r22
 80040f8:	04c001c4 	movi	r19,7
 80040fc:	a82d883a 	mov	r22,r21
 8004100:	902b883a 	mov	r21,r18
 8004104:	8025883a 	mov	r18,r16
 8004108:	dc002c17 	ldw	r16,176(sp)
 800410c:	00000306 	br	800411c <___vfprintf_internal_r+0xf84>
 8004110:	8c7ffc04 	addi	r17,r17,-16
 8004114:	42000204 	addi	r8,r8,8
 8004118:	e440110e 	bge	fp,r17,8004160 <___vfprintf_internal_r+0xfc8>
 800411c:	18c00404 	addi	r3,r3,16
 8004120:	10800044 	addi	r2,r2,1
 8004124:	45000015 	stw	r20,0(r8)
 8004128:	47000115 	stw	fp,4(r8)
 800412c:	d8c02015 	stw	r3,128(sp)
 8004130:	d8801f15 	stw	r2,124(sp)
 8004134:	98bff60e 	bge	r19,r2,8004110 <__alt_data_end+0xff004110>
 8004138:	d9801e04 	addi	r6,sp,120
 800413c:	b80b883a 	mov	r5,r23
 8004140:	8009883a 	mov	r4,r16
 8004144:	8009e180 	call	8009e18 <__sprint_r>
 8004148:	103d151e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 800414c:	8c7ffc04 	addi	r17,r17,-16
 8004150:	d8c02017 	ldw	r3,128(sp)
 8004154:	d8801f17 	ldw	r2,124(sp)
 8004158:	da000404 	addi	r8,sp,16
 800415c:	e47fef16 	blt	fp,r17,800411c <__alt_data_end+0xff00411c>
 8004160:	9021883a 	mov	r16,r18
 8004164:	a825883a 	mov	r18,r21
 8004168:	b02b883a 	mov	r21,r22
 800416c:	882d883a 	mov	r22,r17
 8004170:	dc403017 	ldw	r17,192(sp)
 8004174:	d9002b17 	ldw	r4,172(sp)
 8004178:	1d87883a 	add	r3,r3,r22
 800417c:	10800044 	addi	r2,r2,1
 8004180:	41000015 	stw	r4,0(r8)
 8004184:	45800115 	stw	r22,4(r8)
 8004188:	d8c02015 	stw	r3,128(sp)
 800418c:	d8801f15 	stw	r2,124(sp)
 8004190:	010001c4 	movi	r4,7
 8004194:	20818e16 	blt	r4,r2,80047d0 <___vfprintf_internal_r+0x1638>
 8004198:	42000204 	addi	r8,r8,8
 800419c:	003e3106 	br	8003a64 <__alt_data_end+0xff003a64>
 80041a0:	d9403317 	ldw	r5,204(sp)
 80041a4:	00800044 	movi	r2,1
 80041a8:	18c00044 	addi	r3,r3,1
 80041ac:	1141530e 	bge	r2,r5,80046fc <___vfprintf_internal_r+0x1564>
 80041b0:	dc401f17 	ldw	r17,124(sp)
 80041b4:	00800044 	movi	r2,1
 80041b8:	40800115 	stw	r2,4(r8)
 80041bc:	8c400044 	addi	r17,r17,1
 80041c0:	44000015 	stw	r16,0(r8)
 80041c4:	d8c02015 	stw	r3,128(sp)
 80041c8:	dc401f15 	stw	r17,124(sp)
 80041cc:	008001c4 	movi	r2,7
 80041d0:	14416b16 	blt	r2,r17,8004780 <___vfprintf_internal_r+0x15e8>
 80041d4:	42000204 	addi	r8,r8,8
 80041d8:	d8803717 	ldw	r2,220(sp)
 80041dc:	d9003417 	ldw	r4,208(sp)
 80041e0:	8c400044 	addi	r17,r17,1
 80041e4:	10c7883a 	add	r3,r2,r3
 80041e8:	40800115 	stw	r2,4(r8)
 80041ec:	41000015 	stw	r4,0(r8)
 80041f0:	d8c02015 	stw	r3,128(sp)
 80041f4:	dc401f15 	stw	r17,124(sp)
 80041f8:	008001c4 	movi	r2,7
 80041fc:	14416916 	blt	r2,r17,80047a4 <___vfprintf_internal_r+0x160c>
 8004200:	45800204 	addi	r22,r8,8
 8004204:	d9003617 	ldw	r4,216(sp)
 8004208:	d9403817 	ldw	r5,224(sp)
 800420c:	000d883a 	mov	r6,zero
 8004210:	000f883a 	mov	r7,zero
 8004214:	d8c03c15 	stw	r3,240(sp)
 8004218:	800e4580 	call	800e458 <__eqdf2>
 800421c:	d8c03c17 	ldw	r3,240(sp)
 8004220:	1000bc26 	beq	r2,zero,8004514 <___vfprintf_internal_r+0x137c>
 8004224:	d9403317 	ldw	r5,204(sp)
 8004228:	84000044 	addi	r16,r16,1
 800422c:	8c400044 	addi	r17,r17,1
 8004230:	28bfffc4 	addi	r2,r5,-1
 8004234:	1887883a 	add	r3,r3,r2
 8004238:	b0800115 	stw	r2,4(r22)
 800423c:	b4000015 	stw	r16,0(r22)
 8004240:	d8c02015 	stw	r3,128(sp)
 8004244:	dc401f15 	stw	r17,124(sp)
 8004248:	008001c4 	movi	r2,7
 800424c:	14414316 	blt	r2,r17,800475c <___vfprintf_internal_r+0x15c4>
 8004250:	b5800204 	addi	r22,r22,8
 8004254:	d9003a17 	ldw	r4,232(sp)
 8004258:	df0022c4 	addi	fp,sp,139
 800425c:	8c400044 	addi	r17,r17,1
 8004260:	20c7883a 	add	r3,r4,r3
 8004264:	b7000015 	stw	fp,0(r22)
 8004268:	b1000115 	stw	r4,4(r22)
 800426c:	d8c02015 	stw	r3,128(sp)
 8004270:	dc401f15 	stw	r17,124(sp)
 8004274:	008001c4 	movi	r2,7
 8004278:	14400e16 	blt	r2,r17,80042b4 <___vfprintf_internal_r+0x111c>
 800427c:	b2000204 	addi	r8,r22,8
 8004280:	003e3a06 	br	8003b6c <__alt_data_end+0xff003b6c>
 8004284:	01020074 	movhi	r4,2049
 8004288:	21078c84 	addi	r4,r4,7730
 800428c:	d9002b15 	stw	r4,172(sp)
 8004290:	d9002b17 	ldw	r4,172(sp)
 8004294:	1c07883a 	add	r3,r3,r16
 8004298:	44000115 	stw	r16,4(r8)
 800429c:	41000015 	stw	r4,0(r8)
 80042a0:	10800044 	addi	r2,r2,1
 80042a4:	d8c02015 	stw	r3,128(sp)
 80042a8:	d8801f15 	stw	r2,124(sp)
 80042ac:	010001c4 	movi	r4,7
 80042b0:	20be2d0e 	bge	r4,r2,8003b68 <__alt_data_end+0xff003b68>
 80042b4:	d9002c17 	ldw	r4,176(sp)
 80042b8:	d9801e04 	addi	r6,sp,120
 80042bc:	b80b883a 	mov	r5,r23
 80042c0:	8009e180 	call	8009e18 <__sprint_r>
 80042c4:	103cb61e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 80042c8:	d8c02017 	ldw	r3,128(sp)
 80042cc:	da000404 	addi	r8,sp,16
 80042d0:	003e2606 	br	8003b6c <__alt_data_end+0xff003b6c>
 80042d4:	d9002c17 	ldw	r4,176(sp)
 80042d8:	d9801e04 	addi	r6,sp,120
 80042dc:	b80b883a 	mov	r5,r23
 80042e0:	8009e180 	call	8009e18 <__sprint_r>
 80042e4:	103e5d26 	beq	r2,zero,8003c5c <__alt_data_end+0xff003c5c>
 80042e8:	003cad06 	br	80035a0 <__alt_data_end+0xff0035a0>
 80042ec:	d9002c17 	ldw	r4,176(sp)
 80042f0:	d9801e04 	addi	r6,sp,120
 80042f4:	b80b883a 	mov	r5,r23
 80042f8:	8009e180 	call	8009e18 <__sprint_r>
 80042fc:	103ca81e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004300:	d8c02017 	ldw	r3,128(sp)
 8004304:	da000404 	addi	r8,sp,16
 8004308:	003e0b06 	br	8003b38 <__alt_data_end+0xff003b38>
 800430c:	d9002c17 	ldw	r4,176(sp)
 8004310:	d9801e04 	addi	r6,sp,120
 8004314:	b80b883a 	mov	r5,r23
 8004318:	8009e180 	call	8009e18 <__sprint_r>
 800431c:	103ca01e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004320:	d8c02017 	ldw	r3,128(sp)
 8004324:	da000404 	addi	r8,sp,16
 8004328:	003dbd06 	br	8003a20 <__alt_data_end+0xff003a20>
 800432c:	d9002c17 	ldw	r4,176(sp)
 8004330:	d9801e04 	addi	r6,sp,120
 8004334:	b80b883a 	mov	r5,r23
 8004338:	8009e180 	call	8009e18 <__sprint_r>
 800433c:	103c981e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004340:	d8c02017 	ldw	r3,128(sp)
 8004344:	da000404 	addi	r8,sp,16
 8004348:	003dc306 	br	8003a58 <__alt_data_end+0xff003a58>
 800434c:	d8802917 	ldw	r2,164(sp)
 8004350:	d8002785 	stb	zero,158(sp)
 8004354:	103f0616 	blt	r2,zero,8003f70 <__alt_data_end+0xff003f70>
 8004358:	00ffdfc4 	movi	r3,-129
 800435c:	9d84b03a 	or	r2,r19,r22
 8004360:	90e4703a 	and	r18,r18,r3
 8004364:	103c6b26 	beq	r2,zero,8003514 <__alt_data_end+0xff003514>
 8004368:	0039883a 	mov	fp,zero
 800436c:	003e7406 	br	8003d40 <__alt_data_end+0xff003d40>
 8004370:	9080040c 	andi	r2,r18,16
 8004374:	1001b326 	beq	r2,zero,8004a44 <___vfprintf_internal_r+0x18ac>
 8004378:	d9002d17 	ldw	r4,180(sp)
 800437c:	d9402917 	ldw	r5,164(sp)
 8004380:	d8002785 	stb	zero,158(sp)
 8004384:	20800104 	addi	r2,r4,4
 8004388:	24c00017 	ldw	r19,0(r4)
 800438c:	002d883a 	mov	r22,zero
 8004390:	2801b516 	blt	r5,zero,8004a68 <___vfprintf_internal_r+0x18d0>
 8004394:	00ffdfc4 	movi	r3,-129
 8004398:	d8802d15 	stw	r2,180(sp)
 800439c:	90e4703a 	and	r18,r18,r3
 80043a0:	983d2726 	beq	r19,zero,8003840 <__alt_data_end+0xff003840>
 80043a4:	0039883a 	mov	fp,zero
 80043a8:	003d2a06 	br	8003854 <__alt_data_end+0xff003854>
 80043ac:	dc402617 	ldw	r17,152(sp)
 80043b0:	0441d30e 	bge	zero,r17,8004b00 <___vfprintf_internal_r+0x1968>
 80043b4:	dc403217 	ldw	r17,200(sp)
 80043b8:	d8803317 	ldw	r2,204(sp)
 80043bc:	1440010e 	bge	r2,r17,80043c4 <___vfprintf_internal_r+0x122c>
 80043c0:	1023883a 	mov	r17,r2
 80043c4:	04400a0e 	bge	zero,r17,80043f0 <___vfprintf_internal_r+0x1258>
 80043c8:	d8801f17 	ldw	r2,124(sp)
 80043cc:	1c47883a 	add	r3,r3,r17
 80043d0:	44000015 	stw	r16,0(r8)
 80043d4:	10800044 	addi	r2,r2,1
 80043d8:	44400115 	stw	r17,4(r8)
 80043dc:	d8c02015 	stw	r3,128(sp)
 80043e0:	d8801f15 	stw	r2,124(sp)
 80043e4:	010001c4 	movi	r4,7
 80043e8:	20826516 	blt	r4,r2,8004d80 <___vfprintf_internal_r+0x1be8>
 80043ec:	42000204 	addi	r8,r8,8
 80043f0:	88026116 	blt	r17,zero,8004d78 <___vfprintf_internal_r+0x1be0>
 80043f4:	d9003217 	ldw	r4,200(sp)
 80043f8:	2463c83a 	sub	r17,r4,r17
 80043fc:	04407b0e 	bge	zero,r17,80045ec <___vfprintf_internal_r+0x1454>
 8004400:	05800404 	movi	r22,16
 8004404:	d8801f17 	ldw	r2,124(sp)
 8004408:	b4419d0e 	bge	r22,r17,8004a80 <___vfprintf_internal_r+0x18e8>
 800440c:	01020074 	movhi	r4,2049
 8004410:	21078c84 	addi	r4,r4,7730
 8004414:	d9002b15 	stw	r4,172(sp)
 8004418:	070001c4 	movi	fp,7
 800441c:	dcc02c17 	ldw	r19,176(sp)
 8004420:	00000306 	br	8004430 <___vfprintf_internal_r+0x1298>
 8004424:	42000204 	addi	r8,r8,8
 8004428:	8c7ffc04 	addi	r17,r17,-16
 800442c:	b441970e 	bge	r22,r17,8004a8c <___vfprintf_internal_r+0x18f4>
 8004430:	18c00404 	addi	r3,r3,16
 8004434:	10800044 	addi	r2,r2,1
 8004438:	45000015 	stw	r20,0(r8)
 800443c:	45800115 	stw	r22,4(r8)
 8004440:	d8c02015 	stw	r3,128(sp)
 8004444:	d8801f15 	stw	r2,124(sp)
 8004448:	e0bff60e 	bge	fp,r2,8004424 <__alt_data_end+0xff004424>
 800444c:	d9801e04 	addi	r6,sp,120
 8004450:	b80b883a 	mov	r5,r23
 8004454:	9809883a 	mov	r4,r19
 8004458:	8009e180 	call	8009e18 <__sprint_r>
 800445c:	103c501e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004460:	d8c02017 	ldw	r3,128(sp)
 8004464:	d8801f17 	ldw	r2,124(sp)
 8004468:	da000404 	addi	r8,sp,16
 800446c:	003fee06 	br	8004428 <__alt_data_end+0xff004428>
 8004470:	d9002c17 	ldw	r4,176(sp)
 8004474:	d9801e04 	addi	r6,sp,120
 8004478:	b80b883a 	mov	r5,r23
 800447c:	8009e180 	call	8009e18 <__sprint_r>
 8004480:	103c471e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004484:	d8c02017 	ldw	r3,128(sp)
 8004488:	df002787 	ldb	fp,158(sp)
 800448c:	da000404 	addi	r8,sp,16
 8004490:	003d5606 	br	80039ec <__alt_data_end+0xff0039ec>
 8004494:	9080040c 	andi	r2,r18,16
 8004498:	10016126 	beq	r2,zero,8004a20 <___vfprintf_internal_r+0x1888>
 800449c:	d8802d17 	ldw	r2,180(sp)
 80044a0:	14c00017 	ldw	r19,0(r2)
 80044a4:	10800104 	addi	r2,r2,4
 80044a8:	d8802d15 	stw	r2,180(sp)
 80044ac:	982dd7fa 	srai	r22,r19,31
 80044b0:	b005883a 	mov	r2,r22
 80044b4:	003c8206 	br	80036c0 <__alt_data_end+0xff0036c0>
 80044b8:	9080040c 	andi	r2,r18,16
 80044bc:	10003526 	beq	r2,zero,8004594 <___vfprintf_internal_r+0x13fc>
 80044c0:	d9402d17 	ldw	r5,180(sp)
 80044c4:	d8c02917 	ldw	r3,164(sp)
 80044c8:	d8002785 	stb	zero,158(sp)
 80044cc:	28800104 	addi	r2,r5,4
 80044d0:	2cc00017 	ldw	r19,0(r5)
 80044d4:	002d883a 	mov	r22,zero
 80044d8:	18003716 	blt	r3,zero,80045b8 <___vfprintf_internal_r+0x1420>
 80044dc:	00ffdfc4 	movi	r3,-129
 80044e0:	d8802d15 	stw	r2,180(sp)
 80044e4:	90e4703a 	and	r18,r18,r3
 80044e8:	0039883a 	mov	fp,zero
 80044ec:	983df326 	beq	r19,zero,8003cbc <__alt_data_end+0xff003cbc>
 80044f0:	00800244 	movi	r2,9
 80044f4:	14fc7b36 	bltu	r2,r19,80036e4 <__alt_data_end+0xff0036e4>
 80044f8:	d8c02817 	ldw	r3,160(sp)
 80044fc:	dc001dc4 	addi	r16,sp,119
 8004500:	9cc00c04 	addi	r19,r19,48
 8004504:	1c07c83a 	sub	r3,r3,r16
 8004508:	dcc01dc5 	stb	r19,119(sp)
 800450c:	d8c02e15 	stw	r3,184(sp)
 8004510:	003ce806 	br	80038b4 <__alt_data_end+0xff0038b4>
 8004514:	d8803317 	ldw	r2,204(sp)
 8004518:	143fffc4 	addi	r16,r2,-1
 800451c:	043f4d0e 	bge	zero,r16,8004254 <__alt_data_end+0xff004254>
 8004520:	07000404 	movi	fp,16
 8004524:	e400810e 	bge	fp,r16,800472c <___vfprintf_internal_r+0x1594>
 8004528:	01420074 	movhi	r5,2049
 800452c:	29478c84 	addi	r5,r5,7730
 8004530:	d9402b15 	stw	r5,172(sp)
 8004534:	01c001c4 	movi	r7,7
 8004538:	dcc02c17 	ldw	r19,176(sp)
 800453c:	00000306 	br	800454c <___vfprintf_internal_r+0x13b4>
 8004540:	b5800204 	addi	r22,r22,8
 8004544:	843ffc04 	addi	r16,r16,-16
 8004548:	e4007b0e 	bge	fp,r16,8004738 <___vfprintf_internal_r+0x15a0>
 800454c:	18c00404 	addi	r3,r3,16
 8004550:	8c400044 	addi	r17,r17,1
 8004554:	b5000015 	stw	r20,0(r22)
 8004558:	b7000115 	stw	fp,4(r22)
 800455c:	d8c02015 	stw	r3,128(sp)
 8004560:	dc401f15 	stw	r17,124(sp)
 8004564:	3c7ff60e 	bge	r7,r17,8004540 <__alt_data_end+0xff004540>
 8004568:	d9801e04 	addi	r6,sp,120
 800456c:	b80b883a 	mov	r5,r23
 8004570:	9809883a 	mov	r4,r19
 8004574:	d9c03c15 	stw	r7,240(sp)
 8004578:	8009e180 	call	8009e18 <__sprint_r>
 800457c:	d9c03c17 	ldw	r7,240(sp)
 8004580:	103c071e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004584:	d8c02017 	ldw	r3,128(sp)
 8004588:	dc401f17 	ldw	r17,124(sp)
 800458c:	dd800404 	addi	r22,sp,16
 8004590:	003fec06 	br	8004544 <__alt_data_end+0xff004544>
 8004594:	9080100c 	andi	r2,r18,64
 8004598:	d8002785 	stb	zero,158(sp)
 800459c:	10010e26 	beq	r2,zero,80049d8 <___vfprintf_internal_r+0x1840>
 80045a0:	d9002d17 	ldw	r4,180(sp)
 80045a4:	d9402917 	ldw	r5,164(sp)
 80045a8:	002d883a 	mov	r22,zero
 80045ac:	20800104 	addi	r2,r4,4
 80045b0:	24c0000b 	ldhu	r19,0(r4)
 80045b4:	283fc90e 	bge	r5,zero,80044dc <__alt_data_end+0xff0044dc>
 80045b8:	d8802d15 	stw	r2,180(sp)
 80045bc:	0039883a 	mov	fp,zero
 80045c0:	9d84b03a 	or	r2,r19,r22
 80045c4:	103c461e 	bne	r2,zero,80036e0 <__alt_data_end+0xff0036e0>
 80045c8:	00800044 	movi	r2,1
 80045cc:	003e6c06 	br	8003f80 <__alt_data_end+0xff003f80>
 80045d0:	d9002c17 	ldw	r4,176(sp)
 80045d4:	d9801e04 	addi	r6,sp,120
 80045d8:	b80b883a 	mov	r5,r23
 80045dc:	8009e180 	call	8009e18 <__sprint_r>
 80045e0:	103bef1e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 80045e4:	d8c02017 	ldw	r3,128(sp)
 80045e8:	da000404 	addi	r8,sp,16
 80045ec:	d9003217 	ldw	r4,200(sp)
 80045f0:	d8802617 	ldw	r2,152(sp)
 80045f4:	d9403317 	ldw	r5,204(sp)
 80045f8:	8123883a 	add	r17,r16,r4
 80045fc:	11400216 	blt	r2,r5,8004608 <___vfprintf_internal_r+0x1470>
 8004600:	9100004c 	andi	r4,r18,1
 8004604:	20000d26 	beq	r4,zero,800463c <___vfprintf_internal_r+0x14a4>
 8004608:	d9003717 	ldw	r4,220(sp)
 800460c:	d9403417 	ldw	r5,208(sp)
 8004610:	1907883a 	add	r3,r3,r4
 8004614:	d9001f17 	ldw	r4,124(sp)
 8004618:	41400015 	stw	r5,0(r8)
 800461c:	d9403717 	ldw	r5,220(sp)
 8004620:	21000044 	addi	r4,r4,1
 8004624:	d8c02015 	stw	r3,128(sp)
 8004628:	41400115 	stw	r5,4(r8)
 800462c:	d9001f15 	stw	r4,124(sp)
 8004630:	014001c4 	movi	r5,7
 8004634:	2901e816 	blt	r5,r4,8004dd8 <___vfprintf_internal_r+0x1c40>
 8004638:	42000204 	addi	r8,r8,8
 800463c:	d9003317 	ldw	r4,204(sp)
 8004640:	8121883a 	add	r16,r16,r4
 8004644:	2085c83a 	sub	r2,r4,r2
 8004648:	8461c83a 	sub	r16,r16,r17
 800464c:	1400010e 	bge	r2,r16,8004654 <___vfprintf_internal_r+0x14bc>
 8004650:	1021883a 	mov	r16,r2
 8004654:	04000a0e 	bge	zero,r16,8004680 <___vfprintf_internal_r+0x14e8>
 8004658:	d9001f17 	ldw	r4,124(sp)
 800465c:	1c07883a 	add	r3,r3,r16
 8004660:	44400015 	stw	r17,0(r8)
 8004664:	21000044 	addi	r4,r4,1
 8004668:	44000115 	stw	r16,4(r8)
 800466c:	d8c02015 	stw	r3,128(sp)
 8004670:	d9001f15 	stw	r4,124(sp)
 8004674:	014001c4 	movi	r5,7
 8004678:	2901fb16 	blt	r5,r4,8004e68 <___vfprintf_internal_r+0x1cd0>
 800467c:	42000204 	addi	r8,r8,8
 8004680:	8001f716 	blt	r16,zero,8004e60 <___vfprintf_internal_r+0x1cc8>
 8004684:	1421c83a 	sub	r16,r2,r16
 8004688:	043d380e 	bge	zero,r16,8003b6c <__alt_data_end+0xff003b6c>
 800468c:	04400404 	movi	r17,16
 8004690:	d8801f17 	ldw	r2,124(sp)
 8004694:	8c3efb0e 	bge	r17,r16,8004284 <__alt_data_end+0xff004284>
 8004698:	01420074 	movhi	r5,2049
 800469c:	29478c84 	addi	r5,r5,7730
 80046a0:	d9402b15 	stw	r5,172(sp)
 80046a4:	058001c4 	movi	r22,7
 80046a8:	dcc02c17 	ldw	r19,176(sp)
 80046ac:	00000306 	br	80046bc <___vfprintf_internal_r+0x1524>
 80046b0:	42000204 	addi	r8,r8,8
 80046b4:	843ffc04 	addi	r16,r16,-16
 80046b8:	8c3ef50e 	bge	r17,r16,8004290 <__alt_data_end+0xff004290>
 80046bc:	18c00404 	addi	r3,r3,16
 80046c0:	10800044 	addi	r2,r2,1
 80046c4:	45000015 	stw	r20,0(r8)
 80046c8:	44400115 	stw	r17,4(r8)
 80046cc:	d8c02015 	stw	r3,128(sp)
 80046d0:	d8801f15 	stw	r2,124(sp)
 80046d4:	b0bff60e 	bge	r22,r2,80046b0 <__alt_data_end+0xff0046b0>
 80046d8:	d9801e04 	addi	r6,sp,120
 80046dc:	b80b883a 	mov	r5,r23
 80046e0:	9809883a 	mov	r4,r19
 80046e4:	8009e180 	call	8009e18 <__sprint_r>
 80046e8:	103bad1e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 80046ec:	d8c02017 	ldw	r3,128(sp)
 80046f0:	d8801f17 	ldw	r2,124(sp)
 80046f4:	da000404 	addi	r8,sp,16
 80046f8:	003fee06 	br	80046b4 <__alt_data_end+0xff0046b4>
 80046fc:	9088703a 	and	r4,r18,r2
 8004700:	203eab1e 	bne	r4,zero,80041b0 <__alt_data_end+0xff0041b0>
 8004704:	dc401f17 	ldw	r17,124(sp)
 8004708:	40800115 	stw	r2,4(r8)
 800470c:	44000015 	stw	r16,0(r8)
 8004710:	8c400044 	addi	r17,r17,1
 8004714:	d8c02015 	stw	r3,128(sp)
 8004718:	dc401f15 	stw	r17,124(sp)
 800471c:	008001c4 	movi	r2,7
 8004720:	14400e16 	blt	r2,r17,800475c <___vfprintf_internal_r+0x15c4>
 8004724:	45800204 	addi	r22,r8,8
 8004728:	003eca06 	br	8004254 <__alt_data_end+0xff004254>
 800472c:	01020074 	movhi	r4,2049
 8004730:	21078c84 	addi	r4,r4,7730
 8004734:	d9002b15 	stw	r4,172(sp)
 8004738:	d8802b17 	ldw	r2,172(sp)
 800473c:	1c07883a 	add	r3,r3,r16
 8004740:	8c400044 	addi	r17,r17,1
 8004744:	b0800015 	stw	r2,0(r22)
 8004748:	b4000115 	stw	r16,4(r22)
 800474c:	d8c02015 	stw	r3,128(sp)
 8004750:	dc401f15 	stw	r17,124(sp)
 8004754:	008001c4 	movi	r2,7
 8004758:	147ebd0e 	bge	r2,r17,8004250 <__alt_data_end+0xff004250>
 800475c:	d9002c17 	ldw	r4,176(sp)
 8004760:	d9801e04 	addi	r6,sp,120
 8004764:	b80b883a 	mov	r5,r23
 8004768:	8009e180 	call	8009e18 <__sprint_r>
 800476c:	103b8c1e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004770:	d8c02017 	ldw	r3,128(sp)
 8004774:	dc401f17 	ldw	r17,124(sp)
 8004778:	dd800404 	addi	r22,sp,16
 800477c:	003eb506 	br	8004254 <__alt_data_end+0xff004254>
 8004780:	d9002c17 	ldw	r4,176(sp)
 8004784:	d9801e04 	addi	r6,sp,120
 8004788:	b80b883a 	mov	r5,r23
 800478c:	8009e180 	call	8009e18 <__sprint_r>
 8004790:	103b831e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004794:	d8c02017 	ldw	r3,128(sp)
 8004798:	dc401f17 	ldw	r17,124(sp)
 800479c:	da000404 	addi	r8,sp,16
 80047a0:	003e8d06 	br	80041d8 <__alt_data_end+0xff0041d8>
 80047a4:	d9002c17 	ldw	r4,176(sp)
 80047a8:	d9801e04 	addi	r6,sp,120
 80047ac:	b80b883a 	mov	r5,r23
 80047b0:	8009e180 	call	8009e18 <__sprint_r>
 80047b4:	103b7a1e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 80047b8:	d8c02017 	ldw	r3,128(sp)
 80047bc:	dc401f17 	ldw	r17,124(sp)
 80047c0:	dd800404 	addi	r22,sp,16
 80047c4:	003e8f06 	br	8004204 <__alt_data_end+0xff004204>
 80047c8:	0027883a 	mov	r19,zero
 80047cc:	003f4a06 	br	80044f8 <__alt_data_end+0xff0044f8>
 80047d0:	d9002c17 	ldw	r4,176(sp)
 80047d4:	d9801e04 	addi	r6,sp,120
 80047d8:	b80b883a 	mov	r5,r23
 80047dc:	8009e180 	call	8009e18 <__sprint_r>
 80047e0:	103b6f1e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 80047e4:	d8c02017 	ldw	r3,128(sp)
 80047e8:	da000404 	addi	r8,sp,16
 80047ec:	003c9d06 	br	8003a64 <__alt_data_end+0xff003a64>
 80047f0:	04e7c83a 	sub	r19,zero,r19
 80047f4:	9804c03a 	cmpne	r2,r19,zero
 80047f8:	05adc83a 	sub	r22,zero,r22
 80047fc:	b0adc83a 	sub	r22,r22,r2
 8004800:	d8802917 	ldw	r2,164(sp)
 8004804:	07000b44 	movi	fp,45
 8004808:	df002785 	stb	fp,158(sp)
 800480c:	10017b16 	blt	r2,zero,8004dfc <___vfprintf_internal_r+0x1c64>
 8004810:	00bfdfc4 	movi	r2,-129
 8004814:	90a4703a 	and	r18,r18,r2
 8004818:	003bb106 	br	80036e0 <__alt_data_end+0xff0036e0>
 800481c:	d9003617 	ldw	r4,216(sp)
 8004820:	d9403817 	ldw	r5,224(sp)
 8004824:	da003d15 	stw	r8,244(sp)
 8004828:	80099a40 	call	80099a4 <__fpclassifyd>
 800482c:	da003d17 	ldw	r8,244(sp)
 8004830:	1000f026 	beq	r2,zero,8004bf4 <___vfprintf_internal_r+0x1a5c>
 8004834:	d9002917 	ldw	r4,164(sp)
 8004838:	05bff7c4 	movi	r22,-33
 800483c:	00bfffc4 	movi	r2,-1
 8004840:	8dac703a 	and	r22,r17,r22
 8004844:	20820026 	beq	r4,r2,8005048 <___vfprintf_internal_r+0x1eb0>
 8004848:	008011c4 	movi	r2,71
 800484c:	b081f726 	beq	r22,r2,800502c <___vfprintf_internal_r+0x1e94>
 8004850:	d9003817 	ldw	r4,224(sp)
 8004854:	90c04014 	ori	r3,r18,256
 8004858:	d8c02b15 	stw	r3,172(sp)
 800485c:	20021516 	blt	r4,zero,80050b4 <___vfprintf_internal_r+0x1f1c>
 8004860:	dcc03817 	ldw	r19,224(sp)
 8004864:	d8002a05 	stb	zero,168(sp)
 8004868:	00801984 	movi	r2,102
 800486c:	8881f926 	beq	r17,r2,8005054 <___vfprintf_internal_r+0x1ebc>
 8004870:	00801184 	movi	r2,70
 8004874:	88821c26 	beq	r17,r2,80050e8 <___vfprintf_internal_r+0x1f50>
 8004878:	00801144 	movi	r2,69
 800487c:	b081ef26 	beq	r22,r2,800503c <___vfprintf_internal_r+0x1ea4>
 8004880:	d8c02917 	ldw	r3,164(sp)
 8004884:	d8802104 	addi	r2,sp,132
 8004888:	d8800315 	stw	r2,12(sp)
 800488c:	d9403617 	ldw	r5,216(sp)
 8004890:	d8802504 	addi	r2,sp,148
 8004894:	d9002c17 	ldw	r4,176(sp)
 8004898:	d8800215 	stw	r2,8(sp)
 800489c:	d8802604 	addi	r2,sp,152
 80048a0:	d8c00015 	stw	r3,0(sp)
 80048a4:	d8800115 	stw	r2,4(sp)
 80048a8:	01c00084 	movi	r7,2
 80048ac:	980d883a 	mov	r6,r19
 80048b0:	d8c03c15 	stw	r3,240(sp)
 80048b4:	da003d15 	stw	r8,244(sp)
 80048b8:	80057bc0 	call	80057bc <_dtoa_r>
 80048bc:	1021883a 	mov	r16,r2
 80048c0:	008019c4 	movi	r2,103
 80048c4:	d8c03c17 	ldw	r3,240(sp)
 80048c8:	da003d17 	ldw	r8,244(sp)
 80048cc:	88817126 	beq	r17,r2,8004e94 <___vfprintf_internal_r+0x1cfc>
 80048d0:	008011c4 	movi	r2,71
 80048d4:	88829226 	beq	r17,r2,8005320 <___vfprintf_internal_r+0x2188>
 80048d8:	80f9883a 	add	fp,r16,r3
 80048dc:	d9003617 	ldw	r4,216(sp)
 80048e0:	000d883a 	mov	r6,zero
 80048e4:	000f883a 	mov	r7,zero
 80048e8:	980b883a 	mov	r5,r19
 80048ec:	da003d15 	stw	r8,244(sp)
 80048f0:	800e4580 	call	800e458 <__eqdf2>
 80048f4:	da003d17 	ldw	r8,244(sp)
 80048f8:	10018d26 	beq	r2,zero,8004f30 <___vfprintf_internal_r+0x1d98>
 80048fc:	d8802117 	ldw	r2,132(sp)
 8004900:	1700062e 	bgeu	r2,fp,800491c <___vfprintf_internal_r+0x1784>
 8004904:	01000c04 	movi	r4,48
 8004908:	10c00044 	addi	r3,r2,1
 800490c:	d8c02115 	stw	r3,132(sp)
 8004910:	11000005 	stb	r4,0(r2)
 8004914:	d8802117 	ldw	r2,132(sp)
 8004918:	173ffb36 	bltu	r2,fp,8004908 <__alt_data_end+0xff004908>
 800491c:	1405c83a 	sub	r2,r2,r16
 8004920:	d8803315 	stw	r2,204(sp)
 8004924:	008011c4 	movi	r2,71
 8004928:	b0817626 	beq	r22,r2,8004f04 <___vfprintf_internal_r+0x1d6c>
 800492c:	00801944 	movi	r2,101
 8004930:	1442810e 	bge	r2,r17,8005338 <___vfprintf_internal_r+0x21a0>
 8004934:	d8c02617 	ldw	r3,152(sp)
 8004938:	00801984 	movi	r2,102
 800493c:	d8c03215 	stw	r3,200(sp)
 8004940:	8881fe26 	beq	r17,r2,800513c <___vfprintf_internal_r+0x1fa4>
 8004944:	d8c03217 	ldw	r3,200(sp)
 8004948:	d9003317 	ldw	r4,204(sp)
 800494c:	1901dd16 	blt	r3,r4,80050c4 <___vfprintf_internal_r+0x1f2c>
 8004950:	9480004c 	andi	r18,r18,1
 8004954:	90022b1e 	bne	r18,zero,8005204 <___vfprintf_internal_r+0x206c>
 8004958:	1805883a 	mov	r2,r3
 800495c:	18028016 	blt	r3,zero,8005360 <___vfprintf_internal_r+0x21c8>
 8004960:	d8c03217 	ldw	r3,200(sp)
 8004964:	044019c4 	movi	r17,103
 8004968:	d8c02e15 	stw	r3,184(sp)
 800496c:	df002a07 	ldb	fp,168(sp)
 8004970:	e001531e 	bne	fp,zero,8004ec0 <___vfprintf_internal_r+0x1d28>
 8004974:	df002783 	ldbu	fp,158(sp)
 8004978:	d8802a15 	stw	r2,168(sp)
 800497c:	dc802b17 	ldw	r18,172(sp)
 8004980:	d8002915 	stw	zero,164(sp)
 8004984:	003bd106 	br	80038cc <__alt_data_end+0xff0038cc>
 8004988:	d8802d17 	ldw	r2,180(sp)
 800498c:	d8c02d17 	ldw	r3,180(sp)
 8004990:	d9002d17 	ldw	r4,180(sp)
 8004994:	10800017 	ldw	r2,0(r2)
 8004998:	18c00117 	ldw	r3,4(r3)
 800499c:	21000204 	addi	r4,r4,8
 80049a0:	d8803615 	stw	r2,216(sp)
 80049a4:	d8c03815 	stw	r3,224(sp)
 80049a8:	d9002d15 	stw	r4,180(sp)
 80049ac:	003b7506 	br	8003784 <__alt_data_end+0xff003784>
 80049b0:	ac400007 	ldb	r17,0(r21)
 80049b4:	003a5906 	br	800331c <__alt_data_end+0xff00331c>
 80049b8:	9080100c 	andi	r2,r18,64
 80049bc:	1000a826 	beq	r2,zero,8004c60 <___vfprintf_internal_r+0x1ac8>
 80049c0:	d9002d17 	ldw	r4,180(sp)
 80049c4:	002d883a 	mov	r22,zero
 80049c8:	24c0000b 	ldhu	r19,0(r4)
 80049cc:	21000104 	addi	r4,r4,4
 80049d0:	d9002d15 	stw	r4,180(sp)
 80049d4:	003ccb06 	br	8003d04 <__alt_data_end+0xff003d04>
 80049d8:	d8c02d17 	ldw	r3,180(sp)
 80049dc:	d9002917 	ldw	r4,164(sp)
 80049e0:	002d883a 	mov	r22,zero
 80049e4:	18800104 	addi	r2,r3,4
 80049e8:	1cc00017 	ldw	r19,0(r3)
 80049ec:	203ebb0e 	bge	r4,zero,80044dc <__alt_data_end+0xff0044dc>
 80049f0:	003ef106 	br	80045b8 <__alt_data_end+0xff0045b8>
 80049f4:	9080040c 	andi	r2,r18,16
 80049f8:	1000921e 	bne	r2,zero,8004c44 <___vfprintf_internal_r+0x1aac>
 80049fc:	9480100c 	andi	r18,r18,64
 8004a00:	90013926 	beq	r18,zero,8004ee8 <___vfprintf_internal_r+0x1d50>
 8004a04:	d9002d17 	ldw	r4,180(sp)
 8004a08:	d9402f17 	ldw	r5,188(sp)
 8004a0c:	20800017 	ldw	r2,0(r4)
 8004a10:	21000104 	addi	r4,r4,4
 8004a14:	d9002d15 	stw	r4,180(sp)
 8004a18:	1140000d 	sth	r5,0(r2)
 8004a1c:	003a1606 	br	8003278 <__alt_data_end+0xff003278>
 8004a20:	9080100c 	andi	r2,r18,64
 8004a24:	10008026 	beq	r2,zero,8004c28 <___vfprintf_internal_r+0x1a90>
 8004a28:	d8c02d17 	ldw	r3,180(sp)
 8004a2c:	1cc0000f 	ldh	r19,0(r3)
 8004a30:	18c00104 	addi	r3,r3,4
 8004a34:	d8c02d15 	stw	r3,180(sp)
 8004a38:	982dd7fa 	srai	r22,r19,31
 8004a3c:	b005883a 	mov	r2,r22
 8004a40:	003b1f06 	br	80036c0 <__alt_data_end+0xff0036c0>
 8004a44:	9080100c 	andi	r2,r18,64
 8004a48:	d8002785 	stb	zero,158(sp)
 8004a4c:	10008a1e 	bne	r2,zero,8004c78 <___vfprintf_internal_r+0x1ae0>
 8004a50:	d9402d17 	ldw	r5,180(sp)
 8004a54:	d8c02917 	ldw	r3,164(sp)
 8004a58:	002d883a 	mov	r22,zero
 8004a5c:	28800104 	addi	r2,r5,4
 8004a60:	2cc00017 	ldw	r19,0(r5)
 8004a64:	183e4b0e 	bge	r3,zero,8004394 <__alt_data_end+0xff004394>
 8004a68:	9d86b03a 	or	r3,r19,r22
 8004a6c:	d8802d15 	stw	r2,180(sp)
 8004a70:	183e4c1e 	bne	r3,zero,80043a4 <__alt_data_end+0xff0043a4>
 8004a74:	0039883a 	mov	fp,zero
 8004a78:	0005883a 	mov	r2,zero
 8004a7c:	003d4006 	br	8003f80 <__alt_data_end+0xff003f80>
 8004a80:	01420074 	movhi	r5,2049
 8004a84:	29478c84 	addi	r5,r5,7730
 8004a88:	d9402b15 	stw	r5,172(sp)
 8004a8c:	d9402b17 	ldw	r5,172(sp)
 8004a90:	1c47883a 	add	r3,r3,r17
 8004a94:	10800044 	addi	r2,r2,1
 8004a98:	41400015 	stw	r5,0(r8)
 8004a9c:	44400115 	stw	r17,4(r8)
 8004aa0:	d8c02015 	stw	r3,128(sp)
 8004aa4:	d8801f15 	stw	r2,124(sp)
 8004aa8:	010001c4 	movi	r4,7
 8004aac:	20bec816 	blt	r4,r2,80045d0 <__alt_data_end+0xff0045d0>
 8004ab0:	42000204 	addi	r8,r8,8
 8004ab4:	003ecd06 	br	80045ec <__alt_data_end+0xff0045ec>
 8004ab8:	d9002917 	ldw	r4,164(sp)
 8004abc:	d8002785 	stb	zero,158(sp)
 8004ac0:	203d2d16 	blt	r4,zero,8003f78 <__alt_data_end+0xff003f78>
 8004ac4:	00bfdfc4 	movi	r2,-129
 8004ac8:	90a4703a 	and	r18,r18,r2
 8004acc:	003a9106 	br	8003514 <__alt_data_end+0xff003514>
 8004ad0:	01020074 	movhi	r4,2049
 8004ad4:	21078c84 	addi	r4,r4,7730
 8004ad8:	d9002b15 	stw	r4,172(sp)
 8004adc:	003c0c06 	br	8003b10 <__alt_data_end+0xff003b10>
 8004ae0:	d9002c17 	ldw	r4,176(sp)
 8004ae4:	d9801e04 	addi	r6,sp,120
 8004ae8:	b80b883a 	mov	r5,r23
 8004aec:	8009e180 	call	8009e18 <__sprint_r>
 8004af0:	103aab1e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004af4:	d8c02017 	ldw	r3,128(sp)
 8004af8:	da000404 	addi	r8,sp,16
 8004afc:	003d4106 	br	8004004 <__alt_data_end+0xff004004>
 8004b00:	d8801f17 	ldw	r2,124(sp)
 8004b04:	01420074 	movhi	r5,2049
 8004b08:	01000044 	movi	r4,1
 8004b0c:	18c00044 	addi	r3,r3,1
 8004b10:	10800044 	addi	r2,r2,1
 8004b14:	29478c04 	addi	r5,r5,7728
 8004b18:	41000115 	stw	r4,4(r8)
 8004b1c:	41400015 	stw	r5,0(r8)
 8004b20:	d8c02015 	stw	r3,128(sp)
 8004b24:	d8801f15 	stw	r2,124(sp)
 8004b28:	010001c4 	movi	r4,7
 8004b2c:	20805c16 	blt	r4,r2,8004ca0 <___vfprintf_internal_r+0x1b08>
 8004b30:	42000204 	addi	r8,r8,8
 8004b34:	8800041e 	bne	r17,zero,8004b48 <___vfprintf_internal_r+0x19b0>
 8004b38:	d8803317 	ldw	r2,204(sp)
 8004b3c:	1000021e 	bne	r2,zero,8004b48 <___vfprintf_internal_r+0x19b0>
 8004b40:	9080004c 	andi	r2,r18,1
 8004b44:	103c0926 	beq	r2,zero,8003b6c <__alt_data_end+0xff003b6c>
 8004b48:	d9003717 	ldw	r4,220(sp)
 8004b4c:	d8801f17 	ldw	r2,124(sp)
 8004b50:	d9403417 	ldw	r5,208(sp)
 8004b54:	20c7883a 	add	r3,r4,r3
 8004b58:	10800044 	addi	r2,r2,1
 8004b5c:	41000115 	stw	r4,4(r8)
 8004b60:	41400015 	stw	r5,0(r8)
 8004b64:	d8c02015 	stw	r3,128(sp)
 8004b68:	d8801f15 	stw	r2,124(sp)
 8004b6c:	010001c4 	movi	r4,7
 8004b70:	20812116 	blt	r4,r2,8004ff8 <___vfprintf_internal_r+0x1e60>
 8004b74:	42000204 	addi	r8,r8,8
 8004b78:	0463c83a 	sub	r17,zero,r17
 8004b7c:	0440730e 	bge	zero,r17,8004d4c <___vfprintf_internal_r+0x1bb4>
 8004b80:	05800404 	movi	r22,16
 8004b84:	b440860e 	bge	r22,r17,8004da0 <___vfprintf_internal_r+0x1c08>
 8004b88:	01420074 	movhi	r5,2049
 8004b8c:	29478c84 	addi	r5,r5,7730
 8004b90:	d9402b15 	stw	r5,172(sp)
 8004b94:	070001c4 	movi	fp,7
 8004b98:	dcc02c17 	ldw	r19,176(sp)
 8004b9c:	00000306 	br	8004bac <___vfprintf_internal_r+0x1a14>
 8004ba0:	42000204 	addi	r8,r8,8
 8004ba4:	8c7ffc04 	addi	r17,r17,-16
 8004ba8:	b440800e 	bge	r22,r17,8004dac <___vfprintf_internal_r+0x1c14>
 8004bac:	18c00404 	addi	r3,r3,16
 8004bb0:	10800044 	addi	r2,r2,1
 8004bb4:	45000015 	stw	r20,0(r8)
 8004bb8:	45800115 	stw	r22,4(r8)
 8004bbc:	d8c02015 	stw	r3,128(sp)
 8004bc0:	d8801f15 	stw	r2,124(sp)
 8004bc4:	e0bff60e 	bge	fp,r2,8004ba0 <__alt_data_end+0xff004ba0>
 8004bc8:	d9801e04 	addi	r6,sp,120
 8004bcc:	b80b883a 	mov	r5,r23
 8004bd0:	9809883a 	mov	r4,r19
 8004bd4:	8009e180 	call	8009e18 <__sprint_r>
 8004bd8:	103a711e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004bdc:	d8c02017 	ldw	r3,128(sp)
 8004be0:	d8801f17 	ldw	r2,124(sp)
 8004be4:	da000404 	addi	r8,sp,16
 8004be8:	003fee06 	br	8004ba4 <__alt_data_end+0xff004ba4>
 8004bec:	00bfffc4 	movi	r2,-1
 8004bf0:	003a6f06 	br	80035b0 <__alt_data_end+0xff0035b0>
 8004bf4:	008011c4 	movi	r2,71
 8004bf8:	1440b816 	blt	r2,r17,8004edc <___vfprintf_internal_r+0x1d44>
 8004bfc:	04020074 	movhi	r16,2049
 8004c00:	84077e04 	addi	r16,r16,7672
 8004c04:	00c000c4 	movi	r3,3
 8004c08:	00bfdfc4 	movi	r2,-129
 8004c0c:	d8c02a15 	stw	r3,168(sp)
 8004c10:	90a4703a 	and	r18,r18,r2
 8004c14:	df002783 	ldbu	fp,158(sp)
 8004c18:	d8c02e15 	stw	r3,184(sp)
 8004c1c:	d8002915 	stw	zero,164(sp)
 8004c20:	d8003215 	stw	zero,200(sp)
 8004c24:	003b2906 	br	80038cc <__alt_data_end+0xff0038cc>
 8004c28:	d9002d17 	ldw	r4,180(sp)
 8004c2c:	24c00017 	ldw	r19,0(r4)
 8004c30:	21000104 	addi	r4,r4,4
 8004c34:	d9002d15 	stw	r4,180(sp)
 8004c38:	982dd7fa 	srai	r22,r19,31
 8004c3c:	b005883a 	mov	r2,r22
 8004c40:	003a9f06 	br	80036c0 <__alt_data_end+0xff0036c0>
 8004c44:	d9402d17 	ldw	r5,180(sp)
 8004c48:	d8c02f17 	ldw	r3,188(sp)
 8004c4c:	28800017 	ldw	r2,0(r5)
 8004c50:	29400104 	addi	r5,r5,4
 8004c54:	d9402d15 	stw	r5,180(sp)
 8004c58:	10c00015 	stw	r3,0(r2)
 8004c5c:	00398606 	br	8003278 <__alt_data_end+0xff003278>
 8004c60:	d9402d17 	ldw	r5,180(sp)
 8004c64:	002d883a 	mov	r22,zero
 8004c68:	2cc00017 	ldw	r19,0(r5)
 8004c6c:	29400104 	addi	r5,r5,4
 8004c70:	d9402d15 	stw	r5,180(sp)
 8004c74:	003c2306 	br	8003d04 <__alt_data_end+0xff003d04>
 8004c78:	d8c02d17 	ldw	r3,180(sp)
 8004c7c:	d9002917 	ldw	r4,164(sp)
 8004c80:	002d883a 	mov	r22,zero
 8004c84:	18800104 	addi	r2,r3,4
 8004c88:	1cc0000b 	ldhu	r19,0(r3)
 8004c8c:	203dc10e 	bge	r4,zero,8004394 <__alt_data_end+0xff004394>
 8004c90:	003f7506 	br	8004a68 <__alt_data_end+0xff004a68>
 8004c94:	04020074 	movhi	r16,2049
 8004c98:	84077c04 	addi	r16,r16,7664
 8004c9c:	003acc06 	br	80037d0 <__alt_data_end+0xff0037d0>
 8004ca0:	d9002c17 	ldw	r4,176(sp)
 8004ca4:	d9801e04 	addi	r6,sp,120
 8004ca8:	b80b883a 	mov	r5,r23
 8004cac:	8009e180 	call	8009e18 <__sprint_r>
 8004cb0:	103a3b1e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004cb4:	dc402617 	ldw	r17,152(sp)
 8004cb8:	d8c02017 	ldw	r3,128(sp)
 8004cbc:	da000404 	addi	r8,sp,16
 8004cc0:	003f9c06 	br	8004b34 <__alt_data_end+0xff004b34>
 8004cc4:	ac400043 	ldbu	r17,1(r21)
 8004cc8:	94800814 	ori	r18,r18,32
 8004ccc:	ad400044 	addi	r21,r21,1
 8004cd0:	8c403fcc 	andi	r17,r17,255
 8004cd4:	8c40201c 	xori	r17,r17,128
 8004cd8:	8c7fe004 	addi	r17,r17,-128
 8004cdc:	00398f06 	br	800331c <__alt_data_end+0xff00331c>
 8004ce0:	d8c02d15 	stw	r3,180(sp)
 8004ce4:	0039883a 	mov	fp,zero
 8004ce8:	003e3506 	br	80045c0 <__alt_data_end+0xff0045c0>
 8004cec:	d9002c17 	ldw	r4,176(sp)
 8004cf0:	d9801e04 	addi	r6,sp,120
 8004cf4:	b80b883a 	mov	r5,r23
 8004cf8:	8009e180 	call	8009e18 <__sprint_r>
 8004cfc:	103a281e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004d00:	d8c02017 	ldw	r3,128(sp)
 8004d04:	da000404 	addi	r8,sp,16
 8004d08:	003cd006 	br	800404c <__alt_data_end+0xff00404c>
 8004d0c:	8009883a 	mov	r4,r16
 8004d10:	da003d15 	stw	r8,244(sp)
 8004d14:	8009c840 	call	8009c84 <strlen>
 8004d18:	d8802e15 	stw	r2,184(sp)
 8004d1c:	da003d17 	ldw	r8,244(sp)
 8004d20:	103c340e 	bge	r2,zero,8003df4 <__alt_data_end+0xff003df4>
 8004d24:	0005883a 	mov	r2,zero
 8004d28:	003c3206 	br	8003df4 <__alt_data_end+0xff003df4>
 8004d2c:	d9002c17 	ldw	r4,176(sp)
 8004d30:	d9801e04 	addi	r6,sp,120
 8004d34:	b80b883a 	mov	r5,r23
 8004d38:	8009e180 	call	8009e18 <__sprint_r>
 8004d3c:	103a181e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004d40:	d8c02017 	ldw	r3,128(sp)
 8004d44:	d8801f17 	ldw	r2,124(sp)
 8004d48:	da000404 	addi	r8,sp,16
 8004d4c:	d9403317 	ldw	r5,204(sp)
 8004d50:	10800044 	addi	r2,r2,1
 8004d54:	44000015 	stw	r16,0(r8)
 8004d58:	28c7883a 	add	r3,r5,r3
 8004d5c:	003b7d06 	br	8003b54 <__alt_data_end+0xff003b54>
 8004d60:	01020074 	movhi	r4,2049
 8004d64:	21079084 	addi	r4,r4,7746
 8004d68:	d9003515 	stw	r4,212(sp)
 8004d6c:	003b1406 	br	80039c0 <__alt_data_end+0xff0039c0>
 8004d70:	013fffc4 	movi	r4,-1
 8004d74:	003a3506 	br	800364c <__alt_data_end+0xff00364c>
 8004d78:	0023883a 	mov	r17,zero
 8004d7c:	003d9d06 	br	80043f4 <__alt_data_end+0xff0043f4>
 8004d80:	d9002c17 	ldw	r4,176(sp)
 8004d84:	d9801e04 	addi	r6,sp,120
 8004d88:	b80b883a 	mov	r5,r23
 8004d8c:	8009e180 	call	8009e18 <__sprint_r>
 8004d90:	103a031e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004d94:	d8c02017 	ldw	r3,128(sp)
 8004d98:	da000404 	addi	r8,sp,16
 8004d9c:	003d9406 	br	80043f0 <__alt_data_end+0xff0043f0>
 8004da0:	01020074 	movhi	r4,2049
 8004da4:	21078c84 	addi	r4,r4,7730
 8004da8:	d9002b15 	stw	r4,172(sp)
 8004dac:	d9002b17 	ldw	r4,172(sp)
 8004db0:	1c47883a 	add	r3,r3,r17
 8004db4:	10800044 	addi	r2,r2,1
 8004db8:	41000015 	stw	r4,0(r8)
 8004dbc:	44400115 	stw	r17,4(r8)
 8004dc0:	d8c02015 	stw	r3,128(sp)
 8004dc4:	d8801f15 	stw	r2,124(sp)
 8004dc8:	010001c4 	movi	r4,7
 8004dcc:	20bfd716 	blt	r4,r2,8004d2c <__alt_data_end+0xff004d2c>
 8004dd0:	42000204 	addi	r8,r8,8
 8004dd4:	003fdd06 	br	8004d4c <__alt_data_end+0xff004d4c>
 8004dd8:	d9002c17 	ldw	r4,176(sp)
 8004ddc:	d9801e04 	addi	r6,sp,120
 8004de0:	b80b883a 	mov	r5,r23
 8004de4:	8009e180 	call	8009e18 <__sprint_r>
 8004de8:	1039ed1e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004dec:	d8802617 	ldw	r2,152(sp)
 8004df0:	d8c02017 	ldw	r3,128(sp)
 8004df4:	da000404 	addi	r8,sp,16
 8004df8:	003e1006 	br	800463c <__alt_data_end+0xff00463c>
 8004dfc:	00800044 	movi	r2,1
 8004e00:	10803fcc 	andi	r2,r2,255
 8004e04:	00c00044 	movi	r3,1
 8004e08:	10fa3526 	beq	r2,r3,80036e0 <__alt_data_end+0xff0036e0>
 8004e0c:	00c00084 	movi	r3,2
 8004e10:	10fbcb26 	beq	r2,r3,8003d40 <__alt_data_end+0xff003d40>
 8004e14:	003a8f06 	br	8003854 <__alt_data_end+0xff003854>
 8004e18:	01020074 	movhi	r4,2049
 8004e1c:	21079084 	addi	r4,r4,7746
 8004e20:	d9003515 	stw	r4,212(sp)
 8004e24:	003b7606 	br	8003c00 <__alt_data_end+0xff003c00>
 8004e28:	d8802917 	ldw	r2,164(sp)
 8004e2c:	00c00184 	movi	r3,6
 8004e30:	1880012e 	bgeu	r3,r2,8004e38 <___vfprintf_internal_r+0x1ca0>
 8004e34:	1805883a 	mov	r2,r3
 8004e38:	d8802e15 	stw	r2,184(sp)
 8004e3c:	1000ef16 	blt	r2,zero,80051fc <___vfprintf_internal_r+0x2064>
 8004e40:	04020074 	movhi	r16,2049
 8004e44:	d8802a15 	stw	r2,168(sp)
 8004e48:	dcc02d15 	stw	r19,180(sp)
 8004e4c:	d8002915 	stw	zero,164(sp)
 8004e50:	d8003215 	stw	zero,200(sp)
 8004e54:	84078a04 	addi	r16,r16,7720
 8004e58:	0039883a 	mov	fp,zero
 8004e5c:	003aa206 	br	80038e8 <__alt_data_end+0xff0038e8>
 8004e60:	0021883a 	mov	r16,zero
 8004e64:	003e0706 	br	8004684 <__alt_data_end+0xff004684>
 8004e68:	d9002c17 	ldw	r4,176(sp)
 8004e6c:	d9801e04 	addi	r6,sp,120
 8004e70:	b80b883a 	mov	r5,r23
 8004e74:	8009e180 	call	8009e18 <__sprint_r>
 8004e78:	1039c91e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 8004e7c:	d8802617 	ldw	r2,152(sp)
 8004e80:	d9403317 	ldw	r5,204(sp)
 8004e84:	d8c02017 	ldw	r3,128(sp)
 8004e88:	da000404 	addi	r8,sp,16
 8004e8c:	2885c83a 	sub	r2,r5,r2
 8004e90:	003dfb06 	br	8004680 <__alt_data_end+0xff004680>
 8004e94:	9080004c 	andi	r2,r18,1
 8004e98:	103e8f1e 	bne	r2,zero,80048d8 <__alt_data_end+0xff0048d8>
 8004e9c:	d8802117 	ldw	r2,132(sp)
 8004ea0:	003e9e06 	br	800491c <__alt_data_end+0xff00491c>
 8004ea4:	1025883a 	mov	r18,r2
 8004ea8:	0039883a 	mov	fp,zero
 8004eac:	00800084 	movi	r2,2
 8004eb0:	003fd306 	br	8004e00 <__alt_data_end+0xff004e00>
 8004eb4:	07000b44 	movi	fp,45
 8004eb8:	df002785 	stb	fp,158(sp)
 8004ebc:	003a4006 	br	80037c0 <__alt_data_end+0xff0037c0>
 8004ec0:	00c00b44 	movi	r3,45
 8004ec4:	d8c02785 	stb	r3,158(sp)
 8004ec8:	d8802a15 	stw	r2,168(sp)
 8004ecc:	dc802b17 	ldw	r18,172(sp)
 8004ed0:	d8002915 	stw	zero,164(sp)
 8004ed4:	07000b44 	movi	fp,45
 8004ed8:	003a8006 	br	80038dc <__alt_data_end+0xff0038dc>
 8004edc:	04020074 	movhi	r16,2049
 8004ee0:	84077f04 	addi	r16,r16,7676
 8004ee4:	003f4706 	br	8004c04 <__alt_data_end+0xff004c04>
 8004ee8:	d8c02d17 	ldw	r3,180(sp)
 8004eec:	d9002f17 	ldw	r4,188(sp)
 8004ef0:	18800017 	ldw	r2,0(r3)
 8004ef4:	18c00104 	addi	r3,r3,4
 8004ef8:	d8c02d15 	stw	r3,180(sp)
 8004efc:	11000015 	stw	r4,0(r2)
 8004f00:	0038dd06 	br	8003278 <__alt_data_end+0xff003278>
 8004f04:	dd802617 	ldw	r22,152(sp)
 8004f08:	00bfff44 	movi	r2,-3
 8004f0c:	b0801c16 	blt	r22,r2,8004f80 <___vfprintf_internal_r+0x1de8>
 8004f10:	d9402917 	ldw	r5,164(sp)
 8004f14:	2d801a16 	blt	r5,r22,8004f80 <___vfprintf_internal_r+0x1de8>
 8004f18:	dd803215 	stw	r22,200(sp)
 8004f1c:	003e8906 	br	8004944 <__alt_data_end+0xff004944>
 8004f20:	01020074 	movhi	r4,2049
 8004f24:	21078c84 	addi	r4,r4,7730
 8004f28:	d9002b15 	stw	r4,172(sp)
 8004f2c:	003c9106 	br	8004174 <__alt_data_end+0xff004174>
 8004f30:	e005883a 	mov	r2,fp
 8004f34:	003e7906 	br	800491c <__alt_data_end+0xff00491c>
 8004f38:	d9402917 	ldw	r5,164(sp)
 8004f3c:	df002783 	ldbu	fp,158(sp)
 8004f40:	dcc02d15 	stw	r19,180(sp)
 8004f44:	d9402a15 	stw	r5,168(sp)
 8004f48:	d9402e15 	stw	r5,184(sp)
 8004f4c:	d8002915 	stw	zero,164(sp)
 8004f50:	d8003215 	stw	zero,200(sp)
 8004f54:	003a5d06 	br	80038cc <__alt_data_end+0xff0038cc>
 8004f58:	9080004c 	andi	r2,r18,1
 8004f5c:	0039883a 	mov	fp,zero
 8004f60:	10000426 	beq	r2,zero,8004f74 <___vfprintf_internal_r+0x1ddc>
 8004f64:	00800c04 	movi	r2,48
 8004f68:	dc001dc4 	addi	r16,sp,119
 8004f6c:	d8801dc5 	stb	r2,119(sp)
 8004f70:	003b8006 	br	8003d74 <__alt_data_end+0xff003d74>
 8004f74:	d8002e15 	stw	zero,184(sp)
 8004f78:	dc001e04 	addi	r16,sp,120
 8004f7c:	003a4d06 	br	80038b4 <__alt_data_end+0xff0038b4>
 8004f80:	8c7fff84 	addi	r17,r17,-2
 8004f84:	b5bfffc4 	addi	r22,r22,-1
 8004f88:	dd802615 	stw	r22,152(sp)
 8004f8c:	dc4022c5 	stb	r17,139(sp)
 8004f90:	b000bf16 	blt	r22,zero,8005290 <___vfprintf_internal_r+0x20f8>
 8004f94:	00800ac4 	movi	r2,43
 8004f98:	d8802305 	stb	r2,140(sp)
 8004f9c:	00800244 	movi	r2,9
 8004fa0:	15807016 	blt	r2,r22,8005164 <___vfprintf_internal_r+0x1fcc>
 8004fa4:	00800c04 	movi	r2,48
 8004fa8:	b5800c04 	addi	r22,r22,48
 8004fac:	d8802345 	stb	r2,141(sp)
 8004fb0:	dd802385 	stb	r22,142(sp)
 8004fb4:	d88023c4 	addi	r2,sp,143
 8004fb8:	df0022c4 	addi	fp,sp,139
 8004fbc:	d8c03317 	ldw	r3,204(sp)
 8004fc0:	1739c83a 	sub	fp,r2,fp
 8004fc4:	d9003317 	ldw	r4,204(sp)
 8004fc8:	e0c7883a 	add	r3,fp,r3
 8004fcc:	df003a15 	stw	fp,232(sp)
 8004fd0:	d8c02e15 	stw	r3,184(sp)
 8004fd4:	00800044 	movi	r2,1
 8004fd8:	1100b30e 	bge	r2,r4,80052a8 <___vfprintf_internal_r+0x2110>
 8004fdc:	d8c02e17 	ldw	r3,184(sp)
 8004fe0:	18c00044 	addi	r3,r3,1
 8004fe4:	d8c02e15 	stw	r3,184(sp)
 8004fe8:	1805883a 	mov	r2,r3
 8004fec:	1800ac16 	blt	r3,zero,80052a0 <___vfprintf_internal_r+0x2108>
 8004ff0:	d8003215 	stw	zero,200(sp)
 8004ff4:	003e5d06 	br	800496c <__alt_data_end+0xff00496c>
 8004ff8:	d9002c17 	ldw	r4,176(sp)
 8004ffc:	d9801e04 	addi	r6,sp,120
 8005000:	b80b883a 	mov	r5,r23
 8005004:	8009e180 	call	8009e18 <__sprint_r>
 8005008:	1039651e 	bne	r2,zero,80035a0 <__alt_data_end+0xff0035a0>
 800500c:	dc402617 	ldw	r17,152(sp)
 8005010:	d8c02017 	ldw	r3,128(sp)
 8005014:	d8801f17 	ldw	r2,124(sp)
 8005018:	da000404 	addi	r8,sp,16
 800501c:	003ed606 	br	8004b78 <__alt_data_end+0xff004b78>
 8005020:	582b883a 	mov	r21,r11
 8005024:	d8002915 	stw	zero,164(sp)
 8005028:	0038bd06 	br	8003320 <__alt_data_end+0xff003320>
 800502c:	d8802917 	ldw	r2,164(sp)
 8005030:	103e071e 	bne	r2,zero,8004850 <__alt_data_end+0xff004850>
 8005034:	dc002915 	stw	r16,164(sp)
 8005038:	003e0506 	br	8004850 <__alt_data_end+0xff004850>
 800503c:	d9002917 	ldw	r4,164(sp)
 8005040:	20c00044 	addi	r3,r4,1
 8005044:	003e0f06 	br	8004884 <__alt_data_end+0xff004884>
 8005048:	01400184 	movi	r5,6
 800504c:	d9402915 	stw	r5,164(sp)
 8005050:	003dff06 	br	8004850 <__alt_data_end+0xff004850>
 8005054:	d8802104 	addi	r2,sp,132
 8005058:	d8800315 	stw	r2,12(sp)
 800505c:	d8802504 	addi	r2,sp,148
 8005060:	d8800215 	stw	r2,8(sp)
 8005064:	d8802604 	addi	r2,sp,152
 8005068:	d8800115 	stw	r2,4(sp)
 800506c:	d8802917 	ldw	r2,164(sp)
 8005070:	d9403617 	ldw	r5,216(sp)
 8005074:	d9002c17 	ldw	r4,176(sp)
 8005078:	d8800015 	stw	r2,0(sp)
 800507c:	01c000c4 	movi	r7,3
 8005080:	980d883a 	mov	r6,r19
 8005084:	da003d15 	stw	r8,244(sp)
 8005088:	80057bc0 	call	80057bc <_dtoa_r>
 800508c:	d8c02917 	ldw	r3,164(sp)
 8005090:	da003d17 	ldw	r8,244(sp)
 8005094:	1021883a 	mov	r16,r2
 8005098:	10f9883a 	add	fp,r2,r3
 800509c:	81000007 	ldb	r4,0(r16)
 80050a0:	00800c04 	movi	r2,48
 80050a4:	20805e26 	beq	r4,r2,8005220 <___vfprintf_internal_r+0x2088>
 80050a8:	d8c02617 	ldw	r3,152(sp)
 80050ac:	e0f9883a 	add	fp,fp,r3
 80050b0:	003e0a06 	br	80048dc <__alt_data_end+0xff0048dc>
 80050b4:	00c00b44 	movi	r3,45
 80050b8:	24e0003c 	xorhi	r19,r4,32768
 80050bc:	d8c02a05 	stb	r3,168(sp)
 80050c0:	003de906 	br	8004868 <__alt_data_end+0xff004868>
 80050c4:	d8c03217 	ldw	r3,200(sp)
 80050c8:	00c07a0e 	bge	zero,r3,80052b4 <___vfprintf_internal_r+0x211c>
 80050cc:	00800044 	movi	r2,1
 80050d0:	d9003317 	ldw	r4,204(sp)
 80050d4:	1105883a 	add	r2,r2,r4
 80050d8:	d8802e15 	stw	r2,184(sp)
 80050dc:	10004e16 	blt	r2,zero,8005218 <___vfprintf_internal_r+0x2080>
 80050e0:	044019c4 	movi	r17,103
 80050e4:	003e2106 	br	800496c <__alt_data_end+0xff00496c>
 80050e8:	d9002917 	ldw	r4,164(sp)
 80050ec:	d8802104 	addi	r2,sp,132
 80050f0:	d8800315 	stw	r2,12(sp)
 80050f4:	d9000015 	stw	r4,0(sp)
 80050f8:	d8802504 	addi	r2,sp,148
 80050fc:	d9403617 	ldw	r5,216(sp)
 8005100:	d9002c17 	ldw	r4,176(sp)
 8005104:	d8800215 	stw	r2,8(sp)
 8005108:	d8802604 	addi	r2,sp,152
 800510c:	d8800115 	stw	r2,4(sp)
 8005110:	01c000c4 	movi	r7,3
 8005114:	980d883a 	mov	r6,r19
 8005118:	da003d15 	stw	r8,244(sp)
 800511c:	80057bc0 	call	80057bc <_dtoa_r>
 8005120:	d8c02917 	ldw	r3,164(sp)
 8005124:	da003d17 	ldw	r8,244(sp)
 8005128:	1021883a 	mov	r16,r2
 800512c:	00801184 	movi	r2,70
 8005130:	80f9883a 	add	fp,r16,r3
 8005134:	88bfd926 	beq	r17,r2,800509c <__alt_data_end+0xff00509c>
 8005138:	003de806 	br	80048dc <__alt_data_end+0xff0048dc>
 800513c:	d9002917 	ldw	r4,164(sp)
 8005140:	00c04d0e 	bge	zero,r3,8005278 <___vfprintf_internal_r+0x20e0>
 8005144:	2000441e 	bne	r4,zero,8005258 <___vfprintf_internal_r+0x20c0>
 8005148:	9480004c 	andi	r18,r18,1
 800514c:	9000421e 	bne	r18,zero,8005258 <___vfprintf_internal_r+0x20c0>
 8005150:	1805883a 	mov	r2,r3
 8005154:	18007016 	blt	r3,zero,8005318 <___vfprintf_internal_r+0x2180>
 8005158:	d8c03217 	ldw	r3,200(sp)
 800515c:	d8c02e15 	stw	r3,184(sp)
 8005160:	003e0206 	br	800496c <__alt_data_end+0xff00496c>
 8005164:	df0022c4 	addi	fp,sp,139
 8005168:	dc002915 	stw	r16,164(sp)
 800516c:	4027883a 	mov	r19,r8
 8005170:	e021883a 	mov	r16,fp
 8005174:	b009883a 	mov	r4,r22
 8005178:	01400284 	movi	r5,10
 800517c:	80021440 	call	8002144 <__modsi3>
 8005180:	10800c04 	addi	r2,r2,48
 8005184:	843fffc4 	addi	r16,r16,-1
 8005188:	b009883a 	mov	r4,r22
 800518c:	01400284 	movi	r5,10
 8005190:	80800005 	stb	r2,0(r16)
 8005194:	80020c00 	call	80020c0 <__divsi3>
 8005198:	102d883a 	mov	r22,r2
 800519c:	00800244 	movi	r2,9
 80051a0:	15bff416 	blt	r2,r22,8005174 <__alt_data_end+0xff005174>
 80051a4:	9811883a 	mov	r8,r19
 80051a8:	b0800c04 	addi	r2,r22,48
 80051ac:	8027883a 	mov	r19,r16
 80051b0:	997fffc4 	addi	r5,r19,-1
 80051b4:	98bfffc5 	stb	r2,-1(r19)
 80051b8:	dc002917 	ldw	r16,164(sp)
 80051bc:	2f006a2e 	bgeu	r5,fp,8005368 <___vfprintf_internal_r+0x21d0>
 80051c0:	d9c02384 	addi	r7,sp,142
 80051c4:	3ccfc83a 	sub	r7,r7,r19
 80051c8:	d9002344 	addi	r4,sp,141
 80051cc:	e1cf883a 	add	r7,fp,r7
 80051d0:	00000106 	br	80051d8 <___vfprintf_internal_r+0x2040>
 80051d4:	28800003 	ldbu	r2,0(r5)
 80051d8:	20800005 	stb	r2,0(r4)
 80051dc:	21000044 	addi	r4,r4,1
 80051e0:	29400044 	addi	r5,r5,1
 80051e4:	393ffb1e 	bne	r7,r4,80051d4 <__alt_data_end+0xff0051d4>
 80051e8:	d8802304 	addi	r2,sp,140
 80051ec:	14c5c83a 	sub	r2,r2,r19
 80051f0:	d8c02344 	addi	r3,sp,141
 80051f4:	1885883a 	add	r2,r3,r2
 80051f8:	003f7006 	br	8004fbc <__alt_data_end+0xff004fbc>
 80051fc:	0005883a 	mov	r2,zero
 8005200:	003f0f06 	br	8004e40 <__alt_data_end+0xff004e40>
 8005204:	d8c03217 	ldw	r3,200(sp)
 8005208:	18c00044 	addi	r3,r3,1
 800520c:	d8c02e15 	stw	r3,184(sp)
 8005210:	1805883a 	mov	r2,r3
 8005214:	183fb20e 	bge	r3,zero,80050e0 <__alt_data_end+0xff0050e0>
 8005218:	0005883a 	mov	r2,zero
 800521c:	003fb006 	br	80050e0 <__alt_data_end+0xff0050e0>
 8005220:	d9003617 	ldw	r4,216(sp)
 8005224:	000d883a 	mov	r6,zero
 8005228:	000f883a 	mov	r7,zero
 800522c:	980b883a 	mov	r5,r19
 8005230:	d8c03c15 	stw	r3,240(sp)
 8005234:	da003d15 	stw	r8,244(sp)
 8005238:	800e4580 	call	800e458 <__eqdf2>
 800523c:	d8c03c17 	ldw	r3,240(sp)
 8005240:	da003d17 	ldw	r8,244(sp)
 8005244:	103f9826 	beq	r2,zero,80050a8 <__alt_data_end+0xff0050a8>
 8005248:	00800044 	movi	r2,1
 800524c:	10c7c83a 	sub	r3,r2,r3
 8005250:	d8c02615 	stw	r3,152(sp)
 8005254:	003f9506 	br	80050ac <__alt_data_end+0xff0050ac>
 8005258:	d9002917 	ldw	r4,164(sp)
 800525c:	d8c03217 	ldw	r3,200(sp)
 8005260:	20800044 	addi	r2,r4,1
 8005264:	1885883a 	add	r2,r3,r2
 8005268:	d8802e15 	stw	r2,184(sp)
 800526c:	103dbf0e 	bge	r2,zero,800496c <__alt_data_end+0xff00496c>
 8005270:	0005883a 	mov	r2,zero
 8005274:	003dbd06 	br	800496c <__alt_data_end+0xff00496c>
 8005278:	2000211e 	bne	r4,zero,8005300 <___vfprintf_internal_r+0x2168>
 800527c:	9480004c 	andi	r18,r18,1
 8005280:	90001f1e 	bne	r18,zero,8005300 <___vfprintf_internal_r+0x2168>
 8005284:	00800044 	movi	r2,1
 8005288:	d8802e15 	stw	r2,184(sp)
 800528c:	003db706 	br	800496c <__alt_data_end+0xff00496c>
 8005290:	00800b44 	movi	r2,45
 8005294:	05adc83a 	sub	r22,zero,r22
 8005298:	d8802305 	stb	r2,140(sp)
 800529c:	003f3f06 	br	8004f9c <__alt_data_end+0xff004f9c>
 80052a0:	0005883a 	mov	r2,zero
 80052a4:	003f5206 	br	8004ff0 <__alt_data_end+0xff004ff0>
 80052a8:	90a4703a 	and	r18,r18,r2
 80052ac:	903f4e26 	beq	r18,zero,8004fe8 <__alt_data_end+0xff004fe8>
 80052b0:	003f4a06 	br	8004fdc <__alt_data_end+0xff004fdc>
 80052b4:	00800084 	movi	r2,2
 80052b8:	10c5c83a 	sub	r2,r2,r3
 80052bc:	003f8406 	br	80050d0 <__alt_data_end+0xff0050d0>
 80052c0:	d8802d17 	ldw	r2,180(sp)
 80052c4:	d9002d17 	ldw	r4,180(sp)
 80052c8:	ac400043 	ldbu	r17,1(r21)
 80052cc:	10800017 	ldw	r2,0(r2)
 80052d0:	582b883a 	mov	r21,r11
 80052d4:	d8802915 	stw	r2,164(sp)
 80052d8:	20800104 	addi	r2,r4,4
 80052dc:	d9002917 	ldw	r4,164(sp)
 80052e0:	d8802d15 	stw	r2,180(sp)
 80052e4:	203e7a0e 	bge	r4,zero,8004cd0 <__alt_data_end+0xff004cd0>
 80052e8:	8c403fcc 	andi	r17,r17,255
 80052ec:	00bfffc4 	movi	r2,-1
 80052f0:	8c40201c 	xori	r17,r17,128
 80052f4:	d8802915 	stw	r2,164(sp)
 80052f8:	8c7fe004 	addi	r17,r17,-128
 80052fc:	00380706 	br	800331c <__alt_data_end+0xff00331c>
 8005300:	d8c02917 	ldw	r3,164(sp)
 8005304:	18c00084 	addi	r3,r3,2
 8005308:	d8c02e15 	stw	r3,184(sp)
 800530c:	1805883a 	mov	r2,r3
 8005310:	183d960e 	bge	r3,zero,800496c <__alt_data_end+0xff00496c>
 8005314:	003fd606 	br	8005270 <__alt_data_end+0xff005270>
 8005318:	0005883a 	mov	r2,zero
 800531c:	003f8e06 	br	8005158 <__alt_data_end+0xff005158>
 8005320:	9080004c 	andi	r2,r18,1
 8005324:	103f811e 	bne	r2,zero,800512c <__alt_data_end+0xff00512c>
 8005328:	d8802117 	ldw	r2,132(sp)
 800532c:	1405c83a 	sub	r2,r2,r16
 8005330:	d8803315 	stw	r2,204(sp)
 8005334:	b47ef326 	beq	r22,r17,8004f04 <__alt_data_end+0xff004f04>
 8005338:	dd802617 	ldw	r22,152(sp)
 800533c:	003f1106 	br	8004f84 <__alt_data_end+0xff004f84>
 8005340:	d9c02785 	stb	r7,158(sp)
 8005344:	00390406 	br	8003758 <__alt_data_end+0xff003758>
 8005348:	d9c02785 	stb	r7,158(sp)
 800534c:	0038d306 	br	800369c <__alt_data_end+0xff00369c>
 8005350:	d9c02785 	stb	r7,158(sp)
 8005354:	003a6106 	br	8003cdc <__alt_data_end+0xff003cdc>
 8005358:	d9c02785 	stb	r7,158(sp)
 800535c:	003af806 	br	8003f40 <__alt_data_end+0xff003f40>
 8005360:	0005883a 	mov	r2,zero
 8005364:	003d7e06 	br	8004960 <__alt_data_end+0xff004960>
 8005368:	d8802344 	addi	r2,sp,141
 800536c:	003f1306 	br	8004fbc <__alt_data_end+0xff004fbc>
 8005370:	d9c02785 	stb	r7,158(sp)
 8005374:	00392306 	br	8003804 <__alt_data_end+0xff003804>
 8005378:	d9c02785 	stb	r7,158(sp)
 800537c:	003aa906 	br	8003e24 <__alt_data_end+0xff003e24>
 8005380:	d9c02785 	stb	r7,158(sp)
 8005384:	003a3d06 	br	8003c7c <__alt_data_end+0xff003c7c>
 8005388:	d9c02785 	stb	r7,158(sp)
 800538c:	003aca06 	br	8003eb8 <__alt_data_end+0xff003eb8>

08005390 <__vfprintf_internal>:
 8005390:	00820074 	movhi	r2,2049
 8005394:	108eaa04 	addi	r2,r2,15016
 8005398:	300f883a 	mov	r7,r6
 800539c:	280d883a 	mov	r6,r5
 80053a0:	200b883a 	mov	r5,r4
 80053a4:	11000017 	ldw	r4,0(r2)
 80053a8:	80031981 	jmpi	8003198 <___vfprintf_internal_r>

080053ac <__sbprintf>:
 80053ac:	2880030b 	ldhu	r2,12(r5)
 80053b0:	2ac01917 	ldw	r11,100(r5)
 80053b4:	2a80038b 	ldhu	r10,14(r5)
 80053b8:	2a400717 	ldw	r9,28(r5)
 80053bc:	2a000917 	ldw	r8,36(r5)
 80053c0:	defee204 	addi	sp,sp,-1144
 80053c4:	00c10004 	movi	r3,1024
 80053c8:	dc011a15 	stw	r16,1128(sp)
 80053cc:	10bfff4c 	andi	r2,r2,65533
 80053d0:	2821883a 	mov	r16,r5
 80053d4:	d8cb883a 	add	r5,sp,r3
 80053d8:	dc811c15 	stw	r18,1136(sp)
 80053dc:	dc411b15 	stw	r17,1132(sp)
 80053e0:	dfc11d15 	stw	ra,1140(sp)
 80053e4:	2025883a 	mov	r18,r4
 80053e8:	d881030d 	sth	r2,1036(sp)
 80053ec:	dac11915 	stw	r11,1124(sp)
 80053f0:	da81038d 	sth	r10,1038(sp)
 80053f4:	da410715 	stw	r9,1052(sp)
 80053f8:	da010915 	stw	r8,1060(sp)
 80053fc:	dec10015 	stw	sp,1024(sp)
 8005400:	dec10415 	stw	sp,1040(sp)
 8005404:	d8c10215 	stw	r3,1032(sp)
 8005408:	d8c10515 	stw	r3,1044(sp)
 800540c:	d8010615 	stw	zero,1048(sp)
 8005410:	80031980 	call	8003198 <___vfprintf_internal_r>
 8005414:	1023883a 	mov	r17,r2
 8005418:	10000416 	blt	r2,zero,800542c <__sbprintf+0x80>
 800541c:	d9410004 	addi	r5,sp,1024
 8005420:	9009883a 	mov	r4,r18
 8005424:	80070600 	call	8007060 <_fflush_r>
 8005428:	10000d1e 	bne	r2,zero,8005460 <__sbprintf+0xb4>
 800542c:	d881030b 	ldhu	r2,1036(sp)
 8005430:	1080100c 	andi	r2,r2,64
 8005434:	10000326 	beq	r2,zero,8005444 <__sbprintf+0x98>
 8005438:	8080030b 	ldhu	r2,12(r16)
 800543c:	10801014 	ori	r2,r2,64
 8005440:	8080030d 	sth	r2,12(r16)
 8005444:	8805883a 	mov	r2,r17
 8005448:	dfc11d17 	ldw	ra,1140(sp)
 800544c:	dc811c17 	ldw	r18,1136(sp)
 8005450:	dc411b17 	ldw	r17,1132(sp)
 8005454:	dc011a17 	ldw	r16,1128(sp)
 8005458:	dec11e04 	addi	sp,sp,1144
 800545c:	f800283a 	ret
 8005460:	047fffc4 	movi	r17,-1
 8005464:	003ff106 	br	800542c <__alt_data_end+0xff00542c>

08005468 <__swsetup_r>:
 8005468:	00820074 	movhi	r2,2049
 800546c:	defffd04 	addi	sp,sp,-12
 8005470:	108eaa04 	addi	r2,r2,15016
 8005474:	dc400115 	stw	r17,4(sp)
 8005478:	2023883a 	mov	r17,r4
 800547c:	11000017 	ldw	r4,0(r2)
 8005480:	dc000015 	stw	r16,0(sp)
 8005484:	dfc00215 	stw	ra,8(sp)
 8005488:	2821883a 	mov	r16,r5
 800548c:	20000226 	beq	r4,zero,8005498 <__swsetup_r+0x30>
 8005490:	20800e17 	ldw	r2,56(r4)
 8005494:	10003126 	beq	r2,zero,800555c <__swsetup_r+0xf4>
 8005498:	8080030b 	ldhu	r2,12(r16)
 800549c:	10c0020c 	andi	r3,r2,8
 80054a0:	1009883a 	mov	r4,r2
 80054a4:	18000f26 	beq	r3,zero,80054e4 <__swsetup_r+0x7c>
 80054a8:	80c00417 	ldw	r3,16(r16)
 80054ac:	18001526 	beq	r3,zero,8005504 <__swsetup_r+0x9c>
 80054b0:	1100004c 	andi	r4,r2,1
 80054b4:	20001c1e 	bne	r4,zero,8005528 <__swsetup_r+0xc0>
 80054b8:	1080008c 	andi	r2,r2,2
 80054bc:	1000291e 	bne	r2,zero,8005564 <__swsetup_r+0xfc>
 80054c0:	80800517 	ldw	r2,20(r16)
 80054c4:	80800215 	stw	r2,8(r16)
 80054c8:	18001c26 	beq	r3,zero,800553c <__swsetup_r+0xd4>
 80054cc:	0005883a 	mov	r2,zero
 80054d0:	dfc00217 	ldw	ra,8(sp)
 80054d4:	dc400117 	ldw	r17,4(sp)
 80054d8:	dc000017 	ldw	r16,0(sp)
 80054dc:	dec00304 	addi	sp,sp,12
 80054e0:	f800283a 	ret
 80054e4:	2080040c 	andi	r2,r4,16
 80054e8:	10002e26 	beq	r2,zero,80055a4 <__swsetup_r+0x13c>
 80054ec:	2080010c 	andi	r2,r4,4
 80054f0:	10001e1e 	bne	r2,zero,800556c <__swsetup_r+0x104>
 80054f4:	80c00417 	ldw	r3,16(r16)
 80054f8:	20800214 	ori	r2,r4,8
 80054fc:	8080030d 	sth	r2,12(r16)
 8005500:	183feb1e 	bne	r3,zero,80054b0 <__alt_data_end+0xff0054b0>
 8005504:	1100a00c 	andi	r4,r2,640
 8005508:	01408004 	movi	r5,512
 800550c:	217fe826 	beq	r4,r5,80054b0 <__alt_data_end+0xff0054b0>
 8005510:	800b883a 	mov	r5,r16
 8005514:	8809883a 	mov	r4,r17
 8005518:	8007b240 	call	8007b24 <__smakebuf_r>
 800551c:	8080030b 	ldhu	r2,12(r16)
 8005520:	80c00417 	ldw	r3,16(r16)
 8005524:	003fe206 	br	80054b0 <__alt_data_end+0xff0054b0>
 8005528:	80800517 	ldw	r2,20(r16)
 800552c:	80000215 	stw	zero,8(r16)
 8005530:	0085c83a 	sub	r2,zero,r2
 8005534:	80800615 	stw	r2,24(r16)
 8005538:	183fe41e 	bne	r3,zero,80054cc <__alt_data_end+0xff0054cc>
 800553c:	80c0030b 	ldhu	r3,12(r16)
 8005540:	0005883a 	mov	r2,zero
 8005544:	1900200c 	andi	r4,r3,128
 8005548:	203fe126 	beq	r4,zero,80054d0 <__alt_data_end+0xff0054d0>
 800554c:	18c01014 	ori	r3,r3,64
 8005550:	80c0030d 	sth	r3,12(r16)
 8005554:	00bfffc4 	movi	r2,-1
 8005558:	003fdd06 	br	80054d0 <__alt_data_end+0xff0054d0>
 800555c:	800743c0 	call	800743c <__sinit>
 8005560:	003fcd06 	br	8005498 <__alt_data_end+0xff005498>
 8005564:	0005883a 	mov	r2,zero
 8005568:	003fd606 	br	80054c4 <__alt_data_end+0xff0054c4>
 800556c:	81400c17 	ldw	r5,48(r16)
 8005570:	28000626 	beq	r5,zero,800558c <__swsetup_r+0x124>
 8005574:	80801004 	addi	r2,r16,64
 8005578:	28800326 	beq	r5,r2,8005588 <__swsetup_r+0x120>
 800557c:	8809883a 	mov	r4,r17
 8005580:	80075b00 	call	80075b0 <_free_r>
 8005584:	8100030b 	ldhu	r4,12(r16)
 8005588:	80000c15 	stw	zero,48(r16)
 800558c:	80c00417 	ldw	r3,16(r16)
 8005590:	00bff6c4 	movi	r2,-37
 8005594:	1108703a 	and	r4,r2,r4
 8005598:	80000115 	stw	zero,4(r16)
 800559c:	80c00015 	stw	r3,0(r16)
 80055a0:	003fd506 	br	80054f8 <__alt_data_end+0xff0054f8>
 80055a4:	00800244 	movi	r2,9
 80055a8:	88800015 	stw	r2,0(r17)
 80055ac:	20801014 	ori	r2,r4,64
 80055b0:	8080030d 	sth	r2,12(r16)
 80055b4:	00bfffc4 	movi	r2,-1
 80055b8:	003fc506 	br	80054d0 <__alt_data_end+0xff0054d0>

080055bc <quorem>:
 80055bc:	defff704 	addi	sp,sp,-36
 80055c0:	dc800215 	stw	r18,8(sp)
 80055c4:	20800417 	ldw	r2,16(r4)
 80055c8:	2c800417 	ldw	r18,16(r5)
 80055cc:	dfc00815 	stw	ra,32(sp)
 80055d0:	ddc00715 	stw	r23,28(sp)
 80055d4:	dd800615 	stw	r22,24(sp)
 80055d8:	dd400515 	stw	r21,20(sp)
 80055dc:	dd000415 	stw	r20,16(sp)
 80055e0:	dcc00315 	stw	r19,12(sp)
 80055e4:	dc400115 	stw	r17,4(sp)
 80055e8:	dc000015 	stw	r16,0(sp)
 80055ec:	14807116 	blt	r2,r18,80057b4 <quorem+0x1f8>
 80055f0:	94bfffc4 	addi	r18,r18,-1
 80055f4:	94ad883a 	add	r22,r18,r18
 80055f8:	b5ad883a 	add	r22,r22,r22
 80055fc:	2c400504 	addi	r17,r5,20
 8005600:	8da9883a 	add	r20,r17,r22
 8005604:	25400504 	addi	r21,r4,20
 8005608:	282f883a 	mov	r23,r5
 800560c:	adad883a 	add	r22,r21,r22
 8005610:	a1400017 	ldw	r5,0(r20)
 8005614:	2021883a 	mov	r16,r4
 8005618:	b1000017 	ldw	r4,0(r22)
 800561c:	29400044 	addi	r5,r5,1
 8005620:	80021b80 	call	80021b8 <__udivsi3>
 8005624:	1027883a 	mov	r19,r2
 8005628:	10002c26 	beq	r2,zero,80056dc <quorem+0x120>
 800562c:	a813883a 	mov	r9,r21
 8005630:	880b883a 	mov	r5,r17
 8005634:	0009883a 	mov	r4,zero
 8005638:	000d883a 	mov	r6,zero
 800563c:	2a000017 	ldw	r8,0(r5)
 8005640:	49c00017 	ldw	r7,0(r9)
 8005644:	29400104 	addi	r5,r5,4
 8005648:	40bfffcc 	andi	r2,r8,65535
 800564c:	14c5383a 	mul	r2,r2,r19
 8005650:	4010d43a 	srli	r8,r8,16
 8005654:	38ffffcc 	andi	r3,r7,65535
 8005658:	1105883a 	add	r2,r2,r4
 800565c:	1008d43a 	srli	r4,r2,16
 8005660:	44d1383a 	mul	r8,r8,r19
 8005664:	198d883a 	add	r6,r3,r6
 8005668:	10ffffcc 	andi	r3,r2,65535
 800566c:	30c7c83a 	sub	r3,r6,r3
 8005670:	380ed43a 	srli	r7,r7,16
 8005674:	4105883a 	add	r2,r8,r4
 8005678:	180dd43a 	srai	r6,r3,16
 800567c:	113fffcc 	andi	r4,r2,65535
 8005680:	390fc83a 	sub	r7,r7,r4
 8005684:	398d883a 	add	r6,r7,r6
 8005688:	300e943a 	slli	r7,r6,16
 800568c:	18ffffcc 	andi	r3,r3,65535
 8005690:	1008d43a 	srli	r4,r2,16
 8005694:	38ceb03a 	or	r7,r7,r3
 8005698:	49c00015 	stw	r7,0(r9)
 800569c:	300dd43a 	srai	r6,r6,16
 80056a0:	4a400104 	addi	r9,r9,4
 80056a4:	a17fe52e 	bgeu	r20,r5,800563c <__alt_data_end+0xff00563c>
 80056a8:	b0800017 	ldw	r2,0(r22)
 80056ac:	10000b1e 	bne	r2,zero,80056dc <quorem+0x120>
 80056b0:	b0bfff04 	addi	r2,r22,-4
 80056b4:	a880082e 	bgeu	r21,r2,80056d8 <quorem+0x11c>
 80056b8:	b0ffff17 	ldw	r3,-4(r22)
 80056bc:	18000326 	beq	r3,zero,80056cc <quorem+0x110>
 80056c0:	00000506 	br	80056d8 <quorem+0x11c>
 80056c4:	10c00017 	ldw	r3,0(r2)
 80056c8:	1800031e 	bne	r3,zero,80056d8 <quorem+0x11c>
 80056cc:	10bfff04 	addi	r2,r2,-4
 80056d0:	94bfffc4 	addi	r18,r18,-1
 80056d4:	a8bffb36 	bltu	r21,r2,80056c4 <__alt_data_end+0xff0056c4>
 80056d8:	84800415 	stw	r18,16(r16)
 80056dc:	b80b883a 	mov	r5,r23
 80056e0:	8009883a 	mov	r4,r16
 80056e4:	80091080 	call	8009108 <__mcmp>
 80056e8:	10002616 	blt	r2,zero,8005784 <quorem+0x1c8>
 80056ec:	9cc00044 	addi	r19,r19,1
 80056f0:	a805883a 	mov	r2,r21
 80056f4:	000b883a 	mov	r5,zero
 80056f8:	11000017 	ldw	r4,0(r2)
 80056fc:	89800017 	ldw	r6,0(r17)
 8005700:	10800104 	addi	r2,r2,4
 8005704:	20ffffcc 	andi	r3,r4,65535
 8005708:	194b883a 	add	r5,r3,r5
 800570c:	30ffffcc 	andi	r3,r6,65535
 8005710:	28c7c83a 	sub	r3,r5,r3
 8005714:	300cd43a 	srli	r6,r6,16
 8005718:	2008d43a 	srli	r4,r4,16
 800571c:	180bd43a 	srai	r5,r3,16
 8005720:	18ffffcc 	andi	r3,r3,65535
 8005724:	2189c83a 	sub	r4,r4,r6
 8005728:	2149883a 	add	r4,r4,r5
 800572c:	200c943a 	slli	r6,r4,16
 8005730:	8c400104 	addi	r17,r17,4
 8005734:	200bd43a 	srai	r5,r4,16
 8005738:	30c6b03a 	or	r3,r6,r3
 800573c:	10ffff15 	stw	r3,-4(r2)
 8005740:	a47fed2e 	bgeu	r20,r17,80056f8 <__alt_data_end+0xff0056f8>
 8005744:	9485883a 	add	r2,r18,r18
 8005748:	1085883a 	add	r2,r2,r2
 800574c:	a887883a 	add	r3,r21,r2
 8005750:	18800017 	ldw	r2,0(r3)
 8005754:	10000b1e 	bne	r2,zero,8005784 <quorem+0x1c8>
 8005758:	18bfff04 	addi	r2,r3,-4
 800575c:	a880082e 	bgeu	r21,r2,8005780 <quorem+0x1c4>
 8005760:	18ffff17 	ldw	r3,-4(r3)
 8005764:	18000326 	beq	r3,zero,8005774 <quorem+0x1b8>
 8005768:	00000506 	br	8005780 <quorem+0x1c4>
 800576c:	10c00017 	ldw	r3,0(r2)
 8005770:	1800031e 	bne	r3,zero,8005780 <quorem+0x1c4>
 8005774:	10bfff04 	addi	r2,r2,-4
 8005778:	94bfffc4 	addi	r18,r18,-1
 800577c:	a8bffb36 	bltu	r21,r2,800576c <__alt_data_end+0xff00576c>
 8005780:	84800415 	stw	r18,16(r16)
 8005784:	9805883a 	mov	r2,r19
 8005788:	dfc00817 	ldw	ra,32(sp)
 800578c:	ddc00717 	ldw	r23,28(sp)
 8005790:	dd800617 	ldw	r22,24(sp)
 8005794:	dd400517 	ldw	r21,20(sp)
 8005798:	dd000417 	ldw	r20,16(sp)
 800579c:	dcc00317 	ldw	r19,12(sp)
 80057a0:	dc800217 	ldw	r18,8(sp)
 80057a4:	dc400117 	ldw	r17,4(sp)
 80057a8:	dc000017 	ldw	r16,0(sp)
 80057ac:	dec00904 	addi	sp,sp,36
 80057b0:	f800283a 	ret
 80057b4:	0005883a 	mov	r2,zero
 80057b8:	003ff306 	br	8005788 <__alt_data_end+0xff005788>

080057bc <_dtoa_r>:
 80057bc:	20801017 	ldw	r2,64(r4)
 80057c0:	deffde04 	addi	sp,sp,-136
 80057c4:	df002015 	stw	fp,128(sp)
 80057c8:	dcc01b15 	stw	r19,108(sp)
 80057cc:	dc801a15 	stw	r18,104(sp)
 80057d0:	dc401915 	stw	r17,100(sp)
 80057d4:	dc001815 	stw	r16,96(sp)
 80057d8:	dfc02115 	stw	ra,132(sp)
 80057dc:	ddc01f15 	stw	r23,124(sp)
 80057e0:	dd801e15 	stw	r22,120(sp)
 80057e4:	dd401d15 	stw	r21,116(sp)
 80057e8:	dd001c15 	stw	r20,112(sp)
 80057ec:	d9c00315 	stw	r7,12(sp)
 80057f0:	2039883a 	mov	fp,r4
 80057f4:	3023883a 	mov	r17,r6
 80057f8:	2825883a 	mov	r18,r5
 80057fc:	dc002417 	ldw	r16,144(sp)
 8005800:	3027883a 	mov	r19,r6
 8005804:	10000826 	beq	r2,zero,8005828 <_dtoa_r+0x6c>
 8005808:	21801117 	ldw	r6,68(r4)
 800580c:	00c00044 	movi	r3,1
 8005810:	100b883a 	mov	r5,r2
 8005814:	1986983a 	sll	r3,r3,r6
 8005818:	11800115 	stw	r6,4(r2)
 800581c:	10c00215 	stw	r3,8(r2)
 8005820:	80088e80 	call	80088e8 <_Bfree>
 8005824:	e0001015 	stw	zero,64(fp)
 8005828:	88002e16 	blt	r17,zero,80058e4 <_dtoa_r+0x128>
 800582c:	80000015 	stw	zero,0(r16)
 8005830:	889ffc2c 	andhi	r2,r17,32752
 8005834:	00dffc34 	movhi	r3,32752
 8005838:	10c01c26 	beq	r2,r3,80058ac <_dtoa_r+0xf0>
 800583c:	000d883a 	mov	r6,zero
 8005840:	000f883a 	mov	r7,zero
 8005844:	9009883a 	mov	r4,r18
 8005848:	980b883a 	mov	r5,r19
 800584c:	800e4580 	call	800e458 <__eqdf2>
 8005850:	10002b1e 	bne	r2,zero,8005900 <_dtoa_r+0x144>
 8005854:	d9c02317 	ldw	r7,140(sp)
 8005858:	00800044 	movi	r2,1
 800585c:	38800015 	stw	r2,0(r7)
 8005860:	d8802517 	ldw	r2,148(sp)
 8005864:	10019e26 	beq	r2,zero,8005ee0 <_dtoa_r+0x724>
 8005868:	d8c02517 	ldw	r3,148(sp)
 800586c:	00820074 	movhi	r2,2049
 8005870:	10878c44 	addi	r2,r2,7729
 8005874:	18800015 	stw	r2,0(r3)
 8005878:	10bfffc4 	addi	r2,r2,-1
 800587c:	dfc02117 	ldw	ra,132(sp)
 8005880:	df002017 	ldw	fp,128(sp)
 8005884:	ddc01f17 	ldw	r23,124(sp)
 8005888:	dd801e17 	ldw	r22,120(sp)
 800588c:	dd401d17 	ldw	r21,116(sp)
 8005890:	dd001c17 	ldw	r20,112(sp)
 8005894:	dcc01b17 	ldw	r19,108(sp)
 8005898:	dc801a17 	ldw	r18,104(sp)
 800589c:	dc401917 	ldw	r17,100(sp)
 80058a0:	dc001817 	ldw	r16,96(sp)
 80058a4:	dec02204 	addi	sp,sp,136
 80058a8:	f800283a 	ret
 80058ac:	d8c02317 	ldw	r3,140(sp)
 80058b0:	0089c3c4 	movi	r2,9999
 80058b4:	18800015 	stw	r2,0(r3)
 80058b8:	90017726 	beq	r18,zero,8005e98 <_dtoa_r+0x6dc>
 80058bc:	00820074 	movhi	r2,2049
 80058c0:	10879804 	addi	r2,r2,7776
 80058c4:	d9002517 	ldw	r4,148(sp)
 80058c8:	203fec26 	beq	r4,zero,800587c <__alt_data_end+0xff00587c>
 80058cc:	10c000c7 	ldb	r3,3(r2)
 80058d0:	1801781e 	bne	r3,zero,8005eb4 <_dtoa_r+0x6f8>
 80058d4:	10c000c4 	addi	r3,r2,3
 80058d8:	d9802517 	ldw	r6,148(sp)
 80058dc:	30c00015 	stw	r3,0(r6)
 80058e0:	003fe606 	br	800587c <__alt_data_end+0xff00587c>
 80058e4:	04e00034 	movhi	r19,32768
 80058e8:	9cffffc4 	addi	r19,r19,-1
 80058ec:	00800044 	movi	r2,1
 80058f0:	8ce6703a 	and	r19,r17,r19
 80058f4:	80800015 	stw	r2,0(r16)
 80058f8:	9823883a 	mov	r17,r19
 80058fc:	003fcc06 	br	8005830 <__alt_data_end+0xff005830>
 8005900:	d8800204 	addi	r2,sp,8
 8005904:	d8800015 	stw	r2,0(sp)
 8005908:	d9c00104 	addi	r7,sp,4
 800590c:	900b883a 	mov	r5,r18
 8005910:	980d883a 	mov	r6,r19
 8005914:	e009883a 	mov	r4,fp
 8005918:	8820d53a 	srli	r16,r17,20
 800591c:	80094d40 	call	80094d4 <__d2b>
 8005920:	d8800915 	stw	r2,36(sp)
 8005924:	8001651e 	bne	r16,zero,8005ebc <_dtoa_r+0x700>
 8005928:	dd800217 	ldw	r22,8(sp)
 800592c:	dc000117 	ldw	r16,4(sp)
 8005930:	00800804 	movi	r2,32
 8005934:	b421883a 	add	r16,r22,r16
 8005938:	80c10c84 	addi	r3,r16,1074
 800593c:	10c2d10e 	bge	r2,r3,8006484 <_dtoa_r+0xcc8>
 8005940:	00801004 	movi	r2,64
 8005944:	81010484 	addi	r4,r16,1042
 8005948:	10c7c83a 	sub	r3,r2,r3
 800594c:	9108d83a 	srl	r4,r18,r4
 8005950:	88e2983a 	sll	r17,r17,r3
 8005954:	2448b03a 	or	r4,r4,r17
 8005958:	800f02c0 	call	800f02c <__floatunsidf>
 800595c:	017f8434 	movhi	r5,65040
 8005960:	01800044 	movi	r6,1
 8005964:	1009883a 	mov	r4,r2
 8005968:	194b883a 	add	r5,r3,r5
 800596c:	843fffc4 	addi	r16,r16,-1
 8005970:	d9801115 	stw	r6,68(sp)
 8005974:	000d883a 	mov	r6,zero
 8005978:	01cffe34 	movhi	r7,16376
 800597c:	800e6b00 	call	800e6b0 <__subdf3>
 8005980:	0198dbf4 	movhi	r6,25455
 8005984:	01cff4f4 	movhi	r7,16339
 8005988:	3190d844 	addi	r6,r6,17249
 800598c:	39e1e9c4 	addi	r7,r7,-30809
 8005990:	1009883a 	mov	r4,r2
 8005994:	180b883a 	mov	r5,r3
 8005998:	80027a40 	call	80027a4 <__muldf3>
 800599c:	01a2d874 	movhi	r6,35681
 80059a0:	01cff1f4 	movhi	r7,16327
 80059a4:	31b22cc4 	addi	r6,r6,-14157
 80059a8:	39e28a04 	addi	r7,r7,-30168
 80059ac:	180b883a 	mov	r5,r3
 80059b0:	1009883a 	mov	r4,r2
 80059b4:	800d2c40 	call	800d2c4 <__adddf3>
 80059b8:	8009883a 	mov	r4,r16
 80059bc:	1029883a 	mov	r20,r2
 80059c0:	1823883a 	mov	r17,r3
 80059c4:	8002ebc0 	call	8002ebc <__floatsidf>
 80059c8:	019427f4 	movhi	r6,20639
 80059cc:	01cff4f4 	movhi	r7,16339
 80059d0:	319e7ec4 	addi	r6,r6,31227
 80059d4:	39d104c4 	addi	r7,r7,17427
 80059d8:	1009883a 	mov	r4,r2
 80059dc:	180b883a 	mov	r5,r3
 80059e0:	80027a40 	call	80027a4 <__muldf3>
 80059e4:	100d883a 	mov	r6,r2
 80059e8:	180f883a 	mov	r7,r3
 80059ec:	a009883a 	mov	r4,r20
 80059f0:	880b883a 	mov	r5,r17
 80059f4:	800d2c40 	call	800d2c4 <__adddf3>
 80059f8:	1009883a 	mov	r4,r2
 80059fc:	180b883a 	mov	r5,r3
 8005a00:	1029883a 	mov	r20,r2
 8005a04:	1823883a 	mov	r17,r3
 8005a08:	800efac0 	call	800efac <__fixdfsi>
 8005a0c:	000d883a 	mov	r6,zero
 8005a10:	000f883a 	mov	r7,zero
 8005a14:	a009883a 	mov	r4,r20
 8005a18:	880b883a 	mov	r5,r17
 8005a1c:	d8800515 	stw	r2,20(sp)
 8005a20:	800e5bc0 	call	800e5bc <__ledf2>
 8005a24:	10028716 	blt	r2,zero,8006444 <_dtoa_r+0xc88>
 8005a28:	d8c00517 	ldw	r3,20(sp)
 8005a2c:	00800584 	movi	r2,22
 8005a30:	10c27536 	bltu	r2,r3,8006408 <_dtoa_r+0xc4c>
 8005a34:	180490fa 	slli	r2,r3,3
 8005a38:	00c20074 	movhi	r3,2049
 8005a3c:	18c7b404 	addi	r3,r3,7888
 8005a40:	1885883a 	add	r2,r3,r2
 8005a44:	11000017 	ldw	r4,0(r2)
 8005a48:	11400117 	ldw	r5,4(r2)
 8005a4c:	900d883a 	mov	r6,r18
 8005a50:	980f883a 	mov	r7,r19
 8005a54:	800e4e00 	call	800e4e0 <__gedf2>
 8005a58:	00828d0e 	bge	zero,r2,8006490 <_dtoa_r+0xcd4>
 8005a5c:	d9000517 	ldw	r4,20(sp)
 8005a60:	d8000e15 	stw	zero,56(sp)
 8005a64:	213fffc4 	addi	r4,r4,-1
 8005a68:	d9000515 	stw	r4,20(sp)
 8005a6c:	b42dc83a 	sub	r22,r22,r16
 8005a70:	b5bfffc4 	addi	r22,r22,-1
 8005a74:	b0026f16 	blt	r22,zero,8006434 <_dtoa_r+0xc78>
 8005a78:	d8000815 	stw	zero,32(sp)
 8005a7c:	d9c00517 	ldw	r7,20(sp)
 8005a80:	38026416 	blt	r7,zero,8006414 <_dtoa_r+0xc58>
 8005a84:	b1ed883a 	add	r22,r22,r7
 8005a88:	d9c00d15 	stw	r7,52(sp)
 8005a8c:	d8000a15 	stw	zero,40(sp)
 8005a90:	d9800317 	ldw	r6,12(sp)
 8005a94:	00800244 	movi	r2,9
 8005a98:	11811436 	bltu	r2,r6,8005eec <_dtoa_r+0x730>
 8005a9c:	00800144 	movi	r2,5
 8005aa0:	1184e10e 	bge	r2,r6,8006e28 <_dtoa_r+0x166c>
 8005aa4:	31bfff04 	addi	r6,r6,-4
 8005aa8:	d9800315 	stw	r6,12(sp)
 8005aac:	0023883a 	mov	r17,zero
 8005ab0:	d9800317 	ldw	r6,12(sp)
 8005ab4:	008000c4 	movi	r2,3
 8005ab8:	30836726 	beq	r6,r2,8006858 <_dtoa_r+0x109c>
 8005abc:	1183410e 	bge	r2,r6,80067c4 <_dtoa_r+0x1008>
 8005ac0:	d9c00317 	ldw	r7,12(sp)
 8005ac4:	00800104 	movi	r2,4
 8005ac8:	38827c26 	beq	r7,r2,80064bc <_dtoa_r+0xd00>
 8005acc:	00800144 	movi	r2,5
 8005ad0:	3884c41e 	bne	r7,r2,8006de4 <_dtoa_r+0x1628>
 8005ad4:	00800044 	movi	r2,1
 8005ad8:	d8800b15 	stw	r2,44(sp)
 8005adc:	d8c00517 	ldw	r3,20(sp)
 8005ae0:	d9002217 	ldw	r4,136(sp)
 8005ae4:	1907883a 	add	r3,r3,r4
 8005ae8:	19800044 	addi	r6,r3,1
 8005aec:	d8c00c15 	stw	r3,48(sp)
 8005af0:	d9800615 	stw	r6,24(sp)
 8005af4:	0183a40e 	bge	zero,r6,8006988 <_dtoa_r+0x11cc>
 8005af8:	d9800617 	ldw	r6,24(sp)
 8005afc:	3021883a 	mov	r16,r6
 8005b00:	e0001115 	stw	zero,68(fp)
 8005b04:	008005c4 	movi	r2,23
 8005b08:	1184c92e 	bgeu	r2,r6,8006e30 <_dtoa_r+0x1674>
 8005b0c:	00c00044 	movi	r3,1
 8005b10:	00800104 	movi	r2,4
 8005b14:	1085883a 	add	r2,r2,r2
 8005b18:	11000504 	addi	r4,r2,20
 8005b1c:	180b883a 	mov	r5,r3
 8005b20:	18c00044 	addi	r3,r3,1
 8005b24:	313ffb2e 	bgeu	r6,r4,8005b14 <__alt_data_end+0xff005b14>
 8005b28:	e1401115 	stw	r5,68(fp)
 8005b2c:	e009883a 	mov	r4,fp
 8005b30:	80088400 	call	8008840 <_Balloc>
 8005b34:	d8800715 	stw	r2,28(sp)
 8005b38:	e0801015 	stw	r2,64(fp)
 8005b3c:	00800384 	movi	r2,14
 8005b40:	1400f736 	bltu	r2,r16,8005f20 <_dtoa_r+0x764>
 8005b44:	8800f626 	beq	r17,zero,8005f20 <_dtoa_r+0x764>
 8005b48:	d9c00517 	ldw	r7,20(sp)
 8005b4c:	01c39a0e 	bge	zero,r7,80069b8 <_dtoa_r+0x11fc>
 8005b50:	388003cc 	andi	r2,r7,15
 8005b54:	100490fa 	slli	r2,r2,3
 8005b58:	382bd13a 	srai	r21,r7,4
 8005b5c:	00c20074 	movhi	r3,2049
 8005b60:	18c7b404 	addi	r3,r3,7888
 8005b64:	1885883a 	add	r2,r3,r2
 8005b68:	a8c0040c 	andi	r3,r21,16
 8005b6c:	12400017 	ldw	r9,0(r2)
 8005b70:	12000117 	ldw	r8,4(r2)
 8005b74:	18037926 	beq	r3,zero,800695c <_dtoa_r+0x11a0>
 8005b78:	00820074 	movhi	r2,2049
 8005b7c:	1087aa04 	addi	r2,r2,7848
 8005b80:	11800817 	ldw	r6,32(r2)
 8005b84:	11c00917 	ldw	r7,36(r2)
 8005b88:	9009883a 	mov	r4,r18
 8005b8c:	980b883a 	mov	r5,r19
 8005b90:	da001715 	stw	r8,92(sp)
 8005b94:	da401615 	stw	r9,88(sp)
 8005b98:	800db700 	call	800db70 <__divdf3>
 8005b9c:	da001717 	ldw	r8,92(sp)
 8005ba0:	da401617 	ldw	r9,88(sp)
 8005ba4:	ad4003cc 	andi	r21,r21,15
 8005ba8:	040000c4 	movi	r16,3
 8005bac:	1023883a 	mov	r17,r2
 8005bb0:	1829883a 	mov	r20,r3
 8005bb4:	a8001126 	beq	r21,zero,8005bfc <_dtoa_r+0x440>
 8005bb8:	05c20074 	movhi	r23,2049
 8005bbc:	bdc7aa04 	addi	r23,r23,7848
 8005bc0:	4805883a 	mov	r2,r9
 8005bc4:	4007883a 	mov	r3,r8
 8005bc8:	a980004c 	andi	r6,r21,1
 8005bcc:	1009883a 	mov	r4,r2
 8005bd0:	a82bd07a 	srai	r21,r21,1
 8005bd4:	180b883a 	mov	r5,r3
 8005bd8:	30000426 	beq	r6,zero,8005bec <_dtoa_r+0x430>
 8005bdc:	b9800017 	ldw	r6,0(r23)
 8005be0:	b9c00117 	ldw	r7,4(r23)
 8005be4:	84000044 	addi	r16,r16,1
 8005be8:	80027a40 	call	80027a4 <__muldf3>
 8005bec:	bdc00204 	addi	r23,r23,8
 8005bf0:	a83ff51e 	bne	r21,zero,8005bc8 <__alt_data_end+0xff005bc8>
 8005bf4:	1013883a 	mov	r9,r2
 8005bf8:	1811883a 	mov	r8,r3
 8005bfc:	480d883a 	mov	r6,r9
 8005c00:	400f883a 	mov	r7,r8
 8005c04:	8809883a 	mov	r4,r17
 8005c08:	a00b883a 	mov	r5,r20
 8005c0c:	800db700 	call	800db70 <__divdf3>
 8005c10:	d8800f15 	stw	r2,60(sp)
 8005c14:	d8c01015 	stw	r3,64(sp)
 8005c18:	d8c00e17 	ldw	r3,56(sp)
 8005c1c:	18000626 	beq	r3,zero,8005c38 <_dtoa_r+0x47c>
 8005c20:	d9000f17 	ldw	r4,60(sp)
 8005c24:	d9401017 	ldw	r5,64(sp)
 8005c28:	000d883a 	mov	r6,zero
 8005c2c:	01cffc34 	movhi	r7,16368
 8005c30:	800e5bc0 	call	800e5bc <__ledf2>
 8005c34:	10040b16 	blt	r2,zero,8006c64 <_dtoa_r+0x14a8>
 8005c38:	8009883a 	mov	r4,r16
 8005c3c:	8002ebc0 	call	8002ebc <__floatsidf>
 8005c40:	d9800f17 	ldw	r6,60(sp)
 8005c44:	d9c01017 	ldw	r7,64(sp)
 8005c48:	1009883a 	mov	r4,r2
 8005c4c:	180b883a 	mov	r5,r3
 8005c50:	80027a40 	call	80027a4 <__muldf3>
 8005c54:	000d883a 	mov	r6,zero
 8005c58:	01d00734 	movhi	r7,16412
 8005c5c:	1009883a 	mov	r4,r2
 8005c60:	180b883a 	mov	r5,r3
 8005c64:	800d2c40 	call	800d2c4 <__adddf3>
 8005c68:	1021883a 	mov	r16,r2
 8005c6c:	d8800617 	ldw	r2,24(sp)
 8005c70:	047f3034 	movhi	r17,64704
 8005c74:	1c63883a 	add	r17,r3,r17
 8005c78:	10031826 	beq	r2,zero,80068dc <_dtoa_r+0x1120>
 8005c7c:	d8c00517 	ldw	r3,20(sp)
 8005c80:	db000617 	ldw	r12,24(sp)
 8005c84:	d8c01315 	stw	r3,76(sp)
 8005c88:	d9000b17 	ldw	r4,44(sp)
 8005c8c:	20038f26 	beq	r4,zero,8006acc <_dtoa_r+0x1310>
 8005c90:	60bfffc4 	addi	r2,r12,-1
 8005c94:	100490fa 	slli	r2,r2,3
 8005c98:	00c20074 	movhi	r3,2049
 8005c9c:	18c7b404 	addi	r3,r3,7888
 8005ca0:	1885883a 	add	r2,r3,r2
 8005ca4:	11800017 	ldw	r6,0(r2)
 8005ca8:	11c00117 	ldw	r7,4(r2)
 8005cac:	d8800717 	ldw	r2,28(sp)
 8005cb0:	0009883a 	mov	r4,zero
 8005cb4:	014ff834 	movhi	r5,16352
 8005cb8:	db001615 	stw	r12,88(sp)
 8005cbc:	15c00044 	addi	r23,r2,1
 8005cc0:	800db700 	call	800db70 <__divdf3>
 8005cc4:	800d883a 	mov	r6,r16
 8005cc8:	880f883a 	mov	r7,r17
 8005ccc:	1009883a 	mov	r4,r2
 8005cd0:	180b883a 	mov	r5,r3
 8005cd4:	800e6b00 	call	800e6b0 <__subdf3>
 8005cd8:	d9401017 	ldw	r5,64(sp)
 8005cdc:	d9000f17 	ldw	r4,60(sp)
 8005ce0:	102b883a 	mov	r21,r2
 8005ce4:	d8c01215 	stw	r3,72(sp)
 8005ce8:	800efac0 	call	800efac <__fixdfsi>
 8005cec:	1009883a 	mov	r4,r2
 8005cf0:	1029883a 	mov	r20,r2
 8005cf4:	8002ebc0 	call	8002ebc <__floatsidf>
 8005cf8:	d9000f17 	ldw	r4,60(sp)
 8005cfc:	d9401017 	ldw	r5,64(sp)
 8005d00:	100d883a 	mov	r6,r2
 8005d04:	180f883a 	mov	r7,r3
 8005d08:	800e6b00 	call	800e6b0 <__subdf3>
 8005d0c:	1823883a 	mov	r17,r3
 8005d10:	d8c00717 	ldw	r3,28(sp)
 8005d14:	d9401217 	ldw	r5,72(sp)
 8005d18:	a2000c04 	addi	r8,r20,48
 8005d1c:	1021883a 	mov	r16,r2
 8005d20:	1a000005 	stb	r8,0(r3)
 8005d24:	800d883a 	mov	r6,r16
 8005d28:	880f883a 	mov	r7,r17
 8005d2c:	a809883a 	mov	r4,r21
 8005d30:	4029883a 	mov	r20,r8
 8005d34:	800e4e00 	call	800e4e0 <__gedf2>
 8005d38:	00841d16 	blt	zero,r2,8006db0 <_dtoa_r+0x15f4>
 8005d3c:	800d883a 	mov	r6,r16
 8005d40:	880f883a 	mov	r7,r17
 8005d44:	0009883a 	mov	r4,zero
 8005d48:	014ffc34 	movhi	r5,16368
 8005d4c:	800e6b00 	call	800e6b0 <__subdf3>
 8005d50:	d9401217 	ldw	r5,72(sp)
 8005d54:	100d883a 	mov	r6,r2
 8005d58:	180f883a 	mov	r7,r3
 8005d5c:	a809883a 	mov	r4,r21
 8005d60:	800e4e00 	call	800e4e0 <__gedf2>
 8005d64:	db001617 	ldw	r12,88(sp)
 8005d68:	00840e16 	blt	zero,r2,8006da4 <_dtoa_r+0x15e8>
 8005d6c:	00800044 	movi	r2,1
 8005d70:	13006b0e 	bge	r2,r12,8005f20 <_dtoa_r+0x764>
 8005d74:	d9000717 	ldw	r4,28(sp)
 8005d78:	dd800f15 	stw	r22,60(sp)
 8005d7c:	dcc01015 	stw	r19,64(sp)
 8005d80:	2319883a 	add	r12,r4,r12
 8005d84:	dcc01217 	ldw	r19,72(sp)
 8005d88:	602d883a 	mov	r22,r12
 8005d8c:	dc801215 	stw	r18,72(sp)
 8005d90:	b825883a 	mov	r18,r23
 8005d94:	00000906 	br	8005dbc <_dtoa_r+0x600>
 8005d98:	800e6b00 	call	800e6b0 <__subdf3>
 8005d9c:	a80d883a 	mov	r6,r21
 8005da0:	980f883a 	mov	r7,r19
 8005da4:	1009883a 	mov	r4,r2
 8005da8:	180b883a 	mov	r5,r3
 8005dac:	800e5bc0 	call	800e5bc <__ledf2>
 8005db0:	1003e816 	blt	r2,zero,8006d54 <_dtoa_r+0x1598>
 8005db4:	b825883a 	mov	r18,r23
 8005db8:	bd83e926 	beq	r23,r22,8006d60 <_dtoa_r+0x15a4>
 8005dbc:	a809883a 	mov	r4,r21
 8005dc0:	980b883a 	mov	r5,r19
 8005dc4:	000d883a 	mov	r6,zero
 8005dc8:	01d00934 	movhi	r7,16420
 8005dcc:	80027a40 	call	80027a4 <__muldf3>
 8005dd0:	000d883a 	mov	r6,zero
 8005dd4:	01d00934 	movhi	r7,16420
 8005dd8:	8009883a 	mov	r4,r16
 8005ddc:	880b883a 	mov	r5,r17
 8005de0:	102b883a 	mov	r21,r2
 8005de4:	1827883a 	mov	r19,r3
 8005de8:	80027a40 	call	80027a4 <__muldf3>
 8005dec:	180b883a 	mov	r5,r3
 8005df0:	1009883a 	mov	r4,r2
 8005df4:	1821883a 	mov	r16,r3
 8005df8:	1023883a 	mov	r17,r2
 8005dfc:	800efac0 	call	800efac <__fixdfsi>
 8005e00:	1009883a 	mov	r4,r2
 8005e04:	1029883a 	mov	r20,r2
 8005e08:	8002ebc0 	call	8002ebc <__floatsidf>
 8005e0c:	8809883a 	mov	r4,r17
 8005e10:	800b883a 	mov	r5,r16
 8005e14:	100d883a 	mov	r6,r2
 8005e18:	180f883a 	mov	r7,r3
 8005e1c:	800e6b00 	call	800e6b0 <__subdf3>
 8005e20:	a5000c04 	addi	r20,r20,48
 8005e24:	a80d883a 	mov	r6,r21
 8005e28:	980f883a 	mov	r7,r19
 8005e2c:	1009883a 	mov	r4,r2
 8005e30:	180b883a 	mov	r5,r3
 8005e34:	95000005 	stb	r20,0(r18)
 8005e38:	1021883a 	mov	r16,r2
 8005e3c:	1823883a 	mov	r17,r3
 8005e40:	800e5bc0 	call	800e5bc <__ledf2>
 8005e44:	bdc00044 	addi	r23,r23,1
 8005e48:	800d883a 	mov	r6,r16
 8005e4c:	880f883a 	mov	r7,r17
 8005e50:	0009883a 	mov	r4,zero
 8005e54:	014ffc34 	movhi	r5,16368
 8005e58:	103fcf0e 	bge	r2,zero,8005d98 <__alt_data_end+0xff005d98>
 8005e5c:	d8c01317 	ldw	r3,76(sp)
 8005e60:	d8c00515 	stw	r3,20(sp)
 8005e64:	d9400917 	ldw	r5,36(sp)
 8005e68:	e009883a 	mov	r4,fp
 8005e6c:	80088e80 	call	80088e8 <_Bfree>
 8005e70:	d9000517 	ldw	r4,20(sp)
 8005e74:	d9802317 	ldw	r6,140(sp)
 8005e78:	d9c02517 	ldw	r7,148(sp)
 8005e7c:	b8000005 	stb	zero,0(r23)
 8005e80:	20800044 	addi	r2,r4,1
 8005e84:	30800015 	stw	r2,0(r6)
 8005e88:	3802aa26 	beq	r7,zero,8006934 <_dtoa_r+0x1178>
 8005e8c:	3dc00015 	stw	r23,0(r7)
 8005e90:	d8800717 	ldw	r2,28(sp)
 8005e94:	003e7906 	br	800587c <__alt_data_end+0xff00587c>
 8005e98:	00800434 	movhi	r2,16
 8005e9c:	10bfffc4 	addi	r2,r2,-1
 8005ea0:	88a2703a 	and	r17,r17,r2
 8005ea4:	883e851e 	bne	r17,zero,80058bc <__alt_data_end+0xff0058bc>
 8005ea8:	00820074 	movhi	r2,2049
 8005eac:	10879504 	addi	r2,r2,7764
 8005eb0:	003e8406 	br	80058c4 <__alt_data_end+0xff0058c4>
 8005eb4:	10c00204 	addi	r3,r2,8
 8005eb8:	003e8706 	br	80058d8 <__alt_data_end+0xff0058d8>
 8005ebc:	01400434 	movhi	r5,16
 8005ec0:	297fffc4 	addi	r5,r5,-1
 8005ec4:	994a703a 	and	r5,r19,r5
 8005ec8:	9009883a 	mov	r4,r18
 8005ecc:	843f0044 	addi	r16,r16,-1023
 8005ed0:	294ffc34 	orhi	r5,r5,16368
 8005ed4:	dd800217 	ldw	r22,8(sp)
 8005ed8:	d8001115 	stw	zero,68(sp)
 8005edc:	003ea506 	br	8005974 <__alt_data_end+0xff005974>
 8005ee0:	00820074 	movhi	r2,2049
 8005ee4:	10878c04 	addi	r2,r2,7728
 8005ee8:	003e6406 	br	800587c <__alt_data_end+0xff00587c>
 8005eec:	e0001115 	stw	zero,68(fp)
 8005ef0:	000b883a 	mov	r5,zero
 8005ef4:	e009883a 	mov	r4,fp
 8005ef8:	80088400 	call	8008840 <_Balloc>
 8005efc:	01bfffc4 	movi	r6,-1
 8005f00:	01c00044 	movi	r7,1
 8005f04:	d8800715 	stw	r2,28(sp)
 8005f08:	d9800c15 	stw	r6,48(sp)
 8005f0c:	e0801015 	stw	r2,64(fp)
 8005f10:	d8000315 	stw	zero,12(sp)
 8005f14:	d9c00b15 	stw	r7,44(sp)
 8005f18:	d9800615 	stw	r6,24(sp)
 8005f1c:	d8002215 	stw	zero,136(sp)
 8005f20:	d8800117 	ldw	r2,4(sp)
 8005f24:	10008916 	blt	r2,zero,800614c <_dtoa_r+0x990>
 8005f28:	d9000517 	ldw	r4,20(sp)
 8005f2c:	00c00384 	movi	r3,14
 8005f30:	19008616 	blt	r3,r4,800614c <_dtoa_r+0x990>
 8005f34:	200490fa 	slli	r2,r4,3
 8005f38:	00c20074 	movhi	r3,2049
 8005f3c:	d9802217 	ldw	r6,136(sp)
 8005f40:	18c7b404 	addi	r3,r3,7888
 8005f44:	1885883a 	add	r2,r3,r2
 8005f48:	14000017 	ldw	r16,0(r2)
 8005f4c:	14400117 	ldw	r17,4(r2)
 8005f50:	30016316 	blt	r6,zero,80064e0 <_dtoa_r+0xd24>
 8005f54:	800d883a 	mov	r6,r16
 8005f58:	880f883a 	mov	r7,r17
 8005f5c:	9009883a 	mov	r4,r18
 8005f60:	980b883a 	mov	r5,r19
 8005f64:	800db700 	call	800db70 <__divdf3>
 8005f68:	180b883a 	mov	r5,r3
 8005f6c:	1009883a 	mov	r4,r2
 8005f70:	800efac0 	call	800efac <__fixdfsi>
 8005f74:	1009883a 	mov	r4,r2
 8005f78:	102b883a 	mov	r21,r2
 8005f7c:	8002ebc0 	call	8002ebc <__floatsidf>
 8005f80:	800d883a 	mov	r6,r16
 8005f84:	880f883a 	mov	r7,r17
 8005f88:	1009883a 	mov	r4,r2
 8005f8c:	180b883a 	mov	r5,r3
 8005f90:	80027a40 	call	80027a4 <__muldf3>
 8005f94:	100d883a 	mov	r6,r2
 8005f98:	180f883a 	mov	r7,r3
 8005f9c:	9009883a 	mov	r4,r18
 8005fa0:	980b883a 	mov	r5,r19
 8005fa4:	800e6b00 	call	800e6b0 <__subdf3>
 8005fa8:	d9c00717 	ldw	r7,28(sp)
 8005fac:	1009883a 	mov	r4,r2
 8005fb0:	a8800c04 	addi	r2,r21,48
 8005fb4:	38800005 	stb	r2,0(r7)
 8005fb8:	3dc00044 	addi	r23,r7,1
 8005fbc:	d9c00617 	ldw	r7,24(sp)
 8005fc0:	01800044 	movi	r6,1
 8005fc4:	180b883a 	mov	r5,r3
 8005fc8:	2005883a 	mov	r2,r4
 8005fcc:	39803826 	beq	r7,r6,80060b0 <_dtoa_r+0x8f4>
 8005fd0:	000d883a 	mov	r6,zero
 8005fd4:	01d00934 	movhi	r7,16420
 8005fd8:	80027a40 	call	80027a4 <__muldf3>
 8005fdc:	000d883a 	mov	r6,zero
 8005fe0:	000f883a 	mov	r7,zero
 8005fe4:	1009883a 	mov	r4,r2
 8005fe8:	180b883a 	mov	r5,r3
 8005fec:	1025883a 	mov	r18,r2
 8005ff0:	1827883a 	mov	r19,r3
 8005ff4:	800e4580 	call	800e458 <__eqdf2>
 8005ff8:	103f9a26 	beq	r2,zero,8005e64 <__alt_data_end+0xff005e64>
 8005ffc:	d9c00617 	ldw	r7,24(sp)
 8006000:	d8c00717 	ldw	r3,28(sp)
 8006004:	b829883a 	mov	r20,r23
 8006008:	38bfffc4 	addi	r2,r7,-1
 800600c:	18ad883a 	add	r22,r3,r2
 8006010:	00000a06 	br	800603c <_dtoa_r+0x880>
 8006014:	80027a40 	call	80027a4 <__muldf3>
 8006018:	000d883a 	mov	r6,zero
 800601c:	000f883a 	mov	r7,zero
 8006020:	1009883a 	mov	r4,r2
 8006024:	180b883a 	mov	r5,r3
 8006028:	1025883a 	mov	r18,r2
 800602c:	1827883a 	mov	r19,r3
 8006030:	b829883a 	mov	r20,r23
 8006034:	800e4580 	call	800e458 <__eqdf2>
 8006038:	103f8a26 	beq	r2,zero,8005e64 <__alt_data_end+0xff005e64>
 800603c:	800d883a 	mov	r6,r16
 8006040:	880f883a 	mov	r7,r17
 8006044:	9009883a 	mov	r4,r18
 8006048:	980b883a 	mov	r5,r19
 800604c:	800db700 	call	800db70 <__divdf3>
 8006050:	180b883a 	mov	r5,r3
 8006054:	1009883a 	mov	r4,r2
 8006058:	800efac0 	call	800efac <__fixdfsi>
 800605c:	1009883a 	mov	r4,r2
 8006060:	102b883a 	mov	r21,r2
 8006064:	8002ebc0 	call	8002ebc <__floatsidf>
 8006068:	800d883a 	mov	r6,r16
 800606c:	880f883a 	mov	r7,r17
 8006070:	1009883a 	mov	r4,r2
 8006074:	180b883a 	mov	r5,r3
 8006078:	80027a40 	call	80027a4 <__muldf3>
 800607c:	100d883a 	mov	r6,r2
 8006080:	180f883a 	mov	r7,r3
 8006084:	9009883a 	mov	r4,r18
 8006088:	980b883a 	mov	r5,r19
 800608c:	800e6b00 	call	800e6b0 <__subdf3>
 8006090:	aa000c04 	addi	r8,r21,48
 8006094:	a2000005 	stb	r8,0(r20)
 8006098:	000d883a 	mov	r6,zero
 800609c:	01d00934 	movhi	r7,16420
 80060a0:	1009883a 	mov	r4,r2
 80060a4:	180b883a 	mov	r5,r3
 80060a8:	a5c00044 	addi	r23,r20,1
 80060ac:	b53fd91e 	bne	r22,r20,8006014 <__alt_data_end+0xff006014>
 80060b0:	100d883a 	mov	r6,r2
 80060b4:	180f883a 	mov	r7,r3
 80060b8:	1009883a 	mov	r4,r2
 80060bc:	180b883a 	mov	r5,r3
 80060c0:	800d2c40 	call	800d2c4 <__adddf3>
 80060c4:	100d883a 	mov	r6,r2
 80060c8:	180f883a 	mov	r7,r3
 80060cc:	8009883a 	mov	r4,r16
 80060d0:	880b883a 	mov	r5,r17
 80060d4:	1027883a 	mov	r19,r2
 80060d8:	1825883a 	mov	r18,r3
 80060dc:	800e5bc0 	call	800e5bc <__ledf2>
 80060e0:	10000816 	blt	r2,zero,8006104 <_dtoa_r+0x948>
 80060e4:	980d883a 	mov	r6,r19
 80060e8:	900f883a 	mov	r7,r18
 80060ec:	8009883a 	mov	r4,r16
 80060f0:	880b883a 	mov	r5,r17
 80060f4:	800e4580 	call	800e458 <__eqdf2>
 80060f8:	103f5a1e 	bne	r2,zero,8005e64 <__alt_data_end+0xff005e64>
 80060fc:	ad40004c 	andi	r21,r21,1
 8006100:	a83f5826 	beq	r21,zero,8005e64 <__alt_data_end+0xff005e64>
 8006104:	bd3fffc3 	ldbu	r20,-1(r23)
 8006108:	b8bfffc4 	addi	r2,r23,-1
 800610c:	1007883a 	mov	r3,r2
 8006110:	01400e44 	movi	r5,57
 8006114:	d9800717 	ldw	r6,28(sp)
 8006118:	00000506 	br	8006130 <_dtoa_r+0x974>
 800611c:	18ffffc4 	addi	r3,r3,-1
 8006120:	11824726 	beq	r2,r6,8006a40 <_dtoa_r+0x1284>
 8006124:	1d000003 	ldbu	r20,0(r3)
 8006128:	102f883a 	mov	r23,r2
 800612c:	10bfffc4 	addi	r2,r2,-1
 8006130:	a1003fcc 	andi	r4,r20,255
 8006134:	2100201c 	xori	r4,r4,128
 8006138:	213fe004 	addi	r4,r4,-128
 800613c:	217ff726 	beq	r4,r5,800611c <__alt_data_end+0xff00611c>
 8006140:	a2000044 	addi	r8,r20,1
 8006144:	12000005 	stb	r8,0(r2)
 8006148:	003f4606 	br	8005e64 <__alt_data_end+0xff005e64>
 800614c:	d9000b17 	ldw	r4,44(sp)
 8006150:	2000c826 	beq	r4,zero,8006474 <_dtoa_r+0xcb8>
 8006154:	d9800317 	ldw	r6,12(sp)
 8006158:	00c00044 	movi	r3,1
 800615c:	1980f90e 	bge	r3,r6,8006544 <_dtoa_r+0xd88>
 8006160:	d8800617 	ldw	r2,24(sp)
 8006164:	d8c00a17 	ldw	r3,40(sp)
 8006168:	157fffc4 	addi	r21,r2,-1
 800616c:	1d41f316 	blt	r3,r21,800693c <_dtoa_r+0x1180>
 8006170:	1d6bc83a 	sub	r21,r3,r21
 8006174:	d9c00617 	ldw	r7,24(sp)
 8006178:	3802aa16 	blt	r7,zero,8006c24 <_dtoa_r+0x1468>
 800617c:	dd000817 	ldw	r20,32(sp)
 8006180:	d8800617 	ldw	r2,24(sp)
 8006184:	d8c00817 	ldw	r3,32(sp)
 8006188:	01400044 	movi	r5,1
 800618c:	e009883a 	mov	r4,fp
 8006190:	1887883a 	add	r3,r3,r2
 8006194:	d8c00815 	stw	r3,32(sp)
 8006198:	b0ad883a 	add	r22,r22,r2
 800619c:	8008c4c0 	call	8008c4c <__i2b>
 80061a0:	1023883a 	mov	r17,r2
 80061a4:	a0000826 	beq	r20,zero,80061c8 <_dtoa_r+0xa0c>
 80061a8:	0580070e 	bge	zero,r22,80061c8 <_dtoa_r+0xa0c>
 80061ac:	a005883a 	mov	r2,r20
 80061b0:	b500b916 	blt	r22,r20,8006498 <_dtoa_r+0xcdc>
 80061b4:	d9000817 	ldw	r4,32(sp)
 80061b8:	a0a9c83a 	sub	r20,r20,r2
 80061bc:	b0adc83a 	sub	r22,r22,r2
 80061c0:	2089c83a 	sub	r4,r4,r2
 80061c4:	d9000815 	stw	r4,32(sp)
 80061c8:	d9800a17 	ldw	r6,40(sp)
 80061cc:	0181810e 	bge	zero,r6,80067d4 <_dtoa_r+0x1018>
 80061d0:	d9c00b17 	ldw	r7,44(sp)
 80061d4:	3800b326 	beq	r7,zero,80064a4 <_dtoa_r+0xce8>
 80061d8:	a800b226 	beq	r21,zero,80064a4 <_dtoa_r+0xce8>
 80061dc:	880b883a 	mov	r5,r17
 80061e0:	a80d883a 	mov	r6,r21
 80061e4:	e009883a 	mov	r4,fp
 80061e8:	8008e800 	call	8008e80 <__pow5mult>
 80061ec:	d9800917 	ldw	r6,36(sp)
 80061f0:	100b883a 	mov	r5,r2
 80061f4:	e009883a 	mov	r4,fp
 80061f8:	1023883a 	mov	r17,r2
 80061fc:	8008c880 	call	8008c88 <__multiply>
 8006200:	1021883a 	mov	r16,r2
 8006204:	d8800a17 	ldw	r2,40(sp)
 8006208:	d9400917 	ldw	r5,36(sp)
 800620c:	e009883a 	mov	r4,fp
 8006210:	1545c83a 	sub	r2,r2,r21
 8006214:	d8800a15 	stw	r2,40(sp)
 8006218:	80088e80 	call	80088e8 <_Bfree>
 800621c:	d8c00a17 	ldw	r3,40(sp)
 8006220:	18009f1e 	bne	r3,zero,80064a0 <_dtoa_r+0xce4>
 8006224:	05c00044 	movi	r23,1
 8006228:	e009883a 	mov	r4,fp
 800622c:	b80b883a 	mov	r5,r23
 8006230:	8008c4c0 	call	8008c4c <__i2b>
 8006234:	d9000d17 	ldw	r4,52(sp)
 8006238:	102b883a 	mov	r21,r2
 800623c:	2000ce26 	beq	r4,zero,8006578 <_dtoa_r+0xdbc>
 8006240:	200d883a 	mov	r6,r4
 8006244:	100b883a 	mov	r5,r2
 8006248:	e009883a 	mov	r4,fp
 800624c:	8008e800 	call	8008e80 <__pow5mult>
 8006250:	d9800317 	ldw	r6,12(sp)
 8006254:	102b883a 	mov	r21,r2
 8006258:	b981810e 	bge	r23,r6,8006860 <_dtoa_r+0x10a4>
 800625c:	0027883a 	mov	r19,zero
 8006260:	a8800417 	ldw	r2,16(r21)
 8006264:	05c00804 	movi	r23,32
 8006268:	10800104 	addi	r2,r2,4
 800626c:	1085883a 	add	r2,r2,r2
 8006270:	1085883a 	add	r2,r2,r2
 8006274:	a885883a 	add	r2,r21,r2
 8006278:	11000017 	ldw	r4,0(r2)
 800627c:	8008b340 	call	8008b34 <__hi0bits>
 8006280:	b885c83a 	sub	r2,r23,r2
 8006284:	1585883a 	add	r2,r2,r22
 8006288:	108007cc 	andi	r2,r2,31
 800628c:	1000b326 	beq	r2,zero,800655c <_dtoa_r+0xda0>
 8006290:	00c00804 	movi	r3,32
 8006294:	1887c83a 	sub	r3,r3,r2
 8006298:	01000104 	movi	r4,4
 800629c:	20c2cd0e 	bge	r4,r3,8006dd4 <_dtoa_r+0x1618>
 80062a0:	00c00704 	movi	r3,28
 80062a4:	1885c83a 	sub	r2,r3,r2
 80062a8:	d8c00817 	ldw	r3,32(sp)
 80062ac:	a0a9883a 	add	r20,r20,r2
 80062b0:	b0ad883a 	add	r22,r22,r2
 80062b4:	1887883a 	add	r3,r3,r2
 80062b8:	d8c00815 	stw	r3,32(sp)
 80062bc:	d9800817 	ldw	r6,32(sp)
 80062c0:	0180040e 	bge	zero,r6,80062d4 <_dtoa_r+0xb18>
 80062c4:	800b883a 	mov	r5,r16
 80062c8:	e009883a 	mov	r4,fp
 80062cc:	8008fc00 	call	8008fc0 <__lshift>
 80062d0:	1021883a 	mov	r16,r2
 80062d4:	0580050e 	bge	zero,r22,80062ec <_dtoa_r+0xb30>
 80062d8:	a80b883a 	mov	r5,r21
 80062dc:	b00d883a 	mov	r6,r22
 80062e0:	e009883a 	mov	r4,fp
 80062e4:	8008fc00 	call	8008fc0 <__lshift>
 80062e8:	102b883a 	mov	r21,r2
 80062ec:	d9c00e17 	ldw	r7,56(sp)
 80062f0:	3801211e 	bne	r7,zero,8006778 <_dtoa_r+0xfbc>
 80062f4:	d9800617 	ldw	r6,24(sp)
 80062f8:	0181380e 	bge	zero,r6,80067dc <_dtoa_r+0x1020>
 80062fc:	d8c00b17 	ldw	r3,44(sp)
 8006300:	1800ab1e 	bne	r3,zero,80065b0 <_dtoa_r+0xdf4>
 8006304:	dc800717 	ldw	r18,28(sp)
 8006308:	dcc00617 	ldw	r19,24(sp)
 800630c:	9029883a 	mov	r20,r18
 8006310:	00000206 	br	800631c <_dtoa_r+0xb60>
 8006314:	80089100 	call	8008910 <__multadd>
 8006318:	1021883a 	mov	r16,r2
 800631c:	a80b883a 	mov	r5,r21
 8006320:	8009883a 	mov	r4,r16
 8006324:	80055bc0 	call	80055bc <quorem>
 8006328:	10800c04 	addi	r2,r2,48
 800632c:	90800005 	stb	r2,0(r18)
 8006330:	94800044 	addi	r18,r18,1
 8006334:	9507c83a 	sub	r3,r18,r20
 8006338:	000f883a 	mov	r7,zero
 800633c:	01800284 	movi	r6,10
 8006340:	800b883a 	mov	r5,r16
 8006344:	e009883a 	mov	r4,fp
 8006348:	1cfff216 	blt	r3,r19,8006314 <__alt_data_end+0xff006314>
 800634c:	1011883a 	mov	r8,r2
 8006350:	d8800617 	ldw	r2,24(sp)
 8006354:	0082370e 	bge	zero,r2,8006c34 <_dtoa_r+0x1478>
 8006358:	d9000717 	ldw	r4,28(sp)
 800635c:	0025883a 	mov	r18,zero
 8006360:	20af883a 	add	r23,r4,r2
 8006364:	01800044 	movi	r6,1
 8006368:	800b883a 	mov	r5,r16
 800636c:	e009883a 	mov	r4,fp
 8006370:	da001715 	stw	r8,92(sp)
 8006374:	8008fc00 	call	8008fc0 <__lshift>
 8006378:	a80b883a 	mov	r5,r21
 800637c:	1009883a 	mov	r4,r2
 8006380:	d8800915 	stw	r2,36(sp)
 8006384:	80091080 	call	8009108 <__mcmp>
 8006388:	da001717 	ldw	r8,92(sp)
 800638c:	0081800e 	bge	zero,r2,8006990 <_dtoa_r+0x11d4>
 8006390:	b93fffc3 	ldbu	r4,-1(r23)
 8006394:	b8bfffc4 	addi	r2,r23,-1
 8006398:	1007883a 	mov	r3,r2
 800639c:	01800e44 	movi	r6,57
 80063a0:	d9c00717 	ldw	r7,28(sp)
 80063a4:	00000506 	br	80063bc <_dtoa_r+0xc00>
 80063a8:	18ffffc4 	addi	r3,r3,-1
 80063ac:	11c12326 	beq	r2,r7,800683c <_dtoa_r+0x1080>
 80063b0:	19000003 	ldbu	r4,0(r3)
 80063b4:	102f883a 	mov	r23,r2
 80063b8:	10bfffc4 	addi	r2,r2,-1
 80063bc:	21403fcc 	andi	r5,r4,255
 80063c0:	2940201c 	xori	r5,r5,128
 80063c4:	297fe004 	addi	r5,r5,-128
 80063c8:	29bff726 	beq	r5,r6,80063a8 <__alt_data_end+0xff0063a8>
 80063cc:	21000044 	addi	r4,r4,1
 80063d0:	11000005 	stb	r4,0(r2)
 80063d4:	a80b883a 	mov	r5,r21
 80063d8:	e009883a 	mov	r4,fp
 80063dc:	80088e80 	call	80088e8 <_Bfree>
 80063e0:	883ea026 	beq	r17,zero,8005e64 <__alt_data_end+0xff005e64>
 80063e4:	90000426 	beq	r18,zero,80063f8 <_dtoa_r+0xc3c>
 80063e8:	94400326 	beq	r18,r17,80063f8 <_dtoa_r+0xc3c>
 80063ec:	900b883a 	mov	r5,r18
 80063f0:	e009883a 	mov	r4,fp
 80063f4:	80088e80 	call	80088e8 <_Bfree>
 80063f8:	880b883a 	mov	r5,r17
 80063fc:	e009883a 	mov	r4,fp
 8006400:	80088e80 	call	80088e8 <_Bfree>
 8006404:	003e9706 	br	8005e64 <__alt_data_end+0xff005e64>
 8006408:	01800044 	movi	r6,1
 800640c:	d9800e15 	stw	r6,56(sp)
 8006410:	003d9606 	br	8005a6c <__alt_data_end+0xff005a6c>
 8006414:	d8800817 	ldw	r2,32(sp)
 8006418:	d8c00517 	ldw	r3,20(sp)
 800641c:	d8000d15 	stw	zero,52(sp)
 8006420:	10c5c83a 	sub	r2,r2,r3
 8006424:	00c9c83a 	sub	r4,zero,r3
 8006428:	d8800815 	stw	r2,32(sp)
 800642c:	d9000a15 	stw	r4,40(sp)
 8006430:	003d9706 	br	8005a90 <__alt_data_end+0xff005a90>
 8006434:	05adc83a 	sub	r22,zero,r22
 8006438:	dd800815 	stw	r22,32(sp)
 800643c:	002d883a 	mov	r22,zero
 8006440:	003d8e06 	br	8005a7c <__alt_data_end+0xff005a7c>
 8006444:	d9000517 	ldw	r4,20(sp)
 8006448:	8002ebc0 	call	8002ebc <__floatsidf>
 800644c:	100d883a 	mov	r6,r2
 8006450:	180f883a 	mov	r7,r3
 8006454:	a009883a 	mov	r4,r20
 8006458:	880b883a 	mov	r5,r17
 800645c:	800e4580 	call	800e458 <__eqdf2>
 8006460:	103d7126 	beq	r2,zero,8005a28 <__alt_data_end+0xff005a28>
 8006464:	d9c00517 	ldw	r7,20(sp)
 8006468:	39ffffc4 	addi	r7,r7,-1
 800646c:	d9c00515 	stw	r7,20(sp)
 8006470:	003d6d06 	br	8005a28 <__alt_data_end+0xff005a28>
 8006474:	dd400a17 	ldw	r21,40(sp)
 8006478:	dd000817 	ldw	r20,32(sp)
 800647c:	0023883a 	mov	r17,zero
 8006480:	003f4806 	br	80061a4 <__alt_data_end+0xff0061a4>
 8006484:	10e3c83a 	sub	r17,r2,r3
 8006488:	9448983a 	sll	r4,r18,r17
 800648c:	003d3206 	br	8005958 <__alt_data_end+0xff005958>
 8006490:	d8000e15 	stw	zero,56(sp)
 8006494:	003d7506 	br	8005a6c <__alt_data_end+0xff005a6c>
 8006498:	b005883a 	mov	r2,r22
 800649c:	003f4506 	br	80061b4 <__alt_data_end+0xff0061b4>
 80064a0:	dc000915 	stw	r16,36(sp)
 80064a4:	d9800a17 	ldw	r6,40(sp)
 80064a8:	d9400917 	ldw	r5,36(sp)
 80064ac:	e009883a 	mov	r4,fp
 80064b0:	8008e800 	call	8008e80 <__pow5mult>
 80064b4:	1021883a 	mov	r16,r2
 80064b8:	003f5a06 	br	8006224 <__alt_data_end+0xff006224>
 80064bc:	01c00044 	movi	r7,1
 80064c0:	d9c00b15 	stw	r7,44(sp)
 80064c4:	d8802217 	ldw	r2,136(sp)
 80064c8:	0081280e 	bge	zero,r2,800696c <_dtoa_r+0x11b0>
 80064cc:	100d883a 	mov	r6,r2
 80064d0:	1021883a 	mov	r16,r2
 80064d4:	d8800c15 	stw	r2,48(sp)
 80064d8:	d8800615 	stw	r2,24(sp)
 80064dc:	003d8806 	br	8005b00 <__alt_data_end+0xff005b00>
 80064e0:	d8800617 	ldw	r2,24(sp)
 80064e4:	00be9b16 	blt	zero,r2,8005f54 <__alt_data_end+0xff005f54>
 80064e8:	10010f1e 	bne	r2,zero,8006928 <_dtoa_r+0x116c>
 80064ec:	880b883a 	mov	r5,r17
 80064f0:	000d883a 	mov	r6,zero
 80064f4:	01d00534 	movhi	r7,16404
 80064f8:	8009883a 	mov	r4,r16
 80064fc:	80027a40 	call	80027a4 <__muldf3>
 8006500:	900d883a 	mov	r6,r18
 8006504:	980f883a 	mov	r7,r19
 8006508:	1009883a 	mov	r4,r2
 800650c:	180b883a 	mov	r5,r3
 8006510:	800e4e00 	call	800e4e0 <__gedf2>
 8006514:	002b883a 	mov	r21,zero
 8006518:	0023883a 	mov	r17,zero
 800651c:	1000bf16 	blt	r2,zero,800681c <_dtoa_r+0x1060>
 8006520:	d9802217 	ldw	r6,136(sp)
 8006524:	ddc00717 	ldw	r23,28(sp)
 8006528:	018c303a 	nor	r6,zero,r6
 800652c:	d9800515 	stw	r6,20(sp)
 8006530:	a80b883a 	mov	r5,r21
 8006534:	e009883a 	mov	r4,fp
 8006538:	80088e80 	call	80088e8 <_Bfree>
 800653c:	883e4926 	beq	r17,zero,8005e64 <__alt_data_end+0xff005e64>
 8006540:	003fad06 	br	80063f8 <__alt_data_end+0xff0063f8>
 8006544:	d9c01117 	ldw	r7,68(sp)
 8006548:	3801bc26 	beq	r7,zero,8006c3c <_dtoa_r+0x1480>
 800654c:	10810cc4 	addi	r2,r2,1075
 8006550:	dd400a17 	ldw	r21,40(sp)
 8006554:	dd000817 	ldw	r20,32(sp)
 8006558:	003f0a06 	br	8006184 <__alt_data_end+0xff006184>
 800655c:	00800704 	movi	r2,28
 8006560:	d9000817 	ldw	r4,32(sp)
 8006564:	a0a9883a 	add	r20,r20,r2
 8006568:	b0ad883a 	add	r22,r22,r2
 800656c:	2089883a 	add	r4,r4,r2
 8006570:	d9000815 	stw	r4,32(sp)
 8006574:	003f5106 	br	80062bc <__alt_data_end+0xff0062bc>
 8006578:	d8c00317 	ldw	r3,12(sp)
 800657c:	b8c1fc0e 	bge	r23,r3,8006d70 <_dtoa_r+0x15b4>
 8006580:	0027883a 	mov	r19,zero
 8006584:	b805883a 	mov	r2,r23
 8006588:	003f3e06 	br	8006284 <__alt_data_end+0xff006284>
 800658c:	880b883a 	mov	r5,r17
 8006590:	e009883a 	mov	r4,fp
 8006594:	000f883a 	mov	r7,zero
 8006598:	01800284 	movi	r6,10
 800659c:	80089100 	call	8008910 <__multadd>
 80065a0:	d9000c17 	ldw	r4,48(sp)
 80065a4:	1023883a 	mov	r17,r2
 80065a8:	0102040e 	bge	zero,r4,8006dbc <_dtoa_r+0x1600>
 80065ac:	d9000615 	stw	r4,24(sp)
 80065b0:	0500050e 	bge	zero,r20,80065c8 <_dtoa_r+0xe0c>
 80065b4:	880b883a 	mov	r5,r17
 80065b8:	a00d883a 	mov	r6,r20
 80065bc:	e009883a 	mov	r4,fp
 80065c0:	8008fc00 	call	8008fc0 <__lshift>
 80065c4:	1023883a 	mov	r17,r2
 80065c8:	9801241e 	bne	r19,zero,8006a5c <_dtoa_r+0x12a0>
 80065cc:	8829883a 	mov	r20,r17
 80065d0:	d9000617 	ldw	r4,24(sp)
 80065d4:	dcc00717 	ldw	r19,28(sp)
 80065d8:	9480004c 	andi	r18,r18,1
 80065dc:	20bfffc4 	addi	r2,r4,-1
 80065e0:	9885883a 	add	r2,r19,r2
 80065e4:	d8800415 	stw	r2,16(sp)
 80065e8:	dc800615 	stw	r18,24(sp)
 80065ec:	a80b883a 	mov	r5,r21
 80065f0:	8009883a 	mov	r4,r16
 80065f4:	80055bc0 	call	80055bc <quorem>
 80065f8:	880b883a 	mov	r5,r17
 80065fc:	8009883a 	mov	r4,r16
 8006600:	102f883a 	mov	r23,r2
 8006604:	80091080 	call	8009108 <__mcmp>
 8006608:	a80b883a 	mov	r5,r21
 800660c:	a00d883a 	mov	r6,r20
 8006610:	e009883a 	mov	r4,fp
 8006614:	102d883a 	mov	r22,r2
 8006618:	80091680 	call	8009168 <__mdiff>
 800661c:	1007883a 	mov	r3,r2
 8006620:	10800317 	ldw	r2,12(r2)
 8006624:	bc800c04 	addi	r18,r23,48
 8006628:	180b883a 	mov	r5,r3
 800662c:	10004e1e 	bne	r2,zero,8006768 <_dtoa_r+0xfac>
 8006630:	8009883a 	mov	r4,r16
 8006634:	d8c01615 	stw	r3,88(sp)
 8006638:	80091080 	call	8009108 <__mcmp>
 800663c:	d8c01617 	ldw	r3,88(sp)
 8006640:	e009883a 	mov	r4,fp
 8006644:	d8801615 	stw	r2,88(sp)
 8006648:	180b883a 	mov	r5,r3
 800664c:	80088e80 	call	80088e8 <_Bfree>
 8006650:	d8801617 	ldw	r2,88(sp)
 8006654:	1000041e 	bne	r2,zero,8006668 <_dtoa_r+0xeac>
 8006658:	d9800317 	ldw	r6,12(sp)
 800665c:	3000021e 	bne	r6,zero,8006668 <_dtoa_r+0xeac>
 8006660:	d8c00617 	ldw	r3,24(sp)
 8006664:	18003726 	beq	r3,zero,8006744 <_dtoa_r+0xf88>
 8006668:	b0002016 	blt	r22,zero,80066ec <_dtoa_r+0xf30>
 800666c:	b000041e 	bne	r22,zero,8006680 <_dtoa_r+0xec4>
 8006670:	d9000317 	ldw	r4,12(sp)
 8006674:	2000021e 	bne	r4,zero,8006680 <_dtoa_r+0xec4>
 8006678:	d8c00617 	ldw	r3,24(sp)
 800667c:	18001b26 	beq	r3,zero,80066ec <_dtoa_r+0xf30>
 8006680:	00810716 	blt	zero,r2,8006aa0 <_dtoa_r+0x12e4>
 8006684:	d8c00417 	ldw	r3,16(sp)
 8006688:	9d800044 	addi	r22,r19,1
 800668c:	9c800005 	stb	r18,0(r19)
 8006690:	b02f883a 	mov	r23,r22
 8006694:	98c10626 	beq	r19,r3,8006ab0 <_dtoa_r+0x12f4>
 8006698:	800b883a 	mov	r5,r16
 800669c:	000f883a 	mov	r7,zero
 80066a0:	01800284 	movi	r6,10
 80066a4:	e009883a 	mov	r4,fp
 80066a8:	80089100 	call	8008910 <__multadd>
 80066ac:	1021883a 	mov	r16,r2
 80066b0:	000f883a 	mov	r7,zero
 80066b4:	01800284 	movi	r6,10
 80066b8:	880b883a 	mov	r5,r17
 80066bc:	e009883a 	mov	r4,fp
 80066c0:	8d002526 	beq	r17,r20,8006758 <_dtoa_r+0xf9c>
 80066c4:	80089100 	call	8008910 <__multadd>
 80066c8:	a00b883a 	mov	r5,r20
 80066cc:	000f883a 	mov	r7,zero
 80066d0:	01800284 	movi	r6,10
 80066d4:	e009883a 	mov	r4,fp
 80066d8:	1023883a 	mov	r17,r2
 80066dc:	80089100 	call	8008910 <__multadd>
 80066e0:	1029883a 	mov	r20,r2
 80066e4:	b027883a 	mov	r19,r22
 80066e8:	003fc006 	br	80065ec <__alt_data_end+0xff0065ec>
 80066ec:	9011883a 	mov	r8,r18
 80066f0:	00800e0e 	bge	zero,r2,800672c <_dtoa_r+0xf70>
 80066f4:	800b883a 	mov	r5,r16
 80066f8:	01800044 	movi	r6,1
 80066fc:	e009883a 	mov	r4,fp
 8006700:	da001715 	stw	r8,92(sp)
 8006704:	8008fc00 	call	8008fc0 <__lshift>
 8006708:	a80b883a 	mov	r5,r21
 800670c:	1009883a 	mov	r4,r2
 8006710:	1021883a 	mov	r16,r2
 8006714:	80091080 	call	8009108 <__mcmp>
 8006718:	da001717 	ldw	r8,92(sp)
 800671c:	0081960e 	bge	zero,r2,8006d78 <_dtoa_r+0x15bc>
 8006720:	00800e44 	movi	r2,57
 8006724:	40817026 	beq	r8,r2,8006ce8 <_dtoa_r+0x152c>
 8006728:	ba000c44 	addi	r8,r23,49
 800672c:	8825883a 	mov	r18,r17
 8006730:	9dc00044 	addi	r23,r19,1
 8006734:	9a000005 	stb	r8,0(r19)
 8006738:	a023883a 	mov	r17,r20
 800673c:	dc000915 	stw	r16,36(sp)
 8006740:	003f2406 	br	80063d4 <__alt_data_end+0xff0063d4>
 8006744:	00800e44 	movi	r2,57
 8006748:	9011883a 	mov	r8,r18
 800674c:	90816626 	beq	r18,r2,8006ce8 <_dtoa_r+0x152c>
 8006750:	05bff516 	blt	zero,r22,8006728 <__alt_data_end+0xff006728>
 8006754:	003ff506 	br	800672c <__alt_data_end+0xff00672c>
 8006758:	80089100 	call	8008910 <__multadd>
 800675c:	1023883a 	mov	r17,r2
 8006760:	1029883a 	mov	r20,r2
 8006764:	003fdf06 	br	80066e4 <__alt_data_end+0xff0066e4>
 8006768:	e009883a 	mov	r4,fp
 800676c:	80088e80 	call	80088e8 <_Bfree>
 8006770:	00800044 	movi	r2,1
 8006774:	003fbc06 	br	8006668 <__alt_data_end+0xff006668>
 8006778:	a80b883a 	mov	r5,r21
 800677c:	8009883a 	mov	r4,r16
 8006780:	80091080 	call	8009108 <__mcmp>
 8006784:	103edb0e 	bge	r2,zero,80062f4 <__alt_data_end+0xff0062f4>
 8006788:	800b883a 	mov	r5,r16
 800678c:	000f883a 	mov	r7,zero
 8006790:	01800284 	movi	r6,10
 8006794:	e009883a 	mov	r4,fp
 8006798:	80089100 	call	8008910 <__multadd>
 800679c:	1021883a 	mov	r16,r2
 80067a0:	d8800517 	ldw	r2,20(sp)
 80067a4:	d8c00b17 	ldw	r3,44(sp)
 80067a8:	10bfffc4 	addi	r2,r2,-1
 80067ac:	d8800515 	stw	r2,20(sp)
 80067b0:	183f761e 	bne	r3,zero,800658c <__alt_data_end+0xff00658c>
 80067b4:	d9000c17 	ldw	r4,48(sp)
 80067b8:	0101730e 	bge	zero,r4,8006d88 <_dtoa_r+0x15cc>
 80067bc:	d9000615 	stw	r4,24(sp)
 80067c0:	003ed006 	br	8006304 <__alt_data_end+0xff006304>
 80067c4:	00800084 	movi	r2,2
 80067c8:	3081861e 	bne	r6,r2,8006de4 <_dtoa_r+0x1628>
 80067cc:	d8000b15 	stw	zero,44(sp)
 80067d0:	003f3c06 	br	80064c4 <__alt_data_end+0xff0064c4>
 80067d4:	dc000917 	ldw	r16,36(sp)
 80067d8:	003e9206 	br	8006224 <__alt_data_end+0xff006224>
 80067dc:	d9c00317 	ldw	r7,12(sp)
 80067e0:	00800084 	movi	r2,2
 80067e4:	11fec50e 	bge	r2,r7,80062fc <__alt_data_end+0xff0062fc>
 80067e8:	d9000617 	ldw	r4,24(sp)
 80067ec:	20013c1e 	bne	r4,zero,8006ce0 <_dtoa_r+0x1524>
 80067f0:	a80b883a 	mov	r5,r21
 80067f4:	000f883a 	mov	r7,zero
 80067f8:	01800144 	movi	r6,5
 80067fc:	e009883a 	mov	r4,fp
 8006800:	80089100 	call	8008910 <__multadd>
 8006804:	100b883a 	mov	r5,r2
 8006808:	8009883a 	mov	r4,r16
 800680c:	102b883a 	mov	r21,r2
 8006810:	80091080 	call	8009108 <__mcmp>
 8006814:	dc000915 	stw	r16,36(sp)
 8006818:	00bf410e 	bge	zero,r2,8006520 <__alt_data_end+0xff006520>
 800681c:	d9c00717 	ldw	r7,28(sp)
 8006820:	00800c44 	movi	r2,49
 8006824:	38800005 	stb	r2,0(r7)
 8006828:	d8800517 	ldw	r2,20(sp)
 800682c:	3dc00044 	addi	r23,r7,1
 8006830:	10800044 	addi	r2,r2,1
 8006834:	d8800515 	stw	r2,20(sp)
 8006838:	003f3d06 	br	8006530 <__alt_data_end+0xff006530>
 800683c:	d9800517 	ldw	r6,20(sp)
 8006840:	d9c00717 	ldw	r7,28(sp)
 8006844:	00800c44 	movi	r2,49
 8006848:	31800044 	addi	r6,r6,1
 800684c:	d9800515 	stw	r6,20(sp)
 8006850:	38800005 	stb	r2,0(r7)
 8006854:	003edf06 	br	80063d4 <__alt_data_end+0xff0063d4>
 8006858:	d8000b15 	stw	zero,44(sp)
 800685c:	003c9f06 	br	8005adc <__alt_data_end+0xff005adc>
 8006860:	903e7e1e 	bne	r18,zero,800625c <__alt_data_end+0xff00625c>
 8006864:	00800434 	movhi	r2,16
 8006868:	10bfffc4 	addi	r2,r2,-1
 800686c:	9884703a 	and	r2,r19,r2
 8006870:	1000ea1e 	bne	r2,zero,8006c1c <_dtoa_r+0x1460>
 8006874:	9cdffc2c 	andhi	r19,r19,32752
 8006878:	9800e826 	beq	r19,zero,8006c1c <_dtoa_r+0x1460>
 800687c:	d9c00817 	ldw	r7,32(sp)
 8006880:	b5800044 	addi	r22,r22,1
 8006884:	04c00044 	movi	r19,1
 8006888:	39c00044 	addi	r7,r7,1
 800688c:	d9c00815 	stw	r7,32(sp)
 8006890:	d8800d17 	ldw	r2,52(sp)
 8006894:	103e721e 	bne	r2,zero,8006260 <__alt_data_end+0xff006260>
 8006898:	00800044 	movi	r2,1
 800689c:	003e7906 	br	8006284 <__alt_data_end+0xff006284>
 80068a0:	8009883a 	mov	r4,r16
 80068a4:	8002ebc0 	call	8002ebc <__floatsidf>
 80068a8:	d9800f17 	ldw	r6,60(sp)
 80068ac:	d9c01017 	ldw	r7,64(sp)
 80068b0:	1009883a 	mov	r4,r2
 80068b4:	180b883a 	mov	r5,r3
 80068b8:	80027a40 	call	80027a4 <__muldf3>
 80068bc:	000d883a 	mov	r6,zero
 80068c0:	01d00734 	movhi	r7,16412
 80068c4:	1009883a 	mov	r4,r2
 80068c8:	180b883a 	mov	r5,r3
 80068cc:	800d2c40 	call	800d2c4 <__adddf3>
 80068d0:	047f3034 	movhi	r17,64704
 80068d4:	1021883a 	mov	r16,r2
 80068d8:	1c63883a 	add	r17,r3,r17
 80068dc:	d9000f17 	ldw	r4,60(sp)
 80068e0:	d9401017 	ldw	r5,64(sp)
 80068e4:	000d883a 	mov	r6,zero
 80068e8:	01d00534 	movhi	r7,16404
 80068ec:	800e6b00 	call	800e6b0 <__subdf3>
 80068f0:	800d883a 	mov	r6,r16
 80068f4:	880f883a 	mov	r7,r17
 80068f8:	1009883a 	mov	r4,r2
 80068fc:	180b883a 	mov	r5,r3
 8006900:	102b883a 	mov	r21,r2
 8006904:	1829883a 	mov	r20,r3
 8006908:	800e4e00 	call	800e4e0 <__gedf2>
 800690c:	00806c16 	blt	zero,r2,8006ac0 <_dtoa_r+0x1304>
 8006910:	89e0003c 	xorhi	r7,r17,32768
 8006914:	800d883a 	mov	r6,r16
 8006918:	a809883a 	mov	r4,r21
 800691c:	a00b883a 	mov	r5,r20
 8006920:	800e5bc0 	call	800e5bc <__ledf2>
 8006924:	103d7e0e 	bge	r2,zero,8005f20 <__alt_data_end+0xff005f20>
 8006928:	002b883a 	mov	r21,zero
 800692c:	0023883a 	mov	r17,zero
 8006930:	003efb06 	br	8006520 <__alt_data_end+0xff006520>
 8006934:	d8800717 	ldw	r2,28(sp)
 8006938:	003bd006 	br	800587c <__alt_data_end+0xff00587c>
 800693c:	d9000a17 	ldw	r4,40(sp)
 8006940:	d9800d17 	ldw	r6,52(sp)
 8006944:	dd400a15 	stw	r21,40(sp)
 8006948:	a905c83a 	sub	r2,r21,r4
 800694c:	308d883a 	add	r6,r6,r2
 8006950:	d9800d15 	stw	r6,52(sp)
 8006954:	002b883a 	mov	r21,zero
 8006958:	003e0606 	br	8006174 <__alt_data_end+0xff006174>
 800695c:	9023883a 	mov	r17,r18
 8006960:	9829883a 	mov	r20,r19
 8006964:	04000084 	movi	r16,2
 8006968:	003c9206 	br	8005bb4 <__alt_data_end+0xff005bb4>
 800696c:	04000044 	movi	r16,1
 8006970:	dc000c15 	stw	r16,48(sp)
 8006974:	dc000615 	stw	r16,24(sp)
 8006978:	dc002215 	stw	r16,136(sp)
 800697c:	e0001115 	stw	zero,68(fp)
 8006980:	000b883a 	mov	r5,zero
 8006984:	003c6906 	br	8005b2c <__alt_data_end+0xff005b2c>
 8006988:	3021883a 	mov	r16,r6
 800698c:	003ffb06 	br	800697c <__alt_data_end+0xff00697c>
 8006990:	1000021e 	bne	r2,zero,800699c <_dtoa_r+0x11e0>
 8006994:	4200004c 	andi	r8,r8,1
 8006998:	403e7d1e 	bne	r8,zero,8006390 <__alt_data_end+0xff006390>
 800699c:	01000c04 	movi	r4,48
 80069a0:	00000106 	br	80069a8 <_dtoa_r+0x11ec>
 80069a4:	102f883a 	mov	r23,r2
 80069a8:	b8bfffc4 	addi	r2,r23,-1
 80069ac:	10c00007 	ldb	r3,0(r2)
 80069b0:	193ffc26 	beq	r3,r4,80069a4 <__alt_data_end+0xff0069a4>
 80069b4:	003e8706 	br	80063d4 <__alt_data_end+0xff0063d4>
 80069b8:	d8800517 	ldw	r2,20(sp)
 80069bc:	00a3c83a 	sub	r17,zero,r2
 80069c0:	8800a426 	beq	r17,zero,8006c54 <_dtoa_r+0x1498>
 80069c4:	888003cc 	andi	r2,r17,15
 80069c8:	100490fa 	slli	r2,r2,3
 80069cc:	00c20074 	movhi	r3,2049
 80069d0:	18c7b404 	addi	r3,r3,7888
 80069d4:	1885883a 	add	r2,r3,r2
 80069d8:	11800017 	ldw	r6,0(r2)
 80069dc:	11c00117 	ldw	r7,4(r2)
 80069e0:	9009883a 	mov	r4,r18
 80069e4:	980b883a 	mov	r5,r19
 80069e8:	8823d13a 	srai	r17,r17,4
 80069ec:	80027a40 	call	80027a4 <__muldf3>
 80069f0:	d8800f15 	stw	r2,60(sp)
 80069f4:	d8c01015 	stw	r3,64(sp)
 80069f8:	8800e826 	beq	r17,zero,8006d9c <_dtoa_r+0x15e0>
 80069fc:	05020074 	movhi	r20,2049
 8006a00:	a507aa04 	addi	r20,r20,7848
 8006a04:	04000084 	movi	r16,2
 8006a08:	8980004c 	andi	r6,r17,1
 8006a0c:	1009883a 	mov	r4,r2
 8006a10:	8823d07a 	srai	r17,r17,1
 8006a14:	180b883a 	mov	r5,r3
 8006a18:	30000426 	beq	r6,zero,8006a2c <_dtoa_r+0x1270>
 8006a1c:	a1800017 	ldw	r6,0(r20)
 8006a20:	a1c00117 	ldw	r7,4(r20)
 8006a24:	84000044 	addi	r16,r16,1
 8006a28:	80027a40 	call	80027a4 <__muldf3>
 8006a2c:	a5000204 	addi	r20,r20,8
 8006a30:	883ff51e 	bne	r17,zero,8006a08 <__alt_data_end+0xff006a08>
 8006a34:	d8800f15 	stw	r2,60(sp)
 8006a38:	d8c01015 	stw	r3,64(sp)
 8006a3c:	003c7606 	br	8005c18 <__alt_data_end+0xff005c18>
 8006a40:	00c00c04 	movi	r3,48
 8006a44:	10c00005 	stb	r3,0(r2)
 8006a48:	d8c00517 	ldw	r3,20(sp)
 8006a4c:	bd3fffc3 	ldbu	r20,-1(r23)
 8006a50:	18c00044 	addi	r3,r3,1
 8006a54:	d8c00515 	stw	r3,20(sp)
 8006a58:	003db906 	br	8006140 <__alt_data_end+0xff006140>
 8006a5c:	89400117 	ldw	r5,4(r17)
 8006a60:	e009883a 	mov	r4,fp
 8006a64:	80088400 	call	8008840 <_Balloc>
 8006a68:	89800417 	ldw	r6,16(r17)
 8006a6c:	89400304 	addi	r5,r17,12
 8006a70:	11000304 	addi	r4,r2,12
 8006a74:	31800084 	addi	r6,r6,2
 8006a78:	318d883a 	add	r6,r6,r6
 8006a7c:	318d883a 	add	r6,r6,r6
 8006a80:	1027883a 	mov	r19,r2
 8006a84:	80085d00 	call	80085d0 <memcpy>
 8006a88:	01800044 	movi	r6,1
 8006a8c:	980b883a 	mov	r5,r19
 8006a90:	e009883a 	mov	r4,fp
 8006a94:	8008fc00 	call	8008fc0 <__lshift>
 8006a98:	1029883a 	mov	r20,r2
 8006a9c:	003ecc06 	br	80065d0 <__alt_data_end+0xff0065d0>
 8006aa0:	00800e44 	movi	r2,57
 8006aa4:	90809026 	beq	r18,r2,8006ce8 <_dtoa_r+0x152c>
 8006aa8:	92000044 	addi	r8,r18,1
 8006aac:	003f1f06 	br	800672c <__alt_data_end+0xff00672c>
 8006ab0:	9011883a 	mov	r8,r18
 8006ab4:	8825883a 	mov	r18,r17
 8006ab8:	a023883a 	mov	r17,r20
 8006abc:	003e2906 	br	8006364 <__alt_data_end+0xff006364>
 8006ac0:	002b883a 	mov	r21,zero
 8006ac4:	0023883a 	mov	r17,zero
 8006ac8:	003f5406 	br	800681c <__alt_data_end+0xff00681c>
 8006acc:	61bfffc4 	addi	r6,r12,-1
 8006ad0:	300490fa 	slli	r2,r6,3
 8006ad4:	00c20074 	movhi	r3,2049
 8006ad8:	18c7b404 	addi	r3,r3,7888
 8006adc:	1885883a 	add	r2,r3,r2
 8006ae0:	11000017 	ldw	r4,0(r2)
 8006ae4:	11400117 	ldw	r5,4(r2)
 8006ae8:	d8800717 	ldw	r2,28(sp)
 8006aec:	880f883a 	mov	r7,r17
 8006af0:	d9801215 	stw	r6,72(sp)
 8006af4:	800d883a 	mov	r6,r16
 8006af8:	db001615 	stw	r12,88(sp)
 8006afc:	15c00044 	addi	r23,r2,1
 8006b00:	80027a40 	call	80027a4 <__muldf3>
 8006b04:	d9401017 	ldw	r5,64(sp)
 8006b08:	d9000f17 	ldw	r4,60(sp)
 8006b0c:	d8c01515 	stw	r3,84(sp)
 8006b10:	d8801415 	stw	r2,80(sp)
 8006b14:	800efac0 	call	800efac <__fixdfsi>
 8006b18:	1009883a 	mov	r4,r2
 8006b1c:	1021883a 	mov	r16,r2
 8006b20:	8002ebc0 	call	8002ebc <__floatsidf>
 8006b24:	d9000f17 	ldw	r4,60(sp)
 8006b28:	d9401017 	ldw	r5,64(sp)
 8006b2c:	100d883a 	mov	r6,r2
 8006b30:	180f883a 	mov	r7,r3
 8006b34:	800e6b00 	call	800e6b0 <__subdf3>
 8006b38:	1829883a 	mov	r20,r3
 8006b3c:	d8c00717 	ldw	r3,28(sp)
 8006b40:	84000c04 	addi	r16,r16,48
 8006b44:	1023883a 	mov	r17,r2
 8006b48:	1c000005 	stb	r16,0(r3)
 8006b4c:	db001617 	ldw	r12,88(sp)
 8006b50:	00800044 	movi	r2,1
 8006b54:	60802226 	beq	r12,r2,8006be0 <_dtoa_r+0x1424>
 8006b58:	d9c00717 	ldw	r7,28(sp)
 8006b5c:	8805883a 	mov	r2,r17
 8006b60:	b82b883a 	mov	r21,r23
 8006b64:	3b19883a 	add	r12,r7,r12
 8006b68:	6023883a 	mov	r17,r12
 8006b6c:	a007883a 	mov	r3,r20
 8006b70:	dc800f15 	stw	r18,60(sp)
 8006b74:	000d883a 	mov	r6,zero
 8006b78:	01d00934 	movhi	r7,16420
 8006b7c:	1009883a 	mov	r4,r2
 8006b80:	180b883a 	mov	r5,r3
 8006b84:	80027a40 	call	80027a4 <__muldf3>
 8006b88:	180b883a 	mov	r5,r3
 8006b8c:	1009883a 	mov	r4,r2
 8006b90:	1829883a 	mov	r20,r3
 8006b94:	1025883a 	mov	r18,r2
 8006b98:	800efac0 	call	800efac <__fixdfsi>
 8006b9c:	1009883a 	mov	r4,r2
 8006ba0:	1021883a 	mov	r16,r2
 8006ba4:	8002ebc0 	call	8002ebc <__floatsidf>
 8006ba8:	100d883a 	mov	r6,r2
 8006bac:	180f883a 	mov	r7,r3
 8006bb0:	9009883a 	mov	r4,r18
 8006bb4:	a00b883a 	mov	r5,r20
 8006bb8:	84000c04 	addi	r16,r16,48
 8006bbc:	800e6b00 	call	800e6b0 <__subdf3>
 8006bc0:	ad400044 	addi	r21,r21,1
 8006bc4:	ac3fffc5 	stb	r16,-1(r21)
 8006bc8:	ac7fea1e 	bne	r21,r17,8006b74 <__alt_data_end+0xff006b74>
 8006bcc:	1023883a 	mov	r17,r2
 8006bd0:	d8801217 	ldw	r2,72(sp)
 8006bd4:	dc800f17 	ldw	r18,60(sp)
 8006bd8:	1829883a 	mov	r20,r3
 8006bdc:	b8af883a 	add	r23,r23,r2
 8006be0:	d9001417 	ldw	r4,80(sp)
 8006be4:	d9401517 	ldw	r5,84(sp)
 8006be8:	000d883a 	mov	r6,zero
 8006bec:	01cff834 	movhi	r7,16352
 8006bf0:	800d2c40 	call	800d2c4 <__adddf3>
 8006bf4:	880d883a 	mov	r6,r17
 8006bf8:	a00f883a 	mov	r7,r20
 8006bfc:	1009883a 	mov	r4,r2
 8006c00:	180b883a 	mov	r5,r3
 8006c04:	800e5bc0 	call	800e5bc <__ledf2>
 8006c08:	10003e0e 	bge	r2,zero,8006d04 <_dtoa_r+0x1548>
 8006c0c:	d9001317 	ldw	r4,76(sp)
 8006c10:	bd3fffc3 	ldbu	r20,-1(r23)
 8006c14:	d9000515 	stw	r4,20(sp)
 8006c18:	003d3b06 	br	8006108 <__alt_data_end+0xff006108>
 8006c1c:	0027883a 	mov	r19,zero
 8006c20:	003f1b06 	br	8006890 <__alt_data_end+0xff006890>
 8006c24:	d8800817 	ldw	r2,32(sp)
 8006c28:	11e9c83a 	sub	r20,r2,r7
 8006c2c:	0005883a 	mov	r2,zero
 8006c30:	003d5406 	br	8006184 <__alt_data_end+0xff006184>
 8006c34:	00800044 	movi	r2,1
 8006c38:	003dc706 	br	8006358 <__alt_data_end+0xff006358>
 8006c3c:	d8c00217 	ldw	r3,8(sp)
 8006c40:	00800d84 	movi	r2,54
 8006c44:	dd400a17 	ldw	r21,40(sp)
 8006c48:	10c5c83a 	sub	r2,r2,r3
 8006c4c:	dd000817 	ldw	r20,32(sp)
 8006c50:	003d4c06 	br	8006184 <__alt_data_end+0xff006184>
 8006c54:	dc800f15 	stw	r18,60(sp)
 8006c58:	dcc01015 	stw	r19,64(sp)
 8006c5c:	04000084 	movi	r16,2
 8006c60:	003bed06 	br	8005c18 <__alt_data_end+0xff005c18>
 8006c64:	d9000617 	ldw	r4,24(sp)
 8006c68:	203f0d26 	beq	r4,zero,80068a0 <__alt_data_end+0xff0068a0>
 8006c6c:	d9800c17 	ldw	r6,48(sp)
 8006c70:	01bcab0e 	bge	zero,r6,8005f20 <__alt_data_end+0xff005f20>
 8006c74:	d9401017 	ldw	r5,64(sp)
 8006c78:	d9000f17 	ldw	r4,60(sp)
 8006c7c:	000d883a 	mov	r6,zero
 8006c80:	01d00934 	movhi	r7,16420
 8006c84:	80027a40 	call	80027a4 <__muldf3>
 8006c88:	81000044 	addi	r4,r16,1
 8006c8c:	d8800f15 	stw	r2,60(sp)
 8006c90:	d8c01015 	stw	r3,64(sp)
 8006c94:	8002ebc0 	call	8002ebc <__floatsidf>
 8006c98:	d9800f17 	ldw	r6,60(sp)
 8006c9c:	d9c01017 	ldw	r7,64(sp)
 8006ca0:	1009883a 	mov	r4,r2
 8006ca4:	180b883a 	mov	r5,r3
 8006ca8:	80027a40 	call	80027a4 <__muldf3>
 8006cac:	01d00734 	movhi	r7,16412
 8006cb0:	000d883a 	mov	r6,zero
 8006cb4:	1009883a 	mov	r4,r2
 8006cb8:	180b883a 	mov	r5,r3
 8006cbc:	800d2c40 	call	800d2c4 <__adddf3>
 8006cc0:	d9c00517 	ldw	r7,20(sp)
 8006cc4:	047f3034 	movhi	r17,64704
 8006cc8:	1021883a 	mov	r16,r2
 8006ccc:	39ffffc4 	addi	r7,r7,-1
 8006cd0:	d9c01315 	stw	r7,76(sp)
 8006cd4:	1c63883a 	add	r17,r3,r17
 8006cd8:	db000c17 	ldw	r12,48(sp)
 8006cdc:	003bea06 	br	8005c88 <__alt_data_end+0xff005c88>
 8006ce0:	dc000915 	stw	r16,36(sp)
 8006ce4:	003e0e06 	br	8006520 <__alt_data_end+0xff006520>
 8006ce8:	01000e44 	movi	r4,57
 8006cec:	8825883a 	mov	r18,r17
 8006cf0:	9dc00044 	addi	r23,r19,1
 8006cf4:	99000005 	stb	r4,0(r19)
 8006cf8:	a023883a 	mov	r17,r20
 8006cfc:	dc000915 	stw	r16,36(sp)
 8006d00:	003da406 	br	8006394 <__alt_data_end+0xff006394>
 8006d04:	d9801417 	ldw	r6,80(sp)
 8006d08:	d9c01517 	ldw	r7,84(sp)
 8006d0c:	0009883a 	mov	r4,zero
 8006d10:	014ff834 	movhi	r5,16352
 8006d14:	800e6b00 	call	800e6b0 <__subdf3>
 8006d18:	880d883a 	mov	r6,r17
 8006d1c:	a00f883a 	mov	r7,r20
 8006d20:	1009883a 	mov	r4,r2
 8006d24:	180b883a 	mov	r5,r3
 8006d28:	800e4e00 	call	800e4e0 <__gedf2>
 8006d2c:	00bc7c0e 	bge	zero,r2,8005f20 <__alt_data_end+0xff005f20>
 8006d30:	01000c04 	movi	r4,48
 8006d34:	00000106 	br	8006d3c <_dtoa_r+0x1580>
 8006d38:	102f883a 	mov	r23,r2
 8006d3c:	b8bfffc4 	addi	r2,r23,-1
 8006d40:	10c00007 	ldb	r3,0(r2)
 8006d44:	193ffc26 	beq	r3,r4,8006d38 <__alt_data_end+0xff006d38>
 8006d48:	d9801317 	ldw	r6,76(sp)
 8006d4c:	d9800515 	stw	r6,20(sp)
 8006d50:	003c4406 	br	8005e64 <__alt_data_end+0xff005e64>
 8006d54:	d9801317 	ldw	r6,76(sp)
 8006d58:	d9800515 	stw	r6,20(sp)
 8006d5c:	003cea06 	br	8006108 <__alt_data_end+0xff006108>
 8006d60:	dd800f17 	ldw	r22,60(sp)
 8006d64:	dcc01017 	ldw	r19,64(sp)
 8006d68:	dc801217 	ldw	r18,72(sp)
 8006d6c:	003c6c06 	br	8005f20 <__alt_data_end+0xff005f20>
 8006d70:	903e031e 	bne	r18,zero,8006580 <__alt_data_end+0xff006580>
 8006d74:	003ebb06 	br	8006864 <__alt_data_end+0xff006864>
 8006d78:	103e6c1e 	bne	r2,zero,800672c <__alt_data_end+0xff00672c>
 8006d7c:	4080004c 	andi	r2,r8,1
 8006d80:	103e6a26 	beq	r2,zero,800672c <__alt_data_end+0xff00672c>
 8006d84:	003e6606 	br	8006720 <__alt_data_end+0xff006720>
 8006d88:	d8c00317 	ldw	r3,12(sp)
 8006d8c:	00800084 	movi	r2,2
 8006d90:	10c02916 	blt	r2,r3,8006e38 <_dtoa_r+0x167c>
 8006d94:	d9000c17 	ldw	r4,48(sp)
 8006d98:	003e8806 	br	80067bc <__alt_data_end+0xff0067bc>
 8006d9c:	04000084 	movi	r16,2
 8006da0:	003b9d06 	br	8005c18 <__alt_data_end+0xff005c18>
 8006da4:	d9001317 	ldw	r4,76(sp)
 8006da8:	d9000515 	stw	r4,20(sp)
 8006dac:	003cd606 	br	8006108 <__alt_data_end+0xff006108>
 8006db0:	d8801317 	ldw	r2,76(sp)
 8006db4:	d8800515 	stw	r2,20(sp)
 8006db8:	003c2a06 	br	8005e64 <__alt_data_end+0xff005e64>
 8006dbc:	d9800317 	ldw	r6,12(sp)
 8006dc0:	00800084 	movi	r2,2
 8006dc4:	11801516 	blt	r2,r6,8006e1c <_dtoa_r+0x1660>
 8006dc8:	d9c00c17 	ldw	r7,48(sp)
 8006dcc:	d9c00615 	stw	r7,24(sp)
 8006dd0:	003df706 	br	80065b0 <__alt_data_end+0xff0065b0>
 8006dd4:	193d3926 	beq	r3,r4,80062bc <__alt_data_end+0xff0062bc>
 8006dd8:	00c00f04 	movi	r3,60
 8006ddc:	1885c83a 	sub	r2,r3,r2
 8006de0:	003ddf06 	br	8006560 <__alt_data_end+0xff006560>
 8006de4:	e009883a 	mov	r4,fp
 8006de8:	e0001115 	stw	zero,68(fp)
 8006dec:	000b883a 	mov	r5,zero
 8006df0:	80088400 	call	8008840 <_Balloc>
 8006df4:	d8800715 	stw	r2,28(sp)
 8006df8:	d8c00717 	ldw	r3,28(sp)
 8006dfc:	00bfffc4 	movi	r2,-1
 8006e00:	01000044 	movi	r4,1
 8006e04:	d8800c15 	stw	r2,48(sp)
 8006e08:	e0c01015 	stw	r3,64(fp)
 8006e0c:	d9000b15 	stw	r4,44(sp)
 8006e10:	d8800615 	stw	r2,24(sp)
 8006e14:	d8002215 	stw	zero,136(sp)
 8006e18:	003c4106 	br	8005f20 <__alt_data_end+0xff005f20>
 8006e1c:	d8c00c17 	ldw	r3,48(sp)
 8006e20:	d8c00615 	stw	r3,24(sp)
 8006e24:	003e7006 	br	80067e8 <__alt_data_end+0xff0067e8>
 8006e28:	04400044 	movi	r17,1
 8006e2c:	003b2006 	br	8005ab0 <__alt_data_end+0xff005ab0>
 8006e30:	000b883a 	mov	r5,zero
 8006e34:	003b3d06 	br	8005b2c <__alt_data_end+0xff005b2c>
 8006e38:	d8800c17 	ldw	r2,48(sp)
 8006e3c:	d8800615 	stw	r2,24(sp)
 8006e40:	003e6906 	br	80067e8 <__alt_data_end+0xff0067e8>

08006e44 <__sflush_r>:
 8006e44:	2880030b 	ldhu	r2,12(r5)
 8006e48:	defffb04 	addi	sp,sp,-20
 8006e4c:	dcc00315 	stw	r19,12(sp)
 8006e50:	dc400115 	stw	r17,4(sp)
 8006e54:	dfc00415 	stw	ra,16(sp)
 8006e58:	dc800215 	stw	r18,8(sp)
 8006e5c:	dc000015 	stw	r16,0(sp)
 8006e60:	10c0020c 	andi	r3,r2,8
 8006e64:	2823883a 	mov	r17,r5
 8006e68:	2027883a 	mov	r19,r4
 8006e6c:	1800311e 	bne	r3,zero,8006f34 <__sflush_r+0xf0>
 8006e70:	28c00117 	ldw	r3,4(r5)
 8006e74:	10820014 	ori	r2,r2,2048
 8006e78:	2880030d 	sth	r2,12(r5)
 8006e7c:	00c04b0e 	bge	zero,r3,8006fac <__sflush_r+0x168>
 8006e80:	8a000a17 	ldw	r8,40(r17)
 8006e84:	40002326 	beq	r8,zero,8006f14 <__sflush_r+0xd0>
 8006e88:	9c000017 	ldw	r16,0(r19)
 8006e8c:	10c4000c 	andi	r3,r2,4096
 8006e90:	98000015 	stw	zero,0(r19)
 8006e94:	18004826 	beq	r3,zero,8006fb8 <__sflush_r+0x174>
 8006e98:	89801417 	ldw	r6,80(r17)
 8006e9c:	10c0010c 	andi	r3,r2,4
 8006ea0:	18000626 	beq	r3,zero,8006ebc <__sflush_r+0x78>
 8006ea4:	88c00117 	ldw	r3,4(r17)
 8006ea8:	88800c17 	ldw	r2,48(r17)
 8006eac:	30cdc83a 	sub	r6,r6,r3
 8006eb0:	10000226 	beq	r2,zero,8006ebc <__sflush_r+0x78>
 8006eb4:	88800f17 	ldw	r2,60(r17)
 8006eb8:	308dc83a 	sub	r6,r6,r2
 8006ebc:	89400717 	ldw	r5,28(r17)
 8006ec0:	000f883a 	mov	r7,zero
 8006ec4:	9809883a 	mov	r4,r19
 8006ec8:	403ee83a 	callr	r8
 8006ecc:	00ffffc4 	movi	r3,-1
 8006ed0:	10c04426 	beq	r2,r3,8006fe4 <__sflush_r+0x1a0>
 8006ed4:	88c0030b 	ldhu	r3,12(r17)
 8006ed8:	89000417 	ldw	r4,16(r17)
 8006edc:	88000115 	stw	zero,4(r17)
 8006ee0:	197dffcc 	andi	r5,r3,63487
 8006ee4:	8940030d 	sth	r5,12(r17)
 8006ee8:	89000015 	stw	r4,0(r17)
 8006eec:	18c4000c 	andi	r3,r3,4096
 8006ef0:	18002c1e 	bne	r3,zero,8006fa4 <__sflush_r+0x160>
 8006ef4:	89400c17 	ldw	r5,48(r17)
 8006ef8:	9c000015 	stw	r16,0(r19)
 8006efc:	28000526 	beq	r5,zero,8006f14 <__sflush_r+0xd0>
 8006f00:	88801004 	addi	r2,r17,64
 8006f04:	28800226 	beq	r5,r2,8006f10 <__sflush_r+0xcc>
 8006f08:	9809883a 	mov	r4,r19
 8006f0c:	80075b00 	call	80075b0 <_free_r>
 8006f10:	88000c15 	stw	zero,48(r17)
 8006f14:	0005883a 	mov	r2,zero
 8006f18:	dfc00417 	ldw	ra,16(sp)
 8006f1c:	dcc00317 	ldw	r19,12(sp)
 8006f20:	dc800217 	ldw	r18,8(sp)
 8006f24:	dc400117 	ldw	r17,4(sp)
 8006f28:	dc000017 	ldw	r16,0(sp)
 8006f2c:	dec00504 	addi	sp,sp,20
 8006f30:	f800283a 	ret
 8006f34:	2c800417 	ldw	r18,16(r5)
 8006f38:	903ff626 	beq	r18,zero,8006f14 <__alt_data_end+0xff006f14>
 8006f3c:	2c000017 	ldw	r16,0(r5)
 8006f40:	108000cc 	andi	r2,r2,3
 8006f44:	2c800015 	stw	r18,0(r5)
 8006f48:	84a1c83a 	sub	r16,r16,r18
 8006f4c:	1000131e 	bne	r2,zero,8006f9c <__sflush_r+0x158>
 8006f50:	28800517 	ldw	r2,20(r5)
 8006f54:	88800215 	stw	r2,8(r17)
 8006f58:	04000316 	blt	zero,r16,8006f68 <__sflush_r+0x124>
 8006f5c:	003fed06 	br	8006f14 <__alt_data_end+0xff006f14>
 8006f60:	90a5883a 	add	r18,r18,r2
 8006f64:	043feb0e 	bge	zero,r16,8006f14 <__alt_data_end+0xff006f14>
 8006f68:	88800917 	ldw	r2,36(r17)
 8006f6c:	89400717 	ldw	r5,28(r17)
 8006f70:	800f883a 	mov	r7,r16
 8006f74:	900d883a 	mov	r6,r18
 8006f78:	9809883a 	mov	r4,r19
 8006f7c:	103ee83a 	callr	r2
 8006f80:	80a1c83a 	sub	r16,r16,r2
 8006f84:	00bff616 	blt	zero,r2,8006f60 <__alt_data_end+0xff006f60>
 8006f88:	88c0030b 	ldhu	r3,12(r17)
 8006f8c:	00bfffc4 	movi	r2,-1
 8006f90:	18c01014 	ori	r3,r3,64
 8006f94:	88c0030d 	sth	r3,12(r17)
 8006f98:	003fdf06 	br	8006f18 <__alt_data_end+0xff006f18>
 8006f9c:	0005883a 	mov	r2,zero
 8006fa0:	003fec06 	br	8006f54 <__alt_data_end+0xff006f54>
 8006fa4:	88801415 	stw	r2,80(r17)
 8006fa8:	003fd206 	br	8006ef4 <__alt_data_end+0xff006ef4>
 8006fac:	28c00f17 	ldw	r3,60(r5)
 8006fb0:	00ffb316 	blt	zero,r3,8006e80 <__alt_data_end+0xff006e80>
 8006fb4:	003fd706 	br	8006f14 <__alt_data_end+0xff006f14>
 8006fb8:	89400717 	ldw	r5,28(r17)
 8006fbc:	000d883a 	mov	r6,zero
 8006fc0:	01c00044 	movi	r7,1
 8006fc4:	9809883a 	mov	r4,r19
 8006fc8:	403ee83a 	callr	r8
 8006fcc:	100d883a 	mov	r6,r2
 8006fd0:	00bfffc4 	movi	r2,-1
 8006fd4:	30801426 	beq	r6,r2,8007028 <__sflush_r+0x1e4>
 8006fd8:	8880030b 	ldhu	r2,12(r17)
 8006fdc:	8a000a17 	ldw	r8,40(r17)
 8006fe0:	003fae06 	br	8006e9c <__alt_data_end+0xff006e9c>
 8006fe4:	98c00017 	ldw	r3,0(r19)
 8006fe8:	183fba26 	beq	r3,zero,8006ed4 <__alt_data_end+0xff006ed4>
 8006fec:	01000744 	movi	r4,29
 8006ff0:	19000626 	beq	r3,r4,800700c <__sflush_r+0x1c8>
 8006ff4:	01000584 	movi	r4,22
 8006ff8:	19000426 	beq	r3,r4,800700c <__sflush_r+0x1c8>
 8006ffc:	88c0030b 	ldhu	r3,12(r17)
 8007000:	18c01014 	ori	r3,r3,64
 8007004:	88c0030d 	sth	r3,12(r17)
 8007008:	003fc306 	br	8006f18 <__alt_data_end+0xff006f18>
 800700c:	8880030b 	ldhu	r2,12(r17)
 8007010:	88c00417 	ldw	r3,16(r17)
 8007014:	88000115 	stw	zero,4(r17)
 8007018:	10bdffcc 	andi	r2,r2,63487
 800701c:	8880030d 	sth	r2,12(r17)
 8007020:	88c00015 	stw	r3,0(r17)
 8007024:	003fb306 	br	8006ef4 <__alt_data_end+0xff006ef4>
 8007028:	98800017 	ldw	r2,0(r19)
 800702c:	103fea26 	beq	r2,zero,8006fd8 <__alt_data_end+0xff006fd8>
 8007030:	00c00744 	movi	r3,29
 8007034:	10c00226 	beq	r2,r3,8007040 <__sflush_r+0x1fc>
 8007038:	00c00584 	movi	r3,22
 800703c:	10c0031e 	bne	r2,r3,800704c <__sflush_r+0x208>
 8007040:	9c000015 	stw	r16,0(r19)
 8007044:	0005883a 	mov	r2,zero
 8007048:	003fb306 	br	8006f18 <__alt_data_end+0xff006f18>
 800704c:	88c0030b 	ldhu	r3,12(r17)
 8007050:	3005883a 	mov	r2,r6
 8007054:	18c01014 	ori	r3,r3,64
 8007058:	88c0030d 	sth	r3,12(r17)
 800705c:	003fae06 	br	8006f18 <__alt_data_end+0xff006f18>

08007060 <_fflush_r>:
 8007060:	defffd04 	addi	sp,sp,-12
 8007064:	dc000115 	stw	r16,4(sp)
 8007068:	dfc00215 	stw	ra,8(sp)
 800706c:	2021883a 	mov	r16,r4
 8007070:	20000226 	beq	r4,zero,800707c <_fflush_r+0x1c>
 8007074:	20800e17 	ldw	r2,56(r4)
 8007078:	10000c26 	beq	r2,zero,80070ac <_fflush_r+0x4c>
 800707c:	2880030f 	ldh	r2,12(r5)
 8007080:	1000051e 	bne	r2,zero,8007098 <_fflush_r+0x38>
 8007084:	0005883a 	mov	r2,zero
 8007088:	dfc00217 	ldw	ra,8(sp)
 800708c:	dc000117 	ldw	r16,4(sp)
 8007090:	dec00304 	addi	sp,sp,12
 8007094:	f800283a 	ret
 8007098:	8009883a 	mov	r4,r16
 800709c:	dfc00217 	ldw	ra,8(sp)
 80070a0:	dc000117 	ldw	r16,4(sp)
 80070a4:	dec00304 	addi	sp,sp,12
 80070a8:	8006e441 	jmpi	8006e44 <__sflush_r>
 80070ac:	d9400015 	stw	r5,0(sp)
 80070b0:	800743c0 	call	800743c <__sinit>
 80070b4:	d9400017 	ldw	r5,0(sp)
 80070b8:	003ff006 	br	800707c <__alt_data_end+0xff00707c>

080070bc <fflush>:
 80070bc:	20000526 	beq	r4,zero,80070d4 <fflush+0x18>
 80070c0:	00820074 	movhi	r2,2049
 80070c4:	108eaa04 	addi	r2,r2,15016
 80070c8:	200b883a 	mov	r5,r4
 80070cc:	11000017 	ldw	r4,0(r2)
 80070d0:	80070601 	jmpi	8007060 <_fflush_r>
 80070d4:	00820074 	movhi	r2,2049
 80070d8:	108ea904 	addi	r2,r2,15012
 80070dc:	11000017 	ldw	r4,0(r2)
 80070e0:	01420034 	movhi	r5,2048
 80070e4:	295c1804 	addi	r5,r5,28768
 80070e8:	80079841 	jmpi	8007984 <_fwalk_reent>

080070ec <__fp_unlock>:
 80070ec:	0005883a 	mov	r2,zero
 80070f0:	f800283a 	ret

080070f4 <_cleanup_r>:
 80070f4:	01420074 	movhi	r5,2049
 80070f8:	296d8d04 	addi	r5,r5,-18892
 80070fc:	80079841 	jmpi	8007984 <_fwalk_reent>

08007100 <__sinit.part.1>:
 8007100:	defff704 	addi	sp,sp,-36
 8007104:	00c20034 	movhi	r3,2048
 8007108:	dfc00815 	stw	ra,32(sp)
 800710c:	ddc00715 	stw	r23,28(sp)
 8007110:	dd800615 	stw	r22,24(sp)
 8007114:	dd400515 	stw	r21,20(sp)
 8007118:	dd000415 	stw	r20,16(sp)
 800711c:	dcc00315 	stw	r19,12(sp)
 8007120:	dc800215 	stw	r18,8(sp)
 8007124:	dc400115 	stw	r17,4(sp)
 8007128:	dc000015 	stw	r16,0(sp)
 800712c:	18dc3d04 	addi	r3,r3,28916
 8007130:	24000117 	ldw	r16,4(r4)
 8007134:	20c00f15 	stw	r3,60(r4)
 8007138:	2080bb04 	addi	r2,r4,748
 800713c:	00c000c4 	movi	r3,3
 8007140:	20c0b915 	stw	r3,740(r4)
 8007144:	2080ba15 	stw	r2,744(r4)
 8007148:	2000b815 	stw	zero,736(r4)
 800714c:	05c00204 	movi	r23,8
 8007150:	00800104 	movi	r2,4
 8007154:	2025883a 	mov	r18,r4
 8007158:	b80d883a 	mov	r6,r23
 800715c:	81001704 	addi	r4,r16,92
 8007160:	000b883a 	mov	r5,zero
 8007164:	80000015 	stw	zero,0(r16)
 8007168:	80000115 	stw	zero,4(r16)
 800716c:	80000215 	stw	zero,8(r16)
 8007170:	8080030d 	sth	r2,12(r16)
 8007174:	80001915 	stw	zero,100(r16)
 8007178:	8000038d 	sth	zero,14(r16)
 800717c:	80000415 	stw	zero,16(r16)
 8007180:	80000515 	stw	zero,20(r16)
 8007184:	80000615 	stw	zero,24(r16)
 8007188:	80087180 	call	8008718 <memset>
 800718c:	05820074 	movhi	r22,2049
 8007190:	94400217 	ldw	r17,8(r18)
 8007194:	05420074 	movhi	r21,2049
 8007198:	05020074 	movhi	r20,2049
 800719c:	04c20074 	movhi	r19,2049
 80071a0:	b5a69b04 	addi	r22,r22,-26004
 80071a4:	ad66b204 	addi	r21,r21,-25912
 80071a8:	a526d104 	addi	r20,r20,-25788
 80071ac:	9ce6e804 	addi	r19,r19,-25696
 80071b0:	85800815 	stw	r22,32(r16)
 80071b4:	85400915 	stw	r21,36(r16)
 80071b8:	85000a15 	stw	r20,40(r16)
 80071bc:	84c00b15 	stw	r19,44(r16)
 80071c0:	84000715 	stw	r16,28(r16)
 80071c4:	00800284 	movi	r2,10
 80071c8:	8880030d 	sth	r2,12(r17)
 80071cc:	00800044 	movi	r2,1
 80071d0:	b80d883a 	mov	r6,r23
 80071d4:	89001704 	addi	r4,r17,92
 80071d8:	000b883a 	mov	r5,zero
 80071dc:	88000015 	stw	zero,0(r17)
 80071e0:	88000115 	stw	zero,4(r17)
 80071e4:	88000215 	stw	zero,8(r17)
 80071e8:	88001915 	stw	zero,100(r17)
 80071ec:	8880038d 	sth	r2,14(r17)
 80071f0:	88000415 	stw	zero,16(r17)
 80071f4:	88000515 	stw	zero,20(r17)
 80071f8:	88000615 	stw	zero,24(r17)
 80071fc:	80087180 	call	8008718 <memset>
 8007200:	94000317 	ldw	r16,12(r18)
 8007204:	00800484 	movi	r2,18
 8007208:	8c400715 	stw	r17,28(r17)
 800720c:	8d800815 	stw	r22,32(r17)
 8007210:	8d400915 	stw	r21,36(r17)
 8007214:	8d000a15 	stw	r20,40(r17)
 8007218:	8cc00b15 	stw	r19,44(r17)
 800721c:	8080030d 	sth	r2,12(r16)
 8007220:	00800084 	movi	r2,2
 8007224:	80000015 	stw	zero,0(r16)
 8007228:	80000115 	stw	zero,4(r16)
 800722c:	80000215 	stw	zero,8(r16)
 8007230:	80001915 	stw	zero,100(r16)
 8007234:	8080038d 	sth	r2,14(r16)
 8007238:	80000415 	stw	zero,16(r16)
 800723c:	80000515 	stw	zero,20(r16)
 8007240:	80000615 	stw	zero,24(r16)
 8007244:	b80d883a 	mov	r6,r23
 8007248:	000b883a 	mov	r5,zero
 800724c:	81001704 	addi	r4,r16,92
 8007250:	80087180 	call	8008718 <memset>
 8007254:	00800044 	movi	r2,1
 8007258:	84000715 	stw	r16,28(r16)
 800725c:	85800815 	stw	r22,32(r16)
 8007260:	85400915 	stw	r21,36(r16)
 8007264:	85000a15 	stw	r20,40(r16)
 8007268:	84c00b15 	stw	r19,44(r16)
 800726c:	90800e15 	stw	r2,56(r18)
 8007270:	dfc00817 	ldw	ra,32(sp)
 8007274:	ddc00717 	ldw	r23,28(sp)
 8007278:	dd800617 	ldw	r22,24(sp)
 800727c:	dd400517 	ldw	r21,20(sp)
 8007280:	dd000417 	ldw	r20,16(sp)
 8007284:	dcc00317 	ldw	r19,12(sp)
 8007288:	dc800217 	ldw	r18,8(sp)
 800728c:	dc400117 	ldw	r17,4(sp)
 8007290:	dc000017 	ldw	r16,0(sp)
 8007294:	dec00904 	addi	sp,sp,36
 8007298:	f800283a 	ret

0800729c <__fp_lock>:
 800729c:	0005883a 	mov	r2,zero
 80072a0:	f800283a 	ret

080072a4 <__sfmoreglue>:
 80072a4:	defffc04 	addi	sp,sp,-16
 80072a8:	dc400115 	stw	r17,4(sp)
 80072ac:	2c7fffc4 	addi	r17,r5,-1
 80072b0:	8c401a24 	muli	r17,r17,104
 80072b4:	dc800215 	stw	r18,8(sp)
 80072b8:	2825883a 	mov	r18,r5
 80072bc:	89401d04 	addi	r5,r17,116
 80072c0:	dc000015 	stw	r16,0(sp)
 80072c4:	dfc00315 	stw	ra,12(sp)
 80072c8:	8007ce00 	call	8007ce0 <_malloc_r>
 80072cc:	1021883a 	mov	r16,r2
 80072d0:	10000726 	beq	r2,zero,80072f0 <__sfmoreglue+0x4c>
 80072d4:	11000304 	addi	r4,r2,12
 80072d8:	10000015 	stw	zero,0(r2)
 80072dc:	14800115 	stw	r18,4(r2)
 80072e0:	11000215 	stw	r4,8(r2)
 80072e4:	89801a04 	addi	r6,r17,104
 80072e8:	000b883a 	mov	r5,zero
 80072ec:	80087180 	call	8008718 <memset>
 80072f0:	8005883a 	mov	r2,r16
 80072f4:	dfc00317 	ldw	ra,12(sp)
 80072f8:	dc800217 	ldw	r18,8(sp)
 80072fc:	dc400117 	ldw	r17,4(sp)
 8007300:	dc000017 	ldw	r16,0(sp)
 8007304:	dec00404 	addi	sp,sp,16
 8007308:	f800283a 	ret

0800730c <__sfp>:
 800730c:	defffb04 	addi	sp,sp,-20
 8007310:	dc000015 	stw	r16,0(sp)
 8007314:	04020074 	movhi	r16,2049
 8007318:	840ea904 	addi	r16,r16,15012
 800731c:	dcc00315 	stw	r19,12(sp)
 8007320:	2027883a 	mov	r19,r4
 8007324:	81000017 	ldw	r4,0(r16)
 8007328:	dfc00415 	stw	ra,16(sp)
 800732c:	dc800215 	stw	r18,8(sp)
 8007330:	20800e17 	ldw	r2,56(r4)
 8007334:	dc400115 	stw	r17,4(sp)
 8007338:	1000021e 	bne	r2,zero,8007344 <__sfp+0x38>
 800733c:	80071000 	call	8007100 <__sinit.part.1>
 8007340:	81000017 	ldw	r4,0(r16)
 8007344:	2480b804 	addi	r18,r4,736
 8007348:	047fffc4 	movi	r17,-1
 800734c:	91000117 	ldw	r4,4(r18)
 8007350:	94000217 	ldw	r16,8(r18)
 8007354:	213fffc4 	addi	r4,r4,-1
 8007358:	20000a16 	blt	r4,zero,8007384 <__sfp+0x78>
 800735c:	8080030f 	ldh	r2,12(r16)
 8007360:	10000c26 	beq	r2,zero,8007394 <__sfp+0x88>
 8007364:	80c01d04 	addi	r3,r16,116
 8007368:	00000206 	br	8007374 <__sfp+0x68>
 800736c:	18bfe60f 	ldh	r2,-104(r3)
 8007370:	10000826 	beq	r2,zero,8007394 <__sfp+0x88>
 8007374:	213fffc4 	addi	r4,r4,-1
 8007378:	1c3ffd04 	addi	r16,r3,-12
 800737c:	18c01a04 	addi	r3,r3,104
 8007380:	247ffa1e 	bne	r4,r17,800736c <__alt_data_end+0xff00736c>
 8007384:	90800017 	ldw	r2,0(r18)
 8007388:	10001d26 	beq	r2,zero,8007400 <__sfp+0xf4>
 800738c:	1025883a 	mov	r18,r2
 8007390:	003fee06 	br	800734c <__alt_data_end+0xff00734c>
 8007394:	00bfffc4 	movi	r2,-1
 8007398:	8080038d 	sth	r2,14(r16)
 800739c:	00800044 	movi	r2,1
 80073a0:	8080030d 	sth	r2,12(r16)
 80073a4:	80001915 	stw	zero,100(r16)
 80073a8:	80000015 	stw	zero,0(r16)
 80073ac:	80000215 	stw	zero,8(r16)
 80073b0:	80000115 	stw	zero,4(r16)
 80073b4:	80000415 	stw	zero,16(r16)
 80073b8:	80000515 	stw	zero,20(r16)
 80073bc:	80000615 	stw	zero,24(r16)
 80073c0:	01800204 	movi	r6,8
 80073c4:	000b883a 	mov	r5,zero
 80073c8:	81001704 	addi	r4,r16,92
 80073cc:	80087180 	call	8008718 <memset>
 80073d0:	8005883a 	mov	r2,r16
 80073d4:	80000c15 	stw	zero,48(r16)
 80073d8:	80000d15 	stw	zero,52(r16)
 80073dc:	80001115 	stw	zero,68(r16)
 80073e0:	80001215 	stw	zero,72(r16)
 80073e4:	dfc00417 	ldw	ra,16(sp)
 80073e8:	dcc00317 	ldw	r19,12(sp)
 80073ec:	dc800217 	ldw	r18,8(sp)
 80073f0:	dc400117 	ldw	r17,4(sp)
 80073f4:	dc000017 	ldw	r16,0(sp)
 80073f8:	dec00504 	addi	sp,sp,20
 80073fc:	f800283a 	ret
 8007400:	01400104 	movi	r5,4
 8007404:	9809883a 	mov	r4,r19
 8007408:	80072a40 	call	80072a4 <__sfmoreglue>
 800740c:	90800015 	stw	r2,0(r18)
 8007410:	103fde1e 	bne	r2,zero,800738c <__alt_data_end+0xff00738c>
 8007414:	00800304 	movi	r2,12
 8007418:	98800015 	stw	r2,0(r19)
 800741c:	0005883a 	mov	r2,zero
 8007420:	003ff006 	br	80073e4 <__alt_data_end+0xff0073e4>

08007424 <_cleanup>:
 8007424:	00820074 	movhi	r2,2049
 8007428:	108ea904 	addi	r2,r2,15012
 800742c:	11000017 	ldw	r4,0(r2)
 8007430:	01420074 	movhi	r5,2049
 8007434:	296d8d04 	addi	r5,r5,-18892
 8007438:	80079841 	jmpi	8007984 <_fwalk_reent>

0800743c <__sinit>:
 800743c:	20800e17 	ldw	r2,56(r4)
 8007440:	10000126 	beq	r2,zero,8007448 <__sinit+0xc>
 8007444:	f800283a 	ret
 8007448:	80071001 	jmpi	8007100 <__sinit.part.1>

0800744c <__sfp_lock_acquire>:
 800744c:	f800283a 	ret

08007450 <__sfp_lock_release>:
 8007450:	f800283a 	ret

08007454 <__sinit_lock_acquire>:
 8007454:	f800283a 	ret

08007458 <__sinit_lock_release>:
 8007458:	f800283a 	ret

0800745c <__fp_lock_all>:
 800745c:	00820074 	movhi	r2,2049
 8007460:	108eaa04 	addi	r2,r2,15016
 8007464:	11000017 	ldw	r4,0(r2)
 8007468:	01420034 	movhi	r5,2048
 800746c:	295ca704 	addi	r5,r5,29340
 8007470:	80078c01 	jmpi	80078c0 <_fwalk>

08007474 <__fp_unlock_all>:
 8007474:	00820074 	movhi	r2,2049
 8007478:	108eaa04 	addi	r2,r2,15016
 800747c:	11000017 	ldw	r4,0(r2)
 8007480:	01420034 	movhi	r5,2048
 8007484:	295c3b04 	addi	r5,r5,28908
 8007488:	80078c01 	jmpi	80078c0 <_fwalk>

0800748c <_malloc_trim_r>:
 800748c:	defffb04 	addi	sp,sp,-20
 8007490:	dcc00315 	stw	r19,12(sp)
 8007494:	04c20074 	movhi	r19,2049
 8007498:	dc800215 	stw	r18,8(sp)
 800749c:	dc400115 	stw	r17,4(sp)
 80074a0:	dc000015 	stw	r16,0(sp)
 80074a4:	dfc00415 	stw	ra,16(sp)
 80074a8:	2821883a 	mov	r16,r5
 80074ac:	9cc92204 	addi	r19,r19,9352
 80074b0:	2025883a 	mov	r18,r4
 80074b4:	800f7d00 	call	800f7d0 <__malloc_lock>
 80074b8:	98800217 	ldw	r2,8(r19)
 80074bc:	14400117 	ldw	r17,4(r2)
 80074c0:	00bfff04 	movi	r2,-4
 80074c4:	88a2703a 	and	r17,r17,r2
 80074c8:	8c21c83a 	sub	r16,r17,r16
 80074cc:	8403fbc4 	addi	r16,r16,4079
 80074d0:	8020d33a 	srli	r16,r16,12
 80074d4:	0083ffc4 	movi	r2,4095
 80074d8:	843fffc4 	addi	r16,r16,-1
 80074dc:	8020933a 	slli	r16,r16,12
 80074e0:	1400060e 	bge	r2,r16,80074fc <_malloc_trim_r+0x70>
 80074e4:	000b883a 	mov	r5,zero
 80074e8:	9009883a 	mov	r4,r18
 80074ec:	8009a180 	call	8009a18 <_sbrk_r>
 80074f0:	98c00217 	ldw	r3,8(r19)
 80074f4:	1c47883a 	add	r3,r3,r17
 80074f8:	10c00a26 	beq	r2,r3,8007524 <_malloc_trim_r+0x98>
 80074fc:	9009883a 	mov	r4,r18
 8007500:	800f7f40 	call	800f7f4 <__malloc_unlock>
 8007504:	0005883a 	mov	r2,zero
 8007508:	dfc00417 	ldw	ra,16(sp)
 800750c:	dcc00317 	ldw	r19,12(sp)
 8007510:	dc800217 	ldw	r18,8(sp)
 8007514:	dc400117 	ldw	r17,4(sp)
 8007518:	dc000017 	ldw	r16,0(sp)
 800751c:	dec00504 	addi	sp,sp,20
 8007520:	f800283a 	ret
 8007524:	040bc83a 	sub	r5,zero,r16
 8007528:	9009883a 	mov	r4,r18
 800752c:	8009a180 	call	8009a18 <_sbrk_r>
 8007530:	00ffffc4 	movi	r3,-1
 8007534:	10c00d26 	beq	r2,r3,800756c <_malloc_trim_r+0xe0>
 8007538:	00c20074 	movhi	r3,2049
 800753c:	18d59504 	addi	r3,r3,22100
 8007540:	18800017 	ldw	r2,0(r3)
 8007544:	99000217 	ldw	r4,8(r19)
 8007548:	8c23c83a 	sub	r17,r17,r16
 800754c:	8c400054 	ori	r17,r17,1
 8007550:	1421c83a 	sub	r16,r2,r16
 8007554:	24400115 	stw	r17,4(r4)
 8007558:	9009883a 	mov	r4,r18
 800755c:	1c000015 	stw	r16,0(r3)
 8007560:	800f7f40 	call	800f7f4 <__malloc_unlock>
 8007564:	00800044 	movi	r2,1
 8007568:	003fe706 	br	8007508 <__alt_data_end+0xff007508>
 800756c:	000b883a 	mov	r5,zero
 8007570:	9009883a 	mov	r4,r18
 8007574:	8009a180 	call	8009a18 <_sbrk_r>
 8007578:	99000217 	ldw	r4,8(r19)
 800757c:	014003c4 	movi	r5,15
 8007580:	1107c83a 	sub	r3,r2,r4
 8007584:	28ffdd0e 	bge	r5,r3,80074fc <__alt_data_end+0xff0074fc>
 8007588:	01420074 	movhi	r5,2049
 800758c:	294eac04 	addi	r5,r5,15024
 8007590:	29400017 	ldw	r5,0(r5)
 8007594:	18c00054 	ori	r3,r3,1
 8007598:	20c00115 	stw	r3,4(r4)
 800759c:	00c20074 	movhi	r3,2049
 80075a0:	1145c83a 	sub	r2,r2,r5
 80075a4:	18d59504 	addi	r3,r3,22100
 80075a8:	18800015 	stw	r2,0(r3)
 80075ac:	003fd306 	br	80074fc <__alt_data_end+0xff0074fc>

080075b0 <_free_r>:
 80075b0:	28004126 	beq	r5,zero,80076b8 <_free_r+0x108>
 80075b4:	defffd04 	addi	sp,sp,-12
 80075b8:	dc400115 	stw	r17,4(sp)
 80075bc:	dc000015 	stw	r16,0(sp)
 80075c0:	2023883a 	mov	r17,r4
 80075c4:	2821883a 	mov	r16,r5
 80075c8:	dfc00215 	stw	ra,8(sp)
 80075cc:	800f7d00 	call	800f7d0 <__malloc_lock>
 80075d0:	81ffff17 	ldw	r7,-4(r16)
 80075d4:	00bfff84 	movi	r2,-2
 80075d8:	01020074 	movhi	r4,2049
 80075dc:	81bffe04 	addi	r6,r16,-8
 80075e0:	3884703a 	and	r2,r7,r2
 80075e4:	21092204 	addi	r4,r4,9352
 80075e8:	308b883a 	add	r5,r6,r2
 80075ec:	2a400117 	ldw	r9,4(r5)
 80075f0:	22000217 	ldw	r8,8(r4)
 80075f4:	00ffff04 	movi	r3,-4
 80075f8:	48c6703a 	and	r3,r9,r3
 80075fc:	2a005726 	beq	r5,r8,800775c <_free_r+0x1ac>
 8007600:	28c00115 	stw	r3,4(r5)
 8007604:	39c0004c 	andi	r7,r7,1
 8007608:	3800091e 	bne	r7,zero,8007630 <_free_r+0x80>
 800760c:	823ffe17 	ldw	r8,-8(r16)
 8007610:	22400204 	addi	r9,r4,8
 8007614:	320dc83a 	sub	r6,r6,r8
 8007618:	31c00217 	ldw	r7,8(r6)
 800761c:	1205883a 	add	r2,r2,r8
 8007620:	3a406526 	beq	r7,r9,80077b8 <_free_r+0x208>
 8007624:	32000317 	ldw	r8,12(r6)
 8007628:	3a000315 	stw	r8,12(r7)
 800762c:	41c00215 	stw	r7,8(r8)
 8007630:	28cf883a 	add	r7,r5,r3
 8007634:	39c00117 	ldw	r7,4(r7)
 8007638:	39c0004c 	andi	r7,r7,1
 800763c:	38003a26 	beq	r7,zero,8007728 <_free_r+0x178>
 8007640:	10c00054 	ori	r3,r2,1
 8007644:	30c00115 	stw	r3,4(r6)
 8007648:	3087883a 	add	r3,r6,r2
 800764c:	18800015 	stw	r2,0(r3)
 8007650:	00c07fc4 	movi	r3,511
 8007654:	18801936 	bltu	r3,r2,80076bc <_free_r+0x10c>
 8007658:	1004d0fa 	srli	r2,r2,3
 800765c:	01c00044 	movi	r7,1
 8007660:	21400117 	ldw	r5,4(r4)
 8007664:	10c00044 	addi	r3,r2,1
 8007668:	18c7883a 	add	r3,r3,r3
 800766c:	1005d0ba 	srai	r2,r2,2
 8007670:	18c7883a 	add	r3,r3,r3
 8007674:	18c7883a 	add	r3,r3,r3
 8007678:	1907883a 	add	r3,r3,r4
 800767c:	3884983a 	sll	r2,r7,r2
 8007680:	19c00017 	ldw	r7,0(r3)
 8007684:	1a3ffe04 	addi	r8,r3,-8
 8007688:	1144b03a 	or	r2,r2,r5
 800768c:	32000315 	stw	r8,12(r6)
 8007690:	31c00215 	stw	r7,8(r6)
 8007694:	20800115 	stw	r2,4(r4)
 8007698:	19800015 	stw	r6,0(r3)
 800769c:	39800315 	stw	r6,12(r7)
 80076a0:	8809883a 	mov	r4,r17
 80076a4:	dfc00217 	ldw	ra,8(sp)
 80076a8:	dc400117 	ldw	r17,4(sp)
 80076ac:	dc000017 	ldw	r16,0(sp)
 80076b0:	dec00304 	addi	sp,sp,12
 80076b4:	800f7f41 	jmpi	800f7f4 <__malloc_unlock>
 80076b8:	f800283a 	ret
 80076bc:	100ad27a 	srli	r5,r2,9
 80076c0:	00c00104 	movi	r3,4
 80076c4:	19404a36 	bltu	r3,r5,80077f0 <_free_r+0x240>
 80076c8:	100ad1ba 	srli	r5,r2,6
 80076cc:	28c00e44 	addi	r3,r5,57
 80076d0:	18c7883a 	add	r3,r3,r3
 80076d4:	29400e04 	addi	r5,r5,56
 80076d8:	18c7883a 	add	r3,r3,r3
 80076dc:	18c7883a 	add	r3,r3,r3
 80076e0:	1909883a 	add	r4,r3,r4
 80076e4:	20c00017 	ldw	r3,0(r4)
 80076e8:	01c20074 	movhi	r7,2049
 80076ec:	213ffe04 	addi	r4,r4,-8
 80076f0:	39c92204 	addi	r7,r7,9352
 80076f4:	20c04426 	beq	r4,r3,8007808 <_free_r+0x258>
 80076f8:	01ffff04 	movi	r7,-4
 80076fc:	19400117 	ldw	r5,4(r3)
 8007700:	29ca703a 	and	r5,r5,r7
 8007704:	1140022e 	bgeu	r2,r5,8007710 <_free_r+0x160>
 8007708:	18c00217 	ldw	r3,8(r3)
 800770c:	20fffb1e 	bne	r4,r3,80076fc <__alt_data_end+0xff0076fc>
 8007710:	19000317 	ldw	r4,12(r3)
 8007714:	31000315 	stw	r4,12(r6)
 8007718:	30c00215 	stw	r3,8(r6)
 800771c:	21800215 	stw	r6,8(r4)
 8007720:	19800315 	stw	r6,12(r3)
 8007724:	003fde06 	br	80076a0 <__alt_data_end+0xff0076a0>
 8007728:	29c00217 	ldw	r7,8(r5)
 800772c:	10c5883a 	add	r2,r2,r3
 8007730:	00c20074 	movhi	r3,2049
 8007734:	18c92404 	addi	r3,r3,9360
 8007738:	38c03b26 	beq	r7,r3,8007828 <_free_r+0x278>
 800773c:	2a000317 	ldw	r8,12(r5)
 8007740:	11400054 	ori	r5,r2,1
 8007744:	3087883a 	add	r3,r6,r2
 8007748:	3a000315 	stw	r8,12(r7)
 800774c:	41c00215 	stw	r7,8(r8)
 8007750:	31400115 	stw	r5,4(r6)
 8007754:	18800015 	stw	r2,0(r3)
 8007758:	003fbd06 	br	8007650 <__alt_data_end+0xff007650>
 800775c:	39c0004c 	andi	r7,r7,1
 8007760:	10c5883a 	add	r2,r2,r3
 8007764:	3800071e 	bne	r7,zero,8007784 <_free_r+0x1d4>
 8007768:	81fffe17 	ldw	r7,-8(r16)
 800776c:	31cdc83a 	sub	r6,r6,r7
 8007770:	30c00317 	ldw	r3,12(r6)
 8007774:	31400217 	ldw	r5,8(r6)
 8007778:	11c5883a 	add	r2,r2,r7
 800777c:	28c00315 	stw	r3,12(r5)
 8007780:	19400215 	stw	r5,8(r3)
 8007784:	10c00054 	ori	r3,r2,1
 8007788:	30c00115 	stw	r3,4(r6)
 800778c:	00c20074 	movhi	r3,2049
 8007790:	18cead04 	addi	r3,r3,15028
 8007794:	18c00017 	ldw	r3,0(r3)
 8007798:	21800215 	stw	r6,8(r4)
 800779c:	10ffc036 	bltu	r2,r3,80076a0 <__alt_data_end+0xff0076a0>
 80077a0:	00820074 	movhi	r2,2049
 80077a4:	10958c04 	addi	r2,r2,22064
 80077a8:	11400017 	ldw	r5,0(r2)
 80077ac:	8809883a 	mov	r4,r17
 80077b0:	800748c0 	call	800748c <_malloc_trim_r>
 80077b4:	003fba06 	br	80076a0 <__alt_data_end+0xff0076a0>
 80077b8:	28c9883a 	add	r4,r5,r3
 80077bc:	21000117 	ldw	r4,4(r4)
 80077c0:	2100004c 	andi	r4,r4,1
 80077c4:	2000391e 	bne	r4,zero,80078ac <_free_r+0x2fc>
 80077c8:	29c00217 	ldw	r7,8(r5)
 80077cc:	29000317 	ldw	r4,12(r5)
 80077d0:	1885883a 	add	r2,r3,r2
 80077d4:	10c00054 	ori	r3,r2,1
 80077d8:	39000315 	stw	r4,12(r7)
 80077dc:	21c00215 	stw	r7,8(r4)
 80077e0:	30c00115 	stw	r3,4(r6)
 80077e4:	308d883a 	add	r6,r6,r2
 80077e8:	30800015 	stw	r2,0(r6)
 80077ec:	003fac06 	br	80076a0 <__alt_data_end+0xff0076a0>
 80077f0:	00c00504 	movi	r3,20
 80077f4:	19401536 	bltu	r3,r5,800784c <_free_r+0x29c>
 80077f8:	28c01704 	addi	r3,r5,92
 80077fc:	18c7883a 	add	r3,r3,r3
 8007800:	294016c4 	addi	r5,r5,91
 8007804:	003fb406 	br	80076d8 <__alt_data_end+0xff0076d8>
 8007808:	280bd0ba 	srai	r5,r5,2
 800780c:	00c00044 	movi	r3,1
 8007810:	38800117 	ldw	r2,4(r7)
 8007814:	194a983a 	sll	r5,r3,r5
 8007818:	2007883a 	mov	r3,r4
 800781c:	2884b03a 	or	r2,r5,r2
 8007820:	38800115 	stw	r2,4(r7)
 8007824:	003fbb06 	br	8007714 <__alt_data_end+0xff007714>
 8007828:	21800515 	stw	r6,20(r4)
 800782c:	21800415 	stw	r6,16(r4)
 8007830:	10c00054 	ori	r3,r2,1
 8007834:	31c00315 	stw	r7,12(r6)
 8007838:	31c00215 	stw	r7,8(r6)
 800783c:	30c00115 	stw	r3,4(r6)
 8007840:	308d883a 	add	r6,r6,r2
 8007844:	30800015 	stw	r2,0(r6)
 8007848:	003f9506 	br	80076a0 <__alt_data_end+0xff0076a0>
 800784c:	00c01504 	movi	r3,84
 8007850:	19400536 	bltu	r3,r5,8007868 <_free_r+0x2b8>
 8007854:	100ad33a 	srli	r5,r2,12
 8007858:	28c01bc4 	addi	r3,r5,111
 800785c:	18c7883a 	add	r3,r3,r3
 8007860:	29401b84 	addi	r5,r5,110
 8007864:	003f9c06 	br	80076d8 <__alt_data_end+0xff0076d8>
 8007868:	00c05504 	movi	r3,340
 800786c:	19400536 	bltu	r3,r5,8007884 <_free_r+0x2d4>
 8007870:	100ad3fa 	srli	r5,r2,15
 8007874:	28c01e04 	addi	r3,r5,120
 8007878:	18c7883a 	add	r3,r3,r3
 800787c:	29401dc4 	addi	r5,r5,119
 8007880:	003f9506 	br	80076d8 <__alt_data_end+0xff0076d8>
 8007884:	00c15504 	movi	r3,1364
 8007888:	19400536 	bltu	r3,r5,80078a0 <_free_r+0x2f0>
 800788c:	100ad4ba 	srli	r5,r2,18
 8007890:	28c01f44 	addi	r3,r5,125
 8007894:	18c7883a 	add	r3,r3,r3
 8007898:	29401f04 	addi	r5,r5,124
 800789c:	003f8e06 	br	80076d8 <__alt_data_end+0xff0076d8>
 80078a0:	00c03f84 	movi	r3,254
 80078a4:	01401f84 	movi	r5,126
 80078a8:	003f8b06 	br	80076d8 <__alt_data_end+0xff0076d8>
 80078ac:	10c00054 	ori	r3,r2,1
 80078b0:	30c00115 	stw	r3,4(r6)
 80078b4:	308d883a 	add	r6,r6,r2
 80078b8:	30800015 	stw	r2,0(r6)
 80078bc:	003f7806 	br	80076a0 <__alt_data_end+0xff0076a0>

080078c0 <_fwalk>:
 80078c0:	defff704 	addi	sp,sp,-36
 80078c4:	dd000415 	stw	r20,16(sp)
 80078c8:	dfc00815 	stw	ra,32(sp)
 80078cc:	ddc00715 	stw	r23,28(sp)
 80078d0:	dd800615 	stw	r22,24(sp)
 80078d4:	dd400515 	stw	r21,20(sp)
 80078d8:	dcc00315 	stw	r19,12(sp)
 80078dc:	dc800215 	stw	r18,8(sp)
 80078e0:	dc400115 	stw	r17,4(sp)
 80078e4:	dc000015 	stw	r16,0(sp)
 80078e8:	2500b804 	addi	r20,r4,736
 80078ec:	a0002326 	beq	r20,zero,800797c <_fwalk+0xbc>
 80078f0:	282b883a 	mov	r21,r5
 80078f4:	002f883a 	mov	r23,zero
 80078f8:	05800044 	movi	r22,1
 80078fc:	04ffffc4 	movi	r19,-1
 8007900:	a4400117 	ldw	r17,4(r20)
 8007904:	a4800217 	ldw	r18,8(r20)
 8007908:	8c7fffc4 	addi	r17,r17,-1
 800790c:	88000d16 	blt	r17,zero,8007944 <_fwalk+0x84>
 8007910:	94000304 	addi	r16,r18,12
 8007914:	94800384 	addi	r18,r18,14
 8007918:	8080000b 	ldhu	r2,0(r16)
 800791c:	8c7fffc4 	addi	r17,r17,-1
 8007920:	813ffd04 	addi	r4,r16,-12
 8007924:	b080042e 	bgeu	r22,r2,8007938 <_fwalk+0x78>
 8007928:	9080000f 	ldh	r2,0(r18)
 800792c:	14c00226 	beq	r2,r19,8007938 <_fwalk+0x78>
 8007930:	a83ee83a 	callr	r21
 8007934:	b8aeb03a 	or	r23,r23,r2
 8007938:	84001a04 	addi	r16,r16,104
 800793c:	94801a04 	addi	r18,r18,104
 8007940:	8cfff51e 	bne	r17,r19,8007918 <__alt_data_end+0xff007918>
 8007944:	a5000017 	ldw	r20,0(r20)
 8007948:	a03fed1e 	bne	r20,zero,8007900 <__alt_data_end+0xff007900>
 800794c:	b805883a 	mov	r2,r23
 8007950:	dfc00817 	ldw	ra,32(sp)
 8007954:	ddc00717 	ldw	r23,28(sp)
 8007958:	dd800617 	ldw	r22,24(sp)
 800795c:	dd400517 	ldw	r21,20(sp)
 8007960:	dd000417 	ldw	r20,16(sp)
 8007964:	dcc00317 	ldw	r19,12(sp)
 8007968:	dc800217 	ldw	r18,8(sp)
 800796c:	dc400117 	ldw	r17,4(sp)
 8007970:	dc000017 	ldw	r16,0(sp)
 8007974:	dec00904 	addi	sp,sp,36
 8007978:	f800283a 	ret
 800797c:	002f883a 	mov	r23,zero
 8007980:	003ff206 	br	800794c <__alt_data_end+0xff00794c>

08007984 <_fwalk_reent>:
 8007984:	defff704 	addi	sp,sp,-36
 8007988:	dd000415 	stw	r20,16(sp)
 800798c:	dfc00815 	stw	ra,32(sp)
 8007990:	ddc00715 	stw	r23,28(sp)
 8007994:	dd800615 	stw	r22,24(sp)
 8007998:	dd400515 	stw	r21,20(sp)
 800799c:	dcc00315 	stw	r19,12(sp)
 80079a0:	dc800215 	stw	r18,8(sp)
 80079a4:	dc400115 	stw	r17,4(sp)
 80079a8:	dc000015 	stw	r16,0(sp)
 80079ac:	2500b804 	addi	r20,r4,736
 80079b0:	a0002326 	beq	r20,zero,8007a40 <_fwalk_reent+0xbc>
 80079b4:	282b883a 	mov	r21,r5
 80079b8:	2027883a 	mov	r19,r4
 80079bc:	002f883a 	mov	r23,zero
 80079c0:	05800044 	movi	r22,1
 80079c4:	04bfffc4 	movi	r18,-1
 80079c8:	a4400117 	ldw	r17,4(r20)
 80079cc:	a4000217 	ldw	r16,8(r20)
 80079d0:	8c7fffc4 	addi	r17,r17,-1
 80079d4:	88000c16 	blt	r17,zero,8007a08 <_fwalk_reent+0x84>
 80079d8:	84000304 	addi	r16,r16,12
 80079dc:	8080000b 	ldhu	r2,0(r16)
 80079e0:	8c7fffc4 	addi	r17,r17,-1
 80079e4:	817ffd04 	addi	r5,r16,-12
 80079e8:	b080052e 	bgeu	r22,r2,8007a00 <_fwalk_reent+0x7c>
 80079ec:	8080008f 	ldh	r2,2(r16)
 80079f0:	9809883a 	mov	r4,r19
 80079f4:	14800226 	beq	r2,r18,8007a00 <_fwalk_reent+0x7c>
 80079f8:	a83ee83a 	callr	r21
 80079fc:	b8aeb03a 	or	r23,r23,r2
 8007a00:	84001a04 	addi	r16,r16,104
 8007a04:	8cbff51e 	bne	r17,r18,80079dc <__alt_data_end+0xff0079dc>
 8007a08:	a5000017 	ldw	r20,0(r20)
 8007a0c:	a03fee1e 	bne	r20,zero,80079c8 <__alt_data_end+0xff0079c8>
 8007a10:	b805883a 	mov	r2,r23
 8007a14:	dfc00817 	ldw	ra,32(sp)
 8007a18:	ddc00717 	ldw	r23,28(sp)
 8007a1c:	dd800617 	ldw	r22,24(sp)
 8007a20:	dd400517 	ldw	r21,20(sp)
 8007a24:	dd000417 	ldw	r20,16(sp)
 8007a28:	dcc00317 	ldw	r19,12(sp)
 8007a2c:	dc800217 	ldw	r18,8(sp)
 8007a30:	dc400117 	ldw	r17,4(sp)
 8007a34:	dc000017 	ldw	r16,0(sp)
 8007a38:	dec00904 	addi	sp,sp,36
 8007a3c:	f800283a 	ret
 8007a40:	002f883a 	mov	r23,zero
 8007a44:	003ff206 	br	8007a10 <__alt_data_end+0xff007a10>

08007a48 <_setlocale_r>:
 8007a48:	30001b26 	beq	r6,zero,8007ab8 <_setlocale_r+0x70>
 8007a4c:	01420074 	movhi	r5,2049
 8007a50:	defffe04 	addi	sp,sp,-8
 8007a54:	29479a04 	addi	r5,r5,7784
 8007a58:	3009883a 	mov	r4,r6
 8007a5c:	dc000015 	stw	r16,0(sp)
 8007a60:	dfc00115 	stw	ra,4(sp)
 8007a64:	3021883a 	mov	r16,r6
 8007a68:	8009ba80 	call	8009ba8 <strcmp>
 8007a6c:	1000061e 	bne	r2,zero,8007a88 <_setlocale_r+0x40>
 8007a70:	00820074 	movhi	r2,2049
 8007a74:	10879904 	addi	r2,r2,7780
 8007a78:	dfc00117 	ldw	ra,4(sp)
 8007a7c:	dc000017 	ldw	r16,0(sp)
 8007a80:	dec00204 	addi	sp,sp,8
 8007a84:	f800283a 	ret
 8007a88:	01420074 	movhi	r5,2049
 8007a8c:	29479904 	addi	r5,r5,7780
 8007a90:	8009883a 	mov	r4,r16
 8007a94:	8009ba80 	call	8009ba8 <strcmp>
 8007a98:	103ff526 	beq	r2,zero,8007a70 <__alt_data_end+0xff007a70>
 8007a9c:	01420074 	movhi	r5,2049
 8007aa0:	29478404 	addi	r5,r5,7696
 8007aa4:	8009883a 	mov	r4,r16
 8007aa8:	8009ba80 	call	8009ba8 <strcmp>
 8007aac:	103ff026 	beq	r2,zero,8007a70 <__alt_data_end+0xff007a70>
 8007ab0:	0005883a 	mov	r2,zero
 8007ab4:	003ff006 	br	8007a78 <__alt_data_end+0xff007a78>
 8007ab8:	00820074 	movhi	r2,2049
 8007abc:	10879904 	addi	r2,r2,7780
 8007ac0:	f800283a 	ret

08007ac4 <__locale_charset>:
 8007ac4:	00820074 	movhi	r2,2049
 8007ac8:	10890c04 	addi	r2,r2,9264
 8007acc:	f800283a 	ret

08007ad0 <__locale_mb_cur_max>:
 8007ad0:	00820074 	movhi	r2,2049
 8007ad4:	108eab04 	addi	r2,r2,15020
 8007ad8:	10800017 	ldw	r2,0(r2)
 8007adc:	f800283a 	ret

08007ae0 <__locale_msgcharset>:
 8007ae0:	00820074 	movhi	r2,2049
 8007ae4:	10890404 	addi	r2,r2,9232
 8007ae8:	f800283a 	ret

08007aec <__locale_cjk_lang>:
 8007aec:	0005883a 	mov	r2,zero
 8007af0:	f800283a 	ret

08007af4 <_localeconv_r>:
 8007af4:	00820074 	movhi	r2,2049
 8007af8:	10891404 	addi	r2,r2,9296
 8007afc:	f800283a 	ret

08007b00 <setlocale>:
 8007b00:	00820074 	movhi	r2,2049
 8007b04:	108eaa04 	addi	r2,r2,15016
 8007b08:	280d883a 	mov	r6,r5
 8007b0c:	200b883a 	mov	r5,r4
 8007b10:	11000017 	ldw	r4,0(r2)
 8007b14:	8007a481 	jmpi	8007a48 <_setlocale_r>

08007b18 <localeconv>:
 8007b18:	00820074 	movhi	r2,2049
 8007b1c:	10891404 	addi	r2,r2,9296
 8007b20:	f800283a 	ret

08007b24 <__smakebuf_r>:
 8007b24:	2880030b 	ldhu	r2,12(r5)
 8007b28:	10c0008c 	andi	r3,r2,2
 8007b2c:	1800411e 	bne	r3,zero,8007c34 <__smakebuf_r+0x110>
 8007b30:	deffec04 	addi	sp,sp,-80
 8007b34:	dc000f15 	stw	r16,60(sp)
 8007b38:	2821883a 	mov	r16,r5
 8007b3c:	2940038f 	ldh	r5,14(r5)
 8007b40:	dc401015 	stw	r17,64(sp)
 8007b44:	dfc01315 	stw	ra,76(sp)
 8007b48:	dcc01215 	stw	r19,72(sp)
 8007b4c:	dc801115 	stw	r18,68(sp)
 8007b50:	2023883a 	mov	r17,r4
 8007b54:	28001c16 	blt	r5,zero,8007bc8 <__smakebuf_r+0xa4>
 8007b58:	d80d883a 	mov	r6,sp
 8007b5c:	800b9400 	call	800b940 <_fstat_r>
 8007b60:	10001816 	blt	r2,zero,8007bc4 <__smakebuf_r+0xa0>
 8007b64:	d8800117 	ldw	r2,4(sp)
 8007b68:	00e00014 	movui	r3,32768
 8007b6c:	10bc000c 	andi	r2,r2,61440
 8007b70:	14c80020 	cmpeqi	r19,r2,8192
 8007b74:	10c03726 	beq	r2,r3,8007c54 <__smakebuf_r+0x130>
 8007b78:	80c0030b 	ldhu	r3,12(r16)
 8007b7c:	18c20014 	ori	r3,r3,2048
 8007b80:	80c0030d 	sth	r3,12(r16)
 8007b84:	00c80004 	movi	r3,8192
 8007b88:	10c0521e 	bne	r2,r3,8007cd4 <__smakebuf_r+0x1b0>
 8007b8c:	8140038f 	ldh	r5,14(r16)
 8007b90:	8809883a 	mov	r4,r17
 8007b94:	800be580 	call	800be58 <_isatty_r>
 8007b98:	10004c26 	beq	r2,zero,8007ccc <__smakebuf_r+0x1a8>
 8007b9c:	8080030b 	ldhu	r2,12(r16)
 8007ba0:	80c010c4 	addi	r3,r16,67
 8007ba4:	80c00015 	stw	r3,0(r16)
 8007ba8:	10800054 	ori	r2,r2,1
 8007bac:	8080030d 	sth	r2,12(r16)
 8007bb0:	00800044 	movi	r2,1
 8007bb4:	80c00415 	stw	r3,16(r16)
 8007bb8:	80800515 	stw	r2,20(r16)
 8007bbc:	04810004 	movi	r18,1024
 8007bc0:	00000706 	br	8007be0 <__smakebuf_r+0xbc>
 8007bc4:	8080030b 	ldhu	r2,12(r16)
 8007bc8:	10c0200c 	andi	r3,r2,128
 8007bcc:	18001f1e 	bne	r3,zero,8007c4c <__smakebuf_r+0x128>
 8007bd0:	04810004 	movi	r18,1024
 8007bd4:	10820014 	ori	r2,r2,2048
 8007bd8:	8080030d 	sth	r2,12(r16)
 8007bdc:	0027883a 	mov	r19,zero
 8007be0:	900b883a 	mov	r5,r18
 8007be4:	8809883a 	mov	r4,r17
 8007be8:	8007ce00 	call	8007ce0 <_malloc_r>
 8007bec:	10002c26 	beq	r2,zero,8007ca0 <__smakebuf_r+0x17c>
 8007bf0:	80c0030b 	ldhu	r3,12(r16)
 8007bf4:	01020034 	movhi	r4,2048
 8007bf8:	211c3d04 	addi	r4,r4,28916
 8007bfc:	89000f15 	stw	r4,60(r17)
 8007c00:	18c02014 	ori	r3,r3,128
 8007c04:	80c0030d 	sth	r3,12(r16)
 8007c08:	80800015 	stw	r2,0(r16)
 8007c0c:	80800415 	stw	r2,16(r16)
 8007c10:	84800515 	stw	r18,20(r16)
 8007c14:	98001a1e 	bne	r19,zero,8007c80 <__smakebuf_r+0x15c>
 8007c18:	dfc01317 	ldw	ra,76(sp)
 8007c1c:	dcc01217 	ldw	r19,72(sp)
 8007c20:	dc801117 	ldw	r18,68(sp)
 8007c24:	dc401017 	ldw	r17,64(sp)
 8007c28:	dc000f17 	ldw	r16,60(sp)
 8007c2c:	dec01404 	addi	sp,sp,80
 8007c30:	f800283a 	ret
 8007c34:	288010c4 	addi	r2,r5,67
 8007c38:	28800015 	stw	r2,0(r5)
 8007c3c:	28800415 	stw	r2,16(r5)
 8007c40:	00800044 	movi	r2,1
 8007c44:	28800515 	stw	r2,20(r5)
 8007c48:	f800283a 	ret
 8007c4c:	04801004 	movi	r18,64
 8007c50:	003fe006 	br	8007bd4 <__alt_data_end+0xff007bd4>
 8007c54:	81000a17 	ldw	r4,40(r16)
 8007c58:	00c20074 	movhi	r3,2049
 8007c5c:	18e6d104 	addi	r3,r3,-25788
 8007c60:	20ffc51e 	bne	r4,r3,8007b78 <__alt_data_end+0xff007b78>
 8007c64:	8080030b 	ldhu	r2,12(r16)
 8007c68:	04810004 	movi	r18,1024
 8007c6c:	84801315 	stw	r18,76(r16)
 8007c70:	1484b03a 	or	r2,r2,r18
 8007c74:	8080030d 	sth	r2,12(r16)
 8007c78:	0027883a 	mov	r19,zero
 8007c7c:	003fd806 	br	8007be0 <__alt_data_end+0xff007be0>
 8007c80:	8140038f 	ldh	r5,14(r16)
 8007c84:	8809883a 	mov	r4,r17
 8007c88:	800be580 	call	800be58 <_isatty_r>
 8007c8c:	103fe226 	beq	r2,zero,8007c18 <__alt_data_end+0xff007c18>
 8007c90:	8080030b 	ldhu	r2,12(r16)
 8007c94:	10800054 	ori	r2,r2,1
 8007c98:	8080030d 	sth	r2,12(r16)
 8007c9c:	003fde06 	br	8007c18 <__alt_data_end+0xff007c18>
 8007ca0:	8080030b 	ldhu	r2,12(r16)
 8007ca4:	10c0800c 	andi	r3,r2,512
 8007ca8:	183fdb1e 	bne	r3,zero,8007c18 <__alt_data_end+0xff007c18>
 8007cac:	10800094 	ori	r2,r2,2
 8007cb0:	80c010c4 	addi	r3,r16,67
 8007cb4:	8080030d 	sth	r2,12(r16)
 8007cb8:	00800044 	movi	r2,1
 8007cbc:	80c00015 	stw	r3,0(r16)
 8007cc0:	80c00415 	stw	r3,16(r16)
 8007cc4:	80800515 	stw	r2,20(r16)
 8007cc8:	003fd306 	br	8007c18 <__alt_data_end+0xff007c18>
 8007ccc:	04810004 	movi	r18,1024
 8007cd0:	003fc306 	br	8007be0 <__alt_data_end+0xff007be0>
 8007cd4:	0027883a 	mov	r19,zero
 8007cd8:	04810004 	movi	r18,1024
 8007cdc:	003fc006 	br	8007be0 <__alt_data_end+0xff007be0>

08007ce0 <_malloc_r>:
 8007ce0:	defff504 	addi	sp,sp,-44
 8007ce4:	dc800315 	stw	r18,12(sp)
 8007ce8:	dfc00a15 	stw	ra,40(sp)
 8007cec:	df000915 	stw	fp,36(sp)
 8007cf0:	ddc00815 	stw	r23,32(sp)
 8007cf4:	dd800715 	stw	r22,28(sp)
 8007cf8:	dd400615 	stw	r21,24(sp)
 8007cfc:	dd000515 	stw	r20,20(sp)
 8007d00:	dcc00415 	stw	r19,16(sp)
 8007d04:	dc400215 	stw	r17,8(sp)
 8007d08:	dc000115 	stw	r16,4(sp)
 8007d0c:	288002c4 	addi	r2,r5,11
 8007d10:	00c00584 	movi	r3,22
 8007d14:	2025883a 	mov	r18,r4
 8007d18:	18807f2e 	bgeu	r3,r2,8007f18 <_malloc_r+0x238>
 8007d1c:	047ffe04 	movi	r17,-8
 8007d20:	1462703a 	and	r17,r2,r17
 8007d24:	8800a316 	blt	r17,zero,8007fb4 <_malloc_r+0x2d4>
 8007d28:	8940a236 	bltu	r17,r5,8007fb4 <_malloc_r+0x2d4>
 8007d2c:	800f7d00 	call	800f7d0 <__malloc_lock>
 8007d30:	00807dc4 	movi	r2,503
 8007d34:	1441e92e 	bgeu	r2,r17,80084dc <_malloc_r+0x7fc>
 8007d38:	8804d27a 	srli	r2,r17,9
 8007d3c:	1000a126 	beq	r2,zero,8007fc4 <_malloc_r+0x2e4>
 8007d40:	00c00104 	movi	r3,4
 8007d44:	18811e36 	bltu	r3,r2,80081c0 <_malloc_r+0x4e0>
 8007d48:	8804d1ba 	srli	r2,r17,6
 8007d4c:	12000e44 	addi	r8,r2,57
 8007d50:	11c00e04 	addi	r7,r2,56
 8007d54:	4209883a 	add	r4,r8,r8
 8007d58:	04c20074 	movhi	r19,2049
 8007d5c:	2109883a 	add	r4,r4,r4
 8007d60:	9cc92204 	addi	r19,r19,9352
 8007d64:	2109883a 	add	r4,r4,r4
 8007d68:	9909883a 	add	r4,r19,r4
 8007d6c:	24000117 	ldw	r16,4(r4)
 8007d70:	213ffe04 	addi	r4,r4,-8
 8007d74:	24009726 	beq	r4,r16,8007fd4 <_malloc_r+0x2f4>
 8007d78:	80800117 	ldw	r2,4(r16)
 8007d7c:	01bfff04 	movi	r6,-4
 8007d80:	014003c4 	movi	r5,15
 8007d84:	1184703a 	and	r2,r2,r6
 8007d88:	1447c83a 	sub	r3,r2,r17
 8007d8c:	28c00716 	blt	r5,r3,8007dac <_malloc_r+0xcc>
 8007d90:	1800920e 	bge	r3,zero,8007fdc <_malloc_r+0x2fc>
 8007d94:	84000317 	ldw	r16,12(r16)
 8007d98:	24008e26 	beq	r4,r16,8007fd4 <_malloc_r+0x2f4>
 8007d9c:	80800117 	ldw	r2,4(r16)
 8007da0:	1184703a 	and	r2,r2,r6
 8007da4:	1447c83a 	sub	r3,r2,r17
 8007da8:	28fff90e 	bge	r5,r3,8007d90 <__alt_data_end+0xff007d90>
 8007dac:	3809883a 	mov	r4,r7
 8007db0:	01820074 	movhi	r6,2049
 8007db4:	9c000417 	ldw	r16,16(r19)
 8007db8:	31892204 	addi	r6,r6,9352
 8007dbc:	32000204 	addi	r8,r6,8
 8007dc0:	82013426 	beq	r16,r8,8008294 <_malloc_r+0x5b4>
 8007dc4:	80c00117 	ldw	r3,4(r16)
 8007dc8:	00bfff04 	movi	r2,-4
 8007dcc:	188e703a 	and	r7,r3,r2
 8007dd0:	3c45c83a 	sub	r2,r7,r17
 8007dd4:	00c003c4 	movi	r3,15
 8007dd8:	18811f16 	blt	r3,r2,8008258 <_malloc_r+0x578>
 8007ddc:	32000515 	stw	r8,20(r6)
 8007de0:	32000415 	stw	r8,16(r6)
 8007de4:	10007f0e 	bge	r2,zero,8007fe4 <_malloc_r+0x304>
 8007de8:	00807fc4 	movi	r2,511
 8007dec:	11c0fd36 	bltu	r2,r7,80081e4 <_malloc_r+0x504>
 8007df0:	3806d0fa 	srli	r3,r7,3
 8007df4:	01c00044 	movi	r7,1
 8007df8:	30800117 	ldw	r2,4(r6)
 8007dfc:	19400044 	addi	r5,r3,1
 8007e00:	294b883a 	add	r5,r5,r5
 8007e04:	1807d0ba 	srai	r3,r3,2
 8007e08:	294b883a 	add	r5,r5,r5
 8007e0c:	294b883a 	add	r5,r5,r5
 8007e10:	298b883a 	add	r5,r5,r6
 8007e14:	38c6983a 	sll	r3,r7,r3
 8007e18:	29c00017 	ldw	r7,0(r5)
 8007e1c:	2a7ffe04 	addi	r9,r5,-8
 8007e20:	1886b03a 	or	r3,r3,r2
 8007e24:	82400315 	stw	r9,12(r16)
 8007e28:	81c00215 	stw	r7,8(r16)
 8007e2c:	30c00115 	stw	r3,4(r6)
 8007e30:	2c000015 	stw	r16,0(r5)
 8007e34:	3c000315 	stw	r16,12(r7)
 8007e38:	2005d0ba 	srai	r2,r4,2
 8007e3c:	01400044 	movi	r5,1
 8007e40:	288a983a 	sll	r5,r5,r2
 8007e44:	19406f36 	bltu	r3,r5,8008004 <_malloc_r+0x324>
 8007e48:	28c4703a 	and	r2,r5,r3
 8007e4c:	10000a1e 	bne	r2,zero,8007e78 <_malloc_r+0x198>
 8007e50:	00bfff04 	movi	r2,-4
 8007e54:	294b883a 	add	r5,r5,r5
 8007e58:	2088703a 	and	r4,r4,r2
 8007e5c:	28c4703a 	and	r2,r5,r3
 8007e60:	21000104 	addi	r4,r4,4
 8007e64:	1000041e 	bne	r2,zero,8007e78 <_malloc_r+0x198>
 8007e68:	294b883a 	add	r5,r5,r5
 8007e6c:	28c4703a 	and	r2,r5,r3
 8007e70:	21000104 	addi	r4,r4,4
 8007e74:	103ffc26 	beq	r2,zero,8007e68 <__alt_data_end+0xff007e68>
 8007e78:	02bfff04 	movi	r10,-4
 8007e7c:	024003c4 	movi	r9,15
 8007e80:	21800044 	addi	r6,r4,1
 8007e84:	318d883a 	add	r6,r6,r6
 8007e88:	318d883a 	add	r6,r6,r6
 8007e8c:	318d883a 	add	r6,r6,r6
 8007e90:	998d883a 	add	r6,r19,r6
 8007e94:	333ffe04 	addi	r12,r6,-8
 8007e98:	2017883a 	mov	r11,r4
 8007e9c:	31800104 	addi	r6,r6,4
 8007ea0:	34000017 	ldw	r16,0(r6)
 8007ea4:	31fffd04 	addi	r7,r6,-12
 8007ea8:	81c0041e 	bne	r16,r7,8007ebc <_malloc_r+0x1dc>
 8007eac:	0000fb06 	br	800829c <_malloc_r+0x5bc>
 8007eb0:	1801030e 	bge	r3,zero,80082c0 <_malloc_r+0x5e0>
 8007eb4:	84000317 	ldw	r16,12(r16)
 8007eb8:	81c0f826 	beq	r16,r7,800829c <_malloc_r+0x5bc>
 8007ebc:	80800117 	ldw	r2,4(r16)
 8007ec0:	1284703a 	and	r2,r2,r10
 8007ec4:	1447c83a 	sub	r3,r2,r17
 8007ec8:	48fff90e 	bge	r9,r3,8007eb0 <__alt_data_end+0xff007eb0>
 8007ecc:	80800317 	ldw	r2,12(r16)
 8007ed0:	81000217 	ldw	r4,8(r16)
 8007ed4:	89400054 	ori	r5,r17,1
 8007ed8:	81400115 	stw	r5,4(r16)
 8007edc:	20800315 	stw	r2,12(r4)
 8007ee0:	11000215 	stw	r4,8(r2)
 8007ee4:	8463883a 	add	r17,r16,r17
 8007ee8:	9c400515 	stw	r17,20(r19)
 8007eec:	9c400415 	stw	r17,16(r19)
 8007ef0:	18800054 	ori	r2,r3,1
 8007ef4:	88800115 	stw	r2,4(r17)
 8007ef8:	8a000315 	stw	r8,12(r17)
 8007efc:	8a000215 	stw	r8,8(r17)
 8007f00:	88e3883a 	add	r17,r17,r3
 8007f04:	88c00015 	stw	r3,0(r17)
 8007f08:	9009883a 	mov	r4,r18
 8007f0c:	800f7f40 	call	800f7f4 <__malloc_unlock>
 8007f10:	80800204 	addi	r2,r16,8
 8007f14:	00001b06 	br	8007f84 <_malloc_r+0x2a4>
 8007f18:	04400404 	movi	r17,16
 8007f1c:	89402536 	bltu	r17,r5,8007fb4 <_malloc_r+0x2d4>
 8007f20:	800f7d00 	call	800f7d0 <__malloc_lock>
 8007f24:	00800184 	movi	r2,6
 8007f28:	01000084 	movi	r4,2
 8007f2c:	04c20074 	movhi	r19,2049
 8007f30:	1085883a 	add	r2,r2,r2
 8007f34:	9cc92204 	addi	r19,r19,9352
 8007f38:	1085883a 	add	r2,r2,r2
 8007f3c:	9885883a 	add	r2,r19,r2
 8007f40:	14000117 	ldw	r16,4(r2)
 8007f44:	10fffe04 	addi	r3,r2,-8
 8007f48:	80c0d926 	beq	r16,r3,80082b0 <_malloc_r+0x5d0>
 8007f4c:	80c00117 	ldw	r3,4(r16)
 8007f50:	81000317 	ldw	r4,12(r16)
 8007f54:	00bfff04 	movi	r2,-4
 8007f58:	1884703a 	and	r2,r3,r2
 8007f5c:	81400217 	ldw	r5,8(r16)
 8007f60:	8085883a 	add	r2,r16,r2
 8007f64:	10c00117 	ldw	r3,4(r2)
 8007f68:	29000315 	stw	r4,12(r5)
 8007f6c:	21400215 	stw	r5,8(r4)
 8007f70:	18c00054 	ori	r3,r3,1
 8007f74:	10c00115 	stw	r3,4(r2)
 8007f78:	9009883a 	mov	r4,r18
 8007f7c:	800f7f40 	call	800f7f4 <__malloc_unlock>
 8007f80:	80800204 	addi	r2,r16,8
 8007f84:	dfc00a17 	ldw	ra,40(sp)
 8007f88:	df000917 	ldw	fp,36(sp)
 8007f8c:	ddc00817 	ldw	r23,32(sp)
 8007f90:	dd800717 	ldw	r22,28(sp)
 8007f94:	dd400617 	ldw	r21,24(sp)
 8007f98:	dd000517 	ldw	r20,20(sp)
 8007f9c:	dcc00417 	ldw	r19,16(sp)
 8007fa0:	dc800317 	ldw	r18,12(sp)
 8007fa4:	dc400217 	ldw	r17,8(sp)
 8007fa8:	dc000117 	ldw	r16,4(sp)
 8007fac:	dec00b04 	addi	sp,sp,44
 8007fb0:	f800283a 	ret
 8007fb4:	00800304 	movi	r2,12
 8007fb8:	90800015 	stw	r2,0(r18)
 8007fbc:	0005883a 	mov	r2,zero
 8007fc0:	003ff006 	br	8007f84 <__alt_data_end+0xff007f84>
 8007fc4:	01002004 	movi	r4,128
 8007fc8:	02001004 	movi	r8,64
 8007fcc:	01c00fc4 	movi	r7,63
 8007fd0:	003f6106 	br	8007d58 <__alt_data_end+0xff007d58>
 8007fd4:	4009883a 	mov	r4,r8
 8007fd8:	003f7506 	br	8007db0 <__alt_data_end+0xff007db0>
 8007fdc:	81000317 	ldw	r4,12(r16)
 8007fe0:	003fde06 	br	8007f5c <__alt_data_end+0xff007f5c>
 8007fe4:	81c5883a 	add	r2,r16,r7
 8007fe8:	11400117 	ldw	r5,4(r2)
 8007fec:	9009883a 	mov	r4,r18
 8007ff0:	29400054 	ori	r5,r5,1
 8007ff4:	11400115 	stw	r5,4(r2)
 8007ff8:	800f7f40 	call	800f7f4 <__malloc_unlock>
 8007ffc:	80800204 	addi	r2,r16,8
 8008000:	003fe006 	br	8007f84 <__alt_data_end+0xff007f84>
 8008004:	9c000217 	ldw	r16,8(r19)
 8008008:	00bfff04 	movi	r2,-4
 800800c:	85800117 	ldw	r22,4(r16)
 8008010:	b0ac703a 	and	r22,r22,r2
 8008014:	b4400336 	bltu	r22,r17,8008024 <_malloc_r+0x344>
 8008018:	b445c83a 	sub	r2,r22,r17
 800801c:	00c003c4 	movi	r3,15
 8008020:	18805d16 	blt	r3,r2,8008198 <_malloc_r+0x4b8>
 8008024:	05c20074 	movhi	r23,2049
 8008028:	00820074 	movhi	r2,2049
 800802c:	10958c04 	addi	r2,r2,22064
 8008030:	bdceac04 	addi	r23,r23,15024
 8008034:	15400017 	ldw	r21,0(r2)
 8008038:	b8c00017 	ldw	r3,0(r23)
 800803c:	00bfffc4 	movi	r2,-1
 8008040:	858d883a 	add	r6,r16,r22
 8008044:	8d6b883a 	add	r21,r17,r21
 8008048:	1880ea26 	beq	r3,r2,80083f4 <_malloc_r+0x714>
 800804c:	ad4403c4 	addi	r21,r21,4111
 8008050:	00bc0004 	movi	r2,-4096
 8008054:	a8aa703a 	and	r21,r21,r2
 8008058:	a80b883a 	mov	r5,r21
 800805c:	9009883a 	mov	r4,r18
 8008060:	d9800015 	stw	r6,0(sp)
 8008064:	8009a180 	call	8009a18 <_sbrk_r>
 8008068:	1029883a 	mov	r20,r2
 800806c:	00bfffc4 	movi	r2,-1
 8008070:	d9800017 	ldw	r6,0(sp)
 8008074:	a080e826 	beq	r20,r2,8008418 <_malloc_r+0x738>
 8008078:	a180a636 	bltu	r20,r6,8008314 <_malloc_r+0x634>
 800807c:	07020074 	movhi	fp,2049
 8008080:	e7159504 	addi	fp,fp,22100
 8008084:	e0800017 	ldw	r2,0(fp)
 8008088:	a887883a 	add	r3,r21,r2
 800808c:	e0c00015 	stw	r3,0(fp)
 8008090:	3500e626 	beq	r6,r20,800842c <_malloc_r+0x74c>
 8008094:	b9000017 	ldw	r4,0(r23)
 8008098:	00bfffc4 	movi	r2,-1
 800809c:	2080ee26 	beq	r4,r2,8008458 <_malloc_r+0x778>
 80080a0:	a185c83a 	sub	r2,r20,r6
 80080a4:	10c5883a 	add	r2,r2,r3
 80080a8:	e0800015 	stw	r2,0(fp)
 80080ac:	a0c001cc 	andi	r3,r20,7
 80080b0:	1800bc26 	beq	r3,zero,80083a4 <_malloc_r+0x6c4>
 80080b4:	a0e9c83a 	sub	r20,r20,r3
 80080b8:	00840204 	movi	r2,4104
 80080bc:	a5000204 	addi	r20,r20,8
 80080c0:	10c7c83a 	sub	r3,r2,r3
 80080c4:	a545883a 	add	r2,r20,r21
 80080c8:	1083ffcc 	andi	r2,r2,4095
 80080cc:	18abc83a 	sub	r21,r3,r2
 80080d0:	a80b883a 	mov	r5,r21
 80080d4:	9009883a 	mov	r4,r18
 80080d8:	8009a180 	call	8009a18 <_sbrk_r>
 80080dc:	00ffffc4 	movi	r3,-1
 80080e0:	10c0e126 	beq	r2,r3,8008468 <_malloc_r+0x788>
 80080e4:	1505c83a 	sub	r2,r2,r20
 80080e8:	1545883a 	add	r2,r2,r21
 80080ec:	10800054 	ori	r2,r2,1
 80080f0:	e0c00017 	ldw	r3,0(fp)
 80080f4:	9d000215 	stw	r20,8(r19)
 80080f8:	a0800115 	stw	r2,4(r20)
 80080fc:	a8c7883a 	add	r3,r21,r3
 8008100:	e0c00015 	stw	r3,0(fp)
 8008104:	84c00e26 	beq	r16,r19,8008140 <_malloc_r+0x460>
 8008108:	018003c4 	movi	r6,15
 800810c:	3580a72e 	bgeu	r6,r22,80083ac <_malloc_r+0x6cc>
 8008110:	81400117 	ldw	r5,4(r16)
 8008114:	013ffe04 	movi	r4,-8
 8008118:	b0bffd04 	addi	r2,r22,-12
 800811c:	1104703a 	and	r2,r2,r4
 8008120:	2900004c 	andi	r4,r5,1
 8008124:	2088b03a 	or	r4,r4,r2
 8008128:	81000115 	stw	r4,4(r16)
 800812c:	01400144 	movi	r5,5
 8008130:	8089883a 	add	r4,r16,r2
 8008134:	21400115 	stw	r5,4(r4)
 8008138:	21400215 	stw	r5,8(r4)
 800813c:	3080cd36 	bltu	r6,r2,8008474 <_malloc_r+0x794>
 8008140:	00820074 	movhi	r2,2049
 8008144:	10958b04 	addi	r2,r2,22060
 8008148:	11000017 	ldw	r4,0(r2)
 800814c:	20c0012e 	bgeu	r4,r3,8008154 <_malloc_r+0x474>
 8008150:	10c00015 	stw	r3,0(r2)
 8008154:	00820074 	movhi	r2,2049
 8008158:	10958a04 	addi	r2,r2,22056
 800815c:	11000017 	ldw	r4,0(r2)
 8008160:	9c000217 	ldw	r16,8(r19)
 8008164:	20c0012e 	bgeu	r4,r3,800816c <_malloc_r+0x48c>
 8008168:	10c00015 	stw	r3,0(r2)
 800816c:	80c00117 	ldw	r3,4(r16)
 8008170:	00bfff04 	movi	r2,-4
 8008174:	1886703a 	and	r3,r3,r2
 8008178:	1c45c83a 	sub	r2,r3,r17
 800817c:	1c400236 	bltu	r3,r17,8008188 <_malloc_r+0x4a8>
 8008180:	00c003c4 	movi	r3,15
 8008184:	18800416 	blt	r3,r2,8008198 <_malloc_r+0x4b8>
 8008188:	9009883a 	mov	r4,r18
 800818c:	800f7f40 	call	800f7f4 <__malloc_unlock>
 8008190:	0005883a 	mov	r2,zero
 8008194:	003f7b06 	br	8007f84 <__alt_data_end+0xff007f84>
 8008198:	88c00054 	ori	r3,r17,1
 800819c:	80c00115 	stw	r3,4(r16)
 80081a0:	8463883a 	add	r17,r16,r17
 80081a4:	10800054 	ori	r2,r2,1
 80081a8:	9c400215 	stw	r17,8(r19)
 80081ac:	88800115 	stw	r2,4(r17)
 80081b0:	9009883a 	mov	r4,r18
 80081b4:	800f7f40 	call	800f7f4 <__malloc_unlock>
 80081b8:	80800204 	addi	r2,r16,8
 80081bc:	003f7106 	br	8007f84 <__alt_data_end+0xff007f84>
 80081c0:	00c00504 	movi	r3,20
 80081c4:	18804a2e 	bgeu	r3,r2,80082f0 <_malloc_r+0x610>
 80081c8:	00c01504 	movi	r3,84
 80081cc:	18806e36 	bltu	r3,r2,8008388 <_malloc_r+0x6a8>
 80081d0:	8804d33a 	srli	r2,r17,12
 80081d4:	12001bc4 	addi	r8,r2,111
 80081d8:	11c01b84 	addi	r7,r2,110
 80081dc:	4209883a 	add	r4,r8,r8
 80081e0:	003edd06 	br	8007d58 <__alt_data_end+0xff007d58>
 80081e4:	3804d27a 	srli	r2,r7,9
 80081e8:	00c00104 	movi	r3,4
 80081ec:	1880442e 	bgeu	r3,r2,8008300 <_malloc_r+0x620>
 80081f0:	00c00504 	movi	r3,20
 80081f4:	18808136 	bltu	r3,r2,80083fc <_malloc_r+0x71c>
 80081f8:	11401704 	addi	r5,r2,92
 80081fc:	10c016c4 	addi	r3,r2,91
 8008200:	294b883a 	add	r5,r5,r5
 8008204:	294b883a 	add	r5,r5,r5
 8008208:	294b883a 	add	r5,r5,r5
 800820c:	994b883a 	add	r5,r19,r5
 8008210:	28800017 	ldw	r2,0(r5)
 8008214:	01820074 	movhi	r6,2049
 8008218:	297ffe04 	addi	r5,r5,-8
 800821c:	31892204 	addi	r6,r6,9352
 8008220:	28806526 	beq	r5,r2,80083b8 <_malloc_r+0x6d8>
 8008224:	01bfff04 	movi	r6,-4
 8008228:	10c00117 	ldw	r3,4(r2)
 800822c:	1986703a 	and	r3,r3,r6
 8008230:	38c0022e 	bgeu	r7,r3,800823c <_malloc_r+0x55c>
 8008234:	10800217 	ldw	r2,8(r2)
 8008238:	28bffb1e 	bne	r5,r2,8008228 <__alt_data_end+0xff008228>
 800823c:	11400317 	ldw	r5,12(r2)
 8008240:	98c00117 	ldw	r3,4(r19)
 8008244:	81400315 	stw	r5,12(r16)
 8008248:	80800215 	stw	r2,8(r16)
 800824c:	2c000215 	stw	r16,8(r5)
 8008250:	14000315 	stw	r16,12(r2)
 8008254:	003ef806 	br	8007e38 <__alt_data_end+0xff007e38>
 8008258:	88c00054 	ori	r3,r17,1
 800825c:	80c00115 	stw	r3,4(r16)
 8008260:	8463883a 	add	r17,r16,r17
 8008264:	34400515 	stw	r17,20(r6)
 8008268:	34400415 	stw	r17,16(r6)
 800826c:	10c00054 	ori	r3,r2,1
 8008270:	8a000315 	stw	r8,12(r17)
 8008274:	8a000215 	stw	r8,8(r17)
 8008278:	88c00115 	stw	r3,4(r17)
 800827c:	88a3883a 	add	r17,r17,r2
 8008280:	88800015 	stw	r2,0(r17)
 8008284:	9009883a 	mov	r4,r18
 8008288:	800f7f40 	call	800f7f4 <__malloc_unlock>
 800828c:	80800204 	addi	r2,r16,8
 8008290:	003f3c06 	br	8007f84 <__alt_data_end+0xff007f84>
 8008294:	30c00117 	ldw	r3,4(r6)
 8008298:	003ee706 	br	8007e38 <__alt_data_end+0xff007e38>
 800829c:	5ac00044 	addi	r11,r11,1
 80082a0:	588000cc 	andi	r2,r11,3
 80082a4:	31800204 	addi	r6,r6,8
 80082a8:	103efd1e 	bne	r2,zero,8007ea0 <__alt_data_end+0xff007ea0>
 80082ac:	00002406 	br	8008340 <_malloc_r+0x660>
 80082b0:	14000317 	ldw	r16,12(r2)
 80082b4:	143f251e 	bne	r2,r16,8007f4c <__alt_data_end+0xff007f4c>
 80082b8:	21000084 	addi	r4,r4,2
 80082bc:	003ebc06 	br	8007db0 <__alt_data_end+0xff007db0>
 80082c0:	8085883a 	add	r2,r16,r2
 80082c4:	10c00117 	ldw	r3,4(r2)
 80082c8:	81000317 	ldw	r4,12(r16)
 80082cc:	81400217 	ldw	r5,8(r16)
 80082d0:	18c00054 	ori	r3,r3,1
 80082d4:	10c00115 	stw	r3,4(r2)
 80082d8:	29000315 	stw	r4,12(r5)
 80082dc:	21400215 	stw	r5,8(r4)
 80082e0:	9009883a 	mov	r4,r18
 80082e4:	800f7f40 	call	800f7f4 <__malloc_unlock>
 80082e8:	80800204 	addi	r2,r16,8
 80082ec:	003f2506 	br	8007f84 <__alt_data_end+0xff007f84>
 80082f0:	12001704 	addi	r8,r2,92
 80082f4:	11c016c4 	addi	r7,r2,91
 80082f8:	4209883a 	add	r4,r8,r8
 80082fc:	003e9606 	br	8007d58 <__alt_data_end+0xff007d58>
 8008300:	3804d1ba 	srli	r2,r7,6
 8008304:	11400e44 	addi	r5,r2,57
 8008308:	10c00e04 	addi	r3,r2,56
 800830c:	294b883a 	add	r5,r5,r5
 8008310:	003fbc06 	br	8008204 <__alt_data_end+0xff008204>
 8008314:	84ff5926 	beq	r16,r19,800807c <__alt_data_end+0xff00807c>
 8008318:	00820074 	movhi	r2,2049
 800831c:	10892204 	addi	r2,r2,9352
 8008320:	14000217 	ldw	r16,8(r2)
 8008324:	00bfff04 	movi	r2,-4
 8008328:	80c00117 	ldw	r3,4(r16)
 800832c:	1886703a 	and	r3,r3,r2
 8008330:	003f9106 	br	8008178 <__alt_data_end+0xff008178>
 8008334:	60800217 	ldw	r2,8(r12)
 8008338:	213fffc4 	addi	r4,r4,-1
 800833c:	1300651e 	bne	r2,r12,80084d4 <_malloc_r+0x7f4>
 8008340:	208000cc 	andi	r2,r4,3
 8008344:	633ffe04 	addi	r12,r12,-8
 8008348:	103ffa1e 	bne	r2,zero,8008334 <__alt_data_end+0xff008334>
 800834c:	98800117 	ldw	r2,4(r19)
 8008350:	0146303a 	nor	r3,zero,r5
 8008354:	1884703a 	and	r2,r3,r2
 8008358:	98800115 	stw	r2,4(r19)
 800835c:	294b883a 	add	r5,r5,r5
 8008360:	117f2836 	bltu	r2,r5,8008004 <__alt_data_end+0xff008004>
 8008364:	283f2726 	beq	r5,zero,8008004 <__alt_data_end+0xff008004>
 8008368:	2886703a 	and	r3,r5,r2
 800836c:	5809883a 	mov	r4,r11
 8008370:	183ec31e 	bne	r3,zero,8007e80 <__alt_data_end+0xff007e80>
 8008374:	294b883a 	add	r5,r5,r5
 8008378:	2886703a 	and	r3,r5,r2
 800837c:	21000104 	addi	r4,r4,4
 8008380:	183ffc26 	beq	r3,zero,8008374 <__alt_data_end+0xff008374>
 8008384:	003ebe06 	br	8007e80 <__alt_data_end+0xff007e80>
 8008388:	00c05504 	movi	r3,340
 800838c:	18801236 	bltu	r3,r2,80083d8 <_malloc_r+0x6f8>
 8008390:	8804d3fa 	srli	r2,r17,15
 8008394:	12001e04 	addi	r8,r2,120
 8008398:	11c01dc4 	addi	r7,r2,119
 800839c:	4209883a 	add	r4,r8,r8
 80083a0:	003e6d06 	br	8007d58 <__alt_data_end+0xff007d58>
 80083a4:	00c40004 	movi	r3,4096
 80083a8:	003f4606 	br	80080c4 <__alt_data_end+0xff0080c4>
 80083ac:	00800044 	movi	r2,1
 80083b0:	a0800115 	stw	r2,4(r20)
 80083b4:	003f7406 	br	8008188 <__alt_data_end+0xff008188>
 80083b8:	1805d0ba 	srai	r2,r3,2
 80083bc:	01c00044 	movi	r7,1
 80083c0:	30c00117 	ldw	r3,4(r6)
 80083c4:	388e983a 	sll	r7,r7,r2
 80083c8:	2805883a 	mov	r2,r5
 80083cc:	38c6b03a 	or	r3,r7,r3
 80083d0:	30c00115 	stw	r3,4(r6)
 80083d4:	003f9b06 	br	8008244 <__alt_data_end+0xff008244>
 80083d8:	00c15504 	movi	r3,1364
 80083dc:	18801a36 	bltu	r3,r2,8008448 <_malloc_r+0x768>
 80083e0:	8804d4ba 	srli	r2,r17,18
 80083e4:	12001f44 	addi	r8,r2,125
 80083e8:	11c01f04 	addi	r7,r2,124
 80083ec:	4209883a 	add	r4,r8,r8
 80083f0:	003e5906 	br	8007d58 <__alt_data_end+0xff007d58>
 80083f4:	ad400404 	addi	r21,r21,16
 80083f8:	003f1706 	br	8008058 <__alt_data_end+0xff008058>
 80083fc:	00c01504 	movi	r3,84
 8008400:	18802336 	bltu	r3,r2,8008490 <_malloc_r+0x7b0>
 8008404:	3804d33a 	srli	r2,r7,12
 8008408:	11401bc4 	addi	r5,r2,111
 800840c:	10c01b84 	addi	r3,r2,110
 8008410:	294b883a 	add	r5,r5,r5
 8008414:	003f7b06 	br	8008204 <__alt_data_end+0xff008204>
 8008418:	9c000217 	ldw	r16,8(r19)
 800841c:	00bfff04 	movi	r2,-4
 8008420:	80c00117 	ldw	r3,4(r16)
 8008424:	1886703a 	and	r3,r3,r2
 8008428:	003f5306 	br	8008178 <__alt_data_end+0xff008178>
 800842c:	3083ffcc 	andi	r2,r6,4095
 8008430:	103f181e 	bne	r2,zero,8008094 <__alt_data_end+0xff008094>
 8008434:	99000217 	ldw	r4,8(r19)
 8008438:	b545883a 	add	r2,r22,r21
 800843c:	10800054 	ori	r2,r2,1
 8008440:	20800115 	stw	r2,4(r4)
 8008444:	003f3e06 	br	8008140 <__alt_data_end+0xff008140>
 8008448:	01003f84 	movi	r4,254
 800844c:	02001fc4 	movi	r8,127
 8008450:	01c01f84 	movi	r7,126
 8008454:	003e4006 	br	8007d58 <__alt_data_end+0xff007d58>
 8008458:	00820074 	movhi	r2,2049
 800845c:	108eac04 	addi	r2,r2,15024
 8008460:	15000015 	stw	r20,0(r2)
 8008464:	003f1106 	br	80080ac <__alt_data_end+0xff0080ac>
 8008468:	00800044 	movi	r2,1
 800846c:	002b883a 	mov	r21,zero
 8008470:	003f1f06 	br	80080f0 <__alt_data_end+0xff0080f0>
 8008474:	81400204 	addi	r5,r16,8
 8008478:	9009883a 	mov	r4,r18
 800847c:	80075b00 	call	80075b0 <_free_r>
 8008480:	00820074 	movhi	r2,2049
 8008484:	10959504 	addi	r2,r2,22100
 8008488:	10c00017 	ldw	r3,0(r2)
 800848c:	003f2c06 	br	8008140 <__alt_data_end+0xff008140>
 8008490:	00c05504 	movi	r3,340
 8008494:	18800536 	bltu	r3,r2,80084ac <_malloc_r+0x7cc>
 8008498:	3804d3fa 	srli	r2,r7,15
 800849c:	11401e04 	addi	r5,r2,120
 80084a0:	10c01dc4 	addi	r3,r2,119
 80084a4:	294b883a 	add	r5,r5,r5
 80084a8:	003f5606 	br	8008204 <__alt_data_end+0xff008204>
 80084ac:	00c15504 	movi	r3,1364
 80084b0:	18800536 	bltu	r3,r2,80084c8 <_malloc_r+0x7e8>
 80084b4:	3804d4ba 	srli	r2,r7,18
 80084b8:	11401f44 	addi	r5,r2,125
 80084bc:	10c01f04 	addi	r3,r2,124
 80084c0:	294b883a 	add	r5,r5,r5
 80084c4:	003f4f06 	br	8008204 <__alt_data_end+0xff008204>
 80084c8:	01403f84 	movi	r5,254
 80084cc:	00c01f84 	movi	r3,126
 80084d0:	003f4c06 	br	8008204 <__alt_data_end+0xff008204>
 80084d4:	98800117 	ldw	r2,4(r19)
 80084d8:	003fa006 	br	800835c <__alt_data_end+0xff00835c>
 80084dc:	8808d0fa 	srli	r4,r17,3
 80084e0:	20800044 	addi	r2,r4,1
 80084e4:	1085883a 	add	r2,r2,r2
 80084e8:	003e9006 	br	8007f2c <__alt_data_end+0xff007f2c>

080084ec <memchr>:
 80084ec:	208000cc 	andi	r2,r4,3
 80084f0:	280f883a 	mov	r7,r5
 80084f4:	10003426 	beq	r2,zero,80085c8 <memchr+0xdc>
 80084f8:	30bfffc4 	addi	r2,r6,-1
 80084fc:	30001a26 	beq	r6,zero,8008568 <memchr+0x7c>
 8008500:	20c00003 	ldbu	r3,0(r4)
 8008504:	29803fcc 	andi	r6,r5,255
 8008508:	30c0051e 	bne	r6,r3,8008520 <memchr+0x34>
 800850c:	00001806 	br	8008570 <memchr+0x84>
 8008510:	10001526 	beq	r2,zero,8008568 <memchr+0x7c>
 8008514:	20c00003 	ldbu	r3,0(r4)
 8008518:	10bfffc4 	addi	r2,r2,-1
 800851c:	30c01426 	beq	r6,r3,8008570 <memchr+0x84>
 8008520:	21000044 	addi	r4,r4,1
 8008524:	20c000cc 	andi	r3,r4,3
 8008528:	183ff91e 	bne	r3,zero,8008510 <__alt_data_end+0xff008510>
 800852c:	020000c4 	movi	r8,3
 8008530:	40801136 	bltu	r8,r2,8008578 <memchr+0x8c>
 8008534:	10000c26 	beq	r2,zero,8008568 <memchr+0x7c>
 8008538:	20c00003 	ldbu	r3,0(r4)
 800853c:	29403fcc 	andi	r5,r5,255
 8008540:	28c00b26 	beq	r5,r3,8008570 <memchr+0x84>
 8008544:	20c00044 	addi	r3,r4,1
 8008548:	39803fcc 	andi	r6,r7,255
 800854c:	2089883a 	add	r4,r4,r2
 8008550:	00000306 	br	8008560 <memchr+0x74>
 8008554:	18c00044 	addi	r3,r3,1
 8008558:	197fffc3 	ldbu	r5,-1(r3)
 800855c:	31400526 	beq	r6,r5,8008574 <memchr+0x88>
 8008560:	1805883a 	mov	r2,r3
 8008564:	20fffb1e 	bne	r4,r3,8008554 <__alt_data_end+0xff008554>
 8008568:	0005883a 	mov	r2,zero
 800856c:	f800283a 	ret
 8008570:	2005883a 	mov	r2,r4
 8008574:	f800283a 	ret
 8008578:	28c03fcc 	andi	r3,r5,255
 800857c:	1812923a 	slli	r9,r3,8
 8008580:	02ffbff4 	movhi	r11,65279
 8008584:	02a02074 	movhi	r10,32897
 8008588:	48d2b03a 	or	r9,r9,r3
 800858c:	4806943a 	slli	r3,r9,16
 8008590:	5affbfc4 	addi	r11,r11,-257
 8008594:	52a02004 	addi	r10,r10,-32640
 8008598:	48d2b03a 	or	r9,r9,r3
 800859c:	20c00017 	ldw	r3,0(r4)
 80085a0:	48c6f03a 	xor	r3,r9,r3
 80085a4:	1acd883a 	add	r6,r3,r11
 80085a8:	00c6303a 	nor	r3,zero,r3
 80085ac:	30c6703a 	and	r3,r6,r3
 80085b0:	1a86703a 	and	r3,r3,r10
 80085b4:	183fe01e 	bne	r3,zero,8008538 <__alt_data_end+0xff008538>
 80085b8:	10bfff04 	addi	r2,r2,-4
 80085bc:	21000104 	addi	r4,r4,4
 80085c0:	40bff636 	bltu	r8,r2,800859c <__alt_data_end+0xff00859c>
 80085c4:	003fdb06 	br	8008534 <__alt_data_end+0xff008534>
 80085c8:	3005883a 	mov	r2,r6
 80085cc:	003fd706 	br	800852c <__alt_data_end+0xff00852c>

080085d0 <memcpy>:
 80085d0:	defffd04 	addi	sp,sp,-12
 80085d4:	dfc00215 	stw	ra,8(sp)
 80085d8:	dc400115 	stw	r17,4(sp)
 80085dc:	dc000015 	stw	r16,0(sp)
 80085e0:	00c003c4 	movi	r3,15
 80085e4:	2005883a 	mov	r2,r4
 80085e8:	1980452e 	bgeu	r3,r6,8008700 <memcpy+0x130>
 80085ec:	2906b03a 	or	r3,r5,r4
 80085f0:	18c000cc 	andi	r3,r3,3
 80085f4:	1800441e 	bne	r3,zero,8008708 <memcpy+0x138>
 80085f8:	347ffc04 	addi	r17,r6,-16
 80085fc:	8822d13a 	srli	r17,r17,4
 8008600:	28c00104 	addi	r3,r5,4
 8008604:	23400104 	addi	r13,r4,4
 8008608:	8820913a 	slli	r16,r17,4
 800860c:	2b000204 	addi	r12,r5,8
 8008610:	22c00204 	addi	r11,r4,8
 8008614:	84000504 	addi	r16,r16,20
 8008618:	2a800304 	addi	r10,r5,12
 800861c:	22400304 	addi	r9,r4,12
 8008620:	2c21883a 	add	r16,r5,r16
 8008624:	2811883a 	mov	r8,r5
 8008628:	200f883a 	mov	r7,r4
 800862c:	41000017 	ldw	r4,0(r8)
 8008630:	1fc00017 	ldw	ra,0(r3)
 8008634:	63c00017 	ldw	r15,0(r12)
 8008638:	39000015 	stw	r4,0(r7)
 800863c:	53800017 	ldw	r14,0(r10)
 8008640:	6fc00015 	stw	ra,0(r13)
 8008644:	5bc00015 	stw	r15,0(r11)
 8008648:	4b800015 	stw	r14,0(r9)
 800864c:	18c00404 	addi	r3,r3,16
 8008650:	39c00404 	addi	r7,r7,16
 8008654:	42000404 	addi	r8,r8,16
 8008658:	6b400404 	addi	r13,r13,16
 800865c:	63000404 	addi	r12,r12,16
 8008660:	5ac00404 	addi	r11,r11,16
 8008664:	52800404 	addi	r10,r10,16
 8008668:	4a400404 	addi	r9,r9,16
 800866c:	1c3fef1e 	bne	r3,r16,800862c <__alt_data_end+0xff00862c>
 8008670:	89c00044 	addi	r7,r17,1
 8008674:	380e913a 	slli	r7,r7,4
 8008678:	310003cc 	andi	r4,r6,15
 800867c:	02c000c4 	movi	r11,3
 8008680:	11c7883a 	add	r3,r2,r7
 8008684:	29cb883a 	add	r5,r5,r7
 8008688:	5900212e 	bgeu	r11,r4,8008710 <memcpy+0x140>
 800868c:	1813883a 	mov	r9,r3
 8008690:	2811883a 	mov	r8,r5
 8008694:	200f883a 	mov	r7,r4
 8008698:	42800017 	ldw	r10,0(r8)
 800869c:	4a400104 	addi	r9,r9,4
 80086a0:	39ffff04 	addi	r7,r7,-4
 80086a4:	4abfff15 	stw	r10,-4(r9)
 80086a8:	42000104 	addi	r8,r8,4
 80086ac:	59fffa36 	bltu	r11,r7,8008698 <__alt_data_end+0xff008698>
 80086b0:	213fff04 	addi	r4,r4,-4
 80086b4:	2008d0ba 	srli	r4,r4,2
 80086b8:	318000cc 	andi	r6,r6,3
 80086bc:	21000044 	addi	r4,r4,1
 80086c0:	2109883a 	add	r4,r4,r4
 80086c4:	2109883a 	add	r4,r4,r4
 80086c8:	1907883a 	add	r3,r3,r4
 80086cc:	290b883a 	add	r5,r5,r4
 80086d0:	30000626 	beq	r6,zero,80086ec <memcpy+0x11c>
 80086d4:	198d883a 	add	r6,r3,r6
 80086d8:	29c00003 	ldbu	r7,0(r5)
 80086dc:	18c00044 	addi	r3,r3,1
 80086e0:	29400044 	addi	r5,r5,1
 80086e4:	19ffffc5 	stb	r7,-1(r3)
 80086e8:	19bffb1e 	bne	r3,r6,80086d8 <__alt_data_end+0xff0086d8>
 80086ec:	dfc00217 	ldw	ra,8(sp)
 80086f0:	dc400117 	ldw	r17,4(sp)
 80086f4:	dc000017 	ldw	r16,0(sp)
 80086f8:	dec00304 	addi	sp,sp,12
 80086fc:	f800283a 	ret
 8008700:	2007883a 	mov	r3,r4
 8008704:	003ff206 	br	80086d0 <__alt_data_end+0xff0086d0>
 8008708:	2007883a 	mov	r3,r4
 800870c:	003ff106 	br	80086d4 <__alt_data_end+0xff0086d4>
 8008710:	200d883a 	mov	r6,r4
 8008714:	003fee06 	br	80086d0 <__alt_data_end+0xff0086d0>

08008718 <memset>:
 8008718:	20c000cc 	andi	r3,r4,3
 800871c:	2005883a 	mov	r2,r4
 8008720:	18004426 	beq	r3,zero,8008834 <memset+0x11c>
 8008724:	31ffffc4 	addi	r7,r6,-1
 8008728:	30004026 	beq	r6,zero,800882c <memset+0x114>
 800872c:	2813883a 	mov	r9,r5
 8008730:	200d883a 	mov	r6,r4
 8008734:	2007883a 	mov	r3,r4
 8008738:	00000406 	br	800874c <memset+0x34>
 800873c:	3a3fffc4 	addi	r8,r7,-1
 8008740:	31800044 	addi	r6,r6,1
 8008744:	38003926 	beq	r7,zero,800882c <memset+0x114>
 8008748:	400f883a 	mov	r7,r8
 800874c:	18c00044 	addi	r3,r3,1
 8008750:	32400005 	stb	r9,0(r6)
 8008754:	1a0000cc 	andi	r8,r3,3
 8008758:	403ff81e 	bne	r8,zero,800873c <__alt_data_end+0xff00873c>
 800875c:	010000c4 	movi	r4,3
 8008760:	21c02d2e 	bgeu	r4,r7,8008818 <memset+0x100>
 8008764:	29003fcc 	andi	r4,r5,255
 8008768:	200c923a 	slli	r6,r4,8
 800876c:	3108b03a 	or	r4,r6,r4
 8008770:	200c943a 	slli	r6,r4,16
 8008774:	218cb03a 	or	r6,r4,r6
 8008778:	010003c4 	movi	r4,15
 800877c:	21c0182e 	bgeu	r4,r7,80087e0 <memset+0xc8>
 8008780:	3b3ffc04 	addi	r12,r7,-16
 8008784:	6018d13a 	srli	r12,r12,4
 8008788:	1a000104 	addi	r8,r3,4
 800878c:	1ac00204 	addi	r11,r3,8
 8008790:	6008913a 	slli	r4,r12,4
 8008794:	1a800304 	addi	r10,r3,12
 8008798:	1813883a 	mov	r9,r3
 800879c:	21000504 	addi	r4,r4,20
 80087a0:	1909883a 	add	r4,r3,r4
 80087a4:	49800015 	stw	r6,0(r9)
 80087a8:	41800015 	stw	r6,0(r8)
 80087ac:	59800015 	stw	r6,0(r11)
 80087b0:	51800015 	stw	r6,0(r10)
 80087b4:	42000404 	addi	r8,r8,16
 80087b8:	4a400404 	addi	r9,r9,16
 80087bc:	5ac00404 	addi	r11,r11,16
 80087c0:	52800404 	addi	r10,r10,16
 80087c4:	413ff71e 	bne	r8,r4,80087a4 <__alt_data_end+0xff0087a4>
 80087c8:	63000044 	addi	r12,r12,1
 80087cc:	6018913a 	slli	r12,r12,4
 80087d0:	39c003cc 	andi	r7,r7,15
 80087d4:	010000c4 	movi	r4,3
 80087d8:	1b07883a 	add	r3,r3,r12
 80087dc:	21c00e2e 	bgeu	r4,r7,8008818 <memset+0x100>
 80087e0:	1813883a 	mov	r9,r3
 80087e4:	3811883a 	mov	r8,r7
 80087e8:	010000c4 	movi	r4,3
 80087ec:	49800015 	stw	r6,0(r9)
 80087f0:	423fff04 	addi	r8,r8,-4
 80087f4:	4a400104 	addi	r9,r9,4
 80087f8:	223ffc36 	bltu	r4,r8,80087ec <__alt_data_end+0xff0087ec>
 80087fc:	393fff04 	addi	r4,r7,-4
 8008800:	2008d0ba 	srli	r4,r4,2
 8008804:	39c000cc 	andi	r7,r7,3
 8008808:	21000044 	addi	r4,r4,1
 800880c:	2109883a 	add	r4,r4,r4
 8008810:	2109883a 	add	r4,r4,r4
 8008814:	1907883a 	add	r3,r3,r4
 8008818:	38000526 	beq	r7,zero,8008830 <memset+0x118>
 800881c:	19cf883a 	add	r7,r3,r7
 8008820:	19400005 	stb	r5,0(r3)
 8008824:	18c00044 	addi	r3,r3,1
 8008828:	38fffd1e 	bne	r7,r3,8008820 <__alt_data_end+0xff008820>
 800882c:	f800283a 	ret
 8008830:	f800283a 	ret
 8008834:	2007883a 	mov	r3,r4
 8008838:	300f883a 	mov	r7,r6
 800883c:	003fc706 	br	800875c <__alt_data_end+0xff00875c>

08008840 <_Balloc>:
 8008840:	20801317 	ldw	r2,76(r4)
 8008844:	defffc04 	addi	sp,sp,-16
 8008848:	dc400115 	stw	r17,4(sp)
 800884c:	dc000015 	stw	r16,0(sp)
 8008850:	dfc00315 	stw	ra,12(sp)
 8008854:	dc800215 	stw	r18,8(sp)
 8008858:	2023883a 	mov	r17,r4
 800885c:	2821883a 	mov	r16,r5
 8008860:	10000f26 	beq	r2,zero,80088a0 <_Balloc+0x60>
 8008864:	8407883a 	add	r3,r16,r16
 8008868:	18c7883a 	add	r3,r3,r3
 800886c:	10c7883a 	add	r3,r2,r3
 8008870:	18800017 	ldw	r2,0(r3)
 8008874:	10001126 	beq	r2,zero,80088bc <_Balloc+0x7c>
 8008878:	11000017 	ldw	r4,0(r2)
 800887c:	19000015 	stw	r4,0(r3)
 8008880:	10000415 	stw	zero,16(r2)
 8008884:	10000315 	stw	zero,12(r2)
 8008888:	dfc00317 	ldw	ra,12(sp)
 800888c:	dc800217 	ldw	r18,8(sp)
 8008890:	dc400117 	ldw	r17,4(sp)
 8008894:	dc000017 	ldw	r16,0(sp)
 8008898:	dec00404 	addi	sp,sp,16
 800889c:	f800283a 	ret
 80088a0:	01800844 	movi	r6,33
 80088a4:	01400104 	movi	r5,4
 80088a8:	800b5700 	call	800b570 <_calloc_r>
 80088ac:	88801315 	stw	r2,76(r17)
 80088b0:	103fec1e 	bne	r2,zero,8008864 <__alt_data_end+0xff008864>
 80088b4:	0005883a 	mov	r2,zero
 80088b8:	003ff306 	br	8008888 <__alt_data_end+0xff008888>
 80088bc:	01400044 	movi	r5,1
 80088c0:	2c24983a 	sll	r18,r5,r16
 80088c4:	8809883a 	mov	r4,r17
 80088c8:	91800144 	addi	r6,r18,5
 80088cc:	318d883a 	add	r6,r6,r6
 80088d0:	318d883a 	add	r6,r6,r6
 80088d4:	800b5700 	call	800b570 <_calloc_r>
 80088d8:	103ff626 	beq	r2,zero,80088b4 <__alt_data_end+0xff0088b4>
 80088dc:	14000115 	stw	r16,4(r2)
 80088e0:	14800215 	stw	r18,8(r2)
 80088e4:	003fe606 	br	8008880 <__alt_data_end+0xff008880>

080088e8 <_Bfree>:
 80088e8:	28000826 	beq	r5,zero,800890c <_Bfree+0x24>
 80088ec:	28c00117 	ldw	r3,4(r5)
 80088f0:	20801317 	ldw	r2,76(r4)
 80088f4:	18c7883a 	add	r3,r3,r3
 80088f8:	18c7883a 	add	r3,r3,r3
 80088fc:	10c5883a 	add	r2,r2,r3
 8008900:	10c00017 	ldw	r3,0(r2)
 8008904:	28c00015 	stw	r3,0(r5)
 8008908:	11400015 	stw	r5,0(r2)
 800890c:	f800283a 	ret

08008910 <__multadd>:
 8008910:	defffa04 	addi	sp,sp,-24
 8008914:	dc800315 	stw	r18,12(sp)
 8008918:	dc400215 	stw	r17,8(sp)
 800891c:	dc000115 	stw	r16,4(sp)
 8008920:	2823883a 	mov	r17,r5
 8008924:	2c000417 	ldw	r16,16(r5)
 8008928:	dfc00515 	stw	ra,20(sp)
 800892c:	dcc00415 	stw	r19,16(sp)
 8008930:	2025883a 	mov	r18,r4
 8008934:	29400504 	addi	r5,r5,20
 8008938:	0011883a 	mov	r8,zero
 800893c:	28c00017 	ldw	r3,0(r5)
 8008940:	29400104 	addi	r5,r5,4
 8008944:	42000044 	addi	r8,r8,1
 8008948:	18bfffcc 	andi	r2,r3,65535
 800894c:	1185383a 	mul	r2,r2,r6
 8008950:	1806d43a 	srli	r3,r3,16
 8008954:	11cf883a 	add	r7,r2,r7
 8008958:	3808d43a 	srli	r4,r7,16
 800895c:	1987383a 	mul	r3,r3,r6
 8008960:	38bfffcc 	andi	r2,r7,65535
 8008964:	1907883a 	add	r3,r3,r4
 8008968:	1808943a 	slli	r4,r3,16
 800896c:	180ed43a 	srli	r7,r3,16
 8008970:	2085883a 	add	r2,r4,r2
 8008974:	28bfff15 	stw	r2,-4(r5)
 8008978:	443ff016 	blt	r8,r16,800893c <__alt_data_end+0xff00893c>
 800897c:	38000926 	beq	r7,zero,80089a4 <__multadd+0x94>
 8008980:	88800217 	ldw	r2,8(r17)
 8008984:	80800f0e 	bge	r16,r2,80089c4 <__multadd+0xb4>
 8008988:	80800144 	addi	r2,r16,5
 800898c:	1085883a 	add	r2,r2,r2
 8008990:	1085883a 	add	r2,r2,r2
 8008994:	8885883a 	add	r2,r17,r2
 8008998:	11c00015 	stw	r7,0(r2)
 800899c:	84000044 	addi	r16,r16,1
 80089a0:	8c000415 	stw	r16,16(r17)
 80089a4:	8805883a 	mov	r2,r17
 80089a8:	dfc00517 	ldw	ra,20(sp)
 80089ac:	dcc00417 	ldw	r19,16(sp)
 80089b0:	dc800317 	ldw	r18,12(sp)
 80089b4:	dc400217 	ldw	r17,8(sp)
 80089b8:	dc000117 	ldw	r16,4(sp)
 80089bc:	dec00604 	addi	sp,sp,24
 80089c0:	f800283a 	ret
 80089c4:	89400117 	ldw	r5,4(r17)
 80089c8:	9009883a 	mov	r4,r18
 80089cc:	d9c00015 	stw	r7,0(sp)
 80089d0:	29400044 	addi	r5,r5,1
 80089d4:	80088400 	call	8008840 <_Balloc>
 80089d8:	89800417 	ldw	r6,16(r17)
 80089dc:	89400304 	addi	r5,r17,12
 80089e0:	11000304 	addi	r4,r2,12
 80089e4:	31800084 	addi	r6,r6,2
 80089e8:	318d883a 	add	r6,r6,r6
 80089ec:	318d883a 	add	r6,r6,r6
 80089f0:	1027883a 	mov	r19,r2
 80089f4:	80085d00 	call	80085d0 <memcpy>
 80089f8:	d9c00017 	ldw	r7,0(sp)
 80089fc:	88000a26 	beq	r17,zero,8008a28 <__multadd+0x118>
 8008a00:	88c00117 	ldw	r3,4(r17)
 8008a04:	90801317 	ldw	r2,76(r18)
 8008a08:	18c7883a 	add	r3,r3,r3
 8008a0c:	18c7883a 	add	r3,r3,r3
 8008a10:	10c5883a 	add	r2,r2,r3
 8008a14:	10c00017 	ldw	r3,0(r2)
 8008a18:	88c00015 	stw	r3,0(r17)
 8008a1c:	14400015 	stw	r17,0(r2)
 8008a20:	9823883a 	mov	r17,r19
 8008a24:	003fd806 	br	8008988 <__alt_data_end+0xff008988>
 8008a28:	9823883a 	mov	r17,r19
 8008a2c:	003fd606 	br	8008988 <__alt_data_end+0xff008988>

08008a30 <__s2b>:
 8008a30:	defff904 	addi	sp,sp,-28
 8008a34:	dc400115 	stw	r17,4(sp)
 8008a38:	dc000015 	stw	r16,0(sp)
 8008a3c:	2023883a 	mov	r17,r4
 8008a40:	2821883a 	mov	r16,r5
 8008a44:	39000204 	addi	r4,r7,8
 8008a48:	01400244 	movi	r5,9
 8008a4c:	dcc00315 	stw	r19,12(sp)
 8008a50:	dc800215 	stw	r18,8(sp)
 8008a54:	dfc00615 	stw	ra,24(sp)
 8008a58:	dd400515 	stw	r21,20(sp)
 8008a5c:	dd000415 	stw	r20,16(sp)
 8008a60:	3825883a 	mov	r18,r7
 8008a64:	3027883a 	mov	r19,r6
 8008a68:	80020c00 	call	80020c0 <__divsi3>
 8008a6c:	00c00044 	movi	r3,1
 8008a70:	000b883a 	mov	r5,zero
 8008a74:	1880030e 	bge	r3,r2,8008a84 <__s2b+0x54>
 8008a78:	18c7883a 	add	r3,r3,r3
 8008a7c:	29400044 	addi	r5,r5,1
 8008a80:	18bffd16 	blt	r3,r2,8008a78 <__alt_data_end+0xff008a78>
 8008a84:	8809883a 	mov	r4,r17
 8008a88:	80088400 	call	8008840 <_Balloc>
 8008a8c:	d8c00717 	ldw	r3,28(sp)
 8008a90:	10c00515 	stw	r3,20(r2)
 8008a94:	00c00044 	movi	r3,1
 8008a98:	10c00415 	stw	r3,16(r2)
 8008a9c:	00c00244 	movi	r3,9
 8008aa0:	1cc0210e 	bge	r3,r19,8008b28 <__s2b+0xf8>
 8008aa4:	80eb883a 	add	r21,r16,r3
 8008aa8:	a829883a 	mov	r20,r21
 8008aac:	84e1883a 	add	r16,r16,r19
 8008ab0:	a1c00007 	ldb	r7,0(r20)
 8008ab4:	01800284 	movi	r6,10
 8008ab8:	a5000044 	addi	r20,r20,1
 8008abc:	100b883a 	mov	r5,r2
 8008ac0:	39fff404 	addi	r7,r7,-48
 8008ac4:	8809883a 	mov	r4,r17
 8008ac8:	80089100 	call	8008910 <__multadd>
 8008acc:	a43ff81e 	bne	r20,r16,8008ab0 <__alt_data_end+0xff008ab0>
 8008ad0:	ace1883a 	add	r16,r21,r19
 8008ad4:	843ffe04 	addi	r16,r16,-8
 8008ad8:	9c800a0e 	bge	r19,r18,8008b04 <__s2b+0xd4>
 8008adc:	94e5c83a 	sub	r18,r18,r19
 8008ae0:	84a5883a 	add	r18,r16,r18
 8008ae4:	81c00007 	ldb	r7,0(r16)
 8008ae8:	01800284 	movi	r6,10
 8008aec:	84000044 	addi	r16,r16,1
 8008af0:	100b883a 	mov	r5,r2
 8008af4:	39fff404 	addi	r7,r7,-48
 8008af8:	8809883a 	mov	r4,r17
 8008afc:	80089100 	call	8008910 <__multadd>
 8008b00:	84bff81e 	bne	r16,r18,8008ae4 <__alt_data_end+0xff008ae4>
 8008b04:	dfc00617 	ldw	ra,24(sp)
 8008b08:	dd400517 	ldw	r21,20(sp)
 8008b0c:	dd000417 	ldw	r20,16(sp)
 8008b10:	dcc00317 	ldw	r19,12(sp)
 8008b14:	dc800217 	ldw	r18,8(sp)
 8008b18:	dc400117 	ldw	r17,4(sp)
 8008b1c:	dc000017 	ldw	r16,0(sp)
 8008b20:	dec00704 	addi	sp,sp,28
 8008b24:	f800283a 	ret
 8008b28:	84000284 	addi	r16,r16,10
 8008b2c:	1827883a 	mov	r19,r3
 8008b30:	003fe906 	br	8008ad8 <__alt_data_end+0xff008ad8>

08008b34 <__hi0bits>:
 8008b34:	20bfffec 	andhi	r2,r4,65535
 8008b38:	1000141e 	bne	r2,zero,8008b8c <__hi0bits+0x58>
 8008b3c:	2008943a 	slli	r4,r4,16
 8008b40:	00800404 	movi	r2,16
 8008b44:	20ffc02c 	andhi	r3,r4,65280
 8008b48:	1800021e 	bne	r3,zero,8008b54 <__hi0bits+0x20>
 8008b4c:	2008923a 	slli	r4,r4,8
 8008b50:	10800204 	addi	r2,r2,8
 8008b54:	20fc002c 	andhi	r3,r4,61440
 8008b58:	1800021e 	bne	r3,zero,8008b64 <__hi0bits+0x30>
 8008b5c:	2008913a 	slli	r4,r4,4
 8008b60:	10800104 	addi	r2,r2,4
 8008b64:	20f0002c 	andhi	r3,r4,49152
 8008b68:	1800031e 	bne	r3,zero,8008b78 <__hi0bits+0x44>
 8008b6c:	2109883a 	add	r4,r4,r4
 8008b70:	10800084 	addi	r2,r2,2
 8008b74:	2109883a 	add	r4,r4,r4
 8008b78:	20000316 	blt	r4,zero,8008b88 <__hi0bits+0x54>
 8008b7c:	2110002c 	andhi	r4,r4,16384
 8008b80:	2000041e 	bne	r4,zero,8008b94 <__hi0bits+0x60>
 8008b84:	00800804 	movi	r2,32
 8008b88:	f800283a 	ret
 8008b8c:	0005883a 	mov	r2,zero
 8008b90:	003fec06 	br	8008b44 <__alt_data_end+0xff008b44>
 8008b94:	10800044 	addi	r2,r2,1
 8008b98:	f800283a 	ret

08008b9c <__lo0bits>:
 8008b9c:	20c00017 	ldw	r3,0(r4)
 8008ba0:	188001cc 	andi	r2,r3,7
 8008ba4:	10000826 	beq	r2,zero,8008bc8 <__lo0bits+0x2c>
 8008ba8:	1880004c 	andi	r2,r3,1
 8008bac:	1000211e 	bne	r2,zero,8008c34 <__lo0bits+0x98>
 8008bb0:	1880008c 	andi	r2,r3,2
 8008bb4:	1000211e 	bne	r2,zero,8008c3c <__lo0bits+0xa0>
 8008bb8:	1806d0ba 	srli	r3,r3,2
 8008bbc:	00800084 	movi	r2,2
 8008bc0:	20c00015 	stw	r3,0(r4)
 8008bc4:	f800283a 	ret
 8008bc8:	18bfffcc 	andi	r2,r3,65535
 8008bcc:	10001326 	beq	r2,zero,8008c1c <__lo0bits+0x80>
 8008bd0:	0005883a 	mov	r2,zero
 8008bd4:	19403fcc 	andi	r5,r3,255
 8008bd8:	2800021e 	bne	r5,zero,8008be4 <__lo0bits+0x48>
 8008bdc:	1806d23a 	srli	r3,r3,8
 8008be0:	10800204 	addi	r2,r2,8
 8008be4:	194003cc 	andi	r5,r3,15
 8008be8:	2800021e 	bne	r5,zero,8008bf4 <__lo0bits+0x58>
 8008bec:	1806d13a 	srli	r3,r3,4
 8008bf0:	10800104 	addi	r2,r2,4
 8008bf4:	194000cc 	andi	r5,r3,3
 8008bf8:	2800021e 	bne	r5,zero,8008c04 <__lo0bits+0x68>
 8008bfc:	1806d0ba 	srli	r3,r3,2
 8008c00:	10800084 	addi	r2,r2,2
 8008c04:	1940004c 	andi	r5,r3,1
 8008c08:	2800081e 	bne	r5,zero,8008c2c <__lo0bits+0x90>
 8008c0c:	1806d07a 	srli	r3,r3,1
 8008c10:	1800051e 	bne	r3,zero,8008c28 <__lo0bits+0x8c>
 8008c14:	00800804 	movi	r2,32
 8008c18:	f800283a 	ret
 8008c1c:	1806d43a 	srli	r3,r3,16
 8008c20:	00800404 	movi	r2,16
 8008c24:	003feb06 	br	8008bd4 <__alt_data_end+0xff008bd4>
 8008c28:	10800044 	addi	r2,r2,1
 8008c2c:	20c00015 	stw	r3,0(r4)
 8008c30:	f800283a 	ret
 8008c34:	0005883a 	mov	r2,zero
 8008c38:	f800283a 	ret
 8008c3c:	1806d07a 	srli	r3,r3,1
 8008c40:	00800044 	movi	r2,1
 8008c44:	20c00015 	stw	r3,0(r4)
 8008c48:	f800283a 	ret

08008c4c <__i2b>:
 8008c4c:	defffd04 	addi	sp,sp,-12
 8008c50:	dc000015 	stw	r16,0(sp)
 8008c54:	04000044 	movi	r16,1
 8008c58:	dc400115 	stw	r17,4(sp)
 8008c5c:	2823883a 	mov	r17,r5
 8008c60:	800b883a 	mov	r5,r16
 8008c64:	dfc00215 	stw	ra,8(sp)
 8008c68:	80088400 	call	8008840 <_Balloc>
 8008c6c:	14400515 	stw	r17,20(r2)
 8008c70:	14000415 	stw	r16,16(r2)
 8008c74:	dfc00217 	ldw	ra,8(sp)
 8008c78:	dc400117 	ldw	r17,4(sp)
 8008c7c:	dc000017 	ldw	r16,0(sp)
 8008c80:	dec00304 	addi	sp,sp,12
 8008c84:	f800283a 	ret

08008c88 <__multiply>:
 8008c88:	defffa04 	addi	sp,sp,-24
 8008c8c:	dcc00315 	stw	r19,12(sp)
 8008c90:	dc800215 	stw	r18,8(sp)
 8008c94:	34c00417 	ldw	r19,16(r6)
 8008c98:	2c800417 	ldw	r18,16(r5)
 8008c9c:	dd000415 	stw	r20,16(sp)
 8008ca0:	dc400115 	stw	r17,4(sp)
 8008ca4:	dfc00515 	stw	ra,20(sp)
 8008ca8:	dc000015 	stw	r16,0(sp)
 8008cac:	2829883a 	mov	r20,r5
 8008cb0:	3023883a 	mov	r17,r6
 8008cb4:	94c0050e 	bge	r18,r19,8008ccc <__multiply+0x44>
 8008cb8:	9007883a 	mov	r3,r18
 8008cbc:	3029883a 	mov	r20,r6
 8008cc0:	9825883a 	mov	r18,r19
 8008cc4:	2823883a 	mov	r17,r5
 8008cc8:	1827883a 	mov	r19,r3
 8008ccc:	a0800217 	ldw	r2,8(r20)
 8008cd0:	94e1883a 	add	r16,r18,r19
 8008cd4:	a1400117 	ldw	r5,4(r20)
 8008cd8:	1400010e 	bge	r2,r16,8008ce0 <__multiply+0x58>
 8008cdc:	29400044 	addi	r5,r5,1
 8008ce0:	80088400 	call	8008840 <_Balloc>
 8008ce4:	8415883a 	add	r10,r16,r16
 8008ce8:	12c00504 	addi	r11,r2,20
 8008cec:	5295883a 	add	r10,r10,r10
 8008cf0:	5a95883a 	add	r10,r11,r10
 8008cf4:	5807883a 	mov	r3,r11
 8008cf8:	5a80032e 	bgeu	r11,r10,8008d08 <__multiply+0x80>
 8008cfc:	18000015 	stw	zero,0(r3)
 8008d00:	18c00104 	addi	r3,r3,4
 8008d04:	1abffd36 	bltu	r3,r10,8008cfc <__alt_data_end+0xff008cfc>
 8008d08:	9ce7883a 	add	r19,r19,r19
 8008d0c:	94a5883a 	add	r18,r18,r18
 8008d10:	89800504 	addi	r6,r17,20
 8008d14:	9ce7883a 	add	r19,r19,r19
 8008d18:	a3400504 	addi	r13,r20,20
 8008d1c:	94a5883a 	add	r18,r18,r18
 8008d20:	34d9883a 	add	r12,r6,r19
 8008d24:	6c93883a 	add	r9,r13,r18
 8008d28:	3300422e 	bgeu	r6,r12,8008e34 <__multiply+0x1ac>
 8008d2c:	37c00017 	ldw	ra,0(r6)
 8008d30:	fbffffcc 	andi	r15,ra,65535
 8008d34:	78001b26 	beq	r15,zero,8008da4 <__multiply+0x11c>
 8008d38:	5811883a 	mov	r8,r11
 8008d3c:	681d883a 	mov	r14,r13
 8008d40:	000f883a 	mov	r7,zero
 8008d44:	71000017 	ldw	r4,0(r14)
 8008d48:	40c00017 	ldw	r3,0(r8)
 8008d4c:	73800104 	addi	r14,r14,4
 8008d50:	217fffcc 	andi	r5,r4,65535
 8008d54:	2bcb383a 	mul	r5,r5,r15
 8008d58:	2008d43a 	srli	r4,r4,16
 8008d5c:	1c7fffcc 	andi	r17,r3,65535
 8008d60:	2c4b883a 	add	r5,r5,r17
 8008d64:	29cb883a 	add	r5,r5,r7
 8008d68:	23c9383a 	mul	r4,r4,r15
 8008d6c:	1806d43a 	srli	r3,r3,16
 8008d70:	280ed43a 	srli	r7,r5,16
 8008d74:	297fffcc 	andi	r5,r5,65535
 8008d78:	20c7883a 	add	r3,r4,r3
 8008d7c:	19c7883a 	add	r3,r3,r7
 8008d80:	1808943a 	slli	r4,r3,16
 8008d84:	4023883a 	mov	r17,r8
 8008d88:	180ed43a 	srli	r7,r3,16
 8008d8c:	214ab03a 	or	r5,r4,r5
 8008d90:	41400015 	stw	r5,0(r8)
 8008d94:	42000104 	addi	r8,r8,4
 8008d98:	727fea36 	bltu	r14,r9,8008d44 <__alt_data_end+0xff008d44>
 8008d9c:	89c00115 	stw	r7,4(r17)
 8008da0:	37c00017 	ldw	ra,0(r6)
 8008da4:	f83ed43a 	srli	ra,ra,16
 8008da8:	f8001f26 	beq	ra,zero,8008e28 <__multiply+0x1a0>
 8008dac:	58c00017 	ldw	r3,0(r11)
 8008db0:	681d883a 	mov	r14,r13
 8008db4:	581f883a 	mov	r15,r11
 8008db8:	1811883a 	mov	r8,r3
 8008dbc:	5825883a 	mov	r18,r11
 8008dc0:	000f883a 	mov	r7,zero
 8008dc4:	00000106 	br	8008dcc <__multiply+0x144>
 8008dc8:	8825883a 	mov	r18,r17
 8008dcc:	7140000b 	ldhu	r5,0(r14)
 8008dd0:	4010d43a 	srli	r8,r8,16
 8008dd4:	193fffcc 	andi	r4,r3,65535
 8008dd8:	2fcb383a 	mul	r5,r5,ra
 8008ddc:	7bc00104 	addi	r15,r15,4
 8008de0:	73800104 	addi	r14,r14,4
 8008de4:	2a0b883a 	add	r5,r5,r8
 8008de8:	29cb883a 	add	r5,r5,r7
 8008dec:	2806943a 	slli	r3,r5,16
 8008df0:	94400104 	addi	r17,r18,4
 8008df4:	280ad43a 	srli	r5,r5,16
 8008df8:	1908b03a 	or	r4,r3,r4
 8008dfc:	793fff15 	stw	r4,-4(r15)
 8008e00:	70ffff17 	ldw	r3,-4(r14)
 8008e04:	8a000017 	ldw	r8,0(r17)
 8008e08:	1806d43a 	srli	r3,r3,16
 8008e0c:	413fffcc 	andi	r4,r8,65535
 8008e10:	1fc7383a 	mul	r3,r3,ra
 8008e14:	1907883a 	add	r3,r3,r4
 8008e18:	1947883a 	add	r3,r3,r5
 8008e1c:	180ed43a 	srli	r7,r3,16
 8008e20:	727fe936 	bltu	r14,r9,8008dc8 <__alt_data_end+0xff008dc8>
 8008e24:	90c00115 	stw	r3,4(r18)
 8008e28:	31800104 	addi	r6,r6,4
 8008e2c:	5ac00104 	addi	r11,r11,4
 8008e30:	333fbe36 	bltu	r6,r12,8008d2c <__alt_data_end+0xff008d2c>
 8008e34:	0400090e 	bge	zero,r16,8008e5c <__multiply+0x1d4>
 8008e38:	50ffff17 	ldw	r3,-4(r10)
 8008e3c:	52bfff04 	addi	r10,r10,-4
 8008e40:	18000326 	beq	r3,zero,8008e50 <__multiply+0x1c8>
 8008e44:	00000506 	br	8008e5c <__multiply+0x1d4>
 8008e48:	50c00017 	ldw	r3,0(r10)
 8008e4c:	1800031e 	bne	r3,zero,8008e5c <__multiply+0x1d4>
 8008e50:	843fffc4 	addi	r16,r16,-1
 8008e54:	52bfff04 	addi	r10,r10,-4
 8008e58:	803ffb1e 	bne	r16,zero,8008e48 <__alt_data_end+0xff008e48>
 8008e5c:	14000415 	stw	r16,16(r2)
 8008e60:	dfc00517 	ldw	ra,20(sp)
 8008e64:	dd000417 	ldw	r20,16(sp)
 8008e68:	dcc00317 	ldw	r19,12(sp)
 8008e6c:	dc800217 	ldw	r18,8(sp)
 8008e70:	dc400117 	ldw	r17,4(sp)
 8008e74:	dc000017 	ldw	r16,0(sp)
 8008e78:	dec00604 	addi	sp,sp,24
 8008e7c:	f800283a 	ret

08008e80 <__pow5mult>:
 8008e80:	defffa04 	addi	sp,sp,-24
 8008e84:	dcc00315 	stw	r19,12(sp)
 8008e88:	dc000015 	stw	r16,0(sp)
 8008e8c:	dfc00515 	stw	ra,20(sp)
 8008e90:	dd000415 	stw	r20,16(sp)
 8008e94:	dc800215 	stw	r18,8(sp)
 8008e98:	dc400115 	stw	r17,4(sp)
 8008e9c:	308000cc 	andi	r2,r6,3
 8008ea0:	3021883a 	mov	r16,r6
 8008ea4:	2027883a 	mov	r19,r4
 8008ea8:	10002f1e 	bne	r2,zero,8008f68 <__pow5mult+0xe8>
 8008eac:	2825883a 	mov	r18,r5
 8008eb0:	8021d0ba 	srai	r16,r16,2
 8008eb4:	80001a26 	beq	r16,zero,8008f20 <__pow5mult+0xa0>
 8008eb8:	9c401217 	ldw	r17,72(r19)
 8008ebc:	8800061e 	bne	r17,zero,8008ed8 <__pow5mult+0x58>
 8008ec0:	00003406 	br	8008f94 <__pow5mult+0x114>
 8008ec4:	8021d07a 	srai	r16,r16,1
 8008ec8:	80001526 	beq	r16,zero,8008f20 <__pow5mult+0xa0>
 8008ecc:	88800017 	ldw	r2,0(r17)
 8008ed0:	10001c26 	beq	r2,zero,8008f44 <__pow5mult+0xc4>
 8008ed4:	1023883a 	mov	r17,r2
 8008ed8:	8080004c 	andi	r2,r16,1
 8008edc:	103ff926 	beq	r2,zero,8008ec4 <__alt_data_end+0xff008ec4>
 8008ee0:	880d883a 	mov	r6,r17
 8008ee4:	900b883a 	mov	r5,r18
 8008ee8:	9809883a 	mov	r4,r19
 8008eec:	8008c880 	call	8008c88 <__multiply>
 8008ef0:	90001b26 	beq	r18,zero,8008f60 <__pow5mult+0xe0>
 8008ef4:	91000117 	ldw	r4,4(r18)
 8008ef8:	98c01317 	ldw	r3,76(r19)
 8008efc:	8021d07a 	srai	r16,r16,1
 8008f00:	2109883a 	add	r4,r4,r4
 8008f04:	2109883a 	add	r4,r4,r4
 8008f08:	1907883a 	add	r3,r3,r4
 8008f0c:	19000017 	ldw	r4,0(r3)
 8008f10:	91000015 	stw	r4,0(r18)
 8008f14:	1c800015 	stw	r18,0(r3)
 8008f18:	1025883a 	mov	r18,r2
 8008f1c:	803feb1e 	bne	r16,zero,8008ecc <__alt_data_end+0xff008ecc>
 8008f20:	9005883a 	mov	r2,r18
 8008f24:	dfc00517 	ldw	ra,20(sp)
 8008f28:	dd000417 	ldw	r20,16(sp)
 8008f2c:	dcc00317 	ldw	r19,12(sp)
 8008f30:	dc800217 	ldw	r18,8(sp)
 8008f34:	dc400117 	ldw	r17,4(sp)
 8008f38:	dc000017 	ldw	r16,0(sp)
 8008f3c:	dec00604 	addi	sp,sp,24
 8008f40:	f800283a 	ret
 8008f44:	880d883a 	mov	r6,r17
 8008f48:	880b883a 	mov	r5,r17
 8008f4c:	9809883a 	mov	r4,r19
 8008f50:	8008c880 	call	8008c88 <__multiply>
 8008f54:	88800015 	stw	r2,0(r17)
 8008f58:	10000015 	stw	zero,0(r2)
 8008f5c:	003fdd06 	br	8008ed4 <__alt_data_end+0xff008ed4>
 8008f60:	1025883a 	mov	r18,r2
 8008f64:	003fd706 	br	8008ec4 <__alt_data_end+0xff008ec4>
 8008f68:	10bfffc4 	addi	r2,r2,-1
 8008f6c:	1085883a 	add	r2,r2,r2
 8008f70:	00c20074 	movhi	r3,2049
 8008f74:	18c79d04 	addi	r3,r3,7796
 8008f78:	1085883a 	add	r2,r2,r2
 8008f7c:	1885883a 	add	r2,r3,r2
 8008f80:	11800017 	ldw	r6,0(r2)
 8008f84:	000f883a 	mov	r7,zero
 8008f88:	80089100 	call	8008910 <__multadd>
 8008f8c:	1025883a 	mov	r18,r2
 8008f90:	003fc706 	br	8008eb0 <__alt_data_end+0xff008eb0>
 8008f94:	05000044 	movi	r20,1
 8008f98:	a00b883a 	mov	r5,r20
 8008f9c:	9809883a 	mov	r4,r19
 8008fa0:	80088400 	call	8008840 <_Balloc>
 8008fa4:	1023883a 	mov	r17,r2
 8008fa8:	00809c44 	movi	r2,625
 8008fac:	88800515 	stw	r2,20(r17)
 8008fb0:	8d000415 	stw	r20,16(r17)
 8008fb4:	9c401215 	stw	r17,72(r19)
 8008fb8:	88000015 	stw	zero,0(r17)
 8008fbc:	003fc606 	br	8008ed8 <__alt_data_end+0xff008ed8>

08008fc0 <__lshift>:
 8008fc0:	defff904 	addi	sp,sp,-28
 8008fc4:	dd400515 	stw	r21,20(sp)
 8008fc8:	dcc00315 	stw	r19,12(sp)
 8008fcc:	302bd17a 	srai	r21,r6,5
 8008fd0:	2cc00417 	ldw	r19,16(r5)
 8008fd4:	28800217 	ldw	r2,8(r5)
 8008fd8:	dd000415 	stw	r20,16(sp)
 8008fdc:	ace7883a 	add	r19,r21,r19
 8008fe0:	dc800215 	stw	r18,8(sp)
 8008fe4:	dc400115 	stw	r17,4(sp)
 8008fe8:	dc000015 	stw	r16,0(sp)
 8008fec:	dfc00615 	stw	ra,24(sp)
 8008ff0:	9c000044 	addi	r16,r19,1
 8008ff4:	2823883a 	mov	r17,r5
 8008ff8:	3029883a 	mov	r20,r6
 8008ffc:	2025883a 	mov	r18,r4
 8009000:	29400117 	ldw	r5,4(r5)
 8009004:	1400030e 	bge	r2,r16,8009014 <__lshift+0x54>
 8009008:	1085883a 	add	r2,r2,r2
 800900c:	29400044 	addi	r5,r5,1
 8009010:	143ffd16 	blt	r2,r16,8009008 <__alt_data_end+0xff009008>
 8009014:	9009883a 	mov	r4,r18
 8009018:	80088400 	call	8008840 <_Balloc>
 800901c:	10c00504 	addi	r3,r2,20
 8009020:	0540070e 	bge	zero,r21,8009040 <__lshift+0x80>
 8009024:	ad6b883a 	add	r21,r21,r21
 8009028:	ad6b883a 	add	r21,r21,r21
 800902c:	1809883a 	mov	r4,r3
 8009030:	1d47883a 	add	r3,r3,r21
 8009034:	20000015 	stw	zero,0(r4)
 8009038:	21000104 	addi	r4,r4,4
 800903c:	193ffd1e 	bne	r3,r4,8009034 <__alt_data_end+0xff009034>
 8009040:	8a000417 	ldw	r8,16(r17)
 8009044:	89000504 	addi	r4,r17,20
 8009048:	a18007cc 	andi	r6,r20,31
 800904c:	4211883a 	add	r8,r8,r8
 8009050:	4211883a 	add	r8,r8,r8
 8009054:	2211883a 	add	r8,r4,r8
 8009058:	30002326 	beq	r6,zero,80090e8 <__lshift+0x128>
 800905c:	02400804 	movi	r9,32
 8009060:	4993c83a 	sub	r9,r9,r6
 8009064:	000b883a 	mov	r5,zero
 8009068:	21c00017 	ldw	r7,0(r4)
 800906c:	1815883a 	mov	r10,r3
 8009070:	18c00104 	addi	r3,r3,4
 8009074:	398e983a 	sll	r7,r7,r6
 8009078:	21000104 	addi	r4,r4,4
 800907c:	394ab03a 	or	r5,r7,r5
 8009080:	197fff15 	stw	r5,-4(r3)
 8009084:	217fff17 	ldw	r5,-4(r4)
 8009088:	2a4ad83a 	srl	r5,r5,r9
 800908c:	223ff636 	bltu	r4,r8,8009068 <__alt_data_end+0xff009068>
 8009090:	51400115 	stw	r5,4(r10)
 8009094:	28001a1e 	bne	r5,zero,8009100 <__lshift+0x140>
 8009098:	843fffc4 	addi	r16,r16,-1
 800909c:	14000415 	stw	r16,16(r2)
 80090a0:	88000826 	beq	r17,zero,80090c4 <__lshift+0x104>
 80090a4:	89000117 	ldw	r4,4(r17)
 80090a8:	90c01317 	ldw	r3,76(r18)
 80090ac:	2109883a 	add	r4,r4,r4
 80090b0:	2109883a 	add	r4,r4,r4
 80090b4:	1907883a 	add	r3,r3,r4
 80090b8:	19000017 	ldw	r4,0(r3)
 80090bc:	89000015 	stw	r4,0(r17)
 80090c0:	1c400015 	stw	r17,0(r3)
 80090c4:	dfc00617 	ldw	ra,24(sp)
 80090c8:	dd400517 	ldw	r21,20(sp)
 80090cc:	dd000417 	ldw	r20,16(sp)
 80090d0:	dcc00317 	ldw	r19,12(sp)
 80090d4:	dc800217 	ldw	r18,8(sp)
 80090d8:	dc400117 	ldw	r17,4(sp)
 80090dc:	dc000017 	ldw	r16,0(sp)
 80090e0:	dec00704 	addi	sp,sp,28
 80090e4:	f800283a 	ret
 80090e8:	21400017 	ldw	r5,0(r4)
 80090ec:	18c00104 	addi	r3,r3,4
 80090f0:	21000104 	addi	r4,r4,4
 80090f4:	197fff15 	stw	r5,-4(r3)
 80090f8:	223ffb36 	bltu	r4,r8,80090e8 <__alt_data_end+0xff0090e8>
 80090fc:	003fe606 	br	8009098 <__alt_data_end+0xff009098>
 8009100:	9c000084 	addi	r16,r19,2
 8009104:	003fe406 	br	8009098 <__alt_data_end+0xff009098>

08009108 <__mcmp>:
 8009108:	20800417 	ldw	r2,16(r4)
 800910c:	28c00417 	ldw	r3,16(r5)
 8009110:	10c5c83a 	sub	r2,r2,r3
 8009114:	1000111e 	bne	r2,zero,800915c <__mcmp+0x54>
 8009118:	18c7883a 	add	r3,r3,r3
 800911c:	18c7883a 	add	r3,r3,r3
 8009120:	21000504 	addi	r4,r4,20
 8009124:	29400504 	addi	r5,r5,20
 8009128:	20c5883a 	add	r2,r4,r3
 800912c:	28cb883a 	add	r5,r5,r3
 8009130:	00000106 	br	8009138 <__mcmp+0x30>
 8009134:	20800a2e 	bgeu	r4,r2,8009160 <__mcmp+0x58>
 8009138:	10bfff04 	addi	r2,r2,-4
 800913c:	297fff04 	addi	r5,r5,-4
 8009140:	11800017 	ldw	r6,0(r2)
 8009144:	28c00017 	ldw	r3,0(r5)
 8009148:	30fffa26 	beq	r6,r3,8009134 <__alt_data_end+0xff009134>
 800914c:	30c00236 	bltu	r6,r3,8009158 <__mcmp+0x50>
 8009150:	00800044 	movi	r2,1
 8009154:	f800283a 	ret
 8009158:	00bfffc4 	movi	r2,-1
 800915c:	f800283a 	ret
 8009160:	0005883a 	mov	r2,zero
 8009164:	f800283a 	ret

08009168 <__mdiff>:
 8009168:	28c00417 	ldw	r3,16(r5)
 800916c:	30800417 	ldw	r2,16(r6)
 8009170:	defffa04 	addi	sp,sp,-24
 8009174:	dcc00315 	stw	r19,12(sp)
 8009178:	dc800215 	stw	r18,8(sp)
 800917c:	dfc00515 	stw	ra,20(sp)
 8009180:	dd000415 	stw	r20,16(sp)
 8009184:	dc400115 	stw	r17,4(sp)
 8009188:	dc000015 	stw	r16,0(sp)
 800918c:	1887c83a 	sub	r3,r3,r2
 8009190:	2825883a 	mov	r18,r5
 8009194:	3027883a 	mov	r19,r6
 8009198:	1800141e 	bne	r3,zero,80091ec <__mdiff+0x84>
 800919c:	1085883a 	add	r2,r2,r2
 80091a0:	1085883a 	add	r2,r2,r2
 80091a4:	2a000504 	addi	r8,r5,20
 80091a8:	34000504 	addi	r16,r6,20
 80091ac:	4087883a 	add	r3,r8,r2
 80091b0:	8085883a 	add	r2,r16,r2
 80091b4:	00000106 	br	80091bc <__mdiff+0x54>
 80091b8:	40c0592e 	bgeu	r8,r3,8009320 <__mdiff+0x1b8>
 80091bc:	18ffff04 	addi	r3,r3,-4
 80091c0:	10bfff04 	addi	r2,r2,-4
 80091c4:	19c00017 	ldw	r7,0(r3)
 80091c8:	11400017 	ldw	r5,0(r2)
 80091cc:	397ffa26 	beq	r7,r5,80091b8 <__alt_data_end+0xff0091b8>
 80091d0:	3940592e 	bgeu	r7,r5,8009338 <__mdiff+0x1d0>
 80091d4:	9005883a 	mov	r2,r18
 80091d8:	4023883a 	mov	r17,r8
 80091dc:	9825883a 	mov	r18,r19
 80091e0:	05000044 	movi	r20,1
 80091e4:	1027883a 	mov	r19,r2
 80091e8:	00000406 	br	80091fc <__mdiff+0x94>
 80091ec:	18005616 	blt	r3,zero,8009348 <__mdiff+0x1e0>
 80091f0:	34400504 	addi	r17,r6,20
 80091f4:	2c000504 	addi	r16,r5,20
 80091f8:	0029883a 	mov	r20,zero
 80091fc:	91400117 	ldw	r5,4(r18)
 8009200:	80088400 	call	8008840 <_Balloc>
 8009204:	92400417 	ldw	r9,16(r18)
 8009208:	9b000417 	ldw	r12,16(r19)
 800920c:	12c00504 	addi	r11,r2,20
 8009210:	4a51883a 	add	r8,r9,r9
 8009214:	6319883a 	add	r12,r12,r12
 8009218:	4211883a 	add	r8,r8,r8
 800921c:	6319883a 	add	r12,r12,r12
 8009220:	15000315 	stw	r20,12(r2)
 8009224:	8211883a 	add	r8,r16,r8
 8009228:	8b19883a 	add	r12,r17,r12
 800922c:	0007883a 	mov	r3,zero
 8009230:	81400017 	ldw	r5,0(r16)
 8009234:	89c00017 	ldw	r7,0(r17)
 8009238:	59800104 	addi	r6,r11,4
 800923c:	293fffcc 	andi	r4,r5,65535
 8009240:	20c7883a 	add	r3,r4,r3
 8009244:	393fffcc 	andi	r4,r7,65535
 8009248:	1909c83a 	sub	r4,r3,r4
 800924c:	280ad43a 	srli	r5,r5,16
 8009250:	380ed43a 	srli	r7,r7,16
 8009254:	2007d43a 	srai	r3,r4,16
 8009258:	213fffcc 	andi	r4,r4,65535
 800925c:	29cbc83a 	sub	r5,r5,r7
 8009260:	28c7883a 	add	r3,r5,r3
 8009264:	180a943a 	slli	r5,r3,16
 8009268:	8c400104 	addi	r17,r17,4
 800926c:	84000104 	addi	r16,r16,4
 8009270:	2908b03a 	or	r4,r5,r4
 8009274:	59000015 	stw	r4,0(r11)
 8009278:	1807d43a 	srai	r3,r3,16
 800927c:	3015883a 	mov	r10,r6
 8009280:	3017883a 	mov	r11,r6
 8009284:	8b3fea36 	bltu	r17,r12,8009230 <__alt_data_end+0xff009230>
 8009288:	8200162e 	bgeu	r16,r8,80092e4 <__mdiff+0x17c>
 800928c:	8017883a 	mov	r11,r16
 8009290:	59400017 	ldw	r5,0(r11)
 8009294:	31800104 	addi	r6,r6,4
 8009298:	5ac00104 	addi	r11,r11,4
 800929c:	293fffcc 	andi	r4,r5,65535
 80092a0:	20c7883a 	add	r3,r4,r3
 80092a4:	280ed43a 	srli	r7,r5,16
 80092a8:	180bd43a 	srai	r5,r3,16
 80092ac:	193fffcc 	andi	r4,r3,65535
 80092b0:	3947883a 	add	r3,r7,r5
 80092b4:	180a943a 	slli	r5,r3,16
 80092b8:	1807d43a 	srai	r3,r3,16
 80092bc:	2908b03a 	or	r4,r5,r4
 80092c0:	313fff15 	stw	r4,-4(r6)
 80092c4:	5a3ff236 	bltu	r11,r8,8009290 <__alt_data_end+0xff009290>
 80092c8:	0406303a 	nor	r3,zero,r16
 80092cc:	1a07883a 	add	r3,r3,r8
 80092d0:	1806d0ba 	srli	r3,r3,2
 80092d4:	18c00044 	addi	r3,r3,1
 80092d8:	18c7883a 	add	r3,r3,r3
 80092dc:	18c7883a 	add	r3,r3,r3
 80092e0:	50d5883a 	add	r10,r10,r3
 80092e4:	50ffff04 	addi	r3,r10,-4
 80092e8:	2000041e 	bne	r4,zero,80092fc <__mdiff+0x194>
 80092ec:	18ffff04 	addi	r3,r3,-4
 80092f0:	19000017 	ldw	r4,0(r3)
 80092f4:	4a7fffc4 	addi	r9,r9,-1
 80092f8:	203ffc26 	beq	r4,zero,80092ec <__alt_data_end+0xff0092ec>
 80092fc:	12400415 	stw	r9,16(r2)
 8009300:	dfc00517 	ldw	ra,20(sp)
 8009304:	dd000417 	ldw	r20,16(sp)
 8009308:	dcc00317 	ldw	r19,12(sp)
 800930c:	dc800217 	ldw	r18,8(sp)
 8009310:	dc400117 	ldw	r17,4(sp)
 8009314:	dc000017 	ldw	r16,0(sp)
 8009318:	dec00604 	addi	sp,sp,24
 800931c:	f800283a 	ret
 8009320:	000b883a 	mov	r5,zero
 8009324:	80088400 	call	8008840 <_Balloc>
 8009328:	00c00044 	movi	r3,1
 800932c:	10c00415 	stw	r3,16(r2)
 8009330:	10000515 	stw	zero,20(r2)
 8009334:	003ff206 	br	8009300 <__alt_data_end+0xff009300>
 8009338:	8023883a 	mov	r17,r16
 800933c:	0029883a 	mov	r20,zero
 8009340:	4021883a 	mov	r16,r8
 8009344:	003fad06 	br	80091fc <__alt_data_end+0xff0091fc>
 8009348:	9005883a 	mov	r2,r18
 800934c:	94400504 	addi	r17,r18,20
 8009350:	9c000504 	addi	r16,r19,20
 8009354:	9825883a 	mov	r18,r19
 8009358:	05000044 	movi	r20,1
 800935c:	1027883a 	mov	r19,r2
 8009360:	003fa606 	br	80091fc <__alt_data_end+0xff0091fc>

08009364 <__ulp>:
 8009364:	295ffc2c 	andhi	r5,r5,32752
 8009368:	00bf3034 	movhi	r2,64704
 800936c:	2887883a 	add	r3,r5,r2
 8009370:	00c0020e 	bge	zero,r3,800937c <__ulp+0x18>
 8009374:	0005883a 	mov	r2,zero
 8009378:	f800283a 	ret
 800937c:	00c7c83a 	sub	r3,zero,r3
 8009380:	1807d53a 	srai	r3,r3,20
 8009384:	008004c4 	movi	r2,19
 8009388:	10c00b0e 	bge	r2,r3,80093b8 <__ulp+0x54>
 800938c:	18bffb04 	addi	r2,r3,-20
 8009390:	01000784 	movi	r4,30
 8009394:	0007883a 	mov	r3,zero
 8009398:	20800516 	blt	r4,r2,80093b0 <__ulp+0x4c>
 800939c:	010007c4 	movi	r4,31
 80093a0:	2089c83a 	sub	r4,r4,r2
 80093a4:	00800044 	movi	r2,1
 80093a8:	1104983a 	sll	r2,r2,r4
 80093ac:	f800283a 	ret
 80093b0:	00800044 	movi	r2,1
 80093b4:	f800283a 	ret
 80093b8:	01400234 	movhi	r5,8
 80093bc:	28c7d83a 	sra	r3,r5,r3
 80093c0:	0005883a 	mov	r2,zero
 80093c4:	f800283a 	ret

080093c8 <__b2d>:
 80093c8:	defffa04 	addi	sp,sp,-24
 80093cc:	dc000015 	stw	r16,0(sp)
 80093d0:	24000417 	ldw	r16,16(r4)
 80093d4:	dc400115 	stw	r17,4(sp)
 80093d8:	24400504 	addi	r17,r4,20
 80093dc:	8421883a 	add	r16,r16,r16
 80093e0:	8421883a 	add	r16,r16,r16
 80093e4:	8c21883a 	add	r16,r17,r16
 80093e8:	dc800215 	stw	r18,8(sp)
 80093ec:	84bfff17 	ldw	r18,-4(r16)
 80093f0:	dd000415 	stw	r20,16(sp)
 80093f4:	dcc00315 	stw	r19,12(sp)
 80093f8:	9009883a 	mov	r4,r18
 80093fc:	2829883a 	mov	r20,r5
 8009400:	dfc00515 	stw	ra,20(sp)
 8009404:	8008b340 	call	8008b34 <__hi0bits>
 8009408:	00c00804 	movi	r3,32
 800940c:	1889c83a 	sub	r4,r3,r2
 8009410:	a1000015 	stw	r4,0(r20)
 8009414:	01000284 	movi	r4,10
 8009418:	84ffff04 	addi	r19,r16,-4
 800941c:	20801216 	blt	r4,r2,8009468 <__b2d+0xa0>
 8009420:	018002c4 	movi	r6,11
 8009424:	308dc83a 	sub	r6,r6,r2
 8009428:	9186d83a 	srl	r3,r18,r6
 800942c:	18cffc34 	orhi	r3,r3,16368
 8009430:	8cc0212e 	bgeu	r17,r19,80094b8 <__b2d+0xf0>
 8009434:	813ffe17 	ldw	r4,-8(r16)
 8009438:	218cd83a 	srl	r6,r4,r6
 800943c:	10800544 	addi	r2,r2,21
 8009440:	9084983a 	sll	r2,r18,r2
 8009444:	1184b03a 	or	r2,r2,r6
 8009448:	dfc00517 	ldw	ra,20(sp)
 800944c:	dd000417 	ldw	r20,16(sp)
 8009450:	dcc00317 	ldw	r19,12(sp)
 8009454:	dc800217 	ldw	r18,8(sp)
 8009458:	dc400117 	ldw	r17,4(sp)
 800945c:	dc000017 	ldw	r16,0(sp)
 8009460:	dec00604 	addi	sp,sp,24
 8009464:	f800283a 	ret
 8009468:	8cc00f2e 	bgeu	r17,r19,80094a8 <__b2d+0xe0>
 800946c:	117ffd44 	addi	r5,r2,-11
 8009470:	80bffe17 	ldw	r2,-8(r16)
 8009474:	28000e26 	beq	r5,zero,80094b0 <__b2d+0xe8>
 8009478:	1949c83a 	sub	r4,r3,r5
 800947c:	9164983a 	sll	r18,r18,r5
 8009480:	1106d83a 	srl	r3,r2,r4
 8009484:	81bffe04 	addi	r6,r16,-8
 8009488:	948ffc34 	orhi	r18,r18,16368
 800948c:	90c6b03a 	or	r3,r18,r3
 8009490:	89800e2e 	bgeu	r17,r6,80094cc <__b2d+0x104>
 8009494:	81bffd17 	ldw	r6,-12(r16)
 8009498:	1144983a 	sll	r2,r2,r5
 800949c:	310ad83a 	srl	r5,r6,r4
 80094a0:	2884b03a 	or	r2,r5,r2
 80094a4:	003fe806 	br	8009448 <__alt_data_end+0xff009448>
 80094a8:	10bffd44 	addi	r2,r2,-11
 80094ac:	1000041e 	bne	r2,zero,80094c0 <__b2d+0xf8>
 80094b0:	90cffc34 	orhi	r3,r18,16368
 80094b4:	003fe406 	br	8009448 <__alt_data_end+0xff009448>
 80094b8:	000d883a 	mov	r6,zero
 80094bc:	003fdf06 	br	800943c <__alt_data_end+0xff00943c>
 80094c0:	90a4983a 	sll	r18,r18,r2
 80094c4:	0005883a 	mov	r2,zero
 80094c8:	003ff906 	br	80094b0 <__alt_data_end+0xff0094b0>
 80094cc:	1144983a 	sll	r2,r2,r5
 80094d0:	003fdd06 	br	8009448 <__alt_data_end+0xff009448>

080094d4 <__d2b>:
 80094d4:	defff804 	addi	sp,sp,-32
 80094d8:	dc000215 	stw	r16,8(sp)
 80094dc:	3021883a 	mov	r16,r6
 80094e0:	dc400315 	stw	r17,12(sp)
 80094e4:	8022907a 	slli	r17,r16,1
 80094e8:	dd000615 	stw	r20,24(sp)
 80094ec:	2829883a 	mov	r20,r5
 80094f0:	01400044 	movi	r5,1
 80094f4:	dcc00515 	stw	r19,20(sp)
 80094f8:	dc800415 	stw	r18,16(sp)
 80094fc:	dfc00715 	stw	ra,28(sp)
 8009500:	3825883a 	mov	r18,r7
 8009504:	8822d57a 	srli	r17,r17,21
 8009508:	80088400 	call	8008840 <_Balloc>
 800950c:	1027883a 	mov	r19,r2
 8009510:	00800434 	movhi	r2,16
 8009514:	10bfffc4 	addi	r2,r2,-1
 8009518:	808c703a 	and	r6,r16,r2
 800951c:	88000126 	beq	r17,zero,8009524 <__d2b+0x50>
 8009520:	31800434 	orhi	r6,r6,16
 8009524:	d9800015 	stw	r6,0(sp)
 8009528:	a0002426 	beq	r20,zero,80095bc <__d2b+0xe8>
 800952c:	d9000104 	addi	r4,sp,4
 8009530:	dd000115 	stw	r20,4(sp)
 8009534:	8008b9c0 	call	8008b9c <__lo0bits>
 8009538:	d8c00017 	ldw	r3,0(sp)
 800953c:	10002f1e 	bne	r2,zero,80095fc <__d2b+0x128>
 8009540:	d9000117 	ldw	r4,4(sp)
 8009544:	99000515 	stw	r4,20(r19)
 8009548:	1821003a 	cmpeq	r16,r3,zero
 800954c:	01000084 	movi	r4,2
 8009550:	2421c83a 	sub	r16,r4,r16
 8009554:	98c00615 	stw	r3,24(r19)
 8009558:	9c000415 	stw	r16,16(r19)
 800955c:	88001f1e 	bne	r17,zero,80095dc <__d2b+0x108>
 8009560:	10bef384 	addi	r2,r2,-1074
 8009564:	90800015 	stw	r2,0(r18)
 8009568:	00900034 	movhi	r2,16384
 800956c:	10bfffc4 	addi	r2,r2,-1
 8009570:	8085883a 	add	r2,r16,r2
 8009574:	1085883a 	add	r2,r2,r2
 8009578:	1085883a 	add	r2,r2,r2
 800957c:	9885883a 	add	r2,r19,r2
 8009580:	11000517 	ldw	r4,20(r2)
 8009584:	8020917a 	slli	r16,r16,5
 8009588:	8008b340 	call	8008b34 <__hi0bits>
 800958c:	d8c00817 	ldw	r3,32(sp)
 8009590:	8085c83a 	sub	r2,r16,r2
 8009594:	18800015 	stw	r2,0(r3)
 8009598:	9805883a 	mov	r2,r19
 800959c:	dfc00717 	ldw	ra,28(sp)
 80095a0:	dd000617 	ldw	r20,24(sp)
 80095a4:	dcc00517 	ldw	r19,20(sp)
 80095a8:	dc800417 	ldw	r18,16(sp)
 80095ac:	dc400317 	ldw	r17,12(sp)
 80095b0:	dc000217 	ldw	r16,8(sp)
 80095b4:	dec00804 	addi	sp,sp,32
 80095b8:	f800283a 	ret
 80095bc:	d809883a 	mov	r4,sp
 80095c0:	8008b9c0 	call	8008b9c <__lo0bits>
 80095c4:	d8c00017 	ldw	r3,0(sp)
 80095c8:	04000044 	movi	r16,1
 80095cc:	9c000415 	stw	r16,16(r19)
 80095d0:	98c00515 	stw	r3,20(r19)
 80095d4:	10800804 	addi	r2,r2,32
 80095d8:	883fe126 	beq	r17,zero,8009560 <__alt_data_end+0xff009560>
 80095dc:	00c00d44 	movi	r3,53
 80095e0:	8c7ef344 	addi	r17,r17,-1075
 80095e4:	88a3883a 	add	r17,r17,r2
 80095e8:	1885c83a 	sub	r2,r3,r2
 80095ec:	d8c00817 	ldw	r3,32(sp)
 80095f0:	94400015 	stw	r17,0(r18)
 80095f4:	18800015 	stw	r2,0(r3)
 80095f8:	003fe706 	br	8009598 <__alt_data_end+0xff009598>
 80095fc:	01000804 	movi	r4,32
 8009600:	2089c83a 	sub	r4,r4,r2
 8009604:	1908983a 	sll	r4,r3,r4
 8009608:	d9400117 	ldw	r5,4(sp)
 800960c:	1886d83a 	srl	r3,r3,r2
 8009610:	2148b03a 	or	r4,r4,r5
 8009614:	99000515 	stw	r4,20(r19)
 8009618:	d8c00015 	stw	r3,0(sp)
 800961c:	003fca06 	br	8009548 <__alt_data_end+0xff009548>

08009620 <__ratio>:
 8009620:	defff904 	addi	sp,sp,-28
 8009624:	dc400315 	stw	r17,12(sp)
 8009628:	2823883a 	mov	r17,r5
 800962c:	d9400104 	addi	r5,sp,4
 8009630:	dfc00615 	stw	ra,24(sp)
 8009634:	dcc00515 	stw	r19,20(sp)
 8009638:	dc800415 	stw	r18,16(sp)
 800963c:	2027883a 	mov	r19,r4
 8009640:	dc000215 	stw	r16,8(sp)
 8009644:	80093c80 	call	80093c8 <__b2d>
 8009648:	d80b883a 	mov	r5,sp
 800964c:	8809883a 	mov	r4,r17
 8009650:	1025883a 	mov	r18,r2
 8009654:	1821883a 	mov	r16,r3
 8009658:	80093c80 	call	80093c8 <__b2d>
 800965c:	8a000417 	ldw	r8,16(r17)
 8009660:	99000417 	ldw	r4,16(r19)
 8009664:	d9400117 	ldw	r5,4(sp)
 8009668:	2209c83a 	sub	r4,r4,r8
 800966c:	2010917a 	slli	r8,r4,5
 8009670:	d9000017 	ldw	r4,0(sp)
 8009674:	2909c83a 	sub	r4,r5,r4
 8009678:	4109883a 	add	r4,r8,r4
 800967c:	01000e0e 	bge	zero,r4,80096b8 <__ratio+0x98>
 8009680:	2008953a 	slli	r4,r4,20
 8009684:	2421883a 	add	r16,r4,r16
 8009688:	100d883a 	mov	r6,r2
 800968c:	180f883a 	mov	r7,r3
 8009690:	9009883a 	mov	r4,r18
 8009694:	800b883a 	mov	r5,r16
 8009698:	800db700 	call	800db70 <__divdf3>
 800969c:	dfc00617 	ldw	ra,24(sp)
 80096a0:	dcc00517 	ldw	r19,20(sp)
 80096a4:	dc800417 	ldw	r18,16(sp)
 80096a8:	dc400317 	ldw	r17,12(sp)
 80096ac:	dc000217 	ldw	r16,8(sp)
 80096b0:	dec00704 	addi	sp,sp,28
 80096b4:	f800283a 	ret
 80096b8:	2008953a 	slli	r4,r4,20
 80096bc:	1907c83a 	sub	r3,r3,r4
 80096c0:	003ff106 	br	8009688 <__alt_data_end+0xff009688>

080096c4 <_mprec_log10>:
 80096c4:	defffe04 	addi	sp,sp,-8
 80096c8:	dc000015 	stw	r16,0(sp)
 80096cc:	dfc00115 	stw	ra,4(sp)
 80096d0:	008005c4 	movi	r2,23
 80096d4:	2021883a 	mov	r16,r4
 80096d8:	11000d0e 	bge	r2,r4,8009710 <_mprec_log10+0x4c>
 80096dc:	0005883a 	mov	r2,zero
 80096e0:	00cffc34 	movhi	r3,16368
 80096e4:	843fffc4 	addi	r16,r16,-1
 80096e8:	000d883a 	mov	r6,zero
 80096ec:	01d00934 	movhi	r7,16420
 80096f0:	1009883a 	mov	r4,r2
 80096f4:	180b883a 	mov	r5,r3
 80096f8:	80027a40 	call	80027a4 <__muldf3>
 80096fc:	803ff91e 	bne	r16,zero,80096e4 <__alt_data_end+0xff0096e4>
 8009700:	dfc00117 	ldw	ra,4(sp)
 8009704:	dc000017 	ldw	r16,0(sp)
 8009708:	dec00204 	addi	sp,sp,8
 800970c:	f800283a 	ret
 8009710:	202090fa 	slli	r16,r4,3
 8009714:	00820074 	movhi	r2,2049
 8009718:	1087b404 	addi	r2,r2,7888
 800971c:	1421883a 	add	r16,r2,r16
 8009720:	80800017 	ldw	r2,0(r16)
 8009724:	80c00117 	ldw	r3,4(r16)
 8009728:	dfc00117 	ldw	ra,4(sp)
 800972c:	dc000017 	ldw	r16,0(sp)
 8009730:	dec00204 	addi	sp,sp,8
 8009734:	f800283a 	ret

08009738 <__copybits>:
 8009738:	297fffc4 	addi	r5,r5,-1
 800973c:	280fd17a 	srai	r7,r5,5
 8009740:	30c00417 	ldw	r3,16(r6)
 8009744:	30800504 	addi	r2,r6,20
 8009748:	39c00044 	addi	r7,r7,1
 800974c:	18c7883a 	add	r3,r3,r3
 8009750:	39cf883a 	add	r7,r7,r7
 8009754:	18c7883a 	add	r3,r3,r3
 8009758:	39cf883a 	add	r7,r7,r7
 800975c:	10c7883a 	add	r3,r2,r3
 8009760:	21cf883a 	add	r7,r4,r7
 8009764:	10c00d2e 	bgeu	r2,r3,800979c <__copybits+0x64>
 8009768:	200b883a 	mov	r5,r4
 800976c:	12000017 	ldw	r8,0(r2)
 8009770:	29400104 	addi	r5,r5,4
 8009774:	10800104 	addi	r2,r2,4
 8009778:	2a3fff15 	stw	r8,-4(r5)
 800977c:	10fffb36 	bltu	r2,r3,800976c <__alt_data_end+0xff00976c>
 8009780:	1985c83a 	sub	r2,r3,r6
 8009784:	10bffac4 	addi	r2,r2,-21
 8009788:	1004d0ba 	srli	r2,r2,2
 800978c:	10800044 	addi	r2,r2,1
 8009790:	1085883a 	add	r2,r2,r2
 8009794:	1085883a 	add	r2,r2,r2
 8009798:	2089883a 	add	r4,r4,r2
 800979c:	21c0032e 	bgeu	r4,r7,80097ac <__copybits+0x74>
 80097a0:	20000015 	stw	zero,0(r4)
 80097a4:	21000104 	addi	r4,r4,4
 80097a8:	21fffd36 	bltu	r4,r7,80097a0 <__alt_data_end+0xff0097a0>
 80097ac:	f800283a 	ret

080097b0 <__any_on>:
 80097b0:	20c00417 	ldw	r3,16(r4)
 80097b4:	2805d17a 	srai	r2,r5,5
 80097b8:	21000504 	addi	r4,r4,20
 80097bc:	18800d0e 	bge	r3,r2,80097f4 <__any_on+0x44>
 80097c0:	18c7883a 	add	r3,r3,r3
 80097c4:	18c7883a 	add	r3,r3,r3
 80097c8:	20c7883a 	add	r3,r4,r3
 80097cc:	20c0192e 	bgeu	r4,r3,8009834 <__any_on+0x84>
 80097d0:	18bfff17 	ldw	r2,-4(r3)
 80097d4:	18ffff04 	addi	r3,r3,-4
 80097d8:	1000041e 	bne	r2,zero,80097ec <__any_on+0x3c>
 80097dc:	20c0142e 	bgeu	r4,r3,8009830 <__any_on+0x80>
 80097e0:	18ffff04 	addi	r3,r3,-4
 80097e4:	19400017 	ldw	r5,0(r3)
 80097e8:	283ffc26 	beq	r5,zero,80097dc <__alt_data_end+0xff0097dc>
 80097ec:	00800044 	movi	r2,1
 80097f0:	f800283a 	ret
 80097f4:	10c00a0e 	bge	r2,r3,8009820 <__any_on+0x70>
 80097f8:	1085883a 	add	r2,r2,r2
 80097fc:	1085883a 	add	r2,r2,r2
 8009800:	294007cc 	andi	r5,r5,31
 8009804:	2087883a 	add	r3,r4,r2
 8009808:	283ff026 	beq	r5,zero,80097cc <__alt_data_end+0xff0097cc>
 800980c:	19800017 	ldw	r6,0(r3)
 8009810:	3144d83a 	srl	r2,r6,r5
 8009814:	114a983a 	sll	r5,r2,r5
 8009818:	317ff41e 	bne	r6,r5,80097ec <__alt_data_end+0xff0097ec>
 800981c:	003feb06 	br	80097cc <__alt_data_end+0xff0097cc>
 8009820:	1085883a 	add	r2,r2,r2
 8009824:	1085883a 	add	r2,r2,r2
 8009828:	2087883a 	add	r3,r4,r2
 800982c:	003fe706 	br	80097cc <__alt_data_end+0xff0097cc>
 8009830:	f800283a 	ret
 8009834:	0005883a 	mov	r2,zero
 8009838:	f800283a 	ret

0800983c <_putc_r>:
 800983c:	defffc04 	addi	sp,sp,-16
 8009840:	dc000215 	stw	r16,8(sp)
 8009844:	dfc00315 	stw	ra,12(sp)
 8009848:	2021883a 	mov	r16,r4
 800984c:	20000226 	beq	r4,zero,8009858 <_putc_r+0x1c>
 8009850:	20800e17 	ldw	r2,56(r4)
 8009854:	10001b26 	beq	r2,zero,80098c4 <_putc_r+0x88>
 8009858:	30800217 	ldw	r2,8(r6)
 800985c:	10bfffc4 	addi	r2,r2,-1
 8009860:	30800215 	stw	r2,8(r6)
 8009864:	10000a16 	blt	r2,zero,8009890 <_putc_r+0x54>
 8009868:	30800017 	ldw	r2,0(r6)
 800986c:	11400005 	stb	r5,0(r2)
 8009870:	30800017 	ldw	r2,0(r6)
 8009874:	10c00044 	addi	r3,r2,1
 8009878:	30c00015 	stw	r3,0(r6)
 800987c:	10800003 	ldbu	r2,0(r2)
 8009880:	dfc00317 	ldw	ra,12(sp)
 8009884:	dc000217 	ldw	r16,8(sp)
 8009888:	dec00404 	addi	sp,sp,16
 800988c:	f800283a 	ret
 8009890:	30c00617 	ldw	r3,24(r6)
 8009894:	10c00616 	blt	r2,r3,80098b0 <_putc_r+0x74>
 8009898:	30800017 	ldw	r2,0(r6)
 800989c:	00c00284 	movi	r3,10
 80098a0:	11400005 	stb	r5,0(r2)
 80098a4:	30800017 	ldw	r2,0(r6)
 80098a8:	11400003 	ldbu	r5,0(r2)
 80098ac:	28fff11e 	bne	r5,r3,8009874 <__alt_data_end+0xff009874>
 80098b0:	8009883a 	mov	r4,r16
 80098b4:	dfc00317 	ldw	ra,12(sp)
 80098b8:	dc000217 	ldw	r16,8(sp)
 80098bc:	dec00404 	addi	sp,sp,16
 80098c0:	800b3641 	jmpi	800b364 <__swbuf_r>
 80098c4:	d9400015 	stw	r5,0(sp)
 80098c8:	d9800115 	stw	r6,4(sp)
 80098cc:	800743c0 	call	800743c <__sinit>
 80098d0:	d9800117 	ldw	r6,4(sp)
 80098d4:	d9400017 	ldw	r5,0(sp)
 80098d8:	003fdf06 	br	8009858 <__alt_data_end+0xff009858>

080098dc <putc>:
 80098dc:	00820074 	movhi	r2,2049
 80098e0:	defffc04 	addi	sp,sp,-16
 80098e4:	108eaa04 	addi	r2,r2,15016
 80098e8:	dc000115 	stw	r16,4(sp)
 80098ec:	14000017 	ldw	r16,0(r2)
 80098f0:	dc400215 	stw	r17,8(sp)
 80098f4:	dfc00315 	stw	ra,12(sp)
 80098f8:	2023883a 	mov	r17,r4
 80098fc:	80000226 	beq	r16,zero,8009908 <putc+0x2c>
 8009900:	80800e17 	ldw	r2,56(r16)
 8009904:	10001a26 	beq	r2,zero,8009970 <putc+0x94>
 8009908:	28800217 	ldw	r2,8(r5)
 800990c:	10bfffc4 	addi	r2,r2,-1
 8009910:	28800215 	stw	r2,8(r5)
 8009914:	10000b16 	blt	r2,zero,8009944 <putc+0x68>
 8009918:	28800017 	ldw	r2,0(r5)
 800991c:	14400005 	stb	r17,0(r2)
 8009920:	28800017 	ldw	r2,0(r5)
 8009924:	10c00044 	addi	r3,r2,1
 8009928:	28c00015 	stw	r3,0(r5)
 800992c:	10800003 	ldbu	r2,0(r2)
 8009930:	dfc00317 	ldw	ra,12(sp)
 8009934:	dc400217 	ldw	r17,8(sp)
 8009938:	dc000117 	ldw	r16,4(sp)
 800993c:	dec00404 	addi	sp,sp,16
 8009940:	f800283a 	ret
 8009944:	28c00617 	ldw	r3,24(r5)
 8009948:	10c00e16 	blt	r2,r3,8009984 <putc+0xa8>
 800994c:	28800017 	ldw	r2,0(r5)
 8009950:	01000284 	movi	r4,10
 8009954:	14400005 	stb	r17,0(r2)
 8009958:	28800017 	ldw	r2,0(r5)
 800995c:	10c00003 	ldbu	r3,0(r2)
 8009960:	193ff01e 	bne	r3,r4,8009924 <__alt_data_end+0xff009924>
 8009964:	280d883a 	mov	r6,r5
 8009968:	180b883a 	mov	r5,r3
 800996c:	00000706 	br	800998c <putc+0xb0>
 8009970:	8009883a 	mov	r4,r16
 8009974:	d9400015 	stw	r5,0(sp)
 8009978:	800743c0 	call	800743c <__sinit>
 800997c:	d9400017 	ldw	r5,0(sp)
 8009980:	003fe106 	br	8009908 <__alt_data_end+0xff009908>
 8009984:	280d883a 	mov	r6,r5
 8009988:	880b883a 	mov	r5,r17
 800998c:	8009883a 	mov	r4,r16
 8009990:	dfc00317 	ldw	ra,12(sp)
 8009994:	dc400217 	ldw	r17,8(sp)
 8009998:	dc000117 	ldw	r16,4(sp)
 800999c:	dec00404 	addi	sp,sp,16
 80099a0:	800b3641 	jmpi	800b364 <__swbuf_r>

080099a4 <__fpclassifyd>:
 80099a4:	00a00034 	movhi	r2,32768
 80099a8:	10bfffc4 	addi	r2,r2,-1
 80099ac:	2884703a 	and	r2,r5,r2
 80099b0:	10000726 	beq	r2,zero,80099d0 <__fpclassifyd+0x2c>
 80099b4:	00fffc34 	movhi	r3,65520
 80099b8:	019ff834 	movhi	r6,32736
 80099bc:	28c7883a 	add	r3,r5,r3
 80099c0:	31bfffc4 	addi	r6,r6,-1
 80099c4:	30c00536 	bltu	r6,r3,80099dc <__fpclassifyd+0x38>
 80099c8:	00800104 	movi	r2,4
 80099cc:	f800283a 	ret
 80099d0:	2000021e 	bne	r4,zero,80099dc <__fpclassifyd+0x38>
 80099d4:	00800084 	movi	r2,2
 80099d8:	f800283a 	ret
 80099dc:	00dffc34 	movhi	r3,32752
 80099e0:	019ff834 	movhi	r6,32736
 80099e4:	28cb883a 	add	r5,r5,r3
 80099e8:	31bfffc4 	addi	r6,r6,-1
 80099ec:	317ff62e 	bgeu	r6,r5,80099c8 <__alt_data_end+0xff0099c8>
 80099f0:	01400434 	movhi	r5,16
 80099f4:	297fffc4 	addi	r5,r5,-1
 80099f8:	28800236 	bltu	r5,r2,8009a04 <__fpclassifyd+0x60>
 80099fc:	008000c4 	movi	r2,3
 8009a00:	f800283a 	ret
 8009a04:	10c00226 	beq	r2,r3,8009a10 <__fpclassifyd+0x6c>
 8009a08:	0005883a 	mov	r2,zero
 8009a0c:	f800283a 	ret
 8009a10:	2005003a 	cmpeq	r2,r4,zero
 8009a14:	f800283a 	ret

08009a18 <_sbrk_r>:
 8009a18:	defffd04 	addi	sp,sp,-12
 8009a1c:	dc000015 	stw	r16,0(sp)
 8009a20:	04020074 	movhi	r16,2049
 8009a24:	dc400115 	stw	r17,4(sp)
 8009a28:	84158d04 	addi	r16,r16,22068
 8009a2c:	2023883a 	mov	r17,r4
 8009a30:	2809883a 	mov	r4,r5
 8009a34:	dfc00215 	stw	ra,8(sp)
 8009a38:	80000015 	stw	zero,0(r16)
 8009a3c:	800fc1c0 	call	800fc1c <sbrk>
 8009a40:	00ffffc4 	movi	r3,-1
 8009a44:	10c00526 	beq	r2,r3,8009a5c <_sbrk_r+0x44>
 8009a48:	dfc00217 	ldw	ra,8(sp)
 8009a4c:	dc400117 	ldw	r17,4(sp)
 8009a50:	dc000017 	ldw	r16,0(sp)
 8009a54:	dec00304 	addi	sp,sp,12
 8009a58:	f800283a 	ret
 8009a5c:	80c00017 	ldw	r3,0(r16)
 8009a60:	183ff926 	beq	r3,zero,8009a48 <__alt_data_end+0xff009a48>
 8009a64:	88c00015 	stw	r3,0(r17)
 8009a68:	003ff706 	br	8009a48 <__alt_data_end+0xff009a48>

08009a6c <__sread>:
 8009a6c:	defffe04 	addi	sp,sp,-8
 8009a70:	dc000015 	stw	r16,0(sp)
 8009a74:	2821883a 	mov	r16,r5
 8009a78:	2940038f 	ldh	r5,14(r5)
 8009a7c:	dfc00115 	stw	ra,4(sp)
 8009a80:	800c0680 	call	800c068 <_read_r>
 8009a84:	10000716 	blt	r2,zero,8009aa4 <__sread+0x38>
 8009a88:	80c01417 	ldw	r3,80(r16)
 8009a8c:	1887883a 	add	r3,r3,r2
 8009a90:	80c01415 	stw	r3,80(r16)
 8009a94:	dfc00117 	ldw	ra,4(sp)
 8009a98:	dc000017 	ldw	r16,0(sp)
 8009a9c:	dec00204 	addi	sp,sp,8
 8009aa0:	f800283a 	ret
 8009aa4:	80c0030b 	ldhu	r3,12(r16)
 8009aa8:	18fbffcc 	andi	r3,r3,61439
 8009aac:	80c0030d 	sth	r3,12(r16)
 8009ab0:	dfc00117 	ldw	ra,4(sp)
 8009ab4:	dc000017 	ldw	r16,0(sp)
 8009ab8:	dec00204 	addi	sp,sp,8
 8009abc:	f800283a 	ret

08009ac0 <__seofread>:
 8009ac0:	0005883a 	mov	r2,zero
 8009ac4:	f800283a 	ret

08009ac8 <__swrite>:
 8009ac8:	2880030b 	ldhu	r2,12(r5)
 8009acc:	defffb04 	addi	sp,sp,-20
 8009ad0:	dcc00315 	stw	r19,12(sp)
 8009ad4:	dc800215 	stw	r18,8(sp)
 8009ad8:	dc400115 	stw	r17,4(sp)
 8009adc:	dc000015 	stw	r16,0(sp)
 8009ae0:	dfc00415 	stw	ra,16(sp)
 8009ae4:	10c0400c 	andi	r3,r2,256
 8009ae8:	2821883a 	mov	r16,r5
 8009aec:	2023883a 	mov	r17,r4
 8009af0:	3025883a 	mov	r18,r6
 8009af4:	3827883a 	mov	r19,r7
 8009af8:	18000526 	beq	r3,zero,8009b10 <__swrite+0x48>
 8009afc:	2940038f 	ldh	r5,14(r5)
 8009b00:	01c00084 	movi	r7,2
 8009b04:	000d883a 	mov	r6,zero
 8009b08:	800beac0 	call	800beac <_lseek_r>
 8009b0c:	8080030b 	ldhu	r2,12(r16)
 8009b10:	8140038f 	ldh	r5,14(r16)
 8009b14:	10bbffcc 	andi	r2,r2,61439
 8009b18:	980f883a 	mov	r7,r19
 8009b1c:	900d883a 	mov	r6,r18
 8009b20:	8809883a 	mov	r4,r17
 8009b24:	8080030d 	sth	r2,12(r16)
 8009b28:	dfc00417 	ldw	ra,16(sp)
 8009b2c:	dcc00317 	ldw	r19,12(sp)
 8009b30:	dc800217 	ldw	r18,8(sp)
 8009b34:	dc400117 	ldw	r17,4(sp)
 8009b38:	dc000017 	ldw	r16,0(sp)
 8009b3c:	dec00504 	addi	sp,sp,20
 8009b40:	800b4bc1 	jmpi	800b4bc <_write_r>

08009b44 <__sseek>:
 8009b44:	defffe04 	addi	sp,sp,-8
 8009b48:	dc000015 	stw	r16,0(sp)
 8009b4c:	2821883a 	mov	r16,r5
 8009b50:	2940038f 	ldh	r5,14(r5)
 8009b54:	dfc00115 	stw	ra,4(sp)
 8009b58:	800beac0 	call	800beac <_lseek_r>
 8009b5c:	00ffffc4 	movi	r3,-1
 8009b60:	10c00826 	beq	r2,r3,8009b84 <__sseek+0x40>
 8009b64:	80c0030b 	ldhu	r3,12(r16)
 8009b68:	80801415 	stw	r2,80(r16)
 8009b6c:	18c40014 	ori	r3,r3,4096
 8009b70:	80c0030d 	sth	r3,12(r16)
 8009b74:	dfc00117 	ldw	ra,4(sp)
 8009b78:	dc000017 	ldw	r16,0(sp)
 8009b7c:	dec00204 	addi	sp,sp,8
 8009b80:	f800283a 	ret
 8009b84:	80c0030b 	ldhu	r3,12(r16)
 8009b88:	18fbffcc 	andi	r3,r3,61439
 8009b8c:	80c0030d 	sth	r3,12(r16)
 8009b90:	dfc00117 	ldw	ra,4(sp)
 8009b94:	dc000017 	ldw	r16,0(sp)
 8009b98:	dec00204 	addi	sp,sp,8
 8009b9c:	f800283a 	ret

08009ba0 <__sclose>:
 8009ba0:	2940038f 	ldh	r5,14(r5)
 8009ba4:	800b51c1 	jmpi	800b51c <_close_r>

08009ba8 <strcmp>:
 8009ba8:	2144b03a 	or	r2,r4,r5
 8009bac:	108000cc 	andi	r2,r2,3
 8009bb0:	1000171e 	bne	r2,zero,8009c10 <strcmp+0x68>
 8009bb4:	20800017 	ldw	r2,0(r4)
 8009bb8:	28c00017 	ldw	r3,0(r5)
 8009bbc:	10c0141e 	bne	r2,r3,8009c10 <strcmp+0x68>
 8009bc0:	027fbff4 	movhi	r9,65279
 8009bc4:	4a7fbfc4 	addi	r9,r9,-257
 8009bc8:	0086303a 	nor	r3,zero,r2
 8009bcc:	02202074 	movhi	r8,32897
 8009bd0:	1245883a 	add	r2,r2,r9
 8009bd4:	42202004 	addi	r8,r8,-32640
 8009bd8:	10c4703a 	and	r2,r2,r3
 8009bdc:	1204703a 	and	r2,r2,r8
 8009be0:	10000226 	beq	r2,zero,8009bec <strcmp+0x44>
 8009be4:	00002306 	br	8009c74 <strcmp+0xcc>
 8009be8:	1000221e 	bne	r2,zero,8009c74 <strcmp+0xcc>
 8009bec:	21000104 	addi	r4,r4,4
 8009bf0:	20c00017 	ldw	r3,0(r4)
 8009bf4:	29400104 	addi	r5,r5,4
 8009bf8:	29800017 	ldw	r6,0(r5)
 8009bfc:	1a4f883a 	add	r7,r3,r9
 8009c00:	00c4303a 	nor	r2,zero,r3
 8009c04:	3884703a 	and	r2,r7,r2
 8009c08:	1204703a 	and	r2,r2,r8
 8009c0c:	19bff626 	beq	r3,r6,8009be8 <__alt_data_end+0xff009be8>
 8009c10:	20800003 	ldbu	r2,0(r4)
 8009c14:	10c03fcc 	andi	r3,r2,255
 8009c18:	18c0201c 	xori	r3,r3,128
 8009c1c:	18ffe004 	addi	r3,r3,-128
 8009c20:	18000c26 	beq	r3,zero,8009c54 <strcmp+0xac>
 8009c24:	29800007 	ldb	r6,0(r5)
 8009c28:	19800326 	beq	r3,r6,8009c38 <strcmp+0x90>
 8009c2c:	00001306 	br	8009c7c <strcmp+0xd4>
 8009c30:	29800007 	ldb	r6,0(r5)
 8009c34:	11800b1e 	bne	r2,r6,8009c64 <strcmp+0xbc>
 8009c38:	21000044 	addi	r4,r4,1
 8009c3c:	20c00003 	ldbu	r3,0(r4)
 8009c40:	29400044 	addi	r5,r5,1
 8009c44:	18803fcc 	andi	r2,r3,255
 8009c48:	1080201c 	xori	r2,r2,128
 8009c4c:	10bfe004 	addi	r2,r2,-128
 8009c50:	103ff71e 	bne	r2,zero,8009c30 <__alt_data_end+0xff009c30>
 8009c54:	0007883a 	mov	r3,zero
 8009c58:	28800003 	ldbu	r2,0(r5)
 8009c5c:	1885c83a 	sub	r2,r3,r2
 8009c60:	f800283a 	ret
 8009c64:	28800003 	ldbu	r2,0(r5)
 8009c68:	18c03fcc 	andi	r3,r3,255
 8009c6c:	1885c83a 	sub	r2,r3,r2
 8009c70:	f800283a 	ret
 8009c74:	0005883a 	mov	r2,zero
 8009c78:	f800283a 	ret
 8009c7c:	10c03fcc 	andi	r3,r2,255
 8009c80:	003ff506 	br	8009c58 <__alt_data_end+0xff009c58>

08009c84 <strlen>:
 8009c84:	208000cc 	andi	r2,r4,3
 8009c88:	10002026 	beq	r2,zero,8009d0c <strlen+0x88>
 8009c8c:	20800007 	ldb	r2,0(r4)
 8009c90:	10002026 	beq	r2,zero,8009d14 <strlen+0x90>
 8009c94:	2005883a 	mov	r2,r4
 8009c98:	00000206 	br	8009ca4 <strlen+0x20>
 8009c9c:	10c00007 	ldb	r3,0(r2)
 8009ca0:	18001826 	beq	r3,zero,8009d04 <strlen+0x80>
 8009ca4:	10800044 	addi	r2,r2,1
 8009ca8:	10c000cc 	andi	r3,r2,3
 8009cac:	183ffb1e 	bne	r3,zero,8009c9c <__alt_data_end+0xff009c9c>
 8009cb0:	10c00017 	ldw	r3,0(r2)
 8009cb4:	01ffbff4 	movhi	r7,65279
 8009cb8:	39ffbfc4 	addi	r7,r7,-257
 8009cbc:	00ca303a 	nor	r5,zero,r3
 8009cc0:	01a02074 	movhi	r6,32897
 8009cc4:	19c7883a 	add	r3,r3,r7
 8009cc8:	31a02004 	addi	r6,r6,-32640
 8009ccc:	1946703a 	and	r3,r3,r5
 8009cd0:	1986703a 	and	r3,r3,r6
 8009cd4:	1800091e 	bne	r3,zero,8009cfc <strlen+0x78>
 8009cd8:	10800104 	addi	r2,r2,4
 8009cdc:	10c00017 	ldw	r3,0(r2)
 8009ce0:	19cb883a 	add	r5,r3,r7
 8009ce4:	00c6303a 	nor	r3,zero,r3
 8009ce8:	28c6703a 	and	r3,r5,r3
 8009cec:	1986703a 	and	r3,r3,r6
 8009cf0:	183ff926 	beq	r3,zero,8009cd8 <__alt_data_end+0xff009cd8>
 8009cf4:	00000106 	br	8009cfc <strlen+0x78>
 8009cf8:	10800044 	addi	r2,r2,1
 8009cfc:	10c00007 	ldb	r3,0(r2)
 8009d00:	183ffd1e 	bne	r3,zero,8009cf8 <__alt_data_end+0xff009cf8>
 8009d04:	1105c83a 	sub	r2,r2,r4
 8009d08:	f800283a 	ret
 8009d0c:	2005883a 	mov	r2,r4
 8009d10:	003fe706 	br	8009cb0 <__alt_data_end+0xff009cb0>
 8009d14:	0005883a 	mov	r2,zero
 8009d18:	f800283a 	ret

08009d1c <__sprint_r.part.0>:
 8009d1c:	28801917 	ldw	r2,100(r5)
 8009d20:	defff604 	addi	sp,sp,-40
 8009d24:	dd400515 	stw	r21,20(sp)
 8009d28:	dfc00915 	stw	ra,36(sp)
 8009d2c:	df000815 	stw	fp,32(sp)
 8009d30:	ddc00715 	stw	r23,28(sp)
 8009d34:	dd800615 	stw	r22,24(sp)
 8009d38:	dd000415 	stw	r20,16(sp)
 8009d3c:	dcc00315 	stw	r19,12(sp)
 8009d40:	dc800215 	stw	r18,8(sp)
 8009d44:	dc400115 	stw	r17,4(sp)
 8009d48:	dc000015 	stw	r16,0(sp)
 8009d4c:	1088000c 	andi	r2,r2,8192
 8009d50:	302b883a 	mov	r21,r6
 8009d54:	10002e26 	beq	r2,zero,8009e10 <__sprint_r.part.0+0xf4>
 8009d58:	30800217 	ldw	r2,8(r6)
 8009d5c:	35800017 	ldw	r22,0(r6)
 8009d60:	10002926 	beq	r2,zero,8009e08 <__sprint_r.part.0+0xec>
 8009d64:	2827883a 	mov	r19,r5
 8009d68:	2029883a 	mov	r20,r4
 8009d6c:	b5c00104 	addi	r23,r22,4
 8009d70:	04bfffc4 	movi	r18,-1
 8009d74:	bc400017 	ldw	r17,0(r23)
 8009d78:	b4000017 	ldw	r16,0(r22)
 8009d7c:	0039883a 	mov	fp,zero
 8009d80:	8822d0ba 	srli	r17,r17,2
 8009d84:	8800031e 	bne	r17,zero,8009d94 <__sprint_r.part.0+0x78>
 8009d88:	00001806 	br	8009dec <__sprint_r.part.0+0xd0>
 8009d8c:	84000104 	addi	r16,r16,4
 8009d90:	8f001526 	beq	r17,fp,8009de8 <__sprint_r.part.0+0xcc>
 8009d94:	81400017 	ldw	r5,0(r16)
 8009d98:	980d883a 	mov	r6,r19
 8009d9c:	a009883a 	mov	r4,r20
 8009da0:	800b89c0 	call	800b89c <_fputwc_r>
 8009da4:	e7000044 	addi	fp,fp,1
 8009da8:	14bff81e 	bne	r2,r18,8009d8c <__alt_data_end+0xff009d8c>
 8009dac:	9005883a 	mov	r2,r18
 8009db0:	a8000215 	stw	zero,8(r21)
 8009db4:	a8000115 	stw	zero,4(r21)
 8009db8:	dfc00917 	ldw	ra,36(sp)
 8009dbc:	df000817 	ldw	fp,32(sp)
 8009dc0:	ddc00717 	ldw	r23,28(sp)
 8009dc4:	dd800617 	ldw	r22,24(sp)
 8009dc8:	dd400517 	ldw	r21,20(sp)
 8009dcc:	dd000417 	ldw	r20,16(sp)
 8009dd0:	dcc00317 	ldw	r19,12(sp)
 8009dd4:	dc800217 	ldw	r18,8(sp)
 8009dd8:	dc400117 	ldw	r17,4(sp)
 8009ddc:	dc000017 	ldw	r16,0(sp)
 8009de0:	dec00a04 	addi	sp,sp,40
 8009de4:	f800283a 	ret
 8009de8:	a8800217 	ldw	r2,8(r21)
 8009dec:	8c63883a 	add	r17,r17,r17
 8009df0:	8c63883a 	add	r17,r17,r17
 8009df4:	1445c83a 	sub	r2,r2,r17
 8009df8:	a8800215 	stw	r2,8(r21)
 8009dfc:	b5800204 	addi	r22,r22,8
 8009e00:	bdc00204 	addi	r23,r23,8
 8009e04:	103fdb1e 	bne	r2,zero,8009d74 <__alt_data_end+0xff009d74>
 8009e08:	0005883a 	mov	r2,zero
 8009e0c:	003fe806 	br	8009db0 <__alt_data_end+0xff009db0>
 8009e10:	800b99c0 	call	800b99c <__sfvwrite_r>
 8009e14:	003fe606 	br	8009db0 <__alt_data_end+0xff009db0>

08009e18 <__sprint_r>:
 8009e18:	30c00217 	ldw	r3,8(r6)
 8009e1c:	18000126 	beq	r3,zero,8009e24 <__sprint_r+0xc>
 8009e20:	8009d1c1 	jmpi	8009d1c <__sprint_r.part.0>
 8009e24:	30000115 	stw	zero,4(r6)
 8009e28:	0005883a 	mov	r2,zero
 8009e2c:	f800283a 	ret

08009e30 <___vfiprintf_internal_r>:
 8009e30:	deffc904 	addi	sp,sp,-220
 8009e34:	df003515 	stw	fp,212(sp)
 8009e38:	dd003115 	stw	r20,196(sp)
 8009e3c:	dfc03615 	stw	ra,216(sp)
 8009e40:	ddc03415 	stw	r23,208(sp)
 8009e44:	dd803315 	stw	r22,204(sp)
 8009e48:	dd403215 	stw	r21,200(sp)
 8009e4c:	dcc03015 	stw	r19,192(sp)
 8009e50:	dc802f15 	stw	r18,188(sp)
 8009e54:	dc402e15 	stw	r17,184(sp)
 8009e58:	dc002d15 	stw	r16,180(sp)
 8009e5c:	d9002015 	stw	r4,128(sp)
 8009e60:	d9c02215 	stw	r7,136(sp)
 8009e64:	2829883a 	mov	r20,r5
 8009e68:	3039883a 	mov	fp,r6
 8009e6c:	20000226 	beq	r4,zero,8009e78 <___vfiprintf_internal_r+0x48>
 8009e70:	20800e17 	ldw	r2,56(r4)
 8009e74:	1000cf26 	beq	r2,zero,800a1b4 <___vfiprintf_internal_r+0x384>
 8009e78:	a080030b 	ldhu	r2,12(r20)
 8009e7c:	10c8000c 	andi	r3,r2,8192
 8009e80:	1800061e 	bne	r3,zero,8009e9c <___vfiprintf_internal_r+0x6c>
 8009e84:	a1001917 	ldw	r4,100(r20)
 8009e88:	00f7ffc4 	movi	r3,-8193
 8009e8c:	10880014 	ori	r2,r2,8192
 8009e90:	20c6703a 	and	r3,r4,r3
 8009e94:	a080030d 	sth	r2,12(r20)
 8009e98:	a0c01915 	stw	r3,100(r20)
 8009e9c:	10c0020c 	andi	r3,r2,8
 8009ea0:	1800a926 	beq	r3,zero,800a148 <___vfiprintf_internal_r+0x318>
 8009ea4:	a0c00417 	ldw	r3,16(r20)
 8009ea8:	1800a726 	beq	r3,zero,800a148 <___vfiprintf_internal_r+0x318>
 8009eac:	1080068c 	andi	r2,r2,26
 8009eb0:	00c00284 	movi	r3,10
 8009eb4:	10c0ac26 	beq	r2,r3,800a168 <___vfiprintf_internal_r+0x338>
 8009eb8:	da801a04 	addi	r10,sp,104
 8009ebc:	da801e15 	stw	r10,120(sp)
 8009ec0:	d8801e17 	ldw	r2,120(sp)
 8009ec4:	da8019c4 	addi	r10,sp,103
 8009ec8:	05820074 	movhi	r22,2049
 8009ecc:	05c20074 	movhi	r23,2049
 8009ed0:	da801f15 	stw	r10,124(sp)
 8009ed4:	1295c83a 	sub	r10,r2,r10
 8009ed8:	b587ea04 	addi	r22,r22,8104
 8009edc:	bdc7e604 	addi	r23,r23,8088
 8009ee0:	dec01a15 	stw	sp,104(sp)
 8009ee4:	d8001c15 	stw	zero,112(sp)
 8009ee8:	d8001b15 	stw	zero,108(sp)
 8009eec:	d8002615 	stw	zero,152(sp)
 8009ef0:	d8002315 	stw	zero,140(sp)
 8009ef4:	da802715 	stw	r10,156(sp)
 8009ef8:	d811883a 	mov	r8,sp
 8009efc:	dd002115 	stw	r20,132(sp)
 8009f00:	e021883a 	mov	r16,fp
 8009f04:	80800007 	ldb	r2,0(r16)
 8009f08:	1003ea26 	beq	r2,zero,800aeb4 <___vfiprintf_internal_r+0x1084>
 8009f0c:	00c00944 	movi	r3,37
 8009f10:	8025883a 	mov	r18,r16
 8009f14:	10c0021e 	bne	r2,r3,8009f20 <___vfiprintf_internal_r+0xf0>
 8009f18:	00001606 	br	8009f74 <___vfiprintf_internal_r+0x144>
 8009f1c:	10c00326 	beq	r2,r3,8009f2c <___vfiprintf_internal_r+0xfc>
 8009f20:	94800044 	addi	r18,r18,1
 8009f24:	90800007 	ldb	r2,0(r18)
 8009f28:	103ffc1e 	bne	r2,zero,8009f1c <__alt_data_end+0xff009f1c>
 8009f2c:	9423c83a 	sub	r17,r18,r16
 8009f30:	88001026 	beq	r17,zero,8009f74 <___vfiprintf_internal_r+0x144>
 8009f34:	d8c01c17 	ldw	r3,112(sp)
 8009f38:	d8801b17 	ldw	r2,108(sp)
 8009f3c:	44000015 	stw	r16,0(r8)
 8009f40:	88c7883a 	add	r3,r17,r3
 8009f44:	10800044 	addi	r2,r2,1
 8009f48:	44400115 	stw	r17,4(r8)
 8009f4c:	d8c01c15 	stw	r3,112(sp)
 8009f50:	d8801b15 	stw	r2,108(sp)
 8009f54:	010001c4 	movi	r4,7
 8009f58:	2080760e 	bge	r4,r2,800a134 <___vfiprintf_internal_r+0x304>
 8009f5c:	1803821e 	bne	r3,zero,800ad68 <___vfiprintf_internal_r+0xf38>
 8009f60:	da802317 	ldw	r10,140(sp)
 8009f64:	d8001b15 	stw	zero,108(sp)
 8009f68:	d811883a 	mov	r8,sp
 8009f6c:	5455883a 	add	r10,r10,r17
 8009f70:	da802315 	stw	r10,140(sp)
 8009f74:	90800007 	ldb	r2,0(r18)
 8009f78:	10044626 	beq	r2,zero,800b094 <___vfiprintf_internal_r+0x1264>
 8009f7c:	90c00047 	ldb	r3,1(r18)
 8009f80:	94000044 	addi	r16,r18,1
 8009f84:	d8001d85 	stb	zero,118(sp)
 8009f88:	0009883a 	mov	r4,zero
 8009f8c:	000f883a 	mov	r7,zero
 8009f90:	027fffc4 	movi	r9,-1
 8009f94:	0023883a 	mov	r17,zero
 8009f98:	0029883a 	mov	r20,zero
 8009f9c:	01401604 	movi	r5,88
 8009fa0:	01800244 	movi	r6,9
 8009fa4:	03400a84 	movi	r13,42
 8009fa8:	03001b04 	movi	r12,108
 8009fac:	84000044 	addi	r16,r16,1
 8009fb0:	18bff804 	addi	r2,r3,-32
 8009fb4:	28827336 	bltu	r5,r2,800a984 <___vfiprintf_internal_r+0xb54>
 8009fb8:	100490ba 	slli	r2,r2,2
 8009fbc:	02820074 	movhi	r10,2049
 8009fc0:	52a7f404 	addi	r10,r10,-24624
 8009fc4:	1285883a 	add	r2,r2,r10
 8009fc8:	10800017 	ldw	r2,0(r2)
 8009fcc:	1000683a 	jmp	r2
 8009fd0:	0800a6b8 	rdprs	zero,at,666
 8009fd4:	0800a984 	addi	zero,at,678
 8009fd8:	0800a984 	addi	zero,at,678
 8009fdc:	0800a6d8 	cmpnei	zero,at,667
 8009fe0:	0800a984 	addi	zero,at,678
 8009fe4:	0800a984 	addi	zero,at,678
 8009fe8:	0800a984 	addi	zero,at,678
 8009fec:	0800a984 	addi	zero,at,678
 8009ff0:	0800a984 	addi	zero,at,678
 8009ff4:	0800a984 	addi	zero,at,678
 8009ff8:	0800a8c0 	call	800a8c <__alt_mem_onchip_memory2_0+0x800a8c>
 8009ffc:	0800a8dc 	xori	zero,at,675
 800a000:	0800a984 	addi	zero,at,678
 800a004:	0800a1c4 	addi	zero,at,647
 800a008:	0800a8ec 	andhi	zero,at,675
 800a00c:	0800a984 	addi	zero,at,678
 800a010:	0800a6e4 	muli	zero,at,667
 800a014:	0800a6f0 	cmpltui	zero,at,667
 800a018:	0800a6f0 	cmpltui	zero,at,667
 800a01c:	0800a6f0 	cmpltui	zero,at,667
 800a020:	0800a6f0 	cmpltui	zero,at,667
 800a024:	0800a6f0 	cmpltui	zero,at,667
 800a028:	0800a6f0 	cmpltui	zero,at,667
 800a02c:	0800a6f0 	cmpltui	zero,at,667
 800a030:	0800a6f0 	cmpltui	zero,at,667
 800a034:	0800a6f0 	cmpltui	zero,at,667
 800a038:	0800a984 	addi	zero,at,678
 800a03c:	0800a984 	addi	zero,at,678
 800a040:	0800a984 	addi	zero,at,678
 800a044:	0800a984 	addi	zero,at,678
 800a048:	0800a984 	addi	zero,at,678
 800a04c:	0800a984 	addi	zero,at,678
 800a050:	0800a984 	addi	zero,at,678
 800a054:	0800a984 	addi	zero,at,678
 800a058:	0800a984 	addi	zero,at,678
 800a05c:	0800a984 	addi	zero,at,678
 800a060:	0800a71c 	xori	zero,at,668
 800a064:	0800a984 	addi	zero,at,678
 800a068:	0800a984 	addi	zero,at,678
 800a06c:	0800a984 	addi	zero,at,678
 800a070:	0800a984 	addi	zero,at,678
 800a074:	0800a984 	addi	zero,at,678
 800a078:	0800a984 	addi	zero,at,678
 800a07c:	0800a984 	addi	zero,at,678
 800a080:	0800a984 	addi	zero,at,678
 800a084:	0800a984 	addi	zero,at,678
 800a088:	0800a984 	addi	zero,at,678
 800a08c:	0800a754 	ori	zero,at,669
 800a090:	0800a984 	addi	zero,at,678
 800a094:	0800a984 	addi	zero,at,678
 800a098:	0800a984 	addi	zero,at,678
 800a09c:	0800a984 	addi	zero,at,678
 800a0a0:	0800a984 	addi	zero,at,678
 800a0a4:	0800a7ac 	andhi	zero,at,670
 800a0a8:	0800a984 	addi	zero,at,678
 800a0ac:	0800a984 	addi	zero,at,678
 800a0b0:	0800a81c 	xori	zero,at,672
 800a0b4:	0800a984 	addi	zero,at,678
 800a0b8:	0800a984 	addi	zero,at,678
 800a0bc:	0800a984 	addi	zero,at,678
 800a0c0:	0800a984 	addi	zero,at,678
 800a0c4:	0800a984 	addi	zero,at,678
 800a0c8:	0800a984 	addi	zero,at,678
 800a0cc:	0800a984 	addi	zero,at,678
 800a0d0:	0800a984 	addi	zero,at,678
 800a0d4:	0800a984 	addi	zero,at,678
 800a0d8:	0800a984 	addi	zero,at,678
 800a0dc:	0800a5c8 	cmpgei	zero,at,663
 800a0e0:	0800a5f4 	orhi	zero,at,663
 800a0e4:	0800a984 	addi	zero,at,678
 800a0e8:	0800a984 	addi	zero,at,678
 800a0ec:	0800a984 	addi	zero,at,678
 800a0f0:	0800a92c 	andhi	zero,at,676
 800a0f4:	0800a5f4 	orhi	zero,at,663
 800a0f8:	0800a984 	addi	zero,at,678
 800a0fc:	0800a984 	addi	zero,at,678
 800a100:	0800a488 	cmpgei	zero,at,658
 800a104:	0800a984 	addi	zero,at,678
 800a108:	0800a498 	cmpnei	zero,at,658
 800a10c:	0800a4d4 	ori	zero,at,659
 800a110:	0800a1d0 	cmplti	zero,at,647
 800a114:	0800a47c 	xorhi	zero,at,657
 800a118:	0800a984 	addi	zero,at,678
 800a11c:	0800a858 	cmpnei	zero,at,673
 800a120:	0800a984 	addi	zero,at,678
 800a124:	0800a8b0 	cmpltui	zero,at,674
 800a128:	0800a984 	addi	zero,at,678
 800a12c:	0800a984 	addi	zero,at,678
 800a130:	0800a574 	orhi	zero,at,661
 800a134:	42000204 	addi	r8,r8,8
 800a138:	da802317 	ldw	r10,140(sp)
 800a13c:	5455883a 	add	r10,r10,r17
 800a140:	da802315 	stw	r10,140(sp)
 800a144:	003f8b06 	br	8009f74 <__alt_data_end+0xff009f74>
 800a148:	d9002017 	ldw	r4,128(sp)
 800a14c:	a00b883a 	mov	r5,r20
 800a150:	80054680 	call	8005468 <__swsetup_r>
 800a154:	1003b11e 	bne	r2,zero,800b01c <___vfiprintf_internal_r+0x11ec>
 800a158:	a080030b 	ldhu	r2,12(r20)
 800a15c:	00c00284 	movi	r3,10
 800a160:	1080068c 	andi	r2,r2,26
 800a164:	10ff541e 	bne	r2,r3,8009eb8 <__alt_data_end+0xff009eb8>
 800a168:	a080038f 	ldh	r2,14(r20)
 800a16c:	103f5216 	blt	r2,zero,8009eb8 <__alt_data_end+0xff009eb8>
 800a170:	d9c02217 	ldw	r7,136(sp)
 800a174:	d9002017 	ldw	r4,128(sp)
 800a178:	e00d883a 	mov	r6,fp
 800a17c:	a00b883a 	mov	r5,r20
 800a180:	800b2a80 	call	800b2a8 <__sbprintf>
 800a184:	dfc03617 	ldw	ra,216(sp)
 800a188:	df003517 	ldw	fp,212(sp)
 800a18c:	ddc03417 	ldw	r23,208(sp)
 800a190:	dd803317 	ldw	r22,204(sp)
 800a194:	dd403217 	ldw	r21,200(sp)
 800a198:	dd003117 	ldw	r20,196(sp)
 800a19c:	dcc03017 	ldw	r19,192(sp)
 800a1a0:	dc802f17 	ldw	r18,188(sp)
 800a1a4:	dc402e17 	ldw	r17,184(sp)
 800a1a8:	dc002d17 	ldw	r16,180(sp)
 800a1ac:	dec03704 	addi	sp,sp,220
 800a1b0:	f800283a 	ret
 800a1b4:	800743c0 	call	800743c <__sinit>
 800a1b8:	003f2f06 	br	8009e78 <__alt_data_end+0xff009e78>
 800a1bc:	0463c83a 	sub	r17,zero,r17
 800a1c0:	d8802215 	stw	r2,136(sp)
 800a1c4:	a5000114 	ori	r20,r20,4
 800a1c8:	80c00007 	ldb	r3,0(r16)
 800a1cc:	003f7706 	br	8009fac <__alt_data_end+0xff009fac>
 800a1d0:	00800c04 	movi	r2,48
 800a1d4:	da802217 	ldw	r10,136(sp)
 800a1d8:	d8801d05 	stb	r2,116(sp)
 800a1dc:	00801e04 	movi	r2,120
 800a1e0:	d8801d45 	stb	r2,117(sp)
 800a1e4:	d8001d85 	stb	zero,118(sp)
 800a1e8:	50c00104 	addi	r3,r10,4
 800a1ec:	54800017 	ldw	r18,0(r10)
 800a1f0:	0027883a 	mov	r19,zero
 800a1f4:	a0800094 	ori	r2,r20,2
 800a1f8:	48030b16 	blt	r9,zero,800ae28 <___vfiprintf_internal_r+0xff8>
 800a1fc:	00bfdfc4 	movi	r2,-129
 800a200:	a096703a 	and	r11,r20,r2
 800a204:	d8c02215 	stw	r3,136(sp)
 800a208:	5d000094 	ori	r20,r11,2
 800a20c:	90032b1e 	bne	r18,zero,800aebc <___vfiprintf_internal_r+0x108c>
 800a210:	00820074 	movhi	r2,2049
 800a214:	10878504 	addi	r2,r2,7700
 800a218:	d8802615 	stw	r2,152(sp)
 800a21c:	0039883a 	mov	fp,zero
 800a220:	48017b1e 	bne	r9,zero,800a810 <___vfiprintf_internal_r+0x9e0>
 800a224:	0013883a 	mov	r9,zero
 800a228:	0027883a 	mov	r19,zero
 800a22c:	dd401a04 	addi	r21,sp,104
 800a230:	4825883a 	mov	r18,r9
 800a234:	4cc0010e 	bge	r9,r19,800a23c <___vfiprintf_internal_r+0x40c>
 800a238:	9825883a 	mov	r18,r19
 800a23c:	e7003fcc 	andi	fp,fp,255
 800a240:	e700201c 	xori	fp,fp,128
 800a244:	e73fe004 	addi	fp,fp,-128
 800a248:	e0000126 	beq	fp,zero,800a250 <___vfiprintf_internal_r+0x420>
 800a24c:	94800044 	addi	r18,r18,1
 800a250:	a380008c 	andi	r14,r20,2
 800a254:	70000126 	beq	r14,zero,800a25c <___vfiprintf_internal_r+0x42c>
 800a258:	94800084 	addi	r18,r18,2
 800a25c:	a700210c 	andi	fp,r20,132
 800a260:	e001df1e 	bne	fp,zero,800a9e0 <___vfiprintf_internal_r+0xbb0>
 800a264:	8c87c83a 	sub	r3,r17,r18
 800a268:	00c1dd0e 	bge	zero,r3,800a9e0 <___vfiprintf_internal_r+0xbb0>
 800a26c:	01c00404 	movi	r7,16
 800a270:	d8801c17 	ldw	r2,112(sp)
 800a274:	38c3ad0e 	bge	r7,r3,800b12c <___vfiprintf_internal_r+0x12fc>
 800a278:	02820074 	movhi	r10,2049
 800a27c:	5287ea04 	addi	r10,r10,8104
 800a280:	dc002915 	stw	r16,164(sp)
 800a284:	d9801b17 	ldw	r6,108(sp)
 800a288:	da802415 	stw	r10,144(sp)
 800a28c:	03c001c4 	movi	r15,7
 800a290:	da402515 	stw	r9,148(sp)
 800a294:	db802815 	stw	r14,160(sp)
 800a298:	1821883a 	mov	r16,r3
 800a29c:	00000506 	br	800a2b4 <___vfiprintf_internal_r+0x484>
 800a2a0:	31400084 	addi	r5,r6,2
 800a2a4:	42000204 	addi	r8,r8,8
 800a2a8:	200d883a 	mov	r6,r4
 800a2ac:	843ffc04 	addi	r16,r16,-16
 800a2b0:	3c000d0e 	bge	r7,r16,800a2e8 <___vfiprintf_internal_r+0x4b8>
 800a2b4:	10800404 	addi	r2,r2,16
 800a2b8:	31000044 	addi	r4,r6,1
 800a2bc:	45800015 	stw	r22,0(r8)
 800a2c0:	41c00115 	stw	r7,4(r8)
 800a2c4:	d8801c15 	stw	r2,112(sp)
 800a2c8:	d9001b15 	stw	r4,108(sp)
 800a2cc:	793ff40e 	bge	r15,r4,800a2a0 <__alt_data_end+0xff00a2a0>
 800a2d0:	1001b51e 	bne	r2,zero,800a9a8 <___vfiprintf_internal_r+0xb78>
 800a2d4:	843ffc04 	addi	r16,r16,-16
 800a2d8:	000d883a 	mov	r6,zero
 800a2dc:	01400044 	movi	r5,1
 800a2e0:	d811883a 	mov	r8,sp
 800a2e4:	3c3ff316 	blt	r7,r16,800a2b4 <__alt_data_end+0xff00a2b4>
 800a2e8:	8007883a 	mov	r3,r16
 800a2ec:	da402517 	ldw	r9,148(sp)
 800a2f0:	db802817 	ldw	r14,160(sp)
 800a2f4:	dc002917 	ldw	r16,164(sp)
 800a2f8:	da802417 	ldw	r10,144(sp)
 800a2fc:	1885883a 	add	r2,r3,r2
 800a300:	40c00115 	stw	r3,4(r8)
 800a304:	42800015 	stw	r10,0(r8)
 800a308:	d8801c15 	stw	r2,112(sp)
 800a30c:	d9401b15 	stw	r5,108(sp)
 800a310:	00c001c4 	movi	r3,7
 800a314:	19426016 	blt	r3,r5,800ac98 <___vfiprintf_internal_r+0xe68>
 800a318:	d8c01d87 	ldb	r3,118(sp)
 800a31c:	42000204 	addi	r8,r8,8
 800a320:	29000044 	addi	r4,r5,1
 800a324:	1801b31e 	bne	r3,zero,800a9f4 <___vfiprintf_internal_r+0xbc4>
 800a328:	7001c026 	beq	r14,zero,800aa2c <___vfiprintf_internal_r+0xbfc>
 800a32c:	d8c01d04 	addi	r3,sp,116
 800a330:	10800084 	addi	r2,r2,2
 800a334:	40c00015 	stw	r3,0(r8)
 800a338:	00c00084 	movi	r3,2
 800a33c:	40c00115 	stw	r3,4(r8)
 800a340:	d8801c15 	stw	r2,112(sp)
 800a344:	d9001b15 	stw	r4,108(sp)
 800a348:	00c001c4 	movi	r3,7
 800a34c:	1902650e 	bge	r3,r4,800ace4 <___vfiprintf_internal_r+0xeb4>
 800a350:	10029a1e 	bne	r2,zero,800adbc <___vfiprintf_internal_r+0xf8c>
 800a354:	00c02004 	movi	r3,128
 800a358:	01000044 	movi	r4,1
 800a35c:	000b883a 	mov	r5,zero
 800a360:	d811883a 	mov	r8,sp
 800a364:	e0c1b31e 	bne	fp,r3,800aa34 <___vfiprintf_internal_r+0xc04>
 800a368:	8cb9c83a 	sub	fp,r17,r18
 800a36c:	0701b10e 	bge	zero,fp,800aa34 <___vfiprintf_internal_r+0xc04>
 800a370:	01c00404 	movi	r7,16
 800a374:	3f03890e 	bge	r7,fp,800b19c <___vfiprintf_internal_r+0x136c>
 800a378:	00c20074 	movhi	r3,2049
 800a37c:	18c7e604 	addi	r3,r3,8088
 800a380:	d8c02415 	stw	r3,144(sp)
 800a384:	8007883a 	mov	r3,r16
 800a388:	034001c4 	movi	r13,7
 800a38c:	e021883a 	mov	r16,fp
 800a390:	da402515 	stw	r9,148(sp)
 800a394:	1839883a 	mov	fp,r3
 800a398:	00000506 	br	800a3b0 <___vfiprintf_internal_r+0x580>
 800a39c:	29800084 	addi	r6,r5,2
 800a3a0:	42000204 	addi	r8,r8,8
 800a3a4:	180b883a 	mov	r5,r3
 800a3a8:	843ffc04 	addi	r16,r16,-16
 800a3ac:	3c000d0e 	bge	r7,r16,800a3e4 <___vfiprintf_internal_r+0x5b4>
 800a3b0:	10800404 	addi	r2,r2,16
 800a3b4:	28c00044 	addi	r3,r5,1
 800a3b8:	45c00015 	stw	r23,0(r8)
 800a3bc:	41c00115 	stw	r7,4(r8)
 800a3c0:	d8801c15 	stw	r2,112(sp)
 800a3c4:	d8c01b15 	stw	r3,108(sp)
 800a3c8:	68fff40e 	bge	r13,r3,800a39c <__alt_data_end+0xff00a39c>
 800a3cc:	1002241e 	bne	r2,zero,800ac60 <___vfiprintf_internal_r+0xe30>
 800a3d0:	843ffc04 	addi	r16,r16,-16
 800a3d4:	01800044 	movi	r6,1
 800a3d8:	000b883a 	mov	r5,zero
 800a3dc:	d811883a 	mov	r8,sp
 800a3e0:	3c3ff316 	blt	r7,r16,800a3b0 <__alt_data_end+0xff00a3b0>
 800a3e4:	da402517 	ldw	r9,148(sp)
 800a3e8:	e007883a 	mov	r3,fp
 800a3ec:	8039883a 	mov	fp,r16
 800a3f0:	1821883a 	mov	r16,r3
 800a3f4:	d8c02417 	ldw	r3,144(sp)
 800a3f8:	1705883a 	add	r2,r2,fp
 800a3fc:	47000115 	stw	fp,4(r8)
 800a400:	40c00015 	stw	r3,0(r8)
 800a404:	d8801c15 	stw	r2,112(sp)
 800a408:	d9801b15 	stw	r6,108(sp)
 800a40c:	00c001c4 	movi	r3,7
 800a410:	19827616 	blt	r3,r6,800adec <___vfiprintf_internal_r+0xfbc>
 800a414:	4cf9c83a 	sub	fp,r9,r19
 800a418:	42000204 	addi	r8,r8,8
 800a41c:	31000044 	addi	r4,r6,1
 800a420:	300b883a 	mov	r5,r6
 800a424:	07018516 	blt	zero,fp,800aa3c <___vfiprintf_internal_r+0xc0c>
 800a428:	9885883a 	add	r2,r19,r2
 800a42c:	45400015 	stw	r21,0(r8)
 800a430:	44c00115 	stw	r19,4(r8)
 800a434:	d8801c15 	stw	r2,112(sp)
 800a438:	d9001b15 	stw	r4,108(sp)
 800a43c:	00c001c4 	movi	r3,7
 800a440:	1901dd0e 	bge	r3,r4,800abb8 <___vfiprintf_internal_r+0xd88>
 800a444:	1002401e 	bne	r2,zero,800ad48 <___vfiprintf_internal_r+0xf18>
 800a448:	d8001b15 	stw	zero,108(sp)
 800a44c:	a2c0010c 	andi	r11,r20,4
 800a450:	58000226 	beq	r11,zero,800a45c <___vfiprintf_internal_r+0x62c>
 800a454:	8ca7c83a 	sub	r19,r17,r18
 800a458:	04c2f216 	blt	zero,r19,800b024 <___vfiprintf_internal_r+0x11f4>
 800a45c:	8c80010e 	bge	r17,r18,800a464 <___vfiprintf_internal_r+0x634>
 800a460:	9023883a 	mov	r17,r18
 800a464:	da802317 	ldw	r10,140(sp)
 800a468:	5455883a 	add	r10,r10,r17
 800a46c:	da802315 	stw	r10,140(sp)
 800a470:	d8001b15 	stw	zero,108(sp)
 800a474:	d811883a 	mov	r8,sp
 800a478:	003ea206 	br	8009f04 <__alt_data_end+0xff009f04>
 800a47c:	a5000814 	ori	r20,r20,32
 800a480:	80c00007 	ldb	r3,0(r16)
 800a484:	003ec906 	br	8009fac <__alt_data_end+0xff009fac>
 800a488:	80c00007 	ldb	r3,0(r16)
 800a48c:	1b030926 	beq	r3,r12,800b0b4 <___vfiprintf_internal_r+0x1284>
 800a490:	a5000414 	ori	r20,r20,16
 800a494:	003ec506 	br	8009fac <__alt_data_end+0xff009fac>
 800a498:	21003fcc 	andi	r4,r4,255
 800a49c:	20035e1e 	bne	r4,zero,800b218 <___vfiprintf_internal_r+0x13e8>
 800a4a0:	a080080c 	andi	r2,r20,32
 800a4a4:	1002a526 	beq	r2,zero,800af3c <___vfiprintf_internal_r+0x110c>
 800a4a8:	da802217 	ldw	r10,136(sp)
 800a4ac:	50800017 	ldw	r2,0(r10)
 800a4b0:	da802317 	ldw	r10,140(sp)
 800a4b4:	5007d7fa 	srai	r3,r10,31
 800a4b8:	da802217 	ldw	r10,136(sp)
 800a4bc:	10c00115 	stw	r3,4(r2)
 800a4c0:	52800104 	addi	r10,r10,4
 800a4c4:	da802215 	stw	r10,136(sp)
 800a4c8:	da802317 	ldw	r10,140(sp)
 800a4cc:	12800015 	stw	r10,0(r2)
 800a4d0:	003e8c06 	br	8009f04 <__alt_data_end+0xff009f04>
 800a4d4:	21003fcc 	andi	r4,r4,255
 800a4d8:	2003511e 	bne	r4,zero,800b220 <___vfiprintf_internal_r+0x13f0>
 800a4dc:	a080080c 	andi	r2,r20,32
 800a4e0:	1000a126 	beq	r2,zero,800a768 <___vfiprintf_internal_r+0x938>
 800a4e4:	da802217 	ldw	r10,136(sp)
 800a4e8:	d8001d85 	stb	zero,118(sp)
 800a4ec:	50800204 	addi	r2,r10,8
 800a4f0:	54800017 	ldw	r18,0(r10)
 800a4f4:	54c00117 	ldw	r19,4(r10)
 800a4f8:	4802b416 	blt	r9,zero,800afcc <___vfiprintf_internal_r+0x119c>
 800a4fc:	013fdfc4 	movi	r4,-129
 800a500:	94c6b03a 	or	r3,r18,r19
 800a504:	d8802215 	stw	r2,136(sp)
 800a508:	a128703a 	and	r20,r20,r4
 800a50c:	1800a226 	beq	r3,zero,800a798 <___vfiprintf_internal_r+0x968>
 800a510:	0039883a 	mov	fp,zero
 800a514:	dd401a04 	addi	r21,sp,104
 800a518:	9006d0fa 	srli	r3,r18,3
 800a51c:	9808977a 	slli	r4,r19,29
 800a520:	9826d0fa 	srli	r19,r19,3
 800a524:	948001cc 	andi	r18,r18,7
 800a528:	90800c04 	addi	r2,r18,48
 800a52c:	ad7fffc4 	addi	r21,r21,-1
 800a530:	20e4b03a 	or	r18,r4,r3
 800a534:	a8800005 	stb	r2,0(r21)
 800a538:	94c6b03a 	or	r3,r18,r19
 800a53c:	183ff61e 	bne	r3,zero,800a518 <__alt_data_end+0xff00a518>
 800a540:	a0c0004c 	andi	r3,r20,1
 800a544:	18005926 	beq	r3,zero,800a6ac <___vfiprintf_internal_r+0x87c>
 800a548:	10803fcc 	andi	r2,r2,255
 800a54c:	1080201c 	xori	r2,r2,128
 800a550:	10bfe004 	addi	r2,r2,-128
 800a554:	00c00c04 	movi	r3,48
 800a558:	10c05426 	beq	r2,r3,800a6ac <___vfiprintf_internal_r+0x87c>
 800a55c:	da801e17 	ldw	r10,120(sp)
 800a560:	a8bfffc4 	addi	r2,r21,-1
 800a564:	a8ffffc5 	stb	r3,-1(r21)
 800a568:	50a7c83a 	sub	r19,r10,r2
 800a56c:	102b883a 	mov	r21,r2
 800a570:	003f2f06 	br	800a230 <__alt_data_end+0xff00a230>
 800a574:	21003fcc 	andi	r4,r4,255
 800a578:	2003421e 	bne	r4,zero,800b284 <___vfiprintf_internal_r+0x1454>
 800a57c:	00820074 	movhi	r2,2049
 800a580:	10878504 	addi	r2,r2,7700
 800a584:	d8802615 	stw	r2,152(sp)
 800a588:	a080080c 	andi	r2,r20,32
 800a58c:	1000aa26 	beq	r2,zero,800a838 <___vfiprintf_internal_r+0xa08>
 800a590:	da802217 	ldw	r10,136(sp)
 800a594:	54800017 	ldw	r18,0(r10)
 800a598:	54c00117 	ldw	r19,4(r10)
 800a59c:	52800204 	addi	r10,r10,8
 800a5a0:	da802215 	stw	r10,136(sp)
 800a5a4:	a080004c 	andi	r2,r20,1
 800a5a8:	1001d226 	beq	r2,zero,800acf4 <___vfiprintf_internal_r+0xec4>
 800a5ac:	94c4b03a 	or	r2,r18,r19
 800a5b0:	1002351e 	bne	r2,zero,800ae88 <___vfiprintf_internal_r+0x1058>
 800a5b4:	d8001d85 	stb	zero,118(sp)
 800a5b8:	48022216 	blt	r9,zero,800ae44 <___vfiprintf_internal_r+0x1014>
 800a5bc:	00bfdfc4 	movi	r2,-129
 800a5c0:	a0a8703a 	and	r20,r20,r2
 800a5c4:	003f1506 	br	800a21c <__alt_data_end+0xff00a21c>
 800a5c8:	da802217 	ldw	r10,136(sp)
 800a5cc:	04800044 	movi	r18,1
 800a5d0:	d8001d85 	stb	zero,118(sp)
 800a5d4:	50800017 	ldw	r2,0(r10)
 800a5d8:	52800104 	addi	r10,r10,4
 800a5dc:	da802215 	stw	r10,136(sp)
 800a5e0:	d8801005 	stb	r2,64(sp)
 800a5e4:	9027883a 	mov	r19,r18
 800a5e8:	dd401004 	addi	r21,sp,64
 800a5ec:	0013883a 	mov	r9,zero
 800a5f0:	003f1706 	br	800a250 <__alt_data_end+0xff00a250>
 800a5f4:	21003fcc 	andi	r4,r4,255
 800a5f8:	2003201e 	bne	r4,zero,800b27c <___vfiprintf_internal_r+0x144c>
 800a5fc:	a080080c 	andi	r2,r20,32
 800a600:	10004b26 	beq	r2,zero,800a730 <___vfiprintf_internal_r+0x900>
 800a604:	da802217 	ldw	r10,136(sp)
 800a608:	50800117 	ldw	r2,4(r10)
 800a60c:	54800017 	ldw	r18,0(r10)
 800a610:	52800204 	addi	r10,r10,8
 800a614:	da802215 	stw	r10,136(sp)
 800a618:	1027883a 	mov	r19,r2
 800a61c:	10022c16 	blt	r2,zero,800aed0 <___vfiprintf_internal_r+0x10a0>
 800a620:	df001d83 	ldbu	fp,118(sp)
 800a624:	48007216 	blt	r9,zero,800a7f0 <___vfiprintf_internal_r+0x9c0>
 800a628:	00ffdfc4 	movi	r3,-129
 800a62c:	94c4b03a 	or	r2,r18,r19
 800a630:	a0e8703a 	and	r20,r20,r3
 800a634:	1000cc26 	beq	r2,zero,800a968 <___vfiprintf_internal_r+0xb38>
 800a638:	98021026 	beq	r19,zero,800ae7c <___vfiprintf_internal_r+0x104c>
 800a63c:	dc402415 	stw	r17,144(sp)
 800a640:	dc002515 	stw	r16,148(sp)
 800a644:	9823883a 	mov	r17,r19
 800a648:	9021883a 	mov	r16,r18
 800a64c:	dd401a04 	addi	r21,sp,104
 800a650:	4825883a 	mov	r18,r9
 800a654:	4027883a 	mov	r19,r8
 800a658:	8009883a 	mov	r4,r16
 800a65c:	880b883a 	mov	r5,r17
 800a660:	01800284 	movi	r6,10
 800a664:	000f883a 	mov	r7,zero
 800a668:	800cd8c0 	call	800cd8c <__umoddi3>
 800a66c:	10800c04 	addi	r2,r2,48
 800a670:	ad7fffc4 	addi	r21,r21,-1
 800a674:	8009883a 	mov	r4,r16
 800a678:	880b883a 	mov	r5,r17
 800a67c:	a8800005 	stb	r2,0(r21)
 800a680:	01800284 	movi	r6,10
 800a684:	000f883a 	mov	r7,zero
 800a688:	800c8140 	call	800c814 <__udivdi3>
 800a68c:	1021883a 	mov	r16,r2
 800a690:	10c4b03a 	or	r2,r2,r3
 800a694:	1823883a 	mov	r17,r3
 800a698:	103fef1e 	bne	r2,zero,800a658 <__alt_data_end+0xff00a658>
 800a69c:	dc402417 	ldw	r17,144(sp)
 800a6a0:	dc002517 	ldw	r16,148(sp)
 800a6a4:	9013883a 	mov	r9,r18
 800a6a8:	9811883a 	mov	r8,r19
 800a6ac:	da801e17 	ldw	r10,120(sp)
 800a6b0:	5567c83a 	sub	r19,r10,r21
 800a6b4:	003ede06 	br	800a230 <__alt_data_end+0xff00a230>
 800a6b8:	38803fcc 	andi	r2,r7,255
 800a6bc:	1080201c 	xori	r2,r2,128
 800a6c0:	10bfe004 	addi	r2,r2,-128
 800a6c4:	1002371e 	bne	r2,zero,800afa4 <___vfiprintf_internal_r+0x1174>
 800a6c8:	01000044 	movi	r4,1
 800a6cc:	01c00804 	movi	r7,32
 800a6d0:	80c00007 	ldb	r3,0(r16)
 800a6d4:	003e3506 	br	8009fac <__alt_data_end+0xff009fac>
 800a6d8:	a5000054 	ori	r20,r20,1
 800a6dc:	80c00007 	ldb	r3,0(r16)
 800a6e0:	003e3206 	br	8009fac <__alt_data_end+0xff009fac>
 800a6e4:	a5002014 	ori	r20,r20,128
 800a6e8:	80c00007 	ldb	r3,0(r16)
 800a6ec:	003e2f06 	br	8009fac <__alt_data_end+0xff009fac>
 800a6f0:	8015883a 	mov	r10,r16
 800a6f4:	0023883a 	mov	r17,zero
 800a6f8:	18bff404 	addi	r2,r3,-48
 800a6fc:	50c00007 	ldb	r3,0(r10)
 800a700:	8c4002a4 	muli	r17,r17,10
 800a704:	84000044 	addi	r16,r16,1
 800a708:	8015883a 	mov	r10,r16
 800a70c:	1463883a 	add	r17,r2,r17
 800a710:	18bff404 	addi	r2,r3,-48
 800a714:	30bff92e 	bgeu	r6,r2,800a6fc <__alt_data_end+0xff00a6fc>
 800a718:	003e2506 	br	8009fb0 <__alt_data_end+0xff009fb0>
 800a71c:	21003fcc 	andi	r4,r4,255
 800a720:	2002d41e 	bne	r4,zero,800b274 <___vfiprintf_internal_r+0x1444>
 800a724:	a5000414 	ori	r20,r20,16
 800a728:	a080080c 	andi	r2,r20,32
 800a72c:	103fb51e 	bne	r2,zero,800a604 <__alt_data_end+0xff00a604>
 800a730:	a080040c 	andi	r2,r20,16
 800a734:	1001f826 	beq	r2,zero,800af18 <___vfiprintf_internal_r+0x10e8>
 800a738:	da802217 	ldw	r10,136(sp)
 800a73c:	54800017 	ldw	r18,0(r10)
 800a740:	52800104 	addi	r10,r10,4
 800a744:	da802215 	stw	r10,136(sp)
 800a748:	9027d7fa 	srai	r19,r18,31
 800a74c:	9805883a 	mov	r2,r19
 800a750:	003fb206 	br	800a61c <__alt_data_end+0xff00a61c>
 800a754:	21003fcc 	andi	r4,r4,255
 800a758:	2002c41e 	bne	r4,zero,800b26c <___vfiprintf_internal_r+0x143c>
 800a75c:	a5000414 	ori	r20,r20,16
 800a760:	a080080c 	andi	r2,r20,32
 800a764:	103f5f1e 	bne	r2,zero,800a4e4 <__alt_data_end+0xff00a4e4>
 800a768:	a080040c 	andi	r2,r20,16
 800a76c:	10020f26 	beq	r2,zero,800afac <___vfiprintf_internal_r+0x117c>
 800a770:	da802217 	ldw	r10,136(sp)
 800a774:	d8001d85 	stb	zero,118(sp)
 800a778:	0027883a 	mov	r19,zero
 800a77c:	50800104 	addi	r2,r10,4
 800a780:	54800017 	ldw	r18,0(r10)
 800a784:	48021116 	blt	r9,zero,800afcc <___vfiprintf_internal_r+0x119c>
 800a788:	00ffdfc4 	movi	r3,-129
 800a78c:	d8802215 	stw	r2,136(sp)
 800a790:	a0e8703a 	and	r20,r20,r3
 800a794:	903f5e1e 	bne	r18,zero,800a510 <__alt_data_end+0xff00a510>
 800a798:	0039883a 	mov	fp,zero
 800a79c:	4802a626 	beq	r9,zero,800b238 <___vfiprintf_internal_r+0x1408>
 800a7a0:	0025883a 	mov	r18,zero
 800a7a4:	0027883a 	mov	r19,zero
 800a7a8:	003f5a06 	br	800a514 <__alt_data_end+0xff00a514>
 800a7ac:	21003fcc 	andi	r4,r4,255
 800a7b0:	20029f1e 	bne	r4,zero,800b230 <___vfiprintf_internal_r+0x1400>
 800a7b4:	a5000414 	ori	r20,r20,16
 800a7b8:	a080080c 	andi	r2,r20,32
 800a7bc:	10005e1e 	bne	r2,zero,800a938 <___vfiprintf_internal_r+0xb08>
 800a7c0:	a080040c 	andi	r2,r20,16
 800a7c4:	1001a21e 	bne	r2,zero,800ae50 <___vfiprintf_internal_r+0x1020>
 800a7c8:	a080100c 	andi	r2,r20,64
 800a7cc:	d8001d85 	stb	zero,118(sp)
 800a7d0:	da802217 	ldw	r10,136(sp)
 800a7d4:	1002231e 	bne	r2,zero,800b064 <___vfiprintf_internal_r+0x1234>
 800a7d8:	50800104 	addi	r2,r10,4
 800a7dc:	54800017 	ldw	r18,0(r10)
 800a7e0:	0027883a 	mov	r19,zero
 800a7e4:	4801a00e 	bge	r9,zero,800ae68 <___vfiprintf_internal_r+0x1038>
 800a7e8:	d8802215 	stw	r2,136(sp)
 800a7ec:	0039883a 	mov	fp,zero
 800a7f0:	94c4b03a 	or	r2,r18,r19
 800a7f4:	103f901e 	bne	r2,zero,800a638 <__alt_data_end+0xff00a638>
 800a7f8:	00800044 	movi	r2,1
 800a7fc:	10803fcc 	andi	r2,r2,255
 800a800:	00c00044 	movi	r3,1
 800a804:	10c05926 	beq	r2,r3,800a96c <___vfiprintf_internal_r+0xb3c>
 800a808:	00c00084 	movi	r3,2
 800a80c:	10ffe41e 	bne	r2,r3,800a7a0 <__alt_data_end+0xff00a7a0>
 800a810:	0025883a 	mov	r18,zero
 800a814:	0027883a 	mov	r19,zero
 800a818:	00013d06 	br	800ad10 <___vfiprintf_internal_r+0xee0>
 800a81c:	21003fcc 	andi	r4,r4,255
 800a820:	2002811e 	bne	r4,zero,800b228 <___vfiprintf_internal_r+0x13f8>
 800a824:	00820074 	movhi	r2,2049
 800a828:	10878004 	addi	r2,r2,7680
 800a82c:	d8802615 	stw	r2,152(sp)
 800a830:	a080080c 	andi	r2,r20,32
 800a834:	103f561e 	bne	r2,zero,800a590 <__alt_data_end+0xff00a590>
 800a838:	a080040c 	andi	r2,r20,16
 800a83c:	1001d126 	beq	r2,zero,800af84 <___vfiprintf_internal_r+0x1154>
 800a840:	da802217 	ldw	r10,136(sp)
 800a844:	0027883a 	mov	r19,zero
 800a848:	54800017 	ldw	r18,0(r10)
 800a84c:	52800104 	addi	r10,r10,4
 800a850:	da802215 	stw	r10,136(sp)
 800a854:	003f5306 	br	800a5a4 <__alt_data_end+0xff00a5a4>
 800a858:	da802217 	ldw	r10,136(sp)
 800a85c:	d8001d85 	stb	zero,118(sp)
 800a860:	55400017 	ldw	r21,0(r10)
 800a864:	50c00104 	addi	r3,r10,4
 800a868:	a8024226 	beq	r21,zero,800b174 <___vfiprintf_internal_r+0x1344>
 800a86c:	48021816 	blt	r9,zero,800b0d0 <___vfiprintf_internal_r+0x12a0>
 800a870:	480d883a 	mov	r6,r9
 800a874:	000b883a 	mov	r5,zero
 800a878:	a809883a 	mov	r4,r21
 800a87c:	d8c02a15 	stw	r3,168(sp)
 800a880:	da002b15 	stw	r8,172(sp)
 800a884:	da402c15 	stw	r9,176(sp)
 800a888:	80084ec0 	call	80084ec <memchr>
 800a88c:	d8c02a17 	ldw	r3,168(sp)
 800a890:	da002b17 	ldw	r8,172(sp)
 800a894:	da402c17 	ldw	r9,176(sp)
 800a898:	10024826 	beq	r2,zero,800b1bc <___vfiprintf_internal_r+0x138c>
 800a89c:	1567c83a 	sub	r19,r2,r21
 800a8a0:	df001d83 	ldbu	fp,118(sp)
 800a8a4:	d8c02215 	stw	r3,136(sp)
 800a8a8:	0013883a 	mov	r9,zero
 800a8ac:	003e6006 	br	800a230 <__alt_data_end+0xff00a230>
 800a8b0:	21003fcc 	andi	r4,r4,255
 800a8b4:	203fc026 	beq	r4,zero,800a7b8 <__alt_data_end+0xff00a7b8>
 800a8b8:	d9c01d85 	stb	r7,118(sp)
 800a8bc:	003fbe06 	br	800a7b8 <__alt_data_end+0xff00a7b8>
 800a8c0:	da802217 	ldw	r10,136(sp)
 800a8c4:	54400017 	ldw	r17,0(r10)
 800a8c8:	50800104 	addi	r2,r10,4
 800a8cc:	883e3b16 	blt	r17,zero,800a1bc <__alt_data_end+0xff00a1bc>
 800a8d0:	d8802215 	stw	r2,136(sp)
 800a8d4:	80c00007 	ldb	r3,0(r16)
 800a8d8:	003db406 	br	8009fac <__alt_data_end+0xff009fac>
 800a8dc:	01000044 	movi	r4,1
 800a8e0:	01c00ac4 	movi	r7,43
 800a8e4:	80c00007 	ldb	r3,0(r16)
 800a8e8:	003db006 	br	8009fac <__alt_data_end+0xff009fac>
 800a8ec:	80c00007 	ldb	r3,0(r16)
 800a8f0:	82800044 	addi	r10,r16,1
 800a8f4:	1b423c26 	beq	r3,r13,800b1e8 <___vfiprintf_internal_r+0x13b8>
 800a8f8:	18bff404 	addi	r2,r3,-48
 800a8fc:	0013883a 	mov	r9,zero
 800a900:	30822b36 	bltu	r6,r2,800b1b0 <___vfiprintf_internal_r+0x1380>
 800a904:	50c00007 	ldb	r3,0(r10)
 800a908:	4a4002a4 	muli	r9,r9,10
 800a90c:	54000044 	addi	r16,r10,1
 800a910:	8015883a 	mov	r10,r16
 800a914:	4893883a 	add	r9,r9,r2
 800a918:	18bff404 	addi	r2,r3,-48
 800a91c:	30bff92e 	bgeu	r6,r2,800a904 <__alt_data_end+0xff00a904>
 800a920:	483da30e 	bge	r9,zero,8009fb0 <__alt_data_end+0xff009fb0>
 800a924:	027fffc4 	movi	r9,-1
 800a928:	003da106 	br	8009fb0 <__alt_data_end+0xff009fb0>
 800a92c:	a5001014 	ori	r20,r20,64
 800a930:	80c00007 	ldb	r3,0(r16)
 800a934:	003d9d06 	br	8009fac <__alt_data_end+0xff009fac>
 800a938:	da802217 	ldw	r10,136(sp)
 800a93c:	d8001d85 	stb	zero,118(sp)
 800a940:	50c00204 	addi	r3,r10,8
 800a944:	54800017 	ldw	r18,0(r10)
 800a948:	54c00117 	ldw	r19,4(r10)
 800a94c:	4801ca16 	blt	r9,zero,800b078 <___vfiprintf_internal_r+0x1248>
 800a950:	013fdfc4 	movi	r4,-129
 800a954:	94c4b03a 	or	r2,r18,r19
 800a958:	d8c02215 	stw	r3,136(sp)
 800a95c:	a128703a 	and	r20,r20,r4
 800a960:	0039883a 	mov	fp,zero
 800a964:	103f341e 	bne	r2,zero,800a638 <__alt_data_end+0xff00a638>
 800a968:	483e2e26 	beq	r9,zero,800a224 <__alt_data_end+0xff00a224>
 800a96c:	0025883a 	mov	r18,zero
 800a970:	94800c04 	addi	r18,r18,48
 800a974:	dc8019c5 	stb	r18,103(sp)
 800a978:	dcc02717 	ldw	r19,156(sp)
 800a97c:	dd4019c4 	addi	r21,sp,103
 800a980:	003e2b06 	br	800a230 <__alt_data_end+0xff00a230>
 800a984:	21003fcc 	andi	r4,r4,255
 800a988:	2002361e 	bne	r4,zero,800b264 <___vfiprintf_internal_r+0x1434>
 800a98c:	1801c126 	beq	r3,zero,800b094 <___vfiprintf_internal_r+0x1264>
 800a990:	04800044 	movi	r18,1
 800a994:	d8c01005 	stb	r3,64(sp)
 800a998:	d8001d85 	stb	zero,118(sp)
 800a99c:	9027883a 	mov	r19,r18
 800a9a0:	dd401004 	addi	r21,sp,64
 800a9a4:	003f1106 	br	800a5ec <__alt_data_end+0xff00a5ec>
 800a9a8:	d9402117 	ldw	r5,132(sp)
 800a9ac:	d9002017 	ldw	r4,128(sp)
 800a9b0:	d9801a04 	addi	r6,sp,104
 800a9b4:	d9c02b15 	stw	r7,172(sp)
 800a9b8:	dbc02a15 	stw	r15,168(sp)
 800a9bc:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800a9c0:	d9c02b17 	ldw	r7,172(sp)
 800a9c4:	dbc02a17 	ldw	r15,168(sp)
 800a9c8:	10006d1e 	bne	r2,zero,800ab80 <___vfiprintf_internal_r+0xd50>
 800a9cc:	d9801b17 	ldw	r6,108(sp)
 800a9d0:	d8801c17 	ldw	r2,112(sp)
 800a9d4:	d811883a 	mov	r8,sp
 800a9d8:	31400044 	addi	r5,r6,1
 800a9dc:	003e3306 	br	800a2ac <__alt_data_end+0xff00a2ac>
 800a9e0:	d9401b17 	ldw	r5,108(sp)
 800a9e4:	d8801c17 	ldw	r2,112(sp)
 800a9e8:	29000044 	addi	r4,r5,1
 800a9ec:	d8c01d87 	ldb	r3,118(sp)
 800a9f0:	183e4d26 	beq	r3,zero,800a328 <__alt_data_end+0xff00a328>
 800a9f4:	00c00044 	movi	r3,1
 800a9f8:	d9401d84 	addi	r5,sp,118
 800a9fc:	10c5883a 	add	r2,r2,r3
 800aa00:	41400015 	stw	r5,0(r8)
 800aa04:	40c00115 	stw	r3,4(r8)
 800aa08:	d8801c15 	stw	r2,112(sp)
 800aa0c:	d9001b15 	stw	r4,108(sp)
 800aa10:	014001c4 	movi	r5,7
 800aa14:	2900a90e 	bge	r5,r4,800acbc <___vfiprintf_internal_r+0xe8c>
 800aa18:	1000da1e 	bne	r2,zero,800ad84 <___vfiprintf_internal_r+0xf54>
 800aa1c:	7000ab1e 	bne	r14,zero,800accc <___vfiprintf_internal_r+0xe9c>
 800aa20:	000b883a 	mov	r5,zero
 800aa24:	1809883a 	mov	r4,r3
 800aa28:	d811883a 	mov	r8,sp
 800aa2c:	00c02004 	movi	r3,128
 800aa30:	e0fe4d26 	beq	fp,r3,800a368 <__alt_data_end+0xff00a368>
 800aa34:	4cf9c83a 	sub	fp,r9,r19
 800aa38:	073e7b0e 	bge	zero,fp,800a428 <__alt_data_end+0xff00a428>
 800aa3c:	01c00404 	movi	r7,16
 800aa40:	3f01900e 	bge	r7,fp,800b084 <___vfiprintf_internal_r+0x1254>
 800aa44:	00c20074 	movhi	r3,2049
 800aa48:	18c7e604 	addi	r3,r3,8088
 800aa4c:	d8c02415 	stw	r3,144(sp)
 800aa50:	034001c4 	movi	r13,7
 800aa54:	00000506 	br	800aa6c <___vfiprintf_internal_r+0xc3c>
 800aa58:	29000084 	addi	r4,r5,2
 800aa5c:	42000204 	addi	r8,r8,8
 800aa60:	180b883a 	mov	r5,r3
 800aa64:	e73ffc04 	addi	fp,fp,-16
 800aa68:	3f000d0e 	bge	r7,fp,800aaa0 <___vfiprintf_internal_r+0xc70>
 800aa6c:	10800404 	addi	r2,r2,16
 800aa70:	28c00044 	addi	r3,r5,1
 800aa74:	45c00015 	stw	r23,0(r8)
 800aa78:	41c00115 	stw	r7,4(r8)
 800aa7c:	d8801c15 	stw	r2,112(sp)
 800aa80:	d8c01b15 	stw	r3,108(sp)
 800aa84:	68fff40e 	bge	r13,r3,800aa58 <__alt_data_end+0xff00aa58>
 800aa88:	1000101e 	bne	r2,zero,800aacc <___vfiprintf_internal_r+0xc9c>
 800aa8c:	e73ffc04 	addi	fp,fp,-16
 800aa90:	01000044 	movi	r4,1
 800aa94:	000b883a 	mov	r5,zero
 800aa98:	d811883a 	mov	r8,sp
 800aa9c:	3f3ff316 	blt	r7,fp,800aa6c <__alt_data_end+0xff00aa6c>
 800aaa0:	da802417 	ldw	r10,144(sp)
 800aaa4:	1705883a 	add	r2,r2,fp
 800aaa8:	47000115 	stw	fp,4(r8)
 800aaac:	42800015 	stw	r10,0(r8)
 800aab0:	d8801c15 	stw	r2,112(sp)
 800aab4:	d9001b15 	stw	r4,108(sp)
 800aab8:	00c001c4 	movi	r3,7
 800aabc:	19003616 	blt	r3,r4,800ab98 <___vfiprintf_internal_r+0xd68>
 800aac0:	42000204 	addi	r8,r8,8
 800aac4:	21000044 	addi	r4,r4,1
 800aac8:	003e5706 	br	800a428 <__alt_data_end+0xff00a428>
 800aacc:	d9402117 	ldw	r5,132(sp)
 800aad0:	d9002017 	ldw	r4,128(sp)
 800aad4:	d9801a04 	addi	r6,sp,104
 800aad8:	d9c02b15 	stw	r7,172(sp)
 800aadc:	db402a15 	stw	r13,168(sp)
 800aae0:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800aae4:	d9c02b17 	ldw	r7,172(sp)
 800aae8:	db402a17 	ldw	r13,168(sp)
 800aaec:	1000241e 	bne	r2,zero,800ab80 <___vfiprintf_internal_r+0xd50>
 800aaf0:	d9401b17 	ldw	r5,108(sp)
 800aaf4:	d8801c17 	ldw	r2,112(sp)
 800aaf8:	d811883a 	mov	r8,sp
 800aafc:	29000044 	addi	r4,r5,1
 800ab00:	003fd806 	br	800aa64 <__alt_data_end+0xff00aa64>
 800ab04:	d9401b17 	ldw	r5,108(sp)
 800ab08:	00c20074 	movhi	r3,2049
 800ab0c:	18c7ea04 	addi	r3,r3,8104
 800ab10:	d8c02415 	stw	r3,144(sp)
 800ab14:	29400044 	addi	r5,r5,1
 800ab18:	d8c02417 	ldw	r3,144(sp)
 800ab1c:	14c5883a 	add	r2,r2,r19
 800ab20:	44c00115 	stw	r19,4(r8)
 800ab24:	40c00015 	stw	r3,0(r8)
 800ab28:	d8801c15 	stw	r2,112(sp)
 800ab2c:	d9401b15 	stw	r5,108(sp)
 800ab30:	00c001c4 	movi	r3,7
 800ab34:	1940070e 	bge	r3,r5,800ab54 <___vfiprintf_internal_r+0xd24>
 800ab38:	103e4826 	beq	r2,zero,800a45c <__alt_data_end+0xff00a45c>
 800ab3c:	d9402117 	ldw	r5,132(sp)
 800ab40:	d9002017 	ldw	r4,128(sp)
 800ab44:	d9801a04 	addi	r6,sp,104
 800ab48:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800ab4c:	10000c1e 	bne	r2,zero,800ab80 <___vfiprintf_internal_r+0xd50>
 800ab50:	d8801c17 	ldw	r2,112(sp)
 800ab54:	8c80010e 	bge	r17,r18,800ab5c <___vfiprintf_internal_r+0xd2c>
 800ab58:	9023883a 	mov	r17,r18
 800ab5c:	da802317 	ldw	r10,140(sp)
 800ab60:	5455883a 	add	r10,r10,r17
 800ab64:	da802315 	stw	r10,140(sp)
 800ab68:	103e4126 	beq	r2,zero,800a470 <__alt_data_end+0xff00a470>
 800ab6c:	d9402117 	ldw	r5,132(sp)
 800ab70:	d9002017 	ldw	r4,128(sp)
 800ab74:	d9801a04 	addi	r6,sp,104
 800ab78:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800ab7c:	103e3c26 	beq	r2,zero,800a470 <__alt_data_end+0xff00a470>
 800ab80:	dd002117 	ldw	r20,132(sp)
 800ab84:	a080030b 	ldhu	r2,12(r20)
 800ab88:	1080100c 	andi	r2,r2,64
 800ab8c:	1001231e 	bne	r2,zero,800b01c <___vfiprintf_internal_r+0x11ec>
 800ab90:	d8802317 	ldw	r2,140(sp)
 800ab94:	003d7b06 	br	800a184 <__alt_data_end+0xff00a184>
 800ab98:	1000991e 	bne	r2,zero,800ae00 <___vfiprintf_internal_r+0xfd0>
 800ab9c:	00c00044 	movi	r3,1
 800aba0:	9805883a 	mov	r2,r19
 800aba4:	dd400015 	stw	r21,0(sp)
 800aba8:	dcc00115 	stw	r19,4(sp)
 800abac:	dcc01c15 	stw	r19,112(sp)
 800abb0:	d8c01b15 	stw	r3,108(sp)
 800abb4:	d811883a 	mov	r8,sp
 800abb8:	42000204 	addi	r8,r8,8
 800abbc:	a2c0010c 	andi	r11,r20,4
 800abc0:	583fe426 	beq	r11,zero,800ab54 <__alt_data_end+0xff00ab54>
 800abc4:	8ca7c83a 	sub	r19,r17,r18
 800abc8:	04ffe20e 	bge	zero,r19,800ab54 <__alt_data_end+0xff00ab54>
 800abcc:	01c00404 	movi	r7,16
 800abd0:	3cffcc0e 	bge	r7,r19,800ab04 <__alt_data_end+0xff00ab04>
 800abd4:	02820074 	movhi	r10,2049
 800abd8:	5287ea04 	addi	r10,r10,8104
 800abdc:	d9001b17 	ldw	r4,108(sp)
 800abe0:	da802415 	stw	r10,144(sp)
 800abe4:	382b883a 	mov	r21,r7
 800abe8:	050001c4 	movi	r20,7
 800abec:	df002017 	ldw	fp,128(sp)
 800abf0:	00000506 	br	800ac08 <___vfiprintf_internal_r+0xdd8>
 800abf4:	21400084 	addi	r5,r4,2
 800abf8:	42000204 	addi	r8,r8,8
 800abfc:	1809883a 	mov	r4,r3
 800ac00:	9cfffc04 	addi	r19,r19,-16
 800ac04:	acffc40e 	bge	r21,r19,800ab18 <__alt_data_end+0xff00ab18>
 800ac08:	10800404 	addi	r2,r2,16
 800ac0c:	20c00044 	addi	r3,r4,1
 800ac10:	45800015 	stw	r22,0(r8)
 800ac14:	45400115 	stw	r21,4(r8)
 800ac18:	d8801c15 	stw	r2,112(sp)
 800ac1c:	d8c01b15 	stw	r3,108(sp)
 800ac20:	a0fff40e 	bge	r20,r3,800abf4 <__alt_data_end+0xff00abf4>
 800ac24:	1000041e 	bne	r2,zero,800ac38 <___vfiprintf_internal_r+0xe08>
 800ac28:	01400044 	movi	r5,1
 800ac2c:	0009883a 	mov	r4,zero
 800ac30:	d811883a 	mov	r8,sp
 800ac34:	003ff206 	br	800ac00 <__alt_data_end+0xff00ac00>
 800ac38:	d9402117 	ldw	r5,132(sp)
 800ac3c:	d9801a04 	addi	r6,sp,104
 800ac40:	e009883a 	mov	r4,fp
 800ac44:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800ac48:	103fcd1e 	bne	r2,zero,800ab80 <__alt_data_end+0xff00ab80>
 800ac4c:	d9001b17 	ldw	r4,108(sp)
 800ac50:	d8801c17 	ldw	r2,112(sp)
 800ac54:	d811883a 	mov	r8,sp
 800ac58:	21400044 	addi	r5,r4,1
 800ac5c:	003fe806 	br	800ac00 <__alt_data_end+0xff00ac00>
 800ac60:	d9402117 	ldw	r5,132(sp)
 800ac64:	d9002017 	ldw	r4,128(sp)
 800ac68:	d9801a04 	addi	r6,sp,104
 800ac6c:	d9c02b15 	stw	r7,172(sp)
 800ac70:	db402a15 	stw	r13,168(sp)
 800ac74:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800ac78:	d9c02b17 	ldw	r7,172(sp)
 800ac7c:	db402a17 	ldw	r13,168(sp)
 800ac80:	103fbf1e 	bne	r2,zero,800ab80 <__alt_data_end+0xff00ab80>
 800ac84:	d9401b17 	ldw	r5,108(sp)
 800ac88:	d8801c17 	ldw	r2,112(sp)
 800ac8c:	d811883a 	mov	r8,sp
 800ac90:	29800044 	addi	r6,r5,1
 800ac94:	003dc406 	br	800a3a8 <__alt_data_end+0xff00a3a8>
 800ac98:	1000d21e 	bne	r2,zero,800afe4 <___vfiprintf_internal_r+0x11b4>
 800ac9c:	d8c01d87 	ldb	r3,118(sp)
 800aca0:	18009526 	beq	r3,zero,800aef8 <___vfiprintf_internal_r+0x10c8>
 800aca4:	00800044 	movi	r2,1
 800aca8:	d8c01d84 	addi	r3,sp,118
 800acac:	1009883a 	mov	r4,r2
 800acb0:	d8c00015 	stw	r3,0(sp)
 800acb4:	d8800115 	stw	r2,4(sp)
 800acb8:	d811883a 	mov	r8,sp
 800acbc:	200b883a 	mov	r5,r4
 800acc0:	42000204 	addi	r8,r8,8
 800acc4:	21000044 	addi	r4,r4,1
 800acc8:	003d9706 	br	800a328 <__alt_data_end+0xff00a328>
 800accc:	d9001d04 	addi	r4,sp,116
 800acd0:	00800084 	movi	r2,2
 800acd4:	d9000015 	stw	r4,0(sp)
 800acd8:	d8800115 	stw	r2,4(sp)
 800acdc:	1809883a 	mov	r4,r3
 800ace0:	d811883a 	mov	r8,sp
 800ace4:	200b883a 	mov	r5,r4
 800ace8:	42000204 	addi	r8,r8,8
 800acec:	21000044 	addi	r4,r4,1
 800acf0:	003f4e06 	br	800aa2c <__alt_data_end+0xff00aa2c>
 800acf4:	d8001d85 	stb	zero,118(sp)
 800acf8:	48005016 	blt	r9,zero,800ae3c <___vfiprintf_internal_r+0x100c>
 800acfc:	00ffdfc4 	movi	r3,-129
 800ad00:	94c4b03a 	or	r2,r18,r19
 800ad04:	a0e8703a 	and	r20,r20,r3
 800ad08:	103d4426 	beq	r2,zero,800a21c <__alt_data_end+0xff00a21c>
 800ad0c:	0039883a 	mov	fp,zero
 800ad10:	d9002617 	ldw	r4,152(sp)
 800ad14:	dd401a04 	addi	r21,sp,104
 800ad18:	908003cc 	andi	r2,r18,15
 800ad1c:	9806973a 	slli	r3,r19,28
 800ad20:	2085883a 	add	r2,r4,r2
 800ad24:	9024d13a 	srli	r18,r18,4
 800ad28:	10800003 	ldbu	r2,0(r2)
 800ad2c:	9826d13a 	srli	r19,r19,4
 800ad30:	ad7fffc4 	addi	r21,r21,-1
 800ad34:	1ca4b03a 	or	r18,r3,r18
 800ad38:	a8800005 	stb	r2,0(r21)
 800ad3c:	94c4b03a 	or	r2,r18,r19
 800ad40:	103ff51e 	bne	r2,zero,800ad18 <__alt_data_end+0xff00ad18>
 800ad44:	003e5906 	br	800a6ac <__alt_data_end+0xff00a6ac>
 800ad48:	d9402117 	ldw	r5,132(sp)
 800ad4c:	d9002017 	ldw	r4,128(sp)
 800ad50:	d9801a04 	addi	r6,sp,104
 800ad54:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800ad58:	103f891e 	bne	r2,zero,800ab80 <__alt_data_end+0xff00ab80>
 800ad5c:	d8801c17 	ldw	r2,112(sp)
 800ad60:	d811883a 	mov	r8,sp
 800ad64:	003f9506 	br	800abbc <__alt_data_end+0xff00abbc>
 800ad68:	d9402117 	ldw	r5,132(sp)
 800ad6c:	d9002017 	ldw	r4,128(sp)
 800ad70:	d9801a04 	addi	r6,sp,104
 800ad74:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800ad78:	103f811e 	bne	r2,zero,800ab80 <__alt_data_end+0xff00ab80>
 800ad7c:	d811883a 	mov	r8,sp
 800ad80:	003ced06 	br	800a138 <__alt_data_end+0xff00a138>
 800ad84:	d9402117 	ldw	r5,132(sp)
 800ad88:	d9002017 	ldw	r4,128(sp)
 800ad8c:	d9801a04 	addi	r6,sp,104
 800ad90:	da402c15 	stw	r9,176(sp)
 800ad94:	db802a15 	stw	r14,168(sp)
 800ad98:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800ad9c:	da402c17 	ldw	r9,176(sp)
 800ada0:	db802a17 	ldw	r14,168(sp)
 800ada4:	103f761e 	bne	r2,zero,800ab80 <__alt_data_end+0xff00ab80>
 800ada8:	d9401b17 	ldw	r5,108(sp)
 800adac:	d8801c17 	ldw	r2,112(sp)
 800adb0:	d811883a 	mov	r8,sp
 800adb4:	29000044 	addi	r4,r5,1
 800adb8:	003d5b06 	br	800a328 <__alt_data_end+0xff00a328>
 800adbc:	d9402117 	ldw	r5,132(sp)
 800adc0:	d9002017 	ldw	r4,128(sp)
 800adc4:	d9801a04 	addi	r6,sp,104
 800adc8:	da402c15 	stw	r9,176(sp)
 800adcc:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800add0:	da402c17 	ldw	r9,176(sp)
 800add4:	103f6a1e 	bne	r2,zero,800ab80 <__alt_data_end+0xff00ab80>
 800add8:	d9401b17 	ldw	r5,108(sp)
 800addc:	d8801c17 	ldw	r2,112(sp)
 800ade0:	d811883a 	mov	r8,sp
 800ade4:	29000044 	addi	r4,r5,1
 800ade8:	003f1006 	br	800aa2c <__alt_data_end+0xff00aa2c>
 800adec:	1000c31e 	bne	r2,zero,800b0fc <___vfiprintf_internal_r+0x12cc>
 800adf0:	01000044 	movi	r4,1
 800adf4:	000b883a 	mov	r5,zero
 800adf8:	d811883a 	mov	r8,sp
 800adfc:	003f0d06 	br	800aa34 <__alt_data_end+0xff00aa34>
 800ae00:	d9402117 	ldw	r5,132(sp)
 800ae04:	d9002017 	ldw	r4,128(sp)
 800ae08:	d9801a04 	addi	r6,sp,104
 800ae0c:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800ae10:	103f5b1e 	bne	r2,zero,800ab80 <__alt_data_end+0xff00ab80>
 800ae14:	d9001b17 	ldw	r4,108(sp)
 800ae18:	d8801c17 	ldw	r2,112(sp)
 800ae1c:	d811883a 	mov	r8,sp
 800ae20:	21000044 	addi	r4,r4,1
 800ae24:	003d8006 	br	800a428 <__alt_data_end+0xff00a428>
 800ae28:	01020074 	movhi	r4,2049
 800ae2c:	21078504 	addi	r4,r4,7700
 800ae30:	d9002615 	stw	r4,152(sp)
 800ae34:	d8c02215 	stw	r3,136(sp)
 800ae38:	1029883a 	mov	r20,r2
 800ae3c:	94c4b03a 	or	r2,r18,r19
 800ae40:	103fb21e 	bne	r2,zero,800ad0c <__alt_data_end+0xff00ad0c>
 800ae44:	0039883a 	mov	fp,zero
 800ae48:	00800084 	movi	r2,2
 800ae4c:	003e6b06 	br	800a7fc <__alt_data_end+0xff00a7fc>
 800ae50:	da802217 	ldw	r10,136(sp)
 800ae54:	d8001d85 	stb	zero,118(sp)
 800ae58:	0027883a 	mov	r19,zero
 800ae5c:	50800104 	addi	r2,r10,4
 800ae60:	54800017 	ldw	r18,0(r10)
 800ae64:	483e6016 	blt	r9,zero,800a7e8 <__alt_data_end+0xff00a7e8>
 800ae68:	00ffdfc4 	movi	r3,-129
 800ae6c:	d8802215 	stw	r2,136(sp)
 800ae70:	a0e8703a 	and	r20,r20,r3
 800ae74:	0039883a 	mov	fp,zero
 800ae78:	903ebb26 	beq	r18,zero,800a968 <__alt_data_end+0xff00a968>
 800ae7c:	00800244 	movi	r2,9
 800ae80:	14bdee36 	bltu	r2,r18,800a63c <__alt_data_end+0xff00a63c>
 800ae84:	003eba06 	br	800a970 <__alt_data_end+0xff00a970>
 800ae88:	00800c04 	movi	r2,48
 800ae8c:	d8c01d45 	stb	r3,117(sp)
 800ae90:	d8801d05 	stb	r2,116(sp)
 800ae94:	d8001d85 	stb	zero,118(sp)
 800ae98:	a0c00094 	ori	r3,r20,2
 800ae9c:	4800a916 	blt	r9,zero,800b144 <___vfiprintf_internal_r+0x1314>
 800aea0:	00bfdfc4 	movi	r2,-129
 800aea4:	a096703a 	and	r11,r20,r2
 800aea8:	5d000094 	ori	r20,r11,2
 800aeac:	0039883a 	mov	fp,zero
 800aeb0:	003f9706 	br	800ad10 <__alt_data_end+0xff00ad10>
 800aeb4:	8025883a 	mov	r18,r16
 800aeb8:	003c2e06 	br	8009f74 <__alt_data_end+0xff009f74>
 800aebc:	00820074 	movhi	r2,2049
 800aec0:	10878504 	addi	r2,r2,7700
 800aec4:	0039883a 	mov	fp,zero
 800aec8:	d8802615 	stw	r2,152(sp)
 800aecc:	003f9006 	br	800ad10 <__alt_data_end+0xff00ad10>
 800aed0:	04a5c83a 	sub	r18,zero,r18
 800aed4:	07000b44 	movi	fp,45
 800aed8:	9004c03a 	cmpne	r2,r18,zero
 800aedc:	04e7c83a 	sub	r19,zero,r19
 800aee0:	df001d85 	stb	fp,118(sp)
 800aee4:	98a7c83a 	sub	r19,r19,r2
 800aee8:	48009f16 	blt	r9,zero,800b168 <___vfiprintf_internal_r+0x1338>
 800aeec:	00bfdfc4 	movi	r2,-129
 800aef0:	a0a8703a 	and	r20,r20,r2
 800aef4:	003dd006 	br	800a638 <__alt_data_end+0xff00a638>
 800aef8:	70004c26 	beq	r14,zero,800b02c <___vfiprintf_internal_r+0x11fc>
 800aefc:	00800084 	movi	r2,2
 800af00:	d8c01d04 	addi	r3,sp,116
 800af04:	d8c00015 	stw	r3,0(sp)
 800af08:	d8800115 	stw	r2,4(sp)
 800af0c:	01000044 	movi	r4,1
 800af10:	d811883a 	mov	r8,sp
 800af14:	003f7306 	br	800ace4 <__alt_data_end+0xff00ace4>
 800af18:	a080100c 	andi	r2,r20,64
 800af1c:	da802217 	ldw	r10,136(sp)
 800af20:	103e0626 	beq	r2,zero,800a73c <__alt_data_end+0xff00a73c>
 800af24:	5480000f 	ldh	r18,0(r10)
 800af28:	52800104 	addi	r10,r10,4
 800af2c:	da802215 	stw	r10,136(sp)
 800af30:	9027d7fa 	srai	r19,r18,31
 800af34:	9805883a 	mov	r2,r19
 800af38:	003db806 	br	800a61c <__alt_data_end+0xff00a61c>
 800af3c:	a080040c 	andi	r2,r20,16
 800af40:	1000091e 	bne	r2,zero,800af68 <___vfiprintf_internal_r+0x1138>
 800af44:	a2c0100c 	andi	r11,r20,64
 800af48:	58000726 	beq	r11,zero,800af68 <___vfiprintf_internal_r+0x1138>
 800af4c:	da802217 	ldw	r10,136(sp)
 800af50:	50800017 	ldw	r2,0(r10)
 800af54:	52800104 	addi	r10,r10,4
 800af58:	da802215 	stw	r10,136(sp)
 800af5c:	da802317 	ldw	r10,140(sp)
 800af60:	1280000d 	sth	r10,0(r2)
 800af64:	003be706 	br	8009f04 <__alt_data_end+0xff009f04>
 800af68:	da802217 	ldw	r10,136(sp)
 800af6c:	50800017 	ldw	r2,0(r10)
 800af70:	52800104 	addi	r10,r10,4
 800af74:	da802215 	stw	r10,136(sp)
 800af78:	da802317 	ldw	r10,140(sp)
 800af7c:	12800015 	stw	r10,0(r2)
 800af80:	003be006 	br	8009f04 <__alt_data_end+0xff009f04>
 800af84:	a080100c 	andi	r2,r20,64
 800af88:	da802217 	ldw	r10,136(sp)
 800af8c:	10003026 	beq	r2,zero,800b050 <___vfiprintf_internal_r+0x1220>
 800af90:	5480000b 	ldhu	r18,0(r10)
 800af94:	52800104 	addi	r10,r10,4
 800af98:	0027883a 	mov	r19,zero
 800af9c:	da802215 	stw	r10,136(sp)
 800afa0:	003d8006 	br	800a5a4 <__alt_data_end+0xff00a5a4>
 800afa4:	80c00007 	ldb	r3,0(r16)
 800afa8:	003c0006 	br	8009fac <__alt_data_end+0xff009fac>
 800afac:	a080100c 	andi	r2,r20,64
 800afb0:	d8001d85 	stb	zero,118(sp)
 800afb4:	da802217 	ldw	r10,136(sp)
 800afb8:	1000201e 	bne	r2,zero,800b03c <___vfiprintf_internal_r+0x120c>
 800afbc:	50800104 	addi	r2,r10,4
 800afc0:	54800017 	ldw	r18,0(r10)
 800afc4:	0027883a 	mov	r19,zero
 800afc8:	483def0e 	bge	r9,zero,800a788 <__alt_data_end+0xff00a788>
 800afcc:	94c6b03a 	or	r3,r18,r19
 800afd0:	d8802215 	stw	r2,136(sp)
 800afd4:	183d4e1e 	bne	r3,zero,800a510 <__alt_data_end+0xff00a510>
 800afd8:	0039883a 	mov	fp,zero
 800afdc:	0005883a 	mov	r2,zero
 800afe0:	003e0606 	br	800a7fc <__alt_data_end+0xff00a7fc>
 800afe4:	d9402117 	ldw	r5,132(sp)
 800afe8:	d9002017 	ldw	r4,128(sp)
 800afec:	d9801a04 	addi	r6,sp,104
 800aff0:	da402c15 	stw	r9,176(sp)
 800aff4:	db802a15 	stw	r14,168(sp)
 800aff8:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800affc:	da402c17 	ldw	r9,176(sp)
 800b000:	db802a17 	ldw	r14,168(sp)
 800b004:	103ede1e 	bne	r2,zero,800ab80 <__alt_data_end+0xff00ab80>
 800b008:	d9401b17 	ldw	r5,108(sp)
 800b00c:	d8801c17 	ldw	r2,112(sp)
 800b010:	d811883a 	mov	r8,sp
 800b014:	29000044 	addi	r4,r5,1
 800b018:	003e7406 	br	800a9ec <__alt_data_end+0xff00a9ec>
 800b01c:	00bfffc4 	movi	r2,-1
 800b020:	003c5806 	br	800a184 <__alt_data_end+0xff00a184>
 800b024:	d811883a 	mov	r8,sp
 800b028:	003ee806 	br	800abcc <__alt_data_end+0xff00abcc>
 800b02c:	000b883a 	mov	r5,zero
 800b030:	01000044 	movi	r4,1
 800b034:	d811883a 	mov	r8,sp
 800b038:	003e7c06 	br	800aa2c <__alt_data_end+0xff00aa2c>
 800b03c:	50800104 	addi	r2,r10,4
 800b040:	5480000b 	ldhu	r18,0(r10)
 800b044:	0027883a 	mov	r19,zero
 800b048:	483dcf0e 	bge	r9,zero,800a788 <__alt_data_end+0xff00a788>
 800b04c:	003fdf06 	br	800afcc <__alt_data_end+0xff00afcc>
 800b050:	54800017 	ldw	r18,0(r10)
 800b054:	52800104 	addi	r10,r10,4
 800b058:	0027883a 	mov	r19,zero
 800b05c:	da802215 	stw	r10,136(sp)
 800b060:	003d5006 	br	800a5a4 <__alt_data_end+0xff00a5a4>
 800b064:	50800104 	addi	r2,r10,4
 800b068:	5480000b 	ldhu	r18,0(r10)
 800b06c:	0027883a 	mov	r19,zero
 800b070:	483f7d0e 	bge	r9,zero,800ae68 <__alt_data_end+0xff00ae68>
 800b074:	003ddc06 	br	800a7e8 <__alt_data_end+0xff00a7e8>
 800b078:	d8c02215 	stw	r3,136(sp)
 800b07c:	0039883a 	mov	fp,zero
 800b080:	003ddb06 	br	800a7f0 <__alt_data_end+0xff00a7f0>
 800b084:	02820074 	movhi	r10,2049
 800b088:	5287e604 	addi	r10,r10,8088
 800b08c:	da802415 	stw	r10,144(sp)
 800b090:	003e8306 	br	800aaa0 <__alt_data_end+0xff00aaa0>
 800b094:	d8801c17 	ldw	r2,112(sp)
 800b098:	dd002117 	ldw	r20,132(sp)
 800b09c:	103eb926 	beq	r2,zero,800ab84 <__alt_data_end+0xff00ab84>
 800b0a0:	d9002017 	ldw	r4,128(sp)
 800b0a4:	d9801a04 	addi	r6,sp,104
 800b0a8:	a00b883a 	mov	r5,r20
 800b0ac:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800b0b0:	003eb406 	br	800ab84 <__alt_data_end+0xff00ab84>
 800b0b4:	80c00043 	ldbu	r3,1(r16)
 800b0b8:	a5000814 	ori	r20,r20,32
 800b0bc:	84000044 	addi	r16,r16,1
 800b0c0:	18c03fcc 	andi	r3,r3,255
 800b0c4:	18c0201c 	xori	r3,r3,128
 800b0c8:	18ffe004 	addi	r3,r3,-128
 800b0cc:	003bb706 	br	8009fac <__alt_data_end+0xff009fac>
 800b0d0:	a809883a 	mov	r4,r21
 800b0d4:	d8c02a15 	stw	r3,168(sp)
 800b0d8:	da002b15 	stw	r8,172(sp)
 800b0dc:	8009c840 	call	8009c84 <strlen>
 800b0e0:	d8c02a17 	ldw	r3,168(sp)
 800b0e4:	1027883a 	mov	r19,r2
 800b0e8:	df001d83 	ldbu	fp,118(sp)
 800b0ec:	d8c02215 	stw	r3,136(sp)
 800b0f0:	0013883a 	mov	r9,zero
 800b0f4:	da002b17 	ldw	r8,172(sp)
 800b0f8:	003c4d06 	br	800a230 <__alt_data_end+0xff00a230>
 800b0fc:	d9402117 	ldw	r5,132(sp)
 800b100:	d9002017 	ldw	r4,128(sp)
 800b104:	d9801a04 	addi	r6,sp,104
 800b108:	da402c15 	stw	r9,176(sp)
 800b10c:	8009d1c0 	call	8009d1c <__sprint_r.part.0>
 800b110:	da402c17 	ldw	r9,176(sp)
 800b114:	103e9a1e 	bne	r2,zero,800ab80 <__alt_data_end+0xff00ab80>
 800b118:	d9401b17 	ldw	r5,108(sp)
 800b11c:	d8801c17 	ldw	r2,112(sp)
 800b120:	d811883a 	mov	r8,sp
 800b124:	29000044 	addi	r4,r5,1
 800b128:	003e4206 	br	800aa34 <__alt_data_end+0xff00aa34>
 800b12c:	d9401b17 	ldw	r5,108(sp)
 800b130:	01020074 	movhi	r4,2049
 800b134:	2107ea04 	addi	r4,r4,8104
 800b138:	d9002415 	stw	r4,144(sp)
 800b13c:	29400044 	addi	r5,r5,1
 800b140:	003c6d06 	br	800a2f8 <__alt_data_end+0xff00a2f8>
 800b144:	0039883a 	mov	fp,zero
 800b148:	00800084 	movi	r2,2
 800b14c:	10803fcc 	andi	r2,r2,255
 800b150:	01000044 	movi	r4,1
 800b154:	11001e26 	beq	r2,r4,800b1d0 <___vfiprintf_internal_r+0x13a0>
 800b158:	01000084 	movi	r4,2
 800b15c:	11001e1e 	bne	r2,r4,800b1d8 <___vfiprintf_internal_r+0x13a8>
 800b160:	1829883a 	mov	r20,r3
 800b164:	003eea06 	br	800ad10 <__alt_data_end+0xff00ad10>
 800b168:	a007883a 	mov	r3,r20
 800b16c:	00800044 	movi	r2,1
 800b170:	003ff606 	br	800b14c <__alt_data_end+0xff00b14c>
 800b174:	00800184 	movi	r2,6
 800b178:	1240012e 	bgeu	r2,r9,800b180 <___vfiprintf_internal_r+0x1350>
 800b17c:	1013883a 	mov	r9,r2
 800b180:	4827883a 	mov	r19,r9
 800b184:	4825883a 	mov	r18,r9
 800b188:	48001516 	blt	r9,zero,800b1e0 <___vfiprintf_internal_r+0x13b0>
 800b18c:	05420074 	movhi	r21,2049
 800b190:	d8c02215 	stw	r3,136(sp)
 800b194:	ad478a04 	addi	r21,r21,7720
 800b198:	003d1406 	br	800a5ec <__alt_data_end+0xff00a5ec>
 800b19c:	02820074 	movhi	r10,2049
 800b1a0:	5287e604 	addi	r10,r10,8088
 800b1a4:	da802415 	stw	r10,144(sp)
 800b1a8:	200d883a 	mov	r6,r4
 800b1ac:	003c9106 	br	800a3f4 <__alt_data_end+0xff00a3f4>
 800b1b0:	5021883a 	mov	r16,r10
 800b1b4:	0013883a 	mov	r9,zero
 800b1b8:	003b7d06 	br	8009fb0 <__alt_data_end+0xff009fb0>
 800b1bc:	4827883a 	mov	r19,r9
 800b1c0:	df001d83 	ldbu	fp,118(sp)
 800b1c4:	d8c02215 	stw	r3,136(sp)
 800b1c8:	0013883a 	mov	r9,zero
 800b1cc:	003c1806 	br	800a230 <__alt_data_end+0xff00a230>
 800b1d0:	1829883a 	mov	r20,r3
 800b1d4:	003d1806 	br	800a638 <__alt_data_end+0xff00a638>
 800b1d8:	1829883a 	mov	r20,r3
 800b1dc:	003ccd06 	br	800a514 <__alt_data_end+0xff00a514>
 800b1e0:	0025883a 	mov	r18,zero
 800b1e4:	003fe906 	br	800b18c <__alt_data_end+0xff00b18c>
 800b1e8:	d8802217 	ldw	r2,136(sp)
 800b1ec:	80c00043 	ldbu	r3,1(r16)
 800b1f0:	5021883a 	mov	r16,r10
 800b1f4:	12400017 	ldw	r9,0(r2)
 800b1f8:	10800104 	addi	r2,r2,4
 800b1fc:	d8802215 	stw	r2,136(sp)
 800b200:	483faf0e 	bge	r9,zero,800b0c0 <__alt_data_end+0xff00b0c0>
 800b204:	18c03fcc 	andi	r3,r3,255
 800b208:	18c0201c 	xori	r3,r3,128
 800b20c:	027fffc4 	movi	r9,-1
 800b210:	18ffe004 	addi	r3,r3,-128
 800b214:	003b6506 	br	8009fac <__alt_data_end+0xff009fac>
 800b218:	d9c01d85 	stb	r7,118(sp)
 800b21c:	003ca006 	br	800a4a0 <__alt_data_end+0xff00a4a0>
 800b220:	d9c01d85 	stb	r7,118(sp)
 800b224:	003cad06 	br	800a4dc <__alt_data_end+0xff00a4dc>
 800b228:	d9c01d85 	stb	r7,118(sp)
 800b22c:	003d7d06 	br	800a824 <__alt_data_end+0xff00a824>
 800b230:	d9c01d85 	stb	r7,118(sp)
 800b234:	003d5f06 	br	800a7b4 <__alt_data_end+0xff00a7b4>
 800b238:	a080004c 	andi	r2,r20,1
 800b23c:	0039883a 	mov	fp,zero
 800b240:	10000526 	beq	r2,zero,800b258 <___vfiprintf_internal_r+0x1428>
 800b244:	00800c04 	movi	r2,48
 800b248:	d88019c5 	stb	r2,103(sp)
 800b24c:	dcc02717 	ldw	r19,156(sp)
 800b250:	dd4019c4 	addi	r21,sp,103
 800b254:	003bf606 	br	800a230 <__alt_data_end+0xff00a230>
 800b258:	0027883a 	mov	r19,zero
 800b25c:	dd401a04 	addi	r21,sp,104
 800b260:	003bf306 	br	800a230 <__alt_data_end+0xff00a230>
 800b264:	d9c01d85 	stb	r7,118(sp)
 800b268:	003dc806 	br	800a98c <__alt_data_end+0xff00a98c>
 800b26c:	d9c01d85 	stb	r7,118(sp)
 800b270:	003d3a06 	br	800a75c <__alt_data_end+0xff00a75c>
 800b274:	d9c01d85 	stb	r7,118(sp)
 800b278:	003d2a06 	br	800a724 <__alt_data_end+0xff00a724>
 800b27c:	d9c01d85 	stb	r7,118(sp)
 800b280:	003cde06 	br	800a5fc <__alt_data_end+0xff00a5fc>
 800b284:	d9c01d85 	stb	r7,118(sp)
 800b288:	003cbc06 	br	800a57c <__alt_data_end+0xff00a57c>

0800b28c <__vfiprintf_internal>:
 800b28c:	00820074 	movhi	r2,2049
 800b290:	108eaa04 	addi	r2,r2,15016
 800b294:	300f883a 	mov	r7,r6
 800b298:	280d883a 	mov	r6,r5
 800b29c:	200b883a 	mov	r5,r4
 800b2a0:	11000017 	ldw	r4,0(r2)
 800b2a4:	8009e301 	jmpi	8009e30 <___vfiprintf_internal_r>

0800b2a8 <__sbprintf>:
 800b2a8:	2880030b 	ldhu	r2,12(r5)
 800b2ac:	2ac01917 	ldw	r11,100(r5)
 800b2b0:	2a80038b 	ldhu	r10,14(r5)
 800b2b4:	2a400717 	ldw	r9,28(r5)
 800b2b8:	2a000917 	ldw	r8,36(r5)
 800b2bc:	defee204 	addi	sp,sp,-1144
 800b2c0:	00c10004 	movi	r3,1024
 800b2c4:	dc011a15 	stw	r16,1128(sp)
 800b2c8:	10bfff4c 	andi	r2,r2,65533
 800b2cc:	2821883a 	mov	r16,r5
 800b2d0:	d8cb883a 	add	r5,sp,r3
 800b2d4:	dc811c15 	stw	r18,1136(sp)
 800b2d8:	dc411b15 	stw	r17,1132(sp)
 800b2dc:	dfc11d15 	stw	ra,1140(sp)
 800b2e0:	2025883a 	mov	r18,r4
 800b2e4:	d881030d 	sth	r2,1036(sp)
 800b2e8:	dac11915 	stw	r11,1124(sp)
 800b2ec:	da81038d 	sth	r10,1038(sp)
 800b2f0:	da410715 	stw	r9,1052(sp)
 800b2f4:	da010915 	stw	r8,1060(sp)
 800b2f8:	dec10015 	stw	sp,1024(sp)
 800b2fc:	dec10415 	stw	sp,1040(sp)
 800b300:	d8c10215 	stw	r3,1032(sp)
 800b304:	d8c10515 	stw	r3,1044(sp)
 800b308:	d8010615 	stw	zero,1048(sp)
 800b30c:	8009e300 	call	8009e30 <___vfiprintf_internal_r>
 800b310:	1023883a 	mov	r17,r2
 800b314:	10000416 	blt	r2,zero,800b328 <__sbprintf+0x80>
 800b318:	d9410004 	addi	r5,sp,1024
 800b31c:	9009883a 	mov	r4,r18
 800b320:	80070600 	call	8007060 <_fflush_r>
 800b324:	10000d1e 	bne	r2,zero,800b35c <__sbprintf+0xb4>
 800b328:	d881030b 	ldhu	r2,1036(sp)
 800b32c:	1080100c 	andi	r2,r2,64
 800b330:	10000326 	beq	r2,zero,800b340 <__sbprintf+0x98>
 800b334:	8080030b 	ldhu	r2,12(r16)
 800b338:	10801014 	ori	r2,r2,64
 800b33c:	8080030d 	sth	r2,12(r16)
 800b340:	8805883a 	mov	r2,r17
 800b344:	dfc11d17 	ldw	ra,1140(sp)
 800b348:	dc811c17 	ldw	r18,1136(sp)
 800b34c:	dc411b17 	ldw	r17,1132(sp)
 800b350:	dc011a17 	ldw	r16,1128(sp)
 800b354:	dec11e04 	addi	sp,sp,1144
 800b358:	f800283a 	ret
 800b35c:	047fffc4 	movi	r17,-1
 800b360:	003ff106 	br	800b328 <__alt_data_end+0xff00b328>

0800b364 <__swbuf_r>:
 800b364:	defffb04 	addi	sp,sp,-20
 800b368:	dcc00315 	stw	r19,12(sp)
 800b36c:	dc800215 	stw	r18,8(sp)
 800b370:	dc000015 	stw	r16,0(sp)
 800b374:	dfc00415 	stw	ra,16(sp)
 800b378:	dc400115 	stw	r17,4(sp)
 800b37c:	2025883a 	mov	r18,r4
 800b380:	2827883a 	mov	r19,r5
 800b384:	3021883a 	mov	r16,r6
 800b388:	20000226 	beq	r4,zero,800b394 <__swbuf_r+0x30>
 800b38c:	20800e17 	ldw	r2,56(r4)
 800b390:	10004226 	beq	r2,zero,800b49c <__swbuf_r+0x138>
 800b394:	80800617 	ldw	r2,24(r16)
 800b398:	8100030b 	ldhu	r4,12(r16)
 800b39c:	80800215 	stw	r2,8(r16)
 800b3a0:	2080020c 	andi	r2,r4,8
 800b3a4:	10003626 	beq	r2,zero,800b480 <__swbuf_r+0x11c>
 800b3a8:	80c00417 	ldw	r3,16(r16)
 800b3ac:	18003426 	beq	r3,zero,800b480 <__swbuf_r+0x11c>
 800b3b0:	2088000c 	andi	r2,r4,8192
 800b3b4:	9c403fcc 	andi	r17,r19,255
 800b3b8:	10001a26 	beq	r2,zero,800b424 <__swbuf_r+0xc0>
 800b3bc:	80800017 	ldw	r2,0(r16)
 800b3c0:	81000517 	ldw	r4,20(r16)
 800b3c4:	10c7c83a 	sub	r3,r2,r3
 800b3c8:	1900200e 	bge	r3,r4,800b44c <__swbuf_r+0xe8>
 800b3cc:	18c00044 	addi	r3,r3,1
 800b3d0:	81000217 	ldw	r4,8(r16)
 800b3d4:	11400044 	addi	r5,r2,1
 800b3d8:	81400015 	stw	r5,0(r16)
 800b3dc:	213fffc4 	addi	r4,r4,-1
 800b3e0:	81000215 	stw	r4,8(r16)
 800b3e4:	14c00005 	stb	r19,0(r2)
 800b3e8:	80800517 	ldw	r2,20(r16)
 800b3ec:	10c01e26 	beq	r2,r3,800b468 <__swbuf_r+0x104>
 800b3f0:	8080030b 	ldhu	r2,12(r16)
 800b3f4:	1080004c 	andi	r2,r2,1
 800b3f8:	10000226 	beq	r2,zero,800b404 <__swbuf_r+0xa0>
 800b3fc:	00800284 	movi	r2,10
 800b400:	88801926 	beq	r17,r2,800b468 <__swbuf_r+0x104>
 800b404:	8805883a 	mov	r2,r17
 800b408:	dfc00417 	ldw	ra,16(sp)
 800b40c:	dcc00317 	ldw	r19,12(sp)
 800b410:	dc800217 	ldw	r18,8(sp)
 800b414:	dc400117 	ldw	r17,4(sp)
 800b418:	dc000017 	ldw	r16,0(sp)
 800b41c:	dec00504 	addi	sp,sp,20
 800b420:	f800283a 	ret
 800b424:	81401917 	ldw	r5,100(r16)
 800b428:	00b7ffc4 	movi	r2,-8193
 800b42c:	21080014 	ori	r4,r4,8192
 800b430:	2884703a 	and	r2,r5,r2
 800b434:	80801915 	stw	r2,100(r16)
 800b438:	80800017 	ldw	r2,0(r16)
 800b43c:	8100030d 	sth	r4,12(r16)
 800b440:	81000517 	ldw	r4,20(r16)
 800b444:	10c7c83a 	sub	r3,r2,r3
 800b448:	193fe016 	blt	r3,r4,800b3cc <__alt_data_end+0xff00b3cc>
 800b44c:	800b883a 	mov	r5,r16
 800b450:	9009883a 	mov	r4,r18
 800b454:	80070600 	call	8007060 <_fflush_r>
 800b458:	1000071e 	bne	r2,zero,800b478 <__swbuf_r+0x114>
 800b45c:	80800017 	ldw	r2,0(r16)
 800b460:	00c00044 	movi	r3,1
 800b464:	003fda06 	br	800b3d0 <__alt_data_end+0xff00b3d0>
 800b468:	800b883a 	mov	r5,r16
 800b46c:	9009883a 	mov	r4,r18
 800b470:	80070600 	call	8007060 <_fflush_r>
 800b474:	103fe326 	beq	r2,zero,800b404 <__alt_data_end+0xff00b404>
 800b478:	00bfffc4 	movi	r2,-1
 800b47c:	003fe206 	br	800b408 <__alt_data_end+0xff00b408>
 800b480:	800b883a 	mov	r5,r16
 800b484:	9009883a 	mov	r4,r18
 800b488:	80054680 	call	8005468 <__swsetup_r>
 800b48c:	103ffa1e 	bne	r2,zero,800b478 <__alt_data_end+0xff00b478>
 800b490:	8100030b 	ldhu	r4,12(r16)
 800b494:	80c00417 	ldw	r3,16(r16)
 800b498:	003fc506 	br	800b3b0 <__alt_data_end+0xff00b3b0>
 800b49c:	800743c0 	call	800743c <__sinit>
 800b4a0:	003fbc06 	br	800b394 <__alt_data_end+0xff00b394>

0800b4a4 <__swbuf>:
 800b4a4:	00820074 	movhi	r2,2049
 800b4a8:	108eaa04 	addi	r2,r2,15016
 800b4ac:	280d883a 	mov	r6,r5
 800b4b0:	200b883a 	mov	r5,r4
 800b4b4:	11000017 	ldw	r4,0(r2)
 800b4b8:	800b3641 	jmpi	800b364 <__swbuf_r>

0800b4bc <_write_r>:
 800b4bc:	defffd04 	addi	sp,sp,-12
 800b4c0:	2805883a 	mov	r2,r5
 800b4c4:	dc000015 	stw	r16,0(sp)
 800b4c8:	04020074 	movhi	r16,2049
 800b4cc:	dc400115 	stw	r17,4(sp)
 800b4d0:	300b883a 	mov	r5,r6
 800b4d4:	84158d04 	addi	r16,r16,22068
 800b4d8:	2023883a 	mov	r17,r4
 800b4dc:	380d883a 	mov	r6,r7
 800b4e0:	1009883a 	mov	r4,r2
 800b4e4:	dfc00215 	stw	ra,8(sp)
 800b4e8:	80000015 	stw	zero,0(r16)
 800b4ec:	800fd080 	call	800fd08 <write>
 800b4f0:	00ffffc4 	movi	r3,-1
 800b4f4:	10c00526 	beq	r2,r3,800b50c <_write_r+0x50>
 800b4f8:	dfc00217 	ldw	ra,8(sp)
 800b4fc:	dc400117 	ldw	r17,4(sp)
 800b500:	dc000017 	ldw	r16,0(sp)
 800b504:	dec00304 	addi	sp,sp,12
 800b508:	f800283a 	ret
 800b50c:	80c00017 	ldw	r3,0(r16)
 800b510:	183ff926 	beq	r3,zero,800b4f8 <__alt_data_end+0xff00b4f8>
 800b514:	88c00015 	stw	r3,0(r17)
 800b518:	003ff706 	br	800b4f8 <__alt_data_end+0xff00b4f8>

0800b51c <_close_r>:
 800b51c:	defffd04 	addi	sp,sp,-12
 800b520:	dc000015 	stw	r16,0(sp)
 800b524:	04020074 	movhi	r16,2049
 800b528:	dc400115 	stw	r17,4(sp)
 800b52c:	84158d04 	addi	r16,r16,22068
 800b530:	2023883a 	mov	r17,r4
 800b534:	2809883a 	mov	r4,r5
 800b538:	dfc00215 	stw	ra,8(sp)
 800b53c:	80000015 	stw	zero,0(r16)
 800b540:	800f1100 	call	800f110 <close>
 800b544:	00ffffc4 	movi	r3,-1
 800b548:	10c00526 	beq	r2,r3,800b560 <_close_r+0x44>
 800b54c:	dfc00217 	ldw	ra,8(sp)
 800b550:	dc400117 	ldw	r17,4(sp)
 800b554:	dc000017 	ldw	r16,0(sp)
 800b558:	dec00304 	addi	sp,sp,12
 800b55c:	f800283a 	ret
 800b560:	80c00017 	ldw	r3,0(r16)
 800b564:	183ff926 	beq	r3,zero,800b54c <__alt_data_end+0xff00b54c>
 800b568:	88c00015 	stw	r3,0(r17)
 800b56c:	003ff706 	br	800b54c <__alt_data_end+0xff00b54c>

0800b570 <_calloc_r>:
 800b570:	298b383a 	mul	r5,r5,r6
 800b574:	defffe04 	addi	sp,sp,-8
 800b578:	dfc00115 	stw	ra,4(sp)
 800b57c:	dc000015 	stw	r16,0(sp)
 800b580:	8007ce00 	call	8007ce0 <_malloc_r>
 800b584:	10002926 	beq	r2,zero,800b62c <_calloc_r+0xbc>
 800b588:	11bfff17 	ldw	r6,-4(r2)
 800b58c:	1021883a 	mov	r16,r2
 800b590:	00bfff04 	movi	r2,-4
 800b594:	308c703a 	and	r6,r6,r2
 800b598:	00c00904 	movi	r3,36
 800b59c:	308d883a 	add	r6,r6,r2
 800b5a0:	19801636 	bltu	r3,r6,800b5fc <_calloc_r+0x8c>
 800b5a4:	008004c4 	movi	r2,19
 800b5a8:	11800b2e 	bgeu	r2,r6,800b5d8 <_calloc_r+0x68>
 800b5ac:	80000015 	stw	zero,0(r16)
 800b5b0:	80000115 	stw	zero,4(r16)
 800b5b4:	008006c4 	movi	r2,27
 800b5b8:	11801a2e 	bgeu	r2,r6,800b624 <_calloc_r+0xb4>
 800b5bc:	80000215 	stw	zero,8(r16)
 800b5c0:	80000315 	stw	zero,12(r16)
 800b5c4:	30c0151e 	bne	r6,r3,800b61c <_calloc_r+0xac>
 800b5c8:	80000415 	stw	zero,16(r16)
 800b5cc:	80800604 	addi	r2,r16,24
 800b5d0:	80000515 	stw	zero,20(r16)
 800b5d4:	00000106 	br	800b5dc <_calloc_r+0x6c>
 800b5d8:	8005883a 	mov	r2,r16
 800b5dc:	10000015 	stw	zero,0(r2)
 800b5e0:	10000115 	stw	zero,4(r2)
 800b5e4:	10000215 	stw	zero,8(r2)
 800b5e8:	8005883a 	mov	r2,r16
 800b5ec:	dfc00117 	ldw	ra,4(sp)
 800b5f0:	dc000017 	ldw	r16,0(sp)
 800b5f4:	dec00204 	addi	sp,sp,8
 800b5f8:	f800283a 	ret
 800b5fc:	000b883a 	mov	r5,zero
 800b600:	8009883a 	mov	r4,r16
 800b604:	80087180 	call	8008718 <memset>
 800b608:	8005883a 	mov	r2,r16
 800b60c:	dfc00117 	ldw	ra,4(sp)
 800b610:	dc000017 	ldw	r16,0(sp)
 800b614:	dec00204 	addi	sp,sp,8
 800b618:	f800283a 	ret
 800b61c:	80800404 	addi	r2,r16,16
 800b620:	003fee06 	br	800b5dc <__alt_data_end+0xff00b5dc>
 800b624:	80800204 	addi	r2,r16,8
 800b628:	003fec06 	br	800b5dc <__alt_data_end+0xff00b5dc>
 800b62c:	0005883a 	mov	r2,zero
 800b630:	003fee06 	br	800b5ec <__alt_data_end+0xff00b5ec>

0800b634 <_fclose_r>:
 800b634:	28003926 	beq	r5,zero,800b71c <_fclose_r+0xe8>
 800b638:	defffc04 	addi	sp,sp,-16
 800b63c:	dc400115 	stw	r17,4(sp)
 800b640:	dc000015 	stw	r16,0(sp)
 800b644:	dfc00315 	stw	ra,12(sp)
 800b648:	dc800215 	stw	r18,8(sp)
 800b64c:	2023883a 	mov	r17,r4
 800b650:	2821883a 	mov	r16,r5
 800b654:	20000226 	beq	r4,zero,800b660 <_fclose_r+0x2c>
 800b658:	20800e17 	ldw	r2,56(r4)
 800b65c:	10002726 	beq	r2,zero,800b6fc <_fclose_r+0xc8>
 800b660:	8080030f 	ldh	r2,12(r16)
 800b664:	1000071e 	bne	r2,zero,800b684 <_fclose_r+0x50>
 800b668:	0005883a 	mov	r2,zero
 800b66c:	dfc00317 	ldw	ra,12(sp)
 800b670:	dc800217 	ldw	r18,8(sp)
 800b674:	dc400117 	ldw	r17,4(sp)
 800b678:	dc000017 	ldw	r16,0(sp)
 800b67c:	dec00404 	addi	sp,sp,16
 800b680:	f800283a 	ret
 800b684:	800b883a 	mov	r5,r16
 800b688:	8809883a 	mov	r4,r17
 800b68c:	8006e440 	call	8006e44 <__sflush_r>
 800b690:	1025883a 	mov	r18,r2
 800b694:	80800b17 	ldw	r2,44(r16)
 800b698:	10000426 	beq	r2,zero,800b6ac <_fclose_r+0x78>
 800b69c:	81400717 	ldw	r5,28(r16)
 800b6a0:	8809883a 	mov	r4,r17
 800b6a4:	103ee83a 	callr	r2
 800b6a8:	10001616 	blt	r2,zero,800b704 <_fclose_r+0xd0>
 800b6ac:	8080030b 	ldhu	r2,12(r16)
 800b6b0:	1080200c 	andi	r2,r2,128
 800b6b4:	1000151e 	bne	r2,zero,800b70c <_fclose_r+0xd8>
 800b6b8:	81400c17 	ldw	r5,48(r16)
 800b6bc:	28000526 	beq	r5,zero,800b6d4 <_fclose_r+0xa0>
 800b6c0:	80801004 	addi	r2,r16,64
 800b6c4:	28800226 	beq	r5,r2,800b6d0 <_fclose_r+0x9c>
 800b6c8:	8809883a 	mov	r4,r17
 800b6cc:	80075b00 	call	80075b0 <_free_r>
 800b6d0:	80000c15 	stw	zero,48(r16)
 800b6d4:	81401117 	ldw	r5,68(r16)
 800b6d8:	28000326 	beq	r5,zero,800b6e8 <_fclose_r+0xb4>
 800b6dc:	8809883a 	mov	r4,r17
 800b6e0:	80075b00 	call	80075b0 <_free_r>
 800b6e4:	80001115 	stw	zero,68(r16)
 800b6e8:	800744c0 	call	800744c <__sfp_lock_acquire>
 800b6ec:	8000030d 	sth	zero,12(r16)
 800b6f0:	80074500 	call	8007450 <__sfp_lock_release>
 800b6f4:	9005883a 	mov	r2,r18
 800b6f8:	003fdc06 	br	800b66c <__alt_data_end+0xff00b66c>
 800b6fc:	800743c0 	call	800743c <__sinit>
 800b700:	003fd706 	br	800b660 <__alt_data_end+0xff00b660>
 800b704:	04bfffc4 	movi	r18,-1
 800b708:	003fe806 	br	800b6ac <__alt_data_end+0xff00b6ac>
 800b70c:	81400417 	ldw	r5,16(r16)
 800b710:	8809883a 	mov	r4,r17
 800b714:	80075b00 	call	80075b0 <_free_r>
 800b718:	003fe706 	br	800b6b8 <__alt_data_end+0xff00b6b8>
 800b71c:	0005883a 	mov	r2,zero
 800b720:	f800283a 	ret

0800b724 <fclose>:
 800b724:	00820074 	movhi	r2,2049
 800b728:	108eaa04 	addi	r2,r2,15016
 800b72c:	200b883a 	mov	r5,r4
 800b730:	11000017 	ldw	r4,0(r2)
 800b734:	800b6341 	jmpi	800b634 <_fclose_r>

0800b738 <__fputwc>:
 800b738:	defff804 	addi	sp,sp,-32
 800b73c:	dcc00415 	stw	r19,16(sp)
 800b740:	dc800315 	stw	r18,12(sp)
 800b744:	dc000115 	stw	r16,4(sp)
 800b748:	dfc00715 	stw	ra,28(sp)
 800b74c:	dd400615 	stw	r21,24(sp)
 800b750:	dd000515 	stw	r20,20(sp)
 800b754:	dc400215 	stw	r17,8(sp)
 800b758:	2027883a 	mov	r19,r4
 800b75c:	2825883a 	mov	r18,r5
 800b760:	3021883a 	mov	r16,r6
 800b764:	8007ad00 	call	8007ad0 <__locale_mb_cur_max>
 800b768:	00c00044 	movi	r3,1
 800b76c:	10c03e26 	beq	r2,r3,800b868 <__fputwc+0x130>
 800b770:	81c01704 	addi	r7,r16,92
 800b774:	900d883a 	mov	r6,r18
 800b778:	d80b883a 	mov	r5,sp
 800b77c:	9809883a 	mov	r4,r19
 800b780:	800c62c0 	call	800c62c <_wcrtomb_r>
 800b784:	1029883a 	mov	r20,r2
 800b788:	00bfffc4 	movi	r2,-1
 800b78c:	a0802026 	beq	r20,r2,800b810 <__fputwc+0xd8>
 800b790:	d9400003 	ldbu	r5,0(sp)
 800b794:	a0001c26 	beq	r20,zero,800b808 <__fputwc+0xd0>
 800b798:	0023883a 	mov	r17,zero
 800b79c:	05400284 	movi	r21,10
 800b7a0:	00000906 	br	800b7c8 <__fputwc+0x90>
 800b7a4:	80800017 	ldw	r2,0(r16)
 800b7a8:	11400005 	stb	r5,0(r2)
 800b7ac:	80c00017 	ldw	r3,0(r16)
 800b7b0:	18c00044 	addi	r3,r3,1
 800b7b4:	80c00015 	stw	r3,0(r16)
 800b7b8:	8c400044 	addi	r17,r17,1
 800b7bc:	dc45883a 	add	r2,sp,r17
 800b7c0:	8d00112e 	bgeu	r17,r20,800b808 <__fputwc+0xd0>
 800b7c4:	11400003 	ldbu	r5,0(r2)
 800b7c8:	80c00217 	ldw	r3,8(r16)
 800b7cc:	18ffffc4 	addi	r3,r3,-1
 800b7d0:	80c00215 	stw	r3,8(r16)
 800b7d4:	183ff30e 	bge	r3,zero,800b7a4 <__alt_data_end+0xff00b7a4>
 800b7d8:	80800617 	ldw	r2,24(r16)
 800b7dc:	18801916 	blt	r3,r2,800b844 <__fputwc+0x10c>
 800b7e0:	80800017 	ldw	r2,0(r16)
 800b7e4:	11400005 	stb	r5,0(r2)
 800b7e8:	80800017 	ldw	r2,0(r16)
 800b7ec:	10c00003 	ldbu	r3,0(r2)
 800b7f0:	10800044 	addi	r2,r2,1
 800b7f4:	1d402326 	beq	r3,r21,800b884 <__fputwc+0x14c>
 800b7f8:	80800015 	stw	r2,0(r16)
 800b7fc:	8c400044 	addi	r17,r17,1
 800b800:	dc45883a 	add	r2,sp,r17
 800b804:	8d3fef36 	bltu	r17,r20,800b7c4 <__alt_data_end+0xff00b7c4>
 800b808:	9005883a 	mov	r2,r18
 800b80c:	00000406 	br	800b820 <__fputwc+0xe8>
 800b810:	80c0030b 	ldhu	r3,12(r16)
 800b814:	a005883a 	mov	r2,r20
 800b818:	18c01014 	ori	r3,r3,64
 800b81c:	80c0030d 	sth	r3,12(r16)
 800b820:	dfc00717 	ldw	ra,28(sp)
 800b824:	dd400617 	ldw	r21,24(sp)
 800b828:	dd000517 	ldw	r20,20(sp)
 800b82c:	dcc00417 	ldw	r19,16(sp)
 800b830:	dc800317 	ldw	r18,12(sp)
 800b834:	dc400217 	ldw	r17,8(sp)
 800b838:	dc000117 	ldw	r16,4(sp)
 800b83c:	dec00804 	addi	sp,sp,32
 800b840:	f800283a 	ret
 800b844:	800d883a 	mov	r6,r16
 800b848:	29403fcc 	andi	r5,r5,255
 800b84c:	9809883a 	mov	r4,r19
 800b850:	800b3640 	call	800b364 <__swbuf_r>
 800b854:	10bfffe0 	cmpeqi	r2,r2,-1
 800b858:	10803fcc 	andi	r2,r2,255
 800b85c:	103fd626 	beq	r2,zero,800b7b8 <__alt_data_end+0xff00b7b8>
 800b860:	00bfffc4 	movi	r2,-1
 800b864:	003fee06 	br	800b820 <__alt_data_end+0xff00b820>
 800b868:	90ffffc4 	addi	r3,r18,-1
 800b86c:	01003f84 	movi	r4,254
 800b870:	20ffbf36 	bltu	r4,r3,800b770 <__alt_data_end+0xff00b770>
 800b874:	900b883a 	mov	r5,r18
 800b878:	dc800005 	stb	r18,0(sp)
 800b87c:	1029883a 	mov	r20,r2
 800b880:	003fc506 	br	800b798 <__alt_data_end+0xff00b798>
 800b884:	800d883a 	mov	r6,r16
 800b888:	a80b883a 	mov	r5,r21
 800b88c:	9809883a 	mov	r4,r19
 800b890:	800b3640 	call	800b364 <__swbuf_r>
 800b894:	10bfffe0 	cmpeqi	r2,r2,-1
 800b898:	003fef06 	br	800b858 <__alt_data_end+0xff00b858>

0800b89c <_fputwc_r>:
 800b89c:	3080030b 	ldhu	r2,12(r6)
 800b8a0:	10c8000c 	andi	r3,r2,8192
 800b8a4:	1800051e 	bne	r3,zero,800b8bc <_fputwc_r+0x20>
 800b8a8:	30c01917 	ldw	r3,100(r6)
 800b8ac:	10880014 	ori	r2,r2,8192
 800b8b0:	3080030d 	sth	r2,12(r6)
 800b8b4:	18880014 	ori	r2,r3,8192
 800b8b8:	30801915 	stw	r2,100(r6)
 800b8bc:	800b7381 	jmpi	800b738 <__fputwc>

0800b8c0 <fputwc>:
 800b8c0:	00820074 	movhi	r2,2049
 800b8c4:	defffc04 	addi	sp,sp,-16
 800b8c8:	108eaa04 	addi	r2,r2,15016
 800b8cc:	dc000115 	stw	r16,4(sp)
 800b8d0:	14000017 	ldw	r16,0(r2)
 800b8d4:	dc400215 	stw	r17,8(sp)
 800b8d8:	dfc00315 	stw	ra,12(sp)
 800b8dc:	2023883a 	mov	r17,r4
 800b8e0:	80000226 	beq	r16,zero,800b8ec <fputwc+0x2c>
 800b8e4:	80800e17 	ldw	r2,56(r16)
 800b8e8:	10001026 	beq	r2,zero,800b92c <fputwc+0x6c>
 800b8ec:	2880030b 	ldhu	r2,12(r5)
 800b8f0:	10c8000c 	andi	r3,r2,8192
 800b8f4:	1800051e 	bne	r3,zero,800b90c <fputwc+0x4c>
 800b8f8:	28c01917 	ldw	r3,100(r5)
 800b8fc:	10880014 	ori	r2,r2,8192
 800b900:	2880030d 	sth	r2,12(r5)
 800b904:	18880014 	ori	r2,r3,8192
 800b908:	28801915 	stw	r2,100(r5)
 800b90c:	280d883a 	mov	r6,r5
 800b910:	8009883a 	mov	r4,r16
 800b914:	880b883a 	mov	r5,r17
 800b918:	dfc00317 	ldw	ra,12(sp)
 800b91c:	dc400217 	ldw	r17,8(sp)
 800b920:	dc000117 	ldw	r16,4(sp)
 800b924:	dec00404 	addi	sp,sp,16
 800b928:	800b7381 	jmpi	800b738 <__fputwc>
 800b92c:	8009883a 	mov	r4,r16
 800b930:	d9400015 	stw	r5,0(sp)
 800b934:	800743c0 	call	800743c <__sinit>
 800b938:	d9400017 	ldw	r5,0(sp)
 800b93c:	003feb06 	br	800b8ec <__alt_data_end+0xff00b8ec>

0800b940 <_fstat_r>:
 800b940:	defffd04 	addi	sp,sp,-12
 800b944:	2805883a 	mov	r2,r5
 800b948:	dc000015 	stw	r16,0(sp)
 800b94c:	04020074 	movhi	r16,2049
 800b950:	dc400115 	stw	r17,4(sp)
 800b954:	84158d04 	addi	r16,r16,22068
 800b958:	2023883a 	mov	r17,r4
 800b95c:	300b883a 	mov	r5,r6
 800b960:	1009883a 	mov	r4,r2
 800b964:	dfc00215 	stw	ra,8(sp)
 800b968:	80000015 	stw	zero,0(r16)
 800b96c:	800f2480 	call	800f248 <fstat>
 800b970:	00ffffc4 	movi	r3,-1
 800b974:	10c00526 	beq	r2,r3,800b98c <_fstat_r+0x4c>
 800b978:	dfc00217 	ldw	ra,8(sp)
 800b97c:	dc400117 	ldw	r17,4(sp)
 800b980:	dc000017 	ldw	r16,0(sp)
 800b984:	dec00304 	addi	sp,sp,12
 800b988:	f800283a 	ret
 800b98c:	80c00017 	ldw	r3,0(r16)
 800b990:	183ff926 	beq	r3,zero,800b978 <__alt_data_end+0xff00b978>
 800b994:	88c00015 	stw	r3,0(r17)
 800b998:	003ff706 	br	800b978 <__alt_data_end+0xff00b978>

0800b99c <__sfvwrite_r>:
 800b99c:	30800217 	ldw	r2,8(r6)
 800b9a0:	10006726 	beq	r2,zero,800bb40 <__sfvwrite_r+0x1a4>
 800b9a4:	28c0030b 	ldhu	r3,12(r5)
 800b9a8:	defff404 	addi	sp,sp,-48
 800b9ac:	dd400715 	stw	r21,28(sp)
 800b9b0:	dd000615 	stw	r20,24(sp)
 800b9b4:	dc000215 	stw	r16,8(sp)
 800b9b8:	dfc00b15 	stw	ra,44(sp)
 800b9bc:	df000a15 	stw	fp,40(sp)
 800b9c0:	ddc00915 	stw	r23,36(sp)
 800b9c4:	dd800815 	stw	r22,32(sp)
 800b9c8:	dcc00515 	stw	r19,20(sp)
 800b9cc:	dc800415 	stw	r18,16(sp)
 800b9d0:	dc400315 	stw	r17,12(sp)
 800b9d4:	1880020c 	andi	r2,r3,8
 800b9d8:	2821883a 	mov	r16,r5
 800b9dc:	202b883a 	mov	r21,r4
 800b9e0:	3029883a 	mov	r20,r6
 800b9e4:	10002726 	beq	r2,zero,800ba84 <__sfvwrite_r+0xe8>
 800b9e8:	28800417 	ldw	r2,16(r5)
 800b9ec:	10002526 	beq	r2,zero,800ba84 <__sfvwrite_r+0xe8>
 800b9f0:	1880008c 	andi	r2,r3,2
 800b9f4:	a4400017 	ldw	r17,0(r20)
 800b9f8:	10002a26 	beq	r2,zero,800baa4 <__sfvwrite_r+0x108>
 800b9fc:	05a00034 	movhi	r22,32768
 800ba00:	0027883a 	mov	r19,zero
 800ba04:	0025883a 	mov	r18,zero
 800ba08:	b5bf0004 	addi	r22,r22,-1024
 800ba0c:	980d883a 	mov	r6,r19
 800ba10:	a809883a 	mov	r4,r21
 800ba14:	90004626 	beq	r18,zero,800bb30 <__sfvwrite_r+0x194>
 800ba18:	900f883a 	mov	r7,r18
 800ba1c:	b480022e 	bgeu	r22,r18,800ba28 <__sfvwrite_r+0x8c>
 800ba20:	01e00034 	movhi	r7,32768
 800ba24:	39ff0004 	addi	r7,r7,-1024
 800ba28:	80800917 	ldw	r2,36(r16)
 800ba2c:	81400717 	ldw	r5,28(r16)
 800ba30:	103ee83a 	callr	r2
 800ba34:	0080570e 	bge	zero,r2,800bb94 <__sfvwrite_r+0x1f8>
 800ba38:	a0c00217 	ldw	r3,8(r20)
 800ba3c:	98a7883a 	add	r19,r19,r2
 800ba40:	90a5c83a 	sub	r18,r18,r2
 800ba44:	1885c83a 	sub	r2,r3,r2
 800ba48:	a0800215 	stw	r2,8(r20)
 800ba4c:	103fef1e 	bne	r2,zero,800ba0c <__alt_data_end+0xff00ba0c>
 800ba50:	0005883a 	mov	r2,zero
 800ba54:	dfc00b17 	ldw	ra,44(sp)
 800ba58:	df000a17 	ldw	fp,40(sp)
 800ba5c:	ddc00917 	ldw	r23,36(sp)
 800ba60:	dd800817 	ldw	r22,32(sp)
 800ba64:	dd400717 	ldw	r21,28(sp)
 800ba68:	dd000617 	ldw	r20,24(sp)
 800ba6c:	dcc00517 	ldw	r19,20(sp)
 800ba70:	dc800417 	ldw	r18,16(sp)
 800ba74:	dc400317 	ldw	r17,12(sp)
 800ba78:	dc000217 	ldw	r16,8(sp)
 800ba7c:	dec00c04 	addi	sp,sp,48
 800ba80:	f800283a 	ret
 800ba84:	800b883a 	mov	r5,r16
 800ba88:	a809883a 	mov	r4,r21
 800ba8c:	80054680 	call	8005468 <__swsetup_r>
 800ba90:	1000eb1e 	bne	r2,zero,800be40 <__sfvwrite_r+0x4a4>
 800ba94:	80c0030b 	ldhu	r3,12(r16)
 800ba98:	a4400017 	ldw	r17,0(r20)
 800ba9c:	1880008c 	andi	r2,r3,2
 800baa0:	103fd61e 	bne	r2,zero,800b9fc <__alt_data_end+0xff00b9fc>
 800baa4:	1880004c 	andi	r2,r3,1
 800baa8:	10003f1e 	bne	r2,zero,800bba8 <__sfvwrite_r+0x20c>
 800baac:	0039883a 	mov	fp,zero
 800bab0:	0025883a 	mov	r18,zero
 800bab4:	90001a26 	beq	r18,zero,800bb20 <__sfvwrite_r+0x184>
 800bab8:	1880800c 	andi	r2,r3,512
 800babc:	84c00217 	ldw	r19,8(r16)
 800bac0:	10002126 	beq	r2,zero,800bb48 <__sfvwrite_r+0x1ac>
 800bac4:	982f883a 	mov	r23,r19
 800bac8:	94c09336 	bltu	r18,r19,800bd18 <__sfvwrite_r+0x37c>
 800bacc:	1881200c 	andi	r2,r3,1152
 800bad0:	10009e1e 	bne	r2,zero,800bd4c <__sfvwrite_r+0x3b0>
 800bad4:	81000017 	ldw	r4,0(r16)
 800bad8:	b80d883a 	mov	r6,r23
 800badc:	e00b883a 	mov	r5,fp
 800bae0:	800bf0c0 	call	800bf0c <memmove>
 800bae4:	80c00217 	ldw	r3,8(r16)
 800bae8:	81000017 	ldw	r4,0(r16)
 800baec:	9005883a 	mov	r2,r18
 800baf0:	1ce7c83a 	sub	r19,r3,r19
 800baf4:	25cf883a 	add	r7,r4,r23
 800baf8:	84c00215 	stw	r19,8(r16)
 800bafc:	81c00015 	stw	r7,0(r16)
 800bb00:	a0c00217 	ldw	r3,8(r20)
 800bb04:	e0b9883a 	add	fp,fp,r2
 800bb08:	90a5c83a 	sub	r18,r18,r2
 800bb0c:	18a7c83a 	sub	r19,r3,r2
 800bb10:	a4c00215 	stw	r19,8(r20)
 800bb14:	983fce26 	beq	r19,zero,800ba50 <__alt_data_end+0xff00ba50>
 800bb18:	80c0030b 	ldhu	r3,12(r16)
 800bb1c:	903fe61e 	bne	r18,zero,800bab8 <__alt_data_end+0xff00bab8>
 800bb20:	8f000017 	ldw	fp,0(r17)
 800bb24:	8c800117 	ldw	r18,4(r17)
 800bb28:	8c400204 	addi	r17,r17,8
 800bb2c:	003fe106 	br	800bab4 <__alt_data_end+0xff00bab4>
 800bb30:	8cc00017 	ldw	r19,0(r17)
 800bb34:	8c800117 	ldw	r18,4(r17)
 800bb38:	8c400204 	addi	r17,r17,8
 800bb3c:	003fb306 	br	800ba0c <__alt_data_end+0xff00ba0c>
 800bb40:	0005883a 	mov	r2,zero
 800bb44:	f800283a 	ret
 800bb48:	81000017 	ldw	r4,0(r16)
 800bb4c:	80800417 	ldw	r2,16(r16)
 800bb50:	11005736 	bltu	r2,r4,800bcb0 <__sfvwrite_r+0x314>
 800bb54:	85c00517 	ldw	r23,20(r16)
 800bb58:	95c05536 	bltu	r18,r23,800bcb0 <__sfvwrite_r+0x314>
 800bb5c:	00a00034 	movhi	r2,32768
 800bb60:	10bfffc4 	addi	r2,r2,-1
 800bb64:	9009883a 	mov	r4,r18
 800bb68:	1480012e 	bgeu	r2,r18,800bb70 <__sfvwrite_r+0x1d4>
 800bb6c:	1009883a 	mov	r4,r2
 800bb70:	b80b883a 	mov	r5,r23
 800bb74:	80020c00 	call	80020c0 <__divsi3>
 800bb78:	15cf383a 	mul	r7,r2,r23
 800bb7c:	81400717 	ldw	r5,28(r16)
 800bb80:	80800917 	ldw	r2,36(r16)
 800bb84:	e00d883a 	mov	r6,fp
 800bb88:	a809883a 	mov	r4,r21
 800bb8c:	103ee83a 	callr	r2
 800bb90:	00bfdb16 	blt	zero,r2,800bb00 <__alt_data_end+0xff00bb00>
 800bb94:	8080030b 	ldhu	r2,12(r16)
 800bb98:	10801014 	ori	r2,r2,64
 800bb9c:	8080030d 	sth	r2,12(r16)
 800bba0:	00bfffc4 	movi	r2,-1
 800bba4:	003fab06 	br	800ba54 <__alt_data_end+0xff00ba54>
 800bba8:	0027883a 	mov	r19,zero
 800bbac:	0011883a 	mov	r8,zero
 800bbb0:	0039883a 	mov	fp,zero
 800bbb4:	0025883a 	mov	r18,zero
 800bbb8:	90001f26 	beq	r18,zero,800bc38 <__sfvwrite_r+0x29c>
 800bbbc:	40005a26 	beq	r8,zero,800bd28 <__sfvwrite_r+0x38c>
 800bbc0:	982d883a 	mov	r22,r19
 800bbc4:	94c0012e 	bgeu	r18,r19,800bbcc <__sfvwrite_r+0x230>
 800bbc8:	902d883a 	mov	r22,r18
 800bbcc:	81000017 	ldw	r4,0(r16)
 800bbd0:	80800417 	ldw	r2,16(r16)
 800bbd4:	b02f883a 	mov	r23,r22
 800bbd8:	81c00517 	ldw	r7,20(r16)
 800bbdc:	1100032e 	bgeu	r2,r4,800bbec <__sfvwrite_r+0x250>
 800bbe0:	80c00217 	ldw	r3,8(r16)
 800bbe4:	38c7883a 	add	r3,r7,r3
 800bbe8:	1d801816 	blt	r3,r22,800bc4c <__sfvwrite_r+0x2b0>
 800bbec:	b1c03e16 	blt	r22,r7,800bce8 <__sfvwrite_r+0x34c>
 800bbf0:	80800917 	ldw	r2,36(r16)
 800bbf4:	81400717 	ldw	r5,28(r16)
 800bbf8:	e00d883a 	mov	r6,fp
 800bbfc:	da000115 	stw	r8,4(sp)
 800bc00:	a809883a 	mov	r4,r21
 800bc04:	103ee83a 	callr	r2
 800bc08:	102f883a 	mov	r23,r2
 800bc0c:	da000117 	ldw	r8,4(sp)
 800bc10:	00bfe00e 	bge	zero,r2,800bb94 <__alt_data_end+0xff00bb94>
 800bc14:	9de7c83a 	sub	r19,r19,r23
 800bc18:	98001f26 	beq	r19,zero,800bc98 <__sfvwrite_r+0x2fc>
 800bc1c:	a0800217 	ldw	r2,8(r20)
 800bc20:	e5f9883a 	add	fp,fp,r23
 800bc24:	95e5c83a 	sub	r18,r18,r23
 800bc28:	15efc83a 	sub	r23,r2,r23
 800bc2c:	a5c00215 	stw	r23,8(r20)
 800bc30:	b83f8726 	beq	r23,zero,800ba50 <__alt_data_end+0xff00ba50>
 800bc34:	903fe11e 	bne	r18,zero,800bbbc <__alt_data_end+0xff00bbbc>
 800bc38:	8f000017 	ldw	fp,0(r17)
 800bc3c:	8c800117 	ldw	r18,4(r17)
 800bc40:	0011883a 	mov	r8,zero
 800bc44:	8c400204 	addi	r17,r17,8
 800bc48:	003fdb06 	br	800bbb8 <__alt_data_end+0xff00bbb8>
 800bc4c:	180d883a 	mov	r6,r3
 800bc50:	e00b883a 	mov	r5,fp
 800bc54:	da000115 	stw	r8,4(sp)
 800bc58:	d8c00015 	stw	r3,0(sp)
 800bc5c:	800bf0c0 	call	800bf0c <memmove>
 800bc60:	d8c00017 	ldw	r3,0(sp)
 800bc64:	80800017 	ldw	r2,0(r16)
 800bc68:	800b883a 	mov	r5,r16
 800bc6c:	a809883a 	mov	r4,r21
 800bc70:	10c5883a 	add	r2,r2,r3
 800bc74:	80800015 	stw	r2,0(r16)
 800bc78:	d8c00015 	stw	r3,0(sp)
 800bc7c:	80070600 	call	8007060 <_fflush_r>
 800bc80:	d8c00017 	ldw	r3,0(sp)
 800bc84:	da000117 	ldw	r8,4(sp)
 800bc88:	103fc21e 	bne	r2,zero,800bb94 <__alt_data_end+0xff00bb94>
 800bc8c:	182f883a 	mov	r23,r3
 800bc90:	9de7c83a 	sub	r19,r19,r23
 800bc94:	983fe11e 	bne	r19,zero,800bc1c <__alt_data_end+0xff00bc1c>
 800bc98:	800b883a 	mov	r5,r16
 800bc9c:	a809883a 	mov	r4,r21
 800bca0:	80070600 	call	8007060 <_fflush_r>
 800bca4:	103fbb1e 	bne	r2,zero,800bb94 <__alt_data_end+0xff00bb94>
 800bca8:	0011883a 	mov	r8,zero
 800bcac:	003fdb06 	br	800bc1c <__alt_data_end+0xff00bc1c>
 800bcb0:	94c0012e 	bgeu	r18,r19,800bcb8 <__sfvwrite_r+0x31c>
 800bcb4:	9027883a 	mov	r19,r18
 800bcb8:	980d883a 	mov	r6,r19
 800bcbc:	e00b883a 	mov	r5,fp
 800bcc0:	800bf0c0 	call	800bf0c <memmove>
 800bcc4:	80800217 	ldw	r2,8(r16)
 800bcc8:	80c00017 	ldw	r3,0(r16)
 800bccc:	14c5c83a 	sub	r2,r2,r19
 800bcd0:	1cc7883a 	add	r3,r3,r19
 800bcd4:	80800215 	stw	r2,8(r16)
 800bcd8:	80c00015 	stw	r3,0(r16)
 800bcdc:	10004326 	beq	r2,zero,800bdec <__sfvwrite_r+0x450>
 800bce0:	9805883a 	mov	r2,r19
 800bce4:	003f8606 	br	800bb00 <__alt_data_end+0xff00bb00>
 800bce8:	b00d883a 	mov	r6,r22
 800bcec:	e00b883a 	mov	r5,fp
 800bcf0:	da000115 	stw	r8,4(sp)
 800bcf4:	800bf0c0 	call	800bf0c <memmove>
 800bcf8:	80800217 	ldw	r2,8(r16)
 800bcfc:	80c00017 	ldw	r3,0(r16)
 800bd00:	da000117 	ldw	r8,4(sp)
 800bd04:	1585c83a 	sub	r2,r2,r22
 800bd08:	1dad883a 	add	r22,r3,r22
 800bd0c:	80800215 	stw	r2,8(r16)
 800bd10:	85800015 	stw	r22,0(r16)
 800bd14:	003fbf06 	br	800bc14 <__alt_data_end+0xff00bc14>
 800bd18:	81000017 	ldw	r4,0(r16)
 800bd1c:	9027883a 	mov	r19,r18
 800bd20:	902f883a 	mov	r23,r18
 800bd24:	003f6c06 	br	800bad8 <__alt_data_end+0xff00bad8>
 800bd28:	900d883a 	mov	r6,r18
 800bd2c:	01400284 	movi	r5,10
 800bd30:	e009883a 	mov	r4,fp
 800bd34:	80084ec0 	call	80084ec <memchr>
 800bd38:	10003e26 	beq	r2,zero,800be34 <__sfvwrite_r+0x498>
 800bd3c:	10800044 	addi	r2,r2,1
 800bd40:	1727c83a 	sub	r19,r2,fp
 800bd44:	02000044 	movi	r8,1
 800bd48:	003f9d06 	br	800bbc0 <__alt_data_end+0xff00bbc0>
 800bd4c:	80800517 	ldw	r2,20(r16)
 800bd50:	81400417 	ldw	r5,16(r16)
 800bd54:	81c00017 	ldw	r7,0(r16)
 800bd58:	10a7883a 	add	r19,r2,r2
 800bd5c:	9885883a 	add	r2,r19,r2
 800bd60:	1026d7fa 	srli	r19,r2,31
 800bd64:	396dc83a 	sub	r22,r7,r5
 800bd68:	b1000044 	addi	r4,r22,1
 800bd6c:	9885883a 	add	r2,r19,r2
 800bd70:	1027d07a 	srai	r19,r2,1
 800bd74:	2485883a 	add	r2,r4,r18
 800bd78:	980d883a 	mov	r6,r19
 800bd7c:	9880022e 	bgeu	r19,r2,800bd88 <__sfvwrite_r+0x3ec>
 800bd80:	1027883a 	mov	r19,r2
 800bd84:	100d883a 	mov	r6,r2
 800bd88:	18c1000c 	andi	r3,r3,1024
 800bd8c:	18001c26 	beq	r3,zero,800be00 <__sfvwrite_r+0x464>
 800bd90:	300b883a 	mov	r5,r6
 800bd94:	a809883a 	mov	r4,r21
 800bd98:	8007ce00 	call	8007ce0 <_malloc_r>
 800bd9c:	102f883a 	mov	r23,r2
 800bda0:	10002926 	beq	r2,zero,800be48 <__sfvwrite_r+0x4ac>
 800bda4:	81400417 	ldw	r5,16(r16)
 800bda8:	b00d883a 	mov	r6,r22
 800bdac:	1009883a 	mov	r4,r2
 800bdb0:	80085d00 	call	80085d0 <memcpy>
 800bdb4:	8080030b 	ldhu	r2,12(r16)
 800bdb8:	00fedfc4 	movi	r3,-1153
 800bdbc:	10c4703a 	and	r2,r2,r3
 800bdc0:	10802014 	ori	r2,r2,128
 800bdc4:	8080030d 	sth	r2,12(r16)
 800bdc8:	bd89883a 	add	r4,r23,r22
 800bdcc:	9d8fc83a 	sub	r7,r19,r22
 800bdd0:	85c00415 	stw	r23,16(r16)
 800bdd4:	84c00515 	stw	r19,20(r16)
 800bdd8:	81000015 	stw	r4,0(r16)
 800bddc:	9027883a 	mov	r19,r18
 800bde0:	81c00215 	stw	r7,8(r16)
 800bde4:	902f883a 	mov	r23,r18
 800bde8:	003f3b06 	br	800bad8 <__alt_data_end+0xff00bad8>
 800bdec:	800b883a 	mov	r5,r16
 800bdf0:	a809883a 	mov	r4,r21
 800bdf4:	80070600 	call	8007060 <_fflush_r>
 800bdf8:	103fb926 	beq	r2,zero,800bce0 <__alt_data_end+0xff00bce0>
 800bdfc:	003f6506 	br	800bb94 <__alt_data_end+0xff00bb94>
 800be00:	a809883a 	mov	r4,r21
 800be04:	800c0c80 	call	800c0c8 <_realloc_r>
 800be08:	102f883a 	mov	r23,r2
 800be0c:	103fee1e 	bne	r2,zero,800bdc8 <__alt_data_end+0xff00bdc8>
 800be10:	81400417 	ldw	r5,16(r16)
 800be14:	a809883a 	mov	r4,r21
 800be18:	80075b00 	call	80075b0 <_free_r>
 800be1c:	8080030b 	ldhu	r2,12(r16)
 800be20:	00ffdfc4 	movi	r3,-129
 800be24:	1884703a 	and	r2,r3,r2
 800be28:	00c00304 	movi	r3,12
 800be2c:	a8c00015 	stw	r3,0(r21)
 800be30:	003f5906 	br	800bb98 <__alt_data_end+0xff00bb98>
 800be34:	94c00044 	addi	r19,r18,1
 800be38:	02000044 	movi	r8,1
 800be3c:	003f6006 	br	800bbc0 <__alt_data_end+0xff00bbc0>
 800be40:	00bfffc4 	movi	r2,-1
 800be44:	003f0306 	br	800ba54 <__alt_data_end+0xff00ba54>
 800be48:	00800304 	movi	r2,12
 800be4c:	a8800015 	stw	r2,0(r21)
 800be50:	8080030b 	ldhu	r2,12(r16)
 800be54:	003f5006 	br	800bb98 <__alt_data_end+0xff00bb98>

0800be58 <_isatty_r>:
 800be58:	defffd04 	addi	sp,sp,-12
 800be5c:	dc000015 	stw	r16,0(sp)
 800be60:	04020074 	movhi	r16,2049
 800be64:	dc400115 	stw	r17,4(sp)
 800be68:	84158d04 	addi	r16,r16,22068
 800be6c:	2023883a 	mov	r17,r4
 800be70:	2809883a 	mov	r4,r5
 800be74:	dfc00215 	stw	ra,8(sp)
 800be78:	80000015 	stw	zero,0(r16)
 800be7c:	800f4b40 	call	800f4b4 <isatty>
 800be80:	00ffffc4 	movi	r3,-1
 800be84:	10c00526 	beq	r2,r3,800be9c <_isatty_r+0x44>
 800be88:	dfc00217 	ldw	ra,8(sp)
 800be8c:	dc400117 	ldw	r17,4(sp)
 800be90:	dc000017 	ldw	r16,0(sp)
 800be94:	dec00304 	addi	sp,sp,12
 800be98:	f800283a 	ret
 800be9c:	80c00017 	ldw	r3,0(r16)
 800bea0:	183ff926 	beq	r3,zero,800be88 <__alt_data_end+0xff00be88>
 800bea4:	88c00015 	stw	r3,0(r17)
 800bea8:	003ff706 	br	800be88 <__alt_data_end+0xff00be88>

0800beac <_lseek_r>:
 800beac:	defffd04 	addi	sp,sp,-12
 800beb0:	2805883a 	mov	r2,r5
 800beb4:	dc000015 	stw	r16,0(sp)
 800beb8:	04020074 	movhi	r16,2049
 800bebc:	dc400115 	stw	r17,4(sp)
 800bec0:	300b883a 	mov	r5,r6
 800bec4:	84158d04 	addi	r16,r16,22068
 800bec8:	2023883a 	mov	r17,r4
 800becc:	380d883a 	mov	r6,r7
 800bed0:	1009883a 	mov	r4,r2
 800bed4:	dfc00215 	stw	ra,8(sp)
 800bed8:	80000015 	stw	zero,0(r16)
 800bedc:	800f6800 	call	800f680 <lseek>
 800bee0:	00ffffc4 	movi	r3,-1
 800bee4:	10c00526 	beq	r2,r3,800befc <_lseek_r+0x50>
 800bee8:	dfc00217 	ldw	ra,8(sp)
 800beec:	dc400117 	ldw	r17,4(sp)
 800bef0:	dc000017 	ldw	r16,0(sp)
 800bef4:	dec00304 	addi	sp,sp,12
 800bef8:	f800283a 	ret
 800befc:	80c00017 	ldw	r3,0(r16)
 800bf00:	183ff926 	beq	r3,zero,800bee8 <__alt_data_end+0xff00bee8>
 800bf04:	88c00015 	stw	r3,0(r17)
 800bf08:	003ff706 	br	800bee8 <__alt_data_end+0xff00bee8>

0800bf0c <memmove>:
 800bf0c:	2005883a 	mov	r2,r4
 800bf10:	29000b2e 	bgeu	r5,r4,800bf40 <memmove+0x34>
 800bf14:	298f883a 	add	r7,r5,r6
 800bf18:	21c0092e 	bgeu	r4,r7,800bf40 <memmove+0x34>
 800bf1c:	2187883a 	add	r3,r4,r6
 800bf20:	198bc83a 	sub	r5,r3,r6
 800bf24:	30004826 	beq	r6,zero,800c048 <memmove+0x13c>
 800bf28:	39ffffc4 	addi	r7,r7,-1
 800bf2c:	39000003 	ldbu	r4,0(r7)
 800bf30:	18ffffc4 	addi	r3,r3,-1
 800bf34:	19000005 	stb	r4,0(r3)
 800bf38:	28fffb1e 	bne	r5,r3,800bf28 <__alt_data_end+0xff00bf28>
 800bf3c:	f800283a 	ret
 800bf40:	00c003c4 	movi	r3,15
 800bf44:	1980412e 	bgeu	r3,r6,800c04c <memmove+0x140>
 800bf48:	2886b03a 	or	r3,r5,r2
 800bf4c:	18c000cc 	andi	r3,r3,3
 800bf50:	1800401e 	bne	r3,zero,800c054 <memmove+0x148>
 800bf54:	33fffc04 	addi	r15,r6,-16
 800bf58:	781ed13a 	srli	r15,r15,4
 800bf5c:	28c00104 	addi	r3,r5,4
 800bf60:	13400104 	addi	r13,r2,4
 800bf64:	781c913a 	slli	r14,r15,4
 800bf68:	2b000204 	addi	r12,r5,8
 800bf6c:	12c00204 	addi	r11,r2,8
 800bf70:	73800504 	addi	r14,r14,20
 800bf74:	2a800304 	addi	r10,r5,12
 800bf78:	12400304 	addi	r9,r2,12
 800bf7c:	2b9d883a 	add	r14,r5,r14
 800bf80:	2811883a 	mov	r8,r5
 800bf84:	100f883a 	mov	r7,r2
 800bf88:	41000017 	ldw	r4,0(r8)
 800bf8c:	39c00404 	addi	r7,r7,16
 800bf90:	18c00404 	addi	r3,r3,16
 800bf94:	393ffc15 	stw	r4,-16(r7)
 800bf98:	193ffc17 	ldw	r4,-16(r3)
 800bf9c:	6b400404 	addi	r13,r13,16
 800bfa0:	5ac00404 	addi	r11,r11,16
 800bfa4:	693ffc15 	stw	r4,-16(r13)
 800bfa8:	61000017 	ldw	r4,0(r12)
 800bfac:	4a400404 	addi	r9,r9,16
 800bfb0:	42000404 	addi	r8,r8,16
 800bfb4:	593ffc15 	stw	r4,-16(r11)
 800bfb8:	51000017 	ldw	r4,0(r10)
 800bfbc:	63000404 	addi	r12,r12,16
 800bfc0:	52800404 	addi	r10,r10,16
 800bfc4:	493ffc15 	stw	r4,-16(r9)
 800bfc8:	1bbfef1e 	bne	r3,r14,800bf88 <__alt_data_end+0xff00bf88>
 800bfcc:	79000044 	addi	r4,r15,1
 800bfd0:	2008913a 	slli	r4,r4,4
 800bfd4:	328003cc 	andi	r10,r6,15
 800bfd8:	02c000c4 	movi	r11,3
 800bfdc:	1107883a 	add	r3,r2,r4
 800bfe0:	290b883a 	add	r5,r5,r4
 800bfe4:	5a801e2e 	bgeu	r11,r10,800c060 <memmove+0x154>
 800bfe8:	1813883a 	mov	r9,r3
 800bfec:	2811883a 	mov	r8,r5
 800bff0:	500f883a 	mov	r7,r10
 800bff4:	41000017 	ldw	r4,0(r8)
 800bff8:	4a400104 	addi	r9,r9,4
 800bffc:	39ffff04 	addi	r7,r7,-4
 800c000:	493fff15 	stw	r4,-4(r9)
 800c004:	42000104 	addi	r8,r8,4
 800c008:	59fffa36 	bltu	r11,r7,800bff4 <__alt_data_end+0xff00bff4>
 800c00c:	513fff04 	addi	r4,r10,-4
 800c010:	2008d0ba 	srli	r4,r4,2
 800c014:	318000cc 	andi	r6,r6,3
 800c018:	21000044 	addi	r4,r4,1
 800c01c:	2109883a 	add	r4,r4,r4
 800c020:	2109883a 	add	r4,r4,r4
 800c024:	1907883a 	add	r3,r3,r4
 800c028:	290b883a 	add	r5,r5,r4
 800c02c:	30000b26 	beq	r6,zero,800c05c <memmove+0x150>
 800c030:	198d883a 	add	r6,r3,r6
 800c034:	29c00003 	ldbu	r7,0(r5)
 800c038:	18c00044 	addi	r3,r3,1
 800c03c:	29400044 	addi	r5,r5,1
 800c040:	19ffffc5 	stb	r7,-1(r3)
 800c044:	19bffb1e 	bne	r3,r6,800c034 <__alt_data_end+0xff00c034>
 800c048:	f800283a 	ret
 800c04c:	1007883a 	mov	r3,r2
 800c050:	003ff606 	br	800c02c <__alt_data_end+0xff00c02c>
 800c054:	1007883a 	mov	r3,r2
 800c058:	003ff506 	br	800c030 <__alt_data_end+0xff00c030>
 800c05c:	f800283a 	ret
 800c060:	500d883a 	mov	r6,r10
 800c064:	003ff106 	br	800c02c <__alt_data_end+0xff00c02c>

0800c068 <_read_r>:
 800c068:	defffd04 	addi	sp,sp,-12
 800c06c:	2805883a 	mov	r2,r5
 800c070:	dc000015 	stw	r16,0(sp)
 800c074:	04020074 	movhi	r16,2049
 800c078:	dc400115 	stw	r17,4(sp)
 800c07c:	300b883a 	mov	r5,r6
 800c080:	84158d04 	addi	r16,r16,22068
 800c084:	2023883a 	mov	r17,r4
 800c088:	380d883a 	mov	r6,r7
 800c08c:	1009883a 	mov	r4,r2
 800c090:	dfc00215 	stw	ra,8(sp)
 800c094:	80000015 	stw	zero,0(r16)
 800c098:	800fabc0 	call	800fabc <read>
 800c09c:	00ffffc4 	movi	r3,-1
 800c0a0:	10c00526 	beq	r2,r3,800c0b8 <_read_r+0x50>
 800c0a4:	dfc00217 	ldw	ra,8(sp)
 800c0a8:	dc400117 	ldw	r17,4(sp)
 800c0ac:	dc000017 	ldw	r16,0(sp)
 800c0b0:	dec00304 	addi	sp,sp,12
 800c0b4:	f800283a 	ret
 800c0b8:	80c00017 	ldw	r3,0(r16)
 800c0bc:	183ff926 	beq	r3,zero,800c0a4 <__alt_data_end+0xff00c0a4>
 800c0c0:	88c00015 	stw	r3,0(r17)
 800c0c4:	003ff706 	br	800c0a4 <__alt_data_end+0xff00c0a4>

0800c0c8 <_realloc_r>:
 800c0c8:	defff604 	addi	sp,sp,-40
 800c0cc:	dc800215 	stw	r18,8(sp)
 800c0d0:	dfc00915 	stw	ra,36(sp)
 800c0d4:	df000815 	stw	fp,32(sp)
 800c0d8:	ddc00715 	stw	r23,28(sp)
 800c0dc:	dd800615 	stw	r22,24(sp)
 800c0e0:	dd400515 	stw	r21,20(sp)
 800c0e4:	dd000415 	stw	r20,16(sp)
 800c0e8:	dcc00315 	stw	r19,12(sp)
 800c0ec:	dc400115 	stw	r17,4(sp)
 800c0f0:	dc000015 	stw	r16,0(sp)
 800c0f4:	3025883a 	mov	r18,r6
 800c0f8:	2800b726 	beq	r5,zero,800c3d8 <_realloc_r+0x310>
 800c0fc:	282b883a 	mov	r21,r5
 800c100:	2029883a 	mov	r20,r4
 800c104:	800f7d00 	call	800f7d0 <__malloc_lock>
 800c108:	a8bfff17 	ldw	r2,-4(r21)
 800c10c:	043fff04 	movi	r16,-4
 800c110:	90c002c4 	addi	r3,r18,11
 800c114:	01000584 	movi	r4,22
 800c118:	acfffe04 	addi	r19,r21,-8
 800c11c:	1420703a 	and	r16,r2,r16
 800c120:	20c0332e 	bgeu	r4,r3,800c1f0 <_realloc_r+0x128>
 800c124:	047ffe04 	movi	r17,-8
 800c128:	1c62703a 	and	r17,r3,r17
 800c12c:	8807883a 	mov	r3,r17
 800c130:	88005816 	blt	r17,zero,800c294 <_realloc_r+0x1cc>
 800c134:	8c805736 	bltu	r17,r18,800c294 <_realloc_r+0x1cc>
 800c138:	80c0300e 	bge	r16,r3,800c1fc <_realloc_r+0x134>
 800c13c:	07020074 	movhi	fp,2049
 800c140:	e7092204 	addi	fp,fp,9352
 800c144:	e1c00217 	ldw	r7,8(fp)
 800c148:	9c09883a 	add	r4,r19,r16
 800c14c:	22000117 	ldw	r8,4(r4)
 800c150:	21c06326 	beq	r4,r7,800c2e0 <_realloc_r+0x218>
 800c154:	017fff84 	movi	r5,-2
 800c158:	414a703a 	and	r5,r8,r5
 800c15c:	214b883a 	add	r5,r4,r5
 800c160:	29800117 	ldw	r6,4(r5)
 800c164:	3180004c 	andi	r6,r6,1
 800c168:	30003f26 	beq	r6,zero,800c268 <_realloc_r+0x1a0>
 800c16c:	1080004c 	andi	r2,r2,1
 800c170:	10008326 	beq	r2,zero,800c380 <_realloc_r+0x2b8>
 800c174:	900b883a 	mov	r5,r18
 800c178:	a009883a 	mov	r4,r20
 800c17c:	8007ce00 	call	8007ce0 <_malloc_r>
 800c180:	1025883a 	mov	r18,r2
 800c184:	10011e26 	beq	r2,zero,800c600 <_realloc_r+0x538>
 800c188:	a93fff17 	ldw	r4,-4(r21)
 800c18c:	10fffe04 	addi	r3,r2,-8
 800c190:	00bfff84 	movi	r2,-2
 800c194:	2084703a 	and	r2,r4,r2
 800c198:	9885883a 	add	r2,r19,r2
 800c19c:	1880ee26 	beq	r3,r2,800c558 <_realloc_r+0x490>
 800c1a0:	81bfff04 	addi	r6,r16,-4
 800c1a4:	00800904 	movi	r2,36
 800c1a8:	1180b836 	bltu	r2,r6,800c48c <_realloc_r+0x3c4>
 800c1ac:	00c004c4 	movi	r3,19
 800c1b0:	19809636 	bltu	r3,r6,800c40c <_realloc_r+0x344>
 800c1b4:	9005883a 	mov	r2,r18
 800c1b8:	a807883a 	mov	r3,r21
 800c1bc:	19000017 	ldw	r4,0(r3)
 800c1c0:	11000015 	stw	r4,0(r2)
 800c1c4:	19000117 	ldw	r4,4(r3)
 800c1c8:	11000115 	stw	r4,4(r2)
 800c1cc:	18c00217 	ldw	r3,8(r3)
 800c1d0:	10c00215 	stw	r3,8(r2)
 800c1d4:	a80b883a 	mov	r5,r21
 800c1d8:	a009883a 	mov	r4,r20
 800c1dc:	80075b00 	call	80075b0 <_free_r>
 800c1e0:	a009883a 	mov	r4,r20
 800c1e4:	800f7f40 	call	800f7f4 <__malloc_unlock>
 800c1e8:	9005883a 	mov	r2,r18
 800c1ec:	00001206 	br	800c238 <_realloc_r+0x170>
 800c1f0:	00c00404 	movi	r3,16
 800c1f4:	1823883a 	mov	r17,r3
 800c1f8:	003fce06 	br	800c134 <__alt_data_end+0xff00c134>
 800c1fc:	a825883a 	mov	r18,r21
 800c200:	8445c83a 	sub	r2,r16,r17
 800c204:	00c003c4 	movi	r3,15
 800c208:	18802636 	bltu	r3,r2,800c2a4 <_realloc_r+0x1dc>
 800c20c:	99800117 	ldw	r6,4(r19)
 800c210:	9c07883a 	add	r3,r19,r16
 800c214:	3180004c 	andi	r6,r6,1
 800c218:	3420b03a 	or	r16,r6,r16
 800c21c:	9c000115 	stw	r16,4(r19)
 800c220:	18800117 	ldw	r2,4(r3)
 800c224:	10800054 	ori	r2,r2,1
 800c228:	18800115 	stw	r2,4(r3)
 800c22c:	a009883a 	mov	r4,r20
 800c230:	800f7f40 	call	800f7f4 <__malloc_unlock>
 800c234:	9005883a 	mov	r2,r18
 800c238:	dfc00917 	ldw	ra,36(sp)
 800c23c:	df000817 	ldw	fp,32(sp)
 800c240:	ddc00717 	ldw	r23,28(sp)
 800c244:	dd800617 	ldw	r22,24(sp)
 800c248:	dd400517 	ldw	r21,20(sp)
 800c24c:	dd000417 	ldw	r20,16(sp)
 800c250:	dcc00317 	ldw	r19,12(sp)
 800c254:	dc800217 	ldw	r18,8(sp)
 800c258:	dc400117 	ldw	r17,4(sp)
 800c25c:	dc000017 	ldw	r16,0(sp)
 800c260:	dec00a04 	addi	sp,sp,40
 800c264:	f800283a 	ret
 800c268:	017fff04 	movi	r5,-4
 800c26c:	414a703a 	and	r5,r8,r5
 800c270:	814d883a 	add	r6,r16,r5
 800c274:	30c01f16 	blt	r6,r3,800c2f4 <_realloc_r+0x22c>
 800c278:	20800317 	ldw	r2,12(r4)
 800c27c:	20c00217 	ldw	r3,8(r4)
 800c280:	a825883a 	mov	r18,r21
 800c284:	3021883a 	mov	r16,r6
 800c288:	18800315 	stw	r2,12(r3)
 800c28c:	10c00215 	stw	r3,8(r2)
 800c290:	003fdb06 	br	800c200 <__alt_data_end+0xff00c200>
 800c294:	00800304 	movi	r2,12
 800c298:	a0800015 	stw	r2,0(r20)
 800c29c:	0005883a 	mov	r2,zero
 800c2a0:	003fe506 	br	800c238 <__alt_data_end+0xff00c238>
 800c2a4:	98c00117 	ldw	r3,4(r19)
 800c2a8:	9c4b883a 	add	r5,r19,r17
 800c2ac:	11000054 	ori	r4,r2,1
 800c2b0:	18c0004c 	andi	r3,r3,1
 800c2b4:	1c62b03a 	or	r17,r3,r17
 800c2b8:	9c400115 	stw	r17,4(r19)
 800c2bc:	29000115 	stw	r4,4(r5)
 800c2c0:	2885883a 	add	r2,r5,r2
 800c2c4:	10c00117 	ldw	r3,4(r2)
 800c2c8:	29400204 	addi	r5,r5,8
 800c2cc:	a009883a 	mov	r4,r20
 800c2d0:	18c00054 	ori	r3,r3,1
 800c2d4:	10c00115 	stw	r3,4(r2)
 800c2d8:	80075b00 	call	80075b0 <_free_r>
 800c2dc:	003fd306 	br	800c22c <__alt_data_end+0xff00c22c>
 800c2e0:	017fff04 	movi	r5,-4
 800c2e4:	414a703a 	and	r5,r8,r5
 800c2e8:	89800404 	addi	r6,r17,16
 800c2ec:	8151883a 	add	r8,r16,r5
 800c2f0:	4180590e 	bge	r8,r6,800c458 <_realloc_r+0x390>
 800c2f4:	1080004c 	andi	r2,r2,1
 800c2f8:	103f9e1e 	bne	r2,zero,800c174 <__alt_data_end+0xff00c174>
 800c2fc:	adbffe17 	ldw	r22,-8(r21)
 800c300:	00bfff04 	movi	r2,-4
 800c304:	9dadc83a 	sub	r22,r19,r22
 800c308:	b1800117 	ldw	r6,4(r22)
 800c30c:	3084703a 	and	r2,r6,r2
 800c310:	20002026 	beq	r4,zero,800c394 <_realloc_r+0x2cc>
 800c314:	80af883a 	add	r23,r16,r2
 800c318:	b96f883a 	add	r23,r23,r5
 800c31c:	21c05f26 	beq	r4,r7,800c49c <_realloc_r+0x3d4>
 800c320:	b8c01c16 	blt	r23,r3,800c394 <_realloc_r+0x2cc>
 800c324:	20800317 	ldw	r2,12(r4)
 800c328:	20c00217 	ldw	r3,8(r4)
 800c32c:	81bfff04 	addi	r6,r16,-4
 800c330:	01000904 	movi	r4,36
 800c334:	18800315 	stw	r2,12(r3)
 800c338:	10c00215 	stw	r3,8(r2)
 800c33c:	b0c00217 	ldw	r3,8(r22)
 800c340:	b0800317 	ldw	r2,12(r22)
 800c344:	b4800204 	addi	r18,r22,8
 800c348:	18800315 	stw	r2,12(r3)
 800c34c:	10c00215 	stw	r3,8(r2)
 800c350:	21801b36 	bltu	r4,r6,800c3c0 <_realloc_r+0x2f8>
 800c354:	008004c4 	movi	r2,19
 800c358:	1180352e 	bgeu	r2,r6,800c430 <_realloc_r+0x368>
 800c35c:	a8800017 	ldw	r2,0(r21)
 800c360:	b0800215 	stw	r2,8(r22)
 800c364:	a8800117 	ldw	r2,4(r21)
 800c368:	b0800315 	stw	r2,12(r22)
 800c36c:	008006c4 	movi	r2,27
 800c370:	11807f36 	bltu	r2,r6,800c570 <_realloc_r+0x4a8>
 800c374:	b0800404 	addi	r2,r22,16
 800c378:	ad400204 	addi	r21,r21,8
 800c37c:	00002d06 	br	800c434 <_realloc_r+0x36c>
 800c380:	adbffe17 	ldw	r22,-8(r21)
 800c384:	00bfff04 	movi	r2,-4
 800c388:	9dadc83a 	sub	r22,r19,r22
 800c38c:	b1000117 	ldw	r4,4(r22)
 800c390:	2084703a 	and	r2,r4,r2
 800c394:	b03f7726 	beq	r22,zero,800c174 <__alt_data_end+0xff00c174>
 800c398:	80af883a 	add	r23,r16,r2
 800c39c:	b8ff7516 	blt	r23,r3,800c174 <__alt_data_end+0xff00c174>
 800c3a0:	b0800317 	ldw	r2,12(r22)
 800c3a4:	b0c00217 	ldw	r3,8(r22)
 800c3a8:	81bfff04 	addi	r6,r16,-4
 800c3ac:	01000904 	movi	r4,36
 800c3b0:	18800315 	stw	r2,12(r3)
 800c3b4:	10c00215 	stw	r3,8(r2)
 800c3b8:	b4800204 	addi	r18,r22,8
 800c3bc:	21bfe52e 	bgeu	r4,r6,800c354 <__alt_data_end+0xff00c354>
 800c3c0:	a80b883a 	mov	r5,r21
 800c3c4:	9009883a 	mov	r4,r18
 800c3c8:	800bf0c0 	call	800bf0c <memmove>
 800c3cc:	b821883a 	mov	r16,r23
 800c3d0:	b027883a 	mov	r19,r22
 800c3d4:	003f8a06 	br	800c200 <__alt_data_end+0xff00c200>
 800c3d8:	300b883a 	mov	r5,r6
 800c3dc:	dfc00917 	ldw	ra,36(sp)
 800c3e0:	df000817 	ldw	fp,32(sp)
 800c3e4:	ddc00717 	ldw	r23,28(sp)
 800c3e8:	dd800617 	ldw	r22,24(sp)
 800c3ec:	dd400517 	ldw	r21,20(sp)
 800c3f0:	dd000417 	ldw	r20,16(sp)
 800c3f4:	dcc00317 	ldw	r19,12(sp)
 800c3f8:	dc800217 	ldw	r18,8(sp)
 800c3fc:	dc400117 	ldw	r17,4(sp)
 800c400:	dc000017 	ldw	r16,0(sp)
 800c404:	dec00a04 	addi	sp,sp,40
 800c408:	8007ce01 	jmpi	8007ce0 <_malloc_r>
 800c40c:	a8c00017 	ldw	r3,0(r21)
 800c410:	90c00015 	stw	r3,0(r18)
 800c414:	a8c00117 	ldw	r3,4(r21)
 800c418:	90c00115 	stw	r3,4(r18)
 800c41c:	00c006c4 	movi	r3,27
 800c420:	19804536 	bltu	r3,r6,800c538 <_realloc_r+0x470>
 800c424:	90800204 	addi	r2,r18,8
 800c428:	a8c00204 	addi	r3,r21,8
 800c42c:	003f6306 	br	800c1bc <__alt_data_end+0xff00c1bc>
 800c430:	9005883a 	mov	r2,r18
 800c434:	a8c00017 	ldw	r3,0(r21)
 800c438:	b821883a 	mov	r16,r23
 800c43c:	b027883a 	mov	r19,r22
 800c440:	10c00015 	stw	r3,0(r2)
 800c444:	a8c00117 	ldw	r3,4(r21)
 800c448:	10c00115 	stw	r3,4(r2)
 800c44c:	a8c00217 	ldw	r3,8(r21)
 800c450:	10c00215 	stw	r3,8(r2)
 800c454:	003f6a06 	br	800c200 <__alt_data_end+0xff00c200>
 800c458:	9c67883a 	add	r19,r19,r17
 800c45c:	4445c83a 	sub	r2,r8,r17
 800c460:	e4c00215 	stw	r19,8(fp)
 800c464:	10800054 	ori	r2,r2,1
 800c468:	98800115 	stw	r2,4(r19)
 800c46c:	a8bfff17 	ldw	r2,-4(r21)
 800c470:	a009883a 	mov	r4,r20
 800c474:	1080004c 	andi	r2,r2,1
 800c478:	1462b03a 	or	r17,r2,r17
 800c47c:	ac7fff15 	stw	r17,-4(r21)
 800c480:	800f7f40 	call	800f7f4 <__malloc_unlock>
 800c484:	a805883a 	mov	r2,r21
 800c488:	003f6b06 	br	800c238 <__alt_data_end+0xff00c238>
 800c48c:	a80b883a 	mov	r5,r21
 800c490:	9009883a 	mov	r4,r18
 800c494:	800bf0c0 	call	800bf0c <memmove>
 800c498:	003f4e06 	br	800c1d4 <__alt_data_end+0xff00c1d4>
 800c49c:	89000404 	addi	r4,r17,16
 800c4a0:	b93fbc16 	blt	r23,r4,800c394 <__alt_data_end+0xff00c394>
 800c4a4:	b0800317 	ldw	r2,12(r22)
 800c4a8:	b0c00217 	ldw	r3,8(r22)
 800c4ac:	81bfff04 	addi	r6,r16,-4
 800c4b0:	01000904 	movi	r4,36
 800c4b4:	18800315 	stw	r2,12(r3)
 800c4b8:	10c00215 	stw	r3,8(r2)
 800c4bc:	b4800204 	addi	r18,r22,8
 800c4c0:	21804336 	bltu	r4,r6,800c5d0 <_realloc_r+0x508>
 800c4c4:	008004c4 	movi	r2,19
 800c4c8:	11803f2e 	bgeu	r2,r6,800c5c8 <_realloc_r+0x500>
 800c4cc:	a8800017 	ldw	r2,0(r21)
 800c4d0:	b0800215 	stw	r2,8(r22)
 800c4d4:	a8800117 	ldw	r2,4(r21)
 800c4d8:	b0800315 	stw	r2,12(r22)
 800c4dc:	008006c4 	movi	r2,27
 800c4e0:	11803f36 	bltu	r2,r6,800c5e0 <_realloc_r+0x518>
 800c4e4:	b0800404 	addi	r2,r22,16
 800c4e8:	ad400204 	addi	r21,r21,8
 800c4ec:	a8c00017 	ldw	r3,0(r21)
 800c4f0:	10c00015 	stw	r3,0(r2)
 800c4f4:	a8c00117 	ldw	r3,4(r21)
 800c4f8:	10c00115 	stw	r3,4(r2)
 800c4fc:	a8c00217 	ldw	r3,8(r21)
 800c500:	10c00215 	stw	r3,8(r2)
 800c504:	b447883a 	add	r3,r22,r17
 800c508:	bc45c83a 	sub	r2,r23,r17
 800c50c:	e0c00215 	stw	r3,8(fp)
 800c510:	10800054 	ori	r2,r2,1
 800c514:	18800115 	stw	r2,4(r3)
 800c518:	b0800117 	ldw	r2,4(r22)
 800c51c:	a009883a 	mov	r4,r20
 800c520:	1080004c 	andi	r2,r2,1
 800c524:	1462b03a 	or	r17,r2,r17
 800c528:	b4400115 	stw	r17,4(r22)
 800c52c:	800f7f40 	call	800f7f4 <__malloc_unlock>
 800c530:	9005883a 	mov	r2,r18
 800c534:	003f4006 	br	800c238 <__alt_data_end+0xff00c238>
 800c538:	a8c00217 	ldw	r3,8(r21)
 800c53c:	90c00215 	stw	r3,8(r18)
 800c540:	a8c00317 	ldw	r3,12(r21)
 800c544:	90c00315 	stw	r3,12(r18)
 800c548:	30801126 	beq	r6,r2,800c590 <_realloc_r+0x4c8>
 800c54c:	90800404 	addi	r2,r18,16
 800c550:	a8c00404 	addi	r3,r21,16
 800c554:	003f1906 	br	800c1bc <__alt_data_end+0xff00c1bc>
 800c558:	90ffff17 	ldw	r3,-4(r18)
 800c55c:	00bfff04 	movi	r2,-4
 800c560:	a825883a 	mov	r18,r21
 800c564:	1884703a 	and	r2,r3,r2
 800c568:	80a1883a 	add	r16,r16,r2
 800c56c:	003f2406 	br	800c200 <__alt_data_end+0xff00c200>
 800c570:	a8800217 	ldw	r2,8(r21)
 800c574:	b0800415 	stw	r2,16(r22)
 800c578:	a8800317 	ldw	r2,12(r21)
 800c57c:	b0800515 	stw	r2,20(r22)
 800c580:	31000a26 	beq	r6,r4,800c5ac <_realloc_r+0x4e4>
 800c584:	b0800604 	addi	r2,r22,24
 800c588:	ad400404 	addi	r21,r21,16
 800c58c:	003fa906 	br	800c434 <__alt_data_end+0xff00c434>
 800c590:	a9000417 	ldw	r4,16(r21)
 800c594:	90800604 	addi	r2,r18,24
 800c598:	a8c00604 	addi	r3,r21,24
 800c59c:	91000415 	stw	r4,16(r18)
 800c5a0:	a9000517 	ldw	r4,20(r21)
 800c5a4:	91000515 	stw	r4,20(r18)
 800c5a8:	003f0406 	br	800c1bc <__alt_data_end+0xff00c1bc>
 800c5ac:	a8c00417 	ldw	r3,16(r21)
 800c5b0:	ad400604 	addi	r21,r21,24
 800c5b4:	b0800804 	addi	r2,r22,32
 800c5b8:	b0c00615 	stw	r3,24(r22)
 800c5bc:	a8ffff17 	ldw	r3,-4(r21)
 800c5c0:	b0c00715 	stw	r3,28(r22)
 800c5c4:	003f9b06 	br	800c434 <__alt_data_end+0xff00c434>
 800c5c8:	9005883a 	mov	r2,r18
 800c5cc:	003fc706 	br	800c4ec <__alt_data_end+0xff00c4ec>
 800c5d0:	a80b883a 	mov	r5,r21
 800c5d4:	9009883a 	mov	r4,r18
 800c5d8:	800bf0c0 	call	800bf0c <memmove>
 800c5dc:	003fc906 	br	800c504 <__alt_data_end+0xff00c504>
 800c5e0:	a8800217 	ldw	r2,8(r21)
 800c5e4:	b0800415 	stw	r2,16(r22)
 800c5e8:	a8800317 	ldw	r2,12(r21)
 800c5ec:	b0800515 	stw	r2,20(r22)
 800c5f0:	31000726 	beq	r6,r4,800c610 <_realloc_r+0x548>
 800c5f4:	b0800604 	addi	r2,r22,24
 800c5f8:	ad400404 	addi	r21,r21,16
 800c5fc:	003fbb06 	br	800c4ec <__alt_data_end+0xff00c4ec>
 800c600:	a009883a 	mov	r4,r20
 800c604:	800f7f40 	call	800f7f4 <__malloc_unlock>
 800c608:	0005883a 	mov	r2,zero
 800c60c:	003f0a06 	br	800c238 <__alt_data_end+0xff00c238>
 800c610:	a8c00417 	ldw	r3,16(r21)
 800c614:	ad400604 	addi	r21,r21,24
 800c618:	b0800804 	addi	r2,r22,32
 800c61c:	b0c00615 	stw	r3,24(r22)
 800c620:	a8ffff17 	ldw	r3,-4(r21)
 800c624:	b0c00715 	stw	r3,28(r22)
 800c628:	003fb006 	br	800c4ec <__alt_data_end+0xff00c4ec>

0800c62c <_wcrtomb_r>:
 800c62c:	defff604 	addi	sp,sp,-40
 800c630:	00820074 	movhi	r2,2049
 800c634:	dc800815 	stw	r18,32(sp)
 800c638:	dc400715 	stw	r17,28(sp)
 800c63c:	dc000615 	stw	r16,24(sp)
 800c640:	108eae04 	addi	r2,r2,15032
 800c644:	dfc00915 	stw	ra,36(sp)
 800c648:	2021883a 	mov	r16,r4
 800c64c:	3823883a 	mov	r17,r7
 800c650:	14800017 	ldw	r18,0(r2)
 800c654:	28001426 	beq	r5,zero,800c6a8 <_wcrtomb_r+0x7c>
 800c658:	d9400415 	stw	r5,16(sp)
 800c65c:	d9800515 	stw	r6,20(sp)
 800c660:	8007ac40 	call	8007ac4 <__locale_charset>
 800c664:	d9800517 	ldw	r6,20(sp)
 800c668:	d9400417 	ldw	r5,16(sp)
 800c66c:	100f883a 	mov	r7,r2
 800c670:	dc400015 	stw	r17,0(sp)
 800c674:	8009883a 	mov	r4,r16
 800c678:	903ee83a 	callr	r18
 800c67c:	00ffffc4 	movi	r3,-1
 800c680:	10c0031e 	bne	r2,r3,800c690 <_wcrtomb_r+0x64>
 800c684:	88000015 	stw	zero,0(r17)
 800c688:	00c02284 	movi	r3,138
 800c68c:	80c00015 	stw	r3,0(r16)
 800c690:	dfc00917 	ldw	ra,36(sp)
 800c694:	dc800817 	ldw	r18,32(sp)
 800c698:	dc400717 	ldw	r17,28(sp)
 800c69c:	dc000617 	ldw	r16,24(sp)
 800c6a0:	dec00a04 	addi	sp,sp,40
 800c6a4:	f800283a 	ret
 800c6a8:	8007ac40 	call	8007ac4 <__locale_charset>
 800c6ac:	100f883a 	mov	r7,r2
 800c6b0:	dc400015 	stw	r17,0(sp)
 800c6b4:	000d883a 	mov	r6,zero
 800c6b8:	d9400104 	addi	r5,sp,4
 800c6bc:	8009883a 	mov	r4,r16
 800c6c0:	903ee83a 	callr	r18
 800c6c4:	003fed06 	br	800c67c <__alt_data_end+0xff00c67c>

0800c6c8 <wcrtomb>:
 800c6c8:	defff604 	addi	sp,sp,-40
 800c6cc:	00820074 	movhi	r2,2049
 800c6d0:	dc800615 	stw	r18,24(sp)
 800c6d4:	dc400515 	stw	r17,20(sp)
 800c6d8:	108eaa04 	addi	r2,r2,15016
 800c6dc:	dfc00915 	stw	ra,36(sp)
 800c6e0:	dd000815 	stw	r20,32(sp)
 800c6e4:	dcc00715 	stw	r19,28(sp)
 800c6e8:	dc000415 	stw	r16,16(sp)
 800c6ec:	3025883a 	mov	r18,r6
 800c6f0:	14400017 	ldw	r17,0(r2)
 800c6f4:	20001926 	beq	r4,zero,800c75c <wcrtomb+0x94>
 800c6f8:	00820074 	movhi	r2,2049
 800c6fc:	108eae04 	addi	r2,r2,15032
 800c700:	15000017 	ldw	r20,0(r2)
 800c704:	2021883a 	mov	r16,r4
 800c708:	2827883a 	mov	r19,r5
 800c70c:	8007ac40 	call	8007ac4 <__locale_charset>
 800c710:	100f883a 	mov	r7,r2
 800c714:	dc800015 	stw	r18,0(sp)
 800c718:	980d883a 	mov	r6,r19
 800c71c:	800b883a 	mov	r5,r16
 800c720:	8809883a 	mov	r4,r17
 800c724:	a03ee83a 	callr	r20
 800c728:	00ffffc4 	movi	r3,-1
 800c72c:	10c0031e 	bne	r2,r3,800c73c <wcrtomb+0x74>
 800c730:	90000015 	stw	zero,0(r18)
 800c734:	00c02284 	movi	r3,138
 800c738:	88c00015 	stw	r3,0(r17)
 800c73c:	dfc00917 	ldw	ra,36(sp)
 800c740:	dd000817 	ldw	r20,32(sp)
 800c744:	dcc00717 	ldw	r19,28(sp)
 800c748:	dc800617 	ldw	r18,24(sp)
 800c74c:	dc400517 	ldw	r17,20(sp)
 800c750:	dc000417 	ldw	r16,16(sp)
 800c754:	dec00a04 	addi	sp,sp,40
 800c758:	f800283a 	ret
 800c75c:	00820074 	movhi	r2,2049
 800c760:	108eae04 	addi	r2,r2,15032
 800c764:	14000017 	ldw	r16,0(r2)
 800c768:	8007ac40 	call	8007ac4 <__locale_charset>
 800c76c:	100f883a 	mov	r7,r2
 800c770:	dc800015 	stw	r18,0(sp)
 800c774:	000d883a 	mov	r6,zero
 800c778:	d9400104 	addi	r5,sp,4
 800c77c:	8809883a 	mov	r4,r17
 800c780:	803ee83a 	callr	r16
 800c784:	003fe806 	br	800c728 <__alt_data_end+0xff00c728>

0800c788 <__ascii_wctomb>:
 800c788:	28000526 	beq	r5,zero,800c7a0 <__ascii_wctomb+0x18>
 800c78c:	00803fc4 	movi	r2,255
 800c790:	11800536 	bltu	r2,r6,800c7a8 <__ascii_wctomb+0x20>
 800c794:	29800005 	stb	r6,0(r5)
 800c798:	00800044 	movi	r2,1
 800c79c:	f800283a 	ret
 800c7a0:	0005883a 	mov	r2,zero
 800c7a4:	f800283a 	ret
 800c7a8:	00802284 	movi	r2,138
 800c7ac:	20800015 	stw	r2,0(r4)
 800c7b0:	00bfffc4 	movi	r2,-1
 800c7b4:	f800283a 	ret

0800c7b8 <_wctomb_r>:
 800c7b8:	00820074 	movhi	r2,2049
 800c7bc:	defff904 	addi	sp,sp,-28
 800c7c0:	108eae04 	addi	r2,r2,15032
 800c7c4:	dfc00615 	stw	ra,24(sp)
 800c7c8:	dc400515 	stw	r17,20(sp)
 800c7cc:	dc000415 	stw	r16,16(sp)
 800c7d0:	3823883a 	mov	r17,r7
 800c7d4:	14000017 	ldw	r16,0(r2)
 800c7d8:	d9000115 	stw	r4,4(sp)
 800c7dc:	d9400215 	stw	r5,8(sp)
 800c7e0:	d9800315 	stw	r6,12(sp)
 800c7e4:	8007ac40 	call	8007ac4 <__locale_charset>
 800c7e8:	d9800317 	ldw	r6,12(sp)
 800c7ec:	d9400217 	ldw	r5,8(sp)
 800c7f0:	d9000117 	ldw	r4,4(sp)
 800c7f4:	100f883a 	mov	r7,r2
 800c7f8:	dc400015 	stw	r17,0(sp)
 800c7fc:	803ee83a 	callr	r16
 800c800:	dfc00617 	ldw	ra,24(sp)
 800c804:	dc400517 	ldw	r17,20(sp)
 800c808:	dc000417 	ldw	r16,16(sp)
 800c80c:	dec00704 	addi	sp,sp,28
 800c810:	f800283a 	ret

0800c814 <__udivdi3>:
 800c814:	defff504 	addi	sp,sp,-44
 800c818:	dcc00415 	stw	r19,16(sp)
 800c81c:	dc000115 	stw	r16,4(sp)
 800c820:	dfc00a15 	stw	ra,40(sp)
 800c824:	df000915 	stw	fp,36(sp)
 800c828:	ddc00815 	stw	r23,32(sp)
 800c82c:	dd800715 	stw	r22,28(sp)
 800c830:	dd400615 	stw	r21,24(sp)
 800c834:	dd000515 	stw	r20,20(sp)
 800c838:	dc800315 	stw	r18,12(sp)
 800c83c:	dc400215 	stw	r17,8(sp)
 800c840:	2027883a 	mov	r19,r4
 800c844:	2821883a 	mov	r16,r5
 800c848:	3800411e 	bne	r7,zero,800c950 <__udivdi3+0x13c>
 800c84c:	3023883a 	mov	r17,r6
 800c850:	2025883a 	mov	r18,r4
 800c854:	2980522e 	bgeu	r5,r6,800c9a0 <__udivdi3+0x18c>
 800c858:	00bfffd4 	movui	r2,65535
 800c85c:	282d883a 	mov	r22,r5
 800c860:	1180a836 	bltu	r2,r6,800cb04 <__udivdi3+0x2f0>
 800c864:	00803fc4 	movi	r2,255
 800c868:	1185803a 	cmpltu	r2,r2,r6
 800c86c:	100490fa 	slli	r2,r2,3
 800c870:	3086d83a 	srl	r3,r6,r2
 800c874:	01020074 	movhi	r4,2049
 800c878:	21073b44 	addi	r4,r4,7405
 800c87c:	20c7883a 	add	r3,r4,r3
 800c880:	18c00003 	ldbu	r3,0(r3)
 800c884:	1885883a 	add	r2,r3,r2
 800c888:	00c00804 	movi	r3,32
 800c88c:	1887c83a 	sub	r3,r3,r2
 800c890:	18000526 	beq	r3,zero,800c8a8 <__udivdi3+0x94>
 800c894:	80e0983a 	sll	r16,r16,r3
 800c898:	9884d83a 	srl	r2,r19,r2
 800c89c:	30e2983a 	sll	r17,r6,r3
 800c8a0:	98e4983a 	sll	r18,r19,r3
 800c8a4:	142cb03a 	or	r22,r2,r16
 800c8a8:	882ad43a 	srli	r21,r17,16
 800c8ac:	b009883a 	mov	r4,r22
 800c8b0:	8d3fffcc 	andi	r20,r17,65535
 800c8b4:	a80b883a 	mov	r5,r21
 800c8b8:	800221c0 	call	800221c <__umodsi3>
 800c8bc:	b009883a 	mov	r4,r22
 800c8c0:	a80b883a 	mov	r5,r21
 800c8c4:	1027883a 	mov	r19,r2
 800c8c8:	80021b80 	call	80021b8 <__udivsi3>
 800c8cc:	102d883a 	mov	r22,r2
 800c8d0:	9826943a 	slli	r19,r19,16
 800c8d4:	9004d43a 	srli	r2,r18,16
 800c8d8:	a5a1383a 	mul	r16,r20,r22
 800c8dc:	14c4b03a 	or	r2,r2,r19
 800c8e0:	1400052e 	bgeu	r2,r16,800c8f8 <__udivdi3+0xe4>
 800c8e4:	1445883a 	add	r2,r2,r17
 800c8e8:	b0ffffc4 	addi	r3,r22,-1
 800c8ec:	14400136 	bltu	r2,r17,800c8f4 <__udivdi3+0xe0>
 800c8f0:	14012336 	bltu	r2,r16,800cd80 <__udivdi3+0x56c>
 800c8f4:	182d883a 	mov	r22,r3
 800c8f8:	1421c83a 	sub	r16,r2,r16
 800c8fc:	a80b883a 	mov	r5,r21
 800c900:	8009883a 	mov	r4,r16
 800c904:	800221c0 	call	800221c <__umodsi3>
 800c908:	1027883a 	mov	r19,r2
 800c90c:	a80b883a 	mov	r5,r21
 800c910:	8009883a 	mov	r4,r16
 800c914:	80021b80 	call	80021b8 <__udivsi3>
 800c918:	9826943a 	slli	r19,r19,16
 800c91c:	a0a9383a 	mul	r20,r20,r2
 800c920:	94bfffcc 	andi	r18,r18,65535
 800c924:	94e4b03a 	or	r18,r18,r19
 800c928:	9500052e 	bgeu	r18,r20,800c940 <__udivdi3+0x12c>
 800c92c:	8ca5883a 	add	r18,r17,r18
 800c930:	10ffffc4 	addi	r3,r2,-1
 800c934:	9440f136 	bltu	r18,r17,800ccfc <__udivdi3+0x4e8>
 800c938:	9500f02e 	bgeu	r18,r20,800ccfc <__udivdi3+0x4e8>
 800c93c:	10bfff84 	addi	r2,r2,-2
 800c940:	b00c943a 	slli	r6,r22,16
 800c944:	0007883a 	mov	r3,zero
 800c948:	3084b03a 	or	r2,r6,r2
 800c94c:	00005906 	br	800cab4 <__udivdi3+0x2a0>
 800c950:	29c05636 	bltu	r5,r7,800caac <__udivdi3+0x298>
 800c954:	00bfffd4 	movui	r2,65535
 800c958:	11c0622e 	bgeu	r2,r7,800cae4 <__udivdi3+0x2d0>
 800c95c:	00804034 	movhi	r2,256
 800c960:	10bfffc4 	addi	r2,r2,-1
 800c964:	11c0ee36 	bltu	r2,r7,800cd20 <__udivdi3+0x50c>
 800c968:	00800404 	movi	r2,16
 800c96c:	3886d83a 	srl	r3,r7,r2
 800c970:	01020074 	movhi	r4,2049
 800c974:	21073b44 	addi	r4,r4,7405
 800c978:	20c7883a 	add	r3,r4,r3
 800c97c:	18c00003 	ldbu	r3,0(r3)
 800c980:	05400804 	movi	r21,32
 800c984:	1885883a 	add	r2,r3,r2
 800c988:	a8abc83a 	sub	r21,r21,r2
 800c98c:	a800621e 	bne	r21,zero,800cb18 <__udivdi3+0x304>
 800c990:	3c00e936 	bltu	r7,r16,800cd38 <__udivdi3+0x524>
 800c994:	9985403a 	cmpgeu	r2,r19,r6
 800c998:	0007883a 	mov	r3,zero
 800c99c:	00004506 	br	800cab4 <__udivdi3+0x2a0>
 800c9a0:	3000041e 	bne	r6,zero,800c9b4 <__udivdi3+0x1a0>
 800c9a4:	000b883a 	mov	r5,zero
 800c9a8:	01000044 	movi	r4,1
 800c9ac:	80021b80 	call	80021b8 <__udivsi3>
 800c9b0:	1023883a 	mov	r17,r2
 800c9b4:	00bfffd4 	movui	r2,65535
 800c9b8:	14404e2e 	bgeu	r2,r17,800caf4 <__udivdi3+0x2e0>
 800c9bc:	00804034 	movhi	r2,256
 800c9c0:	10bfffc4 	addi	r2,r2,-1
 800c9c4:	1440d836 	bltu	r2,r17,800cd28 <__udivdi3+0x514>
 800c9c8:	00800404 	movi	r2,16
 800c9cc:	8886d83a 	srl	r3,r17,r2
 800c9d0:	01020074 	movhi	r4,2049
 800c9d4:	21073b44 	addi	r4,r4,7405
 800c9d8:	20c7883a 	add	r3,r4,r3
 800c9dc:	18c00003 	ldbu	r3,0(r3)
 800c9e0:	1885883a 	add	r2,r3,r2
 800c9e4:	00c00804 	movi	r3,32
 800c9e8:	1887c83a 	sub	r3,r3,r2
 800c9ec:	18008f1e 	bne	r3,zero,800cc2c <__udivdi3+0x418>
 800c9f0:	882ad43a 	srli	r21,r17,16
 800c9f4:	8461c83a 	sub	r16,r16,r17
 800c9f8:	8d3fffcc 	andi	r20,r17,65535
 800c9fc:	00c00044 	movi	r3,1
 800ca00:	8009883a 	mov	r4,r16
 800ca04:	a80b883a 	mov	r5,r21
 800ca08:	d8c00015 	stw	r3,0(sp)
 800ca0c:	800221c0 	call	800221c <__umodsi3>
 800ca10:	8009883a 	mov	r4,r16
 800ca14:	a80b883a 	mov	r5,r21
 800ca18:	1027883a 	mov	r19,r2
 800ca1c:	80021b80 	call	80021b8 <__udivsi3>
 800ca20:	9826943a 	slli	r19,r19,16
 800ca24:	9008d43a 	srli	r4,r18,16
 800ca28:	1521383a 	mul	r16,r2,r20
 800ca2c:	102d883a 	mov	r22,r2
 800ca30:	24c8b03a 	or	r4,r4,r19
 800ca34:	d8c00017 	ldw	r3,0(sp)
 800ca38:	2400052e 	bgeu	r4,r16,800ca50 <__udivdi3+0x23c>
 800ca3c:	2449883a 	add	r4,r4,r17
 800ca40:	b0bfffc4 	addi	r2,r22,-1
 800ca44:	24400136 	bltu	r4,r17,800ca4c <__udivdi3+0x238>
 800ca48:	2400ca36 	bltu	r4,r16,800cd74 <__udivdi3+0x560>
 800ca4c:	102d883a 	mov	r22,r2
 800ca50:	2421c83a 	sub	r16,r4,r16
 800ca54:	a80b883a 	mov	r5,r21
 800ca58:	8009883a 	mov	r4,r16
 800ca5c:	d8c00015 	stw	r3,0(sp)
 800ca60:	800221c0 	call	800221c <__umodsi3>
 800ca64:	1027883a 	mov	r19,r2
 800ca68:	a80b883a 	mov	r5,r21
 800ca6c:	8009883a 	mov	r4,r16
 800ca70:	80021b80 	call	80021b8 <__udivsi3>
 800ca74:	9826943a 	slli	r19,r19,16
 800ca78:	1529383a 	mul	r20,r2,r20
 800ca7c:	94bfffcc 	andi	r18,r18,65535
 800ca80:	94e4b03a 	or	r18,r18,r19
 800ca84:	d8c00017 	ldw	r3,0(sp)
 800ca88:	9500052e 	bgeu	r18,r20,800caa0 <__udivdi3+0x28c>
 800ca8c:	8ca5883a 	add	r18,r17,r18
 800ca90:	113fffc4 	addi	r4,r2,-1
 800ca94:	94409736 	bltu	r18,r17,800ccf4 <__udivdi3+0x4e0>
 800ca98:	9500962e 	bgeu	r18,r20,800ccf4 <__udivdi3+0x4e0>
 800ca9c:	10bfff84 	addi	r2,r2,-2
 800caa0:	b00c943a 	slli	r6,r22,16
 800caa4:	3084b03a 	or	r2,r6,r2
 800caa8:	00000206 	br	800cab4 <__udivdi3+0x2a0>
 800caac:	0007883a 	mov	r3,zero
 800cab0:	0005883a 	mov	r2,zero
 800cab4:	dfc00a17 	ldw	ra,40(sp)
 800cab8:	df000917 	ldw	fp,36(sp)
 800cabc:	ddc00817 	ldw	r23,32(sp)
 800cac0:	dd800717 	ldw	r22,28(sp)
 800cac4:	dd400617 	ldw	r21,24(sp)
 800cac8:	dd000517 	ldw	r20,20(sp)
 800cacc:	dcc00417 	ldw	r19,16(sp)
 800cad0:	dc800317 	ldw	r18,12(sp)
 800cad4:	dc400217 	ldw	r17,8(sp)
 800cad8:	dc000117 	ldw	r16,4(sp)
 800cadc:	dec00b04 	addi	sp,sp,44
 800cae0:	f800283a 	ret
 800cae4:	00803fc4 	movi	r2,255
 800cae8:	11c5803a 	cmpltu	r2,r2,r7
 800caec:	100490fa 	slli	r2,r2,3
 800caf0:	003f9e06 	br	800c96c <__alt_data_end+0xff00c96c>
 800caf4:	00803fc4 	movi	r2,255
 800caf8:	1445803a 	cmpltu	r2,r2,r17
 800cafc:	100490fa 	slli	r2,r2,3
 800cb00:	003fb206 	br	800c9cc <__alt_data_end+0xff00c9cc>
 800cb04:	00804034 	movhi	r2,256
 800cb08:	10bfffc4 	addi	r2,r2,-1
 800cb0c:	11808836 	bltu	r2,r6,800cd30 <__udivdi3+0x51c>
 800cb10:	00800404 	movi	r2,16
 800cb14:	003f5606 	br	800c870 <__alt_data_end+0xff00c870>
 800cb18:	30aed83a 	srl	r23,r6,r2
 800cb1c:	3d4e983a 	sll	r7,r7,r21
 800cb20:	80acd83a 	srl	r22,r16,r2
 800cb24:	9884d83a 	srl	r2,r19,r2
 800cb28:	3deeb03a 	or	r23,r7,r23
 800cb2c:	b824d43a 	srli	r18,r23,16
 800cb30:	8560983a 	sll	r16,r16,r21
 800cb34:	b009883a 	mov	r4,r22
 800cb38:	900b883a 	mov	r5,r18
 800cb3c:	3568983a 	sll	r20,r6,r21
 800cb40:	1420b03a 	or	r16,r2,r16
 800cb44:	800221c0 	call	800221c <__umodsi3>
 800cb48:	b009883a 	mov	r4,r22
 800cb4c:	900b883a 	mov	r5,r18
 800cb50:	1023883a 	mov	r17,r2
 800cb54:	80021b80 	call	80021b8 <__udivsi3>
 800cb58:	8808943a 	slli	r4,r17,16
 800cb5c:	bf3fffcc 	andi	fp,r23,65535
 800cb60:	8006d43a 	srli	r3,r16,16
 800cb64:	e0a3383a 	mul	r17,fp,r2
 800cb68:	100d883a 	mov	r6,r2
 800cb6c:	1906b03a 	or	r3,r3,r4
 800cb70:	1c40042e 	bgeu	r3,r17,800cb84 <__udivdi3+0x370>
 800cb74:	1dc7883a 	add	r3,r3,r23
 800cb78:	10bfffc4 	addi	r2,r2,-1
 800cb7c:	1dc0752e 	bgeu	r3,r23,800cd54 <__udivdi3+0x540>
 800cb80:	100d883a 	mov	r6,r2
 800cb84:	1c63c83a 	sub	r17,r3,r17
 800cb88:	900b883a 	mov	r5,r18
 800cb8c:	8809883a 	mov	r4,r17
 800cb90:	d9800015 	stw	r6,0(sp)
 800cb94:	800221c0 	call	800221c <__umodsi3>
 800cb98:	102d883a 	mov	r22,r2
 800cb9c:	8809883a 	mov	r4,r17
 800cba0:	900b883a 	mov	r5,r18
 800cba4:	80021b80 	call	80021b8 <__udivsi3>
 800cba8:	b02c943a 	slli	r22,r22,16
 800cbac:	e089383a 	mul	r4,fp,r2
 800cbb0:	843fffcc 	andi	r16,r16,65535
 800cbb4:	85a0b03a 	or	r16,r16,r22
 800cbb8:	d9800017 	ldw	r6,0(sp)
 800cbbc:	8100042e 	bgeu	r16,r4,800cbd0 <__udivdi3+0x3bc>
 800cbc0:	85e1883a 	add	r16,r16,r23
 800cbc4:	10ffffc4 	addi	r3,r2,-1
 800cbc8:	85c05e2e 	bgeu	r16,r23,800cd44 <__udivdi3+0x530>
 800cbcc:	1805883a 	mov	r2,r3
 800cbd0:	300c943a 	slli	r6,r6,16
 800cbd4:	a17fffcc 	andi	r5,r20,65535
 800cbd8:	a028d43a 	srli	r20,r20,16
 800cbdc:	3084b03a 	or	r2,r6,r2
 800cbe0:	10ffffcc 	andi	r3,r2,65535
 800cbe4:	100cd43a 	srli	r6,r2,16
 800cbe8:	194f383a 	mul	r7,r3,r5
 800cbec:	1d07383a 	mul	r3,r3,r20
 800cbf0:	314b383a 	mul	r5,r6,r5
 800cbf4:	3810d43a 	srli	r8,r7,16
 800cbf8:	8121c83a 	sub	r16,r16,r4
 800cbfc:	1947883a 	add	r3,r3,r5
 800cc00:	40c7883a 	add	r3,r8,r3
 800cc04:	350d383a 	mul	r6,r6,r20
 800cc08:	1940022e 	bgeu	r3,r5,800cc14 <__udivdi3+0x400>
 800cc0c:	01000074 	movhi	r4,1
 800cc10:	310d883a 	add	r6,r6,r4
 800cc14:	1828d43a 	srli	r20,r3,16
 800cc18:	a18d883a 	add	r6,r20,r6
 800cc1c:	81803e36 	bltu	r16,r6,800cd18 <__udivdi3+0x504>
 800cc20:	81803826 	beq	r16,r6,800cd04 <__udivdi3+0x4f0>
 800cc24:	0007883a 	mov	r3,zero
 800cc28:	003fa206 	br	800cab4 <__alt_data_end+0xff00cab4>
 800cc2c:	88e2983a 	sll	r17,r17,r3
 800cc30:	80a8d83a 	srl	r20,r16,r2
 800cc34:	80e0983a 	sll	r16,r16,r3
 800cc38:	882ad43a 	srli	r21,r17,16
 800cc3c:	9884d83a 	srl	r2,r19,r2
 800cc40:	a009883a 	mov	r4,r20
 800cc44:	a80b883a 	mov	r5,r21
 800cc48:	142eb03a 	or	r23,r2,r16
 800cc4c:	98e4983a 	sll	r18,r19,r3
 800cc50:	800221c0 	call	800221c <__umodsi3>
 800cc54:	a009883a 	mov	r4,r20
 800cc58:	a80b883a 	mov	r5,r21
 800cc5c:	1021883a 	mov	r16,r2
 800cc60:	80021b80 	call	80021b8 <__udivsi3>
 800cc64:	1039883a 	mov	fp,r2
 800cc68:	8d3fffcc 	andi	r20,r17,65535
 800cc6c:	8020943a 	slli	r16,r16,16
 800cc70:	b804d43a 	srli	r2,r23,16
 800cc74:	a72d383a 	mul	r22,r20,fp
 800cc78:	1404b03a 	or	r2,r2,r16
 800cc7c:	1580062e 	bgeu	r2,r22,800cc98 <__udivdi3+0x484>
 800cc80:	1445883a 	add	r2,r2,r17
 800cc84:	e0ffffc4 	addi	r3,fp,-1
 800cc88:	14403836 	bltu	r2,r17,800cd6c <__udivdi3+0x558>
 800cc8c:	1580372e 	bgeu	r2,r22,800cd6c <__udivdi3+0x558>
 800cc90:	e73fff84 	addi	fp,fp,-2
 800cc94:	1445883a 	add	r2,r2,r17
 800cc98:	15adc83a 	sub	r22,r2,r22
 800cc9c:	a80b883a 	mov	r5,r21
 800cca0:	b009883a 	mov	r4,r22
 800cca4:	800221c0 	call	800221c <__umodsi3>
 800cca8:	1027883a 	mov	r19,r2
 800ccac:	b009883a 	mov	r4,r22
 800ccb0:	a80b883a 	mov	r5,r21
 800ccb4:	80021b80 	call	80021b8 <__udivsi3>
 800ccb8:	9826943a 	slli	r19,r19,16
 800ccbc:	a0a1383a 	mul	r16,r20,r2
 800ccc0:	b93fffcc 	andi	r4,r23,65535
 800ccc4:	24c8b03a 	or	r4,r4,r19
 800ccc8:	2400062e 	bgeu	r4,r16,800cce4 <__udivdi3+0x4d0>
 800cccc:	2449883a 	add	r4,r4,r17
 800ccd0:	10ffffc4 	addi	r3,r2,-1
 800ccd4:	24402336 	bltu	r4,r17,800cd64 <__udivdi3+0x550>
 800ccd8:	2400222e 	bgeu	r4,r16,800cd64 <__udivdi3+0x550>
 800ccdc:	10bfff84 	addi	r2,r2,-2
 800cce0:	2449883a 	add	r4,r4,r17
 800cce4:	e038943a 	slli	fp,fp,16
 800cce8:	2421c83a 	sub	r16,r4,r16
 800ccec:	e086b03a 	or	r3,fp,r2
 800ccf0:	003f4306 	br	800ca00 <__alt_data_end+0xff00ca00>
 800ccf4:	2005883a 	mov	r2,r4
 800ccf8:	003f6906 	br	800caa0 <__alt_data_end+0xff00caa0>
 800ccfc:	1805883a 	mov	r2,r3
 800cd00:	003f0f06 	br	800c940 <__alt_data_end+0xff00c940>
 800cd04:	1806943a 	slli	r3,r3,16
 800cd08:	9d66983a 	sll	r19,r19,r21
 800cd0c:	39ffffcc 	andi	r7,r7,65535
 800cd10:	19c7883a 	add	r3,r3,r7
 800cd14:	98ffc32e 	bgeu	r19,r3,800cc24 <__alt_data_end+0xff00cc24>
 800cd18:	10bfffc4 	addi	r2,r2,-1
 800cd1c:	003fc106 	br	800cc24 <__alt_data_end+0xff00cc24>
 800cd20:	00800604 	movi	r2,24
 800cd24:	003f1106 	br	800c96c <__alt_data_end+0xff00c96c>
 800cd28:	00800604 	movi	r2,24
 800cd2c:	003f2706 	br	800c9cc <__alt_data_end+0xff00c9cc>
 800cd30:	00800604 	movi	r2,24
 800cd34:	003ece06 	br	800c870 <__alt_data_end+0xff00c870>
 800cd38:	0007883a 	mov	r3,zero
 800cd3c:	00800044 	movi	r2,1
 800cd40:	003f5c06 	br	800cab4 <__alt_data_end+0xff00cab4>
 800cd44:	813fa12e 	bgeu	r16,r4,800cbcc <__alt_data_end+0xff00cbcc>
 800cd48:	10bfff84 	addi	r2,r2,-2
 800cd4c:	85e1883a 	add	r16,r16,r23
 800cd50:	003f9f06 	br	800cbd0 <__alt_data_end+0xff00cbd0>
 800cd54:	1c7f8a2e 	bgeu	r3,r17,800cb80 <__alt_data_end+0xff00cb80>
 800cd58:	31bfff84 	addi	r6,r6,-2
 800cd5c:	1dc7883a 	add	r3,r3,r23
 800cd60:	003f8806 	br	800cb84 <__alt_data_end+0xff00cb84>
 800cd64:	1805883a 	mov	r2,r3
 800cd68:	003fde06 	br	800cce4 <__alt_data_end+0xff00cce4>
 800cd6c:	1839883a 	mov	fp,r3
 800cd70:	003fc906 	br	800cc98 <__alt_data_end+0xff00cc98>
 800cd74:	b5bfff84 	addi	r22,r22,-2
 800cd78:	2449883a 	add	r4,r4,r17
 800cd7c:	003f3406 	br	800ca50 <__alt_data_end+0xff00ca50>
 800cd80:	b5bfff84 	addi	r22,r22,-2
 800cd84:	1445883a 	add	r2,r2,r17
 800cd88:	003edb06 	br	800c8f8 <__alt_data_end+0xff00c8f8>

0800cd8c <__umoddi3>:
 800cd8c:	defff404 	addi	sp,sp,-48
 800cd90:	df000a15 	stw	fp,40(sp)
 800cd94:	dc400315 	stw	r17,12(sp)
 800cd98:	dc000215 	stw	r16,8(sp)
 800cd9c:	dfc00b15 	stw	ra,44(sp)
 800cda0:	ddc00915 	stw	r23,36(sp)
 800cda4:	dd800815 	stw	r22,32(sp)
 800cda8:	dd400715 	stw	r21,28(sp)
 800cdac:	dd000615 	stw	r20,24(sp)
 800cdb0:	dcc00515 	stw	r19,20(sp)
 800cdb4:	dc800415 	stw	r18,16(sp)
 800cdb8:	2021883a 	mov	r16,r4
 800cdbc:	2823883a 	mov	r17,r5
 800cdc0:	2839883a 	mov	fp,r5
 800cdc4:	38003c1e 	bne	r7,zero,800ceb8 <__umoddi3+0x12c>
 800cdc8:	3027883a 	mov	r19,r6
 800cdcc:	2029883a 	mov	r20,r4
 800cdd0:	2980512e 	bgeu	r5,r6,800cf18 <__umoddi3+0x18c>
 800cdd4:	00bfffd4 	movui	r2,65535
 800cdd8:	11809a36 	bltu	r2,r6,800d044 <__umoddi3+0x2b8>
 800cddc:	01003fc4 	movi	r4,255
 800cde0:	2189803a 	cmpltu	r4,r4,r6
 800cde4:	200890fa 	slli	r4,r4,3
 800cde8:	3104d83a 	srl	r2,r6,r4
 800cdec:	00c20074 	movhi	r3,2049
 800cdf0:	18c73b44 	addi	r3,r3,7405
 800cdf4:	1885883a 	add	r2,r3,r2
 800cdf8:	10c00003 	ldbu	r3,0(r2)
 800cdfc:	00800804 	movi	r2,32
 800ce00:	1909883a 	add	r4,r3,r4
 800ce04:	1125c83a 	sub	r18,r2,r4
 800ce08:	90000526 	beq	r18,zero,800ce20 <__umoddi3+0x94>
 800ce0c:	8ca2983a 	sll	r17,r17,r18
 800ce10:	8108d83a 	srl	r4,r16,r4
 800ce14:	34a6983a 	sll	r19,r6,r18
 800ce18:	84a8983a 	sll	r20,r16,r18
 800ce1c:	2478b03a 	or	fp,r4,r17
 800ce20:	982ed43a 	srli	r23,r19,16
 800ce24:	e009883a 	mov	r4,fp
 800ce28:	9dbfffcc 	andi	r22,r19,65535
 800ce2c:	b80b883a 	mov	r5,r23
 800ce30:	800221c0 	call	800221c <__umodsi3>
 800ce34:	e009883a 	mov	r4,fp
 800ce38:	b80b883a 	mov	r5,r23
 800ce3c:	102b883a 	mov	r21,r2
 800ce40:	80021b80 	call	80021b8 <__udivsi3>
 800ce44:	a806943a 	slli	r3,r21,16
 800ce48:	a008d43a 	srli	r4,r20,16
 800ce4c:	b085383a 	mul	r2,r22,r2
 800ce50:	20c8b03a 	or	r4,r4,r3
 800ce54:	2080032e 	bgeu	r4,r2,800ce64 <__umoddi3+0xd8>
 800ce58:	24c9883a 	add	r4,r4,r19
 800ce5c:	24c00136 	bltu	r4,r19,800ce64 <__umoddi3+0xd8>
 800ce60:	20811036 	bltu	r4,r2,800d2a4 <__umoddi3+0x518>
 800ce64:	20abc83a 	sub	r21,r4,r2
 800ce68:	b80b883a 	mov	r5,r23
 800ce6c:	a809883a 	mov	r4,r21
 800ce70:	800221c0 	call	800221c <__umodsi3>
 800ce74:	1023883a 	mov	r17,r2
 800ce78:	b80b883a 	mov	r5,r23
 800ce7c:	a809883a 	mov	r4,r21
 800ce80:	80021b80 	call	80021b8 <__udivsi3>
 800ce84:	8822943a 	slli	r17,r17,16
 800ce88:	b085383a 	mul	r2,r22,r2
 800ce8c:	a0ffffcc 	andi	r3,r20,65535
 800ce90:	1c46b03a 	or	r3,r3,r17
 800ce94:	1880042e 	bgeu	r3,r2,800cea8 <__umoddi3+0x11c>
 800ce98:	1cc7883a 	add	r3,r3,r19
 800ce9c:	1cc00236 	bltu	r3,r19,800cea8 <__umoddi3+0x11c>
 800cea0:	1880012e 	bgeu	r3,r2,800cea8 <__umoddi3+0x11c>
 800cea4:	1cc7883a 	add	r3,r3,r19
 800cea8:	1885c83a 	sub	r2,r3,r2
 800ceac:	1484d83a 	srl	r2,r2,r18
 800ceb0:	0007883a 	mov	r3,zero
 800ceb4:	00004f06 	br	800cff4 <__umoddi3+0x268>
 800ceb8:	29c04c36 	bltu	r5,r7,800cfec <__umoddi3+0x260>
 800cebc:	00bfffd4 	movui	r2,65535
 800cec0:	11c0582e 	bgeu	r2,r7,800d024 <__umoddi3+0x298>
 800cec4:	00804034 	movhi	r2,256
 800cec8:	10bfffc4 	addi	r2,r2,-1
 800cecc:	11c0e736 	bltu	r2,r7,800d26c <__umoddi3+0x4e0>
 800ced0:	01000404 	movi	r4,16
 800ced4:	3904d83a 	srl	r2,r7,r4
 800ced8:	00c20074 	movhi	r3,2049
 800cedc:	18c73b44 	addi	r3,r3,7405
 800cee0:	1885883a 	add	r2,r3,r2
 800cee4:	14c00003 	ldbu	r19,0(r2)
 800cee8:	00c00804 	movi	r3,32
 800ceec:	9927883a 	add	r19,r19,r4
 800cef0:	1ce9c83a 	sub	r20,r3,r19
 800cef4:	a000581e 	bne	r20,zero,800d058 <__umoddi3+0x2cc>
 800cef8:	3c400136 	bltu	r7,r17,800cf00 <__umoddi3+0x174>
 800cefc:	8180eb36 	bltu	r16,r6,800d2ac <__umoddi3+0x520>
 800cf00:	8185c83a 	sub	r2,r16,r6
 800cf04:	89e3c83a 	sub	r17,r17,r7
 800cf08:	8089803a 	cmpltu	r4,r16,r2
 800cf0c:	8939c83a 	sub	fp,r17,r4
 800cf10:	e007883a 	mov	r3,fp
 800cf14:	00003706 	br	800cff4 <__umoddi3+0x268>
 800cf18:	3000041e 	bne	r6,zero,800cf2c <__umoddi3+0x1a0>
 800cf1c:	000b883a 	mov	r5,zero
 800cf20:	01000044 	movi	r4,1
 800cf24:	80021b80 	call	80021b8 <__udivsi3>
 800cf28:	1027883a 	mov	r19,r2
 800cf2c:	00bfffd4 	movui	r2,65535
 800cf30:	14c0402e 	bgeu	r2,r19,800d034 <__umoddi3+0x2a8>
 800cf34:	00804034 	movhi	r2,256
 800cf38:	10bfffc4 	addi	r2,r2,-1
 800cf3c:	14c0cd36 	bltu	r2,r19,800d274 <__umoddi3+0x4e8>
 800cf40:	00800404 	movi	r2,16
 800cf44:	9886d83a 	srl	r3,r19,r2
 800cf48:	01020074 	movhi	r4,2049
 800cf4c:	21073b44 	addi	r4,r4,7405
 800cf50:	20c7883a 	add	r3,r4,r3
 800cf54:	18c00003 	ldbu	r3,0(r3)
 800cf58:	1887883a 	add	r3,r3,r2
 800cf5c:	00800804 	movi	r2,32
 800cf60:	10e5c83a 	sub	r18,r2,r3
 800cf64:	9000901e 	bne	r18,zero,800d1a8 <__umoddi3+0x41c>
 800cf68:	982cd43a 	srli	r22,r19,16
 800cf6c:	8ce3c83a 	sub	r17,r17,r19
 800cf70:	9d7fffcc 	andi	r21,r19,65535
 800cf74:	b00b883a 	mov	r5,r22
 800cf78:	8809883a 	mov	r4,r17
 800cf7c:	800221c0 	call	800221c <__umodsi3>
 800cf80:	8809883a 	mov	r4,r17
 800cf84:	b00b883a 	mov	r5,r22
 800cf88:	1021883a 	mov	r16,r2
 800cf8c:	80021b80 	call	80021b8 <__udivsi3>
 800cf90:	8006943a 	slli	r3,r16,16
 800cf94:	a008d43a 	srli	r4,r20,16
 800cf98:	1545383a 	mul	r2,r2,r21
 800cf9c:	20c8b03a 	or	r4,r4,r3
 800cfa0:	2080042e 	bgeu	r4,r2,800cfb4 <__umoddi3+0x228>
 800cfa4:	24c9883a 	add	r4,r4,r19
 800cfa8:	24c00236 	bltu	r4,r19,800cfb4 <__umoddi3+0x228>
 800cfac:	2080012e 	bgeu	r4,r2,800cfb4 <__umoddi3+0x228>
 800cfb0:	24c9883a 	add	r4,r4,r19
 800cfb4:	20a1c83a 	sub	r16,r4,r2
 800cfb8:	b00b883a 	mov	r5,r22
 800cfbc:	8009883a 	mov	r4,r16
 800cfc0:	800221c0 	call	800221c <__umodsi3>
 800cfc4:	1023883a 	mov	r17,r2
 800cfc8:	b00b883a 	mov	r5,r22
 800cfcc:	8009883a 	mov	r4,r16
 800cfd0:	80021b80 	call	80021b8 <__udivsi3>
 800cfd4:	8822943a 	slli	r17,r17,16
 800cfd8:	1545383a 	mul	r2,r2,r21
 800cfdc:	a53fffcc 	andi	r20,r20,65535
 800cfe0:	a446b03a 	or	r3,r20,r17
 800cfe4:	18bfb02e 	bgeu	r3,r2,800cea8 <__alt_data_end+0xff00cea8>
 800cfe8:	003fab06 	br	800ce98 <__alt_data_end+0xff00ce98>
 800cfec:	2005883a 	mov	r2,r4
 800cff0:	2807883a 	mov	r3,r5
 800cff4:	dfc00b17 	ldw	ra,44(sp)
 800cff8:	df000a17 	ldw	fp,40(sp)
 800cffc:	ddc00917 	ldw	r23,36(sp)
 800d000:	dd800817 	ldw	r22,32(sp)
 800d004:	dd400717 	ldw	r21,28(sp)
 800d008:	dd000617 	ldw	r20,24(sp)
 800d00c:	dcc00517 	ldw	r19,20(sp)
 800d010:	dc800417 	ldw	r18,16(sp)
 800d014:	dc400317 	ldw	r17,12(sp)
 800d018:	dc000217 	ldw	r16,8(sp)
 800d01c:	dec00c04 	addi	sp,sp,48
 800d020:	f800283a 	ret
 800d024:	04c03fc4 	movi	r19,255
 800d028:	99c9803a 	cmpltu	r4,r19,r7
 800d02c:	200890fa 	slli	r4,r4,3
 800d030:	003fa806 	br	800ced4 <__alt_data_end+0xff00ced4>
 800d034:	00803fc4 	movi	r2,255
 800d038:	14c5803a 	cmpltu	r2,r2,r19
 800d03c:	100490fa 	slli	r2,r2,3
 800d040:	003fc006 	br	800cf44 <__alt_data_end+0xff00cf44>
 800d044:	00804034 	movhi	r2,256
 800d048:	10bfffc4 	addi	r2,r2,-1
 800d04c:	11808b36 	bltu	r2,r6,800d27c <__umoddi3+0x4f0>
 800d050:	01000404 	movi	r4,16
 800d054:	003f6406 	br	800cde8 <__alt_data_end+0xff00cde8>
 800d058:	34c4d83a 	srl	r2,r6,r19
 800d05c:	3d0e983a 	sll	r7,r7,r20
 800d060:	8cf8d83a 	srl	fp,r17,r19
 800d064:	8d10983a 	sll	r8,r17,r20
 800d068:	38aab03a 	or	r21,r7,r2
 800d06c:	a82cd43a 	srli	r22,r21,16
 800d070:	84e2d83a 	srl	r17,r16,r19
 800d074:	e009883a 	mov	r4,fp
 800d078:	b00b883a 	mov	r5,r22
 800d07c:	8a22b03a 	or	r17,r17,r8
 800d080:	3524983a 	sll	r18,r6,r20
 800d084:	800221c0 	call	800221c <__umodsi3>
 800d088:	e009883a 	mov	r4,fp
 800d08c:	b00b883a 	mov	r5,r22
 800d090:	102f883a 	mov	r23,r2
 800d094:	80021b80 	call	80021b8 <__udivsi3>
 800d098:	100d883a 	mov	r6,r2
 800d09c:	b808943a 	slli	r4,r23,16
 800d0a0:	aa3fffcc 	andi	r8,r21,65535
 800d0a4:	8804d43a 	srli	r2,r17,16
 800d0a8:	41af383a 	mul	r23,r8,r6
 800d0ac:	8520983a 	sll	r16,r16,r20
 800d0b0:	1104b03a 	or	r2,r2,r4
 800d0b4:	15c0042e 	bgeu	r2,r23,800d0c8 <__umoddi3+0x33c>
 800d0b8:	1545883a 	add	r2,r2,r21
 800d0bc:	30ffffc4 	addi	r3,r6,-1
 800d0c0:	1540742e 	bgeu	r2,r21,800d294 <__umoddi3+0x508>
 800d0c4:	180d883a 	mov	r6,r3
 800d0c8:	15efc83a 	sub	r23,r2,r23
 800d0cc:	b00b883a 	mov	r5,r22
 800d0d0:	b809883a 	mov	r4,r23
 800d0d4:	d9800115 	stw	r6,4(sp)
 800d0d8:	da000015 	stw	r8,0(sp)
 800d0dc:	800221c0 	call	800221c <__umodsi3>
 800d0e0:	b00b883a 	mov	r5,r22
 800d0e4:	b809883a 	mov	r4,r23
 800d0e8:	1039883a 	mov	fp,r2
 800d0ec:	80021b80 	call	80021b8 <__udivsi3>
 800d0f0:	da000017 	ldw	r8,0(sp)
 800d0f4:	e038943a 	slli	fp,fp,16
 800d0f8:	100b883a 	mov	r5,r2
 800d0fc:	4089383a 	mul	r4,r8,r2
 800d100:	8a3fffcc 	andi	r8,r17,65535
 800d104:	4710b03a 	or	r8,r8,fp
 800d108:	d9800117 	ldw	r6,4(sp)
 800d10c:	4100042e 	bgeu	r8,r4,800d120 <__umoddi3+0x394>
 800d110:	4551883a 	add	r8,r8,r21
 800d114:	10bfffc4 	addi	r2,r2,-1
 800d118:	45405a2e 	bgeu	r8,r21,800d284 <__umoddi3+0x4f8>
 800d11c:	100b883a 	mov	r5,r2
 800d120:	300c943a 	slli	r6,r6,16
 800d124:	91ffffcc 	andi	r7,r18,65535
 800d128:	9004d43a 	srli	r2,r18,16
 800d12c:	314cb03a 	or	r6,r6,r5
 800d130:	317fffcc 	andi	r5,r6,65535
 800d134:	300cd43a 	srli	r6,r6,16
 800d138:	29d3383a 	mul	r9,r5,r7
 800d13c:	288b383a 	mul	r5,r5,r2
 800d140:	31cf383a 	mul	r7,r6,r7
 800d144:	4806d43a 	srli	r3,r9,16
 800d148:	4111c83a 	sub	r8,r8,r4
 800d14c:	29cb883a 	add	r5,r5,r7
 800d150:	194b883a 	add	r5,r3,r5
 800d154:	3085383a 	mul	r2,r6,r2
 800d158:	29c0022e 	bgeu	r5,r7,800d164 <__umoddi3+0x3d8>
 800d15c:	00c00074 	movhi	r3,1
 800d160:	10c5883a 	add	r2,r2,r3
 800d164:	2808d43a 	srli	r4,r5,16
 800d168:	280a943a 	slli	r5,r5,16
 800d16c:	4a7fffcc 	andi	r9,r9,65535
 800d170:	2085883a 	add	r2,r4,r2
 800d174:	2a4b883a 	add	r5,r5,r9
 800d178:	40803636 	bltu	r8,r2,800d254 <__umoddi3+0x4c8>
 800d17c:	40804d26 	beq	r8,r2,800d2b4 <__umoddi3+0x528>
 800d180:	4089c83a 	sub	r4,r8,r2
 800d184:	280f883a 	mov	r7,r5
 800d188:	81cfc83a 	sub	r7,r16,r7
 800d18c:	81c7803a 	cmpltu	r3,r16,r7
 800d190:	20c7c83a 	sub	r3,r4,r3
 800d194:	1cc4983a 	sll	r2,r3,r19
 800d198:	3d0ed83a 	srl	r7,r7,r20
 800d19c:	1d06d83a 	srl	r3,r3,r20
 800d1a0:	11c4b03a 	or	r2,r2,r7
 800d1a4:	003f9306 	br	800cff4 <__alt_data_end+0xff00cff4>
 800d1a8:	9ca6983a 	sll	r19,r19,r18
 800d1ac:	88e8d83a 	srl	r20,r17,r3
 800d1b0:	80c4d83a 	srl	r2,r16,r3
 800d1b4:	982cd43a 	srli	r22,r19,16
 800d1b8:	8ca2983a 	sll	r17,r17,r18
 800d1bc:	a009883a 	mov	r4,r20
 800d1c0:	b00b883a 	mov	r5,r22
 800d1c4:	1478b03a 	or	fp,r2,r17
 800d1c8:	800221c0 	call	800221c <__umodsi3>
 800d1cc:	a009883a 	mov	r4,r20
 800d1d0:	b00b883a 	mov	r5,r22
 800d1d4:	1023883a 	mov	r17,r2
 800d1d8:	80021b80 	call	80021b8 <__udivsi3>
 800d1dc:	9d7fffcc 	andi	r21,r19,65535
 800d1e0:	880a943a 	slli	r5,r17,16
 800d1e4:	e008d43a 	srli	r4,fp,16
 800d1e8:	a885383a 	mul	r2,r21,r2
 800d1ec:	84a8983a 	sll	r20,r16,r18
 800d1f0:	2148b03a 	or	r4,r4,r5
 800d1f4:	2080042e 	bgeu	r4,r2,800d208 <__umoddi3+0x47c>
 800d1f8:	24c9883a 	add	r4,r4,r19
 800d1fc:	24c00236 	bltu	r4,r19,800d208 <__umoddi3+0x47c>
 800d200:	2080012e 	bgeu	r4,r2,800d208 <__umoddi3+0x47c>
 800d204:	24c9883a 	add	r4,r4,r19
 800d208:	20a3c83a 	sub	r17,r4,r2
 800d20c:	b00b883a 	mov	r5,r22
 800d210:	8809883a 	mov	r4,r17
 800d214:	800221c0 	call	800221c <__umodsi3>
 800d218:	102f883a 	mov	r23,r2
 800d21c:	8809883a 	mov	r4,r17
 800d220:	b00b883a 	mov	r5,r22
 800d224:	80021b80 	call	80021b8 <__udivsi3>
 800d228:	b82e943a 	slli	r23,r23,16
 800d22c:	a885383a 	mul	r2,r21,r2
 800d230:	e13fffcc 	andi	r4,fp,65535
 800d234:	25c8b03a 	or	r4,r4,r23
 800d238:	2080042e 	bgeu	r4,r2,800d24c <__umoddi3+0x4c0>
 800d23c:	24c9883a 	add	r4,r4,r19
 800d240:	24c00236 	bltu	r4,r19,800d24c <__umoddi3+0x4c0>
 800d244:	2080012e 	bgeu	r4,r2,800d24c <__umoddi3+0x4c0>
 800d248:	24c9883a 	add	r4,r4,r19
 800d24c:	20a3c83a 	sub	r17,r4,r2
 800d250:	003f4806 	br	800cf74 <__alt_data_end+0xff00cf74>
 800d254:	2c8fc83a 	sub	r7,r5,r18
 800d258:	1545c83a 	sub	r2,r2,r21
 800d25c:	29cb803a 	cmpltu	r5,r5,r7
 800d260:	1145c83a 	sub	r2,r2,r5
 800d264:	4089c83a 	sub	r4,r8,r2
 800d268:	003fc706 	br	800d188 <__alt_data_end+0xff00d188>
 800d26c:	01000604 	movi	r4,24
 800d270:	003f1806 	br	800ced4 <__alt_data_end+0xff00ced4>
 800d274:	00800604 	movi	r2,24
 800d278:	003f3206 	br	800cf44 <__alt_data_end+0xff00cf44>
 800d27c:	01000604 	movi	r4,24
 800d280:	003ed906 	br	800cde8 <__alt_data_end+0xff00cde8>
 800d284:	413fa52e 	bgeu	r8,r4,800d11c <__alt_data_end+0xff00d11c>
 800d288:	297fff84 	addi	r5,r5,-2
 800d28c:	4551883a 	add	r8,r8,r21
 800d290:	003fa306 	br	800d120 <__alt_data_end+0xff00d120>
 800d294:	15ff8b2e 	bgeu	r2,r23,800d0c4 <__alt_data_end+0xff00d0c4>
 800d298:	31bfff84 	addi	r6,r6,-2
 800d29c:	1545883a 	add	r2,r2,r21
 800d2a0:	003f8906 	br	800d0c8 <__alt_data_end+0xff00d0c8>
 800d2a4:	24c9883a 	add	r4,r4,r19
 800d2a8:	003eee06 	br	800ce64 <__alt_data_end+0xff00ce64>
 800d2ac:	8005883a 	mov	r2,r16
 800d2b0:	003f1706 	br	800cf10 <__alt_data_end+0xff00cf10>
 800d2b4:	817fe736 	bltu	r16,r5,800d254 <__alt_data_end+0xff00d254>
 800d2b8:	280f883a 	mov	r7,r5
 800d2bc:	0009883a 	mov	r4,zero
 800d2c0:	003fb106 	br	800d188 <__alt_data_end+0xff00d188>

0800d2c4 <__adddf3>:
 800d2c4:	02c00434 	movhi	r11,16
 800d2c8:	5affffc4 	addi	r11,r11,-1
 800d2cc:	2806d7fa 	srli	r3,r5,31
 800d2d0:	2ad4703a 	and	r10,r5,r11
 800d2d4:	3ad2703a 	and	r9,r7,r11
 800d2d8:	3804d53a 	srli	r2,r7,20
 800d2dc:	3018d77a 	srli	r12,r6,29
 800d2e0:	280ad53a 	srli	r5,r5,20
 800d2e4:	501490fa 	slli	r10,r10,3
 800d2e8:	2010d77a 	srli	r8,r4,29
 800d2ec:	481290fa 	slli	r9,r9,3
 800d2f0:	380ed7fa 	srli	r7,r7,31
 800d2f4:	defffb04 	addi	sp,sp,-20
 800d2f8:	dc800215 	stw	r18,8(sp)
 800d2fc:	dc400115 	stw	r17,4(sp)
 800d300:	dc000015 	stw	r16,0(sp)
 800d304:	dfc00415 	stw	ra,16(sp)
 800d308:	dcc00315 	stw	r19,12(sp)
 800d30c:	1c803fcc 	andi	r18,r3,255
 800d310:	2c01ffcc 	andi	r16,r5,2047
 800d314:	5210b03a 	or	r8,r10,r8
 800d318:	202290fa 	slli	r17,r4,3
 800d31c:	1081ffcc 	andi	r2,r2,2047
 800d320:	4b12b03a 	or	r9,r9,r12
 800d324:	300c90fa 	slli	r6,r6,3
 800d328:	91c07526 	beq	r18,r7,800d500 <__adddf3+0x23c>
 800d32c:	8087c83a 	sub	r3,r16,r2
 800d330:	00c0ab0e 	bge	zero,r3,800d5e0 <__adddf3+0x31c>
 800d334:	10002a1e 	bne	r2,zero,800d3e0 <__adddf3+0x11c>
 800d338:	4984b03a 	or	r2,r9,r6
 800d33c:	1000961e 	bne	r2,zero,800d598 <__adddf3+0x2d4>
 800d340:	888001cc 	andi	r2,r17,7
 800d344:	10000726 	beq	r2,zero,800d364 <__adddf3+0xa0>
 800d348:	888003cc 	andi	r2,r17,15
 800d34c:	00c00104 	movi	r3,4
 800d350:	10c00426 	beq	r2,r3,800d364 <__adddf3+0xa0>
 800d354:	88c7883a 	add	r3,r17,r3
 800d358:	1c63803a 	cmpltu	r17,r3,r17
 800d35c:	4451883a 	add	r8,r8,r17
 800d360:	1823883a 	mov	r17,r3
 800d364:	4080202c 	andhi	r2,r8,128
 800d368:	10005926 	beq	r2,zero,800d4d0 <__adddf3+0x20c>
 800d36c:	84000044 	addi	r16,r16,1
 800d370:	0081ffc4 	movi	r2,2047
 800d374:	8080ba26 	beq	r16,r2,800d660 <__adddf3+0x39c>
 800d378:	00bfe034 	movhi	r2,65408
 800d37c:	10bfffc4 	addi	r2,r2,-1
 800d380:	4090703a 	and	r8,r8,r2
 800d384:	4004977a 	slli	r2,r8,29
 800d388:	4010927a 	slli	r8,r8,9
 800d38c:	8822d0fa 	srli	r17,r17,3
 800d390:	8401ffcc 	andi	r16,r16,2047
 800d394:	4010d33a 	srli	r8,r8,12
 800d398:	9007883a 	mov	r3,r18
 800d39c:	1444b03a 	or	r2,r2,r17
 800d3a0:	8401ffcc 	andi	r16,r16,2047
 800d3a4:	8020953a 	slli	r16,r16,20
 800d3a8:	18c03fcc 	andi	r3,r3,255
 800d3ac:	01000434 	movhi	r4,16
 800d3b0:	213fffc4 	addi	r4,r4,-1
 800d3b4:	180697fa 	slli	r3,r3,31
 800d3b8:	4110703a 	and	r8,r8,r4
 800d3bc:	4410b03a 	or	r8,r8,r16
 800d3c0:	40c6b03a 	or	r3,r8,r3
 800d3c4:	dfc00417 	ldw	ra,16(sp)
 800d3c8:	dcc00317 	ldw	r19,12(sp)
 800d3cc:	dc800217 	ldw	r18,8(sp)
 800d3d0:	dc400117 	ldw	r17,4(sp)
 800d3d4:	dc000017 	ldw	r16,0(sp)
 800d3d8:	dec00504 	addi	sp,sp,20
 800d3dc:	f800283a 	ret
 800d3e0:	0081ffc4 	movi	r2,2047
 800d3e4:	80bfd626 	beq	r16,r2,800d340 <__alt_data_end+0xff00d340>
 800d3e8:	4a402034 	orhi	r9,r9,128
 800d3ec:	00800e04 	movi	r2,56
 800d3f0:	10c09f16 	blt	r2,r3,800d670 <__adddf3+0x3ac>
 800d3f4:	008007c4 	movi	r2,31
 800d3f8:	10c0c216 	blt	r2,r3,800d704 <__adddf3+0x440>
 800d3fc:	00800804 	movi	r2,32
 800d400:	10c5c83a 	sub	r2,r2,r3
 800d404:	488a983a 	sll	r5,r9,r2
 800d408:	30c8d83a 	srl	r4,r6,r3
 800d40c:	3084983a 	sll	r2,r6,r2
 800d410:	48c6d83a 	srl	r3,r9,r3
 800d414:	290cb03a 	or	r6,r5,r4
 800d418:	1004c03a 	cmpne	r2,r2,zero
 800d41c:	308cb03a 	or	r6,r6,r2
 800d420:	898dc83a 	sub	r6,r17,r6
 800d424:	89a3803a 	cmpltu	r17,r17,r6
 800d428:	40d1c83a 	sub	r8,r8,r3
 800d42c:	4451c83a 	sub	r8,r8,r17
 800d430:	3023883a 	mov	r17,r6
 800d434:	4080202c 	andhi	r2,r8,128
 800d438:	10002326 	beq	r2,zero,800d4c8 <__adddf3+0x204>
 800d43c:	04c02034 	movhi	r19,128
 800d440:	9cffffc4 	addi	r19,r19,-1
 800d444:	44e6703a 	and	r19,r8,r19
 800d448:	98007626 	beq	r19,zero,800d624 <__adddf3+0x360>
 800d44c:	9809883a 	mov	r4,r19
 800d450:	80030a80 	call	80030a8 <__clzsi2>
 800d454:	10fffe04 	addi	r3,r2,-8
 800d458:	010007c4 	movi	r4,31
 800d45c:	20c07716 	blt	r4,r3,800d63c <__adddf3+0x378>
 800d460:	00800804 	movi	r2,32
 800d464:	10c5c83a 	sub	r2,r2,r3
 800d468:	8884d83a 	srl	r2,r17,r2
 800d46c:	98d0983a 	sll	r8,r19,r3
 800d470:	88e2983a 	sll	r17,r17,r3
 800d474:	1204b03a 	or	r2,r2,r8
 800d478:	1c007416 	blt	r3,r16,800d64c <__adddf3+0x388>
 800d47c:	1c21c83a 	sub	r16,r3,r16
 800d480:	82000044 	addi	r8,r16,1
 800d484:	00c007c4 	movi	r3,31
 800d488:	1a009116 	blt	r3,r8,800d6d0 <__adddf3+0x40c>
 800d48c:	00c00804 	movi	r3,32
 800d490:	1a07c83a 	sub	r3,r3,r8
 800d494:	8a08d83a 	srl	r4,r17,r8
 800d498:	88e2983a 	sll	r17,r17,r3
 800d49c:	10c6983a 	sll	r3,r2,r3
 800d4a0:	1210d83a 	srl	r8,r2,r8
 800d4a4:	8804c03a 	cmpne	r2,r17,zero
 800d4a8:	1906b03a 	or	r3,r3,r4
 800d4ac:	18a2b03a 	or	r17,r3,r2
 800d4b0:	0021883a 	mov	r16,zero
 800d4b4:	003fa206 	br	800d340 <__alt_data_end+0xff00d340>
 800d4b8:	1890b03a 	or	r8,r3,r2
 800d4bc:	40017d26 	beq	r8,zero,800dab4 <__adddf3+0x7f0>
 800d4c0:	1011883a 	mov	r8,r2
 800d4c4:	1823883a 	mov	r17,r3
 800d4c8:	888001cc 	andi	r2,r17,7
 800d4cc:	103f9e1e 	bne	r2,zero,800d348 <__alt_data_end+0xff00d348>
 800d4d0:	4004977a 	slli	r2,r8,29
 800d4d4:	8822d0fa 	srli	r17,r17,3
 800d4d8:	4010d0fa 	srli	r8,r8,3
 800d4dc:	9007883a 	mov	r3,r18
 800d4e0:	1444b03a 	or	r2,r2,r17
 800d4e4:	0101ffc4 	movi	r4,2047
 800d4e8:	81002426 	beq	r16,r4,800d57c <__adddf3+0x2b8>
 800d4ec:	8120703a 	and	r16,r16,r4
 800d4f0:	01000434 	movhi	r4,16
 800d4f4:	213fffc4 	addi	r4,r4,-1
 800d4f8:	4110703a 	and	r8,r8,r4
 800d4fc:	003fa806 	br	800d3a0 <__alt_data_end+0xff00d3a0>
 800d500:	8089c83a 	sub	r4,r16,r2
 800d504:	01005e0e 	bge	zero,r4,800d680 <__adddf3+0x3bc>
 800d508:	10002b26 	beq	r2,zero,800d5b8 <__adddf3+0x2f4>
 800d50c:	0081ffc4 	movi	r2,2047
 800d510:	80bf8b26 	beq	r16,r2,800d340 <__alt_data_end+0xff00d340>
 800d514:	4a402034 	orhi	r9,r9,128
 800d518:	00800e04 	movi	r2,56
 800d51c:	1100a40e 	bge	r2,r4,800d7b0 <__adddf3+0x4ec>
 800d520:	498cb03a 	or	r6,r9,r6
 800d524:	300ac03a 	cmpne	r5,r6,zero
 800d528:	0013883a 	mov	r9,zero
 800d52c:	2c4b883a 	add	r5,r5,r17
 800d530:	2c63803a 	cmpltu	r17,r5,r17
 800d534:	4a11883a 	add	r8,r9,r8
 800d538:	8a11883a 	add	r8,r17,r8
 800d53c:	2823883a 	mov	r17,r5
 800d540:	4080202c 	andhi	r2,r8,128
 800d544:	103fe026 	beq	r2,zero,800d4c8 <__alt_data_end+0xff00d4c8>
 800d548:	84000044 	addi	r16,r16,1
 800d54c:	0081ffc4 	movi	r2,2047
 800d550:	8080d226 	beq	r16,r2,800d89c <__adddf3+0x5d8>
 800d554:	00bfe034 	movhi	r2,65408
 800d558:	10bfffc4 	addi	r2,r2,-1
 800d55c:	4090703a 	and	r8,r8,r2
 800d560:	880ad07a 	srli	r5,r17,1
 800d564:	400897fa 	slli	r4,r8,31
 800d568:	88c0004c 	andi	r3,r17,1
 800d56c:	28e2b03a 	or	r17,r5,r3
 800d570:	4010d07a 	srli	r8,r8,1
 800d574:	2462b03a 	or	r17,r4,r17
 800d578:	003f7106 	br	800d340 <__alt_data_end+0xff00d340>
 800d57c:	4088b03a 	or	r4,r8,r2
 800d580:	20014526 	beq	r4,zero,800da98 <__adddf3+0x7d4>
 800d584:	01000434 	movhi	r4,16
 800d588:	42000234 	orhi	r8,r8,8
 800d58c:	213fffc4 	addi	r4,r4,-1
 800d590:	4110703a 	and	r8,r8,r4
 800d594:	003f8206 	br	800d3a0 <__alt_data_end+0xff00d3a0>
 800d598:	18ffffc4 	addi	r3,r3,-1
 800d59c:	1800491e 	bne	r3,zero,800d6c4 <__adddf3+0x400>
 800d5a0:	898bc83a 	sub	r5,r17,r6
 800d5a4:	8963803a 	cmpltu	r17,r17,r5
 800d5a8:	4251c83a 	sub	r8,r8,r9
 800d5ac:	4451c83a 	sub	r8,r8,r17
 800d5b0:	2823883a 	mov	r17,r5
 800d5b4:	003f9f06 	br	800d434 <__alt_data_end+0xff00d434>
 800d5b8:	4984b03a 	or	r2,r9,r6
 800d5bc:	103f6026 	beq	r2,zero,800d340 <__alt_data_end+0xff00d340>
 800d5c0:	213fffc4 	addi	r4,r4,-1
 800d5c4:	2000931e 	bne	r4,zero,800d814 <__adddf3+0x550>
 800d5c8:	898d883a 	add	r6,r17,r6
 800d5cc:	3463803a 	cmpltu	r17,r6,r17
 800d5d0:	4251883a 	add	r8,r8,r9
 800d5d4:	8a11883a 	add	r8,r17,r8
 800d5d8:	3023883a 	mov	r17,r6
 800d5dc:	003fd806 	br	800d540 <__alt_data_end+0xff00d540>
 800d5e0:	1800541e 	bne	r3,zero,800d734 <__adddf3+0x470>
 800d5e4:	80800044 	addi	r2,r16,1
 800d5e8:	1081ffcc 	andi	r2,r2,2047
 800d5ec:	00c00044 	movi	r3,1
 800d5f0:	1880a00e 	bge	r3,r2,800d874 <__adddf3+0x5b0>
 800d5f4:	8989c83a 	sub	r4,r17,r6
 800d5f8:	8905803a 	cmpltu	r2,r17,r4
 800d5fc:	4267c83a 	sub	r19,r8,r9
 800d600:	98a7c83a 	sub	r19,r19,r2
 800d604:	9880202c 	andhi	r2,r19,128
 800d608:	10006326 	beq	r2,zero,800d798 <__adddf3+0x4d4>
 800d60c:	3463c83a 	sub	r17,r6,r17
 800d610:	4a07c83a 	sub	r3,r9,r8
 800d614:	344d803a 	cmpltu	r6,r6,r17
 800d618:	19a7c83a 	sub	r19,r3,r6
 800d61c:	3825883a 	mov	r18,r7
 800d620:	983f8a1e 	bne	r19,zero,800d44c <__alt_data_end+0xff00d44c>
 800d624:	8809883a 	mov	r4,r17
 800d628:	80030a80 	call	80030a8 <__clzsi2>
 800d62c:	10800804 	addi	r2,r2,32
 800d630:	10fffe04 	addi	r3,r2,-8
 800d634:	010007c4 	movi	r4,31
 800d638:	20ff890e 	bge	r4,r3,800d460 <__alt_data_end+0xff00d460>
 800d63c:	10bff604 	addi	r2,r2,-40
 800d640:	8884983a 	sll	r2,r17,r2
 800d644:	0023883a 	mov	r17,zero
 800d648:	1c3f8c0e 	bge	r3,r16,800d47c <__alt_data_end+0xff00d47c>
 800d64c:	023fe034 	movhi	r8,65408
 800d650:	423fffc4 	addi	r8,r8,-1
 800d654:	80e1c83a 	sub	r16,r16,r3
 800d658:	1210703a 	and	r8,r2,r8
 800d65c:	003f3806 	br	800d340 <__alt_data_end+0xff00d340>
 800d660:	9007883a 	mov	r3,r18
 800d664:	0011883a 	mov	r8,zero
 800d668:	0005883a 	mov	r2,zero
 800d66c:	003f4c06 	br	800d3a0 <__alt_data_end+0xff00d3a0>
 800d670:	498cb03a 	or	r6,r9,r6
 800d674:	300cc03a 	cmpne	r6,r6,zero
 800d678:	0007883a 	mov	r3,zero
 800d67c:	003f6806 	br	800d420 <__alt_data_end+0xff00d420>
 800d680:	20009c1e 	bne	r4,zero,800d8f4 <__adddf3+0x630>
 800d684:	80800044 	addi	r2,r16,1
 800d688:	1141ffcc 	andi	r5,r2,2047
 800d68c:	01000044 	movi	r4,1
 800d690:	2140670e 	bge	r4,r5,800d830 <__adddf3+0x56c>
 800d694:	0101ffc4 	movi	r4,2047
 800d698:	11007f26 	beq	r2,r4,800d898 <__adddf3+0x5d4>
 800d69c:	898d883a 	add	r6,r17,r6
 800d6a0:	4247883a 	add	r3,r8,r9
 800d6a4:	3451803a 	cmpltu	r8,r6,r17
 800d6a8:	40d1883a 	add	r8,r8,r3
 800d6ac:	402297fa 	slli	r17,r8,31
 800d6b0:	300cd07a 	srli	r6,r6,1
 800d6b4:	4010d07a 	srli	r8,r8,1
 800d6b8:	1021883a 	mov	r16,r2
 800d6bc:	89a2b03a 	or	r17,r17,r6
 800d6c0:	003f1f06 	br	800d340 <__alt_data_end+0xff00d340>
 800d6c4:	0081ffc4 	movi	r2,2047
 800d6c8:	80bf481e 	bne	r16,r2,800d3ec <__alt_data_end+0xff00d3ec>
 800d6cc:	003f1c06 	br	800d340 <__alt_data_end+0xff00d340>
 800d6d0:	843ff844 	addi	r16,r16,-31
 800d6d4:	01000804 	movi	r4,32
 800d6d8:	1406d83a 	srl	r3,r2,r16
 800d6dc:	41005026 	beq	r8,r4,800d820 <__adddf3+0x55c>
 800d6e0:	01001004 	movi	r4,64
 800d6e4:	2211c83a 	sub	r8,r4,r8
 800d6e8:	1204983a 	sll	r2,r2,r8
 800d6ec:	88a2b03a 	or	r17,r17,r2
 800d6f0:	8822c03a 	cmpne	r17,r17,zero
 800d6f4:	1c62b03a 	or	r17,r3,r17
 800d6f8:	0011883a 	mov	r8,zero
 800d6fc:	0021883a 	mov	r16,zero
 800d700:	003f7106 	br	800d4c8 <__alt_data_end+0xff00d4c8>
 800d704:	193ff804 	addi	r4,r3,-32
 800d708:	00800804 	movi	r2,32
 800d70c:	4908d83a 	srl	r4,r9,r4
 800d710:	18804526 	beq	r3,r2,800d828 <__adddf3+0x564>
 800d714:	00801004 	movi	r2,64
 800d718:	10c5c83a 	sub	r2,r2,r3
 800d71c:	4886983a 	sll	r3,r9,r2
 800d720:	198cb03a 	or	r6,r3,r6
 800d724:	300cc03a 	cmpne	r6,r6,zero
 800d728:	218cb03a 	or	r6,r4,r6
 800d72c:	0007883a 	mov	r3,zero
 800d730:	003f3b06 	br	800d420 <__alt_data_end+0xff00d420>
 800d734:	80002a26 	beq	r16,zero,800d7e0 <__adddf3+0x51c>
 800d738:	0101ffc4 	movi	r4,2047
 800d73c:	11006826 	beq	r2,r4,800d8e0 <__adddf3+0x61c>
 800d740:	00c7c83a 	sub	r3,zero,r3
 800d744:	42002034 	orhi	r8,r8,128
 800d748:	01000e04 	movi	r4,56
 800d74c:	20c07c16 	blt	r4,r3,800d940 <__adddf3+0x67c>
 800d750:	010007c4 	movi	r4,31
 800d754:	20c0da16 	blt	r4,r3,800dac0 <__adddf3+0x7fc>
 800d758:	01000804 	movi	r4,32
 800d75c:	20c9c83a 	sub	r4,r4,r3
 800d760:	4114983a 	sll	r10,r8,r4
 800d764:	88cad83a 	srl	r5,r17,r3
 800d768:	8908983a 	sll	r4,r17,r4
 800d76c:	40c6d83a 	srl	r3,r8,r3
 800d770:	5162b03a 	or	r17,r10,r5
 800d774:	2008c03a 	cmpne	r4,r4,zero
 800d778:	8922b03a 	or	r17,r17,r4
 800d77c:	3463c83a 	sub	r17,r6,r17
 800d780:	48c7c83a 	sub	r3,r9,r3
 800d784:	344d803a 	cmpltu	r6,r6,r17
 800d788:	1991c83a 	sub	r8,r3,r6
 800d78c:	1021883a 	mov	r16,r2
 800d790:	3825883a 	mov	r18,r7
 800d794:	003f2706 	br	800d434 <__alt_data_end+0xff00d434>
 800d798:	24d0b03a 	or	r8,r4,r19
 800d79c:	40001b1e 	bne	r8,zero,800d80c <__adddf3+0x548>
 800d7a0:	0005883a 	mov	r2,zero
 800d7a4:	0007883a 	mov	r3,zero
 800d7a8:	0021883a 	mov	r16,zero
 800d7ac:	003f4d06 	br	800d4e4 <__alt_data_end+0xff00d4e4>
 800d7b0:	008007c4 	movi	r2,31
 800d7b4:	11003c16 	blt	r2,r4,800d8a8 <__adddf3+0x5e4>
 800d7b8:	00800804 	movi	r2,32
 800d7bc:	1105c83a 	sub	r2,r2,r4
 800d7c0:	488e983a 	sll	r7,r9,r2
 800d7c4:	310ad83a 	srl	r5,r6,r4
 800d7c8:	3084983a 	sll	r2,r6,r2
 800d7cc:	4912d83a 	srl	r9,r9,r4
 800d7d0:	394ab03a 	or	r5,r7,r5
 800d7d4:	1004c03a 	cmpne	r2,r2,zero
 800d7d8:	288ab03a 	or	r5,r5,r2
 800d7dc:	003f5306 	br	800d52c <__alt_data_end+0xff00d52c>
 800d7e0:	4448b03a 	or	r4,r8,r17
 800d7e4:	20003e26 	beq	r4,zero,800d8e0 <__adddf3+0x61c>
 800d7e8:	00c6303a 	nor	r3,zero,r3
 800d7ec:	18003a1e 	bne	r3,zero,800d8d8 <__adddf3+0x614>
 800d7f0:	3463c83a 	sub	r17,r6,r17
 800d7f4:	4a07c83a 	sub	r3,r9,r8
 800d7f8:	344d803a 	cmpltu	r6,r6,r17
 800d7fc:	1991c83a 	sub	r8,r3,r6
 800d800:	1021883a 	mov	r16,r2
 800d804:	3825883a 	mov	r18,r7
 800d808:	003f0a06 	br	800d434 <__alt_data_end+0xff00d434>
 800d80c:	2023883a 	mov	r17,r4
 800d810:	003f0d06 	br	800d448 <__alt_data_end+0xff00d448>
 800d814:	0081ffc4 	movi	r2,2047
 800d818:	80bf3f1e 	bne	r16,r2,800d518 <__alt_data_end+0xff00d518>
 800d81c:	003ec806 	br	800d340 <__alt_data_end+0xff00d340>
 800d820:	0005883a 	mov	r2,zero
 800d824:	003fb106 	br	800d6ec <__alt_data_end+0xff00d6ec>
 800d828:	0007883a 	mov	r3,zero
 800d82c:	003fbc06 	br	800d720 <__alt_data_end+0xff00d720>
 800d830:	4444b03a 	or	r2,r8,r17
 800d834:	8000871e 	bne	r16,zero,800da54 <__adddf3+0x790>
 800d838:	1000ba26 	beq	r2,zero,800db24 <__adddf3+0x860>
 800d83c:	4984b03a 	or	r2,r9,r6
 800d840:	103ebf26 	beq	r2,zero,800d340 <__alt_data_end+0xff00d340>
 800d844:	8985883a 	add	r2,r17,r6
 800d848:	4247883a 	add	r3,r8,r9
 800d84c:	1451803a 	cmpltu	r8,r2,r17
 800d850:	40d1883a 	add	r8,r8,r3
 800d854:	40c0202c 	andhi	r3,r8,128
 800d858:	1023883a 	mov	r17,r2
 800d85c:	183f1a26 	beq	r3,zero,800d4c8 <__alt_data_end+0xff00d4c8>
 800d860:	00bfe034 	movhi	r2,65408
 800d864:	10bfffc4 	addi	r2,r2,-1
 800d868:	2021883a 	mov	r16,r4
 800d86c:	4090703a 	and	r8,r8,r2
 800d870:	003eb306 	br	800d340 <__alt_data_end+0xff00d340>
 800d874:	4444b03a 	or	r2,r8,r17
 800d878:	8000291e 	bne	r16,zero,800d920 <__adddf3+0x65c>
 800d87c:	10004b1e 	bne	r2,zero,800d9ac <__adddf3+0x6e8>
 800d880:	4990b03a 	or	r8,r9,r6
 800d884:	40008b26 	beq	r8,zero,800dab4 <__adddf3+0x7f0>
 800d888:	4811883a 	mov	r8,r9
 800d88c:	3023883a 	mov	r17,r6
 800d890:	3825883a 	mov	r18,r7
 800d894:	003eaa06 	br	800d340 <__alt_data_end+0xff00d340>
 800d898:	1021883a 	mov	r16,r2
 800d89c:	0011883a 	mov	r8,zero
 800d8a0:	0005883a 	mov	r2,zero
 800d8a4:	003f0f06 	br	800d4e4 <__alt_data_end+0xff00d4e4>
 800d8a8:	217ff804 	addi	r5,r4,-32
 800d8ac:	00800804 	movi	r2,32
 800d8b0:	494ad83a 	srl	r5,r9,r5
 800d8b4:	20807d26 	beq	r4,r2,800daac <__adddf3+0x7e8>
 800d8b8:	00801004 	movi	r2,64
 800d8bc:	1109c83a 	sub	r4,r2,r4
 800d8c0:	4912983a 	sll	r9,r9,r4
 800d8c4:	498cb03a 	or	r6,r9,r6
 800d8c8:	300cc03a 	cmpne	r6,r6,zero
 800d8cc:	298ab03a 	or	r5,r5,r6
 800d8d0:	0013883a 	mov	r9,zero
 800d8d4:	003f1506 	br	800d52c <__alt_data_end+0xff00d52c>
 800d8d8:	0101ffc4 	movi	r4,2047
 800d8dc:	113f9a1e 	bne	r2,r4,800d748 <__alt_data_end+0xff00d748>
 800d8e0:	4811883a 	mov	r8,r9
 800d8e4:	3023883a 	mov	r17,r6
 800d8e8:	1021883a 	mov	r16,r2
 800d8ec:	3825883a 	mov	r18,r7
 800d8f0:	003e9306 	br	800d340 <__alt_data_end+0xff00d340>
 800d8f4:	8000161e 	bne	r16,zero,800d950 <__adddf3+0x68c>
 800d8f8:	444ab03a 	or	r5,r8,r17
 800d8fc:	28005126 	beq	r5,zero,800da44 <__adddf3+0x780>
 800d900:	0108303a 	nor	r4,zero,r4
 800d904:	20004d1e 	bne	r4,zero,800da3c <__adddf3+0x778>
 800d908:	89a3883a 	add	r17,r17,r6
 800d90c:	4253883a 	add	r9,r8,r9
 800d910:	898d803a 	cmpltu	r6,r17,r6
 800d914:	3251883a 	add	r8,r6,r9
 800d918:	1021883a 	mov	r16,r2
 800d91c:	003f0806 	br	800d540 <__alt_data_end+0xff00d540>
 800d920:	1000301e 	bne	r2,zero,800d9e4 <__adddf3+0x720>
 800d924:	4984b03a 	or	r2,r9,r6
 800d928:	10007126 	beq	r2,zero,800daf0 <__adddf3+0x82c>
 800d92c:	4811883a 	mov	r8,r9
 800d930:	3023883a 	mov	r17,r6
 800d934:	3825883a 	mov	r18,r7
 800d938:	0401ffc4 	movi	r16,2047
 800d93c:	003e8006 	br	800d340 <__alt_data_end+0xff00d340>
 800d940:	4462b03a 	or	r17,r8,r17
 800d944:	8822c03a 	cmpne	r17,r17,zero
 800d948:	0007883a 	mov	r3,zero
 800d94c:	003f8b06 	br	800d77c <__alt_data_end+0xff00d77c>
 800d950:	0141ffc4 	movi	r5,2047
 800d954:	11403b26 	beq	r2,r5,800da44 <__adddf3+0x780>
 800d958:	0109c83a 	sub	r4,zero,r4
 800d95c:	42002034 	orhi	r8,r8,128
 800d960:	01400e04 	movi	r5,56
 800d964:	29006716 	blt	r5,r4,800db04 <__adddf3+0x840>
 800d968:	014007c4 	movi	r5,31
 800d96c:	29007016 	blt	r5,r4,800db30 <__adddf3+0x86c>
 800d970:	01400804 	movi	r5,32
 800d974:	290bc83a 	sub	r5,r5,r4
 800d978:	4154983a 	sll	r10,r8,r5
 800d97c:	890ed83a 	srl	r7,r17,r4
 800d980:	894a983a 	sll	r5,r17,r5
 800d984:	4108d83a 	srl	r4,r8,r4
 800d988:	51e2b03a 	or	r17,r10,r7
 800d98c:	280ac03a 	cmpne	r5,r5,zero
 800d990:	8962b03a 	or	r17,r17,r5
 800d994:	89a3883a 	add	r17,r17,r6
 800d998:	2253883a 	add	r9,r4,r9
 800d99c:	898d803a 	cmpltu	r6,r17,r6
 800d9a0:	3251883a 	add	r8,r6,r9
 800d9a4:	1021883a 	mov	r16,r2
 800d9a8:	003ee506 	br	800d540 <__alt_data_end+0xff00d540>
 800d9ac:	4984b03a 	or	r2,r9,r6
 800d9b0:	103e6326 	beq	r2,zero,800d340 <__alt_data_end+0xff00d340>
 800d9b4:	8987c83a 	sub	r3,r17,r6
 800d9b8:	88c9803a 	cmpltu	r4,r17,r3
 800d9bc:	4245c83a 	sub	r2,r8,r9
 800d9c0:	1105c83a 	sub	r2,r2,r4
 800d9c4:	1100202c 	andhi	r4,r2,128
 800d9c8:	203ebb26 	beq	r4,zero,800d4b8 <__alt_data_end+0xff00d4b8>
 800d9cc:	3463c83a 	sub	r17,r6,r17
 800d9d0:	4a07c83a 	sub	r3,r9,r8
 800d9d4:	344d803a 	cmpltu	r6,r6,r17
 800d9d8:	1991c83a 	sub	r8,r3,r6
 800d9dc:	3825883a 	mov	r18,r7
 800d9e0:	003e5706 	br	800d340 <__alt_data_end+0xff00d340>
 800d9e4:	4984b03a 	or	r2,r9,r6
 800d9e8:	10002e26 	beq	r2,zero,800daa4 <__adddf3+0x7e0>
 800d9ec:	4004d0fa 	srli	r2,r8,3
 800d9f0:	8822d0fa 	srli	r17,r17,3
 800d9f4:	4010977a 	slli	r8,r8,29
 800d9f8:	10c0022c 	andhi	r3,r2,8
 800d9fc:	4462b03a 	or	r17,r8,r17
 800da00:	18000826 	beq	r3,zero,800da24 <__adddf3+0x760>
 800da04:	4808d0fa 	srli	r4,r9,3
 800da08:	20c0022c 	andhi	r3,r4,8
 800da0c:	1800051e 	bne	r3,zero,800da24 <__adddf3+0x760>
 800da10:	300cd0fa 	srli	r6,r6,3
 800da14:	4806977a 	slli	r3,r9,29
 800da18:	2005883a 	mov	r2,r4
 800da1c:	3825883a 	mov	r18,r7
 800da20:	19a2b03a 	or	r17,r3,r6
 800da24:	8810d77a 	srli	r8,r17,29
 800da28:	100490fa 	slli	r2,r2,3
 800da2c:	882290fa 	slli	r17,r17,3
 800da30:	0401ffc4 	movi	r16,2047
 800da34:	4090b03a 	or	r8,r8,r2
 800da38:	003e4106 	br	800d340 <__alt_data_end+0xff00d340>
 800da3c:	0141ffc4 	movi	r5,2047
 800da40:	117fc71e 	bne	r2,r5,800d960 <__alt_data_end+0xff00d960>
 800da44:	4811883a 	mov	r8,r9
 800da48:	3023883a 	mov	r17,r6
 800da4c:	1021883a 	mov	r16,r2
 800da50:	003e3b06 	br	800d340 <__alt_data_end+0xff00d340>
 800da54:	10002f26 	beq	r2,zero,800db14 <__adddf3+0x850>
 800da58:	4984b03a 	or	r2,r9,r6
 800da5c:	10001126 	beq	r2,zero,800daa4 <__adddf3+0x7e0>
 800da60:	4004d0fa 	srli	r2,r8,3
 800da64:	8822d0fa 	srli	r17,r17,3
 800da68:	4010977a 	slli	r8,r8,29
 800da6c:	10c0022c 	andhi	r3,r2,8
 800da70:	4462b03a 	or	r17,r8,r17
 800da74:	183feb26 	beq	r3,zero,800da24 <__alt_data_end+0xff00da24>
 800da78:	4808d0fa 	srli	r4,r9,3
 800da7c:	20c0022c 	andhi	r3,r4,8
 800da80:	183fe81e 	bne	r3,zero,800da24 <__alt_data_end+0xff00da24>
 800da84:	300cd0fa 	srli	r6,r6,3
 800da88:	4806977a 	slli	r3,r9,29
 800da8c:	2005883a 	mov	r2,r4
 800da90:	19a2b03a 	or	r17,r3,r6
 800da94:	003fe306 	br	800da24 <__alt_data_end+0xff00da24>
 800da98:	0011883a 	mov	r8,zero
 800da9c:	0005883a 	mov	r2,zero
 800daa0:	003e3f06 	br	800d3a0 <__alt_data_end+0xff00d3a0>
 800daa4:	0401ffc4 	movi	r16,2047
 800daa8:	003e2506 	br	800d340 <__alt_data_end+0xff00d340>
 800daac:	0013883a 	mov	r9,zero
 800dab0:	003f8406 	br	800d8c4 <__alt_data_end+0xff00d8c4>
 800dab4:	0005883a 	mov	r2,zero
 800dab8:	0007883a 	mov	r3,zero
 800dabc:	003e8906 	br	800d4e4 <__alt_data_end+0xff00d4e4>
 800dac0:	197ff804 	addi	r5,r3,-32
 800dac4:	01000804 	movi	r4,32
 800dac8:	414ad83a 	srl	r5,r8,r5
 800dacc:	19002426 	beq	r3,r4,800db60 <__adddf3+0x89c>
 800dad0:	01001004 	movi	r4,64
 800dad4:	20c7c83a 	sub	r3,r4,r3
 800dad8:	40c6983a 	sll	r3,r8,r3
 800dadc:	1c46b03a 	or	r3,r3,r17
 800dae0:	1806c03a 	cmpne	r3,r3,zero
 800dae4:	28e2b03a 	or	r17,r5,r3
 800dae8:	0007883a 	mov	r3,zero
 800daec:	003f2306 	br	800d77c <__alt_data_end+0xff00d77c>
 800daf0:	0007883a 	mov	r3,zero
 800daf4:	5811883a 	mov	r8,r11
 800daf8:	00bfffc4 	movi	r2,-1
 800dafc:	0401ffc4 	movi	r16,2047
 800db00:	003e7806 	br	800d4e4 <__alt_data_end+0xff00d4e4>
 800db04:	4462b03a 	or	r17,r8,r17
 800db08:	8822c03a 	cmpne	r17,r17,zero
 800db0c:	0009883a 	mov	r4,zero
 800db10:	003fa006 	br	800d994 <__alt_data_end+0xff00d994>
 800db14:	4811883a 	mov	r8,r9
 800db18:	3023883a 	mov	r17,r6
 800db1c:	0401ffc4 	movi	r16,2047
 800db20:	003e0706 	br	800d340 <__alt_data_end+0xff00d340>
 800db24:	4811883a 	mov	r8,r9
 800db28:	3023883a 	mov	r17,r6
 800db2c:	003e0406 	br	800d340 <__alt_data_end+0xff00d340>
 800db30:	21fff804 	addi	r7,r4,-32
 800db34:	01400804 	movi	r5,32
 800db38:	41ced83a 	srl	r7,r8,r7
 800db3c:	21400a26 	beq	r4,r5,800db68 <__adddf3+0x8a4>
 800db40:	01401004 	movi	r5,64
 800db44:	2909c83a 	sub	r4,r5,r4
 800db48:	4108983a 	sll	r4,r8,r4
 800db4c:	2448b03a 	or	r4,r4,r17
 800db50:	2008c03a 	cmpne	r4,r4,zero
 800db54:	3922b03a 	or	r17,r7,r4
 800db58:	0009883a 	mov	r4,zero
 800db5c:	003f8d06 	br	800d994 <__alt_data_end+0xff00d994>
 800db60:	0007883a 	mov	r3,zero
 800db64:	003fdd06 	br	800dadc <__alt_data_end+0xff00dadc>
 800db68:	0009883a 	mov	r4,zero
 800db6c:	003ff706 	br	800db4c <__alt_data_end+0xff00db4c>

0800db70 <__divdf3>:
 800db70:	defff204 	addi	sp,sp,-56
 800db74:	dd400915 	stw	r21,36(sp)
 800db78:	282ad53a 	srli	r21,r5,20
 800db7c:	dd000815 	stw	r20,32(sp)
 800db80:	2828d7fa 	srli	r20,r5,31
 800db84:	dc000415 	stw	r16,16(sp)
 800db88:	04000434 	movhi	r16,16
 800db8c:	df000c15 	stw	fp,48(sp)
 800db90:	843fffc4 	addi	r16,r16,-1
 800db94:	dfc00d15 	stw	ra,52(sp)
 800db98:	ddc00b15 	stw	r23,44(sp)
 800db9c:	dd800a15 	stw	r22,40(sp)
 800dba0:	dcc00715 	stw	r19,28(sp)
 800dba4:	dc800615 	stw	r18,24(sp)
 800dba8:	dc400515 	stw	r17,20(sp)
 800dbac:	ad41ffcc 	andi	r21,r21,2047
 800dbb0:	2c20703a 	and	r16,r5,r16
 800dbb4:	a7003fcc 	andi	fp,r20,255
 800dbb8:	a8006126 	beq	r21,zero,800dd40 <__divdf3+0x1d0>
 800dbbc:	0081ffc4 	movi	r2,2047
 800dbc0:	2025883a 	mov	r18,r4
 800dbc4:	a8803726 	beq	r21,r2,800dca4 <__divdf3+0x134>
 800dbc8:	80800434 	orhi	r2,r16,16
 800dbcc:	100490fa 	slli	r2,r2,3
 800dbd0:	2020d77a 	srli	r16,r4,29
 800dbd4:	202490fa 	slli	r18,r4,3
 800dbd8:	ad7f0044 	addi	r21,r21,-1023
 800dbdc:	80a0b03a 	or	r16,r16,r2
 800dbe0:	0027883a 	mov	r19,zero
 800dbe4:	0013883a 	mov	r9,zero
 800dbe8:	3804d53a 	srli	r2,r7,20
 800dbec:	382cd7fa 	srli	r22,r7,31
 800dbf0:	04400434 	movhi	r17,16
 800dbf4:	8c7fffc4 	addi	r17,r17,-1
 800dbf8:	1081ffcc 	andi	r2,r2,2047
 800dbfc:	3011883a 	mov	r8,r6
 800dc00:	3c62703a 	and	r17,r7,r17
 800dc04:	b5c03fcc 	andi	r23,r22,255
 800dc08:	10006c26 	beq	r2,zero,800ddbc <__divdf3+0x24c>
 800dc0c:	00c1ffc4 	movi	r3,2047
 800dc10:	10c06426 	beq	r2,r3,800dda4 <__divdf3+0x234>
 800dc14:	88c00434 	orhi	r3,r17,16
 800dc18:	180690fa 	slli	r3,r3,3
 800dc1c:	3022d77a 	srli	r17,r6,29
 800dc20:	301090fa 	slli	r8,r6,3
 800dc24:	10bf0044 	addi	r2,r2,-1023
 800dc28:	88e2b03a 	or	r17,r17,r3
 800dc2c:	000f883a 	mov	r7,zero
 800dc30:	a58cf03a 	xor	r6,r20,r22
 800dc34:	3cc8b03a 	or	r4,r7,r19
 800dc38:	a8abc83a 	sub	r21,r21,r2
 800dc3c:	008003c4 	movi	r2,15
 800dc40:	3007883a 	mov	r3,r6
 800dc44:	34c03fcc 	andi	r19,r6,255
 800dc48:	11009036 	bltu	r2,r4,800de8c <__divdf3+0x31c>
 800dc4c:	200890ba 	slli	r4,r4,2
 800dc50:	00820074 	movhi	r2,2049
 800dc54:	10b71904 	addi	r2,r2,-9116
 800dc58:	2089883a 	add	r4,r4,r2
 800dc5c:	20800017 	ldw	r2,0(r4)
 800dc60:	1000683a 	jmp	r2
 800dc64:	0800de8c 	andi	zero,at,890
 800dc68:	0800dcdc 	xori	zero,at,883
 800dc6c:	0800de7c 	xorhi	zero,at,889
 800dc70:	0800dcd0 	cmplti	zero,at,883
 800dc74:	0800de7c 	xorhi	zero,at,889
 800dc78:	0800de50 	cmplti	zero,at,889
 800dc7c:	0800de7c 	xorhi	zero,at,889
 800dc80:	0800dcd0 	cmplti	zero,at,883
 800dc84:	0800dcdc 	xori	zero,at,883
 800dc88:	0800dcdc 	xori	zero,at,883
 800dc8c:	0800de50 	cmplti	zero,at,889
 800dc90:	0800dcd0 	cmplti	zero,at,883
 800dc94:	0800dcc0 	call	800dcc <__alt_mem_onchip_memory2_0+0x800dcc>
 800dc98:	0800dcc0 	call	800dcc <__alt_mem_onchip_memory2_0+0x800dcc>
 800dc9c:	0800dcc0 	call	800dcc <__alt_mem_onchip_memory2_0+0x800dcc>
 800dca0:	0800e170 	cmpltui	zero,at,901
 800dca4:	2404b03a 	or	r2,r4,r16
 800dca8:	1000661e 	bne	r2,zero,800de44 <__divdf3+0x2d4>
 800dcac:	04c00204 	movi	r19,8
 800dcb0:	0021883a 	mov	r16,zero
 800dcb4:	0025883a 	mov	r18,zero
 800dcb8:	02400084 	movi	r9,2
 800dcbc:	003fca06 	br	800dbe8 <__alt_data_end+0xff00dbe8>
 800dcc0:	8023883a 	mov	r17,r16
 800dcc4:	9011883a 	mov	r8,r18
 800dcc8:	e02f883a 	mov	r23,fp
 800dccc:	480f883a 	mov	r7,r9
 800dcd0:	00800084 	movi	r2,2
 800dcd4:	3881311e 	bne	r7,r2,800e19c <__divdf3+0x62c>
 800dcd8:	b827883a 	mov	r19,r23
 800dcdc:	98c0004c 	andi	r3,r19,1
 800dce0:	0081ffc4 	movi	r2,2047
 800dce4:	000b883a 	mov	r5,zero
 800dce8:	0025883a 	mov	r18,zero
 800dcec:	1004953a 	slli	r2,r2,20
 800dcf0:	18c03fcc 	andi	r3,r3,255
 800dcf4:	04400434 	movhi	r17,16
 800dcf8:	8c7fffc4 	addi	r17,r17,-1
 800dcfc:	180697fa 	slli	r3,r3,31
 800dd00:	2c4a703a 	and	r5,r5,r17
 800dd04:	288ab03a 	or	r5,r5,r2
 800dd08:	28c6b03a 	or	r3,r5,r3
 800dd0c:	9005883a 	mov	r2,r18
 800dd10:	dfc00d17 	ldw	ra,52(sp)
 800dd14:	df000c17 	ldw	fp,48(sp)
 800dd18:	ddc00b17 	ldw	r23,44(sp)
 800dd1c:	dd800a17 	ldw	r22,40(sp)
 800dd20:	dd400917 	ldw	r21,36(sp)
 800dd24:	dd000817 	ldw	r20,32(sp)
 800dd28:	dcc00717 	ldw	r19,28(sp)
 800dd2c:	dc800617 	ldw	r18,24(sp)
 800dd30:	dc400517 	ldw	r17,20(sp)
 800dd34:	dc000417 	ldw	r16,16(sp)
 800dd38:	dec00e04 	addi	sp,sp,56
 800dd3c:	f800283a 	ret
 800dd40:	2404b03a 	or	r2,r4,r16
 800dd44:	2027883a 	mov	r19,r4
 800dd48:	10003926 	beq	r2,zero,800de30 <__divdf3+0x2c0>
 800dd4c:	80012e26 	beq	r16,zero,800e208 <__divdf3+0x698>
 800dd50:	8009883a 	mov	r4,r16
 800dd54:	d9800315 	stw	r6,12(sp)
 800dd58:	d9c00215 	stw	r7,8(sp)
 800dd5c:	80030a80 	call	80030a8 <__clzsi2>
 800dd60:	d9800317 	ldw	r6,12(sp)
 800dd64:	d9c00217 	ldw	r7,8(sp)
 800dd68:	113ffd44 	addi	r4,r2,-11
 800dd6c:	00c00704 	movi	r3,28
 800dd70:	19012116 	blt	r3,r4,800e1f8 <__divdf3+0x688>
 800dd74:	00c00744 	movi	r3,29
 800dd78:	147ffe04 	addi	r17,r2,-8
 800dd7c:	1907c83a 	sub	r3,r3,r4
 800dd80:	8460983a 	sll	r16,r16,r17
 800dd84:	98c6d83a 	srl	r3,r19,r3
 800dd88:	9c64983a 	sll	r18,r19,r17
 800dd8c:	1c20b03a 	or	r16,r3,r16
 800dd90:	1080fcc4 	addi	r2,r2,1011
 800dd94:	00abc83a 	sub	r21,zero,r2
 800dd98:	0027883a 	mov	r19,zero
 800dd9c:	0013883a 	mov	r9,zero
 800dda0:	003f9106 	br	800dbe8 <__alt_data_end+0xff00dbe8>
 800dda4:	3446b03a 	or	r3,r6,r17
 800dda8:	18001f1e 	bne	r3,zero,800de28 <__divdf3+0x2b8>
 800ddac:	0023883a 	mov	r17,zero
 800ddb0:	0011883a 	mov	r8,zero
 800ddb4:	01c00084 	movi	r7,2
 800ddb8:	003f9d06 	br	800dc30 <__alt_data_end+0xff00dc30>
 800ddbc:	3446b03a 	or	r3,r6,r17
 800ddc0:	18001526 	beq	r3,zero,800de18 <__divdf3+0x2a8>
 800ddc4:	88011b26 	beq	r17,zero,800e234 <__divdf3+0x6c4>
 800ddc8:	8809883a 	mov	r4,r17
 800ddcc:	d9800315 	stw	r6,12(sp)
 800ddd0:	da400115 	stw	r9,4(sp)
 800ddd4:	80030a80 	call	80030a8 <__clzsi2>
 800ddd8:	d9800317 	ldw	r6,12(sp)
 800dddc:	da400117 	ldw	r9,4(sp)
 800dde0:	113ffd44 	addi	r4,r2,-11
 800dde4:	00c00704 	movi	r3,28
 800dde8:	19010e16 	blt	r3,r4,800e224 <__divdf3+0x6b4>
 800ddec:	00c00744 	movi	r3,29
 800ddf0:	123ffe04 	addi	r8,r2,-8
 800ddf4:	1907c83a 	sub	r3,r3,r4
 800ddf8:	8a22983a 	sll	r17,r17,r8
 800ddfc:	30c6d83a 	srl	r3,r6,r3
 800de00:	3210983a 	sll	r8,r6,r8
 800de04:	1c62b03a 	or	r17,r3,r17
 800de08:	1080fcc4 	addi	r2,r2,1011
 800de0c:	0085c83a 	sub	r2,zero,r2
 800de10:	000f883a 	mov	r7,zero
 800de14:	003f8606 	br	800dc30 <__alt_data_end+0xff00dc30>
 800de18:	0023883a 	mov	r17,zero
 800de1c:	0011883a 	mov	r8,zero
 800de20:	01c00044 	movi	r7,1
 800de24:	003f8206 	br	800dc30 <__alt_data_end+0xff00dc30>
 800de28:	01c000c4 	movi	r7,3
 800de2c:	003f8006 	br	800dc30 <__alt_data_end+0xff00dc30>
 800de30:	04c00104 	movi	r19,4
 800de34:	0021883a 	mov	r16,zero
 800de38:	0025883a 	mov	r18,zero
 800de3c:	02400044 	movi	r9,1
 800de40:	003f6906 	br	800dbe8 <__alt_data_end+0xff00dbe8>
 800de44:	04c00304 	movi	r19,12
 800de48:	024000c4 	movi	r9,3
 800de4c:	003f6606 	br	800dbe8 <__alt_data_end+0xff00dbe8>
 800de50:	01400434 	movhi	r5,16
 800de54:	0007883a 	mov	r3,zero
 800de58:	297fffc4 	addi	r5,r5,-1
 800de5c:	04bfffc4 	movi	r18,-1
 800de60:	0081ffc4 	movi	r2,2047
 800de64:	003fa106 	br	800dcec <__alt_data_end+0xff00dcec>
 800de68:	00c00044 	movi	r3,1
 800de6c:	1887c83a 	sub	r3,r3,r2
 800de70:	01000e04 	movi	r4,56
 800de74:	20c1210e 	bge	r4,r3,800e2fc <__divdf3+0x78c>
 800de78:	98c0004c 	andi	r3,r19,1
 800de7c:	0005883a 	mov	r2,zero
 800de80:	000b883a 	mov	r5,zero
 800de84:	0025883a 	mov	r18,zero
 800de88:	003f9806 	br	800dcec <__alt_data_end+0xff00dcec>
 800de8c:	8c00fd36 	bltu	r17,r16,800e284 <__divdf3+0x714>
 800de90:	8440fb26 	beq	r16,r17,800e280 <__divdf3+0x710>
 800de94:	8007883a 	mov	r3,r16
 800de98:	ad7fffc4 	addi	r21,r21,-1
 800de9c:	0021883a 	mov	r16,zero
 800dea0:	4004d63a 	srli	r2,r8,24
 800dea4:	8822923a 	slli	r17,r17,8
 800dea8:	1809883a 	mov	r4,r3
 800deac:	402c923a 	slli	r22,r8,8
 800deb0:	88b8b03a 	or	fp,r17,r2
 800deb4:	e028d43a 	srli	r20,fp,16
 800deb8:	d8c00015 	stw	r3,0(sp)
 800debc:	e5ffffcc 	andi	r23,fp,65535
 800dec0:	a00b883a 	mov	r5,r20
 800dec4:	80021b80 	call	80021b8 <__udivsi3>
 800dec8:	d8c00017 	ldw	r3,0(sp)
 800decc:	a00b883a 	mov	r5,r20
 800ded0:	d8800315 	stw	r2,12(sp)
 800ded4:	1809883a 	mov	r4,r3
 800ded8:	800221c0 	call	800221c <__umodsi3>
 800dedc:	d9800317 	ldw	r6,12(sp)
 800dee0:	1006943a 	slli	r3,r2,16
 800dee4:	9004d43a 	srli	r2,r18,16
 800dee8:	b9a3383a 	mul	r17,r23,r6
 800deec:	10c4b03a 	or	r2,r2,r3
 800def0:	1440062e 	bgeu	r2,r17,800df0c <__divdf3+0x39c>
 800def4:	1705883a 	add	r2,r2,fp
 800def8:	30ffffc4 	addi	r3,r6,-1
 800defc:	1700ee36 	bltu	r2,fp,800e2b8 <__divdf3+0x748>
 800df00:	1440ed2e 	bgeu	r2,r17,800e2b8 <__divdf3+0x748>
 800df04:	31bfff84 	addi	r6,r6,-2
 800df08:	1705883a 	add	r2,r2,fp
 800df0c:	1463c83a 	sub	r17,r2,r17
 800df10:	a00b883a 	mov	r5,r20
 800df14:	8809883a 	mov	r4,r17
 800df18:	d9800315 	stw	r6,12(sp)
 800df1c:	80021b80 	call	80021b8 <__udivsi3>
 800df20:	a00b883a 	mov	r5,r20
 800df24:	8809883a 	mov	r4,r17
 800df28:	d8800215 	stw	r2,8(sp)
 800df2c:	800221c0 	call	800221c <__umodsi3>
 800df30:	d9c00217 	ldw	r7,8(sp)
 800df34:	1004943a 	slli	r2,r2,16
 800df38:	94bfffcc 	andi	r18,r18,65535
 800df3c:	b9d1383a 	mul	r8,r23,r7
 800df40:	90a4b03a 	or	r18,r18,r2
 800df44:	d9800317 	ldw	r6,12(sp)
 800df48:	9200062e 	bgeu	r18,r8,800df64 <__divdf3+0x3f4>
 800df4c:	9725883a 	add	r18,r18,fp
 800df50:	38bfffc4 	addi	r2,r7,-1
 800df54:	9700d636 	bltu	r18,fp,800e2b0 <__divdf3+0x740>
 800df58:	9200d52e 	bgeu	r18,r8,800e2b0 <__divdf3+0x740>
 800df5c:	39ffff84 	addi	r7,r7,-2
 800df60:	9725883a 	add	r18,r18,fp
 800df64:	3004943a 	slli	r2,r6,16
 800df68:	b012d43a 	srli	r9,r22,16
 800df6c:	b1bfffcc 	andi	r6,r22,65535
 800df70:	11e2b03a 	or	r17,r2,r7
 800df74:	8806d43a 	srli	r3,r17,16
 800df78:	893fffcc 	andi	r4,r17,65535
 800df7c:	218b383a 	mul	r5,r4,r6
 800df80:	30c5383a 	mul	r2,r6,r3
 800df84:	2249383a 	mul	r4,r4,r9
 800df88:	280ed43a 	srli	r7,r5,16
 800df8c:	9225c83a 	sub	r18,r18,r8
 800df90:	2089883a 	add	r4,r4,r2
 800df94:	3909883a 	add	r4,r7,r4
 800df98:	1a47383a 	mul	r3,r3,r9
 800df9c:	2080022e 	bgeu	r4,r2,800dfa8 <__divdf3+0x438>
 800dfa0:	00800074 	movhi	r2,1
 800dfa4:	1887883a 	add	r3,r3,r2
 800dfa8:	2004d43a 	srli	r2,r4,16
 800dfac:	2008943a 	slli	r4,r4,16
 800dfb0:	297fffcc 	andi	r5,r5,65535
 800dfb4:	10c7883a 	add	r3,r2,r3
 800dfb8:	2149883a 	add	r4,r4,r5
 800dfbc:	90c0a536 	bltu	r18,r3,800e254 <__divdf3+0x6e4>
 800dfc0:	90c0bf26 	beq	r18,r3,800e2c0 <__divdf3+0x750>
 800dfc4:	90c7c83a 	sub	r3,r18,r3
 800dfc8:	810fc83a 	sub	r7,r16,r4
 800dfcc:	81e5803a 	cmpltu	r18,r16,r7
 800dfd0:	1ca5c83a 	sub	r18,r3,r18
 800dfd4:	e480c126 	beq	fp,r18,800e2dc <__divdf3+0x76c>
 800dfd8:	a00b883a 	mov	r5,r20
 800dfdc:	9009883a 	mov	r4,r18
 800dfe0:	d9800315 	stw	r6,12(sp)
 800dfe4:	d9c00215 	stw	r7,8(sp)
 800dfe8:	da400115 	stw	r9,4(sp)
 800dfec:	80021b80 	call	80021b8 <__udivsi3>
 800dff0:	a00b883a 	mov	r5,r20
 800dff4:	9009883a 	mov	r4,r18
 800dff8:	d8800015 	stw	r2,0(sp)
 800dffc:	800221c0 	call	800221c <__umodsi3>
 800e000:	d9c00217 	ldw	r7,8(sp)
 800e004:	da000017 	ldw	r8,0(sp)
 800e008:	1006943a 	slli	r3,r2,16
 800e00c:	3804d43a 	srli	r2,r7,16
 800e010:	ba21383a 	mul	r16,r23,r8
 800e014:	d9800317 	ldw	r6,12(sp)
 800e018:	10c4b03a 	or	r2,r2,r3
 800e01c:	da400117 	ldw	r9,4(sp)
 800e020:	1400062e 	bgeu	r2,r16,800e03c <__divdf3+0x4cc>
 800e024:	1705883a 	add	r2,r2,fp
 800e028:	40ffffc4 	addi	r3,r8,-1
 800e02c:	1700ad36 	bltu	r2,fp,800e2e4 <__divdf3+0x774>
 800e030:	1400ac2e 	bgeu	r2,r16,800e2e4 <__divdf3+0x774>
 800e034:	423fff84 	addi	r8,r8,-2
 800e038:	1705883a 	add	r2,r2,fp
 800e03c:	1421c83a 	sub	r16,r2,r16
 800e040:	a00b883a 	mov	r5,r20
 800e044:	8009883a 	mov	r4,r16
 800e048:	d9800315 	stw	r6,12(sp)
 800e04c:	d9c00215 	stw	r7,8(sp)
 800e050:	da000015 	stw	r8,0(sp)
 800e054:	da400115 	stw	r9,4(sp)
 800e058:	80021b80 	call	80021b8 <__udivsi3>
 800e05c:	8009883a 	mov	r4,r16
 800e060:	a00b883a 	mov	r5,r20
 800e064:	1025883a 	mov	r18,r2
 800e068:	800221c0 	call	800221c <__umodsi3>
 800e06c:	d9c00217 	ldw	r7,8(sp)
 800e070:	1004943a 	slli	r2,r2,16
 800e074:	bcaf383a 	mul	r23,r23,r18
 800e078:	393fffcc 	andi	r4,r7,65535
 800e07c:	2088b03a 	or	r4,r4,r2
 800e080:	d9800317 	ldw	r6,12(sp)
 800e084:	da000017 	ldw	r8,0(sp)
 800e088:	da400117 	ldw	r9,4(sp)
 800e08c:	25c0062e 	bgeu	r4,r23,800e0a8 <__divdf3+0x538>
 800e090:	2709883a 	add	r4,r4,fp
 800e094:	90bfffc4 	addi	r2,r18,-1
 800e098:	27009436 	bltu	r4,fp,800e2ec <__divdf3+0x77c>
 800e09c:	25c0932e 	bgeu	r4,r23,800e2ec <__divdf3+0x77c>
 800e0a0:	94bfff84 	addi	r18,r18,-2
 800e0a4:	2709883a 	add	r4,r4,fp
 800e0a8:	4004943a 	slli	r2,r8,16
 800e0ac:	25efc83a 	sub	r23,r4,r23
 800e0b0:	1490b03a 	or	r8,r2,r18
 800e0b4:	4008d43a 	srli	r4,r8,16
 800e0b8:	40ffffcc 	andi	r3,r8,65535
 800e0bc:	30c5383a 	mul	r2,r6,r3
 800e0c0:	1a47383a 	mul	r3,r3,r9
 800e0c4:	310d383a 	mul	r6,r6,r4
 800e0c8:	100ad43a 	srli	r5,r2,16
 800e0cc:	4913383a 	mul	r9,r9,r4
 800e0d0:	1987883a 	add	r3,r3,r6
 800e0d4:	28c7883a 	add	r3,r5,r3
 800e0d8:	1980022e 	bgeu	r3,r6,800e0e4 <__divdf3+0x574>
 800e0dc:	01000074 	movhi	r4,1
 800e0e0:	4913883a 	add	r9,r9,r4
 800e0e4:	1808d43a 	srli	r4,r3,16
 800e0e8:	1806943a 	slli	r3,r3,16
 800e0ec:	10bfffcc 	andi	r2,r2,65535
 800e0f0:	2253883a 	add	r9,r4,r9
 800e0f4:	1887883a 	add	r3,r3,r2
 800e0f8:	ba403836 	bltu	r23,r9,800e1dc <__divdf3+0x66c>
 800e0fc:	ba403626 	beq	r23,r9,800e1d8 <__divdf3+0x668>
 800e100:	42000054 	ori	r8,r8,1
 800e104:	a880ffc4 	addi	r2,r21,1023
 800e108:	00bf570e 	bge	zero,r2,800de68 <__alt_data_end+0xff00de68>
 800e10c:	40c001cc 	andi	r3,r8,7
 800e110:	18000726 	beq	r3,zero,800e130 <__divdf3+0x5c0>
 800e114:	40c003cc 	andi	r3,r8,15
 800e118:	01000104 	movi	r4,4
 800e11c:	19000426 	beq	r3,r4,800e130 <__divdf3+0x5c0>
 800e120:	4107883a 	add	r3,r8,r4
 800e124:	1a11803a 	cmpltu	r8,r3,r8
 800e128:	8a23883a 	add	r17,r17,r8
 800e12c:	1811883a 	mov	r8,r3
 800e130:	88c0402c 	andhi	r3,r17,256
 800e134:	18000426 	beq	r3,zero,800e148 <__divdf3+0x5d8>
 800e138:	00ffc034 	movhi	r3,65280
 800e13c:	18ffffc4 	addi	r3,r3,-1
 800e140:	a8810004 	addi	r2,r21,1024
 800e144:	88e2703a 	and	r17,r17,r3
 800e148:	00c1ff84 	movi	r3,2046
 800e14c:	18bee316 	blt	r3,r2,800dcdc <__alt_data_end+0xff00dcdc>
 800e150:	8824977a 	slli	r18,r17,29
 800e154:	4010d0fa 	srli	r8,r8,3
 800e158:	8822927a 	slli	r17,r17,9
 800e15c:	1081ffcc 	andi	r2,r2,2047
 800e160:	9224b03a 	or	r18,r18,r8
 800e164:	880ad33a 	srli	r5,r17,12
 800e168:	98c0004c 	andi	r3,r19,1
 800e16c:	003edf06 	br	800dcec <__alt_data_end+0xff00dcec>
 800e170:	8080022c 	andhi	r2,r16,8
 800e174:	10001226 	beq	r2,zero,800e1c0 <__divdf3+0x650>
 800e178:	8880022c 	andhi	r2,r17,8
 800e17c:	1000101e 	bne	r2,zero,800e1c0 <__divdf3+0x650>
 800e180:	00800434 	movhi	r2,16
 800e184:	89400234 	orhi	r5,r17,8
 800e188:	10bfffc4 	addi	r2,r2,-1
 800e18c:	b007883a 	mov	r3,r22
 800e190:	288a703a 	and	r5,r5,r2
 800e194:	4025883a 	mov	r18,r8
 800e198:	003f3106 	br	800de60 <__alt_data_end+0xff00de60>
 800e19c:	008000c4 	movi	r2,3
 800e1a0:	3880a626 	beq	r7,r2,800e43c <__divdf3+0x8cc>
 800e1a4:	00800044 	movi	r2,1
 800e1a8:	3880521e 	bne	r7,r2,800e2f4 <__divdf3+0x784>
 800e1ac:	b807883a 	mov	r3,r23
 800e1b0:	0005883a 	mov	r2,zero
 800e1b4:	000b883a 	mov	r5,zero
 800e1b8:	0025883a 	mov	r18,zero
 800e1bc:	003ecb06 	br	800dcec <__alt_data_end+0xff00dcec>
 800e1c0:	00800434 	movhi	r2,16
 800e1c4:	81400234 	orhi	r5,r16,8
 800e1c8:	10bfffc4 	addi	r2,r2,-1
 800e1cc:	a007883a 	mov	r3,r20
 800e1d0:	288a703a 	and	r5,r5,r2
 800e1d4:	003f2206 	br	800de60 <__alt_data_end+0xff00de60>
 800e1d8:	183fca26 	beq	r3,zero,800e104 <__alt_data_end+0xff00e104>
 800e1dc:	e5ef883a 	add	r23,fp,r23
 800e1e0:	40bfffc4 	addi	r2,r8,-1
 800e1e4:	bf00392e 	bgeu	r23,fp,800e2cc <__divdf3+0x75c>
 800e1e8:	1011883a 	mov	r8,r2
 800e1ec:	ba7fc41e 	bne	r23,r9,800e100 <__alt_data_end+0xff00e100>
 800e1f0:	b0ffc31e 	bne	r22,r3,800e100 <__alt_data_end+0xff00e100>
 800e1f4:	003fc306 	br	800e104 <__alt_data_end+0xff00e104>
 800e1f8:	143ff604 	addi	r16,r2,-40
 800e1fc:	9c20983a 	sll	r16,r19,r16
 800e200:	0025883a 	mov	r18,zero
 800e204:	003ee206 	br	800dd90 <__alt_data_end+0xff00dd90>
 800e208:	d9800315 	stw	r6,12(sp)
 800e20c:	d9c00215 	stw	r7,8(sp)
 800e210:	80030a80 	call	80030a8 <__clzsi2>
 800e214:	10800804 	addi	r2,r2,32
 800e218:	d9c00217 	ldw	r7,8(sp)
 800e21c:	d9800317 	ldw	r6,12(sp)
 800e220:	003ed106 	br	800dd68 <__alt_data_end+0xff00dd68>
 800e224:	147ff604 	addi	r17,r2,-40
 800e228:	3462983a 	sll	r17,r6,r17
 800e22c:	0011883a 	mov	r8,zero
 800e230:	003ef506 	br	800de08 <__alt_data_end+0xff00de08>
 800e234:	3009883a 	mov	r4,r6
 800e238:	d9800315 	stw	r6,12(sp)
 800e23c:	da400115 	stw	r9,4(sp)
 800e240:	80030a80 	call	80030a8 <__clzsi2>
 800e244:	10800804 	addi	r2,r2,32
 800e248:	da400117 	ldw	r9,4(sp)
 800e24c:	d9800317 	ldw	r6,12(sp)
 800e250:	003ee306 	br	800dde0 <__alt_data_end+0xff00dde0>
 800e254:	85a1883a 	add	r16,r16,r22
 800e258:	8585803a 	cmpltu	r2,r16,r22
 800e25c:	1705883a 	add	r2,r2,fp
 800e260:	14a5883a 	add	r18,r2,r18
 800e264:	88bfffc4 	addi	r2,r17,-1
 800e268:	e4800c2e 	bgeu	fp,r18,800e29c <__divdf3+0x72c>
 800e26c:	90c03e36 	bltu	r18,r3,800e368 <__divdf3+0x7f8>
 800e270:	1c806926 	beq	r3,r18,800e418 <__divdf3+0x8a8>
 800e274:	90c7c83a 	sub	r3,r18,r3
 800e278:	1023883a 	mov	r17,r2
 800e27c:	003f5206 	br	800dfc8 <__alt_data_end+0xff00dfc8>
 800e280:	923f0436 	bltu	r18,r8,800de94 <__alt_data_end+0xff00de94>
 800e284:	800897fa 	slli	r4,r16,31
 800e288:	9004d07a 	srli	r2,r18,1
 800e28c:	8006d07a 	srli	r3,r16,1
 800e290:	902097fa 	slli	r16,r18,31
 800e294:	20a4b03a 	or	r18,r4,r2
 800e298:	003f0106 	br	800dea0 <__alt_data_end+0xff00dea0>
 800e29c:	e4bff51e 	bne	fp,r18,800e274 <__alt_data_end+0xff00e274>
 800e2a0:	85bff22e 	bgeu	r16,r22,800e26c <__alt_data_end+0xff00e26c>
 800e2a4:	e0c7c83a 	sub	r3,fp,r3
 800e2a8:	1023883a 	mov	r17,r2
 800e2ac:	003f4606 	br	800dfc8 <__alt_data_end+0xff00dfc8>
 800e2b0:	100f883a 	mov	r7,r2
 800e2b4:	003f2b06 	br	800df64 <__alt_data_end+0xff00df64>
 800e2b8:	180d883a 	mov	r6,r3
 800e2bc:	003f1306 	br	800df0c <__alt_data_end+0xff00df0c>
 800e2c0:	813fe436 	bltu	r16,r4,800e254 <__alt_data_end+0xff00e254>
 800e2c4:	0007883a 	mov	r3,zero
 800e2c8:	003f3f06 	br	800dfc8 <__alt_data_end+0xff00dfc8>
 800e2cc:	ba402c36 	bltu	r23,r9,800e380 <__divdf3+0x810>
 800e2d0:	4dc05426 	beq	r9,r23,800e424 <__divdf3+0x8b4>
 800e2d4:	1011883a 	mov	r8,r2
 800e2d8:	003f8906 	br	800e100 <__alt_data_end+0xff00e100>
 800e2dc:	023fffc4 	movi	r8,-1
 800e2e0:	003f8806 	br	800e104 <__alt_data_end+0xff00e104>
 800e2e4:	1811883a 	mov	r8,r3
 800e2e8:	003f5406 	br	800e03c <__alt_data_end+0xff00e03c>
 800e2ec:	1025883a 	mov	r18,r2
 800e2f0:	003f6d06 	br	800e0a8 <__alt_data_end+0xff00e0a8>
 800e2f4:	b827883a 	mov	r19,r23
 800e2f8:	003f8206 	br	800e104 <__alt_data_end+0xff00e104>
 800e2fc:	010007c4 	movi	r4,31
 800e300:	20c02616 	blt	r4,r3,800e39c <__divdf3+0x82c>
 800e304:	00800804 	movi	r2,32
 800e308:	10c5c83a 	sub	r2,r2,r3
 800e30c:	888a983a 	sll	r5,r17,r2
 800e310:	40c8d83a 	srl	r4,r8,r3
 800e314:	4084983a 	sll	r2,r8,r2
 800e318:	88e2d83a 	srl	r17,r17,r3
 800e31c:	2906b03a 	or	r3,r5,r4
 800e320:	1004c03a 	cmpne	r2,r2,zero
 800e324:	1886b03a 	or	r3,r3,r2
 800e328:	188001cc 	andi	r2,r3,7
 800e32c:	10000726 	beq	r2,zero,800e34c <__divdf3+0x7dc>
 800e330:	188003cc 	andi	r2,r3,15
 800e334:	01000104 	movi	r4,4
 800e338:	11000426 	beq	r2,r4,800e34c <__divdf3+0x7dc>
 800e33c:	1805883a 	mov	r2,r3
 800e340:	10c00104 	addi	r3,r2,4
 800e344:	1885803a 	cmpltu	r2,r3,r2
 800e348:	88a3883a 	add	r17,r17,r2
 800e34c:	8880202c 	andhi	r2,r17,128
 800e350:	10002726 	beq	r2,zero,800e3f0 <__divdf3+0x880>
 800e354:	98c0004c 	andi	r3,r19,1
 800e358:	00800044 	movi	r2,1
 800e35c:	000b883a 	mov	r5,zero
 800e360:	0025883a 	mov	r18,zero
 800e364:	003e6106 	br	800dcec <__alt_data_end+0xff00dcec>
 800e368:	85a1883a 	add	r16,r16,r22
 800e36c:	8585803a 	cmpltu	r2,r16,r22
 800e370:	1705883a 	add	r2,r2,fp
 800e374:	14a5883a 	add	r18,r2,r18
 800e378:	8c7fff84 	addi	r17,r17,-2
 800e37c:	003f1106 	br	800dfc4 <__alt_data_end+0xff00dfc4>
 800e380:	b589883a 	add	r4,r22,r22
 800e384:	25ad803a 	cmpltu	r22,r4,r22
 800e388:	b739883a 	add	fp,r22,fp
 800e38c:	40bfff84 	addi	r2,r8,-2
 800e390:	bf2f883a 	add	r23,r23,fp
 800e394:	202d883a 	mov	r22,r4
 800e398:	003f9306 	br	800e1e8 <__alt_data_end+0xff00e1e8>
 800e39c:	013ff844 	movi	r4,-31
 800e3a0:	2085c83a 	sub	r2,r4,r2
 800e3a4:	8888d83a 	srl	r4,r17,r2
 800e3a8:	00800804 	movi	r2,32
 800e3ac:	18802126 	beq	r3,r2,800e434 <__divdf3+0x8c4>
 800e3b0:	00801004 	movi	r2,64
 800e3b4:	10c5c83a 	sub	r2,r2,r3
 800e3b8:	8884983a 	sll	r2,r17,r2
 800e3bc:	1204b03a 	or	r2,r2,r8
 800e3c0:	1004c03a 	cmpne	r2,r2,zero
 800e3c4:	2084b03a 	or	r2,r4,r2
 800e3c8:	144001cc 	andi	r17,r2,7
 800e3cc:	88000d1e 	bne	r17,zero,800e404 <__divdf3+0x894>
 800e3d0:	000b883a 	mov	r5,zero
 800e3d4:	1024d0fa 	srli	r18,r2,3
 800e3d8:	98c0004c 	andi	r3,r19,1
 800e3dc:	0005883a 	mov	r2,zero
 800e3e0:	9464b03a 	or	r18,r18,r17
 800e3e4:	003e4106 	br	800dcec <__alt_data_end+0xff00dcec>
 800e3e8:	1007883a 	mov	r3,r2
 800e3ec:	0023883a 	mov	r17,zero
 800e3f0:	880a927a 	slli	r5,r17,9
 800e3f4:	1805883a 	mov	r2,r3
 800e3f8:	8822977a 	slli	r17,r17,29
 800e3fc:	280ad33a 	srli	r5,r5,12
 800e400:	003ff406 	br	800e3d4 <__alt_data_end+0xff00e3d4>
 800e404:	10c003cc 	andi	r3,r2,15
 800e408:	01000104 	movi	r4,4
 800e40c:	193ff626 	beq	r3,r4,800e3e8 <__alt_data_end+0xff00e3e8>
 800e410:	0023883a 	mov	r17,zero
 800e414:	003fca06 	br	800e340 <__alt_data_end+0xff00e340>
 800e418:	813fd336 	bltu	r16,r4,800e368 <__alt_data_end+0xff00e368>
 800e41c:	1023883a 	mov	r17,r2
 800e420:	003fa806 	br	800e2c4 <__alt_data_end+0xff00e2c4>
 800e424:	b0ffd636 	bltu	r22,r3,800e380 <__alt_data_end+0xff00e380>
 800e428:	1011883a 	mov	r8,r2
 800e42c:	b0ff341e 	bne	r22,r3,800e100 <__alt_data_end+0xff00e100>
 800e430:	003f3406 	br	800e104 <__alt_data_end+0xff00e104>
 800e434:	0005883a 	mov	r2,zero
 800e438:	003fe006 	br	800e3bc <__alt_data_end+0xff00e3bc>
 800e43c:	00800434 	movhi	r2,16
 800e440:	89400234 	orhi	r5,r17,8
 800e444:	10bfffc4 	addi	r2,r2,-1
 800e448:	b807883a 	mov	r3,r23
 800e44c:	288a703a 	and	r5,r5,r2
 800e450:	4025883a 	mov	r18,r8
 800e454:	003e8206 	br	800de60 <__alt_data_end+0xff00de60>

0800e458 <__eqdf2>:
 800e458:	2804d53a 	srli	r2,r5,20
 800e45c:	3806d53a 	srli	r3,r7,20
 800e460:	02000434 	movhi	r8,16
 800e464:	423fffc4 	addi	r8,r8,-1
 800e468:	1081ffcc 	andi	r2,r2,2047
 800e46c:	0281ffc4 	movi	r10,2047
 800e470:	2a12703a 	and	r9,r5,r8
 800e474:	18c1ffcc 	andi	r3,r3,2047
 800e478:	3a10703a 	and	r8,r7,r8
 800e47c:	280ad7fa 	srli	r5,r5,31
 800e480:	380ed7fa 	srli	r7,r7,31
 800e484:	12801026 	beq	r2,r10,800e4c8 <__eqdf2+0x70>
 800e488:	0281ffc4 	movi	r10,2047
 800e48c:	1a800a26 	beq	r3,r10,800e4b8 <__eqdf2+0x60>
 800e490:	10c00226 	beq	r2,r3,800e49c <__eqdf2+0x44>
 800e494:	00800044 	movi	r2,1
 800e498:	f800283a 	ret
 800e49c:	4a3ffd1e 	bne	r9,r8,800e494 <__alt_data_end+0xff00e494>
 800e4a0:	21bffc1e 	bne	r4,r6,800e494 <__alt_data_end+0xff00e494>
 800e4a4:	29c00c26 	beq	r5,r7,800e4d8 <__eqdf2+0x80>
 800e4a8:	103ffa1e 	bne	r2,zero,800e494 <__alt_data_end+0xff00e494>
 800e4ac:	2244b03a 	or	r2,r4,r9
 800e4b0:	1004c03a 	cmpne	r2,r2,zero
 800e4b4:	f800283a 	ret
 800e4b8:	3214b03a 	or	r10,r6,r8
 800e4bc:	503ff426 	beq	r10,zero,800e490 <__alt_data_end+0xff00e490>
 800e4c0:	00800044 	movi	r2,1
 800e4c4:	f800283a 	ret
 800e4c8:	2254b03a 	or	r10,r4,r9
 800e4cc:	503fee26 	beq	r10,zero,800e488 <__alt_data_end+0xff00e488>
 800e4d0:	00800044 	movi	r2,1
 800e4d4:	f800283a 	ret
 800e4d8:	0005883a 	mov	r2,zero
 800e4dc:	f800283a 	ret

0800e4e0 <__gedf2>:
 800e4e0:	2804d53a 	srli	r2,r5,20
 800e4e4:	3806d53a 	srli	r3,r7,20
 800e4e8:	02000434 	movhi	r8,16
 800e4ec:	423fffc4 	addi	r8,r8,-1
 800e4f0:	1081ffcc 	andi	r2,r2,2047
 800e4f4:	0241ffc4 	movi	r9,2047
 800e4f8:	2a14703a 	and	r10,r5,r8
 800e4fc:	18c1ffcc 	andi	r3,r3,2047
 800e500:	3a10703a 	and	r8,r7,r8
 800e504:	280ad7fa 	srli	r5,r5,31
 800e508:	380ed7fa 	srli	r7,r7,31
 800e50c:	12401d26 	beq	r2,r9,800e584 <__gedf2+0xa4>
 800e510:	0241ffc4 	movi	r9,2047
 800e514:	1a401226 	beq	r3,r9,800e560 <__gedf2+0x80>
 800e518:	1000081e 	bne	r2,zero,800e53c <__gedf2+0x5c>
 800e51c:	2296b03a 	or	r11,r4,r10
 800e520:	5813003a 	cmpeq	r9,r11,zero
 800e524:	1800091e 	bne	r3,zero,800e54c <__gedf2+0x6c>
 800e528:	3218b03a 	or	r12,r6,r8
 800e52c:	6000071e 	bne	r12,zero,800e54c <__gedf2+0x6c>
 800e530:	0005883a 	mov	r2,zero
 800e534:	5800101e 	bne	r11,zero,800e578 <__gedf2+0x98>
 800e538:	f800283a 	ret
 800e53c:	18000c1e 	bne	r3,zero,800e570 <__gedf2+0x90>
 800e540:	3212b03a 	or	r9,r6,r8
 800e544:	48000c26 	beq	r9,zero,800e578 <__gedf2+0x98>
 800e548:	0013883a 	mov	r9,zero
 800e54c:	39c03fcc 	andi	r7,r7,255
 800e550:	48000826 	beq	r9,zero,800e574 <__gedf2+0x94>
 800e554:	38000926 	beq	r7,zero,800e57c <__gedf2+0x9c>
 800e558:	00800044 	movi	r2,1
 800e55c:	f800283a 	ret
 800e560:	3212b03a 	or	r9,r6,r8
 800e564:	483fec26 	beq	r9,zero,800e518 <__alt_data_end+0xff00e518>
 800e568:	00bfff84 	movi	r2,-2
 800e56c:	f800283a 	ret
 800e570:	39c03fcc 	andi	r7,r7,255
 800e574:	29c00626 	beq	r5,r7,800e590 <__gedf2+0xb0>
 800e578:	283ff726 	beq	r5,zero,800e558 <__alt_data_end+0xff00e558>
 800e57c:	00bfffc4 	movi	r2,-1
 800e580:	f800283a 	ret
 800e584:	2292b03a 	or	r9,r4,r10
 800e588:	483fe126 	beq	r9,zero,800e510 <__alt_data_end+0xff00e510>
 800e58c:	003ff606 	br	800e568 <__alt_data_end+0xff00e568>
 800e590:	18bff916 	blt	r3,r2,800e578 <__alt_data_end+0xff00e578>
 800e594:	10c00316 	blt	r2,r3,800e5a4 <__gedf2+0xc4>
 800e598:	42bff736 	bltu	r8,r10,800e578 <__alt_data_end+0xff00e578>
 800e59c:	52000326 	beq	r10,r8,800e5ac <__gedf2+0xcc>
 800e5a0:	5200042e 	bgeu	r10,r8,800e5b4 <__gedf2+0xd4>
 800e5a4:	283fec1e 	bne	r5,zero,800e558 <__alt_data_end+0xff00e558>
 800e5a8:	003ff406 	br	800e57c <__alt_data_end+0xff00e57c>
 800e5ac:	313ff236 	bltu	r6,r4,800e578 <__alt_data_end+0xff00e578>
 800e5b0:	21bffc36 	bltu	r4,r6,800e5a4 <__alt_data_end+0xff00e5a4>
 800e5b4:	0005883a 	mov	r2,zero
 800e5b8:	f800283a 	ret

0800e5bc <__ledf2>:
 800e5bc:	2804d53a 	srli	r2,r5,20
 800e5c0:	3810d53a 	srli	r8,r7,20
 800e5c4:	00c00434 	movhi	r3,16
 800e5c8:	18ffffc4 	addi	r3,r3,-1
 800e5cc:	1081ffcc 	andi	r2,r2,2047
 800e5d0:	0241ffc4 	movi	r9,2047
 800e5d4:	28d4703a 	and	r10,r5,r3
 800e5d8:	4201ffcc 	andi	r8,r8,2047
 800e5dc:	38c6703a 	and	r3,r7,r3
 800e5e0:	280ad7fa 	srli	r5,r5,31
 800e5e4:	380ed7fa 	srli	r7,r7,31
 800e5e8:	12401f26 	beq	r2,r9,800e668 <__ledf2+0xac>
 800e5ec:	0241ffc4 	movi	r9,2047
 800e5f0:	42401426 	beq	r8,r9,800e644 <__ledf2+0x88>
 800e5f4:	1000091e 	bne	r2,zero,800e61c <__ledf2+0x60>
 800e5f8:	2296b03a 	or	r11,r4,r10
 800e5fc:	5813003a 	cmpeq	r9,r11,zero
 800e600:	29403fcc 	andi	r5,r5,255
 800e604:	40000a1e 	bne	r8,zero,800e630 <__ledf2+0x74>
 800e608:	30d8b03a 	or	r12,r6,r3
 800e60c:	6000081e 	bne	r12,zero,800e630 <__ledf2+0x74>
 800e610:	0005883a 	mov	r2,zero
 800e614:	5800111e 	bne	r11,zero,800e65c <__ledf2+0xa0>
 800e618:	f800283a 	ret
 800e61c:	29403fcc 	andi	r5,r5,255
 800e620:	40000c1e 	bne	r8,zero,800e654 <__ledf2+0x98>
 800e624:	30d2b03a 	or	r9,r6,r3
 800e628:	48000c26 	beq	r9,zero,800e65c <__ledf2+0xa0>
 800e62c:	0013883a 	mov	r9,zero
 800e630:	39c03fcc 	andi	r7,r7,255
 800e634:	48000826 	beq	r9,zero,800e658 <__ledf2+0x9c>
 800e638:	38001126 	beq	r7,zero,800e680 <__ledf2+0xc4>
 800e63c:	00800044 	movi	r2,1
 800e640:	f800283a 	ret
 800e644:	30d2b03a 	or	r9,r6,r3
 800e648:	483fea26 	beq	r9,zero,800e5f4 <__alt_data_end+0xff00e5f4>
 800e64c:	00800084 	movi	r2,2
 800e650:	f800283a 	ret
 800e654:	39c03fcc 	andi	r7,r7,255
 800e658:	39400726 	beq	r7,r5,800e678 <__ledf2+0xbc>
 800e65c:	2800081e 	bne	r5,zero,800e680 <__ledf2+0xc4>
 800e660:	00800044 	movi	r2,1
 800e664:	f800283a 	ret
 800e668:	2292b03a 	or	r9,r4,r10
 800e66c:	483fdf26 	beq	r9,zero,800e5ec <__alt_data_end+0xff00e5ec>
 800e670:	00800084 	movi	r2,2
 800e674:	f800283a 	ret
 800e678:	4080030e 	bge	r8,r2,800e688 <__ledf2+0xcc>
 800e67c:	383fef26 	beq	r7,zero,800e63c <__alt_data_end+0xff00e63c>
 800e680:	00bfffc4 	movi	r2,-1
 800e684:	f800283a 	ret
 800e688:	123feb16 	blt	r2,r8,800e638 <__alt_data_end+0xff00e638>
 800e68c:	1abff336 	bltu	r3,r10,800e65c <__alt_data_end+0xff00e65c>
 800e690:	50c00326 	beq	r10,r3,800e6a0 <__ledf2+0xe4>
 800e694:	50c0042e 	bgeu	r10,r3,800e6a8 <__ledf2+0xec>
 800e698:	283fe81e 	bne	r5,zero,800e63c <__alt_data_end+0xff00e63c>
 800e69c:	003ff806 	br	800e680 <__alt_data_end+0xff00e680>
 800e6a0:	313fee36 	bltu	r6,r4,800e65c <__alt_data_end+0xff00e65c>
 800e6a4:	21bffc36 	bltu	r4,r6,800e698 <__alt_data_end+0xff00e698>
 800e6a8:	0005883a 	mov	r2,zero
 800e6ac:	f800283a 	ret

0800e6b0 <__subdf3>:
 800e6b0:	02000434 	movhi	r8,16
 800e6b4:	423fffc4 	addi	r8,r8,-1
 800e6b8:	defffb04 	addi	sp,sp,-20
 800e6bc:	2a14703a 	and	r10,r5,r8
 800e6c0:	3812d53a 	srli	r9,r7,20
 800e6c4:	3a10703a 	and	r8,r7,r8
 800e6c8:	2006d77a 	srli	r3,r4,29
 800e6cc:	3004d77a 	srli	r2,r6,29
 800e6d0:	dc000015 	stw	r16,0(sp)
 800e6d4:	501490fa 	slli	r10,r10,3
 800e6d8:	2820d53a 	srli	r16,r5,20
 800e6dc:	401090fa 	slli	r8,r8,3
 800e6e0:	dc800215 	stw	r18,8(sp)
 800e6e4:	dc400115 	stw	r17,4(sp)
 800e6e8:	dfc00415 	stw	ra,16(sp)
 800e6ec:	202290fa 	slli	r17,r4,3
 800e6f0:	dcc00315 	stw	r19,12(sp)
 800e6f4:	4a41ffcc 	andi	r9,r9,2047
 800e6f8:	0101ffc4 	movi	r4,2047
 800e6fc:	2824d7fa 	srli	r18,r5,31
 800e700:	8401ffcc 	andi	r16,r16,2047
 800e704:	50c6b03a 	or	r3,r10,r3
 800e708:	380ed7fa 	srli	r7,r7,31
 800e70c:	408ab03a 	or	r5,r8,r2
 800e710:	300c90fa 	slli	r6,r6,3
 800e714:	49009626 	beq	r9,r4,800e970 <__subdf3+0x2c0>
 800e718:	39c0005c 	xori	r7,r7,1
 800e71c:	8245c83a 	sub	r2,r16,r9
 800e720:	3c807426 	beq	r7,r18,800e8f4 <__subdf3+0x244>
 800e724:	0080af0e 	bge	zero,r2,800e9e4 <__subdf3+0x334>
 800e728:	48002a1e 	bne	r9,zero,800e7d4 <__subdf3+0x124>
 800e72c:	2988b03a 	or	r4,r5,r6
 800e730:	20009a1e 	bne	r4,zero,800e99c <__subdf3+0x2ec>
 800e734:	888001cc 	andi	r2,r17,7
 800e738:	10000726 	beq	r2,zero,800e758 <__subdf3+0xa8>
 800e73c:	888003cc 	andi	r2,r17,15
 800e740:	01000104 	movi	r4,4
 800e744:	11000426 	beq	r2,r4,800e758 <__subdf3+0xa8>
 800e748:	890b883a 	add	r5,r17,r4
 800e74c:	2c63803a 	cmpltu	r17,r5,r17
 800e750:	1c47883a 	add	r3,r3,r17
 800e754:	2823883a 	mov	r17,r5
 800e758:	1880202c 	andhi	r2,r3,128
 800e75c:	10005926 	beq	r2,zero,800e8c4 <__subdf3+0x214>
 800e760:	84000044 	addi	r16,r16,1
 800e764:	0081ffc4 	movi	r2,2047
 800e768:	8080be26 	beq	r16,r2,800ea64 <__subdf3+0x3b4>
 800e76c:	017fe034 	movhi	r5,65408
 800e770:	297fffc4 	addi	r5,r5,-1
 800e774:	1946703a 	and	r3,r3,r5
 800e778:	1804977a 	slli	r2,r3,29
 800e77c:	1806927a 	slli	r3,r3,9
 800e780:	8822d0fa 	srli	r17,r17,3
 800e784:	8401ffcc 	andi	r16,r16,2047
 800e788:	180ad33a 	srli	r5,r3,12
 800e78c:	9100004c 	andi	r4,r18,1
 800e790:	1444b03a 	or	r2,r2,r17
 800e794:	80c1ffcc 	andi	r3,r16,2047
 800e798:	1820953a 	slli	r16,r3,20
 800e79c:	20c03fcc 	andi	r3,r4,255
 800e7a0:	180897fa 	slli	r4,r3,31
 800e7a4:	00c00434 	movhi	r3,16
 800e7a8:	18ffffc4 	addi	r3,r3,-1
 800e7ac:	28c6703a 	and	r3,r5,r3
 800e7b0:	1c06b03a 	or	r3,r3,r16
 800e7b4:	1906b03a 	or	r3,r3,r4
 800e7b8:	dfc00417 	ldw	ra,16(sp)
 800e7bc:	dcc00317 	ldw	r19,12(sp)
 800e7c0:	dc800217 	ldw	r18,8(sp)
 800e7c4:	dc400117 	ldw	r17,4(sp)
 800e7c8:	dc000017 	ldw	r16,0(sp)
 800e7cc:	dec00504 	addi	sp,sp,20
 800e7d0:	f800283a 	ret
 800e7d4:	0101ffc4 	movi	r4,2047
 800e7d8:	813fd626 	beq	r16,r4,800e734 <__alt_data_end+0xff00e734>
 800e7dc:	29402034 	orhi	r5,r5,128
 800e7e0:	01000e04 	movi	r4,56
 800e7e4:	2080a316 	blt	r4,r2,800ea74 <__subdf3+0x3c4>
 800e7e8:	010007c4 	movi	r4,31
 800e7ec:	2080c616 	blt	r4,r2,800eb08 <__subdf3+0x458>
 800e7f0:	01000804 	movi	r4,32
 800e7f4:	2089c83a 	sub	r4,r4,r2
 800e7f8:	2910983a 	sll	r8,r5,r4
 800e7fc:	308ed83a 	srl	r7,r6,r2
 800e800:	3108983a 	sll	r4,r6,r4
 800e804:	2884d83a 	srl	r2,r5,r2
 800e808:	41ccb03a 	or	r6,r8,r7
 800e80c:	2008c03a 	cmpne	r4,r4,zero
 800e810:	310cb03a 	or	r6,r6,r4
 800e814:	898dc83a 	sub	r6,r17,r6
 800e818:	89a3803a 	cmpltu	r17,r17,r6
 800e81c:	1887c83a 	sub	r3,r3,r2
 800e820:	1c47c83a 	sub	r3,r3,r17
 800e824:	3023883a 	mov	r17,r6
 800e828:	1880202c 	andhi	r2,r3,128
 800e82c:	10002326 	beq	r2,zero,800e8bc <__subdf3+0x20c>
 800e830:	04c02034 	movhi	r19,128
 800e834:	9cffffc4 	addi	r19,r19,-1
 800e838:	1ce6703a 	and	r19,r3,r19
 800e83c:	98007a26 	beq	r19,zero,800ea28 <__subdf3+0x378>
 800e840:	9809883a 	mov	r4,r19
 800e844:	80030a80 	call	80030a8 <__clzsi2>
 800e848:	113ffe04 	addi	r4,r2,-8
 800e84c:	00c007c4 	movi	r3,31
 800e850:	19007b16 	blt	r3,r4,800ea40 <__subdf3+0x390>
 800e854:	00800804 	movi	r2,32
 800e858:	1105c83a 	sub	r2,r2,r4
 800e85c:	8884d83a 	srl	r2,r17,r2
 800e860:	9906983a 	sll	r3,r19,r4
 800e864:	8922983a 	sll	r17,r17,r4
 800e868:	10c4b03a 	or	r2,r2,r3
 800e86c:	24007816 	blt	r4,r16,800ea50 <__subdf3+0x3a0>
 800e870:	2421c83a 	sub	r16,r4,r16
 800e874:	80c00044 	addi	r3,r16,1
 800e878:	010007c4 	movi	r4,31
 800e87c:	20c09516 	blt	r4,r3,800ead4 <__subdf3+0x424>
 800e880:	01400804 	movi	r5,32
 800e884:	28cbc83a 	sub	r5,r5,r3
 800e888:	88c8d83a 	srl	r4,r17,r3
 800e88c:	8962983a 	sll	r17,r17,r5
 800e890:	114a983a 	sll	r5,r2,r5
 800e894:	10c6d83a 	srl	r3,r2,r3
 800e898:	8804c03a 	cmpne	r2,r17,zero
 800e89c:	290ab03a 	or	r5,r5,r4
 800e8a0:	28a2b03a 	or	r17,r5,r2
 800e8a4:	0021883a 	mov	r16,zero
 800e8a8:	003fa206 	br	800e734 <__alt_data_end+0xff00e734>
 800e8ac:	2090b03a 	or	r8,r4,r2
 800e8b0:	40018e26 	beq	r8,zero,800eeec <__subdf3+0x83c>
 800e8b4:	1007883a 	mov	r3,r2
 800e8b8:	2023883a 	mov	r17,r4
 800e8bc:	888001cc 	andi	r2,r17,7
 800e8c0:	103f9e1e 	bne	r2,zero,800e73c <__alt_data_end+0xff00e73c>
 800e8c4:	1804977a 	slli	r2,r3,29
 800e8c8:	8822d0fa 	srli	r17,r17,3
 800e8cc:	1810d0fa 	srli	r8,r3,3
 800e8d0:	9100004c 	andi	r4,r18,1
 800e8d4:	1444b03a 	or	r2,r2,r17
 800e8d8:	00c1ffc4 	movi	r3,2047
 800e8dc:	80c02826 	beq	r16,r3,800e980 <__subdf3+0x2d0>
 800e8e0:	01400434 	movhi	r5,16
 800e8e4:	297fffc4 	addi	r5,r5,-1
 800e8e8:	80e0703a 	and	r16,r16,r3
 800e8ec:	414a703a 	and	r5,r8,r5
 800e8f0:	003fa806 	br	800e794 <__alt_data_end+0xff00e794>
 800e8f4:	0080630e 	bge	zero,r2,800ea84 <__subdf3+0x3d4>
 800e8f8:	48003026 	beq	r9,zero,800e9bc <__subdf3+0x30c>
 800e8fc:	0101ffc4 	movi	r4,2047
 800e900:	813f8c26 	beq	r16,r4,800e734 <__alt_data_end+0xff00e734>
 800e904:	29402034 	orhi	r5,r5,128
 800e908:	01000e04 	movi	r4,56
 800e90c:	2080a90e 	bge	r4,r2,800ebb4 <__subdf3+0x504>
 800e910:	298cb03a 	or	r6,r5,r6
 800e914:	3012c03a 	cmpne	r9,r6,zero
 800e918:	0005883a 	mov	r2,zero
 800e91c:	4c53883a 	add	r9,r9,r17
 800e920:	4c63803a 	cmpltu	r17,r9,r17
 800e924:	10c7883a 	add	r3,r2,r3
 800e928:	88c7883a 	add	r3,r17,r3
 800e92c:	4823883a 	mov	r17,r9
 800e930:	1880202c 	andhi	r2,r3,128
 800e934:	1000d026 	beq	r2,zero,800ec78 <__subdf3+0x5c8>
 800e938:	84000044 	addi	r16,r16,1
 800e93c:	0081ffc4 	movi	r2,2047
 800e940:	8080fe26 	beq	r16,r2,800ed3c <__subdf3+0x68c>
 800e944:	00bfe034 	movhi	r2,65408
 800e948:	10bfffc4 	addi	r2,r2,-1
 800e94c:	1886703a 	and	r3,r3,r2
 800e950:	880ad07a 	srli	r5,r17,1
 800e954:	180497fa 	slli	r2,r3,31
 800e958:	8900004c 	andi	r4,r17,1
 800e95c:	2922b03a 	or	r17,r5,r4
 800e960:	1806d07a 	srli	r3,r3,1
 800e964:	1462b03a 	or	r17,r2,r17
 800e968:	3825883a 	mov	r18,r7
 800e96c:	003f7106 	br	800e734 <__alt_data_end+0xff00e734>
 800e970:	2984b03a 	or	r2,r5,r6
 800e974:	103f6826 	beq	r2,zero,800e718 <__alt_data_end+0xff00e718>
 800e978:	39c03fcc 	andi	r7,r7,255
 800e97c:	003f6706 	br	800e71c <__alt_data_end+0xff00e71c>
 800e980:	4086b03a 	or	r3,r8,r2
 800e984:	18015226 	beq	r3,zero,800eed0 <__subdf3+0x820>
 800e988:	00c00434 	movhi	r3,16
 800e98c:	41400234 	orhi	r5,r8,8
 800e990:	18ffffc4 	addi	r3,r3,-1
 800e994:	28ca703a 	and	r5,r5,r3
 800e998:	003f7e06 	br	800e794 <__alt_data_end+0xff00e794>
 800e99c:	10bfffc4 	addi	r2,r2,-1
 800e9a0:	1000491e 	bne	r2,zero,800eac8 <__subdf3+0x418>
 800e9a4:	898fc83a 	sub	r7,r17,r6
 800e9a8:	89e3803a 	cmpltu	r17,r17,r7
 800e9ac:	1947c83a 	sub	r3,r3,r5
 800e9b0:	1c47c83a 	sub	r3,r3,r17
 800e9b4:	3823883a 	mov	r17,r7
 800e9b8:	003f9b06 	br	800e828 <__alt_data_end+0xff00e828>
 800e9bc:	2988b03a 	or	r4,r5,r6
 800e9c0:	203f5c26 	beq	r4,zero,800e734 <__alt_data_end+0xff00e734>
 800e9c4:	10bfffc4 	addi	r2,r2,-1
 800e9c8:	1000931e 	bne	r2,zero,800ec18 <__subdf3+0x568>
 800e9cc:	898d883a 	add	r6,r17,r6
 800e9d0:	3463803a 	cmpltu	r17,r6,r17
 800e9d4:	1947883a 	add	r3,r3,r5
 800e9d8:	88c7883a 	add	r3,r17,r3
 800e9dc:	3023883a 	mov	r17,r6
 800e9e0:	003fd306 	br	800e930 <__alt_data_end+0xff00e930>
 800e9e4:	1000541e 	bne	r2,zero,800eb38 <__subdf3+0x488>
 800e9e8:	80800044 	addi	r2,r16,1
 800e9ec:	1081ffcc 	andi	r2,r2,2047
 800e9f0:	01000044 	movi	r4,1
 800e9f4:	2080a20e 	bge	r4,r2,800ec80 <__subdf3+0x5d0>
 800e9f8:	8989c83a 	sub	r4,r17,r6
 800e9fc:	8905803a 	cmpltu	r2,r17,r4
 800ea00:	1967c83a 	sub	r19,r3,r5
 800ea04:	98a7c83a 	sub	r19,r19,r2
 800ea08:	9880202c 	andhi	r2,r19,128
 800ea0c:	10006326 	beq	r2,zero,800eb9c <__subdf3+0x4ec>
 800ea10:	3463c83a 	sub	r17,r6,r17
 800ea14:	28c7c83a 	sub	r3,r5,r3
 800ea18:	344d803a 	cmpltu	r6,r6,r17
 800ea1c:	19a7c83a 	sub	r19,r3,r6
 800ea20:	3825883a 	mov	r18,r7
 800ea24:	983f861e 	bne	r19,zero,800e840 <__alt_data_end+0xff00e840>
 800ea28:	8809883a 	mov	r4,r17
 800ea2c:	80030a80 	call	80030a8 <__clzsi2>
 800ea30:	10800804 	addi	r2,r2,32
 800ea34:	113ffe04 	addi	r4,r2,-8
 800ea38:	00c007c4 	movi	r3,31
 800ea3c:	193f850e 	bge	r3,r4,800e854 <__alt_data_end+0xff00e854>
 800ea40:	10bff604 	addi	r2,r2,-40
 800ea44:	8884983a 	sll	r2,r17,r2
 800ea48:	0023883a 	mov	r17,zero
 800ea4c:	243f880e 	bge	r4,r16,800e870 <__alt_data_end+0xff00e870>
 800ea50:	00ffe034 	movhi	r3,65408
 800ea54:	18ffffc4 	addi	r3,r3,-1
 800ea58:	8121c83a 	sub	r16,r16,r4
 800ea5c:	10c6703a 	and	r3,r2,r3
 800ea60:	003f3406 	br	800e734 <__alt_data_end+0xff00e734>
 800ea64:	9100004c 	andi	r4,r18,1
 800ea68:	000b883a 	mov	r5,zero
 800ea6c:	0005883a 	mov	r2,zero
 800ea70:	003f4806 	br	800e794 <__alt_data_end+0xff00e794>
 800ea74:	298cb03a 	or	r6,r5,r6
 800ea78:	300cc03a 	cmpne	r6,r6,zero
 800ea7c:	0005883a 	mov	r2,zero
 800ea80:	003f6406 	br	800e814 <__alt_data_end+0xff00e814>
 800ea84:	10009a1e 	bne	r2,zero,800ecf0 <__subdf3+0x640>
 800ea88:	82400044 	addi	r9,r16,1
 800ea8c:	4881ffcc 	andi	r2,r9,2047
 800ea90:	02800044 	movi	r10,1
 800ea94:	5080670e 	bge	r10,r2,800ec34 <__subdf3+0x584>
 800ea98:	0081ffc4 	movi	r2,2047
 800ea9c:	4880af26 	beq	r9,r2,800ed5c <__subdf3+0x6ac>
 800eaa0:	898d883a 	add	r6,r17,r6
 800eaa4:	1945883a 	add	r2,r3,r5
 800eaa8:	3447803a 	cmpltu	r3,r6,r17
 800eaac:	1887883a 	add	r3,r3,r2
 800eab0:	182297fa 	slli	r17,r3,31
 800eab4:	300cd07a 	srli	r6,r6,1
 800eab8:	1806d07a 	srli	r3,r3,1
 800eabc:	4821883a 	mov	r16,r9
 800eac0:	89a2b03a 	or	r17,r17,r6
 800eac4:	003f1b06 	br	800e734 <__alt_data_end+0xff00e734>
 800eac8:	0101ffc4 	movi	r4,2047
 800eacc:	813f441e 	bne	r16,r4,800e7e0 <__alt_data_end+0xff00e7e0>
 800ead0:	003f1806 	br	800e734 <__alt_data_end+0xff00e734>
 800ead4:	843ff844 	addi	r16,r16,-31
 800ead8:	01400804 	movi	r5,32
 800eadc:	1408d83a 	srl	r4,r2,r16
 800eae0:	19405026 	beq	r3,r5,800ec24 <__subdf3+0x574>
 800eae4:	01401004 	movi	r5,64
 800eae8:	28c7c83a 	sub	r3,r5,r3
 800eaec:	10c4983a 	sll	r2,r2,r3
 800eaf0:	88a2b03a 	or	r17,r17,r2
 800eaf4:	8822c03a 	cmpne	r17,r17,zero
 800eaf8:	2462b03a 	or	r17,r4,r17
 800eafc:	0007883a 	mov	r3,zero
 800eb00:	0021883a 	mov	r16,zero
 800eb04:	003f6d06 	br	800e8bc <__alt_data_end+0xff00e8bc>
 800eb08:	11fff804 	addi	r7,r2,-32
 800eb0c:	01000804 	movi	r4,32
 800eb10:	29ced83a 	srl	r7,r5,r7
 800eb14:	11004526 	beq	r2,r4,800ec2c <__subdf3+0x57c>
 800eb18:	01001004 	movi	r4,64
 800eb1c:	2089c83a 	sub	r4,r4,r2
 800eb20:	2904983a 	sll	r2,r5,r4
 800eb24:	118cb03a 	or	r6,r2,r6
 800eb28:	300cc03a 	cmpne	r6,r6,zero
 800eb2c:	398cb03a 	or	r6,r7,r6
 800eb30:	0005883a 	mov	r2,zero
 800eb34:	003f3706 	br	800e814 <__alt_data_end+0xff00e814>
 800eb38:	80002a26 	beq	r16,zero,800ebe4 <__subdf3+0x534>
 800eb3c:	0101ffc4 	movi	r4,2047
 800eb40:	49006626 	beq	r9,r4,800ecdc <__subdf3+0x62c>
 800eb44:	0085c83a 	sub	r2,zero,r2
 800eb48:	18c02034 	orhi	r3,r3,128
 800eb4c:	01000e04 	movi	r4,56
 800eb50:	20807e16 	blt	r4,r2,800ed4c <__subdf3+0x69c>
 800eb54:	010007c4 	movi	r4,31
 800eb58:	2080e716 	blt	r4,r2,800eef8 <__subdf3+0x848>
 800eb5c:	01000804 	movi	r4,32
 800eb60:	2089c83a 	sub	r4,r4,r2
 800eb64:	1914983a 	sll	r10,r3,r4
 800eb68:	8890d83a 	srl	r8,r17,r2
 800eb6c:	8908983a 	sll	r4,r17,r4
 800eb70:	1884d83a 	srl	r2,r3,r2
 800eb74:	5222b03a 	or	r17,r10,r8
 800eb78:	2006c03a 	cmpne	r3,r4,zero
 800eb7c:	88e2b03a 	or	r17,r17,r3
 800eb80:	3463c83a 	sub	r17,r6,r17
 800eb84:	2885c83a 	sub	r2,r5,r2
 800eb88:	344d803a 	cmpltu	r6,r6,r17
 800eb8c:	1187c83a 	sub	r3,r2,r6
 800eb90:	4821883a 	mov	r16,r9
 800eb94:	3825883a 	mov	r18,r7
 800eb98:	003f2306 	br	800e828 <__alt_data_end+0xff00e828>
 800eb9c:	24d0b03a 	or	r8,r4,r19
 800eba0:	40001b1e 	bne	r8,zero,800ec10 <__subdf3+0x560>
 800eba4:	0005883a 	mov	r2,zero
 800eba8:	0009883a 	mov	r4,zero
 800ebac:	0021883a 	mov	r16,zero
 800ebb0:	003f4906 	br	800e8d8 <__alt_data_end+0xff00e8d8>
 800ebb4:	010007c4 	movi	r4,31
 800ebb8:	20803a16 	blt	r4,r2,800eca4 <__subdf3+0x5f4>
 800ebbc:	01000804 	movi	r4,32
 800ebc0:	2089c83a 	sub	r4,r4,r2
 800ebc4:	2912983a 	sll	r9,r5,r4
 800ebc8:	3090d83a 	srl	r8,r6,r2
 800ebcc:	3108983a 	sll	r4,r6,r4
 800ebd0:	2884d83a 	srl	r2,r5,r2
 800ebd4:	4a12b03a 	or	r9,r9,r8
 800ebd8:	2008c03a 	cmpne	r4,r4,zero
 800ebdc:	4912b03a 	or	r9,r9,r4
 800ebe0:	003f4e06 	br	800e91c <__alt_data_end+0xff00e91c>
 800ebe4:	1c48b03a 	or	r4,r3,r17
 800ebe8:	20003c26 	beq	r4,zero,800ecdc <__subdf3+0x62c>
 800ebec:	0084303a 	nor	r2,zero,r2
 800ebf0:	1000381e 	bne	r2,zero,800ecd4 <__subdf3+0x624>
 800ebf4:	3463c83a 	sub	r17,r6,r17
 800ebf8:	28c5c83a 	sub	r2,r5,r3
 800ebfc:	344d803a 	cmpltu	r6,r6,r17
 800ec00:	1187c83a 	sub	r3,r2,r6
 800ec04:	4821883a 	mov	r16,r9
 800ec08:	3825883a 	mov	r18,r7
 800ec0c:	003f0606 	br	800e828 <__alt_data_end+0xff00e828>
 800ec10:	2023883a 	mov	r17,r4
 800ec14:	003f0906 	br	800e83c <__alt_data_end+0xff00e83c>
 800ec18:	0101ffc4 	movi	r4,2047
 800ec1c:	813f3a1e 	bne	r16,r4,800e908 <__alt_data_end+0xff00e908>
 800ec20:	003ec406 	br	800e734 <__alt_data_end+0xff00e734>
 800ec24:	0005883a 	mov	r2,zero
 800ec28:	003fb106 	br	800eaf0 <__alt_data_end+0xff00eaf0>
 800ec2c:	0005883a 	mov	r2,zero
 800ec30:	003fbc06 	br	800eb24 <__alt_data_end+0xff00eb24>
 800ec34:	1c44b03a 	or	r2,r3,r17
 800ec38:	80008e1e 	bne	r16,zero,800ee74 <__subdf3+0x7c4>
 800ec3c:	1000c826 	beq	r2,zero,800ef60 <__subdf3+0x8b0>
 800ec40:	2984b03a 	or	r2,r5,r6
 800ec44:	103ebb26 	beq	r2,zero,800e734 <__alt_data_end+0xff00e734>
 800ec48:	8989883a 	add	r4,r17,r6
 800ec4c:	1945883a 	add	r2,r3,r5
 800ec50:	2447803a 	cmpltu	r3,r4,r17
 800ec54:	1887883a 	add	r3,r3,r2
 800ec58:	1880202c 	andhi	r2,r3,128
 800ec5c:	2023883a 	mov	r17,r4
 800ec60:	103f1626 	beq	r2,zero,800e8bc <__alt_data_end+0xff00e8bc>
 800ec64:	00bfe034 	movhi	r2,65408
 800ec68:	10bfffc4 	addi	r2,r2,-1
 800ec6c:	5021883a 	mov	r16,r10
 800ec70:	1886703a 	and	r3,r3,r2
 800ec74:	003eaf06 	br	800e734 <__alt_data_end+0xff00e734>
 800ec78:	3825883a 	mov	r18,r7
 800ec7c:	003f0f06 	br	800e8bc <__alt_data_end+0xff00e8bc>
 800ec80:	1c44b03a 	or	r2,r3,r17
 800ec84:	8000251e 	bne	r16,zero,800ed1c <__subdf3+0x66c>
 800ec88:	1000661e 	bne	r2,zero,800ee24 <__subdf3+0x774>
 800ec8c:	2990b03a 	or	r8,r5,r6
 800ec90:	40009626 	beq	r8,zero,800eeec <__subdf3+0x83c>
 800ec94:	2807883a 	mov	r3,r5
 800ec98:	3023883a 	mov	r17,r6
 800ec9c:	3825883a 	mov	r18,r7
 800eca0:	003ea406 	br	800e734 <__alt_data_end+0xff00e734>
 800eca4:	127ff804 	addi	r9,r2,-32
 800eca8:	01000804 	movi	r4,32
 800ecac:	2a52d83a 	srl	r9,r5,r9
 800ecb0:	11008c26 	beq	r2,r4,800eee4 <__subdf3+0x834>
 800ecb4:	01001004 	movi	r4,64
 800ecb8:	2085c83a 	sub	r2,r4,r2
 800ecbc:	2884983a 	sll	r2,r5,r2
 800ecc0:	118cb03a 	or	r6,r2,r6
 800ecc4:	300cc03a 	cmpne	r6,r6,zero
 800ecc8:	4992b03a 	or	r9,r9,r6
 800eccc:	0005883a 	mov	r2,zero
 800ecd0:	003f1206 	br	800e91c <__alt_data_end+0xff00e91c>
 800ecd4:	0101ffc4 	movi	r4,2047
 800ecd8:	493f9c1e 	bne	r9,r4,800eb4c <__alt_data_end+0xff00eb4c>
 800ecdc:	2807883a 	mov	r3,r5
 800ece0:	3023883a 	mov	r17,r6
 800ece4:	4821883a 	mov	r16,r9
 800ece8:	3825883a 	mov	r18,r7
 800ecec:	003e9106 	br	800e734 <__alt_data_end+0xff00e734>
 800ecf0:	80001f1e 	bne	r16,zero,800ed70 <__subdf3+0x6c0>
 800ecf4:	1c48b03a 	or	r4,r3,r17
 800ecf8:	20005a26 	beq	r4,zero,800ee64 <__subdf3+0x7b4>
 800ecfc:	0084303a 	nor	r2,zero,r2
 800ed00:	1000561e 	bne	r2,zero,800ee5c <__subdf3+0x7ac>
 800ed04:	89a3883a 	add	r17,r17,r6
 800ed08:	1945883a 	add	r2,r3,r5
 800ed0c:	898d803a 	cmpltu	r6,r17,r6
 800ed10:	3087883a 	add	r3,r6,r2
 800ed14:	4821883a 	mov	r16,r9
 800ed18:	003f0506 	br	800e930 <__alt_data_end+0xff00e930>
 800ed1c:	10002b1e 	bne	r2,zero,800edcc <__subdf3+0x71c>
 800ed20:	2984b03a 	or	r2,r5,r6
 800ed24:	10008026 	beq	r2,zero,800ef28 <__subdf3+0x878>
 800ed28:	2807883a 	mov	r3,r5
 800ed2c:	3023883a 	mov	r17,r6
 800ed30:	3825883a 	mov	r18,r7
 800ed34:	0401ffc4 	movi	r16,2047
 800ed38:	003e7e06 	br	800e734 <__alt_data_end+0xff00e734>
 800ed3c:	3809883a 	mov	r4,r7
 800ed40:	0011883a 	mov	r8,zero
 800ed44:	0005883a 	mov	r2,zero
 800ed48:	003ee306 	br	800e8d8 <__alt_data_end+0xff00e8d8>
 800ed4c:	1c62b03a 	or	r17,r3,r17
 800ed50:	8822c03a 	cmpne	r17,r17,zero
 800ed54:	0005883a 	mov	r2,zero
 800ed58:	003f8906 	br	800eb80 <__alt_data_end+0xff00eb80>
 800ed5c:	3809883a 	mov	r4,r7
 800ed60:	4821883a 	mov	r16,r9
 800ed64:	0011883a 	mov	r8,zero
 800ed68:	0005883a 	mov	r2,zero
 800ed6c:	003eda06 	br	800e8d8 <__alt_data_end+0xff00e8d8>
 800ed70:	0101ffc4 	movi	r4,2047
 800ed74:	49003b26 	beq	r9,r4,800ee64 <__subdf3+0x7b4>
 800ed78:	0085c83a 	sub	r2,zero,r2
 800ed7c:	18c02034 	orhi	r3,r3,128
 800ed80:	01000e04 	movi	r4,56
 800ed84:	20806e16 	blt	r4,r2,800ef40 <__subdf3+0x890>
 800ed88:	010007c4 	movi	r4,31
 800ed8c:	20807716 	blt	r4,r2,800ef6c <__subdf3+0x8bc>
 800ed90:	01000804 	movi	r4,32
 800ed94:	2089c83a 	sub	r4,r4,r2
 800ed98:	1914983a 	sll	r10,r3,r4
 800ed9c:	8890d83a 	srl	r8,r17,r2
 800eda0:	8908983a 	sll	r4,r17,r4
 800eda4:	1884d83a 	srl	r2,r3,r2
 800eda8:	5222b03a 	or	r17,r10,r8
 800edac:	2006c03a 	cmpne	r3,r4,zero
 800edb0:	88e2b03a 	or	r17,r17,r3
 800edb4:	89a3883a 	add	r17,r17,r6
 800edb8:	1145883a 	add	r2,r2,r5
 800edbc:	898d803a 	cmpltu	r6,r17,r6
 800edc0:	3087883a 	add	r3,r6,r2
 800edc4:	4821883a 	mov	r16,r9
 800edc8:	003ed906 	br	800e930 <__alt_data_end+0xff00e930>
 800edcc:	2984b03a 	or	r2,r5,r6
 800edd0:	10004226 	beq	r2,zero,800eedc <__subdf3+0x82c>
 800edd4:	1808d0fa 	srli	r4,r3,3
 800edd8:	8822d0fa 	srli	r17,r17,3
 800eddc:	1806977a 	slli	r3,r3,29
 800ede0:	2080022c 	andhi	r2,r4,8
 800ede4:	1c62b03a 	or	r17,r3,r17
 800ede8:	10000826 	beq	r2,zero,800ee0c <__subdf3+0x75c>
 800edec:	2812d0fa 	srli	r9,r5,3
 800edf0:	4880022c 	andhi	r2,r9,8
 800edf4:	1000051e 	bne	r2,zero,800ee0c <__subdf3+0x75c>
 800edf8:	300cd0fa 	srli	r6,r6,3
 800edfc:	2804977a 	slli	r2,r5,29
 800ee00:	4809883a 	mov	r4,r9
 800ee04:	3825883a 	mov	r18,r7
 800ee08:	11a2b03a 	or	r17,r2,r6
 800ee0c:	8806d77a 	srli	r3,r17,29
 800ee10:	200890fa 	slli	r4,r4,3
 800ee14:	882290fa 	slli	r17,r17,3
 800ee18:	0401ffc4 	movi	r16,2047
 800ee1c:	1906b03a 	or	r3,r3,r4
 800ee20:	003e4406 	br	800e734 <__alt_data_end+0xff00e734>
 800ee24:	2984b03a 	or	r2,r5,r6
 800ee28:	103e4226 	beq	r2,zero,800e734 <__alt_data_end+0xff00e734>
 800ee2c:	8989c83a 	sub	r4,r17,r6
 800ee30:	8911803a 	cmpltu	r8,r17,r4
 800ee34:	1945c83a 	sub	r2,r3,r5
 800ee38:	1205c83a 	sub	r2,r2,r8
 800ee3c:	1200202c 	andhi	r8,r2,128
 800ee40:	403e9a26 	beq	r8,zero,800e8ac <__alt_data_end+0xff00e8ac>
 800ee44:	3463c83a 	sub	r17,r6,r17
 800ee48:	28c5c83a 	sub	r2,r5,r3
 800ee4c:	344d803a 	cmpltu	r6,r6,r17
 800ee50:	1187c83a 	sub	r3,r2,r6
 800ee54:	3825883a 	mov	r18,r7
 800ee58:	003e3606 	br	800e734 <__alt_data_end+0xff00e734>
 800ee5c:	0101ffc4 	movi	r4,2047
 800ee60:	493fc71e 	bne	r9,r4,800ed80 <__alt_data_end+0xff00ed80>
 800ee64:	2807883a 	mov	r3,r5
 800ee68:	3023883a 	mov	r17,r6
 800ee6c:	4821883a 	mov	r16,r9
 800ee70:	003e3006 	br	800e734 <__alt_data_end+0xff00e734>
 800ee74:	10003626 	beq	r2,zero,800ef50 <__subdf3+0x8a0>
 800ee78:	2984b03a 	or	r2,r5,r6
 800ee7c:	10001726 	beq	r2,zero,800eedc <__subdf3+0x82c>
 800ee80:	1808d0fa 	srli	r4,r3,3
 800ee84:	8822d0fa 	srli	r17,r17,3
 800ee88:	1806977a 	slli	r3,r3,29
 800ee8c:	2080022c 	andhi	r2,r4,8
 800ee90:	1c62b03a 	or	r17,r3,r17
 800ee94:	10000726 	beq	r2,zero,800eeb4 <__subdf3+0x804>
 800ee98:	2812d0fa 	srli	r9,r5,3
 800ee9c:	4880022c 	andhi	r2,r9,8
 800eea0:	1000041e 	bne	r2,zero,800eeb4 <__subdf3+0x804>
 800eea4:	300cd0fa 	srli	r6,r6,3
 800eea8:	2804977a 	slli	r2,r5,29
 800eeac:	4809883a 	mov	r4,r9
 800eeb0:	11a2b03a 	or	r17,r2,r6
 800eeb4:	8806d77a 	srli	r3,r17,29
 800eeb8:	200890fa 	slli	r4,r4,3
 800eebc:	882290fa 	slli	r17,r17,3
 800eec0:	3825883a 	mov	r18,r7
 800eec4:	1906b03a 	or	r3,r3,r4
 800eec8:	0401ffc4 	movi	r16,2047
 800eecc:	003e1906 	br	800e734 <__alt_data_end+0xff00e734>
 800eed0:	000b883a 	mov	r5,zero
 800eed4:	0005883a 	mov	r2,zero
 800eed8:	003e2e06 	br	800e794 <__alt_data_end+0xff00e794>
 800eedc:	0401ffc4 	movi	r16,2047
 800eee0:	003e1406 	br	800e734 <__alt_data_end+0xff00e734>
 800eee4:	0005883a 	mov	r2,zero
 800eee8:	003f7506 	br	800ecc0 <__alt_data_end+0xff00ecc0>
 800eeec:	0005883a 	mov	r2,zero
 800eef0:	0009883a 	mov	r4,zero
 800eef4:	003e7806 	br	800e8d8 <__alt_data_end+0xff00e8d8>
 800eef8:	123ff804 	addi	r8,r2,-32
 800eefc:	01000804 	movi	r4,32
 800ef00:	1a10d83a 	srl	r8,r3,r8
 800ef04:	11002526 	beq	r2,r4,800ef9c <__subdf3+0x8ec>
 800ef08:	01001004 	movi	r4,64
 800ef0c:	2085c83a 	sub	r2,r4,r2
 800ef10:	1884983a 	sll	r2,r3,r2
 800ef14:	1444b03a 	or	r2,r2,r17
 800ef18:	1004c03a 	cmpne	r2,r2,zero
 800ef1c:	40a2b03a 	or	r17,r8,r2
 800ef20:	0005883a 	mov	r2,zero
 800ef24:	003f1606 	br	800eb80 <__alt_data_end+0xff00eb80>
 800ef28:	02000434 	movhi	r8,16
 800ef2c:	0009883a 	mov	r4,zero
 800ef30:	423fffc4 	addi	r8,r8,-1
 800ef34:	00bfffc4 	movi	r2,-1
 800ef38:	0401ffc4 	movi	r16,2047
 800ef3c:	003e6606 	br	800e8d8 <__alt_data_end+0xff00e8d8>
 800ef40:	1c62b03a 	or	r17,r3,r17
 800ef44:	8822c03a 	cmpne	r17,r17,zero
 800ef48:	0005883a 	mov	r2,zero
 800ef4c:	003f9906 	br	800edb4 <__alt_data_end+0xff00edb4>
 800ef50:	2807883a 	mov	r3,r5
 800ef54:	3023883a 	mov	r17,r6
 800ef58:	0401ffc4 	movi	r16,2047
 800ef5c:	003df506 	br	800e734 <__alt_data_end+0xff00e734>
 800ef60:	2807883a 	mov	r3,r5
 800ef64:	3023883a 	mov	r17,r6
 800ef68:	003df206 	br	800e734 <__alt_data_end+0xff00e734>
 800ef6c:	123ff804 	addi	r8,r2,-32
 800ef70:	01000804 	movi	r4,32
 800ef74:	1a10d83a 	srl	r8,r3,r8
 800ef78:	11000a26 	beq	r2,r4,800efa4 <__subdf3+0x8f4>
 800ef7c:	01001004 	movi	r4,64
 800ef80:	2085c83a 	sub	r2,r4,r2
 800ef84:	1884983a 	sll	r2,r3,r2
 800ef88:	1444b03a 	or	r2,r2,r17
 800ef8c:	1004c03a 	cmpne	r2,r2,zero
 800ef90:	40a2b03a 	or	r17,r8,r2
 800ef94:	0005883a 	mov	r2,zero
 800ef98:	003f8606 	br	800edb4 <__alt_data_end+0xff00edb4>
 800ef9c:	0005883a 	mov	r2,zero
 800efa0:	003fdc06 	br	800ef14 <__alt_data_end+0xff00ef14>
 800efa4:	0005883a 	mov	r2,zero
 800efa8:	003ff706 	br	800ef88 <__alt_data_end+0xff00ef88>

0800efac <__fixdfsi>:
 800efac:	280cd53a 	srli	r6,r5,20
 800efb0:	00c00434 	movhi	r3,16
 800efb4:	18ffffc4 	addi	r3,r3,-1
 800efb8:	3181ffcc 	andi	r6,r6,2047
 800efbc:	01c0ff84 	movi	r7,1022
 800efc0:	28c6703a 	and	r3,r5,r3
 800efc4:	280ad7fa 	srli	r5,r5,31
 800efc8:	3980120e 	bge	r7,r6,800f014 <__fixdfsi+0x68>
 800efcc:	00810744 	movi	r2,1053
 800efd0:	11800c16 	blt	r2,r6,800f004 <__fixdfsi+0x58>
 800efd4:	00810cc4 	movi	r2,1075
 800efd8:	1185c83a 	sub	r2,r2,r6
 800efdc:	01c007c4 	movi	r7,31
 800efe0:	18c00434 	orhi	r3,r3,16
 800efe4:	38800d16 	blt	r7,r2,800f01c <__fixdfsi+0x70>
 800efe8:	31befb44 	addi	r6,r6,-1043
 800efec:	2084d83a 	srl	r2,r4,r2
 800eff0:	1986983a 	sll	r3,r3,r6
 800eff4:	1884b03a 	or	r2,r3,r2
 800eff8:	28000726 	beq	r5,zero,800f018 <__fixdfsi+0x6c>
 800effc:	0085c83a 	sub	r2,zero,r2
 800f000:	f800283a 	ret
 800f004:	00a00034 	movhi	r2,32768
 800f008:	10bfffc4 	addi	r2,r2,-1
 800f00c:	2885883a 	add	r2,r5,r2
 800f010:	f800283a 	ret
 800f014:	0005883a 	mov	r2,zero
 800f018:	f800283a 	ret
 800f01c:	008104c4 	movi	r2,1043
 800f020:	1185c83a 	sub	r2,r2,r6
 800f024:	1884d83a 	srl	r2,r3,r2
 800f028:	003ff306 	br	800eff8 <__alt_data_end+0xff00eff8>

0800f02c <__floatunsidf>:
 800f02c:	defffe04 	addi	sp,sp,-8
 800f030:	dc000015 	stw	r16,0(sp)
 800f034:	dfc00115 	stw	ra,4(sp)
 800f038:	2021883a 	mov	r16,r4
 800f03c:	20002226 	beq	r4,zero,800f0c8 <__floatunsidf+0x9c>
 800f040:	80030a80 	call	80030a8 <__clzsi2>
 800f044:	01010784 	movi	r4,1054
 800f048:	2089c83a 	sub	r4,r4,r2
 800f04c:	01810cc4 	movi	r6,1075
 800f050:	310dc83a 	sub	r6,r6,r4
 800f054:	00c007c4 	movi	r3,31
 800f058:	1980120e 	bge	r3,r6,800f0a4 <__floatunsidf+0x78>
 800f05c:	00c104c4 	movi	r3,1043
 800f060:	1907c83a 	sub	r3,r3,r4
 800f064:	80ca983a 	sll	r5,r16,r3
 800f068:	00800434 	movhi	r2,16
 800f06c:	10bfffc4 	addi	r2,r2,-1
 800f070:	2101ffcc 	andi	r4,r4,2047
 800f074:	0021883a 	mov	r16,zero
 800f078:	288a703a 	and	r5,r5,r2
 800f07c:	2008953a 	slli	r4,r4,20
 800f080:	00c00434 	movhi	r3,16
 800f084:	18ffffc4 	addi	r3,r3,-1
 800f088:	28c6703a 	and	r3,r5,r3
 800f08c:	8005883a 	mov	r2,r16
 800f090:	1906b03a 	or	r3,r3,r4
 800f094:	dfc00117 	ldw	ra,4(sp)
 800f098:	dc000017 	ldw	r16,0(sp)
 800f09c:	dec00204 	addi	sp,sp,8
 800f0a0:	f800283a 	ret
 800f0a4:	00c002c4 	movi	r3,11
 800f0a8:	188bc83a 	sub	r5,r3,r2
 800f0ac:	814ad83a 	srl	r5,r16,r5
 800f0b0:	00c00434 	movhi	r3,16
 800f0b4:	18ffffc4 	addi	r3,r3,-1
 800f0b8:	81a0983a 	sll	r16,r16,r6
 800f0bc:	2101ffcc 	andi	r4,r4,2047
 800f0c0:	28ca703a 	and	r5,r5,r3
 800f0c4:	003fed06 	br	800f07c <__alt_data_end+0xff00f07c>
 800f0c8:	0009883a 	mov	r4,zero
 800f0cc:	000b883a 	mov	r5,zero
 800f0d0:	003fea06 	br	800f07c <__alt_data_end+0xff00f07c>

0800f0d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f0d4:	defffe04 	addi	sp,sp,-8
 800f0d8:	dfc00115 	stw	ra,4(sp)
 800f0dc:	df000015 	stw	fp,0(sp)
 800f0e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f0e4:	d0a00e17 	ldw	r2,-32712(gp)
 800f0e8:	10000326 	beq	r2,zero,800f0f8 <alt_get_errno+0x24>
 800f0ec:	d0a00e17 	ldw	r2,-32712(gp)
 800f0f0:	103ee83a 	callr	r2
 800f0f4:	00000106 	br	800f0fc <alt_get_errno+0x28>
 800f0f8:	d0a6e704 	addi	r2,gp,-25700
}
 800f0fc:	e037883a 	mov	sp,fp
 800f100:	dfc00117 	ldw	ra,4(sp)
 800f104:	df000017 	ldw	fp,0(sp)
 800f108:	dec00204 	addi	sp,sp,8
 800f10c:	f800283a 	ret

0800f110 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800f110:	defffb04 	addi	sp,sp,-20
 800f114:	dfc00415 	stw	ra,16(sp)
 800f118:	df000315 	stw	fp,12(sp)
 800f11c:	df000304 	addi	fp,sp,12
 800f120:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800f124:	e0bfff17 	ldw	r2,-4(fp)
 800f128:	10000616 	blt	r2,zero,800f144 <close+0x34>
 800f12c:	e0bfff17 	ldw	r2,-4(fp)
 800f130:	10c00324 	muli	r3,r2,12
 800f134:	00820074 	movhi	r2,2049
 800f138:	108a2e04 	addi	r2,r2,10424
 800f13c:	1885883a 	add	r2,r3,r2
 800f140:	00000106 	br	800f148 <close+0x38>
 800f144:	0005883a 	mov	r2,zero
 800f148:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800f14c:	e0bffd17 	ldw	r2,-12(fp)
 800f150:	10001926 	beq	r2,zero,800f1b8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800f154:	e0bffd17 	ldw	r2,-12(fp)
 800f158:	10800017 	ldw	r2,0(r2)
 800f15c:	10800417 	ldw	r2,16(r2)
 800f160:	10000626 	beq	r2,zero,800f17c <close+0x6c>
 800f164:	e0bffd17 	ldw	r2,-12(fp)
 800f168:	10800017 	ldw	r2,0(r2)
 800f16c:	10800417 	ldw	r2,16(r2)
 800f170:	e13ffd17 	ldw	r4,-12(fp)
 800f174:	103ee83a 	callr	r2
 800f178:	00000106 	br	800f180 <close+0x70>
 800f17c:	0005883a 	mov	r2,zero
 800f180:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800f184:	e13fff17 	ldw	r4,-4(fp)
 800f188:	800fbb80 	call	800fbb8 <alt_release_fd>
    if (rval < 0)
 800f18c:	e0bffe17 	ldw	r2,-8(fp)
 800f190:	1000070e 	bge	r2,zero,800f1b0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800f194:	800f0d40 	call	800f0d4 <alt_get_errno>
 800f198:	1007883a 	mov	r3,r2
 800f19c:	e0bffe17 	ldw	r2,-8(fp)
 800f1a0:	0085c83a 	sub	r2,zero,r2
 800f1a4:	18800015 	stw	r2,0(r3)
      return -1;
 800f1a8:	00bfffc4 	movi	r2,-1
 800f1ac:	00000706 	br	800f1cc <close+0xbc>
    }
    return 0;
 800f1b0:	0005883a 	mov	r2,zero
 800f1b4:	00000506 	br	800f1cc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f1b8:	800f0d40 	call	800f0d4 <alt_get_errno>
 800f1bc:	1007883a 	mov	r3,r2
 800f1c0:	00801444 	movi	r2,81
 800f1c4:	18800015 	stw	r2,0(r3)
    return -1;
 800f1c8:	00bfffc4 	movi	r2,-1
  }
}
 800f1cc:	e037883a 	mov	sp,fp
 800f1d0:	dfc00117 	ldw	ra,4(sp)
 800f1d4:	df000017 	ldw	fp,0(sp)
 800f1d8:	dec00204 	addi	sp,sp,8
 800f1dc:	f800283a 	ret

0800f1e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800f1e0:	defffc04 	addi	sp,sp,-16
 800f1e4:	df000315 	stw	fp,12(sp)
 800f1e8:	df000304 	addi	fp,sp,12
 800f1ec:	e13ffd15 	stw	r4,-12(fp)
 800f1f0:	e17ffe15 	stw	r5,-8(fp)
 800f1f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800f1f8:	e0bfff17 	ldw	r2,-4(fp)
}
 800f1fc:	e037883a 	mov	sp,fp
 800f200:	df000017 	ldw	fp,0(sp)
 800f204:	dec00104 	addi	sp,sp,4
 800f208:	f800283a 	ret

0800f20c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f20c:	defffe04 	addi	sp,sp,-8
 800f210:	dfc00115 	stw	ra,4(sp)
 800f214:	df000015 	stw	fp,0(sp)
 800f218:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f21c:	d0a00e17 	ldw	r2,-32712(gp)
 800f220:	10000326 	beq	r2,zero,800f230 <alt_get_errno+0x24>
 800f224:	d0a00e17 	ldw	r2,-32712(gp)
 800f228:	103ee83a 	callr	r2
 800f22c:	00000106 	br	800f234 <alt_get_errno+0x28>
 800f230:	d0a6e704 	addi	r2,gp,-25700
}
 800f234:	e037883a 	mov	sp,fp
 800f238:	dfc00117 	ldw	ra,4(sp)
 800f23c:	df000017 	ldw	fp,0(sp)
 800f240:	dec00204 	addi	sp,sp,8
 800f244:	f800283a 	ret

0800f248 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800f248:	defffb04 	addi	sp,sp,-20
 800f24c:	dfc00415 	stw	ra,16(sp)
 800f250:	df000315 	stw	fp,12(sp)
 800f254:	df000304 	addi	fp,sp,12
 800f258:	e13ffe15 	stw	r4,-8(fp)
 800f25c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f260:	e0bffe17 	ldw	r2,-8(fp)
 800f264:	10000616 	blt	r2,zero,800f280 <fstat+0x38>
 800f268:	e0bffe17 	ldw	r2,-8(fp)
 800f26c:	10c00324 	muli	r3,r2,12
 800f270:	00820074 	movhi	r2,2049
 800f274:	108a2e04 	addi	r2,r2,10424
 800f278:	1885883a 	add	r2,r3,r2
 800f27c:	00000106 	br	800f284 <fstat+0x3c>
 800f280:	0005883a 	mov	r2,zero
 800f284:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800f288:	e0bffd17 	ldw	r2,-12(fp)
 800f28c:	10001026 	beq	r2,zero,800f2d0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800f290:	e0bffd17 	ldw	r2,-12(fp)
 800f294:	10800017 	ldw	r2,0(r2)
 800f298:	10800817 	ldw	r2,32(r2)
 800f29c:	10000726 	beq	r2,zero,800f2bc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800f2a0:	e0bffd17 	ldw	r2,-12(fp)
 800f2a4:	10800017 	ldw	r2,0(r2)
 800f2a8:	10800817 	ldw	r2,32(r2)
 800f2ac:	e17fff17 	ldw	r5,-4(fp)
 800f2b0:	e13ffd17 	ldw	r4,-12(fp)
 800f2b4:	103ee83a 	callr	r2
 800f2b8:	00000a06 	br	800f2e4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800f2bc:	e0bfff17 	ldw	r2,-4(fp)
 800f2c0:	00c80004 	movi	r3,8192
 800f2c4:	10c00115 	stw	r3,4(r2)
      return 0;
 800f2c8:	0005883a 	mov	r2,zero
 800f2cc:	00000506 	br	800f2e4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f2d0:	800f20c0 	call	800f20c <alt_get_errno>
 800f2d4:	1007883a 	mov	r3,r2
 800f2d8:	00801444 	movi	r2,81
 800f2dc:	18800015 	stw	r2,0(r3)
    return -1;
 800f2e0:	00bfffc4 	movi	r2,-1
  }
}
 800f2e4:	e037883a 	mov	sp,fp
 800f2e8:	dfc00117 	ldw	ra,4(sp)
 800f2ec:	df000017 	ldw	fp,0(sp)
 800f2f0:	dec00204 	addi	sp,sp,8
 800f2f4:	f800283a 	ret

0800f2f8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 800f2f8:	defff004 	addi	sp,sp,-64
 800f2fc:	df000f15 	stw	fp,60(sp)
 800f300:	df000f04 	addi	fp,sp,60
 800f304:	e13ffd15 	stw	r4,-12(fp)
 800f308:	e17ffe15 	stw	r5,-8(fp)
 800f30c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 800f310:	00bffa84 	movi	r2,-22
 800f314:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800f318:	e0bffd17 	ldw	r2,-12(fp)
 800f31c:	10800828 	cmpgeui	r2,r2,32
 800f320:	1000501e 	bne	r2,zero,800f464 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f324:	0005303a 	rdctl	r2,status
 800f328:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f32c:	e0fff617 	ldw	r3,-40(fp)
 800f330:	00bfff84 	movi	r2,-2
 800f334:	1884703a 	and	r2,r3,r2
 800f338:	1001703a 	wrctl	status,r2
  
  return context;
 800f33c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 800f340:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 800f344:	00820074 	movhi	r2,2049
 800f348:	1095a904 	addi	r2,r2,22180
 800f34c:	e0fffd17 	ldw	r3,-12(fp)
 800f350:	180690fa 	slli	r3,r3,3
 800f354:	10c5883a 	add	r2,r2,r3
 800f358:	e0ffff17 	ldw	r3,-4(fp)
 800f35c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 800f360:	00820074 	movhi	r2,2049
 800f364:	1095a904 	addi	r2,r2,22180
 800f368:	e0fffd17 	ldw	r3,-12(fp)
 800f36c:	180690fa 	slli	r3,r3,3
 800f370:	10c5883a 	add	r2,r2,r3
 800f374:	10800104 	addi	r2,r2,4
 800f378:	e0fffe17 	ldw	r3,-8(fp)
 800f37c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 800f380:	e0bfff17 	ldw	r2,-4(fp)
 800f384:	10001926 	beq	r2,zero,800f3ec <alt_irq_register+0xf4>
 800f388:	e0bffd17 	ldw	r2,-12(fp)
 800f38c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f390:	0005303a 	rdctl	r2,status
 800f394:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f398:	e0fff717 	ldw	r3,-36(fp)
 800f39c:	00bfff84 	movi	r2,-2
 800f3a0:	1884703a 	and	r2,r3,r2
 800f3a4:	1001703a 	wrctl	status,r2
  
  return context;
 800f3a8:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800f3ac:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 800f3b0:	00c00044 	movi	r3,1
 800f3b4:	e0bff217 	ldw	r2,-56(fp)
 800f3b8:	1884983a 	sll	r2,r3,r2
 800f3bc:	1007883a 	mov	r3,r2
 800f3c0:	d0a6e817 	ldw	r2,-25696(gp)
 800f3c4:	1884b03a 	or	r2,r3,r2
 800f3c8:	d0a6e815 	stw	r2,-25696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800f3cc:	d0a6e817 	ldw	r2,-25696(gp)
 800f3d0:	100170fa 	wrctl	ienable,r2
 800f3d4:	e0bff817 	ldw	r2,-32(fp)
 800f3d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f3dc:	e0bff917 	ldw	r2,-28(fp)
 800f3e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800f3e4:	0005883a 	mov	r2,zero
 800f3e8:	00001906 	br	800f450 <alt_irq_register+0x158>
 800f3ec:	e0bffd17 	ldw	r2,-12(fp)
 800f3f0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f3f4:	0005303a 	rdctl	r2,status
 800f3f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f3fc:	e0fffa17 	ldw	r3,-24(fp)
 800f400:	00bfff84 	movi	r2,-2
 800f404:	1884703a 	and	r2,r3,r2
 800f408:	1001703a 	wrctl	status,r2
  
  return context;
 800f40c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800f410:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 800f414:	00c00044 	movi	r3,1
 800f418:	e0bff417 	ldw	r2,-48(fp)
 800f41c:	1884983a 	sll	r2,r3,r2
 800f420:	0084303a 	nor	r2,zero,r2
 800f424:	1007883a 	mov	r3,r2
 800f428:	d0a6e817 	ldw	r2,-25696(gp)
 800f42c:	1884703a 	and	r2,r3,r2
 800f430:	d0a6e815 	stw	r2,-25696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800f434:	d0a6e817 	ldw	r2,-25696(gp)
 800f438:	100170fa 	wrctl	ienable,r2
 800f43c:	e0bffb17 	ldw	r2,-20(fp)
 800f440:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f444:	e0bffc17 	ldw	r2,-16(fp)
 800f448:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800f44c:	0005883a 	mov	r2,zero
 800f450:	e0bff115 	stw	r2,-60(fp)
 800f454:	e0bff317 	ldw	r2,-52(fp)
 800f458:	e0bff515 	stw	r2,-44(fp)
 800f45c:	e0bff517 	ldw	r2,-44(fp)
 800f460:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 800f464:	e0bff117 	ldw	r2,-60(fp)
}
 800f468:	e037883a 	mov	sp,fp
 800f46c:	df000017 	ldw	fp,0(sp)
 800f470:	dec00104 	addi	sp,sp,4
 800f474:	f800283a 	ret

0800f478 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f478:	defffe04 	addi	sp,sp,-8
 800f47c:	dfc00115 	stw	ra,4(sp)
 800f480:	df000015 	stw	fp,0(sp)
 800f484:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f488:	d0a00e17 	ldw	r2,-32712(gp)
 800f48c:	10000326 	beq	r2,zero,800f49c <alt_get_errno+0x24>
 800f490:	d0a00e17 	ldw	r2,-32712(gp)
 800f494:	103ee83a 	callr	r2
 800f498:	00000106 	br	800f4a0 <alt_get_errno+0x28>
 800f49c:	d0a6e704 	addi	r2,gp,-25700
}
 800f4a0:	e037883a 	mov	sp,fp
 800f4a4:	dfc00117 	ldw	ra,4(sp)
 800f4a8:	df000017 	ldw	fp,0(sp)
 800f4ac:	dec00204 	addi	sp,sp,8
 800f4b0:	f800283a 	ret

0800f4b4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800f4b4:	deffed04 	addi	sp,sp,-76
 800f4b8:	dfc01215 	stw	ra,72(sp)
 800f4bc:	df001115 	stw	fp,68(sp)
 800f4c0:	df001104 	addi	fp,sp,68
 800f4c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f4c8:	e0bfff17 	ldw	r2,-4(fp)
 800f4cc:	10000616 	blt	r2,zero,800f4e8 <isatty+0x34>
 800f4d0:	e0bfff17 	ldw	r2,-4(fp)
 800f4d4:	10c00324 	muli	r3,r2,12
 800f4d8:	00820074 	movhi	r2,2049
 800f4dc:	108a2e04 	addi	r2,r2,10424
 800f4e0:	1885883a 	add	r2,r3,r2
 800f4e4:	00000106 	br	800f4ec <isatty+0x38>
 800f4e8:	0005883a 	mov	r2,zero
 800f4ec:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800f4f0:	e0bfef17 	ldw	r2,-68(fp)
 800f4f4:	10000e26 	beq	r2,zero,800f530 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800f4f8:	e0bfef17 	ldw	r2,-68(fp)
 800f4fc:	10800017 	ldw	r2,0(r2)
 800f500:	10800817 	ldw	r2,32(r2)
 800f504:	1000021e 	bne	r2,zero,800f510 <isatty+0x5c>
    {
      return 1;
 800f508:	00800044 	movi	r2,1
 800f50c:	00000d06 	br	800f544 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800f510:	e0bff004 	addi	r2,fp,-64
 800f514:	100b883a 	mov	r5,r2
 800f518:	e13fff17 	ldw	r4,-4(fp)
 800f51c:	800f2480 	call	800f248 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800f520:	e0bff117 	ldw	r2,-60(fp)
 800f524:	10880020 	cmpeqi	r2,r2,8192
 800f528:	10803fcc 	andi	r2,r2,255
 800f52c:	00000506 	br	800f544 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f530:	800f4780 	call	800f478 <alt_get_errno>
 800f534:	1007883a 	mov	r3,r2
 800f538:	00801444 	movi	r2,81
 800f53c:	18800015 	stw	r2,0(r3)
    return 0;
 800f540:	0005883a 	mov	r2,zero
  }
}
 800f544:	e037883a 	mov	sp,fp
 800f548:	dfc00117 	ldw	ra,4(sp)
 800f54c:	df000017 	ldw	fp,0(sp)
 800f550:	dec00204 	addi	sp,sp,8
 800f554:	f800283a 	ret

0800f558 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800f558:	defffc04 	addi	sp,sp,-16
 800f55c:	df000315 	stw	fp,12(sp)
 800f560:	df000304 	addi	fp,sp,12
 800f564:	e13ffd15 	stw	r4,-12(fp)
 800f568:	e17ffe15 	stw	r5,-8(fp)
 800f56c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800f570:	e0fffe17 	ldw	r3,-8(fp)
 800f574:	e0bffd17 	ldw	r2,-12(fp)
 800f578:	18800c26 	beq	r3,r2,800f5ac <alt_load_section+0x54>
  {
    while( to != end )
 800f57c:	00000806 	br	800f5a0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800f580:	e0bffe17 	ldw	r2,-8(fp)
 800f584:	10c00104 	addi	r3,r2,4
 800f588:	e0fffe15 	stw	r3,-8(fp)
 800f58c:	e0fffd17 	ldw	r3,-12(fp)
 800f590:	19000104 	addi	r4,r3,4
 800f594:	e13ffd15 	stw	r4,-12(fp)
 800f598:	18c00017 	ldw	r3,0(r3)
 800f59c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800f5a0:	e0fffe17 	ldw	r3,-8(fp)
 800f5a4:	e0bfff17 	ldw	r2,-4(fp)
 800f5a8:	18bff51e 	bne	r3,r2,800f580 <__alt_data_end+0xff00f580>
    {
      *to++ = *from++;
    }
  }
}
 800f5ac:	0001883a 	nop
 800f5b0:	e037883a 	mov	sp,fp
 800f5b4:	df000017 	ldw	fp,0(sp)
 800f5b8:	dec00104 	addi	sp,sp,4
 800f5bc:	f800283a 	ret

0800f5c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800f5c0:	defffe04 	addi	sp,sp,-8
 800f5c4:	dfc00115 	stw	ra,4(sp)
 800f5c8:	df000015 	stw	fp,0(sp)
 800f5cc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800f5d0:	01820074 	movhi	r6,2049
 800f5d4:	318eb904 	addi	r6,r6,15076
 800f5d8:	01420074 	movhi	r5,2049
 800f5dc:	2947fb04 	addi	r5,r5,8172
 800f5e0:	01020074 	movhi	r4,2049
 800f5e4:	210eb904 	addi	r4,r4,15076
 800f5e8:	800f5580 	call	800f558 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800f5ec:	01820034 	movhi	r6,2048
 800f5f0:	31809104 	addi	r6,r6,580
 800f5f4:	01420034 	movhi	r5,2048
 800f5f8:	29400804 	addi	r5,r5,32
 800f5fc:	01020034 	movhi	r4,2048
 800f600:	21000804 	addi	r4,r4,32
 800f604:	800f5580 	call	800f558 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800f608:	01820074 	movhi	r6,2049
 800f60c:	3187fb04 	addi	r6,r6,8172
 800f610:	01420074 	movhi	r5,2049
 800f614:	29471a04 	addi	r5,r5,7272
 800f618:	01020074 	movhi	r4,2049
 800f61c:	21071a04 	addi	r4,r4,7272
 800f620:	800f5580 	call	800f558 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800f624:	8010b540 	call	8010b54 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800f628:	8010d3c0 	call	8010d3c <alt_icache_flush_all>
}
 800f62c:	0001883a 	nop
 800f630:	e037883a 	mov	sp,fp
 800f634:	dfc00117 	ldw	ra,4(sp)
 800f638:	df000017 	ldw	fp,0(sp)
 800f63c:	dec00204 	addi	sp,sp,8
 800f640:	f800283a 	ret

0800f644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f644:	defffe04 	addi	sp,sp,-8
 800f648:	dfc00115 	stw	ra,4(sp)
 800f64c:	df000015 	stw	fp,0(sp)
 800f650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f654:	d0a00e17 	ldw	r2,-32712(gp)
 800f658:	10000326 	beq	r2,zero,800f668 <alt_get_errno+0x24>
 800f65c:	d0a00e17 	ldw	r2,-32712(gp)
 800f660:	103ee83a 	callr	r2
 800f664:	00000106 	br	800f66c <alt_get_errno+0x28>
 800f668:	d0a6e704 	addi	r2,gp,-25700
}
 800f66c:	e037883a 	mov	sp,fp
 800f670:	dfc00117 	ldw	ra,4(sp)
 800f674:	df000017 	ldw	fp,0(sp)
 800f678:	dec00204 	addi	sp,sp,8
 800f67c:	f800283a 	ret

0800f680 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800f680:	defff904 	addi	sp,sp,-28
 800f684:	dfc00615 	stw	ra,24(sp)
 800f688:	df000515 	stw	fp,20(sp)
 800f68c:	df000504 	addi	fp,sp,20
 800f690:	e13ffd15 	stw	r4,-12(fp)
 800f694:	e17ffe15 	stw	r5,-8(fp)
 800f698:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800f69c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f6a0:	e0bffd17 	ldw	r2,-12(fp)
 800f6a4:	10000616 	blt	r2,zero,800f6c0 <lseek+0x40>
 800f6a8:	e0bffd17 	ldw	r2,-12(fp)
 800f6ac:	10c00324 	muli	r3,r2,12
 800f6b0:	00820074 	movhi	r2,2049
 800f6b4:	108a2e04 	addi	r2,r2,10424
 800f6b8:	1885883a 	add	r2,r3,r2
 800f6bc:	00000106 	br	800f6c4 <lseek+0x44>
 800f6c0:	0005883a 	mov	r2,zero
 800f6c4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800f6c8:	e0bffc17 	ldw	r2,-16(fp)
 800f6cc:	10001026 	beq	r2,zero,800f710 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800f6d0:	e0bffc17 	ldw	r2,-16(fp)
 800f6d4:	10800017 	ldw	r2,0(r2)
 800f6d8:	10800717 	ldw	r2,28(r2)
 800f6dc:	10000926 	beq	r2,zero,800f704 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800f6e0:	e0bffc17 	ldw	r2,-16(fp)
 800f6e4:	10800017 	ldw	r2,0(r2)
 800f6e8:	10800717 	ldw	r2,28(r2)
 800f6ec:	e1bfff17 	ldw	r6,-4(fp)
 800f6f0:	e17ffe17 	ldw	r5,-8(fp)
 800f6f4:	e13ffc17 	ldw	r4,-16(fp)
 800f6f8:	103ee83a 	callr	r2
 800f6fc:	e0bffb15 	stw	r2,-20(fp)
 800f700:	00000506 	br	800f718 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800f704:	00bfde84 	movi	r2,-134
 800f708:	e0bffb15 	stw	r2,-20(fp)
 800f70c:	00000206 	br	800f718 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800f710:	00bfebc4 	movi	r2,-81
 800f714:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800f718:	e0bffb17 	ldw	r2,-20(fp)
 800f71c:	1000070e 	bge	r2,zero,800f73c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800f720:	800f6440 	call	800f644 <alt_get_errno>
 800f724:	1007883a 	mov	r3,r2
 800f728:	e0bffb17 	ldw	r2,-20(fp)
 800f72c:	0085c83a 	sub	r2,zero,r2
 800f730:	18800015 	stw	r2,0(r3)
    rc = -1;
 800f734:	00bfffc4 	movi	r2,-1
 800f738:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800f73c:	e0bffb17 	ldw	r2,-20(fp)
}
 800f740:	e037883a 	mov	sp,fp
 800f744:	dfc00117 	ldw	ra,4(sp)
 800f748:	df000017 	ldw	fp,0(sp)
 800f74c:	dec00204 	addi	sp,sp,8
 800f750:	f800283a 	ret

0800f754 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800f754:	defffd04 	addi	sp,sp,-12
 800f758:	dfc00215 	stw	ra,8(sp)
 800f75c:	df000115 	stw	fp,4(sp)
 800f760:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800f764:	0009883a 	mov	r4,zero
 800f768:	800fe340 	call	800fe34 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800f76c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800f770:	800fe6c0 	call	800fe6c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800f774:	01820074 	movhi	r6,2049
 800f778:	3187f104 	addi	r6,r6,8132
 800f77c:	01420074 	movhi	r5,2049
 800f780:	2947f104 	addi	r5,r5,8132
 800f784:	01020074 	movhi	r4,2049
 800f788:	2107f104 	addi	r4,r4,8132
 800f78c:	80110d40 	call	80110d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800f790:	8010c7c0 	call	8010c7c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800f794:	01020074 	movhi	r4,2049
 800f798:	21033704 	addi	r4,r4,3292
 800f79c:	80118d40 	call	80118d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800f7a0:	d0a6e917 	ldw	r2,-25692(gp)
 800f7a4:	d0e6ea17 	ldw	r3,-25688(gp)
 800f7a8:	d126eb17 	ldw	r4,-25684(gp)
 800f7ac:	200d883a 	mov	r6,r4
 800f7b0:	180b883a 	mov	r5,r3
 800f7b4:	1009883a 	mov	r4,r2
 800f7b8:	8001a200 	call	8001a20 <main>
 800f7bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800f7c0:	01000044 	movi	r4,1
 800f7c4:	800f1100 	call	800f110 <close>
  exit (result);
 800f7c8:	e13fff17 	ldw	r4,-4(fp)
 800f7cc:	80118e80 	call	80118e8 <exit>

0800f7d0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800f7d0:	defffe04 	addi	sp,sp,-8
 800f7d4:	df000115 	stw	fp,4(sp)
 800f7d8:	df000104 	addi	fp,sp,4
 800f7dc:	e13fff15 	stw	r4,-4(fp)
}
 800f7e0:	0001883a 	nop
 800f7e4:	e037883a 	mov	sp,fp
 800f7e8:	df000017 	ldw	fp,0(sp)
 800f7ec:	dec00104 	addi	sp,sp,4
 800f7f0:	f800283a 	ret

0800f7f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800f7f4:	defffe04 	addi	sp,sp,-8
 800f7f8:	df000115 	stw	fp,4(sp)
 800f7fc:	df000104 	addi	fp,sp,4
 800f800:	e13fff15 	stw	r4,-4(fp)
}
 800f804:	0001883a 	nop
 800f808:	e037883a 	mov	sp,fp
 800f80c:	df000017 	ldw	fp,0(sp)
 800f810:	dec00104 	addi	sp,sp,4
 800f814:	f800283a 	ret

0800f818 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 800f818:	defff204 	addi	sp,sp,-56
 800f81c:	dfc00a15 	stw	ra,40(sp)
 800f820:	df000915 	stw	fp,36(sp)
 800f824:	df000904 	addi	fp,sp,36
 800f828:	e13fff15 	stw	r4,-4(fp)
 800f82c:	e1400215 	stw	r5,8(fp)
 800f830:	e1800315 	stw	r6,12(fp)
 800f834:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 800f838:	e0800204 	addi	r2,fp,8
 800f83c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 800f840:	e0bfff17 	ldw	r2,-4(fp)
 800f844:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 800f848:	00006f06 	br	800fa08 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 800f84c:	e0bff807 	ldb	r2,-32(fp)
 800f850:	10800960 	cmpeqi	r2,r2,37
 800f854:	1000041e 	bne	r2,zero,800f868 <alt_printf+0x50>
        {
            alt_putchar(c);
 800f858:	e0bff807 	ldb	r2,-32(fp)
 800f85c:	1009883a 	mov	r4,r2
 800f860:	800fa440 	call	800fa44 <alt_putchar>
 800f864:	00006806 	br	800fa08 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 800f868:	e0bff717 	ldw	r2,-36(fp)
 800f86c:	10c00044 	addi	r3,r2,1
 800f870:	e0fff715 	stw	r3,-36(fp)
 800f874:	10800003 	ldbu	r2,0(r2)
 800f878:	e0bff805 	stb	r2,-32(fp)
 800f87c:	e0bff807 	ldb	r2,-32(fp)
 800f880:	10006926 	beq	r2,zero,800fa28 <alt_printf+0x210>
            {
                if (c == '%')
 800f884:	e0bff807 	ldb	r2,-32(fp)
 800f888:	10800958 	cmpnei	r2,r2,37
 800f88c:	1000041e 	bne	r2,zero,800f8a0 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 800f890:	e0bff807 	ldb	r2,-32(fp)
 800f894:	1009883a 	mov	r4,r2
 800f898:	800fa440 	call	800fa44 <alt_putchar>
 800f89c:	00005a06 	br	800fa08 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 800f8a0:	e0bff807 	ldb	r2,-32(fp)
 800f8a4:	108018d8 	cmpnei	r2,r2,99
 800f8a8:	1000081e 	bne	r2,zero,800f8cc <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 800f8ac:	e0bffe17 	ldw	r2,-8(fp)
 800f8b0:	10c00104 	addi	r3,r2,4
 800f8b4:	e0fffe15 	stw	r3,-8(fp)
 800f8b8:	10800017 	ldw	r2,0(r2)
 800f8bc:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 800f8c0:	e13ffd17 	ldw	r4,-12(fp)
 800f8c4:	800fa440 	call	800fa44 <alt_putchar>
 800f8c8:	00004f06 	br	800fa08 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 800f8cc:	e0bff807 	ldb	r2,-32(fp)
 800f8d0:	10801e18 	cmpnei	r2,r2,120
 800f8d4:	1000341e 	bne	r2,zero,800f9a8 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 800f8d8:	e0bffe17 	ldw	r2,-8(fp)
 800f8dc:	10c00104 	addi	r3,r2,4
 800f8e0:	e0fffe15 	stw	r3,-8(fp)
 800f8e4:	10800017 	ldw	r2,0(r2)
 800f8e8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 800f8ec:	e0bffb17 	ldw	r2,-20(fp)
 800f8f0:	1000031e 	bne	r2,zero,800f900 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 800f8f4:	01000c04 	movi	r4,48
 800f8f8:	800fa440 	call	800fa44 <alt_putchar>
                        continue;
 800f8fc:	00004206 	br	800fa08 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 800f900:	00800704 	movi	r2,28
 800f904:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 800f908:	00000306 	br	800f918 <alt_printf+0x100>
                        digit_shift -= 4;
 800f90c:	e0bff917 	ldw	r2,-28(fp)
 800f910:	10bfff04 	addi	r2,r2,-4
 800f914:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 800f918:	00c003c4 	movi	r3,15
 800f91c:	e0bff917 	ldw	r2,-28(fp)
 800f920:	1884983a 	sll	r2,r3,r2
 800f924:	1007883a 	mov	r3,r2
 800f928:	e0bffb17 	ldw	r2,-20(fp)
 800f92c:	1884703a 	and	r2,r3,r2
 800f930:	103ff626 	beq	r2,zero,800f90c <__alt_data_end+0xff00f90c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 800f934:	00001906 	br	800f99c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 800f938:	00c003c4 	movi	r3,15
 800f93c:	e0bff917 	ldw	r2,-28(fp)
 800f940:	1884983a 	sll	r2,r3,r2
 800f944:	1007883a 	mov	r3,r2
 800f948:	e0bffb17 	ldw	r2,-20(fp)
 800f94c:	1886703a 	and	r3,r3,r2
 800f950:	e0bff917 	ldw	r2,-28(fp)
 800f954:	1884d83a 	srl	r2,r3,r2
 800f958:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 800f95c:	e0bffc17 	ldw	r2,-16(fp)
 800f960:	108002a8 	cmpgeui	r2,r2,10
 800f964:	1000041e 	bne	r2,zero,800f978 <alt_printf+0x160>
                            c = '0' + digit;
 800f968:	e0bffc17 	ldw	r2,-16(fp)
 800f96c:	10800c04 	addi	r2,r2,48
 800f970:	e0bff805 	stb	r2,-32(fp)
 800f974:	00000306 	br	800f984 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 800f978:	e0bffc17 	ldw	r2,-16(fp)
 800f97c:	108015c4 	addi	r2,r2,87
 800f980:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 800f984:	e0bff807 	ldb	r2,-32(fp)
 800f988:	1009883a 	mov	r4,r2
 800f98c:	800fa440 	call	800fa44 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 800f990:	e0bff917 	ldw	r2,-28(fp)
 800f994:	10bfff04 	addi	r2,r2,-4
 800f998:	e0bff915 	stw	r2,-28(fp)
 800f99c:	e0bff917 	ldw	r2,-28(fp)
 800f9a0:	103fe50e 	bge	r2,zero,800f938 <__alt_data_end+0xff00f938>
 800f9a4:	00001806 	br	800fa08 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 800f9a8:	e0bff807 	ldb	r2,-32(fp)
 800f9ac:	10801cd8 	cmpnei	r2,r2,115
 800f9b0:	1000151e 	bne	r2,zero,800fa08 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 800f9b4:	e0bffe17 	ldw	r2,-8(fp)
 800f9b8:	10c00104 	addi	r3,r2,4
 800f9bc:	e0fffe15 	stw	r3,-8(fp)
 800f9c0:	10800017 	ldw	r2,0(r2)
 800f9c4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 800f9c8:	00000906 	br	800f9f0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 800f9cc:	e0bffa17 	ldw	r2,-24(fp)
 800f9d0:	10c00044 	addi	r3,r2,1
 800f9d4:	e0fffa15 	stw	r3,-24(fp)
 800f9d8:	10800003 	ldbu	r2,0(r2)
 800f9dc:	10803fcc 	andi	r2,r2,255
 800f9e0:	1080201c 	xori	r2,r2,128
 800f9e4:	10bfe004 	addi	r2,r2,-128
 800f9e8:	1009883a 	mov	r4,r2
 800f9ec:	800fa440 	call	800fa44 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 800f9f0:	e0bffa17 	ldw	r2,-24(fp)
 800f9f4:	10800003 	ldbu	r2,0(r2)
 800f9f8:	10803fcc 	andi	r2,r2,255
 800f9fc:	1080201c 	xori	r2,r2,128
 800fa00:	10bfe004 	addi	r2,r2,-128
 800fa04:	103ff11e 	bne	r2,zero,800f9cc <__alt_data_end+0xff00f9cc>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 800fa08:	e0bff717 	ldw	r2,-36(fp)
 800fa0c:	10c00044 	addi	r3,r2,1
 800fa10:	e0fff715 	stw	r3,-36(fp)
 800fa14:	10800003 	ldbu	r2,0(r2)
 800fa18:	e0bff805 	stb	r2,-32(fp)
 800fa1c:	e0bff807 	ldb	r2,-32(fp)
 800fa20:	103f8a1e 	bne	r2,zero,800f84c <__alt_data_end+0xff00f84c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 800fa24:	00000106 	br	800fa2c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 800fa28:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 800fa2c:	0001883a 	nop
 800fa30:	e037883a 	mov	sp,fp
 800fa34:	dfc00117 	ldw	ra,4(sp)
 800fa38:	df000017 	ldw	fp,0(sp)
 800fa3c:	dec00504 	addi	sp,sp,20
 800fa40:	f800283a 	ret

0800fa44 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 800fa44:	defffd04 	addi	sp,sp,-12
 800fa48:	dfc00215 	stw	ra,8(sp)
 800fa4c:	df000115 	stw	fp,4(sp)
 800fa50:	df000104 	addi	fp,sp,4
 800fa54:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 800fa58:	d0a00417 	ldw	r2,-32752(gp)
 800fa5c:	10800217 	ldw	r2,8(r2)
 800fa60:	100b883a 	mov	r5,r2
 800fa64:	e13fff17 	ldw	r4,-4(fp)
 800fa68:	80098dc0 	call	80098dc <putc>
#endif
#endif
}
 800fa6c:	e037883a 	mov	sp,fp
 800fa70:	dfc00117 	ldw	ra,4(sp)
 800fa74:	df000017 	ldw	fp,0(sp)
 800fa78:	dec00204 	addi	sp,sp,8
 800fa7c:	f800283a 	ret

0800fa80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fa80:	defffe04 	addi	sp,sp,-8
 800fa84:	dfc00115 	stw	ra,4(sp)
 800fa88:	df000015 	stw	fp,0(sp)
 800fa8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fa90:	d0a00e17 	ldw	r2,-32712(gp)
 800fa94:	10000326 	beq	r2,zero,800faa4 <alt_get_errno+0x24>
 800fa98:	d0a00e17 	ldw	r2,-32712(gp)
 800fa9c:	103ee83a 	callr	r2
 800faa0:	00000106 	br	800faa8 <alt_get_errno+0x28>
 800faa4:	d0a6e704 	addi	r2,gp,-25700
}
 800faa8:	e037883a 	mov	sp,fp
 800faac:	dfc00117 	ldw	ra,4(sp)
 800fab0:	df000017 	ldw	fp,0(sp)
 800fab4:	dec00204 	addi	sp,sp,8
 800fab8:	f800283a 	ret

0800fabc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800fabc:	defff904 	addi	sp,sp,-28
 800fac0:	dfc00615 	stw	ra,24(sp)
 800fac4:	df000515 	stw	fp,20(sp)
 800fac8:	df000504 	addi	fp,sp,20
 800facc:	e13ffd15 	stw	r4,-12(fp)
 800fad0:	e17ffe15 	stw	r5,-8(fp)
 800fad4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fad8:	e0bffd17 	ldw	r2,-12(fp)
 800fadc:	10000616 	blt	r2,zero,800faf8 <read+0x3c>
 800fae0:	e0bffd17 	ldw	r2,-12(fp)
 800fae4:	10c00324 	muli	r3,r2,12
 800fae8:	00820074 	movhi	r2,2049
 800faec:	108a2e04 	addi	r2,r2,10424
 800faf0:	1885883a 	add	r2,r3,r2
 800faf4:	00000106 	br	800fafc <read+0x40>
 800faf8:	0005883a 	mov	r2,zero
 800fafc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800fb00:	e0bffb17 	ldw	r2,-20(fp)
 800fb04:	10002226 	beq	r2,zero,800fb90 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800fb08:	e0bffb17 	ldw	r2,-20(fp)
 800fb0c:	10800217 	ldw	r2,8(r2)
 800fb10:	108000cc 	andi	r2,r2,3
 800fb14:	10800060 	cmpeqi	r2,r2,1
 800fb18:	1000181e 	bne	r2,zero,800fb7c <read+0xc0>
        (fd->dev->read))
 800fb1c:	e0bffb17 	ldw	r2,-20(fp)
 800fb20:	10800017 	ldw	r2,0(r2)
 800fb24:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800fb28:	10001426 	beq	r2,zero,800fb7c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800fb2c:	e0bffb17 	ldw	r2,-20(fp)
 800fb30:	10800017 	ldw	r2,0(r2)
 800fb34:	10800517 	ldw	r2,20(r2)
 800fb38:	e0ffff17 	ldw	r3,-4(fp)
 800fb3c:	180d883a 	mov	r6,r3
 800fb40:	e17ffe17 	ldw	r5,-8(fp)
 800fb44:	e13ffb17 	ldw	r4,-20(fp)
 800fb48:	103ee83a 	callr	r2
 800fb4c:	e0bffc15 	stw	r2,-16(fp)
 800fb50:	e0bffc17 	ldw	r2,-16(fp)
 800fb54:	1000070e 	bge	r2,zero,800fb74 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800fb58:	800fa800 	call	800fa80 <alt_get_errno>
 800fb5c:	1007883a 	mov	r3,r2
 800fb60:	e0bffc17 	ldw	r2,-16(fp)
 800fb64:	0085c83a 	sub	r2,zero,r2
 800fb68:	18800015 	stw	r2,0(r3)
          return -1;
 800fb6c:	00bfffc4 	movi	r2,-1
 800fb70:	00000c06 	br	800fba4 <read+0xe8>
        }
        return rval;
 800fb74:	e0bffc17 	ldw	r2,-16(fp)
 800fb78:	00000a06 	br	800fba4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800fb7c:	800fa800 	call	800fa80 <alt_get_errno>
 800fb80:	1007883a 	mov	r3,r2
 800fb84:	00800344 	movi	r2,13
 800fb88:	18800015 	stw	r2,0(r3)
 800fb8c:	00000406 	br	800fba0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800fb90:	800fa800 	call	800fa80 <alt_get_errno>
 800fb94:	1007883a 	mov	r3,r2
 800fb98:	00801444 	movi	r2,81
 800fb9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800fba0:	00bfffc4 	movi	r2,-1
}
 800fba4:	e037883a 	mov	sp,fp
 800fba8:	dfc00117 	ldw	ra,4(sp)
 800fbac:	df000017 	ldw	fp,0(sp)
 800fbb0:	dec00204 	addi	sp,sp,8
 800fbb4:	f800283a 	ret

0800fbb8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800fbb8:	defffe04 	addi	sp,sp,-8
 800fbbc:	df000115 	stw	fp,4(sp)
 800fbc0:	df000104 	addi	fp,sp,4
 800fbc4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800fbc8:	e0bfff17 	ldw	r2,-4(fp)
 800fbcc:	108000d0 	cmplti	r2,r2,3
 800fbd0:	10000d1e 	bne	r2,zero,800fc08 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800fbd4:	00820074 	movhi	r2,2049
 800fbd8:	108a2e04 	addi	r2,r2,10424
 800fbdc:	e0ffff17 	ldw	r3,-4(fp)
 800fbe0:	18c00324 	muli	r3,r3,12
 800fbe4:	10c5883a 	add	r2,r2,r3
 800fbe8:	10800204 	addi	r2,r2,8
 800fbec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800fbf0:	00820074 	movhi	r2,2049
 800fbf4:	108a2e04 	addi	r2,r2,10424
 800fbf8:	e0ffff17 	ldw	r3,-4(fp)
 800fbfc:	18c00324 	muli	r3,r3,12
 800fc00:	10c5883a 	add	r2,r2,r3
 800fc04:	10000015 	stw	zero,0(r2)
  }
}
 800fc08:	0001883a 	nop
 800fc0c:	e037883a 	mov	sp,fp
 800fc10:	df000017 	ldw	fp,0(sp)
 800fc14:	dec00104 	addi	sp,sp,4
 800fc18:	f800283a 	ret

0800fc1c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800fc1c:	defff904 	addi	sp,sp,-28
 800fc20:	df000615 	stw	fp,24(sp)
 800fc24:	df000604 	addi	fp,sp,24
 800fc28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fc2c:	0005303a 	rdctl	r2,status
 800fc30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fc34:	e0fffe17 	ldw	r3,-8(fp)
 800fc38:	00bfff84 	movi	r2,-2
 800fc3c:	1884703a 	and	r2,r3,r2
 800fc40:	1001703a 	wrctl	status,r2
  
  return context;
 800fc44:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800fc48:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800fc4c:	d0a01017 	ldw	r2,-32704(gp)
 800fc50:	10c000c4 	addi	r3,r2,3
 800fc54:	00bfff04 	movi	r2,-4
 800fc58:	1884703a 	and	r2,r3,r2
 800fc5c:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800fc60:	d0e01017 	ldw	r3,-32704(gp)
 800fc64:	e0bfff17 	ldw	r2,-4(fp)
 800fc68:	1887883a 	add	r3,r3,r2
 800fc6c:	00824034 	movhi	r2,2304
 800fc70:	10800004 	addi	r2,r2,0
 800fc74:	10c0062e 	bgeu	r2,r3,800fc90 <sbrk+0x74>
 800fc78:	e0bffb17 	ldw	r2,-20(fp)
 800fc7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fc80:	e0bffa17 	ldw	r2,-24(fp)
 800fc84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800fc88:	00bfffc4 	movi	r2,-1
 800fc8c:	00000b06 	br	800fcbc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800fc90:	d0a01017 	ldw	r2,-32704(gp)
 800fc94:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800fc98:	d0e01017 	ldw	r3,-32704(gp)
 800fc9c:	e0bfff17 	ldw	r2,-4(fp)
 800fca0:	1885883a 	add	r2,r3,r2
 800fca4:	d0a01015 	stw	r2,-32704(gp)
 800fca8:	e0bffb17 	ldw	r2,-20(fp)
 800fcac:	e0bffc15 	stw	r2,-16(fp)
 800fcb0:	e0bffc17 	ldw	r2,-16(fp)
 800fcb4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800fcb8:	e0bffd17 	ldw	r2,-12(fp)
} 
 800fcbc:	e037883a 	mov	sp,fp
 800fcc0:	df000017 	ldw	fp,0(sp)
 800fcc4:	dec00104 	addi	sp,sp,4
 800fcc8:	f800283a 	ret

0800fccc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fccc:	defffe04 	addi	sp,sp,-8
 800fcd0:	dfc00115 	stw	ra,4(sp)
 800fcd4:	df000015 	stw	fp,0(sp)
 800fcd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fcdc:	d0a00e17 	ldw	r2,-32712(gp)
 800fce0:	10000326 	beq	r2,zero,800fcf0 <alt_get_errno+0x24>
 800fce4:	d0a00e17 	ldw	r2,-32712(gp)
 800fce8:	103ee83a 	callr	r2
 800fcec:	00000106 	br	800fcf4 <alt_get_errno+0x28>
 800fcf0:	d0a6e704 	addi	r2,gp,-25700
}
 800fcf4:	e037883a 	mov	sp,fp
 800fcf8:	dfc00117 	ldw	ra,4(sp)
 800fcfc:	df000017 	ldw	fp,0(sp)
 800fd00:	dec00204 	addi	sp,sp,8
 800fd04:	f800283a 	ret

0800fd08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800fd08:	defff904 	addi	sp,sp,-28
 800fd0c:	dfc00615 	stw	ra,24(sp)
 800fd10:	df000515 	stw	fp,20(sp)
 800fd14:	df000504 	addi	fp,sp,20
 800fd18:	e13ffd15 	stw	r4,-12(fp)
 800fd1c:	e17ffe15 	stw	r5,-8(fp)
 800fd20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fd24:	e0bffd17 	ldw	r2,-12(fp)
 800fd28:	10000616 	blt	r2,zero,800fd44 <write+0x3c>
 800fd2c:	e0bffd17 	ldw	r2,-12(fp)
 800fd30:	10c00324 	muli	r3,r2,12
 800fd34:	00820074 	movhi	r2,2049
 800fd38:	108a2e04 	addi	r2,r2,10424
 800fd3c:	1885883a 	add	r2,r3,r2
 800fd40:	00000106 	br	800fd48 <write+0x40>
 800fd44:	0005883a 	mov	r2,zero
 800fd48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800fd4c:	e0bffb17 	ldw	r2,-20(fp)
 800fd50:	10002126 	beq	r2,zero,800fdd8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800fd54:	e0bffb17 	ldw	r2,-20(fp)
 800fd58:	10800217 	ldw	r2,8(r2)
 800fd5c:	108000cc 	andi	r2,r2,3
 800fd60:	10001826 	beq	r2,zero,800fdc4 <write+0xbc>
 800fd64:	e0bffb17 	ldw	r2,-20(fp)
 800fd68:	10800017 	ldw	r2,0(r2)
 800fd6c:	10800617 	ldw	r2,24(r2)
 800fd70:	10001426 	beq	r2,zero,800fdc4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800fd74:	e0bffb17 	ldw	r2,-20(fp)
 800fd78:	10800017 	ldw	r2,0(r2)
 800fd7c:	10800617 	ldw	r2,24(r2)
 800fd80:	e0ffff17 	ldw	r3,-4(fp)
 800fd84:	180d883a 	mov	r6,r3
 800fd88:	e17ffe17 	ldw	r5,-8(fp)
 800fd8c:	e13ffb17 	ldw	r4,-20(fp)
 800fd90:	103ee83a 	callr	r2
 800fd94:	e0bffc15 	stw	r2,-16(fp)
 800fd98:	e0bffc17 	ldw	r2,-16(fp)
 800fd9c:	1000070e 	bge	r2,zero,800fdbc <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800fda0:	800fccc0 	call	800fccc <alt_get_errno>
 800fda4:	1007883a 	mov	r3,r2
 800fda8:	e0bffc17 	ldw	r2,-16(fp)
 800fdac:	0085c83a 	sub	r2,zero,r2
 800fdb0:	18800015 	stw	r2,0(r3)
        return -1;
 800fdb4:	00bfffc4 	movi	r2,-1
 800fdb8:	00000c06 	br	800fdec <write+0xe4>
      }
      return rval;
 800fdbc:	e0bffc17 	ldw	r2,-16(fp)
 800fdc0:	00000a06 	br	800fdec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800fdc4:	800fccc0 	call	800fccc <alt_get_errno>
 800fdc8:	1007883a 	mov	r3,r2
 800fdcc:	00800344 	movi	r2,13
 800fdd0:	18800015 	stw	r2,0(r3)
 800fdd4:	00000406 	br	800fde8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800fdd8:	800fccc0 	call	800fccc <alt_get_errno>
 800fddc:	1007883a 	mov	r3,r2
 800fde0:	00801444 	movi	r2,81
 800fde4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800fde8:	00bfffc4 	movi	r2,-1
}
 800fdec:	e037883a 	mov	sp,fp
 800fdf0:	dfc00117 	ldw	ra,4(sp)
 800fdf4:	df000017 	ldw	fp,0(sp)
 800fdf8:	dec00204 	addi	sp,sp,8
 800fdfc:	f800283a 	ret

0800fe00 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800fe00:	defffd04 	addi	sp,sp,-12
 800fe04:	dfc00215 	stw	ra,8(sp)
 800fe08:	df000115 	stw	fp,4(sp)
 800fe0c:	df000104 	addi	fp,sp,4
 800fe10:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800fe14:	d1600b04 	addi	r5,gp,-32724
 800fe18:	e13fff17 	ldw	r4,-4(fp)
 800fe1c:	8010bd80 	call	8010bd8 <alt_dev_llist_insert>
}
 800fe20:	e037883a 	mov	sp,fp
 800fe24:	dfc00117 	ldw	ra,4(sp)
 800fe28:	df000017 	ldw	fp,0(sp)
 800fe2c:	dec00204 	addi	sp,sp,8
 800fe30:	f800283a 	ret

0800fe34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800fe34:	defffd04 	addi	sp,sp,-12
 800fe38:	dfc00215 	stw	ra,8(sp)
 800fe3c:	df000115 	stw	fp,4(sp)
 800fe40:	df000104 	addi	fp,sp,4
 800fe44:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800fe48:	80115480 	call	8011548 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800fe4c:	00800044 	movi	r2,1
 800fe50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800fe54:	0001883a 	nop
 800fe58:	e037883a 	mov	sp,fp
 800fe5c:	dfc00117 	ldw	ra,4(sp)
 800fe60:	df000017 	ldw	fp,0(sp)
 800fe64:	dec00204 	addi	sp,sp,8
 800fe68:	f800283a 	ret

0800fe6c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800fe6c:	defffe04 	addi	sp,sp,-8
 800fe70:	dfc00115 	stw	ra,4(sp)
 800fe74:	df000015 	stw	fp,0(sp)
 800fe78:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800fe7c:	01c0fa04 	movi	r7,1000
 800fe80:	01800044 	movi	r6,1
 800fe84:	000b883a 	mov	r5,zero
 800fe88:	01080004 	movi	r4,8192
 800fe8c:	80109ac0 	call	80109ac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800fe90:	000d883a 	mov	r6,zero
 800fe94:	000b883a 	mov	r5,zero
 800fe98:	01020074 	movhi	r4,2049
 800fe9c:	210a9804 	addi	r4,r4,10848
 800fea0:	80100300 	call	8010030 <altera_avalon_jtag_uart_init>
 800fea4:	01020074 	movhi	r4,2049
 800fea8:	210a8e04 	addi	r4,r4,10808
 800feac:	800fe000 	call	800fe00 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800feb0:	0001883a 	nop
}
 800feb4:	0001883a 	nop
 800feb8:	e037883a 	mov	sp,fp
 800febc:	dfc00117 	ldw	ra,4(sp)
 800fec0:	df000017 	ldw	fp,0(sp)
 800fec4:	dec00204 	addi	sp,sp,8
 800fec8:	f800283a 	ret

0800fecc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800fecc:	defffa04 	addi	sp,sp,-24
 800fed0:	dfc00515 	stw	ra,20(sp)
 800fed4:	df000415 	stw	fp,16(sp)
 800fed8:	df000404 	addi	fp,sp,16
 800fedc:	e13ffd15 	stw	r4,-12(fp)
 800fee0:	e17ffe15 	stw	r5,-8(fp)
 800fee4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800fee8:	e0bffd17 	ldw	r2,-12(fp)
 800feec:	10800017 	ldw	r2,0(r2)
 800fef0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800fef4:	e0bffc17 	ldw	r2,-16(fp)
 800fef8:	10c00a04 	addi	r3,r2,40
 800fefc:	e0bffd17 	ldw	r2,-12(fp)
 800ff00:	10800217 	ldw	r2,8(r2)
 800ff04:	100f883a 	mov	r7,r2
 800ff08:	e1bfff17 	ldw	r6,-4(fp)
 800ff0c:	e17ffe17 	ldw	r5,-8(fp)
 800ff10:	1809883a 	mov	r4,r3
 800ff14:	80104f40 	call	80104f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800ff18:	e037883a 	mov	sp,fp
 800ff1c:	dfc00117 	ldw	ra,4(sp)
 800ff20:	df000017 	ldw	fp,0(sp)
 800ff24:	dec00204 	addi	sp,sp,8
 800ff28:	f800283a 	ret

0800ff2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800ff2c:	defffa04 	addi	sp,sp,-24
 800ff30:	dfc00515 	stw	ra,20(sp)
 800ff34:	df000415 	stw	fp,16(sp)
 800ff38:	df000404 	addi	fp,sp,16
 800ff3c:	e13ffd15 	stw	r4,-12(fp)
 800ff40:	e17ffe15 	stw	r5,-8(fp)
 800ff44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800ff48:	e0bffd17 	ldw	r2,-12(fp)
 800ff4c:	10800017 	ldw	r2,0(r2)
 800ff50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800ff54:	e0bffc17 	ldw	r2,-16(fp)
 800ff58:	10c00a04 	addi	r3,r2,40
 800ff5c:	e0bffd17 	ldw	r2,-12(fp)
 800ff60:	10800217 	ldw	r2,8(r2)
 800ff64:	100f883a 	mov	r7,r2
 800ff68:	e1bfff17 	ldw	r6,-4(fp)
 800ff6c:	e17ffe17 	ldw	r5,-8(fp)
 800ff70:	1809883a 	mov	r4,r3
 800ff74:	80107100 	call	8010710 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800ff78:	e037883a 	mov	sp,fp
 800ff7c:	dfc00117 	ldw	ra,4(sp)
 800ff80:	df000017 	ldw	fp,0(sp)
 800ff84:	dec00204 	addi	sp,sp,8
 800ff88:	f800283a 	ret

0800ff8c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800ff8c:	defffc04 	addi	sp,sp,-16
 800ff90:	dfc00315 	stw	ra,12(sp)
 800ff94:	df000215 	stw	fp,8(sp)
 800ff98:	df000204 	addi	fp,sp,8
 800ff9c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800ffa0:	e0bfff17 	ldw	r2,-4(fp)
 800ffa4:	10800017 	ldw	r2,0(r2)
 800ffa8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800ffac:	e0bffe17 	ldw	r2,-8(fp)
 800ffb0:	10c00a04 	addi	r3,r2,40
 800ffb4:	e0bfff17 	ldw	r2,-4(fp)
 800ffb8:	10800217 	ldw	r2,8(r2)
 800ffbc:	100b883a 	mov	r5,r2
 800ffc0:	1809883a 	mov	r4,r3
 800ffc4:	801039c0 	call	801039c <altera_avalon_jtag_uart_close>
}
 800ffc8:	e037883a 	mov	sp,fp
 800ffcc:	dfc00117 	ldw	ra,4(sp)
 800ffd0:	df000017 	ldw	fp,0(sp)
 800ffd4:	dec00204 	addi	sp,sp,8
 800ffd8:	f800283a 	ret

0800ffdc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800ffdc:	defffa04 	addi	sp,sp,-24
 800ffe0:	dfc00515 	stw	ra,20(sp)
 800ffe4:	df000415 	stw	fp,16(sp)
 800ffe8:	df000404 	addi	fp,sp,16
 800ffec:	e13ffd15 	stw	r4,-12(fp)
 800fff0:	e17ffe15 	stw	r5,-8(fp)
 800fff4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800fff8:	e0bffd17 	ldw	r2,-12(fp)
 800fffc:	10800017 	ldw	r2,0(r2)
 8010000:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8010004:	e0bffc17 	ldw	r2,-16(fp)
 8010008:	10800a04 	addi	r2,r2,40
 801000c:	e1bfff17 	ldw	r6,-4(fp)
 8010010:	e17ffe17 	ldw	r5,-8(fp)
 8010014:	1009883a 	mov	r4,r2
 8010018:	80104040 	call	8010404 <altera_avalon_jtag_uart_ioctl>
}
 801001c:	e037883a 	mov	sp,fp
 8010020:	dfc00117 	ldw	ra,4(sp)
 8010024:	df000017 	ldw	fp,0(sp)
 8010028:	dec00204 	addi	sp,sp,8
 801002c:	f800283a 	ret

08010030 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8010030:	defffa04 	addi	sp,sp,-24
 8010034:	dfc00515 	stw	ra,20(sp)
 8010038:	df000415 	stw	fp,16(sp)
 801003c:	df000404 	addi	fp,sp,16
 8010040:	e13ffd15 	stw	r4,-12(fp)
 8010044:	e17ffe15 	stw	r5,-8(fp)
 8010048:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801004c:	e0bffd17 	ldw	r2,-12(fp)
 8010050:	00c00044 	movi	r3,1
 8010054:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8010058:	e0bffd17 	ldw	r2,-12(fp)
 801005c:	10800017 	ldw	r2,0(r2)
 8010060:	10800104 	addi	r2,r2,4
 8010064:	1007883a 	mov	r3,r2
 8010068:	e0bffd17 	ldw	r2,-12(fp)
 801006c:	10800817 	ldw	r2,32(r2)
 8010070:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8010074:	e0bffe17 	ldw	r2,-8(fp)
 8010078:	e0ffff17 	ldw	r3,-4(fp)
 801007c:	d8000015 	stw	zero,0(sp)
 8010080:	e1fffd17 	ldw	r7,-12(fp)
 8010084:	01820074 	movhi	r6,2049
 8010088:	31803c04 	addi	r6,r6,240
 801008c:	180b883a 	mov	r5,r3
 8010090:	1009883a 	mov	r4,r2
 8010094:	8010d700 	call	8010d70 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8010098:	e0bffd17 	ldw	r2,-12(fp)
 801009c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 80100a0:	e0bffd17 	ldw	r2,-12(fp)
 80100a4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80100a8:	d0e6ec17 	ldw	r3,-25680(gp)
 80100ac:	e1fffd17 	ldw	r7,-12(fp)
 80100b0:	01820074 	movhi	r6,2049
 80100b4:	3180bf04 	addi	r6,r6,764
 80100b8:	180b883a 	mov	r5,r3
 80100bc:	1009883a 	mov	r4,r2
 80100c0:	8010a280 	call	8010a28 <alt_alarm_start>
 80100c4:	1000040e 	bge	r2,zero,80100d8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 80100c8:	e0fffd17 	ldw	r3,-12(fp)
 80100cc:	00a00034 	movhi	r2,32768
 80100d0:	10bfffc4 	addi	r2,r2,-1
 80100d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80100d8:	0001883a 	nop
 80100dc:	e037883a 	mov	sp,fp
 80100e0:	dfc00117 	ldw	ra,4(sp)
 80100e4:	df000017 	ldw	fp,0(sp)
 80100e8:	dec00204 	addi	sp,sp,8
 80100ec:	f800283a 	ret

080100f0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 80100f0:	defff804 	addi	sp,sp,-32
 80100f4:	df000715 	stw	fp,28(sp)
 80100f8:	df000704 	addi	fp,sp,28
 80100fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8010100:	e0bfff17 	ldw	r2,-4(fp)
 8010104:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8010108:	e0bffb17 	ldw	r2,-20(fp)
 801010c:	10800017 	ldw	r2,0(r2)
 8010110:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010114:	e0bffc17 	ldw	r2,-16(fp)
 8010118:	10800104 	addi	r2,r2,4
 801011c:	10800037 	ldwio	r2,0(r2)
 8010120:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8010124:	e0bffd17 	ldw	r2,-12(fp)
 8010128:	1080c00c 	andi	r2,r2,768
 801012c:	10006d26 	beq	r2,zero,80102e4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8010130:	e0bffd17 	ldw	r2,-12(fp)
 8010134:	1080400c 	andi	r2,r2,256
 8010138:	10003526 	beq	r2,zero,8010210 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 801013c:	00800074 	movhi	r2,1
 8010140:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010144:	e0bffb17 	ldw	r2,-20(fp)
 8010148:	10800a17 	ldw	r2,40(r2)
 801014c:	10800044 	addi	r2,r2,1
 8010150:	1081ffcc 	andi	r2,r2,2047
 8010154:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8010158:	e0bffb17 	ldw	r2,-20(fp)
 801015c:	10c00b17 	ldw	r3,44(r2)
 8010160:	e0bffe17 	ldw	r2,-8(fp)
 8010164:	18801526 	beq	r3,r2,80101bc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8010168:	e0bffc17 	ldw	r2,-16(fp)
 801016c:	10800037 	ldwio	r2,0(r2)
 8010170:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8010174:	e0bff917 	ldw	r2,-28(fp)
 8010178:	10a0000c 	andi	r2,r2,32768
 801017c:	10001126 	beq	r2,zero,80101c4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8010180:	e0bffb17 	ldw	r2,-20(fp)
 8010184:	10800a17 	ldw	r2,40(r2)
 8010188:	e0fff917 	ldw	r3,-28(fp)
 801018c:	1809883a 	mov	r4,r3
 8010190:	e0fffb17 	ldw	r3,-20(fp)
 8010194:	1885883a 	add	r2,r3,r2
 8010198:	10800e04 	addi	r2,r2,56
 801019c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80101a0:	e0bffb17 	ldw	r2,-20(fp)
 80101a4:	10800a17 	ldw	r2,40(r2)
 80101a8:	10800044 	addi	r2,r2,1
 80101ac:	10c1ffcc 	andi	r3,r2,2047
 80101b0:	e0bffb17 	ldw	r2,-20(fp)
 80101b4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 80101b8:	003fe206 	br	8010144 <__alt_data_end+0xff010144>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 80101bc:	0001883a 	nop
 80101c0:	00000106 	br	80101c8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 80101c4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 80101c8:	e0bff917 	ldw	r2,-28(fp)
 80101cc:	10bfffec 	andhi	r2,r2,65535
 80101d0:	10000f26 	beq	r2,zero,8010210 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80101d4:	e0bffb17 	ldw	r2,-20(fp)
 80101d8:	10c00817 	ldw	r3,32(r2)
 80101dc:	00bfff84 	movi	r2,-2
 80101e0:	1886703a 	and	r3,r3,r2
 80101e4:	e0bffb17 	ldw	r2,-20(fp)
 80101e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80101ec:	e0bffc17 	ldw	r2,-16(fp)
 80101f0:	10800104 	addi	r2,r2,4
 80101f4:	1007883a 	mov	r3,r2
 80101f8:	e0bffb17 	ldw	r2,-20(fp)
 80101fc:	10800817 	ldw	r2,32(r2)
 8010200:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010204:	e0bffc17 	ldw	r2,-16(fp)
 8010208:	10800104 	addi	r2,r2,4
 801020c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8010210:	e0bffd17 	ldw	r2,-12(fp)
 8010214:	1080800c 	andi	r2,r2,512
 8010218:	103fbe26 	beq	r2,zero,8010114 <__alt_data_end+0xff010114>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 801021c:	e0bffd17 	ldw	r2,-12(fp)
 8010220:	1004d43a 	srli	r2,r2,16
 8010224:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8010228:	00001406 	br	801027c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 801022c:	e0bffc17 	ldw	r2,-16(fp)
 8010230:	e0fffb17 	ldw	r3,-20(fp)
 8010234:	18c00d17 	ldw	r3,52(r3)
 8010238:	e13ffb17 	ldw	r4,-20(fp)
 801023c:	20c7883a 	add	r3,r4,r3
 8010240:	18c20e04 	addi	r3,r3,2104
 8010244:	18c00003 	ldbu	r3,0(r3)
 8010248:	18c03fcc 	andi	r3,r3,255
 801024c:	18c0201c 	xori	r3,r3,128
 8010250:	18ffe004 	addi	r3,r3,-128
 8010254:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010258:	e0bffb17 	ldw	r2,-20(fp)
 801025c:	10800d17 	ldw	r2,52(r2)
 8010260:	10800044 	addi	r2,r2,1
 8010264:	10c1ffcc 	andi	r3,r2,2047
 8010268:	e0bffb17 	ldw	r2,-20(fp)
 801026c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8010270:	e0bffa17 	ldw	r2,-24(fp)
 8010274:	10bfffc4 	addi	r2,r2,-1
 8010278:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 801027c:	e0bffa17 	ldw	r2,-24(fp)
 8010280:	10000526 	beq	r2,zero,8010298 <altera_avalon_jtag_uart_irq+0x1a8>
 8010284:	e0bffb17 	ldw	r2,-20(fp)
 8010288:	10c00d17 	ldw	r3,52(r2)
 801028c:	e0bffb17 	ldw	r2,-20(fp)
 8010290:	10800c17 	ldw	r2,48(r2)
 8010294:	18bfe51e 	bne	r3,r2,801022c <__alt_data_end+0xff01022c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8010298:	e0bffa17 	ldw	r2,-24(fp)
 801029c:	103f9d26 	beq	r2,zero,8010114 <__alt_data_end+0xff010114>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80102a0:	e0bffb17 	ldw	r2,-20(fp)
 80102a4:	10c00817 	ldw	r3,32(r2)
 80102a8:	00bfff44 	movi	r2,-3
 80102ac:	1886703a 	and	r3,r3,r2
 80102b0:	e0bffb17 	ldw	r2,-20(fp)
 80102b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80102b8:	e0bffb17 	ldw	r2,-20(fp)
 80102bc:	10800017 	ldw	r2,0(r2)
 80102c0:	10800104 	addi	r2,r2,4
 80102c4:	1007883a 	mov	r3,r2
 80102c8:	e0bffb17 	ldw	r2,-20(fp)
 80102cc:	10800817 	ldw	r2,32(r2)
 80102d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80102d4:	e0bffc17 	ldw	r2,-16(fp)
 80102d8:	10800104 	addi	r2,r2,4
 80102dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80102e0:	003f8c06 	br	8010114 <__alt_data_end+0xff010114>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 80102e4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 80102e8:	0001883a 	nop
 80102ec:	e037883a 	mov	sp,fp
 80102f0:	df000017 	ldw	fp,0(sp)
 80102f4:	dec00104 	addi	sp,sp,4
 80102f8:	f800283a 	ret

080102fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80102fc:	defff804 	addi	sp,sp,-32
 8010300:	df000715 	stw	fp,28(sp)
 8010304:	df000704 	addi	fp,sp,28
 8010308:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 801030c:	e0bffb17 	ldw	r2,-20(fp)
 8010310:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8010314:	e0bff917 	ldw	r2,-28(fp)
 8010318:	10800017 	ldw	r2,0(r2)
 801031c:	10800104 	addi	r2,r2,4
 8010320:	10800037 	ldwio	r2,0(r2)
 8010324:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8010328:	e0bffa17 	ldw	r2,-24(fp)
 801032c:	1081000c 	andi	r2,r2,1024
 8010330:	10000b26 	beq	r2,zero,8010360 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8010334:	e0bff917 	ldw	r2,-28(fp)
 8010338:	10800017 	ldw	r2,0(r2)
 801033c:	10800104 	addi	r2,r2,4
 8010340:	1007883a 	mov	r3,r2
 8010344:	e0bff917 	ldw	r2,-28(fp)
 8010348:	10800817 	ldw	r2,32(r2)
 801034c:	10810014 	ori	r2,r2,1024
 8010350:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8010354:	e0bff917 	ldw	r2,-28(fp)
 8010358:	10000915 	stw	zero,36(r2)
 801035c:	00000a06 	br	8010388 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8010360:	e0bff917 	ldw	r2,-28(fp)
 8010364:	10c00917 	ldw	r3,36(r2)
 8010368:	00a00034 	movhi	r2,32768
 801036c:	10bfff04 	addi	r2,r2,-4
 8010370:	10c00536 	bltu	r2,r3,8010388 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8010374:	e0bff917 	ldw	r2,-28(fp)
 8010378:	10800917 	ldw	r2,36(r2)
 801037c:	10c00044 	addi	r3,r2,1
 8010380:	e0bff917 	ldw	r2,-28(fp)
 8010384:	10c00915 	stw	r3,36(r2)
 8010388:	d0a6ec17 	ldw	r2,-25680(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 801038c:	e037883a 	mov	sp,fp
 8010390:	df000017 	ldw	fp,0(sp)
 8010394:	dec00104 	addi	sp,sp,4
 8010398:	f800283a 	ret

0801039c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 801039c:	defffd04 	addi	sp,sp,-12
 80103a0:	df000215 	stw	fp,8(sp)
 80103a4:	df000204 	addi	fp,sp,8
 80103a8:	e13ffe15 	stw	r4,-8(fp)
 80103ac:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80103b0:	00000506 	br	80103c8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80103b4:	e0bfff17 	ldw	r2,-4(fp)
 80103b8:	1090000c 	andi	r2,r2,16384
 80103bc:	10000226 	beq	r2,zero,80103c8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80103c0:	00bffd44 	movi	r2,-11
 80103c4:	00000b06 	br	80103f4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80103c8:	e0bffe17 	ldw	r2,-8(fp)
 80103cc:	10c00d17 	ldw	r3,52(r2)
 80103d0:	e0bffe17 	ldw	r2,-8(fp)
 80103d4:	10800c17 	ldw	r2,48(r2)
 80103d8:	18800526 	beq	r3,r2,80103f0 <altera_avalon_jtag_uart_close+0x54>
 80103dc:	e0bffe17 	ldw	r2,-8(fp)
 80103e0:	10c00917 	ldw	r3,36(r2)
 80103e4:	e0bffe17 	ldw	r2,-8(fp)
 80103e8:	10800117 	ldw	r2,4(r2)
 80103ec:	18bff136 	bltu	r3,r2,80103b4 <__alt_data_end+0xff0103b4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80103f0:	0005883a 	mov	r2,zero
}
 80103f4:	e037883a 	mov	sp,fp
 80103f8:	df000017 	ldw	fp,0(sp)
 80103fc:	dec00104 	addi	sp,sp,4
 8010400:	f800283a 	ret

08010404 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8010404:	defffa04 	addi	sp,sp,-24
 8010408:	df000515 	stw	fp,20(sp)
 801040c:	df000504 	addi	fp,sp,20
 8010410:	e13ffd15 	stw	r4,-12(fp)
 8010414:	e17ffe15 	stw	r5,-8(fp)
 8010418:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 801041c:	00bff9c4 	movi	r2,-25
 8010420:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8010424:	e0bffe17 	ldw	r2,-8(fp)
 8010428:	10da8060 	cmpeqi	r3,r2,27137
 801042c:	1800031e 	bne	r3,zero,801043c <altera_avalon_jtag_uart_ioctl+0x38>
 8010430:	109a80a0 	cmpeqi	r2,r2,27138
 8010434:	1000181e 	bne	r2,zero,8010498 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8010438:	00002906 	br	80104e0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 801043c:	e0bffd17 	ldw	r2,-12(fp)
 8010440:	10c00117 	ldw	r3,4(r2)
 8010444:	00a00034 	movhi	r2,32768
 8010448:	10bfffc4 	addi	r2,r2,-1
 801044c:	18802126 	beq	r3,r2,80104d4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8010450:	e0bfff17 	ldw	r2,-4(fp)
 8010454:	10800017 	ldw	r2,0(r2)
 8010458:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801045c:	e0bffc17 	ldw	r2,-16(fp)
 8010460:	10800090 	cmplti	r2,r2,2
 8010464:	1000061e 	bne	r2,zero,8010480 <altera_avalon_jtag_uart_ioctl+0x7c>
 8010468:	e0fffc17 	ldw	r3,-16(fp)
 801046c:	00a00034 	movhi	r2,32768
 8010470:	10bfffc4 	addi	r2,r2,-1
 8010474:	18800226 	beq	r3,r2,8010480 <altera_avalon_jtag_uart_ioctl+0x7c>
 8010478:	e0bffc17 	ldw	r2,-16(fp)
 801047c:	00000206 	br	8010488 <altera_avalon_jtag_uart_ioctl+0x84>
 8010480:	00a00034 	movhi	r2,32768
 8010484:	10bfff84 	addi	r2,r2,-2
 8010488:	e0fffd17 	ldw	r3,-12(fp)
 801048c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8010490:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8010494:	00000f06 	br	80104d4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8010498:	e0bffd17 	ldw	r2,-12(fp)
 801049c:	10c00117 	ldw	r3,4(r2)
 80104a0:	00a00034 	movhi	r2,32768
 80104a4:	10bfffc4 	addi	r2,r2,-1
 80104a8:	18800c26 	beq	r3,r2,80104dc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80104ac:	e0bffd17 	ldw	r2,-12(fp)
 80104b0:	10c00917 	ldw	r3,36(r2)
 80104b4:	e0bffd17 	ldw	r2,-12(fp)
 80104b8:	10800117 	ldw	r2,4(r2)
 80104bc:	1885803a 	cmpltu	r2,r3,r2
 80104c0:	10c03fcc 	andi	r3,r2,255
 80104c4:	e0bfff17 	ldw	r2,-4(fp)
 80104c8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80104cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80104d0:	00000206 	br	80104dc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80104d4:	0001883a 	nop
 80104d8:	00000106 	br	80104e0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80104dc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80104e0:	e0bffb17 	ldw	r2,-20(fp)
}
 80104e4:	e037883a 	mov	sp,fp
 80104e8:	df000017 	ldw	fp,0(sp)
 80104ec:	dec00104 	addi	sp,sp,4
 80104f0:	f800283a 	ret

080104f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80104f4:	defff304 	addi	sp,sp,-52
 80104f8:	dfc00c15 	stw	ra,48(sp)
 80104fc:	df000b15 	stw	fp,44(sp)
 8010500:	df000b04 	addi	fp,sp,44
 8010504:	e13ffc15 	stw	r4,-16(fp)
 8010508:	e17ffd15 	stw	r5,-12(fp)
 801050c:	e1bffe15 	stw	r6,-8(fp)
 8010510:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8010514:	e0bffd17 	ldw	r2,-12(fp)
 8010518:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801051c:	00004706 	br	801063c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8010520:	e0bffc17 	ldw	r2,-16(fp)
 8010524:	10800a17 	ldw	r2,40(r2)
 8010528:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 801052c:	e0bffc17 	ldw	r2,-16(fp)
 8010530:	10800b17 	ldw	r2,44(r2)
 8010534:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8010538:	e0fff717 	ldw	r3,-36(fp)
 801053c:	e0bff817 	ldw	r2,-32(fp)
 8010540:	18800536 	bltu	r3,r2,8010558 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8010544:	e0fff717 	ldw	r3,-36(fp)
 8010548:	e0bff817 	ldw	r2,-32(fp)
 801054c:	1885c83a 	sub	r2,r3,r2
 8010550:	e0bff615 	stw	r2,-40(fp)
 8010554:	00000406 	br	8010568 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8010558:	00c20004 	movi	r3,2048
 801055c:	e0bff817 	ldw	r2,-32(fp)
 8010560:	1885c83a 	sub	r2,r3,r2
 8010564:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8010568:	e0bff617 	ldw	r2,-40(fp)
 801056c:	10001e26 	beq	r2,zero,80105e8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8010570:	e0fffe17 	ldw	r3,-8(fp)
 8010574:	e0bff617 	ldw	r2,-40(fp)
 8010578:	1880022e 	bgeu	r3,r2,8010584 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 801057c:	e0bffe17 	ldw	r2,-8(fp)
 8010580:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8010584:	e0bffc17 	ldw	r2,-16(fp)
 8010588:	10c00e04 	addi	r3,r2,56
 801058c:	e0bff817 	ldw	r2,-32(fp)
 8010590:	1885883a 	add	r2,r3,r2
 8010594:	e1bff617 	ldw	r6,-40(fp)
 8010598:	100b883a 	mov	r5,r2
 801059c:	e13ff517 	ldw	r4,-44(fp)
 80105a0:	80085d00 	call	80085d0 <memcpy>
      ptr   += n;
 80105a4:	e0fff517 	ldw	r3,-44(fp)
 80105a8:	e0bff617 	ldw	r2,-40(fp)
 80105ac:	1885883a 	add	r2,r3,r2
 80105b0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80105b4:	e0fffe17 	ldw	r3,-8(fp)
 80105b8:	e0bff617 	ldw	r2,-40(fp)
 80105bc:	1885c83a 	sub	r2,r3,r2
 80105c0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80105c4:	e0fff817 	ldw	r3,-32(fp)
 80105c8:	e0bff617 	ldw	r2,-40(fp)
 80105cc:	1885883a 	add	r2,r3,r2
 80105d0:	10c1ffcc 	andi	r3,r2,2047
 80105d4:	e0bffc17 	ldw	r2,-16(fp)
 80105d8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80105dc:	e0bffe17 	ldw	r2,-8(fp)
 80105e0:	00bfcf16 	blt	zero,r2,8010520 <__alt_data_end+0xff010520>
 80105e4:	00000106 	br	80105ec <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80105e8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80105ec:	e0fff517 	ldw	r3,-44(fp)
 80105f0:	e0bffd17 	ldw	r2,-12(fp)
 80105f4:	1880141e 	bne	r3,r2,8010648 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80105f8:	e0bfff17 	ldw	r2,-4(fp)
 80105fc:	1090000c 	andi	r2,r2,16384
 8010600:	1000131e 	bne	r2,zero,8010650 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8010604:	0001883a 	nop
 8010608:	e0bffc17 	ldw	r2,-16(fp)
 801060c:	10c00a17 	ldw	r3,40(r2)
 8010610:	e0bff717 	ldw	r2,-36(fp)
 8010614:	1880051e 	bne	r3,r2,801062c <altera_avalon_jtag_uart_read+0x138>
 8010618:	e0bffc17 	ldw	r2,-16(fp)
 801061c:	10c00917 	ldw	r3,36(r2)
 8010620:	e0bffc17 	ldw	r2,-16(fp)
 8010624:	10800117 	ldw	r2,4(r2)
 8010628:	18bff736 	bltu	r3,r2,8010608 <__alt_data_end+0xff010608>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 801062c:	e0bffc17 	ldw	r2,-16(fp)
 8010630:	10c00a17 	ldw	r3,40(r2)
 8010634:	e0bff717 	ldw	r2,-36(fp)
 8010638:	18800726 	beq	r3,r2,8010658 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801063c:	e0bffe17 	ldw	r2,-8(fp)
 8010640:	00bfb716 	blt	zero,r2,8010520 <__alt_data_end+0xff010520>
 8010644:	00000506 	br	801065c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8010648:	0001883a 	nop
 801064c:	00000306 	br	801065c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8010650:	0001883a 	nop
 8010654:	00000106 	br	801065c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8010658:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801065c:	e0fff517 	ldw	r3,-44(fp)
 8010660:	e0bffd17 	ldw	r2,-12(fp)
 8010664:	18801826 	beq	r3,r2,80106c8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010668:	0005303a 	rdctl	r2,status
 801066c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010670:	e0fffb17 	ldw	r3,-20(fp)
 8010674:	00bfff84 	movi	r2,-2
 8010678:	1884703a 	and	r2,r3,r2
 801067c:	1001703a 	wrctl	status,r2
  
  return context;
 8010680:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8010684:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010688:	e0bffc17 	ldw	r2,-16(fp)
 801068c:	10800817 	ldw	r2,32(r2)
 8010690:	10c00054 	ori	r3,r2,1
 8010694:	e0bffc17 	ldw	r2,-16(fp)
 8010698:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801069c:	e0bffc17 	ldw	r2,-16(fp)
 80106a0:	10800017 	ldw	r2,0(r2)
 80106a4:	10800104 	addi	r2,r2,4
 80106a8:	1007883a 	mov	r3,r2
 80106ac:	e0bffc17 	ldw	r2,-16(fp)
 80106b0:	10800817 	ldw	r2,32(r2)
 80106b4:	18800035 	stwio	r2,0(r3)
 80106b8:	e0bffa17 	ldw	r2,-24(fp)
 80106bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80106c0:	e0bff917 	ldw	r2,-28(fp)
 80106c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80106c8:	e0fff517 	ldw	r3,-44(fp)
 80106cc:	e0bffd17 	ldw	r2,-12(fp)
 80106d0:	18800426 	beq	r3,r2,80106e4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80106d4:	e0fff517 	ldw	r3,-44(fp)
 80106d8:	e0bffd17 	ldw	r2,-12(fp)
 80106dc:	1885c83a 	sub	r2,r3,r2
 80106e0:	00000606 	br	80106fc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80106e4:	e0bfff17 	ldw	r2,-4(fp)
 80106e8:	1090000c 	andi	r2,r2,16384
 80106ec:	10000226 	beq	r2,zero,80106f8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80106f0:	00bffd44 	movi	r2,-11
 80106f4:	00000106 	br	80106fc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80106f8:	00bffec4 	movi	r2,-5
}
 80106fc:	e037883a 	mov	sp,fp
 8010700:	dfc00117 	ldw	ra,4(sp)
 8010704:	df000017 	ldw	fp,0(sp)
 8010708:	dec00204 	addi	sp,sp,8
 801070c:	f800283a 	ret

08010710 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8010710:	defff304 	addi	sp,sp,-52
 8010714:	dfc00c15 	stw	ra,48(sp)
 8010718:	df000b15 	stw	fp,44(sp)
 801071c:	df000b04 	addi	fp,sp,44
 8010720:	e13ffc15 	stw	r4,-16(fp)
 8010724:	e17ffd15 	stw	r5,-12(fp)
 8010728:	e1bffe15 	stw	r6,-8(fp)
 801072c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8010730:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8010734:	e0bffd17 	ldw	r2,-12(fp)
 8010738:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801073c:	00003706 	br	801081c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8010740:	e0bffc17 	ldw	r2,-16(fp)
 8010744:	10800c17 	ldw	r2,48(r2)
 8010748:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 801074c:	e0bffc17 	ldw	r2,-16(fp)
 8010750:	10800d17 	ldw	r2,52(r2)
 8010754:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8010758:	e0fff917 	ldw	r3,-28(fp)
 801075c:	e0bff517 	ldw	r2,-44(fp)
 8010760:	1880062e 	bgeu	r3,r2,801077c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8010764:	e0fff517 	ldw	r3,-44(fp)
 8010768:	e0bff917 	ldw	r2,-28(fp)
 801076c:	1885c83a 	sub	r2,r3,r2
 8010770:	10bfffc4 	addi	r2,r2,-1
 8010774:	e0bff615 	stw	r2,-40(fp)
 8010778:	00000b06 	br	80107a8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801077c:	e0bff517 	ldw	r2,-44(fp)
 8010780:	10000526 	beq	r2,zero,8010798 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8010784:	00c20004 	movi	r3,2048
 8010788:	e0bff917 	ldw	r2,-28(fp)
 801078c:	1885c83a 	sub	r2,r3,r2
 8010790:	e0bff615 	stw	r2,-40(fp)
 8010794:	00000406 	br	80107a8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8010798:	00c1ffc4 	movi	r3,2047
 801079c:	e0bff917 	ldw	r2,-28(fp)
 80107a0:	1885c83a 	sub	r2,r3,r2
 80107a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80107a8:	e0bff617 	ldw	r2,-40(fp)
 80107ac:	10001e26 	beq	r2,zero,8010828 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 80107b0:	e0fffe17 	ldw	r3,-8(fp)
 80107b4:	e0bff617 	ldw	r2,-40(fp)
 80107b8:	1880022e 	bgeu	r3,r2,80107c4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 80107bc:	e0bffe17 	ldw	r2,-8(fp)
 80107c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80107c4:	e0bffc17 	ldw	r2,-16(fp)
 80107c8:	10c20e04 	addi	r3,r2,2104
 80107cc:	e0bff917 	ldw	r2,-28(fp)
 80107d0:	1885883a 	add	r2,r3,r2
 80107d4:	e1bff617 	ldw	r6,-40(fp)
 80107d8:	e17ffd17 	ldw	r5,-12(fp)
 80107dc:	1009883a 	mov	r4,r2
 80107e0:	80085d00 	call	80085d0 <memcpy>
      ptr   += n;
 80107e4:	e0fffd17 	ldw	r3,-12(fp)
 80107e8:	e0bff617 	ldw	r2,-40(fp)
 80107ec:	1885883a 	add	r2,r3,r2
 80107f0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80107f4:	e0fffe17 	ldw	r3,-8(fp)
 80107f8:	e0bff617 	ldw	r2,-40(fp)
 80107fc:	1885c83a 	sub	r2,r3,r2
 8010800:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010804:	e0fff917 	ldw	r3,-28(fp)
 8010808:	e0bff617 	ldw	r2,-40(fp)
 801080c:	1885883a 	add	r2,r3,r2
 8010810:	10c1ffcc 	andi	r3,r2,2047
 8010814:	e0bffc17 	ldw	r2,-16(fp)
 8010818:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801081c:	e0bffe17 	ldw	r2,-8(fp)
 8010820:	00bfc716 	blt	zero,r2,8010740 <__alt_data_end+0xff010740>
 8010824:	00000106 	br	801082c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8010828:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801082c:	0005303a 	rdctl	r2,status
 8010830:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010834:	e0fffb17 	ldw	r3,-20(fp)
 8010838:	00bfff84 	movi	r2,-2
 801083c:	1884703a 	and	r2,r3,r2
 8010840:	1001703a 	wrctl	status,r2
  
  return context;
 8010844:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8010848:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801084c:	e0bffc17 	ldw	r2,-16(fp)
 8010850:	10800817 	ldw	r2,32(r2)
 8010854:	10c00094 	ori	r3,r2,2
 8010858:	e0bffc17 	ldw	r2,-16(fp)
 801085c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010860:	e0bffc17 	ldw	r2,-16(fp)
 8010864:	10800017 	ldw	r2,0(r2)
 8010868:	10800104 	addi	r2,r2,4
 801086c:	1007883a 	mov	r3,r2
 8010870:	e0bffc17 	ldw	r2,-16(fp)
 8010874:	10800817 	ldw	r2,32(r2)
 8010878:	18800035 	stwio	r2,0(r3)
 801087c:	e0bffa17 	ldw	r2,-24(fp)
 8010880:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010884:	e0bff817 	ldw	r2,-32(fp)
 8010888:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 801088c:	e0bffe17 	ldw	r2,-8(fp)
 8010890:	0080100e 	bge	zero,r2,80108d4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8010894:	e0bfff17 	ldw	r2,-4(fp)
 8010898:	1090000c 	andi	r2,r2,16384
 801089c:	1000101e 	bne	r2,zero,80108e0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80108a0:	0001883a 	nop
 80108a4:	e0bffc17 	ldw	r2,-16(fp)
 80108a8:	10c00d17 	ldw	r3,52(r2)
 80108ac:	e0bff517 	ldw	r2,-44(fp)
 80108b0:	1880051e 	bne	r3,r2,80108c8 <altera_avalon_jtag_uart_write+0x1b8>
 80108b4:	e0bffc17 	ldw	r2,-16(fp)
 80108b8:	10c00917 	ldw	r3,36(r2)
 80108bc:	e0bffc17 	ldw	r2,-16(fp)
 80108c0:	10800117 	ldw	r2,4(r2)
 80108c4:	18bff736 	bltu	r3,r2,80108a4 <__alt_data_end+0xff0108a4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80108c8:	e0bffc17 	ldw	r2,-16(fp)
 80108cc:	10800917 	ldw	r2,36(r2)
 80108d0:	1000051e 	bne	r2,zero,80108e8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80108d4:	e0bffe17 	ldw	r2,-8(fp)
 80108d8:	00bfd016 	blt	zero,r2,801081c <__alt_data_end+0xff01081c>
 80108dc:	00000306 	br	80108ec <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80108e0:	0001883a 	nop
 80108e4:	00000106 	br	80108ec <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80108e8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80108ec:	e0fffd17 	ldw	r3,-12(fp)
 80108f0:	e0bff717 	ldw	r2,-36(fp)
 80108f4:	18800426 	beq	r3,r2,8010908 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80108f8:	e0fffd17 	ldw	r3,-12(fp)
 80108fc:	e0bff717 	ldw	r2,-36(fp)
 8010900:	1885c83a 	sub	r2,r3,r2
 8010904:	00000606 	br	8010920 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8010908:	e0bfff17 	ldw	r2,-4(fp)
 801090c:	1090000c 	andi	r2,r2,16384
 8010910:	10000226 	beq	r2,zero,801091c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8010914:	00bffd44 	movi	r2,-11
 8010918:	00000106 	br	8010920 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 801091c:	00bffec4 	movi	r2,-5
}
 8010920:	e037883a 	mov	sp,fp
 8010924:	dfc00117 	ldw	ra,4(sp)
 8010928:	df000017 	ldw	fp,0(sp)
 801092c:	dec00204 	addi	sp,sp,8
 8010930:	f800283a 	ret

08010934 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8010934:	defffa04 	addi	sp,sp,-24
 8010938:	dfc00515 	stw	ra,20(sp)
 801093c:	df000415 	stw	fp,16(sp)
 8010940:	df000404 	addi	fp,sp,16
 8010944:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8010948:	0007883a 	mov	r3,zero
 801094c:	e0bfff17 	ldw	r2,-4(fp)
 8010950:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8010954:	e0bfff17 	ldw	r2,-4(fp)
 8010958:	10800104 	addi	r2,r2,4
 801095c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010960:	0005303a 	rdctl	r2,status
 8010964:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010968:	e0fffd17 	ldw	r3,-12(fp)
 801096c:	00bfff84 	movi	r2,-2
 8010970:	1884703a 	and	r2,r3,r2
 8010974:	1001703a 	wrctl	status,r2
  
  return context;
 8010978:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 801097c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8010980:	80114400 	call	8011440 <alt_tick>
 8010984:	e0bffc17 	ldw	r2,-16(fp)
 8010988:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801098c:	e0bffe17 	ldw	r2,-8(fp)
 8010990:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8010994:	0001883a 	nop
 8010998:	e037883a 	mov	sp,fp
 801099c:	dfc00117 	ldw	ra,4(sp)
 80109a0:	df000017 	ldw	fp,0(sp)
 80109a4:	dec00204 	addi	sp,sp,8
 80109a8:	f800283a 	ret

080109ac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80109ac:	defff804 	addi	sp,sp,-32
 80109b0:	dfc00715 	stw	ra,28(sp)
 80109b4:	df000615 	stw	fp,24(sp)
 80109b8:	df000604 	addi	fp,sp,24
 80109bc:	e13ffc15 	stw	r4,-16(fp)
 80109c0:	e17ffd15 	stw	r5,-12(fp)
 80109c4:	e1bffe15 	stw	r6,-8(fp)
 80109c8:	e1ffff15 	stw	r7,-4(fp)
 80109cc:	e0bfff17 	ldw	r2,-4(fp)
 80109d0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80109d4:	d0a6ec17 	ldw	r2,-25680(gp)
 80109d8:	1000021e 	bne	r2,zero,80109e4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 80109dc:	e0bffb17 	ldw	r2,-20(fp)
 80109e0:	d0a6ec15 	stw	r2,-25680(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80109e4:	e0bffc17 	ldw	r2,-16(fp)
 80109e8:	10800104 	addi	r2,r2,4
 80109ec:	00c001c4 	movi	r3,7
 80109f0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80109f4:	d8000015 	stw	zero,0(sp)
 80109f8:	e1fffc17 	ldw	r7,-16(fp)
 80109fc:	01820074 	movhi	r6,2049
 8010a00:	31824d04 	addi	r6,r6,2356
 8010a04:	e17ffe17 	ldw	r5,-8(fp)
 8010a08:	e13ffd17 	ldw	r4,-12(fp)
 8010a0c:	8010d700 	call	8010d70 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8010a10:	0001883a 	nop
 8010a14:	e037883a 	mov	sp,fp
 8010a18:	dfc00117 	ldw	ra,4(sp)
 8010a1c:	df000017 	ldw	fp,0(sp)
 8010a20:	dec00204 	addi	sp,sp,8
 8010a24:	f800283a 	ret

08010a28 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010a28:	defff504 	addi	sp,sp,-44
 8010a2c:	df000a15 	stw	fp,40(sp)
 8010a30:	df000a04 	addi	fp,sp,40
 8010a34:	e13ffc15 	stw	r4,-16(fp)
 8010a38:	e17ffd15 	stw	r5,-12(fp)
 8010a3c:	e1bffe15 	stw	r6,-8(fp)
 8010a40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8010a44:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8010a48:	d0a6ec17 	ldw	r2,-25680(gp)
  
  if (alt_ticks_per_second ())
 8010a4c:	10003c26 	beq	r2,zero,8010b40 <alt_alarm_start+0x118>
  {
    if (alarm)
 8010a50:	e0bffc17 	ldw	r2,-16(fp)
 8010a54:	10003826 	beq	r2,zero,8010b38 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8010a58:	e0bffc17 	ldw	r2,-16(fp)
 8010a5c:	e0fffe17 	ldw	r3,-8(fp)
 8010a60:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8010a64:	e0bffc17 	ldw	r2,-16(fp)
 8010a68:	e0ffff17 	ldw	r3,-4(fp)
 8010a6c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010a70:	0005303a 	rdctl	r2,status
 8010a74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010a78:	e0fff917 	ldw	r3,-28(fp)
 8010a7c:	00bfff84 	movi	r2,-2
 8010a80:	1884703a 	and	r2,r3,r2
 8010a84:	1001703a 	wrctl	status,r2
  
  return context;
 8010a88:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8010a8c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8010a90:	d0a6ed17 	ldw	r2,-25676(gp)
      
      current_nticks = alt_nticks();
 8010a94:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8010a98:	e0fffd17 	ldw	r3,-12(fp)
 8010a9c:	e0bff617 	ldw	r2,-40(fp)
 8010aa0:	1885883a 	add	r2,r3,r2
 8010aa4:	10c00044 	addi	r3,r2,1
 8010aa8:	e0bffc17 	ldw	r2,-16(fp)
 8010aac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8010ab0:	e0bffc17 	ldw	r2,-16(fp)
 8010ab4:	10c00217 	ldw	r3,8(r2)
 8010ab8:	e0bff617 	ldw	r2,-40(fp)
 8010abc:	1880042e 	bgeu	r3,r2,8010ad0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8010ac0:	e0bffc17 	ldw	r2,-16(fp)
 8010ac4:	00c00044 	movi	r3,1
 8010ac8:	10c00405 	stb	r3,16(r2)
 8010acc:	00000206 	br	8010ad8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8010ad0:	e0bffc17 	ldw	r2,-16(fp)
 8010ad4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8010ad8:	e0bffc17 	ldw	r2,-16(fp)
 8010adc:	d0e01104 	addi	r3,gp,-32700
 8010ae0:	e0fffa15 	stw	r3,-24(fp)
 8010ae4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010ae8:	e0bffb17 	ldw	r2,-20(fp)
 8010aec:	e0fffa17 	ldw	r3,-24(fp)
 8010af0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010af4:	e0bffa17 	ldw	r2,-24(fp)
 8010af8:	10c00017 	ldw	r3,0(r2)
 8010afc:	e0bffb17 	ldw	r2,-20(fp)
 8010b00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010b04:	e0bffa17 	ldw	r2,-24(fp)
 8010b08:	10800017 	ldw	r2,0(r2)
 8010b0c:	e0fffb17 	ldw	r3,-20(fp)
 8010b10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010b14:	e0bffa17 	ldw	r2,-24(fp)
 8010b18:	e0fffb17 	ldw	r3,-20(fp)
 8010b1c:	10c00015 	stw	r3,0(r2)
 8010b20:	e0bff817 	ldw	r2,-32(fp)
 8010b24:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010b28:	e0bff717 	ldw	r2,-36(fp)
 8010b2c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8010b30:	0005883a 	mov	r2,zero
 8010b34:	00000306 	br	8010b44 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8010b38:	00bffa84 	movi	r2,-22
 8010b3c:	00000106 	br	8010b44 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8010b40:	00bfde84 	movi	r2,-134
  }
}
 8010b44:	e037883a 	mov	sp,fp
 8010b48:	df000017 	ldw	fp,0(sp)
 8010b4c:	dec00104 	addi	sp,sp,4
 8010b50:	f800283a 	ret

08010b54 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8010b54:	defffe04 	addi	sp,sp,-8
 8010b58:	df000115 	stw	fp,4(sp)
 8010b5c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8010b60:	e03fff15 	stw	zero,-4(fp)
 8010b64:	00000506 	br	8010b7c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8010b68:	e0bfff17 	ldw	r2,-4(fp)
 8010b6c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8010b70:	e0bfff17 	ldw	r2,-4(fp)
 8010b74:	10800804 	addi	r2,r2,32
 8010b78:	e0bfff15 	stw	r2,-4(fp)
 8010b7c:	e0bfff17 	ldw	r2,-4(fp)
 8010b80:	10820030 	cmpltui	r2,r2,2048
 8010b84:	103ff81e 	bne	r2,zero,8010b68 <__alt_data_end+0xff010b68>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010b88:	0001883a 	nop
 8010b8c:	e037883a 	mov	sp,fp
 8010b90:	df000017 	ldw	fp,0(sp)
 8010b94:	dec00104 	addi	sp,sp,4
 8010b98:	f800283a 	ret

08010b9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010b9c:	defffe04 	addi	sp,sp,-8
 8010ba0:	dfc00115 	stw	ra,4(sp)
 8010ba4:	df000015 	stw	fp,0(sp)
 8010ba8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010bac:	d0a00e17 	ldw	r2,-32712(gp)
 8010bb0:	10000326 	beq	r2,zero,8010bc0 <alt_get_errno+0x24>
 8010bb4:	d0a00e17 	ldw	r2,-32712(gp)
 8010bb8:	103ee83a 	callr	r2
 8010bbc:	00000106 	br	8010bc4 <alt_get_errno+0x28>
 8010bc0:	d0a6e704 	addi	r2,gp,-25700
}
 8010bc4:	e037883a 	mov	sp,fp
 8010bc8:	dfc00117 	ldw	ra,4(sp)
 8010bcc:	df000017 	ldw	fp,0(sp)
 8010bd0:	dec00204 	addi	sp,sp,8
 8010bd4:	f800283a 	ret

08010bd8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010bd8:	defffa04 	addi	sp,sp,-24
 8010bdc:	dfc00515 	stw	ra,20(sp)
 8010be0:	df000415 	stw	fp,16(sp)
 8010be4:	df000404 	addi	fp,sp,16
 8010be8:	e13ffe15 	stw	r4,-8(fp)
 8010bec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8010bf0:	e0bffe17 	ldw	r2,-8(fp)
 8010bf4:	10000326 	beq	r2,zero,8010c04 <alt_dev_llist_insert+0x2c>
 8010bf8:	e0bffe17 	ldw	r2,-8(fp)
 8010bfc:	10800217 	ldw	r2,8(r2)
 8010c00:	1000061e 	bne	r2,zero,8010c1c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8010c04:	8010b9c0 	call	8010b9c <alt_get_errno>
 8010c08:	1007883a 	mov	r3,r2
 8010c0c:	00800584 	movi	r2,22
 8010c10:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8010c14:	00bffa84 	movi	r2,-22
 8010c18:	00001306 	br	8010c68 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8010c1c:	e0bffe17 	ldw	r2,-8(fp)
 8010c20:	e0ffff17 	ldw	r3,-4(fp)
 8010c24:	e0fffc15 	stw	r3,-16(fp)
 8010c28:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010c2c:	e0bffd17 	ldw	r2,-12(fp)
 8010c30:	e0fffc17 	ldw	r3,-16(fp)
 8010c34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010c38:	e0bffc17 	ldw	r2,-16(fp)
 8010c3c:	10c00017 	ldw	r3,0(r2)
 8010c40:	e0bffd17 	ldw	r2,-12(fp)
 8010c44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010c48:	e0bffc17 	ldw	r2,-16(fp)
 8010c4c:	10800017 	ldw	r2,0(r2)
 8010c50:	e0fffd17 	ldw	r3,-12(fp)
 8010c54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010c58:	e0bffc17 	ldw	r2,-16(fp)
 8010c5c:	e0fffd17 	ldw	r3,-12(fp)
 8010c60:	10c00015 	stw	r3,0(r2)

  return 0;  
 8010c64:	0005883a 	mov	r2,zero
}
 8010c68:	e037883a 	mov	sp,fp
 8010c6c:	dfc00117 	ldw	ra,4(sp)
 8010c70:	df000017 	ldw	fp,0(sp)
 8010c74:	dec00204 	addi	sp,sp,8
 8010c78:	f800283a 	ret

08010c7c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8010c7c:	defffd04 	addi	sp,sp,-12
 8010c80:	dfc00215 	stw	ra,8(sp)
 8010c84:	df000115 	stw	fp,4(sp)
 8010c88:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010c8c:	00820074 	movhi	r2,2049
 8010c90:	10871904 	addi	r2,r2,7268
 8010c94:	e0bfff15 	stw	r2,-4(fp)
 8010c98:	00000606 	br	8010cb4 <_do_ctors+0x38>
        (*ctor) (); 
 8010c9c:	e0bfff17 	ldw	r2,-4(fp)
 8010ca0:	10800017 	ldw	r2,0(r2)
 8010ca4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010ca8:	e0bfff17 	ldw	r2,-4(fp)
 8010cac:	10bfff04 	addi	r2,r2,-4
 8010cb0:	e0bfff15 	stw	r2,-4(fp)
 8010cb4:	e0ffff17 	ldw	r3,-4(fp)
 8010cb8:	00820074 	movhi	r2,2049
 8010cbc:	10871a04 	addi	r2,r2,7272
 8010cc0:	18bff62e 	bgeu	r3,r2,8010c9c <__alt_data_end+0xff010c9c>
        (*ctor) (); 
}
 8010cc4:	0001883a 	nop
 8010cc8:	e037883a 	mov	sp,fp
 8010ccc:	dfc00117 	ldw	ra,4(sp)
 8010cd0:	df000017 	ldw	fp,0(sp)
 8010cd4:	dec00204 	addi	sp,sp,8
 8010cd8:	f800283a 	ret

08010cdc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8010cdc:	defffd04 	addi	sp,sp,-12
 8010ce0:	dfc00215 	stw	ra,8(sp)
 8010ce4:	df000115 	stw	fp,4(sp)
 8010ce8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010cec:	00820074 	movhi	r2,2049
 8010cf0:	10871904 	addi	r2,r2,7268
 8010cf4:	e0bfff15 	stw	r2,-4(fp)
 8010cf8:	00000606 	br	8010d14 <_do_dtors+0x38>
        (*dtor) (); 
 8010cfc:	e0bfff17 	ldw	r2,-4(fp)
 8010d00:	10800017 	ldw	r2,0(r2)
 8010d04:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010d08:	e0bfff17 	ldw	r2,-4(fp)
 8010d0c:	10bfff04 	addi	r2,r2,-4
 8010d10:	e0bfff15 	stw	r2,-4(fp)
 8010d14:	e0ffff17 	ldw	r3,-4(fp)
 8010d18:	00820074 	movhi	r2,2049
 8010d1c:	10871a04 	addi	r2,r2,7272
 8010d20:	18bff62e 	bgeu	r3,r2,8010cfc <__alt_data_end+0xff010cfc>
        (*dtor) (); 
}
 8010d24:	0001883a 	nop
 8010d28:	e037883a 	mov	sp,fp
 8010d2c:	dfc00117 	ldw	ra,4(sp)
 8010d30:	df000017 	ldw	fp,0(sp)
 8010d34:	dec00204 	addi	sp,sp,8
 8010d38:	f800283a 	ret

08010d3c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8010d3c:	defffe04 	addi	sp,sp,-8
 8010d40:	dfc00115 	stw	ra,4(sp)
 8010d44:	df000015 	stw	fp,0(sp)
 8010d48:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8010d4c:	01440004 	movi	r5,4096
 8010d50:	0009883a 	mov	r4,zero
 8010d54:	80117a80 	call	80117a8 <alt_icache_flush>
#endif
}
 8010d58:	0001883a 	nop
 8010d5c:	e037883a 	mov	sp,fp
 8010d60:	dfc00117 	ldw	ra,4(sp)
 8010d64:	df000017 	ldw	fp,0(sp)
 8010d68:	dec00204 	addi	sp,sp,8
 8010d6c:	f800283a 	ret

08010d70 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010d70:	defff904 	addi	sp,sp,-28
 8010d74:	dfc00615 	stw	ra,24(sp)
 8010d78:	df000515 	stw	fp,20(sp)
 8010d7c:	df000504 	addi	fp,sp,20
 8010d80:	e13ffc15 	stw	r4,-16(fp)
 8010d84:	e17ffd15 	stw	r5,-12(fp)
 8010d88:	e1bffe15 	stw	r6,-8(fp)
 8010d8c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8010d90:	e0800217 	ldw	r2,8(fp)
 8010d94:	d8800015 	stw	r2,0(sp)
 8010d98:	e1ffff17 	ldw	r7,-4(fp)
 8010d9c:	e1bffe17 	ldw	r6,-8(fp)
 8010da0:	e17ffd17 	ldw	r5,-12(fp)
 8010da4:	e13ffc17 	ldw	r4,-16(fp)
 8010da8:	8010f200 	call	8010f20 <alt_iic_isr_register>
}  
 8010dac:	e037883a 	mov	sp,fp
 8010db0:	dfc00117 	ldw	ra,4(sp)
 8010db4:	df000017 	ldw	fp,0(sp)
 8010db8:	dec00204 	addi	sp,sp,8
 8010dbc:	f800283a 	ret

08010dc0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8010dc0:	defff904 	addi	sp,sp,-28
 8010dc4:	df000615 	stw	fp,24(sp)
 8010dc8:	df000604 	addi	fp,sp,24
 8010dcc:	e13ffe15 	stw	r4,-8(fp)
 8010dd0:	e17fff15 	stw	r5,-4(fp)
 8010dd4:	e0bfff17 	ldw	r2,-4(fp)
 8010dd8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010ddc:	0005303a 	rdctl	r2,status
 8010de0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010de4:	e0fffb17 	ldw	r3,-20(fp)
 8010de8:	00bfff84 	movi	r2,-2
 8010dec:	1884703a 	and	r2,r3,r2
 8010df0:	1001703a 	wrctl	status,r2
  
  return context;
 8010df4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010df8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8010dfc:	00c00044 	movi	r3,1
 8010e00:	e0bffa17 	ldw	r2,-24(fp)
 8010e04:	1884983a 	sll	r2,r3,r2
 8010e08:	1007883a 	mov	r3,r2
 8010e0c:	d0a6e817 	ldw	r2,-25696(gp)
 8010e10:	1884b03a 	or	r2,r3,r2
 8010e14:	d0a6e815 	stw	r2,-25696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010e18:	d0a6e817 	ldw	r2,-25696(gp)
 8010e1c:	100170fa 	wrctl	ienable,r2
 8010e20:	e0bffc17 	ldw	r2,-16(fp)
 8010e24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010e28:	e0bffd17 	ldw	r2,-12(fp)
 8010e2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010e30:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8010e34:	0001883a 	nop
}
 8010e38:	e037883a 	mov	sp,fp
 8010e3c:	df000017 	ldw	fp,0(sp)
 8010e40:	dec00104 	addi	sp,sp,4
 8010e44:	f800283a 	ret

08010e48 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8010e48:	defff904 	addi	sp,sp,-28
 8010e4c:	df000615 	stw	fp,24(sp)
 8010e50:	df000604 	addi	fp,sp,24
 8010e54:	e13ffe15 	stw	r4,-8(fp)
 8010e58:	e17fff15 	stw	r5,-4(fp)
 8010e5c:	e0bfff17 	ldw	r2,-4(fp)
 8010e60:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010e64:	0005303a 	rdctl	r2,status
 8010e68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010e6c:	e0fffb17 	ldw	r3,-20(fp)
 8010e70:	00bfff84 	movi	r2,-2
 8010e74:	1884703a 	and	r2,r3,r2
 8010e78:	1001703a 	wrctl	status,r2
  
  return context;
 8010e7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010e80:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8010e84:	00c00044 	movi	r3,1
 8010e88:	e0bffa17 	ldw	r2,-24(fp)
 8010e8c:	1884983a 	sll	r2,r3,r2
 8010e90:	0084303a 	nor	r2,zero,r2
 8010e94:	1007883a 	mov	r3,r2
 8010e98:	d0a6e817 	ldw	r2,-25696(gp)
 8010e9c:	1884703a 	and	r2,r3,r2
 8010ea0:	d0a6e815 	stw	r2,-25696(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010ea4:	d0a6e817 	ldw	r2,-25696(gp)
 8010ea8:	100170fa 	wrctl	ienable,r2
 8010eac:	e0bffc17 	ldw	r2,-16(fp)
 8010eb0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010eb4:	e0bffd17 	ldw	r2,-12(fp)
 8010eb8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010ebc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8010ec0:	0001883a 	nop
}
 8010ec4:	e037883a 	mov	sp,fp
 8010ec8:	df000017 	ldw	fp,0(sp)
 8010ecc:	dec00104 	addi	sp,sp,4
 8010ed0:	f800283a 	ret

08010ed4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8010ed4:	defffc04 	addi	sp,sp,-16
 8010ed8:	df000315 	stw	fp,12(sp)
 8010edc:	df000304 	addi	fp,sp,12
 8010ee0:	e13ffe15 	stw	r4,-8(fp)
 8010ee4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010ee8:	000530fa 	rdctl	r2,ienable
 8010eec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8010ef0:	00c00044 	movi	r3,1
 8010ef4:	e0bfff17 	ldw	r2,-4(fp)
 8010ef8:	1884983a 	sll	r2,r3,r2
 8010efc:	1007883a 	mov	r3,r2
 8010f00:	e0bffd17 	ldw	r2,-12(fp)
 8010f04:	1884703a 	and	r2,r3,r2
 8010f08:	1004c03a 	cmpne	r2,r2,zero
 8010f0c:	10803fcc 	andi	r2,r2,255
}
 8010f10:	e037883a 	mov	sp,fp
 8010f14:	df000017 	ldw	fp,0(sp)
 8010f18:	dec00104 	addi	sp,sp,4
 8010f1c:	f800283a 	ret

08010f20 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010f20:	defff504 	addi	sp,sp,-44
 8010f24:	dfc00a15 	stw	ra,40(sp)
 8010f28:	df000915 	stw	fp,36(sp)
 8010f2c:	df000904 	addi	fp,sp,36
 8010f30:	e13ffc15 	stw	r4,-16(fp)
 8010f34:	e17ffd15 	stw	r5,-12(fp)
 8010f38:	e1bffe15 	stw	r6,-8(fp)
 8010f3c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8010f40:	00bffa84 	movi	r2,-22
 8010f44:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010f48:	e0bffd17 	ldw	r2,-12(fp)
 8010f4c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8010f50:	e0bff817 	ldw	r2,-32(fp)
 8010f54:	10800808 	cmpgei	r2,r2,32
 8010f58:	1000271e 	bne	r2,zero,8010ff8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010f5c:	0005303a 	rdctl	r2,status
 8010f60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010f64:	e0fffb17 	ldw	r3,-20(fp)
 8010f68:	00bfff84 	movi	r2,-2
 8010f6c:	1884703a 	and	r2,r3,r2
 8010f70:	1001703a 	wrctl	status,r2
  
  return context;
 8010f74:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8010f78:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8010f7c:	00820074 	movhi	r2,2049
 8010f80:	1095a904 	addi	r2,r2,22180
 8010f84:	e0fff817 	ldw	r3,-32(fp)
 8010f88:	180690fa 	slli	r3,r3,3
 8010f8c:	10c5883a 	add	r2,r2,r3
 8010f90:	e0fffe17 	ldw	r3,-8(fp)
 8010f94:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8010f98:	00820074 	movhi	r2,2049
 8010f9c:	1095a904 	addi	r2,r2,22180
 8010fa0:	e0fff817 	ldw	r3,-32(fp)
 8010fa4:	180690fa 	slli	r3,r3,3
 8010fa8:	10c5883a 	add	r2,r2,r3
 8010fac:	10800104 	addi	r2,r2,4
 8010fb0:	e0ffff17 	ldw	r3,-4(fp)
 8010fb4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010fb8:	e0bffe17 	ldw	r2,-8(fp)
 8010fbc:	10000526 	beq	r2,zero,8010fd4 <alt_iic_isr_register+0xb4>
 8010fc0:	e0bff817 	ldw	r2,-32(fp)
 8010fc4:	100b883a 	mov	r5,r2
 8010fc8:	e13ffc17 	ldw	r4,-16(fp)
 8010fcc:	8010dc00 	call	8010dc0 <alt_ic_irq_enable>
 8010fd0:	00000406 	br	8010fe4 <alt_iic_isr_register+0xc4>
 8010fd4:	e0bff817 	ldw	r2,-32(fp)
 8010fd8:	100b883a 	mov	r5,r2
 8010fdc:	e13ffc17 	ldw	r4,-16(fp)
 8010fe0:	8010e480 	call	8010e48 <alt_ic_irq_disable>
 8010fe4:	e0bff715 	stw	r2,-36(fp)
 8010fe8:	e0bffa17 	ldw	r2,-24(fp)
 8010fec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010ff0:	e0bff917 	ldw	r2,-28(fp)
 8010ff4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8010ff8:	e0bff717 	ldw	r2,-36(fp)
}
 8010ffc:	e037883a 	mov	sp,fp
 8011000:	dfc00117 	ldw	ra,4(sp)
 8011004:	df000017 	ldw	fp,0(sp)
 8011008:	dec00204 	addi	sp,sp,8
 801100c:	f800283a 	ret

08011010 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8011010:	defff904 	addi	sp,sp,-28
 8011014:	dfc00615 	stw	ra,24(sp)
 8011018:	df000515 	stw	fp,20(sp)
 801101c:	df000504 	addi	fp,sp,20
 8011020:	e13ffc15 	stw	r4,-16(fp)
 8011024:	e17ffd15 	stw	r5,-12(fp)
 8011028:	e1bffe15 	stw	r6,-8(fp)
 801102c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8011030:	e1bfff17 	ldw	r6,-4(fp)
 8011034:	e17ffe17 	ldw	r5,-8(fp)
 8011038:	e13ffd17 	ldw	r4,-12(fp)
 801103c:	80112500 	call	8011250 <open>
 8011040:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8011044:	e0bffb17 	ldw	r2,-20(fp)
 8011048:	10001c16 	blt	r2,zero,80110bc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 801104c:	00820074 	movhi	r2,2049
 8011050:	108a2e04 	addi	r2,r2,10424
 8011054:	e0fffb17 	ldw	r3,-20(fp)
 8011058:	18c00324 	muli	r3,r3,12
 801105c:	10c5883a 	add	r2,r2,r3
 8011060:	10c00017 	ldw	r3,0(r2)
 8011064:	e0bffc17 	ldw	r2,-16(fp)
 8011068:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801106c:	00820074 	movhi	r2,2049
 8011070:	108a2e04 	addi	r2,r2,10424
 8011074:	e0fffb17 	ldw	r3,-20(fp)
 8011078:	18c00324 	muli	r3,r3,12
 801107c:	10c5883a 	add	r2,r2,r3
 8011080:	10800104 	addi	r2,r2,4
 8011084:	10c00017 	ldw	r3,0(r2)
 8011088:	e0bffc17 	ldw	r2,-16(fp)
 801108c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8011090:	00820074 	movhi	r2,2049
 8011094:	108a2e04 	addi	r2,r2,10424
 8011098:	e0fffb17 	ldw	r3,-20(fp)
 801109c:	18c00324 	muli	r3,r3,12
 80110a0:	10c5883a 	add	r2,r2,r3
 80110a4:	10800204 	addi	r2,r2,8
 80110a8:	10c00017 	ldw	r3,0(r2)
 80110ac:	e0bffc17 	ldw	r2,-16(fp)
 80110b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80110b4:	e13ffb17 	ldw	r4,-20(fp)
 80110b8:	800fbb80 	call	800fbb8 <alt_release_fd>
  }
} 
 80110bc:	0001883a 	nop
 80110c0:	e037883a 	mov	sp,fp
 80110c4:	dfc00117 	ldw	ra,4(sp)
 80110c8:	df000017 	ldw	fp,0(sp)
 80110cc:	dec00204 	addi	sp,sp,8
 80110d0:	f800283a 	ret

080110d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80110d4:	defffb04 	addi	sp,sp,-20
 80110d8:	dfc00415 	stw	ra,16(sp)
 80110dc:	df000315 	stw	fp,12(sp)
 80110e0:	df000304 	addi	fp,sp,12
 80110e4:	e13ffd15 	stw	r4,-12(fp)
 80110e8:	e17ffe15 	stw	r5,-8(fp)
 80110ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80110f0:	01c07fc4 	movi	r7,511
 80110f4:	01800044 	movi	r6,1
 80110f8:	e17ffd17 	ldw	r5,-12(fp)
 80110fc:	01020074 	movhi	r4,2049
 8011100:	210a3104 	addi	r4,r4,10436
 8011104:	80110100 	call	8011010 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8011108:	01c07fc4 	movi	r7,511
 801110c:	000d883a 	mov	r6,zero
 8011110:	e17ffe17 	ldw	r5,-8(fp)
 8011114:	01020074 	movhi	r4,2049
 8011118:	210a2e04 	addi	r4,r4,10424
 801111c:	80110100 	call	8011010 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8011120:	01c07fc4 	movi	r7,511
 8011124:	01800044 	movi	r6,1
 8011128:	e17fff17 	ldw	r5,-4(fp)
 801112c:	01020074 	movhi	r4,2049
 8011130:	210a3404 	addi	r4,r4,10448
 8011134:	80110100 	call	8011010 <alt_open_fd>
}  
 8011138:	0001883a 	nop
 801113c:	e037883a 	mov	sp,fp
 8011140:	dfc00117 	ldw	ra,4(sp)
 8011144:	df000017 	ldw	fp,0(sp)
 8011148:	dec00204 	addi	sp,sp,8
 801114c:	f800283a 	ret

08011150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011150:	defffe04 	addi	sp,sp,-8
 8011154:	dfc00115 	stw	ra,4(sp)
 8011158:	df000015 	stw	fp,0(sp)
 801115c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011160:	d0a00e17 	ldw	r2,-32712(gp)
 8011164:	10000326 	beq	r2,zero,8011174 <alt_get_errno+0x24>
 8011168:	d0a00e17 	ldw	r2,-32712(gp)
 801116c:	103ee83a 	callr	r2
 8011170:	00000106 	br	8011178 <alt_get_errno+0x28>
 8011174:	d0a6e704 	addi	r2,gp,-25700
}
 8011178:	e037883a 	mov	sp,fp
 801117c:	dfc00117 	ldw	ra,4(sp)
 8011180:	df000017 	ldw	fp,0(sp)
 8011184:	dec00204 	addi	sp,sp,8
 8011188:	f800283a 	ret

0801118c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 801118c:	defffd04 	addi	sp,sp,-12
 8011190:	df000215 	stw	fp,8(sp)
 8011194:	df000204 	addi	fp,sp,8
 8011198:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 801119c:	e0bfff17 	ldw	r2,-4(fp)
 80111a0:	10800217 	ldw	r2,8(r2)
 80111a4:	10d00034 	orhi	r3,r2,16384
 80111a8:	e0bfff17 	ldw	r2,-4(fp)
 80111ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80111b0:	e03ffe15 	stw	zero,-8(fp)
 80111b4:	00001d06 	br	801122c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80111b8:	00820074 	movhi	r2,2049
 80111bc:	108a2e04 	addi	r2,r2,10424
 80111c0:	e0fffe17 	ldw	r3,-8(fp)
 80111c4:	18c00324 	muli	r3,r3,12
 80111c8:	10c5883a 	add	r2,r2,r3
 80111cc:	10c00017 	ldw	r3,0(r2)
 80111d0:	e0bfff17 	ldw	r2,-4(fp)
 80111d4:	10800017 	ldw	r2,0(r2)
 80111d8:	1880111e 	bne	r3,r2,8011220 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80111dc:	00820074 	movhi	r2,2049
 80111e0:	108a2e04 	addi	r2,r2,10424
 80111e4:	e0fffe17 	ldw	r3,-8(fp)
 80111e8:	18c00324 	muli	r3,r3,12
 80111ec:	10c5883a 	add	r2,r2,r3
 80111f0:	10800204 	addi	r2,r2,8
 80111f4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80111f8:	1000090e 	bge	r2,zero,8011220 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80111fc:	e0bffe17 	ldw	r2,-8(fp)
 8011200:	10c00324 	muli	r3,r2,12
 8011204:	00820074 	movhi	r2,2049
 8011208:	108a2e04 	addi	r2,r2,10424
 801120c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8011210:	e0bfff17 	ldw	r2,-4(fp)
 8011214:	18800226 	beq	r3,r2,8011220 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8011218:	00bffcc4 	movi	r2,-13
 801121c:	00000806 	br	8011240 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8011220:	e0bffe17 	ldw	r2,-8(fp)
 8011224:	10800044 	addi	r2,r2,1
 8011228:	e0bffe15 	stw	r2,-8(fp)
 801122c:	d0a00d17 	ldw	r2,-32716(gp)
 8011230:	1007883a 	mov	r3,r2
 8011234:	e0bffe17 	ldw	r2,-8(fp)
 8011238:	18bfdf2e 	bgeu	r3,r2,80111b8 <__alt_data_end+0xff0111b8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801123c:	0005883a 	mov	r2,zero
}
 8011240:	e037883a 	mov	sp,fp
 8011244:	df000017 	ldw	fp,0(sp)
 8011248:	dec00104 	addi	sp,sp,4
 801124c:	f800283a 	ret

08011250 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8011250:	defff604 	addi	sp,sp,-40
 8011254:	dfc00915 	stw	ra,36(sp)
 8011258:	df000815 	stw	fp,32(sp)
 801125c:	df000804 	addi	fp,sp,32
 8011260:	e13ffd15 	stw	r4,-12(fp)
 8011264:	e17ffe15 	stw	r5,-8(fp)
 8011268:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801126c:	00bfffc4 	movi	r2,-1
 8011270:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8011274:	00bffb44 	movi	r2,-19
 8011278:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 801127c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8011280:	d1600b04 	addi	r5,gp,-32724
 8011284:	e13ffd17 	ldw	r4,-12(fp)
 8011288:	801156c0 	call	801156c <alt_find_dev>
 801128c:	e0bff815 	stw	r2,-32(fp)
 8011290:	e0bff817 	ldw	r2,-32(fp)
 8011294:	1000051e 	bne	r2,zero,80112ac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8011298:	e13ffd17 	ldw	r4,-12(fp)
 801129c:	80115fc0 	call	80115fc <alt_find_file>
 80112a0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80112a4:	00800044 	movi	r2,1
 80112a8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80112ac:	e0bff817 	ldw	r2,-32(fp)
 80112b0:	10002926 	beq	r2,zero,8011358 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80112b4:	e13ff817 	ldw	r4,-32(fp)
 80112b8:	80117040 	call	8011704 <alt_get_fd>
 80112bc:	e0bff915 	stw	r2,-28(fp)
 80112c0:	e0bff917 	ldw	r2,-28(fp)
 80112c4:	1000030e 	bge	r2,zero,80112d4 <open+0x84>
    {
      status = index;
 80112c8:	e0bff917 	ldw	r2,-28(fp)
 80112cc:	e0bffa15 	stw	r2,-24(fp)
 80112d0:	00002306 	br	8011360 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 80112d4:	e0bff917 	ldw	r2,-28(fp)
 80112d8:	10c00324 	muli	r3,r2,12
 80112dc:	00820074 	movhi	r2,2049
 80112e0:	108a2e04 	addi	r2,r2,10424
 80112e4:	1885883a 	add	r2,r3,r2
 80112e8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80112ec:	e0fffe17 	ldw	r3,-8(fp)
 80112f0:	00900034 	movhi	r2,16384
 80112f4:	10bfffc4 	addi	r2,r2,-1
 80112f8:	1886703a 	and	r3,r3,r2
 80112fc:	e0bffc17 	ldw	r2,-16(fp)
 8011300:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8011304:	e0bffb17 	ldw	r2,-20(fp)
 8011308:	1000051e 	bne	r2,zero,8011320 <open+0xd0>
 801130c:	e13ffc17 	ldw	r4,-16(fp)
 8011310:	801118c0 	call	801118c <alt_file_locked>
 8011314:	e0bffa15 	stw	r2,-24(fp)
 8011318:	e0bffa17 	ldw	r2,-24(fp)
 801131c:	10001016 	blt	r2,zero,8011360 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8011320:	e0bff817 	ldw	r2,-32(fp)
 8011324:	10800317 	ldw	r2,12(r2)
 8011328:	10000826 	beq	r2,zero,801134c <open+0xfc>
 801132c:	e0bff817 	ldw	r2,-32(fp)
 8011330:	10800317 	ldw	r2,12(r2)
 8011334:	e1ffff17 	ldw	r7,-4(fp)
 8011338:	e1bffe17 	ldw	r6,-8(fp)
 801133c:	e17ffd17 	ldw	r5,-12(fp)
 8011340:	e13ffc17 	ldw	r4,-16(fp)
 8011344:	103ee83a 	callr	r2
 8011348:	00000106 	br	8011350 <open+0x100>
 801134c:	0005883a 	mov	r2,zero
 8011350:	e0bffa15 	stw	r2,-24(fp)
 8011354:	00000206 	br	8011360 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8011358:	00bffb44 	movi	r2,-19
 801135c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8011360:	e0bffa17 	ldw	r2,-24(fp)
 8011364:	1000090e 	bge	r2,zero,801138c <open+0x13c>
  {
    alt_release_fd (index);  
 8011368:	e13ff917 	ldw	r4,-28(fp)
 801136c:	800fbb80 	call	800fbb8 <alt_release_fd>
    ALT_ERRNO = -status;
 8011370:	80111500 	call	8011150 <alt_get_errno>
 8011374:	1007883a 	mov	r3,r2
 8011378:	e0bffa17 	ldw	r2,-24(fp)
 801137c:	0085c83a 	sub	r2,zero,r2
 8011380:	18800015 	stw	r2,0(r3)
    return -1;
 8011384:	00bfffc4 	movi	r2,-1
 8011388:	00000106 	br	8011390 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 801138c:	e0bff917 	ldw	r2,-28(fp)
}
 8011390:	e037883a 	mov	sp,fp
 8011394:	dfc00117 	ldw	ra,4(sp)
 8011398:	df000017 	ldw	fp,0(sp)
 801139c:	dec00204 	addi	sp,sp,8
 80113a0:	f800283a 	ret

080113a4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80113a4:	defffa04 	addi	sp,sp,-24
 80113a8:	df000515 	stw	fp,20(sp)
 80113ac:	df000504 	addi	fp,sp,20
 80113b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80113b4:	0005303a 	rdctl	r2,status
 80113b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80113bc:	e0fffc17 	ldw	r3,-16(fp)
 80113c0:	00bfff84 	movi	r2,-2
 80113c4:	1884703a 	and	r2,r3,r2
 80113c8:	1001703a 	wrctl	status,r2
  
  return context;
 80113cc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80113d0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80113d4:	e0bfff17 	ldw	r2,-4(fp)
 80113d8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80113dc:	e0bffd17 	ldw	r2,-12(fp)
 80113e0:	10800017 	ldw	r2,0(r2)
 80113e4:	e0fffd17 	ldw	r3,-12(fp)
 80113e8:	18c00117 	ldw	r3,4(r3)
 80113ec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80113f0:	e0bffd17 	ldw	r2,-12(fp)
 80113f4:	10800117 	ldw	r2,4(r2)
 80113f8:	e0fffd17 	ldw	r3,-12(fp)
 80113fc:	18c00017 	ldw	r3,0(r3)
 8011400:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8011404:	e0bffd17 	ldw	r2,-12(fp)
 8011408:	e0fffd17 	ldw	r3,-12(fp)
 801140c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8011410:	e0bffd17 	ldw	r2,-12(fp)
 8011414:	e0fffd17 	ldw	r3,-12(fp)
 8011418:	10c00015 	stw	r3,0(r2)
 801141c:	e0bffb17 	ldw	r2,-20(fp)
 8011420:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011424:	e0bffe17 	ldw	r2,-8(fp)
 8011428:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 801142c:	0001883a 	nop
 8011430:	e037883a 	mov	sp,fp
 8011434:	df000017 	ldw	fp,0(sp)
 8011438:	dec00104 	addi	sp,sp,4
 801143c:	f800283a 	ret

08011440 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8011440:	defffb04 	addi	sp,sp,-20
 8011444:	dfc00415 	stw	ra,16(sp)
 8011448:	df000315 	stw	fp,12(sp)
 801144c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8011450:	d0a01117 	ldw	r2,-32700(gp)
 8011454:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8011458:	d0a6ed17 	ldw	r2,-25676(gp)
 801145c:	10800044 	addi	r2,r2,1
 8011460:	d0a6ed15 	stw	r2,-25676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8011464:	00002e06 	br	8011520 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8011468:	e0bffd17 	ldw	r2,-12(fp)
 801146c:	10800017 	ldw	r2,0(r2)
 8011470:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8011474:	e0bffd17 	ldw	r2,-12(fp)
 8011478:	10800403 	ldbu	r2,16(r2)
 801147c:	10803fcc 	andi	r2,r2,255
 8011480:	10000426 	beq	r2,zero,8011494 <alt_tick+0x54>
 8011484:	d0a6ed17 	ldw	r2,-25676(gp)
 8011488:	1000021e 	bne	r2,zero,8011494 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801148c:	e0bffd17 	ldw	r2,-12(fp)
 8011490:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8011494:	e0bffd17 	ldw	r2,-12(fp)
 8011498:	10800217 	ldw	r2,8(r2)
 801149c:	d0e6ed17 	ldw	r3,-25676(gp)
 80114a0:	18801d36 	bltu	r3,r2,8011518 <alt_tick+0xd8>
 80114a4:	e0bffd17 	ldw	r2,-12(fp)
 80114a8:	10800403 	ldbu	r2,16(r2)
 80114ac:	10803fcc 	andi	r2,r2,255
 80114b0:	1000191e 	bne	r2,zero,8011518 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80114b4:	e0bffd17 	ldw	r2,-12(fp)
 80114b8:	10800317 	ldw	r2,12(r2)
 80114bc:	e0fffd17 	ldw	r3,-12(fp)
 80114c0:	18c00517 	ldw	r3,20(r3)
 80114c4:	1809883a 	mov	r4,r3
 80114c8:	103ee83a 	callr	r2
 80114cc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80114d0:	e0bfff17 	ldw	r2,-4(fp)
 80114d4:	1000031e 	bne	r2,zero,80114e4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80114d8:	e13ffd17 	ldw	r4,-12(fp)
 80114dc:	80113a40 	call	80113a4 <alt_alarm_stop>
 80114e0:	00000d06 	br	8011518 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80114e4:	e0bffd17 	ldw	r2,-12(fp)
 80114e8:	10c00217 	ldw	r3,8(r2)
 80114ec:	e0bfff17 	ldw	r2,-4(fp)
 80114f0:	1887883a 	add	r3,r3,r2
 80114f4:	e0bffd17 	ldw	r2,-12(fp)
 80114f8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80114fc:	e0bffd17 	ldw	r2,-12(fp)
 8011500:	10c00217 	ldw	r3,8(r2)
 8011504:	d0a6ed17 	ldw	r2,-25676(gp)
 8011508:	1880032e 	bgeu	r3,r2,8011518 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 801150c:	e0bffd17 	ldw	r2,-12(fp)
 8011510:	00c00044 	movi	r3,1
 8011514:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8011518:	e0bffe17 	ldw	r2,-8(fp)
 801151c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8011520:	e0fffd17 	ldw	r3,-12(fp)
 8011524:	d0a01104 	addi	r2,gp,-32700
 8011528:	18bfcf1e 	bne	r3,r2,8011468 <__alt_data_end+0xff011468>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 801152c:	0001883a 	nop
}
 8011530:	0001883a 	nop
 8011534:	e037883a 	mov	sp,fp
 8011538:	dfc00117 	ldw	ra,4(sp)
 801153c:	df000017 	ldw	fp,0(sp)
 8011540:	dec00204 	addi	sp,sp,8
 8011544:	f800283a 	ret

08011548 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8011548:	deffff04 	addi	sp,sp,-4
 801154c:	df000015 	stw	fp,0(sp)
 8011550:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8011554:	000170fa 	wrctl	ienable,zero
}
 8011558:	0001883a 	nop
 801155c:	e037883a 	mov	sp,fp
 8011560:	df000017 	ldw	fp,0(sp)
 8011564:	dec00104 	addi	sp,sp,4
 8011568:	f800283a 	ret

0801156c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 801156c:	defffa04 	addi	sp,sp,-24
 8011570:	dfc00515 	stw	ra,20(sp)
 8011574:	df000415 	stw	fp,16(sp)
 8011578:	df000404 	addi	fp,sp,16
 801157c:	e13ffe15 	stw	r4,-8(fp)
 8011580:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8011584:	e0bfff17 	ldw	r2,-4(fp)
 8011588:	10800017 	ldw	r2,0(r2)
 801158c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8011590:	e13ffe17 	ldw	r4,-8(fp)
 8011594:	8009c840 	call	8009c84 <strlen>
 8011598:	10800044 	addi	r2,r2,1
 801159c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80115a0:	00000d06 	br	80115d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80115a4:	e0bffc17 	ldw	r2,-16(fp)
 80115a8:	10800217 	ldw	r2,8(r2)
 80115ac:	e0fffd17 	ldw	r3,-12(fp)
 80115b0:	180d883a 	mov	r6,r3
 80115b4:	e17ffe17 	ldw	r5,-8(fp)
 80115b8:	1009883a 	mov	r4,r2
 80115bc:	80119200 	call	8011920 <memcmp>
 80115c0:	1000021e 	bne	r2,zero,80115cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80115c4:	e0bffc17 	ldw	r2,-16(fp)
 80115c8:	00000706 	br	80115e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80115cc:	e0bffc17 	ldw	r2,-16(fp)
 80115d0:	10800017 	ldw	r2,0(r2)
 80115d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80115d8:	e0fffc17 	ldw	r3,-16(fp)
 80115dc:	e0bfff17 	ldw	r2,-4(fp)
 80115e0:	18bff01e 	bne	r3,r2,80115a4 <__alt_data_end+0xff0115a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80115e4:	0005883a 	mov	r2,zero
}
 80115e8:	e037883a 	mov	sp,fp
 80115ec:	dfc00117 	ldw	ra,4(sp)
 80115f0:	df000017 	ldw	fp,0(sp)
 80115f4:	dec00204 	addi	sp,sp,8
 80115f8:	f800283a 	ret

080115fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80115fc:	defffb04 	addi	sp,sp,-20
 8011600:	dfc00415 	stw	ra,16(sp)
 8011604:	df000315 	stw	fp,12(sp)
 8011608:	df000304 	addi	fp,sp,12
 801160c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8011610:	d0a00917 	ldw	r2,-32732(gp)
 8011614:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011618:	00003106 	br	80116e0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 801161c:	e0bffd17 	ldw	r2,-12(fp)
 8011620:	10800217 	ldw	r2,8(r2)
 8011624:	1009883a 	mov	r4,r2
 8011628:	8009c840 	call	8009c84 <strlen>
 801162c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8011630:	e0bffd17 	ldw	r2,-12(fp)
 8011634:	10c00217 	ldw	r3,8(r2)
 8011638:	e0bffe17 	ldw	r2,-8(fp)
 801163c:	10bfffc4 	addi	r2,r2,-1
 8011640:	1885883a 	add	r2,r3,r2
 8011644:	10800003 	ldbu	r2,0(r2)
 8011648:	10803fcc 	andi	r2,r2,255
 801164c:	1080201c 	xori	r2,r2,128
 8011650:	10bfe004 	addi	r2,r2,-128
 8011654:	10800bd8 	cmpnei	r2,r2,47
 8011658:	1000031e 	bne	r2,zero,8011668 <alt_find_file+0x6c>
    {
      len -= 1;
 801165c:	e0bffe17 	ldw	r2,-8(fp)
 8011660:	10bfffc4 	addi	r2,r2,-1
 8011664:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011668:	e0bffe17 	ldw	r2,-8(fp)
 801166c:	e0ffff17 	ldw	r3,-4(fp)
 8011670:	1885883a 	add	r2,r3,r2
 8011674:	10800003 	ldbu	r2,0(r2)
 8011678:	10803fcc 	andi	r2,r2,255
 801167c:	1080201c 	xori	r2,r2,128
 8011680:	10bfe004 	addi	r2,r2,-128
 8011684:	10800be0 	cmpeqi	r2,r2,47
 8011688:	1000081e 	bne	r2,zero,80116ac <alt_find_file+0xb0>
 801168c:	e0bffe17 	ldw	r2,-8(fp)
 8011690:	e0ffff17 	ldw	r3,-4(fp)
 8011694:	1885883a 	add	r2,r3,r2
 8011698:	10800003 	ldbu	r2,0(r2)
 801169c:	10803fcc 	andi	r2,r2,255
 80116a0:	1080201c 	xori	r2,r2,128
 80116a4:	10bfe004 	addi	r2,r2,-128
 80116a8:	10000a1e 	bne	r2,zero,80116d4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80116ac:	e0bffd17 	ldw	r2,-12(fp)
 80116b0:	10800217 	ldw	r2,8(r2)
 80116b4:	e0fffe17 	ldw	r3,-8(fp)
 80116b8:	180d883a 	mov	r6,r3
 80116bc:	e17fff17 	ldw	r5,-4(fp)
 80116c0:	1009883a 	mov	r4,r2
 80116c4:	80119200 	call	8011920 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80116c8:	1000021e 	bne	r2,zero,80116d4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80116cc:	e0bffd17 	ldw	r2,-12(fp)
 80116d0:	00000706 	br	80116f0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 80116d4:	e0bffd17 	ldw	r2,-12(fp)
 80116d8:	10800017 	ldw	r2,0(r2)
 80116dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80116e0:	e0fffd17 	ldw	r3,-12(fp)
 80116e4:	d0a00904 	addi	r2,gp,-32732
 80116e8:	18bfcc1e 	bne	r3,r2,801161c <__alt_data_end+0xff01161c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80116ec:	0005883a 	mov	r2,zero
}
 80116f0:	e037883a 	mov	sp,fp
 80116f4:	dfc00117 	ldw	ra,4(sp)
 80116f8:	df000017 	ldw	fp,0(sp)
 80116fc:	dec00204 	addi	sp,sp,8
 8011700:	f800283a 	ret

08011704 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8011704:	defffc04 	addi	sp,sp,-16
 8011708:	df000315 	stw	fp,12(sp)
 801170c:	df000304 	addi	fp,sp,12
 8011710:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8011714:	00bffa04 	movi	r2,-24
 8011718:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801171c:	e03ffd15 	stw	zero,-12(fp)
 8011720:	00001906 	br	8011788 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8011724:	00820074 	movhi	r2,2049
 8011728:	108a2e04 	addi	r2,r2,10424
 801172c:	e0fffd17 	ldw	r3,-12(fp)
 8011730:	18c00324 	muli	r3,r3,12
 8011734:	10c5883a 	add	r2,r2,r3
 8011738:	10800017 	ldw	r2,0(r2)
 801173c:	10000f1e 	bne	r2,zero,801177c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 8011740:	00820074 	movhi	r2,2049
 8011744:	108a2e04 	addi	r2,r2,10424
 8011748:	e0fffd17 	ldw	r3,-12(fp)
 801174c:	18c00324 	muli	r3,r3,12
 8011750:	10c5883a 	add	r2,r2,r3
 8011754:	e0ffff17 	ldw	r3,-4(fp)
 8011758:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 801175c:	d0e00d17 	ldw	r3,-32716(gp)
 8011760:	e0bffd17 	ldw	r2,-12(fp)
 8011764:	1880020e 	bge	r3,r2,8011770 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8011768:	e0bffd17 	ldw	r2,-12(fp)
 801176c:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
 8011770:	e0bffd17 	ldw	r2,-12(fp)
 8011774:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8011778:	00000606 	br	8011794 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801177c:	e0bffd17 	ldw	r2,-12(fp)
 8011780:	10800044 	addi	r2,r2,1
 8011784:	e0bffd15 	stw	r2,-12(fp)
 8011788:	e0bffd17 	ldw	r2,-12(fp)
 801178c:	10800810 	cmplti	r2,r2,32
 8011790:	103fe41e 	bne	r2,zero,8011724 <__alt_data_end+0xff011724>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8011794:	e0bffe17 	ldw	r2,-8(fp)
}
 8011798:	e037883a 	mov	sp,fp
 801179c:	df000017 	ldw	fp,0(sp)
 80117a0:	dec00104 	addi	sp,sp,4
 80117a4:	f800283a 	ret

080117a8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 80117a8:	defffb04 	addi	sp,sp,-20
 80117ac:	df000415 	stw	fp,16(sp)
 80117b0:	df000404 	addi	fp,sp,16
 80117b4:	e13ffe15 	stw	r4,-8(fp)
 80117b8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 80117bc:	e0bfff17 	ldw	r2,-4(fp)
 80117c0:	10840070 	cmpltui	r2,r2,4097
 80117c4:	1000021e 	bne	r2,zero,80117d0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 80117c8:	00840004 	movi	r2,4096
 80117cc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 80117d0:	e0fffe17 	ldw	r3,-8(fp)
 80117d4:	e0bfff17 	ldw	r2,-4(fp)
 80117d8:	1885883a 	add	r2,r3,r2
 80117dc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80117e0:	e0bffe17 	ldw	r2,-8(fp)
 80117e4:	e0bffc15 	stw	r2,-16(fp)
 80117e8:	00000506 	br	8011800 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 80117ec:	e0bffc17 	ldw	r2,-16(fp)
 80117f0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80117f4:	e0bffc17 	ldw	r2,-16(fp)
 80117f8:	10800804 	addi	r2,r2,32
 80117fc:	e0bffc15 	stw	r2,-16(fp)
 8011800:	e0fffc17 	ldw	r3,-16(fp)
 8011804:	e0bffd17 	ldw	r2,-12(fp)
 8011808:	18bff836 	bltu	r3,r2,80117ec <__alt_data_end+0xff0117ec>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 801180c:	e0bffe17 	ldw	r2,-8(fp)
 8011810:	108007cc 	andi	r2,r2,31
 8011814:	10000226 	beq	r2,zero,8011820 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8011818:	e0bffc17 	ldw	r2,-16(fp)
 801181c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8011820:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8011824:	0001883a 	nop
 8011828:	e037883a 	mov	sp,fp
 801182c:	df000017 	ldw	fp,0(sp)
 8011830:	dec00104 	addi	sp,sp,4
 8011834:	f800283a 	ret

08011838 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8011838:	defffe04 	addi	sp,sp,-8
 801183c:	df000115 	stw	fp,4(sp)
 8011840:	df000104 	addi	fp,sp,4
 8011844:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8011848:	e0bfff17 	ldw	r2,-4(fp)
 801184c:	10bffe84 	addi	r2,r2,-6
 8011850:	10c00428 	cmpgeui	r3,r2,16
 8011854:	18001a1e 	bne	r3,zero,80118c0 <alt_exception_cause_generated_bad_addr+0x88>
 8011858:	100690ba 	slli	r3,r2,2
 801185c:	00820074 	movhi	r2,2049
 8011860:	10861c04 	addi	r2,r2,6256
 8011864:	1885883a 	add	r2,r3,r2
 8011868:	10800017 	ldw	r2,0(r2)
 801186c:	1000683a 	jmp	r2
 8011870:	080118b0 	cmpltui	zero,at,1122
 8011874:	080118b0 	cmpltui	zero,at,1122
 8011878:	080118c0 	call	80118c <__alt_mem_onchip_memory2_0+0x80118c>
 801187c:	080118c0 	call	80118c <__alt_mem_onchip_memory2_0+0x80118c>
 8011880:	080118c0 	call	80118c <__alt_mem_onchip_memory2_0+0x80118c>
 8011884:	080118b0 	cmpltui	zero,at,1122
 8011888:	080118b8 	rdprs	zero,at,1122
 801188c:	080118c0 	call	80118c <__alt_mem_onchip_memory2_0+0x80118c>
 8011890:	080118b0 	cmpltui	zero,at,1122
 8011894:	080118b0 	cmpltui	zero,at,1122
 8011898:	080118c0 	call	80118c <__alt_mem_onchip_memory2_0+0x80118c>
 801189c:	080118b0 	cmpltui	zero,at,1122
 80118a0:	080118b8 	rdprs	zero,at,1122
 80118a4:	080118c0 	call	80118c <__alt_mem_onchip_memory2_0+0x80118c>
 80118a8:	080118c0 	call	80118c <__alt_mem_onchip_memory2_0+0x80118c>
 80118ac:	080118b0 	cmpltui	zero,at,1122
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80118b0:	00800044 	movi	r2,1
 80118b4:	00000306 	br	80118c4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80118b8:	0005883a 	mov	r2,zero
 80118bc:	00000106 	br	80118c4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80118c0:	0005883a 	mov	r2,zero
  }
}
 80118c4:	e037883a 	mov	sp,fp
 80118c8:	df000017 	ldw	fp,0(sp)
 80118cc:	dec00104 	addi	sp,sp,4
 80118d0:	f800283a 	ret

080118d4 <atexit>:
 80118d4:	200b883a 	mov	r5,r4
 80118d8:	000f883a 	mov	r7,zero
 80118dc:	000d883a 	mov	r6,zero
 80118e0:	0009883a 	mov	r4,zero
 80118e4:	801199c1 	jmpi	801199c <__register_exitproc>

080118e8 <exit>:
 80118e8:	defffe04 	addi	sp,sp,-8
 80118ec:	000b883a 	mov	r5,zero
 80118f0:	dc000015 	stw	r16,0(sp)
 80118f4:	dfc00115 	stw	ra,4(sp)
 80118f8:	2021883a 	mov	r16,r4
 80118fc:	8011ab40 	call	8011ab4 <__call_exitprocs>
 8011900:	00820074 	movhi	r2,2049
 8011904:	108ea904 	addi	r2,r2,15012
 8011908:	11000017 	ldw	r4,0(r2)
 801190c:	20800f17 	ldw	r2,60(r4)
 8011910:	10000126 	beq	r2,zero,8011918 <exit+0x30>
 8011914:	103ee83a 	callr	r2
 8011918:	8009883a 	mov	r4,r16
 801191c:	8011c340 	call	8011c34 <_exit>

08011920 <memcmp>:
 8011920:	01c000c4 	movi	r7,3
 8011924:	3980192e 	bgeu	r7,r6,801198c <memcmp+0x6c>
 8011928:	2144b03a 	or	r2,r4,r5
 801192c:	11c4703a 	and	r2,r2,r7
 8011930:	10000f26 	beq	r2,zero,8011970 <memcmp+0x50>
 8011934:	20800003 	ldbu	r2,0(r4)
 8011938:	28c00003 	ldbu	r3,0(r5)
 801193c:	10c0151e 	bne	r2,r3,8011994 <memcmp+0x74>
 8011940:	31bfff84 	addi	r6,r6,-2
 8011944:	01ffffc4 	movi	r7,-1
 8011948:	00000406 	br	801195c <memcmp+0x3c>
 801194c:	20800003 	ldbu	r2,0(r4)
 8011950:	28c00003 	ldbu	r3,0(r5)
 8011954:	31bfffc4 	addi	r6,r6,-1
 8011958:	10c00e1e 	bne	r2,r3,8011994 <memcmp+0x74>
 801195c:	21000044 	addi	r4,r4,1
 8011960:	29400044 	addi	r5,r5,1
 8011964:	31fff91e 	bne	r6,r7,801194c <__alt_data_end+0xff01194c>
 8011968:	0005883a 	mov	r2,zero
 801196c:	f800283a 	ret
 8011970:	20c00017 	ldw	r3,0(r4)
 8011974:	28800017 	ldw	r2,0(r5)
 8011978:	18bfee1e 	bne	r3,r2,8011934 <__alt_data_end+0xff011934>
 801197c:	31bfff04 	addi	r6,r6,-4
 8011980:	21000104 	addi	r4,r4,4
 8011984:	29400104 	addi	r5,r5,4
 8011988:	39bff936 	bltu	r7,r6,8011970 <__alt_data_end+0xff011970>
 801198c:	303fe91e 	bne	r6,zero,8011934 <__alt_data_end+0xff011934>
 8011990:	003ff506 	br	8011968 <__alt_data_end+0xff011968>
 8011994:	10c5c83a 	sub	r2,r2,r3
 8011998:	f800283a 	ret

0801199c <__register_exitproc>:
 801199c:	defffa04 	addi	sp,sp,-24
 80119a0:	dc000315 	stw	r16,12(sp)
 80119a4:	04020074 	movhi	r16,2049
 80119a8:	840ea904 	addi	r16,r16,15012
 80119ac:	80c00017 	ldw	r3,0(r16)
 80119b0:	dc400415 	stw	r17,16(sp)
 80119b4:	dfc00515 	stw	ra,20(sp)
 80119b8:	18805217 	ldw	r2,328(r3)
 80119bc:	2023883a 	mov	r17,r4
 80119c0:	10003726 	beq	r2,zero,8011aa0 <__register_exitproc+0x104>
 80119c4:	10c00117 	ldw	r3,4(r2)
 80119c8:	010007c4 	movi	r4,31
 80119cc:	20c00e16 	blt	r4,r3,8011a08 <__register_exitproc+0x6c>
 80119d0:	1a000044 	addi	r8,r3,1
 80119d4:	8800221e 	bne	r17,zero,8011a60 <__register_exitproc+0xc4>
 80119d8:	18c00084 	addi	r3,r3,2
 80119dc:	18c7883a 	add	r3,r3,r3
 80119e0:	18c7883a 	add	r3,r3,r3
 80119e4:	12000115 	stw	r8,4(r2)
 80119e8:	10c7883a 	add	r3,r2,r3
 80119ec:	19400015 	stw	r5,0(r3)
 80119f0:	0005883a 	mov	r2,zero
 80119f4:	dfc00517 	ldw	ra,20(sp)
 80119f8:	dc400417 	ldw	r17,16(sp)
 80119fc:	dc000317 	ldw	r16,12(sp)
 8011a00:	dec00604 	addi	sp,sp,24
 8011a04:	f800283a 	ret
 8011a08:	00800034 	movhi	r2,0
 8011a0c:	10800004 	addi	r2,r2,0
 8011a10:	10002626 	beq	r2,zero,8011aac <__register_exitproc+0x110>
 8011a14:	01006404 	movi	r4,400
 8011a18:	d9400015 	stw	r5,0(sp)
 8011a1c:	d9800115 	stw	r6,4(sp)
 8011a20:	d9c00215 	stw	r7,8(sp)
 8011a24:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011a28:	d9400017 	ldw	r5,0(sp)
 8011a2c:	d9800117 	ldw	r6,4(sp)
 8011a30:	d9c00217 	ldw	r7,8(sp)
 8011a34:	10001d26 	beq	r2,zero,8011aac <__register_exitproc+0x110>
 8011a38:	81000017 	ldw	r4,0(r16)
 8011a3c:	10000115 	stw	zero,4(r2)
 8011a40:	02000044 	movi	r8,1
 8011a44:	22405217 	ldw	r9,328(r4)
 8011a48:	0007883a 	mov	r3,zero
 8011a4c:	12400015 	stw	r9,0(r2)
 8011a50:	20805215 	stw	r2,328(r4)
 8011a54:	10006215 	stw	zero,392(r2)
 8011a58:	10006315 	stw	zero,396(r2)
 8011a5c:	883fde26 	beq	r17,zero,80119d8 <__alt_data_end+0xff0119d8>
 8011a60:	18c9883a 	add	r4,r3,r3
 8011a64:	2109883a 	add	r4,r4,r4
 8011a68:	1109883a 	add	r4,r2,r4
 8011a6c:	21802215 	stw	r6,136(r4)
 8011a70:	01800044 	movi	r6,1
 8011a74:	12406217 	ldw	r9,392(r2)
 8011a78:	30cc983a 	sll	r6,r6,r3
 8011a7c:	4992b03a 	or	r9,r9,r6
 8011a80:	12406215 	stw	r9,392(r2)
 8011a84:	21c04215 	stw	r7,264(r4)
 8011a88:	01000084 	movi	r4,2
 8011a8c:	893fd21e 	bne	r17,r4,80119d8 <__alt_data_end+0xff0119d8>
 8011a90:	11006317 	ldw	r4,396(r2)
 8011a94:	218cb03a 	or	r6,r4,r6
 8011a98:	11806315 	stw	r6,396(r2)
 8011a9c:	003fce06 	br	80119d8 <__alt_data_end+0xff0119d8>
 8011aa0:	18805304 	addi	r2,r3,332
 8011aa4:	18805215 	stw	r2,328(r3)
 8011aa8:	003fc606 	br	80119c4 <__alt_data_end+0xff0119c4>
 8011aac:	00bfffc4 	movi	r2,-1
 8011ab0:	003fd006 	br	80119f4 <__alt_data_end+0xff0119f4>

08011ab4 <__call_exitprocs>:
 8011ab4:	defff504 	addi	sp,sp,-44
 8011ab8:	df000915 	stw	fp,36(sp)
 8011abc:	dd400615 	stw	r21,24(sp)
 8011ac0:	dc800315 	stw	r18,12(sp)
 8011ac4:	dfc00a15 	stw	ra,40(sp)
 8011ac8:	ddc00815 	stw	r23,32(sp)
 8011acc:	dd800715 	stw	r22,28(sp)
 8011ad0:	dd000515 	stw	r20,20(sp)
 8011ad4:	dcc00415 	stw	r19,16(sp)
 8011ad8:	dc400215 	stw	r17,8(sp)
 8011adc:	dc000115 	stw	r16,4(sp)
 8011ae0:	d9000015 	stw	r4,0(sp)
 8011ae4:	2839883a 	mov	fp,r5
 8011ae8:	04800044 	movi	r18,1
 8011aec:	057fffc4 	movi	r21,-1
 8011af0:	00820074 	movhi	r2,2049
 8011af4:	108ea904 	addi	r2,r2,15012
 8011af8:	12000017 	ldw	r8,0(r2)
 8011afc:	45005217 	ldw	r20,328(r8)
 8011b00:	44c05204 	addi	r19,r8,328
 8011b04:	a0001c26 	beq	r20,zero,8011b78 <__call_exitprocs+0xc4>
 8011b08:	a0800117 	ldw	r2,4(r20)
 8011b0c:	15ffffc4 	addi	r23,r2,-1
 8011b10:	b8000d16 	blt	r23,zero,8011b48 <__call_exitprocs+0x94>
 8011b14:	14000044 	addi	r16,r2,1
 8011b18:	8421883a 	add	r16,r16,r16
 8011b1c:	8421883a 	add	r16,r16,r16
 8011b20:	84402004 	addi	r17,r16,128
 8011b24:	a463883a 	add	r17,r20,r17
 8011b28:	a421883a 	add	r16,r20,r16
 8011b2c:	e0001e26 	beq	fp,zero,8011ba8 <__call_exitprocs+0xf4>
 8011b30:	80804017 	ldw	r2,256(r16)
 8011b34:	e0801c26 	beq	fp,r2,8011ba8 <__call_exitprocs+0xf4>
 8011b38:	bdffffc4 	addi	r23,r23,-1
 8011b3c:	843fff04 	addi	r16,r16,-4
 8011b40:	8c7fff04 	addi	r17,r17,-4
 8011b44:	bd7ff91e 	bne	r23,r21,8011b2c <__alt_data_end+0xff011b2c>
 8011b48:	00800034 	movhi	r2,0
 8011b4c:	10800004 	addi	r2,r2,0
 8011b50:	10000926 	beq	r2,zero,8011b78 <__call_exitprocs+0xc4>
 8011b54:	a0800117 	ldw	r2,4(r20)
 8011b58:	1000301e 	bne	r2,zero,8011c1c <__call_exitprocs+0x168>
 8011b5c:	a0800017 	ldw	r2,0(r20)
 8011b60:	10003226 	beq	r2,zero,8011c2c <__call_exitprocs+0x178>
 8011b64:	a009883a 	mov	r4,r20
 8011b68:	98800015 	stw	r2,0(r19)
 8011b6c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011b70:	9d000017 	ldw	r20,0(r19)
 8011b74:	a03fe41e 	bne	r20,zero,8011b08 <__alt_data_end+0xff011b08>
 8011b78:	dfc00a17 	ldw	ra,40(sp)
 8011b7c:	df000917 	ldw	fp,36(sp)
 8011b80:	ddc00817 	ldw	r23,32(sp)
 8011b84:	dd800717 	ldw	r22,28(sp)
 8011b88:	dd400617 	ldw	r21,24(sp)
 8011b8c:	dd000517 	ldw	r20,20(sp)
 8011b90:	dcc00417 	ldw	r19,16(sp)
 8011b94:	dc800317 	ldw	r18,12(sp)
 8011b98:	dc400217 	ldw	r17,8(sp)
 8011b9c:	dc000117 	ldw	r16,4(sp)
 8011ba0:	dec00b04 	addi	sp,sp,44
 8011ba4:	f800283a 	ret
 8011ba8:	a0800117 	ldw	r2,4(r20)
 8011bac:	80c00017 	ldw	r3,0(r16)
 8011bb0:	10bfffc4 	addi	r2,r2,-1
 8011bb4:	15c01426 	beq	r2,r23,8011c08 <__call_exitprocs+0x154>
 8011bb8:	80000015 	stw	zero,0(r16)
 8011bbc:	183fde26 	beq	r3,zero,8011b38 <__alt_data_end+0xff011b38>
 8011bc0:	95c8983a 	sll	r4,r18,r23
 8011bc4:	a0806217 	ldw	r2,392(r20)
 8011bc8:	a5800117 	ldw	r22,4(r20)
 8011bcc:	2084703a 	and	r2,r4,r2
 8011bd0:	10000b26 	beq	r2,zero,8011c00 <__call_exitprocs+0x14c>
 8011bd4:	a0806317 	ldw	r2,396(r20)
 8011bd8:	2088703a 	and	r4,r4,r2
 8011bdc:	20000c1e 	bne	r4,zero,8011c10 <__call_exitprocs+0x15c>
 8011be0:	89400017 	ldw	r5,0(r17)
 8011be4:	d9000017 	ldw	r4,0(sp)
 8011be8:	183ee83a 	callr	r3
 8011bec:	a0800117 	ldw	r2,4(r20)
 8011bf0:	15bfbf1e 	bne	r2,r22,8011af0 <__alt_data_end+0xff011af0>
 8011bf4:	98800017 	ldw	r2,0(r19)
 8011bf8:	153fcf26 	beq	r2,r20,8011b38 <__alt_data_end+0xff011b38>
 8011bfc:	003fbc06 	br	8011af0 <__alt_data_end+0xff011af0>
 8011c00:	183ee83a 	callr	r3
 8011c04:	003ff906 	br	8011bec <__alt_data_end+0xff011bec>
 8011c08:	a5c00115 	stw	r23,4(r20)
 8011c0c:	003feb06 	br	8011bbc <__alt_data_end+0xff011bbc>
 8011c10:	89000017 	ldw	r4,0(r17)
 8011c14:	183ee83a 	callr	r3
 8011c18:	003ff406 	br	8011bec <__alt_data_end+0xff011bec>
 8011c1c:	a0800017 	ldw	r2,0(r20)
 8011c20:	a027883a 	mov	r19,r20
 8011c24:	1029883a 	mov	r20,r2
 8011c28:	003fb606 	br	8011b04 <__alt_data_end+0xff011b04>
 8011c2c:	0005883a 	mov	r2,zero
 8011c30:	003ffb06 	br	8011c20 <__alt_data_end+0xff011c20>

08011c34 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8011c34:	defffd04 	addi	sp,sp,-12
 8011c38:	df000215 	stw	fp,8(sp)
 8011c3c:	df000204 	addi	fp,sp,8
 8011c40:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8011c44:	0001883a 	nop
 8011c48:	e0bfff17 	ldw	r2,-4(fp)
 8011c4c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8011c50:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8011c54:	10000226 	beq	r2,zero,8011c60 <_exit+0x2c>
    ALT_SIM_FAIL();
 8011c58:	002af070 	cmpltui	zero,zero,43969
 8011c5c:	00000106 	br	8011c64 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8011c60:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8011c64:	003fff06 	br	8011c64 <__alt_data_end+0xff011c64>
