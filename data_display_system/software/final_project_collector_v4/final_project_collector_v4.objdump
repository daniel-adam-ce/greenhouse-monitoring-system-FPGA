
final_project_collector_v4.elf:     file format elf32-littlenios2
final_project_collector_v4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011d20 memsz 0x00011d20 flags r-x
    LOAD off    0x00012d40 vaddr 0x08011d40 paddr 0x0801386c align 2**12
         filesz 0x00001b2c memsz 0x00001b2c flags rw-
    LOAD off    0x00015398 vaddr 0x08015398 paddr 0x08015398 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001172c  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003d0  08011970  08011970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b2c  08011d40  0801386c  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  08015398  08015398  00015398  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001486c  2**0
                  CONTENTS
  7 .new_sdram_controller_0 00000000  080154fc  080154fc  0001486c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001486c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fa8  00000000  00000000  00014890  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000267cb  00000000  00000000  00015838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009c48  00000000  00000000  0003c003  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c225  00000000  00000000  00045c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002844  00000000  00000000  00051e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004365  00000000  00000000  000546b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017b0d  00000000  00000000  00058a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00070528  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001920  00000000  00000000  00070588  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007597a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007597d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00075989  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007598a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007598b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007598f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00075993  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00075997  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000759a2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000759ad  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000759b8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000024  00000000  00000000  000759c3  2**0
                  CONTENTS, READONLY
 30 .jdi          00004c25  00000000  00000000  000759e7  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007d5b9  00000000  00000000  0007a60c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
08011970 l    d  .rodata	00000000 .rodata
08011d40 l    d  .rwdata	00000000 .rwdata
08015398 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
080154fc l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_collector_v4_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011a5a l     O .rodata	00000010 zeroes.4404
080029d8 l     F .text	000000bc __sbprintf
08011a6a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08002be8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004718 l     F .text	00000008 __fp_unlock
0800472c l     F .text	0000019c __sinit.part.1
080048c8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08011d40 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08012184 l     O .rwdata	00000020 lc_ctype_charset
08012164 l     O .rwdata	00000020 lc_message_charset
080121a4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08011a9c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08007e2c l     F .text	000000fc __sprint_r.part.0
08011bd0 l     O .rodata	00000010 blanks.4348
08011bc0 l     O .rodata	00000010 zeroes.4349
080093b8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800d074 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800d180 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800d1ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0800d418 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800d4f8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d5e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800d7b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08013858 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800da04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800db38 l     F .text	00000034 alt_dev_reg
0801278c l     O .rwdata	00000038 i2c_0
080127c4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0800dc14 l     F .text	00000110 optional_irq_callback
0800dd74 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800fa38 l     F .text	0000020c altera_avalon_jtag_uart_irq
0800fc44 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0801027c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0801063c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08010b40 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
08010c80 l     F .text	0000003c alt_get_errno
08010cbc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080153d0 g     O .bss	00000004 alt_instruction_exception_handler
08000640 g     F .text	00000018 putchar
08007308 g     F .text	00000074 _mprec_log10
080073f4 g     F .text	0000008c __any_on
08009aac g     F .text	00000054 _isatty_r
08011aa8 g     O .rodata	00000028 __mprec_tinytens
0800d6f4 g     F .text	0000007c alt_main
08000658 g     F .text	000000c0 _puts_r
080153fc g     O .bss	00000100 alt_irq
08009b00 g     F .text	00000060 _lseek_r
0801386c g       *ABS*	00000000 __flash_rwdata_start
0800bba0 g     F .text	00000088 .hidden __eqdf2
080154fc g       *ABS*	00000000 __alt_heap_start
080005fc g     F .text	0000003c printf
08009bc0 g     F .text	0000009c _wcrtomb_r
08007cec g     F .text	0000005c __sseek
08004a68 g     F .text	00000010 __sinit
08009474 g     F .text	00000140 __swbuf_r
08005530 g     F .text	0000007c _setlocale_r
080048d0 g     F .text	00000068 __sfmoreglue
0800e46c g     F .text	000000a8 alt_avalon_i2c_rx_read
08000474 g     F .text	00000060 spi_int_handler
0800d794 g     F .text	00000024 __malloc_unlock
0800f66c g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0800e1f0 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
08006200 g     F .text	0000015c memmove
08004a50 g     F .text	00000018 _cleanup
080003b4 g     F .text	000000c0 readTransReg
0800eec8 g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
08006484 g     F .text	000000a8 _Balloc
0800bc28 g     F .text	000000dc .hidden __gtdf2
080112e0 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08009a50 g     F .text	0000005c _fstat_r
080153b4 g     O .bss	00000004 errno
08007c68 g     F .text	00000008 __seofread
080153c0 g     O .bss	00000004 alt_argv
0801b824 g       *ABS*	00000000 _gp
0800f6b0 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0800e380 g     F .text	00000044 alt_avalon_i2c_is_busy
0801260c g     O .rwdata	00000180 alt_fd_list
08000638 g     F .text	00000008 _putchar_r
0800e124 g     F .text	000000cc alt_avalon_i2c_master_config_set
080107dc g     F .text	00000090 alt_find_dev
080060b8 g     F .text	00000148 memcpy
08004720 g     F .text	0000000c _cleanup_r
0800ce8c g     F .text	000000dc .hidden __floatsidf
08010c04 g     F .text	0000007c alt_io_redirect
0800bd04 g     F .text	000000f4 .hidden __ltdf2
08011970 g       *ABS*	00000000 __DTOR_END__
0800ed0c g     F .text	000001bc alt_avalon_i2c_master_transmit
08000718 g     F .text	00000014 puts
08011540 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08007b4c g     F .text	00000074 __fpclassifyd
08007264 g     F .text	000000a4 __ratio
0800939c g     F .text	0000001c __vfiprintf_internal
0800fe3c g     F .text	0000021c altera_avalon_jtag_uart_read
080005cc g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800a950 g     F .text	00000064 .hidden __udivsi3
0800d454 g     F .text	000000a4 isatty
08011af8 g     O .rodata	000000c8 __mprec_tens
080055ac g     F .text	0000000c __locale_charset
080114b0 g     F .text	00000090 alt_icache_flush
0800df90 g     F .text	00000098 alt_avalon_i2c_enable
080153b0 g     O .bss	00000004 __malloc_top_pad
0800f5a0 g     F .text	00000068 alt_avalon_i2c_int_disable
0801382c g     O .rwdata	00000004 __mb_cur_max
080055dc g     F .text	0000000c _localeconv_r
08006890 g     F .text	0000003c __i2b
08004eec g     F .text	000004bc __sfvwrite_r
08007bc0 g     F .text	00000054 _sbrk_r
08009b60 g     F .text	00000060 _read_r
0801384c g     O .rwdata	00000004 alt_max_fd
08009744 g     F .text	000000f0 _fclose_r
080046e8 g     F .text	00000030 fflush
080153ac g     O .bss	00000004 __malloc_max_sbrked_mem
0800d298 g     F .text	00000180 alt_irq_register
0800f0d0 g     F .text	0000020c alt_avalon_i2c_master_receive
0800aa0c g     F .text	000008ac .hidden __adddf3
08000290 g     F .text	00000124 printSPIStatus
0800700c g     F .text	0000010c __b2d
0800a320 g     F .text	00000538 .hidden __umoddi3
0800d620 g     F .text	000000d4 lseek
0800f608 g     F .text	00000064 alt_avalon_i2c_int_enable
08013824 g     O .rwdata	00000004 _global_impure_ptr
080075e8 g     F .text	00000564 _realloc_r
080154fc g       *ABS*	00000000 __bss_end
08010a50 g     F .text	000000f0 alt_iic_isr_register
080111d8 g     F .text	00000108 alt_tick
08009da8 g     F .text	00000578 .hidden __udivdi3
0800f4c8 g     F .text	00000058 alt_avalon_i2c_int_status_get
080099ac g     F .text	00000024 _fputwc_r
08011ad0 g     O .rodata	00000028 __mprec_bigtens
08006674 g     F .text	00000104 __s2b
0800cf68 g     F .text	000000a8 .hidden __floatunsidf
08006d4c g     F .text	00000060 __mcmp
08015398 g     O .bss	00000001 message
08004a88 g     F .text	00000018 __fp_lock_all
08010a04 g     F .text	0000004c alt_ic_irq_enabled
0801113c g     F .text	0000009c alt_alarm_stop
0800de10 g     F .text	00000054 alt_avalon_i2c_register_callback
0800de64 g     F .text	000000ec alt_avalon_i2c_init
080153b8 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
080125e4 g     O .rwdata	00000028 alt_dev_null
080105f4 g     F .text	00000048 alt_dcache_flush_all
08006778 g     F .text	00000068 __hi0bits
0800ce0c g     F .text	00000080 .hidden __fixdfsi
0801386c g       *ABS*	00000000 __ram_rwdata_end
08013844 g     O .rwdata	00000008 alt_dev_list
0800da40 g     F .text	000000f8 write
08007480 g     F .text	000000a0 _putc_r
0800e7a0 g     F .text	0000004c alt_avalon_i2c_check_arblost
0800f564 g     F .text	0000003c alt_avalon_i2c_int_clear
08011d40 g       *ABS*	00000000 __ram_rodata_end
0800d1e8 g     F .text	000000b0 fstat
0800bd04 g     F .text	000000f4 .hidden __ledf2
0801385c g     O .rwdata	00000008 alt_avalon_i2c_list
08006ac4 g     F .text	00000140 __pow5mult
08007f40 g     F .text	0000145c ___vfiprintf_internal_r
080153a4 g     O .bss	00000004 __nlocale_changed
0800a9b4 g     F .text	00000058 .hidden __umodsi3
080154fc g       *ABS*	00000000 end
0800f978 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0800df50 g     F .text	00000040 alt_avalon_i2c_open
08011970 g       *ABS*	00000000 __CTOR_LIST__
09000000 g       *ABS*	00000000 __alt_stack_pointer
0800e920 g     F .text	000000e8 alt_avalon_i2c_master_tx
080102f4 g     F .text	0000007c alt_avalon_timer_sc_init
0800d010 g     F .text	00000064 .hidden __clzsi2
08010058 g     F .text	00000224 altera_avalon_jtag_uart_write
08004a78 g     F .text	00000004 __sfp_lock_acquire
08005fd4 g     F .text	000000e4 memchr
080007c4 g     F .text	000021f8 ___vfprintf_internal_r
08004bdc g     F .text	00000310 _free_r
08010ed4 g     F .text	0000022c alt_printf
080055b8 g     F .text	00000010 __locale_mb_cur_max
080117bc g     F .text	00000180 __call_exitprocs
080153a0 g     O .bss	00000004 __mlocale_changed
0800dd24 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
08013830 g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
080153c8 g     O .bss	00000004 _alt_tick_rate
0800f2dc g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
0800f6fc g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
08006c04 g     F .text	00000148 __lshift
080153cc g     O .bss	00000004 _alt_nticks
0800d7f4 g     F .text	000000fc read
0800dba4 g     F .text	00000070 alt_sys_init
080116a4 g     F .text	00000118 __register_exitproc
0800eb44 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
080068cc g     F .text	000001f8 __multiply
0800fce4 g     F .text	00000068 altera_avalon_jtag_uart_close
08011d40 g       *ABS*	00000000 __ram_rwdata_start
08011970 g       *ABS*	00000000 __ram_rodata_start
080153d4 g     O .bss	00000028 __malloc_current_mallinfo
08007118 g     F .text	0000014c __d2b
0800f814 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0801140c g     F .text	000000a4 alt_get_fd
0801049c g     F .text	00000158 alt_busy_sleep
0800962c g     F .text	00000054 _close_r
08011628 g     F .text	0000007c memcmp
0800e3c4 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
0800f8d4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080154fc g       *ABS*	00000000 __alt_stack_base
0800f924 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002a94 g     F .text	00000154 __swsetup_r
0800b2b8 g     F .text	000008e8 .hidden __divdf3
08004938 g     F .text	00000118 __sfp
0800737c g     F .text	00000078 __copybits
080121dc g     O .rwdata	00000408 __malloc_av_
08004a84 g     F .text	00000004 __sinit_lock_release
0800bdf8 g     F .text	00000718 .hidden __muldf3
08007c14 g     F .text	00000054 __sread
08011304 g     F .text	00000108 alt_find_file
08010678 g     F .text	000000a4 alt_dev_llist_insert
0800d770 g     F .text	00000024 __malloc_lock
0800d954 g     F .text	000000b0 sbrk
0800e7ec g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
0800e754 g     F .text	0000004c alt_avalon_i2c_check_nack
0800468c g     F .text	0000005c _fflush_r
08009680 g     F .text	000000c4 _calloc_r
08015398 g       *ABS*	00000000 __bss_start
0800635c g     F .text	00000128 memset
080004d4 g     F .text	000000f8 main
0800e720 g     F .text	00000034 alt_avalon_i2c_master_target_set
080153c4 g     O .bss	00000004 alt_envp
080153a8 g     O .bss	00000004 __malloc_max_total_mem
0800f874 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080095b4 g     F .text	00000018 __swbuf
0800f520 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
08007d48 g     F .text	00000008 __sclose
09000000 g       *ABS*	00000000 __alt_heap_limit
08009834 g     F .text	00000014 fclose
08002de8 g     F .text	00001688 _dtoa_r
080057c8 g     F .text	0000080c _malloc_r
08009d1c g     F .text	00000030 __ascii_wctomb
08013850 g     O .rwdata	00000004 alt_errno
080053a8 g     F .text	000000c4 _fwalk
08007520 g     F .text	000000c8 putc
0800a858 g     F .text	00000084 .hidden __divsi3
08004ab8 g     F .text	00000124 _malloc_trim_r
08011970 g       *ABS*	00000000 __CTOR_END__
08007d50 g     F .text	000000dc strcmp
08011970 g       *ABS*	00000000 __flash_rodata_start
08011970 g       *ABS*	00000000 __DTOR_LIST__
0800bba0 g     F .text	00000088 .hidden __nedf2
0800db6c g     F .text	00000038 alt_irq_init
0800d8f0 g     F .text	00000064 alt_release_fd
08011be0 g     O .rodata	00000100 .hidden __clz_tab
0801539c g     O .bss	00000004 _PathLocale
080115dc g     F .text	00000014 atexit
080095cc g     F .text	00000060 _write_r
080055e8 g     F .text	00000018 setlocale
08013828 g     O .rwdata	00000004 _impure_ptr
080153bc g     O .bss	00000004 alt_argc
08004470 g     F .text	0000021c __sflush_r
0801077c g     F .text	00000060 _do_dtors
080055d4 g     F .text	00000008 __locale_cjk_lang
0800e6e8 g     F .text	00000038 alt_avalon_i2c_master_target_get
0800e5f8 g     F .text	000000f0 alt_avalon_i2c_send_address
08000020 g       .exceptions	00000000 alt_irq_entry
08006fa8 g     F .text	00000064 __ulp
08004aa0 g     F .text	00000018 __fp_unlock_all
0801383c g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08005600 g     F .text	0000000c localeconv
08000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0800f7ac g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
080108a0 g     F .text	00000050 alt_ic_isr_register
0800e028 g     F .text	0000004c alt_avalon_i2c_disable
0801386c g       *ABS*	00000000 _edata
080154fc g       *ABS*	00000000 _end
08009848 g     F .text	00000164 __fputwc
08000244 g       *ABS*	00000000 __ram_exceptions_end
0800fd4c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0800e074 g     F .text	000000b0 alt_avalon_i2c_master_config_get
08010978 g     F .text	0000008c alt_ic_irq_disable
08007c70 g     F .text	0000007c __swrite
08013834 g     O .rwdata	00000004 __malloc_trim_threshold
080055c8 g     F .text	0000000c __locale_msgcharset
080115f0 g     F .text	00000038 exit
0800546c g     F .text	000000c4 _fwalk_reent
08006dac g     F .text	000001fc __mdiff
0800a8dc g     F .text	00000074 .hidden __modsi3
09000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004a7c g     F .text	00000004 __sfp_lock_release
0800e284 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0800e514 g     F .text	000000e4 alt_avalon_i2c_cmd_write
0801193c g     F .text	00000034 _exit
08010370 g     F .text	0000012c alt_alarm_start
0800560c g     F .text	000001bc __smakebuf_r
0800072c g     F .text	00000098 strlen
08010d80 g     F .text	00000154 open
0800bc28 g     F .text	000000dc .hidden __gedf2
08011100 g     F .text	0000003c alt_putchar
08013838 g     O .rwdata	00000004 __wctomb
08007f28 g     F .text	00000018 __sprint_r
0801086c g     F .text	00000034 alt_icache_flush_all
08013854 g     O .rwdata	00000004 alt_priority_mask
080108f0 g     F .text	00000088 alt_ic_irq_enable
080029bc g     F .text	0000001c __vfprintf_internal
08009d4c g     F .text	0000005c _wctomb_r
0800c510 g     F .text	000008fc .hidden __subdf3
080067e0 g     F .text	000000b0 __lo0bits
08013864 g     O .rwdata	00000008 alt_alarm_list
0801071c g     F .text	00000060 _do_ctors
08009c5c g     F .text	000000c0 wcrtomb
0800d0b0 g     F .text	000000d0 close
0800f760 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0800d560 g     F .text	00000084 alt_load
0800ea08 g     F .text	0000013c alt_avalon_i2c_master_rx
080099d0 g     F .text	00000080 fputwc
08004a80 g     F .text	00000004 __sinit_lock_acquire
08006554 g     F .text	00000120 __multadd
0800652c g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	1094ff04 	addi	r2,r2,21500
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	1094ff04 	addi	r2,r2,21500
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a6eb17 	ldw	r2,-25684(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a6eb17 	ldw	r2,-25684(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c24034 	movhi	sp,2304
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000260:	d6ae0914 	ori	gp,gp,47140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000268:	1094e614 	ori	r2,r2,21400

    movhi r3, %hi(__bss_end)
 800026c:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000270:	18d53f14 	ori	r3,r3,21756

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	800d5600 	call	800d560 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	800d6f40 	call	800d6f4 <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <__alt_data_end+0xff00028c>

08000290 <printSPIStatus>:
#include "sys/alt_irq.h"

int8_t message;

void printSPIStatus (int mask)
{
 8000290:	defffc04 	addi	sp,sp,-16
 8000294:	dfc00315 	stw	ra,12(sp)
 8000298:	df000215 	stw	fp,8(sp)
 800029c:	df000204 	addi	fp,sp,8
 80002a0:	e13fff15 	stw	r4,-4(fp)
	int status = IORD(SPI_0_BASE, 0x2);
 80002a4:	00881204 	movi	r2,8264
 80002a8:	10800037 	ldwio	r2,0(r2)
 80002ac:	e0bffe15 	stw	r2,-8(fp)
	printf("Status:\n");
 80002b0:	01020074 	movhi	r4,2049
 80002b4:	21065c04 	addi	r4,r4,6512
 80002b8:	80007180 	call	8000718 <puts>
	if(status & mask & (1 << 3))
 80002bc:	e0fffe17 	ldw	r3,-8(fp)
 80002c0:	e0bfff17 	ldw	r2,-4(fp)
 80002c4:	1884703a 	and	r2,r3,r2
 80002c8:	1080020c 	andi	r2,r2,8
 80002cc:	10000326 	beq	r2,zero,80002dc <printSPIStatus+0x4c>
		printf("\tReceive-overrun error\n");
 80002d0:	01020074 	movhi	r4,2049
 80002d4:	21065e04 	addi	r4,r4,6520
 80002d8:	80007180 	call	8000718 <puts>
	if(status & mask & (1 << 4))
 80002dc:	e0fffe17 	ldw	r3,-8(fp)
 80002e0:	e0bfff17 	ldw	r2,-4(fp)
 80002e4:	1884703a 	and	r2,r3,r2
 80002e8:	1080040c 	andi	r2,r2,16
 80002ec:	10000326 	beq	r2,zero,80002fc <printSPIStatus+0x6c>
		printf("\tTransmitter-overrun error\n");
 80002f0:	01020074 	movhi	r4,2049
 80002f4:	21066404 	addi	r4,r4,6544
 80002f8:	80007180 	call	8000718 <puts>
	if(status & mask & (1 << 5))
 80002fc:	e0fffe17 	ldw	r3,-8(fp)
 8000300:	e0bfff17 	ldw	r2,-4(fp)
 8000304:	1884703a 	and	r2,r3,r2
 8000308:	1080080c 	andi	r2,r2,32
 800030c:	10000326 	beq	r2,zero,800031c <printSPIStatus+0x8c>
		printf("\tTransmitter shift-register empty\n");
 8000310:	01020074 	movhi	r4,2049
 8000314:	21066b04 	addi	r4,r4,6572
 8000318:	80007180 	call	8000718 <puts>
	if(status & mask & (1 << 6))
 800031c:	e0fffe17 	ldw	r3,-8(fp)
 8000320:	e0bfff17 	ldw	r2,-4(fp)
 8000324:	1884703a 	and	r2,r3,r2
 8000328:	1080100c 	andi	r2,r2,64
 800032c:	10000326 	beq	r2,zero,800033c <printSPIStatus+0xac>
		printf("\tTransmitter ready\n");
 8000330:	01020074 	movhi	r4,2049
 8000334:	21067404 	addi	r4,r4,6608
 8000338:	80007180 	call	8000718 <puts>
	if(status & mask & (1 << 7))
 800033c:	e0fffe17 	ldw	r3,-8(fp)
 8000340:	e0bfff17 	ldw	r2,-4(fp)
 8000344:	1884703a 	and	r2,r3,r2
 8000348:	1080200c 	andi	r2,r2,128
 800034c:	10000326 	beq	r2,zero,800035c <printSPIStatus+0xcc>
		printf("\tReceiver ready\n");
 8000350:	01020074 	movhi	r4,2049
 8000354:	21067904 	addi	r4,r4,6628
 8000358:	80007180 	call	8000718 <puts>
	if(status & mask & (1 << 8))
 800035c:	e0fffe17 	ldw	r3,-8(fp)
 8000360:	e0bfff17 	ldw	r2,-4(fp)
 8000364:	1884703a 	and	r2,r3,r2
 8000368:	1080400c 	andi	r2,r2,256
 800036c:	10000326 	beq	r2,zero,800037c <printSPIStatus+0xec>
		printf("\tError\n");
 8000370:	01020074 	movhi	r4,2049
 8000374:	21067d04 	addi	r4,r4,6644
 8000378:	80007180 	call	8000718 <puts>
	if(status & mask & (1 << 9))
 800037c:	e0fffe17 	ldw	r3,-8(fp)
 8000380:	e0bfff17 	ldw	r2,-4(fp)
 8000384:	1884703a 	and	r2,r3,r2
 8000388:	1080800c 	andi	r2,r2,512
 800038c:	10000326 	beq	r2,zero,800039c <printSPIStatus+0x10c>
		printf("\tEnd of packet\n");
 8000390:	01020074 	movhi	r4,2049
 8000394:	21067f04 	addi	r4,r4,6652
 8000398:	80007180 	call	8000718 <puts>
}
 800039c:	0001883a 	nop
 80003a0:	e037883a 	mov	sp,fp
 80003a4:	dfc00117 	ldw	ra,4(sp)
 80003a8:	df000017 	ldw	fp,0(sp)
 80003ac:	dec00204 	addi	sp,sp,8
 80003b0:	f800283a 	ret

080003b4 <readTransReg>:

int8_t readTransReg (int8_t reg)
{
 80003b4:	defffb04 	addi	sp,sp,-20
 80003b8:	dfc00415 	stw	ra,16(sp)
 80003bc:	df000315 	stw	fp,12(sp)
 80003c0:	df000304 	addi	fp,sp,12
 80003c4:	2005883a 	mov	r2,r4
 80003c8:	e0bfff05 	stb	r2,-4(fp)
	int8_t temp;
	printSPIStatus(0b1111111000);
 80003cc:	0100fe04 	movi	r4,1016
 80003d0:	80002900 	call	8000290 <printSPIStatus>
	IOWR(SPI_0_BASE, 0x1, reg);
 80003d4:	e0ffff07 	ldb	r3,-4(fp)
 80003d8:	00881104 	movi	r2,8260
 80003dc:	10c00035 	stwio	r3,0(r2)
	for(int j = 0; j < 1000000; j++) {}
 80003e0:	e03ffd15 	stw	zero,-12(fp)
 80003e4:	00000306 	br	80003f4 <readTransReg+0x40>
 80003e8:	e0bffd17 	ldw	r2,-12(fp)
 80003ec:	10800044 	addi	r2,r2,1
 80003f0:	e0bffd15 	stw	r2,-12(fp)
 80003f4:	e0fffd17 	ldw	r3,-12(fp)
 80003f8:	008003f4 	movhi	r2,15
 80003fc:	10908fc4 	addi	r2,r2,16959
 8000400:	10fff90e 	bge	r2,r3,80003e8 <__alt_data_end+0xff0003e8>
	while(1)
	{
		if(IORD(SPI_0_BASE, 0x2) & 0b10000000)
 8000404:	00881204 	movi	r2,8264
 8000408:	10800037 	ldwio	r2,0(r2)
 800040c:	1080200c 	andi	r2,r2,128
 8000410:	103ffc26 	beq	r2,zero,8000404 <__alt_data_end+0xff000404>
		{
			printSPIStatus(0b1111111000);
 8000414:	0100fe04 	movi	r4,1016
 8000418:	80002900 	call	8000290 <printSPIStatus>
			temp = (int8_t)IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
 800041c:	00881004 	movi	r2,8256
 8000420:	10800037 	ldwio	r2,0(r2)
 8000424:	e0bffe05 	stb	r2,-8(fp)
			printf("%x\n", temp);
 8000428:	e0bffe07 	ldb	r2,-8(fp)
 800042c:	100b883a 	mov	r5,r2
 8000430:	01020074 	movhi	r4,2049
 8000434:	21068304 	addi	r4,r4,6668
 8000438:	80005fc0 	call	80005fc <printf>
			printSPIStatus(0b1111111000);
 800043c:	0100fe04 	movi	r4,1016
 8000440:	80002900 	call	8000290 <printSPIStatus>
			if(!(IORD(SPI_0_BASE, 0x2) & 0b10000000))
 8000444:	00881204 	movi	r2,8264
 8000448:	10800037 	ldwio	r2,0(r2)
 800044c:	1080200c 	andi	r2,r2,128
 8000450:	10000126 	beq	r2,zero,8000458 <readTransReg+0xa4>
				break;
		}
	}
 8000454:	003feb06 	br	8000404 <__alt_data_end+0xff000404>
			printSPIStatus(0b1111111000);
			temp = (int8_t)IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
			printf("%x\n", temp);
			printSPIStatus(0b1111111000);
			if(!(IORD(SPI_0_BASE, 0x2) & 0b10000000))
				break;
 8000458:	0001883a 	nop
		}
	}
	return temp;
 800045c:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000460:	e037883a 	mov	sp,fp
 8000464:	dfc00117 	ldw	ra,4(sp)
 8000468:	df000017 	ldw	fp,0(sp)
 800046c:	dec00204 	addi	sp,sp,8
 8000470:	f800283a 	ret

08000474 <spi_int_handler>:

void spi_int_handler()
{
 8000474:	defffe04 	addi	sp,sp,-8
 8000478:	dfc00115 	stw	ra,4(sp)
 800047c:	df000015 	stw	fp,0(sp)
 8000480:	d839883a 	mov	fp,sp

	/*while(IORD(SPI_0_BASE, 0x2) & (1 << 7))
	{
		message = IORD_8DIRECT(SPI_0_BASE, 0);
	}*/
	message = IORD_8DIRECT(SPI_0_BASE, 0);
 8000484:	00881004 	movi	r2,8256
 8000488:	10800023 	ldbuio	r2,0(r2)
 800048c:	10803fcc 	andi	r2,r2,255
 8000490:	d0a6dd05 	stb	r2,-25740(gp)
	/*for(int i = 0; i < 9; i++)
	{
		printf("%x\t", message[i]);
	}*/
	printf("%x\t", message);
 8000494:	d0a6dd03 	ldbu	r2,-25740(gp)
 8000498:	10803fcc 	andi	r2,r2,255
 800049c:	1080201c 	xori	r2,r2,128
 80004a0:	10bfe004 	addi	r2,r2,-128
 80004a4:	100b883a 	mov	r5,r2
 80004a8:	01020074 	movhi	r4,2049
 80004ac:	21068404 	addi	r4,r4,6672
 80004b0:	80005fc0 	call	80005fc <printf>
	printf("\n");
 80004b4:	01000284 	movi	r4,10
 80004b8:	80006400 	call	8000640 <putchar>
	//printSPIStatus(0xFF);
	//IOWR_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE, 0x0);
}
 80004bc:	0001883a 	nop
 80004c0:	e037883a 	mov	sp,fp
 80004c4:	dfc00117 	ldw	ra,4(sp)
 80004c8:	df000017 	ldw	fp,0(sp)
 80004cc:	dec00204 	addi	sp,sp,8
 80004d0:	f800283a 	ret

080004d4 <main>:

int main ()
{
 80004d4:	defffc04 	addi	sp,sp,-16
 80004d8:	dfc00315 	stw	ra,12(sp)
 80004dc:	df000215 	stw	fp,8(sp)
 80004e0:	df000204 	addi	fp,sp,8
	IOWR(SPI_0_BASE, 0x3, 0b10010000000);
 80004e4:	00c12004 	movi	r3,1152
 80004e8:	00881304 	movi	r2,8268
 80004ec:	10c00035 	stwio	r3,0(r2)
	IOWR(SPI_0_BASE, 0x6, 0xC0);
 80004f0:	00c03004 	movi	r3,192
 80004f4:	00881604 	movi	r2,8280
 80004f8:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(SPI_0_IRQ, SPI_0_BASE, spi_int_handler);
 80004fc:	01820034 	movhi	r6,2048
 8000500:	31811d04 	addi	r6,r6,1140
 8000504:	01481004 	movi	r5,8256
 8000508:	01000104 	movi	r4,4
 800050c:	800d2980 	call	800d298 <alt_irq_register>

	IOWR(SPI_0_BASE, 0x5, 1);
 8000510:	00c00044 	movi	r3,1
 8000514:	00881504 	movi	r2,8276
 8000518:	10c00035 	stwio	r3,0(r2)
	IOWR(SPI_CE_BASE, 0x0, 0);
 800051c:	0007883a 	mov	r3,zero
 8000520:	00882404 	movi	r2,8336
 8000524:	10c00035 	stwio	r3,0(r2)
	for(int j = 0; j < 10000000; j++) {}
 8000528:	e03ffe15 	stw	zero,-8(fp)
 800052c:	00000306 	br	800053c <main+0x68>
 8000530:	e0bffe17 	ldw	r2,-8(fp)
 8000534:	10800044 	addi	r2,r2,1
 8000538:	e0bffe15 	stw	r2,-8(fp)
 800053c:	e0fffe17 	ldw	r3,-8(fp)
 8000540:	00802674 	movhi	r2,153
 8000544:	10a59fc4 	addi	r2,r2,-27009
 8000548:	10fff90e 	bge	r2,r3,8000530 <__alt_data_end+0xff000530>
	printSPIStatus(0xFF);
 800054c:	01003fc4 	movi	r4,255
 8000550:	80002900 	call	8000290 <printSPIStatus>
	IOWR(SPI_0_BASE, 0x1, 0x6);
 8000554:	00c00184 	movi	r3,6
 8000558:	00881104 	movi	r2,8260
 800055c:	10c00035 	stwio	r3,0(r2)
	IOWR(SPI_0_BASE, 0x1, 0x6);
 8000560:	00c00184 	movi	r3,6
 8000564:	00881104 	movi	r2,8260
 8000568:	10c00035 	stwio	r3,0(r2)
	IOWR(SPI_0_BASE, 0x1, 0xC0);
 800056c:	00c03004 	movi	r3,192
 8000570:	00881104 	movi	r2,8260
 8000574:	10c00035 	stwio	r3,0(r2)
	for(int j = 0; j < 1000000; j++) {}
 8000578:	e03fff15 	stw	zero,-4(fp)
 800057c:	00000306 	br	800058c <main+0xb8>
 8000580:	e0bfff17 	ldw	r2,-4(fp)
 8000584:	10800044 	addi	r2,r2,1
 8000588:	e0bfff15 	stw	r2,-4(fp)
 800058c:	e0ffff17 	ldw	r3,-4(fp)
 8000590:	008003f4 	movhi	r2,15
 8000594:	10908fc4 	addi	r2,r2,16959
 8000598:	10fff90e 	bge	r2,r3,8000580 <__alt_data_end+0xff000580>
	IOWR(SPI_0_BASE, 0x1, 0x6);
 800059c:	00c00184 	movi	r3,6
 80005a0:	00881104 	movi	r2,8260
 80005a4:	10c00035 	stwio	r3,0(r2)
	IOWR(SPI_0_BASE, 0x1, 0xC0);
 80005a8:	00c03004 	movi	r3,192
 80005ac:	00881104 	movi	r2,8260
 80005b0:	10c00035 	stwio	r3,0(r2)
 80005b4:	0005883a 	mov	r2,zero

	//readTransReg((int8_t)(0x7));
}
 80005b8:	e037883a 	mov	sp,fp
 80005bc:	dfc00117 	ldw	ra,4(sp)
 80005c0:	df000017 	ldw	fp,0(sp)
 80005c4:	dec00204 	addi	sp,sp,8
 80005c8:	f800283a 	ret

080005cc <_printf_r>:
 80005cc:	defffd04 	addi	sp,sp,-12
 80005d0:	2805883a 	mov	r2,r5
 80005d4:	dfc00015 	stw	ra,0(sp)
 80005d8:	d9800115 	stw	r6,4(sp)
 80005dc:	d9c00215 	stw	r7,8(sp)
 80005e0:	21400217 	ldw	r5,8(r4)
 80005e4:	d9c00104 	addi	r7,sp,4
 80005e8:	100d883a 	mov	r6,r2
 80005ec:	80007c40 	call	80007c4 <___vfprintf_internal_r>
 80005f0:	dfc00017 	ldw	ra,0(sp)
 80005f4:	dec00304 	addi	sp,sp,12
 80005f8:	f800283a 	ret

080005fc <printf>:
 80005fc:	defffc04 	addi	sp,sp,-16
 8000600:	dfc00015 	stw	ra,0(sp)
 8000604:	d9400115 	stw	r5,4(sp)
 8000608:	d9800215 	stw	r6,8(sp)
 800060c:	d9c00315 	stw	r7,12(sp)
 8000610:	00820074 	movhi	r2,2049
 8000614:	108e0a04 	addi	r2,r2,14376
 8000618:	10800017 	ldw	r2,0(r2)
 800061c:	200b883a 	mov	r5,r4
 8000620:	d9800104 	addi	r6,sp,4
 8000624:	11000217 	ldw	r4,8(r2)
 8000628:	80029bc0 	call	80029bc <__vfprintf_internal>
 800062c:	dfc00017 	ldw	ra,0(sp)
 8000630:	dec00404 	addi	sp,sp,16
 8000634:	f800283a 	ret

08000638 <_putchar_r>:
 8000638:	21800217 	ldw	r6,8(r4)
 800063c:	80074801 	jmpi	8007480 <_putc_r>

08000640 <putchar>:
 8000640:	00820074 	movhi	r2,2049
 8000644:	108e0a04 	addi	r2,r2,14376
 8000648:	200b883a 	mov	r5,r4
 800064c:	11000017 	ldw	r4,0(r2)
 8000650:	21800217 	ldw	r6,8(r4)
 8000654:	80074801 	jmpi	8007480 <_putc_r>

08000658 <_puts_r>:
 8000658:	defff604 	addi	sp,sp,-40
 800065c:	dc000715 	stw	r16,28(sp)
 8000660:	2021883a 	mov	r16,r4
 8000664:	2809883a 	mov	r4,r5
 8000668:	dc400815 	stw	r17,32(sp)
 800066c:	dfc00915 	stw	ra,36(sp)
 8000670:	2823883a 	mov	r17,r5
 8000674:	800072c0 	call	800072c <strlen>
 8000678:	10c00044 	addi	r3,r2,1
 800067c:	d8800115 	stw	r2,4(sp)
 8000680:	00820074 	movhi	r2,2049
 8000684:	10868504 	addi	r2,r2,6676
 8000688:	d8800215 	stw	r2,8(sp)
 800068c:	00800044 	movi	r2,1
 8000690:	d8800315 	stw	r2,12(sp)
 8000694:	00800084 	movi	r2,2
 8000698:	dc400015 	stw	r17,0(sp)
 800069c:	d8c00615 	stw	r3,24(sp)
 80006a0:	dec00415 	stw	sp,16(sp)
 80006a4:	d8800515 	stw	r2,20(sp)
 80006a8:	80000226 	beq	r16,zero,80006b4 <_puts_r+0x5c>
 80006ac:	80800e17 	ldw	r2,56(r16)
 80006b0:	10001426 	beq	r2,zero,8000704 <_puts_r+0xac>
 80006b4:	81400217 	ldw	r5,8(r16)
 80006b8:	2880030b 	ldhu	r2,12(r5)
 80006bc:	10c8000c 	andi	r3,r2,8192
 80006c0:	1800061e 	bne	r3,zero,80006dc <_puts_r+0x84>
 80006c4:	29001917 	ldw	r4,100(r5)
 80006c8:	00f7ffc4 	movi	r3,-8193
 80006cc:	10880014 	ori	r2,r2,8192
 80006d0:	20c6703a 	and	r3,r4,r3
 80006d4:	2880030d 	sth	r2,12(r5)
 80006d8:	28c01915 	stw	r3,100(r5)
 80006dc:	d9800404 	addi	r6,sp,16
 80006e0:	8009883a 	mov	r4,r16
 80006e4:	8004eec0 	call	8004eec <__sfvwrite_r>
 80006e8:	1000091e 	bne	r2,zero,8000710 <_puts_r+0xb8>
 80006ec:	00800284 	movi	r2,10
 80006f0:	dfc00917 	ldw	ra,36(sp)
 80006f4:	dc400817 	ldw	r17,32(sp)
 80006f8:	dc000717 	ldw	r16,28(sp)
 80006fc:	dec00a04 	addi	sp,sp,40
 8000700:	f800283a 	ret
 8000704:	8009883a 	mov	r4,r16
 8000708:	8004a680 	call	8004a68 <__sinit>
 800070c:	003fe906 	br	80006b4 <__alt_data_end+0xff0006b4>
 8000710:	00bfffc4 	movi	r2,-1
 8000714:	003ff606 	br	80006f0 <__alt_data_end+0xff0006f0>

08000718 <puts>:
 8000718:	00820074 	movhi	r2,2049
 800071c:	108e0a04 	addi	r2,r2,14376
 8000720:	200b883a 	mov	r5,r4
 8000724:	11000017 	ldw	r4,0(r2)
 8000728:	80006581 	jmpi	8000658 <_puts_r>

0800072c <strlen>:
 800072c:	208000cc 	andi	r2,r4,3
 8000730:	10002026 	beq	r2,zero,80007b4 <strlen+0x88>
 8000734:	20800007 	ldb	r2,0(r4)
 8000738:	10002026 	beq	r2,zero,80007bc <strlen+0x90>
 800073c:	2005883a 	mov	r2,r4
 8000740:	00000206 	br	800074c <strlen+0x20>
 8000744:	10c00007 	ldb	r3,0(r2)
 8000748:	18001826 	beq	r3,zero,80007ac <strlen+0x80>
 800074c:	10800044 	addi	r2,r2,1
 8000750:	10c000cc 	andi	r3,r2,3
 8000754:	183ffb1e 	bne	r3,zero,8000744 <__alt_data_end+0xff000744>
 8000758:	10c00017 	ldw	r3,0(r2)
 800075c:	01ffbff4 	movhi	r7,65279
 8000760:	39ffbfc4 	addi	r7,r7,-257
 8000764:	00ca303a 	nor	r5,zero,r3
 8000768:	01a02074 	movhi	r6,32897
 800076c:	19c7883a 	add	r3,r3,r7
 8000770:	31a02004 	addi	r6,r6,-32640
 8000774:	1946703a 	and	r3,r3,r5
 8000778:	1986703a 	and	r3,r3,r6
 800077c:	1800091e 	bne	r3,zero,80007a4 <strlen+0x78>
 8000780:	10800104 	addi	r2,r2,4
 8000784:	10c00017 	ldw	r3,0(r2)
 8000788:	19cb883a 	add	r5,r3,r7
 800078c:	00c6303a 	nor	r3,zero,r3
 8000790:	28c6703a 	and	r3,r5,r3
 8000794:	1986703a 	and	r3,r3,r6
 8000798:	183ff926 	beq	r3,zero,8000780 <__alt_data_end+0xff000780>
 800079c:	00000106 	br	80007a4 <strlen+0x78>
 80007a0:	10800044 	addi	r2,r2,1
 80007a4:	10c00007 	ldb	r3,0(r2)
 80007a8:	183ffd1e 	bne	r3,zero,80007a0 <__alt_data_end+0xff0007a0>
 80007ac:	1105c83a 	sub	r2,r2,r4
 80007b0:	f800283a 	ret
 80007b4:	2005883a 	mov	r2,r4
 80007b8:	003fe706 	br	8000758 <__alt_data_end+0xff000758>
 80007bc:	0005883a 	mov	r2,zero
 80007c0:	f800283a 	ret

080007c4 <___vfprintf_internal_r>:
 80007c4:	deffb804 	addi	sp,sp,-288
 80007c8:	dfc04715 	stw	ra,284(sp)
 80007cc:	ddc04515 	stw	r23,276(sp)
 80007d0:	dd404315 	stw	r21,268(sp)
 80007d4:	d9002c15 	stw	r4,176(sp)
 80007d8:	282f883a 	mov	r23,r5
 80007dc:	302b883a 	mov	r21,r6
 80007e0:	d9c02d15 	stw	r7,180(sp)
 80007e4:	df004615 	stw	fp,280(sp)
 80007e8:	dd804415 	stw	r22,272(sp)
 80007ec:	dd004215 	stw	r20,264(sp)
 80007f0:	dcc04115 	stw	r19,260(sp)
 80007f4:	dc804015 	stw	r18,256(sp)
 80007f8:	dc403f15 	stw	r17,252(sp)
 80007fc:	dc003e15 	stw	r16,248(sp)
 8000800:	80055dc0 	call	80055dc <_localeconv_r>
 8000804:	10800017 	ldw	r2,0(r2)
 8000808:	1009883a 	mov	r4,r2
 800080c:	d8803415 	stw	r2,208(sp)
 8000810:	800072c0 	call	800072c <strlen>
 8000814:	d8803715 	stw	r2,220(sp)
 8000818:	d8802c17 	ldw	r2,176(sp)
 800081c:	10000226 	beq	r2,zero,8000828 <___vfprintf_internal_r+0x64>
 8000820:	10800e17 	ldw	r2,56(r2)
 8000824:	1000f926 	beq	r2,zero,8000c0c <___vfprintf_internal_r+0x448>
 8000828:	b880030b 	ldhu	r2,12(r23)
 800082c:	10c8000c 	andi	r3,r2,8192
 8000830:	1800061e 	bne	r3,zero,800084c <___vfprintf_internal_r+0x88>
 8000834:	b9001917 	ldw	r4,100(r23)
 8000838:	00f7ffc4 	movi	r3,-8193
 800083c:	10880014 	ori	r2,r2,8192
 8000840:	20c6703a 	and	r3,r4,r3
 8000844:	b880030d 	sth	r2,12(r23)
 8000848:	b8c01915 	stw	r3,100(r23)
 800084c:	10c0020c 	andi	r3,r2,8
 8000850:	1800c126 	beq	r3,zero,8000b58 <___vfprintf_internal_r+0x394>
 8000854:	b8c00417 	ldw	r3,16(r23)
 8000858:	1800bf26 	beq	r3,zero,8000b58 <___vfprintf_internal_r+0x394>
 800085c:	1080068c 	andi	r2,r2,26
 8000860:	00c00284 	movi	r3,10
 8000864:	10c0c426 	beq	r2,r3,8000b78 <___vfprintf_internal_r+0x3b4>
 8000868:	d8c00404 	addi	r3,sp,16
 800086c:	05020074 	movhi	r20,2049
 8000870:	d9001e04 	addi	r4,sp,120
 8000874:	a5069684 	addi	r20,r20,6746
 8000878:	d8c01e15 	stw	r3,120(sp)
 800087c:	d8002015 	stw	zero,128(sp)
 8000880:	d8001f15 	stw	zero,124(sp)
 8000884:	d8003315 	stw	zero,204(sp)
 8000888:	d8003615 	stw	zero,216(sp)
 800088c:	d8003815 	stw	zero,224(sp)
 8000890:	1811883a 	mov	r8,r3
 8000894:	d8003915 	stw	zero,228(sp)
 8000898:	d8003a15 	stw	zero,232(sp)
 800089c:	d8002f15 	stw	zero,188(sp)
 80008a0:	d9002815 	stw	r4,160(sp)
 80008a4:	a8800007 	ldb	r2,0(r21)
 80008a8:	10027b26 	beq	r2,zero,8001298 <___vfprintf_internal_r+0xad4>
 80008ac:	00c00944 	movi	r3,37
 80008b0:	a821883a 	mov	r16,r21
 80008b4:	10c0021e 	bne	r2,r3,80008c0 <___vfprintf_internal_r+0xfc>
 80008b8:	00001406 	br	800090c <___vfprintf_internal_r+0x148>
 80008bc:	10c00326 	beq	r2,r3,80008cc <___vfprintf_internal_r+0x108>
 80008c0:	84000044 	addi	r16,r16,1
 80008c4:	80800007 	ldb	r2,0(r16)
 80008c8:	103ffc1e 	bne	r2,zero,80008bc <__alt_data_end+0xff0008bc>
 80008cc:	8563c83a 	sub	r17,r16,r21
 80008d0:	88000e26 	beq	r17,zero,800090c <___vfprintf_internal_r+0x148>
 80008d4:	d8c02017 	ldw	r3,128(sp)
 80008d8:	d8801f17 	ldw	r2,124(sp)
 80008dc:	45400015 	stw	r21,0(r8)
 80008e0:	1c47883a 	add	r3,r3,r17
 80008e4:	10800044 	addi	r2,r2,1
 80008e8:	d8c02015 	stw	r3,128(sp)
 80008ec:	44400115 	stw	r17,4(r8)
 80008f0:	d8801f15 	stw	r2,124(sp)
 80008f4:	00c001c4 	movi	r3,7
 80008f8:	1880a716 	blt	r3,r2,8000b98 <___vfprintf_internal_r+0x3d4>
 80008fc:	42000204 	addi	r8,r8,8
 8000900:	d9402f17 	ldw	r5,188(sp)
 8000904:	2c4b883a 	add	r5,r5,r17
 8000908:	d9402f15 	stw	r5,188(sp)
 800090c:	80800007 	ldb	r2,0(r16)
 8000910:	1000a826 	beq	r2,zero,8000bb4 <___vfprintf_internal_r+0x3f0>
 8000914:	84400047 	ldb	r17,1(r16)
 8000918:	00bfffc4 	movi	r2,-1
 800091c:	85400044 	addi	r21,r16,1
 8000920:	d8002785 	stb	zero,158(sp)
 8000924:	0007883a 	mov	r3,zero
 8000928:	000f883a 	mov	r7,zero
 800092c:	d8802915 	stw	r2,164(sp)
 8000930:	d8003115 	stw	zero,196(sp)
 8000934:	0025883a 	mov	r18,zero
 8000938:	01401604 	movi	r5,88
 800093c:	01800244 	movi	r6,9
 8000940:	02800a84 	movi	r10,42
 8000944:	02401b04 	movi	r9,108
 8000948:	ad400044 	addi	r21,r21,1
 800094c:	88bff804 	addi	r2,r17,-32
 8000950:	28830436 	bltu	r5,r2,8001564 <___vfprintf_internal_r+0xda0>
 8000954:	100490ba 	slli	r2,r2,2
 8000958:	01020034 	movhi	r4,2048
 800095c:	21025b04 	addi	r4,r4,2412
 8000960:	1105883a 	add	r2,r2,r4
 8000964:	10800017 	ldw	r2,0(r2)
 8000968:	1000683a 	jmp	r2
 800096c:	08001484 	addi	zero,at,82
 8000970:	08001564 	muli	zero,at,85
 8000974:	08001564 	muli	zero,at,85
 8000978:	080014a4 	muli	zero,at,82
 800097c:	08001564 	muli	zero,at,85
 8000980:	08001564 	muli	zero,at,85
 8000984:	08001564 	muli	zero,at,85
 8000988:	08001564 	muli	zero,at,85
 800098c:	08001564 	muli	zero,at,85
 8000990:	08001564 	muli	zero,at,85
 8000994:	08000c18 	cmpnei	zero,at,48
 8000998:	080013c0 	call	80013c <__alt_mem_onchip_memory2_0+0x80013c>
 800099c:	08001564 	muli	zero,at,85
 80009a0:	08000ae0 	cmpeqi	zero,at,43
 80009a4:	08000c40 	call	8000c4 <__alt_mem_onchip_memory2_0+0x8000c4>
 80009a8:	08001564 	muli	zero,at,85
 80009ac:	08000c80 	call	8000c8 <__alt_mem_onchip_memory2_0+0x8000c8>
 80009b0:	08000c8c 	andi	zero,at,50
 80009b4:	08000c8c 	andi	zero,at,50
 80009b8:	08000c8c 	andi	zero,at,50
 80009bc:	08000c8c 	andi	zero,at,50
 80009c0:	08000c8c 	andi	zero,at,50
 80009c4:	08000c8c 	andi	zero,at,50
 80009c8:	08000c8c 	andi	zero,at,50
 80009cc:	08000c8c 	andi	zero,at,50
 80009d0:	08000c8c 	andi	zero,at,50
 80009d4:	08001564 	muli	zero,at,85
 80009d8:	08001564 	muli	zero,at,85
 80009dc:	08001564 	muli	zero,at,85
 80009e0:	08001564 	muli	zero,at,85
 80009e4:	08001564 	muli	zero,at,85
 80009e8:	08001564 	muli	zero,at,85
 80009ec:	08001564 	muli	zero,at,85
 80009f0:	08001564 	muli	zero,at,85
 80009f4:	08001564 	muli	zero,at,85
 80009f8:	08001564 	muli	zero,at,85
 80009fc:	08000cc0 	call	8000cc <__alt_mem_onchip_memory2_0+0x8000cc>
 8000a00:	08000d7c 	xorhi	zero,at,53
 8000a04:	08001564 	muli	zero,at,85
 8000a08:	08000d7c 	xorhi	zero,at,53
 8000a0c:	08001564 	muli	zero,at,85
 8000a10:	08001564 	muli	zero,at,85
 8000a14:	08001564 	muli	zero,at,85
 8000a18:	08001564 	muli	zero,at,85
 8000a1c:	08000e1c 	xori	zero,at,56
 8000a20:	08001564 	muli	zero,at,85
 8000a24:	08001564 	muli	zero,at,85
 8000a28:	08000e28 	cmpgeui	zero,at,56
 8000a2c:	08001564 	muli	zero,at,85
 8000a30:	08001564 	muli	zero,at,85
 8000a34:	08001564 	muli	zero,at,85
 8000a38:	08001564 	muli	zero,at,85
 8000a3c:	08001564 	muli	zero,at,85
 8000a40:	080012a0 	cmpeqi	zero,at,74
 8000a44:	08001564 	muli	zero,at,85
 8000a48:	08001564 	muli	zero,at,85
 8000a4c:	08001300 	call	800130 <__alt_mem_onchip_memory2_0+0x800130>
 8000a50:	08001564 	muli	zero,at,85
 8000a54:	08001564 	muli	zero,at,85
 8000a58:	08001564 	muli	zero,at,85
 8000a5c:	08001564 	muli	zero,at,85
 8000a60:	08001564 	muli	zero,at,85
 8000a64:	08001564 	muli	zero,at,85
 8000a68:	08001564 	muli	zero,at,85
 8000a6c:	08001564 	muli	zero,at,85
 8000a70:	08001564 	muli	zero,at,85
 8000a74:	08001564 	muli	zero,at,85
 8000a78:	08001510 	cmplti	zero,at,84
 8000a7c:	080014b0 	cmpltui	zero,at,82
 8000a80:	08000d7c 	xorhi	zero,at,53
 8000a84:	08000d7c 	xorhi	zero,at,53
 8000a88:	08000d7c 	xorhi	zero,at,53
 8000a8c:	080014c0 	call	80014c <__alt_mem_onchip_memory2_0+0x80014c>
 8000a90:	080014b0 	cmpltui	zero,at,82
 8000a94:	08001564 	muli	zero,at,85
 8000a98:	08001564 	muli	zero,at,85
 8000a9c:	080014cc 	andi	zero,at,83
 8000aa0:	08001564 	muli	zero,at,85
 8000aa4:	080014dc 	xori	zero,at,83
 8000aa8:	080013b0 	cmpltui	zero,at,78
 8000aac:	08000aec 	andhi	zero,at,43
 8000ab0:	080013d0 	cmplti	zero,at,79
 8000ab4:	08001564 	muli	zero,at,85
 8000ab8:	080013dc 	xori	zero,at,79
 8000abc:	08001564 	muli	zero,at,85
 8000ac0:	08001438 	rdprs	zero,at,80
 8000ac4:	08001564 	muli	zero,at,85
 8000ac8:	08001564 	muli	zero,at,85
 8000acc:	08001448 	cmpgei	zero,at,81
 8000ad0:	d9003117 	ldw	r4,196(sp)
 8000ad4:	d8802d15 	stw	r2,180(sp)
 8000ad8:	0109c83a 	sub	r4,zero,r4
 8000adc:	d9003115 	stw	r4,196(sp)
 8000ae0:	94800114 	ori	r18,r18,4
 8000ae4:	ac400007 	ldb	r17,0(r21)
 8000ae8:	003f9706 	br	8000948 <__alt_data_end+0xff000948>
 8000aec:	00800c04 	movi	r2,48
 8000af0:	d9002d17 	ldw	r4,180(sp)
 8000af4:	d9402917 	ldw	r5,164(sp)
 8000af8:	d8802705 	stb	r2,156(sp)
 8000afc:	00801e04 	movi	r2,120
 8000b00:	d8802745 	stb	r2,157(sp)
 8000b04:	d8002785 	stb	zero,158(sp)
 8000b08:	20c00104 	addi	r3,r4,4
 8000b0c:	24c00017 	ldw	r19,0(r4)
 8000b10:	002d883a 	mov	r22,zero
 8000b14:	90800094 	ori	r2,r18,2
 8000b18:	28029a16 	blt	r5,zero,8001584 <___vfprintf_internal_r+0xdc0>
 8000b1c:	00bfdfc4 	movi	r2,-129
 8000b20:	90a4703a 	and	r18,r18,r2
 8000b24:	d8c02d15 	stw	r3,180(sp)
 8000b28:	94800094 	ori	r18,r18,2
 8000b2c:	9802871e 	bne	r19,zero,800154c <___vfprintf_internal_r+0xd88>
 8000b30:	00820074 	movhi	r2,2049
 8000b34:	10868f04 	addi	r2,r2,6716
 8000b38:	d8803915 	stw	r2,228(sp)
 8000b3c:	04401e04 	movi	r17,120
 8000b40:	d8802917 	ldw	r2,164(sp)
 8000b44:	0039883a 	mov	fp,zero
 8000b48:	1001e926 	beq	r2,zero,80012f0 <___vfprintf_internal_r+0xb2c>
 8000b4c:	0027883a 	mov	r19,zero
 8000b50:	002d883a 	mov	r22,zero
 8000b54:	00020506 	br	800136c <___vfprintf_internal_r+0xba8>
 8000b58:	d9002c17 	ldw	r4,176(sp)
 8000b5c:	b80b883a 	mov	r5,r23
 8000b60:	8002a940 	call	8002a94 <__swsetup_r>
 8000b64:	1005ac1e 	bne	r2,zero,8002218 <___vfprintf_internal_r+0x1a54>
 8000b68:	b880030b 	ldhu	r2,12(r23)
 8000b6c:	00c00284 	movi	r3,10
 8000b70:	1080068c 	andi	r2,r2,26
 8000b74:	10ff3c1e 	bne	r2,r3,8000868 <__alt_data_end+0xff000868>
 8000b78:	b880038f 	ldh	r2,14(r23)
 8000b7c:	103f3a16 	blt	r2,zero,8000868 <__alt_data_end+0xff000868>
 8000b80:	d9c02d17 	ldw	r7,180(sp)
 8000b84:	d9002c17 	ldw	r4,176(sp)
 8000b88:	a80d883a 	mov	r6,r21
 8000b8c:	b80b883a 	mov	r5,r23
 8000b90:	80029d80 	call	80029d8 <__sbprintf>
 8000b94:	00001106 	br	8000bdc <___vfprintf_internal_r+0x418>
 8000b98:	d9002c17 	ldw	r4,176(sp)
 8000b9c:	d9801e04 	addi	r6,sp,120
 8000ba0:	b80b883a 	mov	r5,r23
 8000ba4:	8007f280 	call	8007f28 <__sprint_r>
 8000ba8:	1000081e 	bne	r2,zero,8000bcc <___vfprintf_internal_r+0x408>
 8000bac:	da000404 	addi	r8,sp,16
 8000bb0:	003f5306 	br	8000900 <__alt_data_end+0xff000900>
 8000bb4:	d8802017 	ldw	r2,128(sp)
 8000bb8:	10000426 	beq	r2,zero,8000bcc <___vfprintf_internal_r+0x408>
 8000bbc:	d9002c17 	ldw	r4,176(sp)
 8000bc0:	d9801e04 	addi	r6,sp,120
 8000bc4:	b80b883a 	mov	r5,r23
 8000bc8:	8007f280 	call	8007f28 <__sprint_r>
 8000bcc:	b880030b 	ldhu	r2,12(r23)
 8000bd0:	1080100c 	andi	r2,r2,64
 8000bd4:	1005901e 	bne	r2,zero,8002218 <___vfprintf_internal_r+0x1a54>
 8000bd8:	d8802f17 	ldw	r2,188(sp)
 8000bdc:	dfc04717 	ldw	ra,284(sp)
 8000be0:	df004617 	ldw	fp,280(sp)
 8000be4:	ddc04517 	ldw	r23,276(sp)
 8000be8:	dd804417 	ldw	r22,272(sp)
 8000bec:	dd404317 	ldw	r21,268(sp)
 8000bf0:	dd004217 	ldw	r20,264(sp)
 8000bf4:	dcc04117 	ldw	r19,260(sp)
 8000bf8:	dc804017 	ldw	r18,256(sp)
 8000bfc:	dc403f17 	ldw	r17,252(sp)
 8000c00:	dc003e17 	ldw	r16,248(sp)
 8000c04:	dec04804 	addi	sp,sp,288
 8000c08:	f800283a 	ret
 8000c0c:	d9002c17 	ldw	r4,176(sp)
 8000c10:	8004a680 	call	8004a68 <__sinit>
 8000c14:	003f0406 	br	8000828 <__alt_data_end+0xff000828>
 8000c18:	d8802d17 	ldw	r2,180(sp)
 8000c1c:	d9002d17 	ldw	r4,180(sp)
 8000c20:	10800017 	ldw	r2,0(r2)
 8000c24:	d8803115 	stw	r2,196(sp)
 8000c28:	20800104 	addi	r2,r4,4
 8000c2c:	d9003117 	ldw	r4,196(sp)
 8000c30:	203fa716 	blt	r4,zero,8000ad0 <__alt_data_end+0xff000ad0>
 8000c34:	d8802d15 	stw	r2,180(sp)
 8000c38:	ac400007 	ldb	r17,0(r21)
 8000c3c:	003f4206 	br	8000948 <__alt_data_end+0xff000948>
 8000c40:	ac400007 	ldb	r17,0(r21)
 8000c44:	aac00044 	addi	r11,r21,1
 8000c48:	8a872826 	beq	r17,r10,80028ec <___vfprintf_internal_r+0x2128>
 8000c4c:	88bff404 	addi	r2,r17,-48
 8000c50:	0009883a 	mov	r4,zero
 8000c54:	30867d36 	bltu	r6,r2,800264c <___vfprintf_internal_r+0x1e88>
 8000c58:	5c400007 	ldb	r17,0(r11)
 8000c5c:	210002a4 	muli	r4,r4,10
 8000c60:	5d400044 	addi	r21,r11,1
 8000c64:	a817883a 	mov	r11,r21
 8000c68:	2089883a 	add	r4,r4,r2
 8000c6c:	88bff404 	addi	r2,r17,-48
 8000c70:	30bff92e 	bgeu	r6,r2,8000c58 <__alt_data_end+0xff000c58>
 8000c74:	2005c916 	blt	r4,zero,800239c <___vfprintf_internal_r+0x1bd8>
 8000c78:	d9002915 	stw	r4,164(sp)
 8000c7c:	003f3306 	br	800094c <__alt_data_end+0xff00094c>
 8000c80:	94802014 	ori	r18,r18,128
 8000c84:	ac400007 	ldb	r17,0(r21)
 8000c88:	003f2f06 	br	8000948 <__alt_data_end+0xff000948>
 8000c8c:	a809883a 	mov	r4,r21
 8000c90:	d8003115 	stw	zero,196(sp)
 8000c94:	88bff404 	addi	r2,r17,-48
 8000c98:	0017883a 	mov	r11,zero
 8000c9c:	24400007 	ldb	r17,0(r4)
 8000ca0:	5ac002a4 	muli	r11,r11,10
 8000ca4:	ad400044 	addi	r21,r21,1
 8000ca8:	a809883a 	mov	r4,r21
 8000cac:	12d7883a 	add	r11,r2,r11
 8000cb0:	88bff404 	addi	r2,r17,-48
 8000cb4:	30bff92e 	bgeu	r6,r2,8000c9c <__alt_data_end+0xff000c9c>
 8000cb8:	dac03115 	stw	r11,196(sp)
 8000cbc:	003f2306 	br	800094c <__alt_data_end+0xff00094c>
 8000cc0:	18c03fcc 	andi	r3,r3,255
 8000cc4:	18072b1e 	bne	r3,zero,8002974 <___vfprintf_internal_r+0x21b0>
 8000cc8:	94800414 	ori	r18,r18,16
 8000ccc:	9080080c 	andi	r2,r18,32
 8000cd0:	10037b26 	beq	r2,zero,8001ac0 <___vfprintf_internal_r+0x12fc>
 8000cd4:	d9402d17 	ldw	r5,180(sp)
 8000cd8:	28800117 	ldw	r2,4(r5)
 8000cdc:	2cc00017 	ldw	r19,0(r5)
 8000ce0:	29400204 	addi	r5,r5,8
 8000ce4:	d9402d15 	stw	r5,180(sp)
 8000ce8:	102d883a 	mov	r22,r2
 8000cec:	10044b16 	blt	r2,zero,8001e1c <___vfprintf_internal_r+0x1658>
 8000cf0:	d9402917 	ldw	r5,164(sp)
 8000cf4:	df002783 	ldbu	fp,158(sp)
 8000cf8:	2803bc16 	blt	r5,zero,8001bec <___vfprintf_internal_r+0x1428>
 8000cfc:	00ffdfc4 	movi	r3,-129
 8000d00:	9d84b03a 	or	r2,r19,r22
 8000d04:	90e4703a 	and	r18,r18,r3
 8000d08:	10017726 	beq	r2,zero,80012e8 <___vfprintf_internal_r+0xb24>
 8000d0c:	b0038326 	beq	r22,zero,8001b1c <___vfprintf_internal_r+0x1358>
 8000d10:	dc402a15 	stw	r17,168(sp)
 8000d14:	dc001e04 	addi	r16,sp,120
 8000d18:	b023883a 	mov	r17,r22
 8000d1c:	402d883a 	mov	r22,r8
 8000d20:	9809883a 	mov	r4,r19
 8000d24:	880b883a 	mov	r5,r17
 8000d28:	01800284 	movi	r6,10
 8000d2c:	000f883a 	mov	r7,zero
 8000d30:	800a3200 	call	800a320 <__umoddi3>
 8000d34:	10800c04 	addi	r2,r2,48
 8000d38:	843fffc4 	addi	r16,r16,-1
 8000d3c:	9809883a 	mov	r4,r19
 8000d40:	880b883a 	mov	r5,r17
 8000d44:	80800005 	stb	r2,0(r16)
 8000d48:	01800284 	movi	r6,10
 8000d4c:	000f883a 	mov	r7,zero
 8000d50:	8009da80 	call	8009da8 <__udivdi3>
 8000d54:	1027883a 	mov	r19,r2
 8000d58:	10c4b03a 	or	r2,r2,r3
 8000d5c:	1823883a 	mov	r17,r3
 8000d60:	103fef1e 	bne	r2,zero,8000d20 <__alt_data_end+0xff000d20>
 8000d64:	d8c02817 	ldw	r3,160(sp)
 8000d68:	dc402a17 	ldw	r17,168(sp)
 8000d6c:	b011883a 	mov	r8,r22
 8000d70:	1c07c83a 	sub	r3,r3,r16
 8000d74:	d8c02e15 	stw	r3,184(sp)
 8000d78:	00005906 	br	8000ee0 <___vfprintf_internal_r+0x71c>
 8000d7c:	18c03fcc 	andi	r3,r3,255
 8000d80:	1806fa1e 	bne	r3,zero,800296c <___vfprintf_internal_r+0x21a8>
 8000d84:	9080020c 	andi	r2,r18,8
 8000d88:	10048a26 	beq	r2,zero,8001fb4 <___vfprintf_internal_r+0x17f0>
 8000d8c:	d8c02d17 	ldw	r3,180(sp)
 8000d90:	d9002d17 	ldw	r4,180(sp)
 8000d94:	d9402d17 	ldw	r5,180(sp)
 8000d98:	18c00017 	ldw	r3,0(r3)
 8000d9c:	21000117 	ldw	r4,4(r4)
 8000da0:	29400204 	addi	r5,r5,8
 8000da4:	d8c03615 	stw	r3,216(sp)
 8000da8:	d9003815 	stw	r4,224(sp)
 8000dac:	d9402d15 	stw	r5,180(sp)
 8000db0:	d9003617 	ldw	r4,216(sp)
 8000db4:	d9403817 	ldw	r5,224(sp)
 8000db8:	da003d15 	stw	r8,244(sp)
 8000dbc:	04000044 	movi	r16,1
 8000dc0:	8007b4c0 	call	8007b4c <__fpclassifyd>
 8000dc4:	da003d17 	ldw	r8,244(sp)
 8000dc8:	14041f1e 	bne	r2,r16,8001e48 <___vfprintf_internal_r+0x1684>
 8000dcc:	d9003617 	ldw	r4,216(sp)
 8000dd0:	d9403817 	ldw	r5,224(sp)
 8000dd4:	000d883a 	mov	r6,zero
 8000dd8:	000f883a 	mov	r7,zero
 8000ddc:	800bd040 	call	800bd04 <__ledf2>
 8000de0:	da003d17 	ldw	r8,244(sp)
 8000de4:	1005be16 	blt	r2,zero,80024e0 <___vfprintf_internal_r+0x1d1c>
 8000de8:	df002783 	ldbu	fp,158(sp)
 8000dec:	008011c4 	movi	r2,71
 8000df0:	1445330e 	bge	r2,r17,80022c0 <___vfprintf_internal_r+0x1afc>
 8000df4:	04020074 	movhi	r16,2049
 8000df8:	84068704 	addi	r16,r16,6684
 8000dfc:	00c000c4 	movi	r3,3
 8000e00:	00bfdfc4 	movi	r2,-129
 8000e04:	d8c02a15 	stw	r3,168(sp)
 8000e08:	90a4703a 	and	r18,r18,r2
 8000e0c:	d8c02e15 	stw	r3,184(sp)
 8000e10:	d8002915 	stw	zero,164(sp)
 8000e14:	d8003215 	stw	zero,200(sp)
 8000e18:	00003706 	br	8000ef8 <___vfprintf_internal_r+0x734>
 8000e1c:	94800214 	ori	r18,r18,8
 8000e20:	ac400007 	ldb	r17,0(r21)
 8000e24:	003ec806 	br	8000948 <__alt_data_end+0xff000948>
 8000e28:	18c03fcc 	andi	r3,r3,255
 8000e2c:	1806db1e 	bne	r3,zero,800299c <___vfprintf_internal_r+0x21d8>
 8000e30:	94800414 	ori	r18,r18,16
 8000e34:	9080080c 	andi	r2,r18,32
 8000e38:	1002d826 	beq	r2,zero,800199c <___vfprintf_internal_r+0x11d8>
 8000e3c:	d9402d17 	ldw	r5,180(sp)
 8000e40:	d8c02917 	ldw	r3,164(sp)
 8000e44:	d8002785 	stb	zero,158(sp)
 8000e48:	28800204 	addi	r2,r5,8
 8000e4c:	2cc00017 	ldw	r19,0(r5)
 8000e50:	2d800117 	ldw	r22,4(r5)
 8000e54:	18048f16 	blt	r3,zero,8002094 <___vfprintf_internal_r+0x18d0>
 8000e58:	013fdfc4 	movi	r4,-129
 8000e5c:	9d86b03a 	or	r3,r19,r22
 8000e60:	d8802d15 	stw	r2,180(sp)
 8000e64:	9124703a 	and	r18,r18,r4
 8000e68:	1802d91e 	bne	r3,zero,80019d0 <___vfprintf_internal_r+0x120c>
 8000e6c:	d8c02917 	ldw	r3,164(sp)
 8000e70:	0039883a 	mov	fp,zero
 8000e74:	1805c326 	beq	r3,zero,8002584 <___vfprintf_internal_r+0x1dc0>
 8000e78:	0027883a 	mov	r19,zero
 8000e7c:	002d883a 	mov	r22,zero
 8000e80:	dc001e04 	addi	r16,sp,120
 8000e84:	9806d0fa 	srli	r3,r19,3
 8000e88:	b008977a 	slli	r4,r22,29
 8000e8c:	b02cd0fa 	srli	r22,r22,3
 8000e90:	9cc001cc 	andi	r19,r19,7
 8000e94:	98800c04 	addi	r2,r19,48
 8000e98:	843fffc4 	addi	r16,r16,-1
 8000e9c:	20e6b03a 	or	r19,r4,r3
 8000ea0:	80800005 	stb	r2,0(r16)
 8000ea4:	9d86b03a 	or	r3,r19,r22
 8000ea8:	183ff61e 	bne	r3,zero,8000e84 <__alt_data_end+0xff000e84>
 8000eac:	90c0004c 	andi	r3,r18,1
 8000eb0:	18013b26 	beq	r3,zero,80013a0 <___vfprintf_internal_r+0xbdc>
 8000eb4:	10803fcc 	andi	r2,r2,255
 8000eb8:	1080201c 	xori	r2,r2,128
 8000ebc:	10bfe004 	addi	r2,r2,-128
 8000ec0:	00c00c04 	movi	r3,48
 8000ec4:	10c13626 	beq	r2,r3,80013a0 <___vfprintf_internal_r+0xbdc>
 8000ec8:	80ffffc5 	stb	r3,-1(r16)
 8000ecc:	d8c02817 	ldw	r3,160(sp)
 8000ed0:	80bfffc4 	addi	r2,r16,-1
 8000ed4:	1021883a 	mov	r16,r2
 8000ed8:	1887c83a 	sub	r3,r3,r2
 8000edc:	d8c02e15 	stw	r3,184(sp)
 8000ee0:	d8802e17 	ldw	r2,184(sp)
 8000ee4:	d9002917 	ldw	r4,164(sp)
 8000ee8:	1100010e 	bge	r2,r4,8000ef0 <___vfprintf_internal_r+0x72c>
 8000eec:	2005883a 	mov	r2,r4
 8000ef0:	d8802a15 	stw	r2,168(sp)
 8000ef4:	d8003215 	stw	zero,200(sp)
 8000ef8:	e7003fcc 	andi	fp,fp,255
 8000efc:	e700201c 	xori	fp,fp,128
 8000f00:	e73fe004 	addi	fp,fp,-128
 8000f04:	e0000326 	beq	fp,zero,8000f14 <___vfprintf_internal_r+0x750>
 8000f08:	d8c02a17 	ldw	r3,168(sp)
 8000f0c:	18c00044 	addi	r3,r3,1
 8000f10:	d8c02a15 	stw	r3,168(sp)
 8000f14:	90c0008c 	andi	r3,r18,2
 8000f18:	d8c02b15 	stw	r3,172(sp)
 8000f1c:	18000326 	beq	r3,zero,8000f2c <___vfprintf_internal_r+0x768>
 8000f20:	d8c02a17 	ldw	r3,168(sp)
 8000f24:	18c00084 	addi	r3,r3,2
 8000f28:	d8c02a15 	stw	r3,168(sp)
 8000f2c:	90c0210c 	andi	r3,r18,132
 8000f30:	d8c03015 	stw	r3,192(sp)
 8000f34:	1801a31e 	bne	r3,zero,80015c4 <___vfprintf_internal_r+0xe00>
 8000f38:	d9003117 	ldw	r4,196(sp)
 8000f3c:	d8c02a17 	ldw	r3,168(sp)
 8000f40:	20e7c83a 	sub	r19,r4,r3
 8000f44:	04c19f0e 	bge	zero,r19,80015c4 <___vfprintf_internal_r+0xe00>
 8000f48:	02400404 	movi	r9,16
 8000f4c:	d8c02017 	ldw	r3,128(sp)
 8000f50:	d8801f17 	ldw	r2,124(sp)
 8000f54:	4cc50d0e 	bge	r9,r19,800238c <___vfprintf_internal_r+0x1bc8>
 8000f58:	01420074 	movhi	r5,2049
 8000f5c:	29469a84 	addi	r5,r5,6762
 8000f60:	dc403b15 	stw	r17,236(sp)
 8000f64:	d9403515 	stw	r5,212(sp)
 8000f68:	9823883a 	mov	r17,r19
 8000f6c:	482d883a 	mov	r22,r9
 8000f70:	9027883a 	mov	r19,r18
 8000f74:	070001c4 	movi	fp,7
 8000f78:	8025883a 	mov	r18,r16
 8000f7c:	dc002c17 	ldw	r16,176(sp)
 8000f80:	00000306 	br	8000f90 <___vfprintf_internal_r+0x7cc>
 8000f84:	8c7ffc04 	addi	r17,r17,-16
 8000f88:	42000204 	addi	r8,r8,8
 8000f8c:	b440130e 	bge	r22,r17,8000fdc <___vfprintf_internal_r+0x818>
 8000f90:	01020074 	movhi	r4,2049
 8000f94:	18c00404 	addi	r3,r3,16
 8000f98:	10800044 	addi	r2,r2,1
 8000f9c:	21069a84 	addi	r4,r4,6762
 8000fa0:	41000015 	stw	r4,0(r8)
 8000fa4:	45800115 	stw	r22,4(r8)
 8000fa8:	d8c02015 	stw	r3,128(sp)
 8000fac:	d8801f15 	stw	r2,124(sp)
 8000fb0:	e0bff40e 	bge	fp,r2,8000f84 <__alt_data_end+0xff000f84>
 8000fb4:	d9801e04 	addi	r6,sp,120
 8000fb8:	b80b883a 	mov	r5,r23
 8000fbc:	8009883a 	mov	r4,r16
 8000fc0:	8007f280 	call	8007f28 <__sprint_r>
 8000fc4:	103f011e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8000fc8:	8c7ffc04 	addi	r17,r17,-16
 8000fcc:	d8c02017 	ldw	r3,128(sp)
 8000fd0:	d8801f17 	ldw	r2,124(sp)
 8000fd4:	da000404 	addi	r8,sp,16
 8000fd8:	b47fed16 	blt	r22,r17,8000f90 <__alt_data_end+0xff000f90>
 8000fdc:	9021883a 	mov	r16,r18
 8000fe0:	9825883a 	mov	r18,r19
 8000fe4:	8827883a 	mov	r19,r17
 8000fe8:	dc403b17 	ldw	r17,236(sp)
 8000fec:	d9403517 	ldw	r5,212(sp)
 8000ff0:	98c7883a 	add	r3,r19,r3
 8000ff4:	10800044 	addi	r2,r2,1
 8000ff8:	41400015 	stw	r5,0(r8)
 8000ffc:	44c00115 	stw	r19,4(r8)
 8001000:	d8c02015 	stw	r3,128(sp)
 8001004:	d8801f15 	stw	r2,124(sp)
 8001008:	010001c4 	movi	r4,7
 800100c:	2082a316 	blt	r4,r2,8001a9c <___vfprintf_internal_r+0x12d8>
 8001010:	df002787 	ldb	fp,158(sp)
 8001014:	42000204 	addi	r8,r8,8
 8001018:	e0000c26 	beq	fp,zero,800104c <___vfprintf_internal_r+0x888>
 800101c:	d8801f17 	ldw	r2,124(sp)
 8001020:	d9002784 	addi	r4,sp,158
 8001024:	18c00044 	addi	r3,r3,1
 8001028:	10800044 	addi	r2,r2,1
 800102c:	41000015 	stw	r4,0(r8)
 8001030:	01000044 	movi	r4,1
 8001034:	41000115 	stw	r4,4(r8)
 8001038:	d8c02015 	stw	r3,128(sp)
 800103c:	d8801f15 	stw	r2,124(sp)
 8001040:	010001c4 	movi	r4,7
 8001044:	20823c16 	blt	r4,r2,8001938 <___vfprintf_internal_r+0x1174>
 8001048:	42000204 	addi	r8,r8,8
 800104c:	d8802b17 	ldw	r2,172(sp)
 8001050:	10000c26 	beq	r2,zero,8001084 <___vfprintf_internal_r+0x8c0>
 8001054:	d8801f17 	ldw	r2,124(sp)
 8001058:	d9002704 	addi	r4,sp,156
 800105c:	18c00084 	addi	r3,r3,2
 8001060:	10800044 	addi	r2,r2,1
 8001064:	41000015 	stw	r4,0(r8)
 8001068:	01000084 	movi	r4,2
 800106c:	41000115 	stw	r4,4(r8)
 8001070:	d8c02015 	stw	r3,128(sp)
 8001074:	d8801f15 	stw	r2,124(sp)
 8001078:	010001c4 	movi	r4,7
 800107c:	20823616 	blt	r4,r2,8001958 <___vfprintf_internal_r+0x1194>
 8001080:	42000204 	addi	r8,r8,8
 8001084:	d9003017 	ldw	r4,192(sp)
 8001088:	00802004 	movi	r2,128
 800108c:	20819926 	beq	r4,r2,80016f4 <___vfprintf_internal_r+0xf30>
 8001090:	d9402917 	ldw	r5,164(sp)
 8001094:	d8802e17 	ldw	r2,184(sp)
 8001098:	28adc83a 	sub	r22,r5,r2
 800109c:	0580310e 	bge	zero,r22,8001164 <___vfprintf_internal_r+0x9a0>
 80010a0:	07000404 	movi	fp,16
 80010a4:	d8801f17 	ldw	r2,124(sp)
 80010a8:	e584140e 	bge	fp,r22,80020fc <___vfprintf_internal_r+0x1938>
 80010ac:	01420074 	movhi	r5,2049
 80010b0:	29469684 	addi	r5,r5,6746
 80010b4:	dc402915 	stw	r17,164(sp)
 80010b8:	d9402b15 	stw	r5,172(sp)
 80010bc:	b023883a 	mov	r17,r22
 80010c0:	04c001c4 	movi	r19,7
 80010c4:	a82d883a 	mov	r22,r21
 80010c8:	902b883a 	mov	r21,r18
 80010cc:	8025883a 	mov	r18,r16
 80010d0:	dc002c17 	ldw	r16,176(sp)
 80010d4:	00000306 	br	80010e4 <___vfprintf_internal_r+0x920>
 80010d8:	8c7ffc04 	addi	r17,r17,-16
 80010dc:	42000204 	addi	r8,r8,8
 80010e0:	e440110e 	bge	fp,r17,8001128 <___vfprintf_internal_r+0x964>
 80010e4:	18c00404 	addi	r3,r3,16
 80010e8:	10800044 	addi	r2,r2,1
 80010ec:	45000015 	stw	r20,0(r8)
 80010f0:	47000115 	stw	fp,4(r8)
 80010f4:	d8c02015 	stw	r3,128(sp)
 80010f8:	d8801f15 	stw	r2,124(sp)
 80010fc:	98bff60e 	bge	r19,r2,80010d8 <__alt_data_end+0xff0010d8>
 8001100:	d9801e04 	addi	r6,sp,120
 8001104:	b80b883a 	mov	r5,r23
 8001108:	8009883a 	mov	r4,r16
 800110c:	8007f280 	call	8007f28 <__sprint_r>
 8001110:	103eae1e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001114:	8c7ffc04 	addi	r17,r17,-16
 8001118:	d8c02017 	ldw	r3,128(sp)
 800111c:	d8801f17 	ldw	r2,124(sp)
 8001120:	da000404 	addi	r8,sp,16
 8001124:	e47fef16 	blt	fp,r17,80010e4 <__alt_data_end+0xff0010e4>
 8001128:	9021883a 	mov	r16,r18
 800112c:	a825883a 	mov	r18,r21
 8001130:	b02b883a 	mov	r21,r22
 8001134:	882d883a 	mov	r22,r17
 8001138:	dc402917 	ldw	r17,164(sp)
 800113c:	d9002b17 	ldw	r4,172(sp)
 8001140:	1d87883a 	add	r3,r3,r22
 8001144:	10800044 	addi	r2,r2,1
 8001148:	41000015 	stw	r4,0(r8)
 800114c:	45800115 	stw	r22,4(r8)
 8001150:	d8c02015 	stw	r3,128(sp)
 8001154:	d8801f15 	stw	r2,124(sp)
 8001158:	010001c4 	movi	r4,7
 800115c:	2081ee16 	blt	r4,r2,8001918 <___vfprintf_internal_r+0x1154>
 8001160:	42000204 	addi	r8,r8,8
 8001164:	9080400c 	andi	r2,r18,256
 8001168:	1001181e 	bne	r2,zero,80015cc <___vfprintf_internal_r+0xe08>
 800116c:	d9402e17 	ldw	r5,184(sp)
 8001170:	d8801f17 	ldw	r2,124(sp)
 8001174:	44000015 	stw	r16,0(r8)
 8001178:	1947883a 	add	r3,r3,r5
 800117c:	10800044 	addi	r2,r2,1
 8001180:	41400115 	stw	r5,4(r8)
 8001184:	d8c02015 	stw	r3,128(sp)
 8001188:	d8801f15 	stw	r2,124(sp)
 800118c:	010001c4 	movi	r4,7
 8001190:	2081d316 	blt	r4,r2,80018e0 <___vfprintf_internal_r+0x111c>
 8001194:	42000204 	addi	r8,r8,8
 8001198:	9480010c 	andi	r18,r18,4
 800119c:	90003226 	beq	r18,zero,8001268 <___vfprintf_internal_r+0xaa4>
 80011a0:	d9403117 	ldw	r5,196(sp)
 80011a4:	d8802a17 	ldw	r2,168(sp)
 80011a8:	28a1c83a 	sub	r16,r5,r2
 80011ac:	04002e0e 	bge	zero,r16,8001268 <___vfprintf_internal_r+0xaa4>
 80011b0:	04400404 	movi	r17,16
 80011b4:	d8801f17 	ldw	r2,124(sp)
 80011b8:	8c04a20e 	bge	r17,r16,8002444 <___vfprintf_internal_r+0x1c80>
 80011bc:	01420074 	movhi	r5,2049
 80011c0:	29469a84 	addi	r5,r5,6762
 80011c4:	d9403515 	stw	r5,212(sp)
 80011c8:	048001c4 	movi	r18,7
 80011cc:	dcc02c17 	ldw	r19,176(sp)
 80011d0:	00000306 	br	80011e0 <___vfprintf_internal_r+0xa1c>
 80011d4:	843ffc04 	addi	r16,r16,-16
 80011d8:	42000204 	addi	r8,r8,8
 80011dc:	8c00130e 	bge	r17,r16,800122c <___vfprintf_internal_r+0xa68>
 80011e0:	01020074 	movhi	r4,2049
 80011e4:	18c00404 	addi	r3,r3,16
 80011e8:	10800044 	addi	r2,r2,1
 80011ec:	21069a84 	addi	r4,r4,6762
 80011f0:	41000015 	stw	r4,0(r8)
 80011f4:	44400115 	stw	r17,4(r8)
 80011f8:	d8c02015 	stw	r3,128(sp)
 80011fc:	d8801f15 	stw	r2,124(sp)
 8001200:	90bff40e 	bge	r18,r2,80011d4 <__alt_data_end+0xff0011d4>
 8001204:	d9801e04 	addi	r6,sp,120
 8001208:	b80b883a 	mov	r5,r23
 800120c:	9809883a 	mov	r4,r19
 8001210:	8007f280 	call	8007f28 <__sprint_r>
 8001214:	103e6d1e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001218:	843ffc04 	addi	r16,r16,-16
 800121c:	d8c02017 	ldw	r3,128(sp)
 8001220:	d8801f17 	ldw	r2,124(sp)
 8001224:	da000404 	addi	r8,sp,16
 8001228:	8c3fed16 	blt	r17,r16,80011e0 <__alt_data_end+0xff0011e0>
 800122c:	d9403517 	ldw	r5,212(sp)
 8001230:	1c07883a 	add	r3,r3,r16
 8001234:	10800044 	addi	r2,r2,1
 8001238:	41400015 	stw	r5,0(r8)
 800123c:	44000115 	stw	r16,4(r8)
 8001240:	d8c02015 	stw	r3,128(sp)
 8001244:	d8801f15 	stw	r2,124(sp)
 8001248:	010001c4 	movi	r4,7
 800124c:	2080060e 	bge	r4,r2,8001268 <___vfprintf_internal_r+0xaa4>
 8001250:	d9002c17 	ldw	r4,176(sp)
 8001254:	d9801e04 	addi	r6,sp,120
 8001258:	b80b883a 	mov	r5,r23
 800125c:	8007f280 	call	8007f28 <__sprint_r>
 8001260:	103e5a1e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001264:	d8c02017 	ldw	r3,128(sp)
 8001268:	d8803117 	ldw	r2,196(sp)
 800126c:	d9002a17 	ldw	r4,168(sp)
 8001270:	1100010e 	bge	r2,r4,8001278 <___vfprintf_internal_r+0xab4>
 8001274:	2005883a 	mov	r2,r4
 8001278:	d9402f17 	ldw	r5,188(sp)
 800127c:	288b883a 	add	r5,r5,r2
 8001280:	d9402f15 	stw	r5,188(sp)
 8001284:	18019e1e 	bne	r3,zero,8001900 <___vfprintf_internal_r+0x113c>
 8001288:	a8800007 	ldb	r2,0(r21)
 800128c:	d8001f15 	stw	zero,124(sp)
 8001290:	da000404 	addi	r8,sp,16
 8001294:	103d851e 	bne	r2,zero,80008ac <__alt_data_end+0xff0008ac>
 8001298:	a821883a 	mov	r16,r21
 800129c:	003d9b06 	br	800090c <__alt_data_end+0xff00090c>
 80012a0:	18c03fcc 	andi	r3,r3,255
 80012a4:	1805c11e 	bne	r3,zero,80029ac <___vfprintf_internal_r+0x21e8>
 80012a8:	94800414 	ori	r18,r18,16
 80012ac:	9080080c 	andi	r2,r18,32
 80012b0:	10020c26 	beq	r2,zero,8001ae4 <___vfprintf_internal_r+0x1320>
 80012b4:	d8802d17 	ldw	r2,180(sp)
 80012b8:	d9002917 	ldw	r4,164(sp)
 80012bc:	d8002785 	stb	zero,158(sp)
 80012c0:	10c00204 	addi	r3,r2,8
 80012c4:	14c00017 	ldw	r19,0(r2)
 80012c8:	15800117 	ldw	r22,4(r2)
 80012cc:	20040f16 	blt	r4,zero,800230c <___vfprintf_internal_r+0x1b48>
 80012d0:	013fdfc4 	movi	r4,-129
 80012d4:	9d84b03a 	or	r2,r19,r22
 80012d8:	d8c02d15 	stw	r3,180(sp)
 80012dc:	9124703a 	and	r18,r18,r4
 80012e0:	0039883a 	mov	fp,zero
 80012e4:	103e891e 	bne	r2,zero,8000d0c <__alt_data_end+0xff000d0c>
 80012e8:	d9002917 	ldw	r4,164(sp)
 80012ec:	2002c11e 	bne	r4,zero,8001df4 <___vfprintf_internal_r+0x1630>
 80012f0:	d8002915 	stw	zero,164(sp)
 80012f4:	d8002e15 	stw	zero,184(sp)
 80012f8:	dc001e04 	addi	r16,sp,120
 80012fc:	003ef806 	br	8000ee0 <__alt_data_end+0xff000ee0>
 8001300:	18c03fcc 	andi	r3,r3,255
 8001304:	18059d1e 	bne	r3,zero,800297c <___vfprintf_internal_r+0x21b8>
 8001308:	01420074 	movhi	r5,2049
 800130c:	29468a04 	addi	r5,r5,6696
 8001310:	d9403915 	stw	r5,228(sp)
 8001314:	9080080c 	andi	r2,r18,32
 8001318:	10005226 	beq	r2,zero,8001464 <___vfprintf_internal_r+0xca0>
 800131c:	d8802d17 	ldw	r2,180(sp)
 8001320:	14c00017 	ldw	r19,0(r2)
 8001324:	15800117 	ldw	r22,4(r2)
 8001328:	10800204 	addi	r2,r2,8
 800132c:	d8802d15 	stw	r2,180(sp)
 8001330:	9080004c 	andi	r2,r18,1
 8001334:	10019026 	beq	r2,zero,8001978 <___vfprintf_internal_r+0x11b4>
 8001338:	9d84b03a 	or	r2,r19,r22
 800133c:	10036926 	beq	r2,zero,80020e4 <___vfprintf_internal_r+0x1920>
 8001340:	d8c02917 	ldw	r3,164(sp)
 8001344:	00800c04 	movi	r2,48
 8001348:	d8802705 	stb	r2,156(sp)
 800134c:	dc402745 	stb	r17,157(sp)
 8001350:	d8002785 	stb	zero,158(sp)
 8001354:	90800094 	ori	r2,r18,2
 8001358:	18045d16 	blt	r3,zero,80024d0 <___vfprintf_internal_r+0x1d0c>
 800135c:	00bfdfc4 	movi	r2,-129
 8001360:	90a4703a 	and	r18,r18,r2
 8001364:	94800094 	ori	r18,r18,2
 8001368:	0039883a 	mov	fp,zero
 800136c:	d9003917 	ldw	r4,228(sp)
 8001370:	dc001e04 	addi	r16,sp,120
 8001374:	988003cc 	andi	r2,r19,15
 8001378:	b006973a 	slli	r3,r22,28
 800137c:	2085883a 	add	r2,r4,r2
 8001380:	9826d13a 	srli	r19,r19,4
 8001384:	10800003 	ldbu	r2,0(r2)
 8001388:	b02cd13a 	srli	r22,r22,4
 800138c:	843fffc4 	addi	r16,r16,-1
 8001390:	1ce6b03a 	or	r19,r3,r19
 8001394:	80800005 	stb	r2,0(r16)
 8001398:	9d84b03a 	or	r2,r19,r22
 800139c:	103ff51e 	bne	r2,zero,8001374 <__alt_data_end+0xff001374>
 80013a0:	d8c02817 	ldw	r3,160(sp)
 80013a4:	1c07c83a 	sub	r3,r3,r16
 80013a8:	d8c02e15 	stw	r3,184(sp)
 80013ac:	003ecc06 	br	8000ee0 <__alt_data_end+0xff000ee0>
 80013b0:	18c03fcc 	andi	r3,r3,255
 80013b4:	183e9f26 	beq	r3,zero,8000e34 <__alt_data_end+0xff000e34>
 80013b8:	d9c02785 	stb	r7,158(sp)
 80013bc:	003e9d06 	br	8000e34 <__alt_data_end+0xff000e34>
 80013c0:	00c00044 	movi	r3,1
 80013c4:	01c00ac4 	movi	r7,43
 80013c8:	ac400007 	ldb	r17,0(r21)
 80013cc:	003d5e06 	br	8000948 <__alt_data_end+0xff000948>
 80013d0:	94800814 	ori	r18,r18,32
 80013d4:	ac400007 	ldb	r17,0(r21)
 80013d8:	003d5b06 	br	8000948 <__alt_data_end+0xff000948>
 80013dc:	d8c02d17 	ldw	r3,180(sp)
 80013e0:	d8002785 	stb	zero,158(sp)
 80013e4:	1c000017 	ldw	r16,0(r3)
 80013e8:	1cc00104 	addi	r19,r3,4
 80013ec:	80041926 	beq	r16,zero,8002454 <___vfprintf_internal_r+0x1c90>
 80013f0:	d9002917 	ldw	r4,164(sp)
 80013f4:	2003d016 	blt	r4,zero,8002338 <___vfprintf_internal_r+0x1b74>
 80013f8:	200d883a 	mov	r6,r4
 80013fc:	000b883a 	mov	r5,zero
 8001400:	8009883a 	mov	r4,r16
 8001404:	da003d15 	stw	r8,244(sp)
 8001408:	8005fd40 	call	8005fd4 <memchr>
 800140c:	da003d17 	ldw	r8,244(sp)
 8001410:	10045426 	beq	r2,zero,8002564 <___vfprintf_internal_r+0x1da0>
 8001414:	1405c83a 	sub	r2,r2,r16
 8001418:	d8802e15 	stw	r2,184(sp)
 800141c:	1003cc16 	blt	r2,zero,8002350 <___vfprintf_internal_r+0x1b8c>
 8001420:	df002783 	ldbu	fp,158(sp)
 8001424:	d8802a15 	stw	r2,168(sp)
 8001428:	dcc02d15 	stw	r19,180(sp)
 800142c:	d8002915 	stw	zero,164(sp)
 8001430:	d8003215 	stw	zero,200(sp)
 8001434:	003eb006 	br	8000ef8 <__alt_data_end+0xff000ef8>
 8001438:	18c03fcc 	andi	r3,r3,255
 800143c:	183f9b26 	beq	r3,zero,80012ac <__alt_data_end+0xff0012ac>
 8001440:	d9c02785 	stb	r7,158(sp)
 8001444:	003f9906 	br	80012ac <__alt_data_end+0xff0012ac>
 8001448:	18c03fcc 	andi	r3,r3,255
 800144c:	1805551e 	bne	r3,zero,80029a4 <___vfprintf_internal_r+0x21e0>
 8001450:	01420074 	movhi	r5,2049
 8001454:	29468f04 	addi	r5,r5,6716
 8001458:	d9403915 	stw	r5,228(sp)
 800145c:	9080080c 	andi	r2,r18,32
 8001460:	103fae1e 	bne	r2,zero,800131c <__alt_data_end+0xff00131c>
 8001464:	9080040c 	andi	r2,r18,16
 8001468:	1002de26 	beq	r2,zero,8001fe4 <___vfprintf_internal_r+0x1820>
 800146c:	d8c02d17 	ldw	r3,180(sp)
 8001470:	002d883a 	mov	r22,zero
 8001474:	1cc00017 	ldw	r19,0(r3)
 8001478:	18c00104 	addi	r3,r3,4
 800147c:	d8c02d15 	stw	r3,180(sp)
 8001480:	003fab06 	br	8001330 <__alt_data_end+0xff001330>
 8001484:	38803fcc 	andi	r2,r7,255
 8001488:	1080201c 	xori	r2,r2,128
 800148c:	10bfe004 	addi	r2,r2,-128
 8001490:	1002d21e 	bne	r2,zero,8001fdc <___vfprintf_internal_r+0x1818>
 8001494:	00c00044 	movi	r3,1
 8001498:	01c00804 	movi	r7,32
 800149c:	ac400007 	ldb	r17,0(r21)
 80014a0:	003d2906 	br	8000948 <__alt_data_end+0xff000948>
 80014a4:	94800054 	ori	r18,r18,1
 80014a8:	ac400007 	ldb	r17,0(r21)
 80014ac:	003d2606 	br	8000948 <__alt_data_end+0xff000948>
 80014b0:	18c03fcc 	andi	r3,r3,255
 80014b4:	183e0526 	beq	r3,zero,8000ccc <__alt_data_end+0xff000ccc>
 80014b8:	d9c02785 	stb	r7,158(sp)
 80014bc:	003e0306 	br	8000ccc <__alt_data_end+0xff000ccc>
 80014c0:	94801014 	ori	r18,r18,64
 80014c4:	ac400007 	ldb	r17,0(r21)
 80014c8:	003d1f06 	br	8000948 <__alt_data_end+0xff000948>
 80014cc:	ac400007 	ldb	r17,0(r21)
 80014d0:	8a438726 	beq	r17,r9,80022f0 <___vfprintf_internal_r+0x1b2c>
 80014d4:	94800414 	ori	r18,r18,16
 80014d8:	003d1b06 	br	8000948 <__alt_data_end+0xff000948>
 80014dc:	18c03fcc 	andi	r3,r3,255
 80014e0:	1805341e 	bne	r3,zero,80029b4 <___vfprintf_internal_r+0x21f0>
 80014e4:	9080080c 	andi	r2,r18,32
 80014e8:	1002cd26 	beq	r2,zero,8002020 <___vfprintf_internal_r+0x185c>
 80014ec:	d9402d17 	ldw	r5,180(sp)
 80014f0:	d9002f17 	ldw	r4,188(sp)
 80014f4:	28800017 	ldw	r2,0(r5)
 80014f8:	2007d7fa 	srai	r3,r4,31
 80014fc:	29400104 	addi	r5,r5,4
 8001500:	d9402d15 	stw	r5,180(sp)
 8001504:	11000015 	stw	r4,0(r2)
 8001508:	10c00115 	stw	r3,4(r2)
 800150c:	003ce506 	br	80008a4 <__alt_data_end+0xff0008a4>
 8001510:	d8c02d17 	ldw	r3,180(sp)
 8001514:	d9002d17 	ldw	r4,180(sp)
 8001518:	d8002785 	stb	zero,158(sp)
 800151c:	18800017 	ldw	r2,0(r3)
 8001520:	21000104 	addi	r4,r4,4
 8001524:	00c00044 	movi	r3,1
 8001528:	d8c02a15 	stw	r3,168(sp)
 800152c:	d8801405 	stb	r2,80(sp)
 8001530:	d9002d15 	stw	r4,180(sp)
 8001534:	d8c02e15 	stw	r3,184(sp)
 8001538:	d8002915 	stw	zero,164(sp)
 800153c:	d8003215 	stw	zero,200(sp)
 8001540:	dc001404 	addi	r16,sp,80
 8001544:	0039883a 	mov	fp,zero
 8001548:	003e7206 	br	8000f14 <__alt_data_end+0xff000f14>
 800154c:	01020074 	movhi	r4,2049
 8001550:	21068f04 	addi	r4,r4,6716
 8001554:	0039883a 	mov	fp,zero
 8001558:	d9003915 	stw	r4,228(sp)
 800155c:	04401e04 	movi	r17,120
 8001560:	003f8206 	br	800136c <__alt_data_end+0xff00136c>
 8001564:	18c03fcc 	andi	r3,r3,255
 8001568:	1805061e 	bne	r3,zero,8002984 <___vfprintf_internal_r+0x21c0>
 800156c:	883d9126 	beq	r17,zero,8000bb4 <__alt_data_end+0xff000bb4>
 8001570:	00c00044 	movi	r3,1
 8001574:	d8c02a15 	stw	r3,168(sp)
 8001578:	dc401405 	stb	r17,80(sp)
 800157c:	d8002785 	stb	zero,158(sp)
 8001580:	003fec06 	br	8001534 <__alt_data_end+0xff001534>
 8001584:	01420074 	movhi	r5,2049
 8001588:	29468f04 	addi	r5,r5,6716
 800158c:	d9403915 	stw	r5,228(sp)
 8001590:	d8c02d15 	stw	r3,180(sp)
 8001594:	1025883a 	mov	r18,r2
 8001598:	04401e04 	movi	r17,120
 800159c:	9d84b03a 	or	r2,r19,r22
 80015a0:	1000fc1e 	bne	r2,zero,8001994 <___vfprintf_internal_r+0x11d0>
 80015a4:	0039883a 	mov	fp,zero
 80015a8:	00800084 	movi	r2,2
 80015ac:	10803fcc 	andi	r2,r2,255
 80015b0:	00c00044 	movi	r3,1
 80015b4:	10c20f26 	beq	r2,r3,8001df4 <___vfprintf_internal_r+0x1630>
 80015b8:	00c00084 	movi	r3,2
 80015bc:	10fd6326 	beq	r2,r3,8000b4c <__alt_data_end+0xff000b4c>
 80015c0:	003e2d06 	br	8000e78 <__alt_data_end+0xff000e78>
 80015c4:	d8c02017 	ldw	r3,128(sp)
 80015c8:	003e9306 	br	8001018 <__alt_data_end+0xff001018>
 80015cc:	00801944 	movi	r2,101
 80015d0:	14407e0e 	bge	r2,r17,80017cc <___vfprintf_internal_r+0x1008>
 80015d4:	d9003617 	ldw	r4,216(sp)
 80015d8:	d9403817 	ldw	r5,224(sp)
 80015dc:	000d883a 	mov	r6,zero
 80015e0:	000f883a 	mov	r7,zero
 80015e4:	d8c03c15 	stw	r3,240(sp)
 80015e8:	da003d15 	stw	r8,244(sp)
 80015ec:	800bba00 	call	800bba0 <__eqdf2>
 80015f0:	d8c03c17 	ldw	r3,240(sp)
 80015f4:	da003d17 	ldw	r8,244(sp)
 80015f8:	1000f71e 	bne	r2,zero,80019d8 <___vfprintf_internal_r+0x1214>
 80015fc:	d8801f17 	ldw	r2,124(sp)
 8001600:	01020074 	movhi	r4,2049
 8001604:	21069604 	addi	r4,r4,6744
 8001608:	18c00044 	addi	r3,r3,1
 800160c:	10800044 	addi	r2,r2,1
 8001610:	41000015 	stw	r4,0(r8)
 8001614:	01000044 	movi	r4,1
 8001618:	41000115 	stw	r4,4(r8)
 800161c:	d8c02015 	stw	r3,128(sp)
 8001620:	d8801f15 	stw	r2,124(sp)
 8001624:	010001c4 	movi	r4,7
 8001628:	2082b816 	blt	r4,r2,800210c <___vfprintf_internal_r+0x1948>
 800162c:	42000204 	addi	r8,r8,8
 8001630:	d8802617 	ldw	r2,152(sp)
 8001634:	d9403317 	ldw	r5,204(sp)
 8001638:	11400216 	blt	r2,r5,8001644 <___vfprintf_internal_r+0xe80>
 800163c:	9080004c 	andi	r2,r18,1
 8001640:	103ed526 	beq	r2,zero,8001198 <__alt_data_end+0xff001198>
 8001644:	d8803717 	ldw	r2,220(sp)
 8001648:	d9003417 	ldw	r4,208(sp)
 800164c:	d9403717 	ldw	r5,220(sp)
 8001650:	1887883a 	add	r3,r3,r2
 8001654:	d8801f17 	ldw	r2,124(sp)
 8001658:	41000015 	stw	r4,0(r8)
 800165c:	41400115 	stw	r5,4(r8)
 8001660:	10800044 	addi	r2,r2,1
 8001664:	d8c02015 	stw	r3,128(sp)
 8001668:	d8801f15 	stw	r2,124(sp)
 800166c:	010001c4 	movi	r4,7
 8001670:	20832916 	blt	r4,r2,8002318 <___vfprintf_internal_r+0x1b54>
 8001674:	42000204 	addi	r8,r8,8
 8001678:	d8803317 	ldw	r2,204(sp)
 800167c:	143fffc4 	addi	r16,r2,-1
 8001680:	043ec50e 	bge	zero,r16,8001198 <__alt_data_end+0xff001198>
 8001684:	04400404 	movi	r17,16
 8001688:	d8801f17 	ldw	r2,124(sp)
 800168c:	8c00880e 	bge	r17,r16,80018b0 <___vfprintf_internal_r+0x10ec>
 8001690:	01420074 	movhi	r5,2049
 8001694:	29469684 	addi	r5,r5,6746
 8001698:	d9402b15 	stw	r5,172(sp)
 800169c:	058001c4 	movi	r22,7
 80016a0:	dcc02c17 	ldw	r19,176(sp)
 80016a4:	00000306 	br	80016b4 <___vfprintf_internal_r+0xef0>
 80016a8:	42000204 	addi	r8,r8,8
 80016ac:	843ffc04 	addi	r16,r16,-16
 80016b0:	8c00820e 	bge	r17,r16,80018bc <___vfprintf_internal_r+0x10f8>
 80016b4:	18c00404 	addi	r3,r3,16
 80016b8:	10800044 	addi	r2,r2,1
 80016bc:	45000015 	stw	r20,0(r8)
 80016c0:	44400115 	stw	r17,4(r8)
 80016c4:	d8c02015 	stw	r3,128(sp)
 80016c8:	d8801f15 	stw	r2,124(sp)
 80016cc:	b0bff60e 	bge	r22,r2,80016a8 <__alt_data_end+0xff0016a8>
 80016d0:	d9801e04 	addi	r6,sp,120
 80016d4:	b80b883a 	mov	r5,r23
 80016d8:	9809883a 	mov	r4,r19
 80016dc:	8007f280 	call	8007f28 <__sprint_r>
 80016e0:	103d3a1e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 80016e4:	d8c02017 	ldw	r3,128(sp)
 80016e8:	d8801f17 	ldw	r2,124(sp)
 80016ec:	da000404 	addi	r8,sp,16
 80016f0:	003fee06 	br	80016ac <__alt_data_end+0xff0016ac>
 80016f4:	d9403117 	ldw	r5,196(sp)
 80016f8:	d8802a17 	ldw	r2,168(sp)
 80016fc:	28adc83a 	sub	r22,r5,r2
 8001700:	05be630e 	bge	zero,r22,8001090 <__alt_data_end+0xff001090>
 8001704:	07000404 	movi	fp,16
 8001708:	d8801f17 	ldw	r2,124(sp)
 800170c:	e5838f0e 	bge	fp,r22,800254c <___vfprintf_internal_r+0x1d88>
 8001710:	01420074 	movhi	r5,2049
 8001714:	29469684 	addi	r5,r5,6746
 8001718:	dc403015 	stw	r17,192(sp)
 800171c:	d9402b15 	stw	r5,172(sp)
 8001720:	b023883a 	mov	r17,r22
 8001724:	04c001c4 	movi	r19,7
 8001728:	a82d883a 	mov	r22,r21
 800172c:	902b883a 	mov	r21,r18
 8001730:	8025883a 	mov	r18,r16
 8001734:	dc002c17 	ldw	r16,176(sp)
 8001738:	00000306 	br	8001748 <___vfprintf_internal_r+0xf84>
 800173c:	8c7ffc04 	addi	r17,r17,-16
 8001740:	42000204 	addi	r8,r8,8
 8001744:	e440110e 	bge	fp,r17,800178c <___vfprintf_internal_r+0xfc8>
 8001748:	18c00404 	addi	r3,r3,16
 800174c:	10800044 	addi	r2,r2,1
 8001750:	45000015 	stw	r20,0(r8)
 8001754:	47000115 	stw	fp,4(r8)
 8001758:	d8c02015 	stw	r3,128(sp)
 800175c:	d8801f15 	stw	r2,124(sp)
 8001760:	98bff60e 	bge	r19,r2,800173c <__alt_data_end+0xff00173c>
 8001764:	d9801e04 	addi	r6,sp,120
 8001768:	b80b883a 	mov	r5,r23
 800176c:	8009883a 	mov	r4,r16
 8001770:	8007f280 	call	8007f28 <__sprint_r>
 8001774:	103d151e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001778:	8c7ffc04 	addi	r17,r17,-16
 800177c:	d8c02017 	ldw	r3,128(sp)
 8001780:	d8801f17 	ldw	r2,124(sp)
 8001784:	da000404 	addi	r8,sp,16
 8001788:	e47fef16 	blt	fp,r17,8001748 <__alt_data_end+0xff001748>
 800178c:	9021883a 	mov	r16,r18
 8001790:	a825883a 	mov	r18,r21
 8001794:	b02b883a 	mov	r21,r22
 8001798:	882d883a 	mov	r22,r17
 800179c:	dc403017 	ldw	r17,192(sp)
 80017a0:	d9002b17 	ldw	r4,172(sp)
 80017a4:	1d87883a 	add	r3,r3,r22
 80017a8:	10800044 	addi	r2,r2,1
 80017ac:	41000015 	stw	r4,0(r8)
 80017b0:	45800115 	stw	r22,4(r8)
 80017b4:	d8c02015 	stw	r3,128(sp)
 80017b8:	d8801f15 	stw	r2,124(sp)
 80017bc:	010001c4 	movi	r4,7
 80017c0:	20818e16 	blt	r4,r2,8001dfc <___vfprintf_internal_r+0x1638>
 80017c4:	42000204 	addi	r8,r8,8
 80017c8:	003e3106 	br	8001090 <__alt_data_end+0xff001090>
 80017cc:	d9403317 	ldw	r5,204(sp)
 80017d0:	00800044 	movi	r2,1
 80017d4:	18c00044 	addi	r3,r3,1
 80017d8:	1141530e 	bge	r2,r5,8001d28 <___vfprintf_internal_r+0x1564>
 80017dc:	dc401f17 	ldw	r17,124(sp)
 80017e0:	00800044 	movi	r2,1
 80017e4:	40800115 	stw	r2,4(r8)
 80017e8:	8c400044 	addi	r17,r17,1
 80017ec:	44000015 	stw	r16,0(r8)
 80017f0:	d8c02015 	stw	r3,128(sp)
 80017f4:	dc401f15 	stw	r17,124(sp)
 80017f8:	008001c4 	movi	r2,7
 80017fc:	14416b16 	blt	r2,r17,8001dac <___vfprintf_internal_r+0x15e8>
 8001800:	42000204 	addi	r8,r8,8
 8001804:	d8803717 	ldw	r2,220(sp)
 8001808:	d9003417 	ldw	r4,208(sp)
 800180c:	8c400044 	addi	r17,r17,1
 8001810:	10c7883a 	add	r3,r2,r3
 8001814:	40800115 	stw	r2,4(r8)
 8001818:	41000015 	stw	r4,0(r8)
 800181c:	d8c02015 	stw	r3,128(sp)
 8001820:	dc401f15 	stw	r17,124(sp)
 8001824:	008001c4 	movi	r2,7
 8001828:	14416916 	blt	r2,r17,8001dd0 <___vfprintf_internal_r+0x160c>
 800182c:	45800204 	addi	r22,r8,8
 8001830:	d9003617 	ldw	r4,216(sp)
 8001834:	d9403817 	ldw	r5,224(sp)
 8001838:	000d883a 	mov	r6,zero
 800183c:	000f883a 	mov	r7,zero
 8001840:	d8c03c15 	stw	r3,240(sp)
 8001844:	800bba00 	call	800bba0 <__eqdf2>
 8001848:	d8c03c17 	ldw	r3,240(sp)
 800184c:	1000bc26 	beq	r2,zero,8001b40 <___vfprintf_internal_r+0x137c>
 8001850:	d9403317 	ldw	r5,204(sp)
 8001854:	84000044 	addi	r16,r16,1
 8001858:	8c400044 	addi	r17,r17,1
 800185c:	28bfffc4 	addi	r2,r5,-1
 8001860:	1887883a 	add	r3,r3,r2
 8001864:	b0800115 	stw	r2,4(r22)
 8001868:	b4000015 	stw	r16,0(r22)
 800186c:	d8c02015 	stw	r3,128(sp)
 8001870:	dc401f15 	stw	r17,124(sp)
 8001874:	008001c4 	movi	r2,7
 8001878:	14414316 	blt	r2,r17,8001d88 <___vfprintf_internal_r+0x15c4>
 800187c:	b5800204 	addi	r22,r22,8
 8001880:	d9003a17 	ldw	r4,232(sp)
 8001884:	df0022c4 	addi	fp,sp,139
 8001888:	8c400044 	addi	r17,r17,1
 800188c:	20c7883a 	add	r3,r4,r3
 8001890:	b7000015 	stw	fp,0(r22)
 8001894:	b1000115 	stw	r4,4(r22)
 8001898:	d8c02015 	stw	r3,128(sp)
 800189c:	dc401f15 	stw	r17,124(sp)
 80018a0:	008001c4 	movi	r2,7
 80018a4:	14400e16 	blt	r2,r17,80018e0 <___vfprintf_internal_r+0x111c>
 80018a8:	b2000204 	addi	r8,r22,8
 80018ac:	003e3a06 	br	8001198 <__alt_data_end+0xff001198>
 80018b0:	01020074 	movhi	r4,2049
 80018b4:	21069684 	addi	r4,r4,6746
 80018b8:	d9002b15 	stw	r4,172(sp)
 80018bc:	d9002b17 	ldw	r4,172(sp)
 80018c0:	1c07883a 	add	r3,r3,r16
 80018c4:	44000115 	stw	r16,4(r8)
 80018c8:	41000015 	stw	r4,0(r8)
 80018cc:	10800044 	addi	r2,r2,1
 80018d0:	d8c02015 	stw	r3,128(sp)
 80018d4:	d8801f15 	stw	r2,124(sp)
 80018d8:	010001c4 	movi	r4,7
 80018dc:	20be2d0e 	bge	r4,r2,8001194 <__alt_data_end+0xff001194>
 80018e0:	d9002c17 	ldw	r4,176(sp)
 80018e4:	d9801e04 	addi	r6,sp,120
 80018e8:	b80b883a 	mov	r5,r23
 80018ec:	8007f280 	call	8007f28 <__sprint_r>
 80018f0:	103cb61e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 80018f4:	d8c02017 	ldw	r3,128(sp)
 80018f8:	da000404 	addi	r8,sp,16
 80018fc:	003e2606 	br	8001198 <__alt_data_end+0xff001198>
 8001900:	d9002c17 	ldw	r4,176(sp)
 8001904:	d9801e04 	addi	r6,sp,120
 8001908:	b80b883a 	mov	r5,r23
 800190c:	8007f280 	call	8007f28 <__sprint_r>
 8001910:	103e5d26 	beq	r2,zero,8001288 <__alt_data_end+0xff001288>
 8001914:	003cad06 	br	8000bcc <__alt_data_end+0xff000bcc>
 8001918:	d9002c17 	ldw	r4,176(sp)
 800191c:	d9801e04 	addi	r6,sp,120
 8001920:	b80b883a 	mov	r5,r23
 8001924:	8007f280 	call	8007f28 <__sprint_r>
 8001928:	103ca81e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 800192c:	d8c02017 	ldw	r3,128(sp)
 8001930:	da000404 	addi	r8,sp,16
 8001934:	003e0b06 	br	8001164 <__alt_data_end+0xff001164>
 8001938:	d9002c17 	ldw	r4,176(sp)
 800193c:	d9801e04 	addi	r6,sp,120
 8001940:	b80b883a 	mov	r5,r23
 8001944:	8007f280 	call	8007f28 <__sprint_r>
 8001948:	103ca01e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 800194c:	d8c02017 	ldw	r3,128(sp)
 8001950:	da000404 	addi	r8,sp,16
 8001954:	003dbd06 	br	800104c <__alt_data_end+0xff00104c>
 8001958:	d9002c17 	ldw	r4,176(sp)
 800195c:	d9801e04 	addi	r6,sp,120
 8001960:	b80b883a 	mov	r5,r23
 8001964:	8007f280 	call	8007f28 <__sprint_r>
 8001968:	103c981e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 800196c:	d8c02017 	ldw	r3,128(sp)
 8001970:	da000404 	addi	r8,sp,16
 8001974:	003dc306 	br	8001084 <__alt_data_end+0xff001084>
 8001978:	d8802917 	ldw	r2,164(sp)
 800197c:	d8002785 	stb	zero,158(sp)
 8001980:	103f0616 	blt	r2,zero,800159c <__alt_data_end+0xff00159c>
 8001984:	00ffdfc4 	movi	r3,-129
 8001988:	9d84b03a 	or	r2,r19,r22
 800198c:	90e4703a 	and	r18,r18,r3
 8001990:	103c6b26 	beq	r2,zero,8000b40 <__alt_data_end+0xff000b40>
 8001994:	0039883a 	mov	fp,zero
 8001998:	003e7406 	br	800136c <__alt_data_end+0xff00136c>
 800199c:	9080040c 	andi	r2,r18,16
 80019a0:	1001b326 	beq	r2,zero,8002070 <___vfprintf_internal_r+0x18ac>
 80019a4:	d9002d17 	ldw	r4,180(sp)
 80019a8:	d9402917 	ldw	r5,164(sp)
 80019ac:	d8002785 	stb	zero,158(sp)
 80019b0:	20800104 	addi	r2,r4,4
 80019b4:	24c00017 	ldw	r19,0(r4)
 80019b8:	002d883a 	mov	r22,zero
 80019bc:	2801b516 	blt	r5,zero,8002094 <___vfprintf_internal_r+0x18d0>
 80019c0:	00ffdfc4 	movi	r3,-129
 80019c4:	d8802d15 	stw	r2,180(sp)
 80019c8:	90e4703a 	and	r18,r18,r3
 80019cc:	983d2726 	beq	r19,zero,8000e6c <__alt_data_end+0xff000e6c>
 80019d0:	0039883a 	mov	fp,zero
 80019d4:	003d2a06 	br	8000e80 <__alt_data_end+0xff000e80>
 80019d8:	dc402617 	ldw	r17,152(sp)
 80019dc:	0441d30e 	bge	zero,r17,800212c <___vfprintf_internal_r+0x1968>
 80019e0:	dc403217 	ldw	r17,200(sp)
 80019e4:	d8803317 	ldw	r2,204(sp)
 80019e8:	1440010e 	bge	r2,r17,80019f0 <___vfprintf_internal_r+0x122c>
 80019ec:	1023883a 	mov	r17,r2
 80019f0:	04400a0e 	bge	zero,r17,8001a1c <___vfprintf_internal_r+0x1258>
 80019f4:	d8801f17 	ldw	r2,124(sp)
 80019f8:	1c47883a 	add	r3,r3,r17
 80019fc:	44000015 	stw	r16,0(r8)
 8001a00:	10800044 	addi	r2,r2,1
 8001a04:	44400115 	stw	r17,4(r8)
 8001a08:	d8c02015 	stw	r3,128(sp)
 8001a0c:	d8801f15 	stw	r2,124(sp)
 8001a10:	010001c4 	movi	r4,7
 8001a14:	20826516 	blt	r4,r2,80023ac <___vfprintf_internal_r+0x1be8>
 8001a18:	42000204 	addi	r8,r8,8
 8001a1c:	88026116 	blt	r17,zero,80023a4 <___vfprintf_internal_r+0x1be0>
 8001a20:	d9003217 	ldw	r4,200(sp)
 8001a24:	2463c83a 	sub	r17,r4,r17
 8001a28:	04407b0e 	bge	zero,r17,8001c18 <___vfprintf_internal_r+0x1454>
 8001a2c:	05800404 	movi	r22,16
 8001a30:	d8801f17 	ldw	r2,124(sp)
 8001a34:	b4419d0e 	bge	r22,r17,80020ac <___vfprintf_internal_r+0x18e8>
 8001a38:	01020074 	movhi	r4,2049
 8001a3c:	21069684 	addi	r4,r4,6746
 8001a40:	d9002b15 	stw	r4,172(sp)
 8001a44:	070001c4 	movi	fp,7
 8001a48:	dcc02c17 	ldw	r19,176(sp)
 8001a4c:	00000306 	br	8001a5c <___vfprintf_internal_r+0x1298>
 8001a50:	42000204 	addi	r8,r8,8
 8001a54:	8c7ffc04 	addi	r17,r17,-16
 8001a58:	b441970e 	bge	r22,r17,80020b8 <___vfprintf_internal_r+0x18f4>
 8001a5c:	18c00404 	addi	r3,r3,16
 8001a60:	10800044 	addi	r2,r2,1
 8001a64:	45000015 	stw	r20,0(r8)
 8001a68:	45800115 	stw	r22,4(r8)
 8001a6c:	d8c02015 	stw	r3,128(sp)
 8001a70:	d8801f15 	stw	r2,124(sp)
 8001a74:	e0bff60e 	bge	fp,r2,8001a50 <__alt_data_end+0xff001a50>
 8001a78:	d9801e04 	addi	r6,sp,120
 8001a7c:	b80b883a 	mov	r5,r23
 8001a80:	9809883a 	mov	r4,r19
 8001a84:	8007f280 	call	8007f28 <__sprint_r>
 8001a88:	103c501e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001a8c:	d8c02017 	ldw	r3,128(sp)
 8001a90:	d8801f17 	ldw	r2,124(sp)
 8001a94:	da000404 	addi	r8,sp,16
 8001a98:	003fee06 	br	8001a54 <__alt_data_end+0xff001a54>
 8001a9c:	d9002c17 	ldw	r4,176(sp)
 8001aa0:	d9801e04 	addi	r6,sp,120
 8001aa4:	b80b883a 	mov	r5,r23
 8001aa8:	8007f280 	call	8007f28 <__sprint_r>
 8001aac:	103c471e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001ab0:	d8c02017 	ldw	r3,128(sp)
 8001ab4:	df002787 	ldb	fp,158(sp)
 8001ab8:	da000404 	addi	r8,sp,16
 8001abc:	003d5606 	br	8001018 <__alt_data_end+0xff001018>
 8001ac0:	9080040c 	andi	r2,r18,16
 8001ac4:	10016126 	beq	r2,zero,800204c <___vfprintf_internal_r+0x1888>
 8001ac8:	d8802d17 	ldw	r2,180(sp)
 8001acc:	14c00017 	ldw	r19,0(r2)
 8001ad0:	10800104 	addi	r2,r2,4
 8001ad4:	d8802d15 	stw	r2,180(sp)
 8001ad8:	982dd7fa 	srai	r22,r19,31
 8001adc:	b005883a 	mov	r2,r22
 8001ae0:	003c8206 	br	8000cec <__alt_data_end+0xff000cec>
 8001ae4:	9080040c 	andi	r2,r18,16
 8001ae8:	10003526 	beq	r2,zero,8001bc0 <___vfprintf_internal_r+0x13fc>
 8001aec:	d9402d17 	ldw	r5,180(sp)
 8001af0:	d8c02917 	ldw	r3,164(sp)
 8001af4:	d8002785 	stb	zero,158(sp)
 8001af8:	28800104 	addi	r2,r5,4
 8001afc:	2cc00017 	ldw	r19,0(r5)
 8001b00:	002d883a 	mov	r22,zero
 8001b04:	18003716 	blt	r3,zero,8001be4 <___vfprintf_internal_r+0x1420>
 8001b08:	00ffdfc4 	movi	r3,-129
 8001b0c:	d8802d15 	stw	r2,180(sp)
 8001b10:	90e4703a 	and	r18,r18,r3
 8001b14:	0039883a 	mov	fp,zero
 8001b18:	983df326 	beq	r19,zero,80012e8 <__alt_data_end+0xff0012e8>
 8001b1c:	00800244 	movi	r2,9
 8001b20:	14fc7b36 	bltu	r2,r19,8000d10 <__alt_data_end+0xff000d10>
 8001b24:	d8c02817 	ldw	r3,160(sp)
 8001b28:	dc001dc4 	addi	r16,sp,119
 8001b2c:	9cc00c04 	addi	r19,r19,48
 8001b30:	1c07c83a 	sub	r3,r3,r16
 8001b34:	dcc01dc5 	stb	r19,119(sp)
 8001b38:	d8c02e15 	stw	r3,184(sp)
 8001b3c:	003ce806 	br	8000ee0 <__alt_data_end+0xff000ee0>
 8001b40:	d8803317 	ldw	r2,204(sp)
 8001b44:	143fffc4 	addi	r16,r2,-1
 8001b48:	043f4d0e 	bge	zero,r16,8001880 <__alt_data_end+0xff001880>
 8001b4c:	07000404 	movi	fp,16
 8001b50:	e400810e 	bge	fp,r16,8001d58 <___vfprintf_internal_r+0x1594>
 8001b54:	01420074 	movhi	r5,2049
 8001b58:	29469684 	addi	r5,r5,6746
 8001b5c:	d9402b15 	stw	r5,172(sp)
 8001b60:	01c001c4 	movi	r7,7
 8001b64:	dcc02c17 	ldw	r19,176(sp)
 8001b68:	00000306 	br	8001b78 <___vfprintf_internal_r+0x13b4>
 8001b6c:	b5800204 	addi	r22,r22,8
 8001b70:	843ffc04 	addi	r16,r16,-16
 8001b74:	e4007b0e 	bge	fp,r16,8001d64 <___vfprintf_internal_r+0x15a0>
 8001b78:	18c00404 	addi	r3,r3,16
 8001b7c:	8c400044 	addi	r17,r17,1
 8001b80:	b5000015 	stw	r20,0(r22)
 8001b84:	b7000115 	stw	fp,4(r22)
 8001b88:	d8c02015 	stw	r3,128(sp)
 8001b8c:	dc401f15 	stw	r17,124(sp)
 8001b90:	3c7ff60e 	bge	r7,r17,8001b6c <__alt_data_end+0xff001b6c>
 8001b94:	d9801e04 	addi	r6,sp,120
 8001b98:	b80b883a 	mov	r5,r23
 8001b9c:	9809883a 	mov	r4,r19
 8001ba0:	d9c03c15 	stw	r7,240(sp)
 8001ba4:	8007f280 	call	8007f28 <__sprint_r>
 8001ba8:	d9c03c17 	ldw	r7,240(sp)
 8001bac:	103c071e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001bb0:	d8c02017 	ldw	r3,128(sp)
 8001bb4:	dc401f17 	ldw	r17,124(sp)
 8001bb8:	dd800404 	addi	r22,sp,16
 8001bbc:	003fec06 	br	8001b70 <__alt_data_end+0xff001b70>
 8001bc0:	9080100c 	andi	r2,r18,64
 8001bc4:	d8002785 	stb	zero,158(sp)
 8001bc8:	10010e26 	beq	r2,zero,8002004 <___vfprintf_internal_r+0x1840>
 8001bcc:	d9002d17 	ldw	r4,180(sp)
 8001bd0:	d9402917 	ldw	r5,164(sp)
 8001bd4:	002d883a 	mov	r22,zero
 8001bd8:	20800104 	addi	r2,r4,4
 8001bdc:	24c0000b 	ldhu	r19,0(r4)
 8001be0:	283fc90e 	bge	r5,zero,8001b08 <__alt_data_end+0xff001b08>
 8001be4:	d8802d15 	stw	r2,180(sp)
 8001be8:	0039883a 	mov	fp,zero
 8001bec:	9d84b03a 	or	r2,r19,r22
 8001bf0:	103c461e 	bne	r2,zero,8000d0c <__alt_data_end+0xff000d0c>
 8001bf4:	00800044 	movi	r2,1
 8001bf8:	003e6c06 	br	80015ac <__alt_data_end+0xff0015ac>
 8001bfc:	d9002c17 	ldw	r4,176(sp)
 8001c00:	d9801e04 	addi	r6,sp,120
 8001c04:	b80b883a 	mov	r5,r23
 8001c08:	8007f280 	call	8007f28 <__sprint_r>
 8001c0c:	103bef1e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001c10:	d8c02017 	ldw	r3,128(sp)
 8001c14:	da000404 	addi	r8,sp,16
 8001c18:	d9003217 	ldw	r4,200(sp)
 8001c1c:	d8802617 	ldw	r2,152(sp)
 8001c20:	d9403317 	ldw	r5,204(sp)
 8001c24:	8123883a 	add	r17,r16,r4
 8001c28:	11400216 	blt	r2,r5,8001c34 <___vfprintf_internal_r+0x1470>
 8001c2c:	9100004c 	andi	r4,r18,1
 8001c30:	20000d26 	beq	r4,zero,8001c68 <___vfprintf_internal_r+0x14a4>
 8001c34:	d9003717 	ldw	r4,220(sp)
 8001c38:	d9403417 	ldw	r5,208(sp)
 8001c3c:	1907883a 	add	r3,r3,r4
 8001c40:	d9001f17 	ldw	r4,124(sp)
 8001c44:	41400015 	stw	r5,0(r8)
 8001c48:	d9403717 	ldw	r5,220(sp)
 8001c4c:	21000044 	addi	r4,r4,1
 8001c50:	d8c02015 	stw	r3,128(sp)
 8001c54:	41400115 	stw	r5,4(r8)
 8001c58:	d9001f15 	stw	r4,124(sp)
 8001c5c:	014001c4 	movi	r5,7
 8001c60:	2901e816 	blt	r5,r4,8002404 <___vfprintf_internal_r+0x1c40>
 8001c64:	42000204 	addi	r8,r8,8
 8001c68:	d9003317 	ldw	r4,204(sp)
 8001c6c:	8121883a 	add	r16,r16,r4
 8001c70:	2085c83a 	sub	r2,r4,r2
 8001c74:	8461c83a 	sub	r16,r16,r17
 8001c78:	1400010e 	bge	r2,r16,8001c80 <___vfprintf_internal_r+0x14bc>
 8001c7c:	1021883a 	mov	r16,r2
 8001c80:	04000a0e 	bge	zero,r16,8001cac <___vfprintf_internal_r+0x14e8>
 8001c84:	d9001f17 	ldw	r4,124(sp)
 8001c88:	1c07883a 	add	r3,r3,r16
 8001c8c:	44400015 	stw	r17,0(r8)
 8001c90:	21000044 	addi	r4,r4,1
 8001c94:	44000115 	stw	r16,4(r8)
 8001c98:	d8c02015 	stw	r3,128(sp)
 8001c9c:	d9001f15 	stw	r4,124(sp)
 8001ca0:	014001c4 	movi	r5,7
 8001ca4:	2901fb16 	blt	r5,r4,8002494 <___vfprintf_internal_r+0x1cd0>
 8001ca8:	42000204 	addi	r8,r8,8
 8001cac:	8001f716 	blt	r16,zero,800248c <___vfprintf_internal_r+0x1cc8>
 8001cb0:	1421c83a 	sub	r16,r2,r16
 8001cb4:	043d380e 	bge	zero,r16,8001198 <__alt_data_end+0xff001198>
 8001cb8:	04400404 	movi	r17,16
 8001cbc:	d8801f17 	ldw	r2,124(sp)
 8001cc0:	8c3efb0e 	bge	r17,r16,80018b0 <__alt_data_end+0xff0018b0>
 8001cc4:	01420074 	movhi	r5,2049
 8001cc8:	29469684 	addi	r5,r5,6746
 8001ccc:	d9402b15 	stw	r5,172(sp)
 8001cd0:	058001c4 	movi	r22,7
 8001cd4:	dcc02c17 	ldw	r19,176(sp)
 8001cd8:	00000306 	br	8001ce8 <___vfprintf_internal_r+0x1524>
 8001cdc:	42000204 	addi	r8,r8,8
 8001ce0:	843ffc04 	addi	r16,r16,-16
 8001ce4:	8c3ef50e 	bge	r17,r16,80018bc <__alt_data_end+0xff0018bc>
 8001ce8:	18c00404 	addi	r3,r3,16
 8001cec:	10800044 	addi	r2,r2,1
 8001cf0:	45000015 	stw	r20,0(r8)
 8001cf4:	44400115 	stw	r17,4(r8)
 8001cf8:	d8c02015 	stw	r3,128(sp)
 8001cfc:	d8801f15 	stw	r2,124(sp)
 8001d00:	b0bff60e 	bge	r22,r2,8001cdc <__alt_data_end+0xff001cdc>
 8001d04:	d9801e04 	addi	r6,sp,120
 8001d08:	b80b883a 	mov	r5,r23
 8001d0c:	9809883a 	mov	r4,r19
 8001d10:	8007f280 	call	8007f28 <__sprint_r>
 8001d14:	103bad1e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001d18:	d8c02017 	ldw	r3,128(sp)
 8001d1c:	d8801f17 	ldw	r2,124(sp)
 8001d20:	da000404 	addi	r8,sp,16
 8001d24:	003fee06 	br	8001ce0 <__alt_data_end+0xff001ce0>
 8001d28:	9088703a 	and	r4,r18,r2
 8001d2c:	203eab1e 	bne	r4,zero,80017dc <__alt_data_end+0xff0017dc>
 8001d30:	dc401f17 	ldw	r17,124(sp)
 8001d34:	40800115 	stw	r2,4(r8)
 8001d38:	44000015 	stw	r16,0(r8)
 8001d3c:	8c400044 	addi	r17,r17,1
 8001d40:	d8c02015 	stw	r3,128(sp)
 8001d44:	dc401f15 	stw	r17,124(sp)
 8001d48:	008001c4 	movi	r2,7
 8001d4c:	14400e16 	blt	r2,r17,8001d88 <___vfprintf_internal_r+0x15c4>
 8001d50:	45800204 	addi	r22,r8,8
 8001d54:	003eca06 	br	8001880 <__alt_data_end+0xff001880>
 8001d58:	01020074 	movhi	r4,2049
 8001d5c:	21069684 	addi	r4,r4,6746
 8001d60:	d9002b15 	stw	r4,172(sp)
 8001d64:	d8802b17 	ldw	r2,172(sp)
 8001d68:	1c07883a 	add	r3,r3,r16
 8001d6c:	8c400044 	addi	r17,r17,1
 8001d70:	b0800015 	stw	r2,0(r22)
 8001d74:	b4000115 	stw	r16,4(r22)
 8001d78:	d8c02015 	stw	r3,128(sp)
 8001d7c:	dc401f15 	stw	r17,124(sp)
 8001d80:	008001c4 	movi	r2,7
 8001d84:	147ebd0e 	bge	r2,r17,800187c <__alt_data_end+0xff00187c>
 8001d88:	d9002c17 	ldw	r4,176(sp)
 8001d8c:	d9801e04 	addi	r6,sp,120
 8001d90:	b80b883a 	mov	r5,r23
 8001d94:	8007f280 	call	8007f28 <__sprint_r>
 8001d98:	103b8c1e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001d9c:	d8c02017 	ldw	r3,128(sp)
 8001da0:	dc401f17 	ldw	r17,124(sp)
 8001da4:	dd800404 	addi	r22,sp,16
 8001da8:	003eb506 	br	8001880 <__alt_data_end+0xff001880>
 8001dac:	d9002c17 	ldw	r4,176(sp)
 8001db0:	d9801e04 	addi	r6,sp,120
 8001db4:	b80b883a 	mov	r5,r23
 8001db8:	8007f280 	call	8007f28 <__sprint_r>
 8001dbc:	103b831e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001dc0:	d8c02017 	ldw	r3,128(sp)
 8001dc4:	dc401f17 	ldw	r17,124(sp)
 8001dc8:	da000404 	addi	r8,sp,16
 8001dcc:	003e8d06 	br	8001804 <__alt_data_end+0xff001804>
 8001dd0:	d9002c17 	ldw	r4,176(sp)
 8001dd4:	d9801e04 	addi	r6,sp,120
 8001dd8:	b80b883a 	mov	r5,r23
 8001ddc:	8007f280 	call	8007f28 <__sprint_r>
 8001de0:	103b7a1e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001de4:	d8c02017 	ldw	r3,128(sp)
 8001de8:	dc401f17 	ldw	r17,124(sp)
 8001dec:	dd800404 	addi	r22,sp,16
 8001df0:	003e8f06 	br	8001830 <__alt_data_end+0xff001830>
 8001df4:	0027883a 	mov	r19,zero
 8001df8:	003f4a06 	br	8001b24 <__alt_data_end+0xff001b24>
 8001dfc:	d9002c17 	ldw	r4,176(sp)
 8001e00:	d9801e04 	addi	r6,sp,120
 8001e04:	b80b883a 	mov	r5,r23
 8001e08:	8007f280 	call	8007f28 <__sprint_r>
 8001e0c:	103b6f1e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8001e10:	d8c02017 	ldw	r3,128(sp)
 8001e14:	da000404 	addi	r8,sp,16
 8001e18:	003c9d06 	br	8001090 <__alt_data_end+0xff001090>
 8001e1c:	04e7c83a 	sub	r19,zero,r19
 8001e20:	9804c03a 	cmpne	r2,r19,zero
 8001e24:	05adc83a 	sub	r22,zero,r22
 8001e28:	b0adc83a 	sub	r22,r22,r2
 8001e2c:	d8802917 	ldw	r2,164(sp)
 8001e30:	07000b44 	movi	fp,45
 8001e34:	df002785 	stb	fp,158(sp)
 8001e38:	10017b16 	blt	r2,zero,8002428 <___vfprintf_internal_r+0x1c64>
 8001e3c:	00bfdfc4 	movi	r2,-129
 8001e40:	90a4703a 	and	r18,r18,r2
 8001e44:	003bb106 	br	8000d0c <__alt_data_end+0xff000d0c>
 8001e48:	d9003617 	ldw	r4,216(sp)
 8001e4c:	d9403817 	ldw	r5,224(sp)
 8001e50:	da003d15 	stw	r8,244(sp)
 8001e54:	8007b4c0 	call	8007b4c <__fpclassifyd>
 8001e58:	da003d17 	ldw	r8,244(sp)
 8001e5c:	1000f026 	beq	r2,zero,8002220 <___vfprintf_internal_r+0x1a5c>
 8001e60:	d9002917 	ldw	r4,164(sp)
 8001e64:	05bff7c4 	movi	r22,-33
 8001e68:	00bfffc4 	movi	r2,-1
 8001e6c:	8dac703a 	and	r22,r17,r22
 8001e70:	20820026 	beq	r4,r2,8002674 <___vfprintf_internal_r+0x1eb0>
 8001e74:	008011c4 	movi	r2,71
 8001e78:	b081f726 	beq	r22,r2,8002658 <___vfprintf_internal_r+0x1e94>
 8001e7c:	d9003817 	ldw	r4,224(sp)
 8001e80:	90c04014 	ori	r3,r18,256
 8001e84:	d8c02b15 	stw	r3,172(sp)
 8001e88:	20021516 	blt	r4,zero,80026e0 <___vfprintf_internal_r+0x1f1c>
 8001e8c:	dcc03817 	ldw	r19,224(sp)
 8001e90:	d8002a05 	stb	zero,168(sp)
 8001e94:	00801984 	movi	r2,102
 8001e98:	8881f926 	beq	r17,r2,8002680 <___vfprintf_internal_r+0x1ebc>
 8001e9c:	00801184 	movi	r2,70
 8001ea0:	88821c26 	beq	r17,r2,8002714 <___vfprintf_internal_r+0x1f50>
 8001ea4:	00801144 	movi	r2,69
 8001ea8:	b081ef26 	beq	r22,r2,8002668 <___vfprintf_internal_r+0x1ea4>
 8001eac:	d8c02917 	ldw	r3,164(sp)
 8001eb0:	d8802104 	addi	r2,sp,132
 8001eb4:	d8800315 	stw	r2,12(sp)
 8001eb8:	d9403617 	ldw	r5,216(sp)
 8001ebc:	d8802504 	addi	r2,sp,148
 8001ec0:	d9002c17 	ldw	r4,176(sp)
 8001ec4:	d8800215 	stw	r2,8(sp)
 8001ec8:	d8802604 	addi	r2,sp,152
 8001ecc:	d8c00015 	stw	r3,0(sp)
 8001ed0:	d8800115 	stw	r2,4(sp)
 8001ed4:	01c00084 	movi	r7,2
 8001ed8:	980d883a 	mov	r6,r19
 8001edc:	d8c03c15 	stw	r3,240(sp)
 8001ee0:	da003d15 	stw	r8,244(sp)
 8001ee4:	8002de80 	call	8002de8 <_dtoa_r>
 8001ee8:	1021883a 	mov	r16,r2
 8001eec:	008019c4 	movi	r2,103
 8001ef0:	d8c03c17 	ldw	r3,240(sp)
 8001ef4:	da003d17 	ldw	r8,244(sp)
 8001ef8:	88817126 	beq	r17,r2,80024c0 <___vfprintf_internal_r+0x1cfc>
 8001efc:	008011c4 	movi	r2,71
 8001f00:	88829226 	beq	r17,r2,800294c <___vfprintf_internal_r+0x2188>
 8001f04:	80f9883a 	add	fp,r16,r3
 8001f08:	d9003617 	ldw	r4,216(sp)
 8001f0c:	000d883a 	mov	r6,zero
 8001f10:	000f883a 	mov	r7,zero
 8001f14:	980b883a 	mov	r5,r19
 8001f18:	da003d15 	stw	r8,244(sp)
 8001f1c:	800bba00 	call	800bba0 <__eqdf2>
 8001f20:	da003d17 	ldw	r8,244(sp)
 8001f24:	10018d26 	beq	r2,zero,800255c <___vfprintf_internal_r+0x1d98>
 8001f28:	d8802117 	ldw	r2,132(sp)
 8001f2c:	1700062e 	bgeu	r2,fp,8001f48 <___vfprintf_internal_r+0x1784>
 8001f30:	01000c04 	movi	r4,48
 8001f34:	10c00044 	addi	r3,r2,1
 8001f38:	d8c02115 	stw	r3,132(sp)
 8001f3c:	11000005 	stb	r4,0(r2)
 8001f40:	d8802117 	ldw	r2,132(sp)
 8001f44:	173ffb36 	bltu	r2,fp,8001f34 <__alt_data_end+0xff001f34>
 8001f48:	1405c83a 	sub	r2,r2,r16
 8001f4c:	d8803315 	stw	r2,204(sp)
 8001f50:	008011c4 	movi	r2,71
 8001f54:	b0817626 	beq	r22,r2,8002530 <___vfprintf_internal_r+0x1d6c>
 8001f58:	00801944 	movi	r2,101
 8001f5c:	1442810e 	bge	r2,r17,8002964 <___vfprintf_internal_r+0x21a0>
 8001f60:	d8c02617 	ldw	r3,152(sp)
 8001f64:	00801984 	movi	r2,102
 8001f68:	d8c03215 	stw	r3,200(sp)
 8001f6c:	8881fe26 	beq	r17,r2,8002768 <___vfprintf_internal_r+0x1fa4>
 8001f70:	d8c03217 	ldw	r3,200(sp)
 8001f74:	d9003317 	ldw	r4,204(sp)
 8001f78:	1901dd16 	blt	r3,r4,80026f0 <___vfprintf_internal_r+0x1f2c>
 8001f7c:	9480004c 	andi	r18,r18,1
 8001f80:	90022b1e 	bne	r18,zero,8002830 <___vfprintf_internal_r+0x206c>
 8001f84:	1805883a 	mov	r2,r3
 8001f88:	18028016 	blt	r3,zero,800298c <___vfprintf_internal_r+0x21c8>
 8001f8c:	d8c03217 	ldw	r3,200(sp)
 8001f90:	044019c4 	movi	r17,103
 8001f94:	d8c02e15 	stw	r3,184(sp)
 8001f98:	df002a07 	ldb	fp,168(sp)
 8001f9c:	e001531e 	bne	fp,zero,80024ec <___vfprintf_internal_r+0x1d28>
 8001fa0:	df002783 	ldbu	fp,158(sp)
 8001fa4:	d8802a15 	stw	r2,168(sp)
 8001fa8:	dc802b17 	ldw	r18,172(sp)
 8001fac:	d8002915 	stw	zero,164(sp)
 8001fb0:	003bd106 	br	8000ef8 <__alt_data_end+0xff000ef8>
 8001fb4:	d8802d17 	ldw	r2,180(sp)
 8001fb8:	d8c02d17 	ldw	r3,180(sp)
 8001fbc:	d9002d17 	ldw	r4,180(sp)
 8001fc0:	10800017 	ldw	r2,0(r2)
 8001fc4:	18c00117 	ldw	r3,4(r3)
 8001fc8:	21000204 	addi	r4,r4,8
 8001fcc:	d8803615 	stw	r2,216(sp)
 8001fd0:	d8c03815 	stw	r3,224(sp)
 8001fd4:	d9002d15 	stw	r4,180(sp)
 8001fd8:	003b7506 	br	8000db0 <__alt_data_end+0xff000db0>
 8001fdc:	ac400007 	ldb	r17,0(r21)
 8001fe0:	003a5906 	br	8000948 <__alt_data_end+0xff000948>
 8001fe4:	9080100c 	andi	r2,r18,64
 8001fe8:	1000a826 	beq	r2,zero,800228c <___vfprintf_internal_r+0x1ac8>
 8001fec:	d9002d17 	ldw	r4,180(sp)
 8001ff0:	002d883a 	mov	r22,zero
 8001ff4:	24c0000b 	ldhu	r19,0(r4)
 8001ff8:	21000104 	addi	r4,r4,4
 8001ffc:	d9002d15 	stw	r4,180(sp)
 8002000:	003ccb06 	br	8001330 <__alt_data_end+0xff001330>
 8002004:	d8c02d17 	ldw	r3,180(sp)
 8002008:	d9002917 	ldw	r4,164(sp)
 800200c:	002d883a 	mov	r22,zero
 8002010:	18800104 	addi	r2,r3,4
 8002014:	1cc00017 	ldw	r19,0(r3)
 8002018:	203ebb0e 	bge	r4,zero,8001b08 <__alt_data_end+0xff001b08>
 800201c:	003ef106 	br	8001be4 <__alt_data_end+0xff001be4>
 8002020:	9080040c 	andi	r2,r18,16
 8002024:	1000921e 	bne	r2,zero,8002270 <___vfprintf_internal_r+0x1aac>
 8002028:	9480100c 	andi	r18,r18,64
 800202c:	90013926 	beq	r18,zero,8002514 <___vfprintf_internal_r+0x1d50>
 8002030:	d9002d17 	ldw	r4,180(sp)
 8002034:	d9402f17 	ldw	r5,188(sp)
 8002038:	20800017 	ldw	r2,0(r4)
 800203c:	21000104 	addi	r4,r4,4
 8002040:	d9002d15 	stw	r4,180(sp)
 8002044:	1140000d 	sth	r5,0(r2)
 8002048:	003a1606 	br	80008a4 <__alt_data_end+0xff0008a4>
 800204c:	9080100c 	andi	r2,r18,64
 8002050:	10008026 	beq	r2,zero,8002254 <___vfprintf_internal_r+0x1a90>
 8002054:	d8c02d17 	ldw	r3,180(sp)
 8002058:	1cc0000f 	ldh	r19,0(r3)
 800205c:	18c00104 	addi	r3,r3,4
 8002060:	d8c02d15 	stw	r3,180(sp)
 8002064:	982dd7fa 	srai	r22,r19,31
 8002068:	b005883a 	mov	r2,r22
 800206c:	003b1f06 	br	8000cec <__alt_data_end+0xff000cec>
 8002070:	9080100c 	andi	r2,r18,64
 8002074:	d8002785 	stb	zero,158(sp)
 8002078:	10008a1e 	bne	r2,zero,80022a4 <___vfprintf_internal_r+0x1ae0>
 800207c:	d9402d17 	ldw	r5,180(sp)
 8002080:	d8c02917 	ldw	r3,164(sp)
 8002084:	002d883a 	mov	r22,zero
 8002088:	28800104 	addi	r2,r5,4
 800208c:	2cc00017 	ldw	r19,0(r5)
 8002090:	183e4b0e 	bge	r3,zero,80019c0 <__alt_data_end+0xff0019c0>
 8002094:	9d86b03a 	or	r3,r19,r22
 8002098:	d8802d15 	stw	r2,180(sp)
 800209c:	183e4c1e 	bne	r3,zero,80019d0 <__alt_data_end+0xff0019d0>
 80020a0:	0039883a 	mov	fp,zero
 80020a4:	0005883a 	mov	r2,zero
 80020a8:	003d4006 	br	80015ac <__alt_data_end+0xff0015ac>
 80020ac:	01420074 	movhi	r5,2049
 80020b0:	29469684 	addi	r5,r5,6746
 80020b4:	d9402b15 	stw	r5,172(sp)
 80020b8:	d9402b17 	ldw	r5,172(sp)
 80020bc:	1c47883a 	add	r3,r3,r17
 80020c0:	10800044 	addi	r2,r2,1
 80020c4:	41400015 	stw	r5,0(r8)
 80020c8:	44400115 	stw	r17,4(r8)
 80020cc:	d8c02015 	stw	r3,128(sp)
 80020d0:	d8801f15 	stw	r2,124(sp)
 80020d4:	010001c4 	movi	r4,7
 80020d8:	20bec816 	blt	r4,r2,8001bfc <__alt_data_end+0xff001bfc>
 80020dc:	42000204 	addi	r8,r8,8
 80020e0:	003ecd06 	br	8001c18 <__alt_data_end+0xff001c18>
 80020e4:	d9002917 	ldw	r4,164(sp)
 80020e8:	d8002785 	stb	zero,158(sp)
 80020ec:	203d2d16 	blt	r4,zero,80015a4 <__alt_data_end+0xff0015a4>
 80020f0:	00bfdfc4 	movi	r2,-129
 80020f4:	90a4703a 	and	r18,r18,r2
 80020f8:	003a9106 	br	8000b40 <__alt_data_end+0xff000b40>
 80020fc:	01020074 	movhi	r4,2049
 8002100:	21069684 	addi	r4,r4,6746
 8002104:	d9002b15 	stw	r4,172(sp)
 8002108:	003c0c06 	br	800113c <__alt_data_end+0xff00113c>
 800210c:	d9002c17 	ldw	r4,176(sp)
 8002110:	d9801e04 	addi	r6,sp,120
 8002114:	b80b883a 	mov	r5,r23
 8002118:	8007f280 	call	8007f28 <__sprint_r>
 800211c:	103aab1e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8002120:	d8c02017 	ldw	r3,128(sp)
 8002124:	da000404 	addi	r8,sp,16
 8002128:	003d4106 	br	8001630 <__alt_data_end+0xff001630>
 800212c:	d8801f17 	ldw	r2,124(sp)
 8002130:	01420074 	movhi	r5,2049
 8002134:	01000044 	movi	r4,1
 8002138:	18c00044 	addi	r3,r3,1
 800213c:	10800044 	addi	r2,r2,1
 8002140:	29469604 	addi	r5,r5,6744
 8002144:	41000115 	stw	r4,4(r8)
 8002148:	41400015 	stw	r5,0(r8)
 800214c:	d8c02015 	stw	r3,128(sp)
 8002150:	d8801f15 	stw	r2,124(sp)
 8002154:	010001c4 	movi	r4,7
 8002158:	20805c16 	blt	r4,r2,80022cc <___vfprintf_internal_r+0x1b08>
 800215c:	42000204 	addi	r8,r8,8
 8002160:	8800041e 	bne	r17,zero,8002174 <___vfprintf_internal_r+0x19b0>
 8002164:	d8803317 	ldw	r2,204(sp)
 8002168:	1000021e 	bne	r2,zero,8002174 <___vfprintf_internal_r+0x19b0>
 800216c:	9080004c 	andi	r2,r18,1
 8002170:	103c0926 	beq	r2,zero,8001198 <__alt_data_end+0xff001198>
 8002174:	d9003717 	ldw	r4,220(sp)
 8002178:	d8801f17 	ldw	r2,124(sp)
 800217c:	d9403417 	ldw	r5,208(sp)
 8002180:	20c7883a 	add	r3,r4,r3
 8002184:	10800044 	addi	r2,r2,1
 8002188:	41000115 	stw	r4,4(r8)
 800218c:	41400015 	stw	r5,0(r8)
 8002190:	d8c02015 	stw	r3,128(sp)
 8002194:	d8801f15 	stw	r2,124(sp)
 8002198:	010001c4 	movi	r4,7
 800219c:	20812116 	blt	r4,r2,8002624 <___vfprintf_internal_r+0x1e60>
 80021a0:	42000204 	addi	r8,r8,8
 80021a4:	0463c83a 	sub	r17,zero,r17
 80021a8:	0440730e 	bge	zero,r17,8002378 <___vfprintf_internal_r+0x1bb4>
 80021ac:	05800404 	movi	r22,16
 80021b0:	b440860e 	bge	r22,r17,80023cc <___vfprintf_internal_r+0x1c08>
 80021b4:	01420074 	movhi	r5,2049
 80021b8:	29469684 	addi	r5,r5,6746
 80021bc:	d9402b15 	stw	r5,172(sp)
 80021c0:	070001c4 	movi	fp,7
 80021c4:	dcc02c17 	ldw	r19,176(sp)
 80021c8:	00000306 	br	80021d8 <___vfprintf_internal_r+0x1a14>
 80021cc:	42000204 	addi	r8,r8,8
 80021d0:	8c7ffc04 	addi	r17,r17,-16
 80021d4:	b440800e 	bge	r22,r17,80023d8 <___vfprintf_internal_r+0x1c14>
 80021d8:	18c00404 	addi	r3,r3,16
 80021dc:	10800044 	addi	r2,r2,1
 80021e0:	45000015 	stw	r20,0(r8)
 80021e4:	45800115 	stw	r22,4(r8)
 80021e8:	d8c02015 	stw	r3,128(sp)
 80021ec:	d8801f15 	stw	r2,124(sp)
 80021f0:	e0bff60e 	bge	fp,r2,80021cc <__alt_data_end+0xff0021cc>
 80021f4:	d9801e04 	addi	r6,sp,120
 80021f8:	b80b883a 	mov	r5,r23
 80021fc:	9809883a 	mov	r4,r19
 8002200:	8007f280 	call	8007f28 <__sprint_r>
 8002204:	103a711e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8002208:	d8c02017 	ldw	r3,128(sp)
 800220c:	d8801f17 	ldw	r2,124(sp)
 8002210:	da000404 	addi	r8,sp,16
 8002214:	003fee06 	br	80021d0 <__alt_data_end+0xff0021d0>
 8002218:	00bfffc4 	movi	r2,-1
 800221c:	003a6f06 	br	8000bdc <__alt_data_end+0xff000bdc>
 8002220:	008011c4 	movi	r2,71
 8002224:	1440b816 	blt	r2,r17,8002508 <___vfprintf_internal_r+0x1d44>
 8002228:	04020074 	movhi	r16,2049
 800222c:	84068804 	addi	r16,r16,6688
 8002230:	00c000c4 	movi	r3,3
 8002234:	00bfdfc4 	movi	r2,-129
 8002238:	d8c02a15 	stw	r3,168(sp)
 800223c:	90a4703a 	and	r18,r18,r2
 8002240:	df002783 	ldbu	fp,158(sp)
 8002244:	d8c02e15 	stw	r3,184(sp)
 8002248:	d8002915 	stw	zero,164(sp)
 800224c:	d8003215 	stw	zero,200(sp)
 8002250:	003b2906 	br	8000ef8 <__alt_data_end+0xff000ef8>
 8002254:	d9002d17 	ldw	r4,180(sp)
 8002258:	24c00017 	ldw	r19,0(r4)
 800225c:	21000104 	addi	r4,r4,4
 8002260:	d9002d15 	stw	r4,180(sp)
 8002264:	982dd7fa 	srai	r22,r19,31
 8002268:	b005883a 	mov	r2,r22
 800226c:	003a9f06 	br	8000cec <__alt_data_end+0xff000cec>
 8002270:	d9402d17 	ldw	r5,180(sp)
 8002274:	d8c02f17 	ldw	r3,188(sp)
 8002278:	28800017 	ldw	r2,0(r5)
 800227c:	29400104 	addi	r5,r5,4
 8002280:	d9402d15 	stw	r5,180(sp)
 8002284:	10c00015 	stw	r3,0(r2)
 8002288:	00398606 	br	80008a4 <__alt_data_end+0xff0008a4>
 800228c:	d9402d17 	ldw	r5,180(sp)
 8002290:	002d883a 	mov	r22,zero
 8002294:	2cc00017 	ldw	r19,0(r5)
 8002298:	29400104 	addi	r5,r5,4
 800229c:	d9402d15 	stw	r5,180(sp)
 80022a0:	003c2306 	br	8001330 <__alt_data_end+0xff001330>
 80022a4:	d8c02d17 	ldw	r3,180(sp)
 80022a8:	d9002917 	ldw	r4,164(sp)
 80022ac:	002d883a 	mov	r22,zero
 80022b0:	18800104 	addi	r2,r3,4
 80022b4:	1cc0000b 	ldhu	r19,0(r3)
 80022b8:	203dc10e 	bge	r4,zero,80019c0 <__alt_data_end+0xff0019c0>
 80022bc:	003f7506 	br	8002094 <__alt_data_end+0xff002094>
 80022c0:	04020074 	movhi	r16,2049
 80022c4:	84068604 	addi	r16,r16,6680
 80022c8:	003acc06 	br	8000dfc <__alt_data_end+0xff000dfc>
 80022cc:	d9002c17 	ldw	r4,176(sp)
 80022d0:	d9801e04 	addi	r6,sp,120
 80022d4:	b80b883a 	mov	r5,r23
 80022d8:	8007f280 	call	8007f28 <__sprint_r>
 80022dc:	103a3b1e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 80022e0:	dc402617 	ldw	r17,152(sp)
 80022e4:	d8c02017 	ldw	r3,128(sp)
 80022e8:	da000404 	addi	r8,sp,16
 80022ec:	003f9c06 	br	8002160 <__alt_data_end+0xff002160>
 80022f0:	ac400043 	ldbu	r17,1(r21)
 80022f4:	94800814 	ori	r18,r18,32
 80022f8:	ad400044 	addi	r21,r21,1
 80022fc:	8c403fcc 	andi	r17,r17,255
 8002300:	8c40201c 	xori	r17,r17,128
 8002304:	8c7fe004 	addi	r17,r17,-128
 8002308:	00398f06 	br	8000948 <__alt_data_end+0xff000948>
 800230c:	d8c02d15 	stw	r3,180(sp)
 8002310:	0039883a 	mov	fp,zero
 8002314:	003e3506 	br	8001bec <__alt_data_end+0xff001bec>
 8002318:	d9002c17 	ldw	r4,176(sp)
 800231c:	d9801e04 	addi	r6,sp,120
 8002320:	b80b883a 	mov	r5,r23
 8002324:	8007f280 	call	8007f28 <__sprint_r>
 8002328:	103a281e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 800232c:	d8c02017 	ldw	r3,128(sp)
 8002330:	da000404 	addi	r8,sp,16
 8002334:	003cd006 	br	8001678 <__alt_data_end+0xff001678>
 8002338:	8009883a 	mov	r4,r16
 800233c:	da003d15 	stw	r8,244(sp)
 8002340:	800072c0 	call	800072c <strlen>
 8002344:	d8802e15 	stw	r2,184(sp)
 8002348:	da003d17 	ldw	r8,244(sp)
 800234c:	103c340e 	bge	r2,zero,8001420 <__alt_data_end+0xff001420>
 8002350:	0005883a 	mov	r2,zero
 8002354:	003c3206 	br	8001420 <__alt_data_end+0xff001420>
 8002358:	d9002c17 	ldw	r4,176(sp)
 800235c:	d9801e04 	addi	r6,sp,120
 8002360:	b80b883a 	mov	r5,r23
 8002364:	8007f280 	call	8007f28 <__sprint_r>
 8002368:	103a181e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 800236c:	d8c02017 	ldw	r3,128(sp)
 8002370:	d8801f17 	ldw	r2,124(sp)
 8002374:	da000404 	addi	r8,sp,16
 8002378:	d9403317 	ldw	r5,204(sp)
 800237c:	10800044 	addi	r2,r2,1
 8002380:	44000015 	stw	r16,0(r8)
 8002384:	28c7883a 	add	r3,r5,r3
 8002388:	003b7d06 	br	8001180 <__alt_data_end+0xff001180>
 800238c:	01020074 	movhi	r4,2049
 8002390:	21069a84 	addi	r4,r4,6762
 8002394:	d9003515 	stw	r4,212(sp)
 8002398:	003b1406 	br	8000fec <__alt_data_end+0xff000fec>
 800239c:	013fffc4 	movi	r4,-1
 80023a0:	003a3506 	br	8000c78 <__alt_data_end+0xff000c78>
 80023a4:	0023883a 	mov	r17,zero
 80023a8:	003d9d06 	br	8001a20 <__alt_data_end+0xff001a20>
 80023ac:	d9002c17 	ldw	r4,176(sp)
 80023b0:	d9801e04 	addi	r6,sp,120
 80023b4:	b80b883a 	mov	r5,r23
 80023b8:	8007f280 	call	8007f28 <__sprint_r>
 80023bc:	103a031e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 80023c0:	d8c02017 	ldw	r3,128(sp)
 80023c4:	da000404 	addi	r8,sp,16
 80023c8:	003d9406 	br	8001a1c <__alt_data_end+0xff001a1c>
 80023cc:	01020074 	movhi	r4,2049
 80023d0:	21069684 	addi	r4,r4,6746
 80023d4:	d9002b15 	stw	r4,172(sp)
 80023d8:	d9002b17 	ldw	r4,172(sp)
 80023dc:	1c47883a 	add	r3,r3,r17
 80023e0:	10800044 	addi	r2,r2,1
 80023e4:	41000015 	stw	r4,0(r8)
 80023e8:	44400115 	stw	r17,4(r8)
 80023ec:	d8c02015 	stw	r3,128(sp)
 80023f0:	d8801f15 	stw	r2,124(sp)
 80023f4:	010001c4 	movi	r4,7
 80023f8:	20bfd716 	blt	r4,r2,8002358 <__alt_data_end+0xff002358>
 80023fc:	42000204 	addi	r8,r8,8
 8002400:	003fdd06 	br	8002378 <__alt_data_end+0xff002378>
 8002404:	d9002c17 	ldw	r4,176(sp)
 8002408:	d9801e04 	addi	r6,sp,120
 800240c:	b80b883a 	mov	r5,r23
 8002410:	8007f280 	call	8007f28 <__sprint_r>
 8002414:	1039ed1e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8002418:	d8802617 	ldw	r2,152(sp)
 800241c:	d8c02017 	ldw	r3,128(sp)
 8002420:	da000404 	addi	r8,sp,16
 8002424:	003e1006 	br	8001c68 <__alt_data_end+0xff001c68>
 8002428:	00800044 	movi	r2,1
 800242c:	10803fcc 	andi	r2,r2,255
 8002430:	00c00044 	movi	r3,1
 8002434:	10fa3526 	beq	r2,r3,8000d0c <__alt_data_end+0xff000d0c>
 8002438:	00c00084 	movi	r3,2
 800243c:	10fbcb26 	beq	r2,r3,800136c <__alt_data_end+0xff00136c>
 8002440:	003a8f06 	br	8000e80 <__alt_data_end+0xff000e80>
 8002444:	01020074 	movhi	r4,2049
 8002448:	21069a84 	addi	r4,r4,6762
 800244c:	d9003515 	stw	r4,212(sp)
 8002450:	003b7606 	br	800122c <__alt_data_end+0xff00122c>
 8002454:	d8802917 	ldw	r2,164(sp)
 8002458:	00c00184 	movi	r3,6
 800245c:	1880012e 	bgeu	r3,r2,8002464 <___vfprintf_internal_r+0x1ca0>
 8002460:	1805883a 	mov	r2,r3
 8002464:	d8802e15 	stw	r2,184(sp)
 8002468:	1000ef16 	blt	r2,zero,8002828 <___vfprintf_internal_r+0x2064>
 800246c:	04020074 	movhi	r16,2049
 8002470:	d8802a15 	stw	r2,168(sp)
 8002474:	dcc02d15 	stw	r19,180(sp)
 8002478:	d8002915 	stw	zero,164(sp)
 800247c:	d8003215 	stw	zero,200(sp)
 8002480:	84069404 	addi	r16,r16,6736
 8002484:	0039883a 	mov	fp,zero
 8002488:	003aa206 	br	8000f14 <__alt_data_end+0xff000f14>
 800248c:	0021883a 	mov	r16,zero
 8002490:	003e0706 	br	8001cb0 <__alt_data_end+0xff001cb0>
 8002494:	d9002c17 	ldw	r4,176(sp)
 8002498:	d9801e04 	addi	r6,sp,120
 800249c:	b80b883a 	mov	r5,r23
 80024a0:	8007f280 	call	8007f28 <__sprint_r>
 80024a4:	1039c91e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 80024a8:	d8802617 	ldw	r2,152(sp)
 80024ac:	d9403317 	ldw	r5,204(sp)
 80024b0:	d8c02017 	ldw	r3,128(sp)
 80024b4:	da000404 	addi	r8,sp,16
 80024b8:	2885c83a 	sub	r2,r5,r2
 80024bc:	003dfb06 	br	8001cac <__alt_data_end+0xff001cac>
 80024c0:	9080004c 	andi	r2,r18,1
 80024c4:	103e8f1e 	bne	r2,zero,8001f04 <__alt_data_end+0xff001f04>
 80024c8:	d8802117 	ldw	r2,132(sp)
 80024cc:	003e9e06 	br	8001f48 <__alt_data_end+0xff001f48>
 80024d0:	1025883a 	mov	r18,r2
 80024d4:	0039883a 	mov	fp,zero
 80024d8:	00800084 	movi	r2,2
 80024dc:	003fd306 	br	800242c <__alt_data_end+0xff00242c>
 80024e0:	07000b44 	movi	fp,45
 80024e4:	df002785 	stb	fp,158(sp)
 80024e8:	003a4006 	br	8000dec <__alt_data_end+0xff000dec>
 80024ec:	00c00b44 	movi	r3,45
 80024f0:	d8c02785 	stb	r3,158(sp)
 80024f4:	d8802a15 	stw	r2,168(sp)
 80024f8:	dc802b17 	ldw	r18,172(sp)
 80024fc:	d8002915 	stw	zero,164(sp)
 8002500:	07000b44 	movi	fp,45
 8002504:	003a8006 	br	8000f08 <__alt_data_end+0xff000f08>
 8002508:	04020074 	movhi	r16,2049
 800250c:	84068904 	addi	r16,r16,6692
 8002510:	003f4706 	br	8002230 <__alt_data_end+0xff002230>
 8002514:	d8c02d17 	ldw	r3,180(sp)
 8002518:	d9002f17 	ldw	r4,188(sp)
 800251c:	18800017 	ldw	r2,0(r3)
 8002520:	18c00104 	addi	r3,r3,4
 8002524:	d8c02d15 	stw	r3,180(sp)
 8002528:	11000015 	stw	r4,0(r2)
 800252c:	0038dd06 	br	80008a4 <__alt_data_end+0xff0008a4>
 8002530:	dd802617 	ldw	r22,152(sp)
 8002534:	00bfff44 	movi	r2,-3
 8002538:	b0801c16 	blt	r22,r2,80025ac <___vfprintf_internal_r+0x1de8>
 800253c:	d9402917 	ldw	r5,164(sp)
 8002540:	2d801a16 	blt	r5,r22,80025ac <___vfprintf_internal_r+0x1de8>
 8002544:	dd803215 	stw	r22,200(sp)
 8002548:	003e8906 	br	8001f70 <__alt_data_end+0xff001f70>
 800254c:	01020074 	movhi	r4,2049
 8002550:	21069684 	addi	r4,r4,6746
 8002554:	d9002b15 	stw	r4,172(sp)
 8002558:	003c9106 	br	80017a0 <__alt_data_end+0xff0017a0>
 800255c:	e005883a 	mov	r2,fp
 8002560:	003e7906 	br	8001f48 <__alt_data_end+0xff001f48>
 8002564:	d9402917 	ldw	r5,164(sp)
 8002568:	df002783 	ldbu	fp,158(sp)
 800256c:	dcc02d15 	stw	r19,180(sp)
 8002570:	d9402a15 	stw	r5,168(sp)
 8002574:	d9402e15 	stw	r5,184(sp)
 8002578:	d8002915 	stw	zero,164(sp)
 800257c:	d8003215 	stw	zero,200(sp)
 8002580:	003a5d06 	br	8000ef8 <__alt_data_end+0xff000ef8>
 8002584:	9080004c 	andi	r2,r18,1
 8002588:	0039883a 	mov	fp,zero
 800258c:	10000426 	beq	r2,zero,80025a0 <___vfprintf_internal_r+0x1ddc>
 8002590:	00800c04 	movi	r2,48
 8002594:	dc001dc4 	addi	r16,sp,119
 8002598:	d8801dc5 	stb	r2,119(sp)
 800259c:	003b8006 	br	80013a0 <__alt_data_end+0xff0013a0>
 80025a0:	d8002e15 	stw	zero,184(sp)
 80025a4:	dc001e04 	addi	r16,sp,120
 80025a8:	003a4d06 	br	8000ee0 <__alt_data_end+0xff000ee0>
 80025ac:	8c7fff84 	addi	r17,r17,-2
 80025b0:	b5bfffc4 	addi	r22,r22,-1
 80025b4:	dd802615 	stw	r22,152(sp)
 80025b8:	dc4022c5 	stb	r17,139(sp)
 80025bc:	b000bf16 	blt	r22,zero,80028bc <___vfprintf_internal_r+0x20f8>
 80025c0:	00800ac4 	movi	r2,43
 80025c4:	d8802305 	stb	r2,140(sp)
 80025c8:	00800244 	movi	r2,9
 80025cc:	15807016 	blt	r2,r22,8002790 <___vfprintf_internal_r+0x1fcc>
 80025d0:	00800c04 	movi	r2,48
 80025d4:	b5800c04 	addi	r22,r22,48
 80025d8:	d8802345 	stb	r2,141(sp)
 80025dc:	dd802385 	stb	r22,142(sp)
 80025e0:	d88023c4 	addi	r2,sp,143
 80025e4:	df0022c4 	addi	fp,sp,139
 80025e8:	d8c03317 	ldw	r3,204(sp)
 80025ec:	1739c83a 	sub	fp,r2,fp
 80025f0:	d9003317 	ldw	r4,204(sp)
 80025f4:	e0c7883a 	add	r3,fp,r3
 80025f8:	df003a15 	stw	fp,232(sp)
 80025fc:	d8c02e15 	stw	r3,184(sp)
 8002600:	00800044 	movi	r2,1
 8002604:	1100b30e 	bge	r2,r4,80028d4 <___vfprintf_internal_r+0x2110>
 8002608:	d8c02e17 	ldw	r3,184(sp)
 800260c:	18c00044 	addi	r3,r3,1
 8002610:	d8c02e15 	stw	r3,184(sp)
 8002614:	1805883a 	mov	r2,r3
 8002618:	1800ac16 	blt	r3,zero,80028cc <___vfprintf_internal_r+0x2108>
 800261c:	d8003215 	stw	zero,200(sp)
 8002620:	003e5d06 	br	8001f98 <__alt_data_end+0xff001f98>
 8002624:	d9002c17 	ldw	r4,176(sp)
 8002628:	d9801e04 	addi	r6,sp,120
 800262c:	b80b883a 	mov	r5,r23
 8002630:	8007f280 	call	8007f28 <__sprint_r>
 8002634:	1039651e 	bne	r2,zero,8000bcc <__alt_data_end+0xff000bcc>
 8002638:	dc402617 	ldw	r17,152(sp)
 800263c:	d8c02017 	ldw	r3,128(sp)
 8002640:	d8801f17 	ldw	r2,124(sp)
 8002644:	da000404 	addi	r8,sp,16
 8002648:	003ed606 	br	80021a4 <__alt_data_end+0xff0021a4>
 800264c:	582b883a 	mov	r21,r11
 8002650:	d8002915 	stw	zero,164(sp)
 8002654:	0038bd06 	br	800094c <__alt_data_end+0xff00094c>
 8002658:	d8802917 	ldw	r2,164(sp)
 800265c:	103e071e 	bne	r2,zero,8001e7c <__alt_data_end+0xff001e7c>
 8002660:	dc002915 	stw	r16,164(sp)
 8002664:	003e0506 	br	8001e7c <__alt_data_end+0xff001e7c>
 8002668:	d9002917 	ldw	r4,164(sp)
 800266c:	20c00044 	addi	r3,r4,1
 8002670:	003e0f06 	br	8001eb0 <__alt_data_end+0xff001eb0>
 8002674:	01400184 	movi	r5,6
 8002678:	d9402915 	stw	r5,164(sp)
 800267c:	003dff06 	br	8001e7c <__alt_data_end+0xff001e7c>
 8002680:	d8802104 	addi	r2,sp,132
 8002684:	d8800315 	stw	r2,12(sp)
 8002688:	d8802504 	addi	r2,sp,148
 800268c:	d8800215 	stw	r2,8(sp)
 8002690:	d8802604 	addi	r2,sp,152
 8002694:	d8800115 	stw	r2,4(sp)
 8002698:	d8802917 	ldw	r2,164(sp)
 800269c:	d9403617 	ldw	r5,216(sp)
 80026a0:	d9002c17 	ldw	r4,176(sp)
 80026a4:	d8800015 	stw	r2,0(sp)
 80026a8:	01c000c4 	movi	r7,3
 80026ac:	980d883a 	mov	r6,r19
 80026b0:	da003d15 	stw	r8,244(sp)
 80026b4:	8002de80 	call	8002de8 <_dtoa_r>
 80026b8:	d8c02917 	ldw	r3,164(sp)
 80026bc:	da003d17 	ldw	r8,244(sp)
 80026c0:	1021883a 	mov	r16,r2
 80026c4:	10f9883a 	add	fp,r2,r3
 80026c8:	81000007 	ldb	r4,0(r16)
 80026cc:	00800c04 	movi	r2,48
 80026d0:	20805e26 	beq	r4,r2,800284c <___vfprintf_internal_r+0x2088>
 80026d4:	d8c02617 	ldw	r3,152(sp)
 80026d8:	e0f9883a 	add	fp,fp,r3
 80026dc:	003e0a06 	br	8001f08 <__alt_data_end+0xff001f08>
 80026e0:	00c00b44 	movi	r3,45
 80026e4:	24e0003c 	xorhi	r19,r4,32768
 80026e8:	d8c02a05 	stb	r3,168(sp)
 80026ec:	003de906 	br	8001e94 <__alt_data_end+0xff001e94>
 80026f0:	d8c03217 	ldw	r3,200(sp)
 80026f4:	00c07a0e 	bge	zero,r3,80028e0 <___vfprintf_internal_r+0x211c>
 80026f8:	00800044 	movi	r2,1
 80026fc:	d9003317 	ldw	r4,204(sp)
 8002700:	1105883a 	add	r2,r2,r4
 8002704:	d8802e15 	stw	r2,184(sp)
 8002708:	10004e16 	blt	r2,zero,8002844 <___vfprintf_internal_r+0x2080>
 800270c:	044019c4 	movi	r17,103
 8002710:	003e2106 	br	8001f98 <__alt_data_end+0xff001f98>
 8002714:	d9002917 	ldw	r4,164(sp)
 8002718:	d8802104 	addi	r2,sp,132
 800271c:	d8800315 	stw	r2,12(sp)
 8002720:	d9000015 	stw	r4,0(sp)
 8002724:	d8802504 	addi	r2,sp,148
 8002728:	d9403617 	ldw	r5,216(sp)
 800272c:	d9002c17 	ldw	r4,176(sp)
 8002730:	d8800215 	stw	r2,8(sp)
 8002734:	d8802604 	addi	r2,sp,152
 8002738:	d8800115 	stw	r2,4(sp)
 800273c:	01c000c4 	movi	r7,3
 8002740:	980d883a 	mov	r6,r19
 8002744:	da003d15 	stw	r8,244(sp)
 8002748:	8002de80 	call	8002de8 <_dtoa_r>
 800274c:	d8c02917 	ldw	r3,164(sp)
 8002750:	da003d17 	ldw	r8,244(sp)
 8002754:	1021883a 	mov	r16,r2
 8002758:	00801184 	movi	r2,70
 800275c:	80f9883a 	add	fp,r16,r3
 8002760:	88bfd926 	beq	r17,r2,80026c8 <__alt_data_end+0xff0026c8>
 8002764:	003de806 	br	8001f08 <__alt_data_end+0xff001f08>
 8002768:	d9002917 	ldw	r4,164(sp)
 800276c:	00c04d0e 	bge	zero,r3,80028a4 <___vfprintf_internal_r+0x20e0>
 8002770:	2000441e 	bne	r4,zero,8002884 <___vfprintf_internal_r+0x20c0>
 8002774:	9480004c 	andi	r18,r18,1
 8002778:	9000421e 	bne	r18,zero,8002884 <___vfprintf_internal_r+0x20c0>
 800277c:	1805883a 	mov	r2,r3
 8002780:	18007016 	blt	r3,zero,8002944 <___vfprintf_internal_r+0x2180>
 8002784:	d8c03217 	ldw	r3,200(sp)
 8002788:	d8c02e15 	stw	r3,184(sp)
 800278c:	003e0206 	br	8001f98 <__alt_data_end+0xff001f98>
 8002790:	df0022c4 	addi	fp,sp,139
 8002794:	dc002915 	stw	r16,164(sp)
 8002798:	4027883a 	mov	r19,r8
 800279c:	e021883a 	mov	r16,fp
 80027a0:	b009883a 	mov	r4,r22
 80027a4:	01400284 	movi	r5,10
 80027a8:	800a8dc0 	call	800a8dc <__modsi3>
 80027ac:	10800c04 	addi	r2,r2,48
 80027b0:	843fffc4 	addi	r16,r16,-1
 80027b4:	b009883a 	mov	r4,r22
 80027b8:	01400284 	movi	r5,10
 80027bc:	80800005 	stb	r2,0(r16)
 80027c0:	800a8580 	call	800a858 <__divsi3>
 80027c4:	102d883a 	mov	r22,r2
 80027c8:	00800244 	movi	r2,9
 80027cc:	15bff416 	blt	r2,r22,80027a0 <__alt_data_end+0xff0027a0>
 80027d0:	9811883a 	mov	r8,r19
 80027d4:	b0800c04 	addi	r2,r22,48
 80027d8:	8027883a 	mov	r19,r16
 80027dc:	997fffc4 	addi	r5,r19,-1
 80027e0:	98bfffc5 	stb	r2,-1(r19)
 80027e4:	dc002917 	ldw	r16,164(sp)
 80027e8:	2f006a2e 	bgeu	r5,fp,8002994 <___vfprintf_internal_r+0x21d0>
 80027ec:	d9c02384 	addi	r7,sp,142
 80027f0:	3ccfc83a 	sub	r7,r7,r19
 80027f4:	d9002344 	addi	r4,sp,141
 80027f8:	e1cf883a 	add	r7,fp,r7
 80027fc:	00000106 	br	8002804 <___vfprintf_internal_r+0x2040>
 8002800:	28800003 	ldbu	r2,0(r5)
 8002804:	20800005 	stb	r2,0(r4)
 8002808:	21000044 	addi	r4,r4,1
 800280c:	29400044 	addi	r5,r5,1
 8002810:	393ffb1e 	bne	r7,r4,8002800 <__alt_data_end+0xff002800>
 8002814:	d8802304 	addi	r2,sp,140
 8002818:	14c5c83a 	sub	r2,r2,r19
 800281c:	d8c02344 	addi	r3,sp,141
 8002820:	1885883a 	add	r2,r3,r2
 8002824:	003f7006 	br	80025e8 <__alt_data_end+0xff0025e8>
 8002828:	0005883a 	mov	r2,zero
 800282c:	003f0f06 	br	800246c <__alt_data_end+0xff00246c>
 8002830:	d8c03217 	ldw	r3,200(sp)
 8002834:	18c00044 	addi	r3,r3,1
 8002838:	d8c02e15 	stw	r3,184(sp)
 800283c:	1805883a 	mov	r2,r3
 8002840:	183fb20e 	bge	r3,zero,800270c <__alt_data_end+0xff00270c>
 8002844:	0005883a 	mov	r2,zero
 8002848:	003fb006 	br	800270c <__alt_data_end+0xff00270c>
 800284c:	d9003617 	ldw	r4,216(sp)
 8002850:	000d883a 	mov	r6,zero
 8002854:	000f883a 	mov	r7,zero
 8002858:	980b883a 	mov	r5,r19
 800285c:	d8c03c15 	stw	r3,240(sp)
 8002860:	da003d15 	stw	r8,244(sp)
 8002864:	800bba00 	call	800bba0 <__eqdf2>
 8002868:	d8c03c17 	ldw	r3,240(sp)
 800286c:	da003d17 	ldw	r8,244(sp)
 8002870:	103f9826 	beq	r2,zero,80026d4 <__alt_data_end+0xff0026d4>
 8002874:	00800044 	movi	r2,1
 8002878:	10c7c83a 	sub	r3,r2,r3
 800287c:	d8c02615 	stw	r3,152(sp)
 8002880:	003f9506 	br	80026d8 <__alt_data_end+0xff0026d8>
 8002884:	d9002917 	ldw	r4,164(sp)
 8002888:	d8c03217 	ldw	r3,200(sp)
 800288c:	20800044 	addi	r2,r4,1
 8002890:	1885883a 	add	r2,r3,r2
 8002894:	d8802e15 	stw	r2,184(sp)
 8002898:	103dbf0e 	bge	r2,zero,8001f98 <__alt_data_end+0xff001f98>
 800289c:	0005883a 	mov	r2,zero
 80028a0:	003dbd06 	br	8001f98 <__alt_data_end+0xff001f98>
 80028a4:	2000211e 	bne	r4,zero,800292c <___vfprintf_internal_r+0x2168>
 80028a8:	9480004c 	andi	r18,r18,1
 80028ac:	90001f1e 	bne	r18,zero,800292c <___vfprintf_internal_r+0x2168>
 80028b0:	00800044 	movi	r2,1
 80028b4:	d8802e15 	stw	r2,184(sp)
 80028b8:	003db706 	br	8001f98 <__alt_data_end+0xff001f98>
 80028bc:	00800b44 	movi	r2,45
 80028c0:	05adc83a 	sub	r22,zero,r22
 80028c4:	d8802305 	stb	r2,140(sp)
 80028c8:	003f3f06 	br	80025c8 <__alt_data_end+0xff0025c8>
 80028cc:	0005883a 	mov	r2,zero
 80028d0:	003f5206 	br	800261c <__alt_data_end+0xff00261c>
 80028d4:	90a4703a 	and	r18,r18,r2
 80028d8:	903f4e26 	beq	r18,zero,8002614 <__alt_data_end+0xff002614>
 80028dc:	003f4a06 	br	8002608 <__alt_data_end+0xff002608>
 80028e0:	00800084 	movi	r2,2
 80028e4:	10c5c83a 	sub	r2,r2,r3
 80028e8:	003f8406 	br	80026fc <__alt_data_end+0xff0026fc>
 80028ec:	d8802d17 	ldw	r2,180(sp)
 80028f0:	d9002d17 	ldw	r4,180(sp)
 80028f4:	ac400043 	ldbu	r17,1(r21)
 80028f8:	10800017 	ldw	r2,0(r2)
 80028fc:	582b883a 	mov	r21,r11
 8002900:	d8802915 	stw	r2,164(sp)
 8002904:	20800104 	addi	r2,r4,4
 8002908:	d9002917 	ldw	r4,164(sp)
 800290c:	d8802d15 	stw	r2,180(sp)
 8002910:	203e7a0e 	bge	r4,zero,80022fc <__alt_data_end+0xff0022fc>
 8002914:	8c403fcc 	andi	r17,r17,255
 8002918:	00bfffc4 	movi	r2,-1
 800291c:	8c40201c 	xori	r17,r17,128
 8002920:	d8802915 	stw	r2,164(sp)
 8002924:	8c7fe004 	addi	r17,r17,-128
 8002928:	00380706 	br	8000948 <__alt_data_end+0xff000948>
 800292c:	d8c02917 	ldw	r3,164(sp)
 8002930:	18c00084 	addi	r3,r3,2
 8002934:	d8c02e15 	stw	r3,184(sp)
 8002938:	1805883a 	mov	r2,r3
 800293c:	183d960e 	bge	r3,zero,8001f98 <__alt_data_end+0xff001f98>
 8002940:	003fd606 	br	800289c <__alt_data_end+0xff00289c>
 8002944:	0005883a 	mov	r2,zero
 8002948:	003f8e06 	br	8002784 <__alt_data_end+0xff002784>
 800294c:	9080004c 	andi	r2,r18,1
 8002950:	103f811e 	bne	r2,zero,8002758 <__alt_data_end+0xff002758>
 8002954:	d8802117 	ldw	r2,132(sp)
 8002958:	1405c83a 	sub	r2,r2,r16
 800295c:	d8803315 	stw	r2,204(sp)
 8002960:	b47ef326 	beq	r22,r17,8002530 <__alt_data_end+0xff002530>
 8002964:	dd802617 	ldw	r22,152(sp)
 8002968:	003f1106 	br	80025b0 <__alt_data_end+0xff0025b0>
 800296c:	d9c02785 	stb	r7,158(sp)
 8002970:	00390406 	br	8000d84 <__alt_data_end+0xff000d84>
 8002974:	d9c02785 	stb	r7,158(sp)
 8002978:	0038d306 	br	8000cc8 <__alt_data_end+0xff000cc8>
 800297c:	d9c02785 	stb	r7,158(sp)
 8002980:	003a6106 	br	8001308 <__alt_data_end+0xff001308>
 8002984:	d9c02785 	stb	r7,158(sp)
 8002988:	003af806 	br	800156c <__alt_data_end+0xff00156c>
 800298c:	0005883a 	mov	r2,zero
 8002990:	003d7e06 	br	8001f8c <__alt_data_end+0xff001f8c>
 8002994:	d8802344 	addi	r2,sp,141
 8002998:	003f1306 	br	80025e8 <__alt_data_end+0xff0025e8>
 800299c:	d9c02785 	stb	r7,158(sp)
 80029a0:	00392306 	br	8000e30 <__alt_data_end+0xff000e30>
 80029a4:	d9c02785 	stb	r7,158(sp)
 80029a8:	003aa906 	br	8001450 <__alt_data_end+0xff001450>
 80029ac:	d9c02785 	stb	r7,158(sp)
 80029b0:	003a3d06 	br	80012a8 <__alt_data_end+0xff0012a8>
 80029b4:	d9c02785 	stb	r7,158(sp)
 80029b8:	003aca06 	br	80014e4 <__alt_data_end+0xff0014e4>

080029bc <__vfprintf_internal>:
 80029bc:	00820074 	movhi	r2,2049
 80029c0:	108e0a04 	addi	r2,r2,14376
 80029c4:	300f883a 	mov	r7,r6
 80029c8:	280d883a 	mov	r6,r5
 80029cc:	200b883a 	mov	r5,r4
 80029d0:	11000017 	ldw	r4,0(r2)
 80029d4:	80007c41 	jmpi	80007c4 <___vfprintf_internal_r>

080029d8 <__sbprintf>:
 80029d8:	2880030b 	ldhu	r2,12(r5)
 80029dc:	2ac01917 	ldw	r11,100(r5)
 80029e0:	2a80038b 	ldhu	r10,14(r5)
 80029e4:	2a400717 	ldw	r9,28(r5)
 80029e8:	2a000917 	ldw	r8,36(r5)
 80029ec:	defee204 	addi	sp,sp,-1144
 80029f0:	00c10004 	movi	r3,1024
 80029f4:	dc011a15 	stw	r16,1128(sp)
 80029f8:	10bfff4c 	andi	r2,r2,65533
 80029fc:	2821883a 	mov	r16,r5
 8002a00:	d8cb883a 	add	r5,sp,r3
 8002a04:	dc811c15 	stw	r18,1136(sp)
 8002a08:	dc411b15 	stw	r17,1132(sp)
 8002a0c:	dfc11d15 	stw	ra,1140(sp)
 8002a10:	2025883a 	mov	r18,r4
 8002a14:	d881030d 	sth	r2,1036(sp)
 8002a18:	dac11915 	stw	r11,1124(sp)
 8002a1c:	da81038d 	sth	r10,1038(sp)
 8002a20:	da410715 	stw	r9,1052(sp)
 8002a24:	da010915 	stw	r8,1060(sp)
 8002a28:	dec10015 	stw	sp,1024(sp)
 8002a2c:	dec10415 	stw	sp,1040(sp)
 8002a30:	d8c10215 	stw	r3,1032(sp)
 8002a34:	d8c10515 	stw	r3,1044(sp)
 8002a38:	d8010615 	stw	zero,1048(sp)
 8002a3c:	80007c40 	call	80007c4 <___vfprintf_internal_r>
 8002a40:	1023883a 	mov	r17,r2
 8002a44:	10000416 	blt	r2,zero,8002a58 <__sbprintf+0x80>
 8002a48:	d9410004 	addi	r5,sp,1024
 8002a4c:	9009883a 	mov	r4,r18
 8002a50:	800468c0 	call	800468c <_fflush_r>
 8002a54:	10000d1e 	bne	r2,zero,8002a8c <__sbprintf+0xb4>
 8002a58:	d881030b 	ldhu	r2,1036(sp)
 8002a5c:	1080100c 	andi	r2,r2,64
 8002a60:	10000326 	beq	r2,zero,8002a70 <__sbprintf+0x98>
 8002a64:	8080030b 	ldhu	r2,12(r16)
 8002a68:	10801014 	ori	r2,r2,64
 8002a6c:	8080030d 	sth	r2,12(r16)
 8002a70:	8805883a 	mov	r2,r17
 8002a74:	dfc11d17 	ldw	ra,1140(sp)
 8002a78:	dc811c17 	ldw	r18,1136(sp)
 8002a7c:	dc411b17 	ldw	r17,1132(sp)
 8002a80:	dc011a17 	ldw	r16,1128(sp)
 8002a84:	dec11e04 	addi	sp,sp,1144
 8002a88:	f800283a 	ret
 8002a8c:	047fffc4 	movi	r17,-1
 8002a90:	003ff106 	br	8002a58 <__alt_data_end+0xff002a58>

08002a94 <__swsetup_r>:
 8002a94:	00820074 	movhi	r2,2049
 8002a98:	defffd04 	addi	sp,sp,-12
 8002a9c:	108e0a04 	addi	r2,r2,14376
 8002aa0:	dc400115 	stw	r17,4(sp)
 8002aa4:	2023883a 	mov	r17,r4
 8002aa8:	11000017 	ldw	r4,0(r2)
 8002aac:	dc000015 	stw	r16,0(sp)
 8002ab0:	dfc00215 	stw	ra,8(sp)
 8002ab4:	2821883a 	mov	r16,r5
 8002ab8:	20000226 	beq	r4,zero,8002ac4 <__swsetup_r+0x30>
 8002abc:	20800e17 	ldw	r2,56(r4)
 8002ac0:	10003126 	beq	r2,zero,8002b88 <__swsetup_r+0xf4>
 8002ac4:	8080030b 	ldhu	r2,12(r16)
 8002ac8:	10c0020c 	andi	r3,r2,8
 8002acc:	1009883a 	mov	r4,r2
 8002ad0:	18000f26 	beq	r3,zero,8002b10 <__swsetup_r+0x7c>
 8002ad4:	80c00417 	ldw	r3,16(r16)
 8002ad8:	18001526 	beq	r3,zero,8002b30 <__swsetup_r+0x9c>
 8002adc:	1100004c 	andi	r4,r2,1
 8002ae0:	20001c1e 	bne	r4,zero,8002b54 <__swsetup_r+0xc0>
 8002ae4:	1080008c 	andi	r2,r2,2
 8002ae8:	1000291e 	bne	r2,zero,8002b90 <__swsetup_r+0xfc>
 8002aec:	80800517 	ldw	r2,20(r16)
 8002af0:	80800215 	stw	r2,8(r16)
 8002af4:	18001c26 	beq	r3,zero,8002b68 <__swsetup_r+0xd4>
 8002af8:	0005883a 	mov	r2,zero
 8002afc:	dfc00217 	ldw	ra,8(sp)
 8002b00:	dc400117 	ldw	r17,4(sp)
 8002b04:	dc000017 	ldw	r16,0(sp)
 8002b08:	dec00304 	addi	sp,sp,12
 8002b0c:	f800283a 	ret
 8002b10:	2080040c 	andi	r2,r4,16
 8002b14:	10002e26 	beq	r2,zero,8002bd0 <__swsetup_r+0x13c>
 8002b18:	2080010c 	andi	r2,r4,4
 8002b1c:	10001e1e 	bne	r2,zero,8002b98 <__swsetup_r+0x104>
 8002b20:	80c00417 	ldw	r3,16(r16)
 8002b24:	20800214 	ori	r2,r4,8
 8002b28:	8080030d 	sth	r2,12(r16)
 8002b2c:	183feb1e 	bne	r3,zero,8002adc <__alt_data_end+0xff002adc>
 8002b30:	1100a00c 	andi	r4,r2,640
 8002b34:	01408004 	movi	r5,512
 8002b38:	217fe826 	beq	r4,r5,8002adc <__alt_data_end+0xff002adc>
 8002b3c:	800b883a 	mov	r5,r16
 8002b40:	8809883a 	mov	r4,r17
 8002b44:	800560c0 	call	800560c <__smakebuf_r>
 8002b48:	8080030b 	ldhu	r2,12(r16)
 8002b4c:	80c00417 	ldw	r3,16(r16)
 8002b50:	003fe206 	br	8002adc <__alt_data_end+0xff002adc>
 8002b54:	80800517 	ldw	r2,20(r16)
 8002b58:	80000215 	stw	zero,8(r16)
 8002b5c:	0085c83a 	sub	r2,zero,r2
 8002b60:	80800615 	stw	r2,24(r16)
 8002b64:	183fe41e 	bne	r3,zero,8002af8 <__alt_data_end+0xff002af8>
 8002b68:	80c0030b 	ldhu	r3,12(r16)
 8002b6c:	0005883a 	mov	r2,zero
 8002b70:	1900200c 	andi	r4,r3,128
 8002b74:	203fe126 	beq	r4,zero,8002afc <__alt_data_end+0xff002afc>
 8002b78:	18c01014 	ori	r3,r3,64
 8002b7c:	80c0030d 	sth	r3,12(r16)
 8002b80:	00bfffc4 	movi	r2,-1
 8002b84:	003fdd06 	br	8002afc <__alt_data_end+0xff002afc>
 8002b88:	8004a680 	call	8004a68 <__sinit>
 8002b8c:	003fcd06 	br	8002ac4 <__alt_data_end+0xff002ac4>
 8002b90:	0005883a 	mov	r2,zero
 8002b94:	003fd606 	br	8002af0 <__alt_data_end+0xff002af0>
 8002b98:	81400c17 	ldw	r5,48(r16)
 8002b9c:	28000626 	beq	r5,zero,8002bb8 <__swsetup_r+0x124>
 8002ba0:	80801004 	addi	r2,r16,64
 8002ba4:	28800326 	beq	r5,r2,8002bb4 <__swsetup_r+0x120>
 8002ba8:	8809883a 	mov	r4,r17
 8002bac:	8004bdc0 	call	8004bdc <_free_r>
 8002bb0:	8100030b 	ldhu	r4,12(r16)
 8002bb4:	80000c15 	stw	zero,48(r16)
 8002bb8:	80c00417 	ldw	r3,16(r16)
 8002bbc:	00bff6c4 	movi	r2,-37
 8002bc0:	1108703a 	and	r4,r2,r4
 8002bc4:	80000115 	stw	zero,4(r16)
 8002bc8:	80c00015 	stw	r3,0(r16)
 8002bcc:	003fd506 	br	8002b24 <__alt_data_end+0xff002b24>
 8002bd0:	00800244 	movi	r2,9
 8002bd4:	88800015 	stw	r2,0(r17)
 8002bd8:	20801014 	ori	r2,r4,64
 8002bdc:	8080030d 	sth	r2,12(r16)
 8002be0:	00bfffc4 	movi	r2,-1
 8002be4:	003fc506 	br	8002afc <__alt_data_end+0xff002afc>

08002be8 <quorem>:
 8002be8:	defff704 	addi	sp,sp,-36
 8002bec:	dc800215 	stw	r18,8(sp)
 8002bf0:	20800417 	ldw	r2,16(r4)
 8002bf4:	2c800417 	ldw	r18,16(r5)
 8002bf8:	dfc00815 	stw	ra,32(sp)
 8002bfc:	ddc00715 	stw	r23,28(sp)
 8002c00:	dd800615 	stw	r22,24(sp)
 8002c04:	dd400515 	stw	r21,20(sp)
 8002c08:	dd000415 	stw	r20,16(sp)
 8002c0c:	dcc00315 	stw	r19,12(sp)
 8002c10:	dc400115 	stw	r17,4(sp)
 8002c14:	dc000015 	stw	r16,0(sp)
 8002c18:	14807116 	blt	r2,r18,8002de0 <quorem+0x1f8>
 8002c1c:	94bfffc4 	addi	r18,r18,-1
 8002c20:	94ad883a 	add	r22,r18,r18
 8002c24:	b5ad883a 	add	r22,r22,r22
 8002c28:	2c400504 	addi	r17,r5,20
 8002c2c:	8da9883a 	add	r20,r17,r22
 8002c30:	25400504 	addi	r21,r4,20
 8002c34:	282f883a 	mov	r23,r5
 8002c38:	adad883a 	add	r22,r21,r22
 8002c3c:	a1400017 	ldw	r5,0(r20)
 8002c40:	2021883a 	mov	r16,r4
 8002c44:	b1000017 	ldw	r4,0(r22)
 8002c48:	29400044 	addi	r5,r5,1
 8002c4c:	800a9500 	call	800a950 <__udivsi3>
 8002c50:	1027883a 	mov	r19,r2
 8002c54:	10002c26 	beq	r2,zero,8002d08 <quorem+0x120>
 8002c58:	a813883a 	mov	r9,r21
 8002c5c:	880b883a 	mov	r5,r17
 8002c60:	0009883a 	mov	r4,zero
 8002c64:	000d883a 	mov	r6,zero
 8002c68:	2a000017 	ldw	r8,0(r5)
 8002c6c:	49c00017 	ldw	r7,0(r9)
 8002c70:	29400104 	addi	r5,r5,4
 8002c74:	40bfffcc 	andi	r2,r8,65535
 8002c78:	14c5383a 	mul	r2,r2,r19
 8002c7c:	4010d43a 	srli	r8,r8,16
 8002c80:	38ffffcc 	andi	r3,r7,65535
 8002c84:	1105883a 	add	r2,r2,r4
 8002c88:	1008d43a 	srli	r4,r2,16
 8002c8c:	44d1383a 	mul	r8,r8,r19
 8002c90:	198d883a 	add	r6,r3,r6
 8002c94:	10ffffcc 	andi	r3,r2,65535
 8002c98:	30c7c83a 	sub	r3,r6,r3
 8002c9c:	380ed43a 	srli	r7,r7,16
 8002ca0:	4105883a 	add	r2,r8,r4
 8002ca4:	180dd43a 	srai	r6,r3,16
 8002ca8:	113fffcc 	andi	r4,r2,65535
 8002cac:	390fc83a 	sub	r7,r7,r4
 8002cb0:	398d883a 	add	r6,r7,r6
 8002cb4:	300e943a 	slli	r7,r6,16
 8002cb8:	18ffffcc 	andi	r3,r3,65535
 8002cbc:	1008d43a 	srli	r4,r2,16
 8002cc0:	38ceb03a 	or	r7,r7,r3
 8002cc4:	49c00015 	stw	r7,0(r9)
 8002cc8:	300dd43a 	srai	r6,r6,16
 8002ccc:	4a400104 	addi	r9,r9,4
 8002cd0:	a17fe52e 	bgeu	r20,r5,8002c68 <__alt_data_end+0xff002c68>
 8002cd4:	b0800017 	ldw	r2,0(r22)
 8002cd8:	10000b1e 	bne	r2,zero,8002d08 <quorem+0x120>
 8002cdc:	b0bfff04 	addi	r2,r22,-4
 8002ce0:	a880082e 	bgeu	r21,r2,8002d04 <quorem+0x11c>
 8002ce4:	b0ffff17 	ldw	r3,-4(r22)
 8002ce8:	18000326 	beq	r3,zero,8002cf8 <quorem+0x110>
 8002cec:	00000506 	br	8002d04 <quorem+0x11c>
 8002cf0:	10c00017 	ldw	r3,0(r2)
 8002cf4:	1800031e 	bne	r3,zero,8002d04 <quorem+0x11c>
 8002cf8:	10bfff04 	addi	r2,r2,-4
 8002cfc:	94bfffc4 	addi	r18,r18,-1
 8002d00:	a8bffb36 	bltu	r21,r2,8002cf0 <__alt_data_end+0xff002cf0>
 8002d04:	84800415 	stw	r18,16(r16)
 8002d08:	b80b883a 	mov	r5,r23
 8002d0c:	8009883a 	mov	r4,r16
 8002d10:	8006d4c0 	call	8006d4c <__mcmp>
 8002d14:	10002616 	blt	r2,zero,8002db0 <quorem+0x1c8>
 8002d18:	9cc00044 	addi	r19,r19,1
 8002d1c:	a805883a 	mov	r2,r21
 8002d20:	000b883a 	mov	r5,zero
 8002d24:	11000017 	ldw	r4,0(r2)
 8002d28:	89800017 	ldw	r6,0(r17)
 8002d2c:	10800104 	addi	r2,r2,4
 8002d30:	20ffffcc 	andi	r3,r4,65535
 8002d34:	194b883a 	add	r5,r3,r5
 8002d38:	30ffffcc 	andi	r3,r6,65535
 8002d3c:	28c7c83a 	sub	r3,r5,r3
 8002d40:	300cd43a 	srli	r6,r6,16
 8002d44:	2008d43a 	srli	r4,r4,16
 8002d48:	180bd43a 	srai	r5,r3,16
 8002d4c:	18ffffcc 	andi	r3,r3,65535
 8002d50:	2189c83a 	sub	r4,r4,r6
 8002d54:	2149883a 	add	r4,r4,r5
 8002d58:	200c943a 	slli	r6,r4,16
 8002d5c:	8c400104 	addi	r17,r17,4
 8002d60:	200bd43a 	srai	r5,r4,16
 8002d64:	30c6b03a 	or	r3,r6,r3
 8002d68:	10ffff15 	stw	r3,-4(r2)
 8002d6c:	a47fed2e 	bgeu	r20,r17,8002d24 <__alt_data_end+0xff002d24>
 8002d70:	9485883a 	add	r2,r18,r18
 8002d74:	1085883a 	add	r2,r2,r2
 8002d78:	a887883a 	add	r3,r21,r2
 8002d7c:	18800017 	ldw	r2,0(r3)
 8002d80:	10000b1e 	bne	r2,zero,8002db0 <quorem+0x1c8>
 8002d84:	18bfff04 	addi	r2,r3,-4
 8002d88:	a880082e 	bgeu	r21,r2,8002dac <quorem+0x1c4>
 8002d8c:	18ffff17 	ldw	r3,-4(r3)
 8002d90:	18000326 	beq	r3,zero,8002da0 <quorem+0x1b8>
 8002d94:	00000506 	br	8002dac <quorem+0x1c4>
 8002d98:	10c00017 	ldw	r3,0(r2)
 8002d9c:	1800031e 	bne	r3,zero,8002dac <quorem+0x1c4>
 8002da0:	10bfff04 	addi	r2,r2,-4
 8002da4:	94bfffc4 	addi	r18,r18,-1
 8002da8:	a8bffb36 	bltu	r21,r2,8002d98 <__alt_data_end+0xff002d98>
 8002dac:	84800415 	stw	r18,16(r16)
 8002db0:	9805883a 	mov	r2,r19
 8002db4:	dfc00817 	ldw	ra,32(sp)
 8002db8:	ddc00717 	ldw	r23,28(sp)
 8002dbc:	dd800617 	ldw	r22,24(sp)
 8002dc0:	dd400517 	ldw	r21,20(sp)
 8002dc4:	dd000417 	ldw	r20,16(sp)
 8002dc8:	dcc00317 	ldw	r19,12(sp)
 8002dcc:	dc800217 	ldw	r18,8(sp)
 8002dd0:	dc400117 	ldw	r17,4(sp)
 8002dd4:	dc000017 	ldw	r16,0(sp)
 8002dd8:	dec00904 	addi	sp,sp,36
 8002ddc:	f800283a 	ret
 8002de0:	0005883a 	mov	r2,zero
 8002de4:	003ff306 	br	8002db4 <__alt_data_end+0xff002db4>

08002de8 <_dtoa_r>:
 8002de8:	20801017 	ldw	r2,64(r4)
 8002dec:	deffde04 	addi	sp,sp,-136
 8002df0:	df002015 	stw	fp,128(sp)
 8002df4:	dcc01b15 	stw	r19,108(sp)
 8002df8:	dc801a15 	stw	r18,104(sp)
 8002dfc:	dc401915 	stw	r17,100(sp)
 8002e00:	dc001815 	stw	r16,96(sp)
 8002e04:	dfc02115 	stw	ra,132(sp)
 8002e08:	ddc01f15 	stw	r23,124(sp)
 8002e0c:	dd801e15 	stw	r22,120(sp)
 8002e10:	dd401d15 	stw	r21,116(sp)
 8002e14:	dd001c15 	stw	r20,112(sp)
 8002e18:	d9c00315 	stw	r7,12(sp)
 8002e1c:	2039883a 	mov	fp,r4
 8002e20:	3023883a 	mov	r17,r6
 8002e24:	2825883a 	mov	r18,r5
 8002e28:	dc002417 	ldw	r16,144(sp)
 8002e2c:	3027883a 	mov	r19,r6
 8002e30:	10000826 	beq	r2,zero,8002e54 <_dtoa_r+0x6c>
 8002e34:	21801117 	ldw	r6,68(r4)
 8002e38:	00c00044 	movi	r3,1
 8002e3c:	100b883a 	mov	r5,r2
 8002e40:	1986983a 	sll	r3,r3,r6
 8002e44:	11800115 	stw	r6,4(r2)
 8002e48:	10c00215 	stw	r3,8(r2)
 8002e4c:	800652c0 	call	800652c <_Bfree>
 8002e50:	e0001015 	stw	zero,64(fp)
 8002e54:	88002e16 	blt	r17,zero,8002f10 <_dtoa_r+0x128>
 8002e58:	80000015 	stw	zero,0(r16)
 8002e5c:	889ffc2c 	andhi	r2,r17,32752
 8002e60:	00dffc34 	movhi	r3,32752
 8002e64:	10c01c26 	beq	r2,r3,8002ed8 <_dtoa_r+0xf0>
 8002e68:	000d883a 	mov	r6,zero
 8002e6c:	000f883a 	mov	r7,zero
 8002e70:	9009883a 	mov	r4,r18
 8002e74:	980b883a 	mov	r5,r19
 8002e78:	800bba00 	call	800bba0 <__eqdf2>
 8002e7c:	10002b1e 	bne	r2,zero,8002f2c <_dtoa_r+0x144>
 8002e80:	d9c02317 	ldw	r7,140(sp)
 8002e84:	00800044 	movi	r2,1
 8002e88:	38800015 	stw	r2,0(r7)
 8002e8c:	d8802517 	ldw	r2,148(sp)
 8002e90:	10019e26 	beq	r2,zero,800350c <_dtoa_r+0x724>
 8002e94:	d8c02517 	ldw	r3,148(sp)
 8002e98:	00820074 	movhi	r2,2049
 8002e9c:	10869644 	addi	r2,r2,6745
 8002ea0:	18800015 	stw	r2,0(r3)
 8002ea4:	10bfffc4 	addi	r2,r2,-1
 8002ea8:	dfc02117 	ldw	ra,132(sp)
 8002eac:	df002017 	ldw	fp,128(sp)
 8002eb0:	ddc01f17 	ldw	r23,124(sp)
 8002eb4:	dd801e17 	ldw	r22,120(sp)
 8002eb8:	dd401d17 	ldw	r21,116(sp)
 8002ebc:	dd001c17 	ldw	r20,112(sp)
 8002ec0:	dcc01b17 	ldw	r19,108(sp)
 8002ec4:	dc801a17 	ldw	r18,104(sp)
 8002ec8:	dc401917 	ldw	r17,100(sp)
 8002ecc:	dc001817 	ldw	r16,96(sp)
 8002ed0:	dec02204 	addi	sp,sp,136
 8002ed4:	f800283a 	ret
 8002ed8:	d8c02317 	ldw	r3,140(sp)
 8002edc:	0089c3c4 	movi	r2,9999
 8002ee0:	18800015 	stw	r2,0(r3)
 8002ee4:	90017726 	beq	r18,zero,80034c4 <_dtoa_r+0x6dc>
 8002ee8:	00820074 	movhi	r2,2049
 8002eec:	1086a204 	addi	r2,r2,6792
 8002ef0:	d9002517 	ldw	r4,148(sp)
 8002ef4:	203fec26 	beq	r4,zero,8002ea8 <__alt_data_end+0xff002ea8>
 8002ef8:	10c000c7 	ldb	r3,3(r2)
 8002efc:	1801781e 	bne	r3,zero,80034e0 <_dtoa_r+0x6f8>
 8002f00:	10c000c4 	addi	r3,r2,3
 8002f04:	d9802517 	ldw	r6,148(sp)
 8002f08:	30c00015 	stw	r3,0(r6)
 8002f0c:	003fe606 	br	8002ea8 <__alt_data_end+0xff002ea8>
 8002f10:	04e00034 	movhi	r19,32768
 8002f14:	9cffffc4 	addi	r19,r19,-1
 8002f18:	00800044 	movi	r2,1
 8002f1c:	8ce6703a 	and	r19,r17,r19
 8002f20:	80800015 	stw	r2,0(r16)
 8002f24:	9823883a 	mov	r17,r19
 8002f28:	003fcc06 	br	8002e5c <__alt_data_end+0xff002e5c>
 8002f2c:	d8800204 	addi	r2,sp,8
 8002f30:	d8800015 	stw	r2,0(sp)
 8002f34:	d9c00104 	addi	r7,sp,4
 8002f38:	900b883a 	mov	r5,r18
 8002f3c:	980d883a 	mov	r6,r19
 8002f40:	e009883a 	mov	r4,fp
 8002f44:	8820d53a 	srli	r16,r17,20
 8002f48:	80071180 	call	8007118 <__d2b>
 8002f4c:	d8800915 	stw	r2,36(sp)
 8002f50:	8001651e 	bne	r16,zero,80034e8 <_dtoa_r+0x700>
 8002f54:	dd800217 	ldw	r22,8(sp)
 8002f58:	dc000117 	ldw	r16,4(sp)
 8002f5c:	00800804 	movi	r2,32
 8002f60:	b421883a 	add	r16,r22,r16
 8002f64:	80c10c84 	addi	r3,r16,1074
 8002f68:	10c2d10e 	bge	r2,r3,8003ab0 <_dtoa_r+0xcc8>
 8002f6c:	00801004 	movi	r2,64
 8002f70:	81010484 	addi	r4,r16,1042
 8002f74:	10c7c83a 	sub	r3,r2,r3
 8002f78:	9108d83a 	srl	r4,r18,r4
 8002f7c:	88e2983a 	sll	r17,r17,r3
 8002f80:	2448b03a 	or	r4,r4,r17
 8002f84:	800cf680 	call	800cf68 <__floatunsidf>
 8002f88:	017f8434 	movhi	r5,65040
 8002f8c:	01800044 	movi	r6,1
 8002f90:	1009883a 	mov	r4,r2
 8002f94:	194b883a 	add	r5,r3,r5
 8002f98:	843fffc4 	addi	r16,r16,-1
 8002f9c:	d9801115 	stw	r6,68(sp)
 8002fa0:	000d883a 	mov	r6,zero
 8002fa4:	01cffe34 	movhi	r7,16376
 8002fa8:	800c5100 	call	800c510 <__subdf3>
 8002fac:	0198dbf4 	movhi	r6,25455
 8002fb0:	01cff4f4 	movhi	r7,16339
 8002fb4:	3190d844 	addi	r6,r6,17249
 8002fb8:	39e1e9c4 	addi	r7,r7,-30809
 8002fbc:	1009883a 	mov	r4,r2
 8002fc0:	180b883a 	mov	r5,r3
 8002fc4:	800bdf80 	call	800bdf8 <__muldf3>
 8002fc8:	01a2d874 	movhi	r6,35681
 8002fcc:	01cff1f4 	movhi	r7,16327
 8002fd0:	31b22cc4 	addi	r6,r6,-14157
 8002fd4:	39e28a04 	addi	r7,r7,-30168
 8002fd8:	180b883a 	mov	r5,r3
 8002fdc:	1009883a 	mov	r4,r2
 8002fe0:	800aa0c0 	call	800aa0c <__adddf3>
 8002fe4:	8009883a 	mov	r4,r16
 8002fe8:	1029883a 	mov	r20,r2
 8002fec:	1823883a 	mov	r17,r3
 8002ff0:	800ce8c0 	call	800ce8c <__floatsidf>
 8002ff4:	019427f4 	movhi	r6,20639
 8002ff8:	01cff4f4 	movhi	r7,16339
 8002ffc:	319e7ec4 	addi	r6,r6,31227
 8003000:	39d104c4 	addi	r7,r7,17427
 8003004:	1009883a 	mov	r4,r2
 8003008:	180b883a 	mov	r5,r3
 800300c:	800bdf80 	call	800bdf8 <__muldf3>
 8003010:	100d883a 	mov	r6,r2
 8003014:	180f883a 	mov	r7,r3
 8003018:	a009883a 	mov	r4,r20
 800301c:	880b883a 	mov	r5,r17
 8003020:	800aa0c0 	call	800aa0c <__adddf3>
 8003024:	1009883a 	mov	r4,r2
 8003028:	180b883a 	mov	r5,r3
 800302c:	1029883a 	mov	r20,r2
 8003030:	1823883a 	mov	r17,r3
 8003034:	800ce0c0 	call	800ce0c <__fixdfsi>
 8003038:	000d883a 	mov	r6,zero
 800303c:	000f883a 	mov	r7,zero
 8003040:	a009883a 	mov	r4,r20
 8003044:	880b883a 	mov	r5,r17
 8003048:	d8800515 	stw	r2,20(sp)
 800304c:	800bd040 	call	800bd04 <__ledf2>
 8003050:	10028716 	blt	r2,zero,8003a70 <_dtoa_r+0xc88>
 8003054:	d8c00517 	ldw	r3,20(sp)
 8003058:	00800584 	movi	r2,22
 800305c:	10c27536 	bltu	r2,r3,8003a34 <_dtoa_r+0xc4c>
 8003060:	180490fa 	slli	r2,r3,3
 8003064:	00c20074 	movhi	r3,2049
 8003068:	18c6be04 	addi	r3,r3,6904
 800306c:	1885883a 	add	r2,r3,r2
 8003070:	11000017 	ldw	r4,0(r2)
 8003074:	11400117 	ldw	r5,4(r2)
 8003078:	900d883a 	mov	r6,r18
 800307c:	980f883a 	mov	r7,r19
 8003080:	800bc280 	call	800bc28 <__gedf2>
 8003084:	00828d0e 	bge	zero,r2,8003abc <_dtoa_r+0xcd4>
 8003088:	d9000517 	ldw	r4,20(sp)
 800308c:	d8000e15 	stw	zero,56(sp)
 8003090:	213fffc4 	addi	r4,r4,-1
 8003094:	d9000515 	stw	r4,20(sp)
 8003098:	b42dc83a 	sub	r22,r22,r16
 800309c:	b5bfffc4 	addi	r22,r22,-1
 80030a0:	b0026f16 	blt	r22,zero,8003a60 <_dtoa_r+0xc78>
 80030a4:	d8000815 	stw	zero,32(sp)
 80030a8:	d9c00517 	ldw	r7,20(sp)
 80030ac:	38026416 	blt	r7,zero,8003a40 <_dtoa_r+0xc58>
 80030b0:	b1ed883a 	add	r22,r22,r7
 80030b4:	d9c00d15 	stw	r7,52(sp)
 80030b8:	d8000a15 	stw	zero,40(sp)
 80030bc:	d9800317 	ldw	r6,12(sp)
 80030c0:	00800244 	movi	r2,9
 80030c4:	11811436 	bltu	r2,r6,8003518 <_dtoa_r+0x730>
 80030c8:	00800144 	movi	r2,5
 80030cc:	1184e10e 	bge	r2,r6,8004454 <_dtoa_r+0x166c>
 80030d0:	31bfff04 	addi	r6,r6,-4
 80030d4:	d9800315 	stw	r6,12(sp)
 80030d8:	0023883a 	mov	r17,zero
 80030dc:	d9800317 	ldw	r6,12(sp)
 80030e0:	008000c4 	movi	r2,3
 80030e4:	30836726 	beq	r6,r2,8003e84 <_dtoa_r+0x109c>
 80030e8:	1183410e 	bge	r2,r6,8003df0 <_dtoa_r+0x1008>
 80030ec:	d9c00317 	ldw	r7,12(sp)
 80030f0:	00800104 	movi	r2,4
 80030f4:	38827c26 	beq	r7,r2,8003ae8 <_dtoa_r+0xd00>
 80030f8:	00800144 	movi	r2,5
 80030fc:	3884c41e 	bne	r7,r2,8004410 <_dtoa_r+0x1628>
 8003100:	00800044 	movi	r2,1
 8003104:	d8800b15 	stw	r2,44(sp)
 8003108:	d8c00517 	ldw	r3,20(sp)
 800310c:	d9002217 	ldw	r4,136(sp)
 8003110:	1907883a 	add	r3,r3,r4
 8003114:	19800044 	addi	r6,r3,1
 8003118:	d8c00c15 	stw	r3,48(sp)
 800311c:	d9800615 	stw	r6,24(sp)
 8003120:	0183a40e 	bge	zero,r6,8003fb4 <_dtoa_r+0x11cc>
 8003124:	d9800617 	ldw	r6,24(sp)
 8003128:	3021883a 	mov	r16,r6
 800312c:	e0001115 	stw	zero,68(fp)
 8003130:	008005c4 	movi	r2,23
 8003134:	1184c92e 	bgeu	r2,r6,800445c <_dtoa_r+0x1674>
 8003138:	00c00044 	movi	r3,1
 800313c:	00800104 	movi	r2,4
 8003140:	1085883a 	add	r2,r2,r2
 8003144:	11000504 	addi	r4,r2,20
 8003148:	180b883a 	mov	r5,r3
 800314c:	18c00044 	addi	r3,r3,1
 8003150:	313ffb2e 	bgeu	r6,r4,8003140 <__alt_data_end+0xff003140>
 8003154:	e1401115 	stw	r5,68(fp)
 8003158:	e009883a 	mov	r4,fp
 800315c:	80064840 	call	8006484 <_Balloc>
 8003160:	d8800715 	stw	r2,28(sp)
 8003164:	e0801015 	stw	r2,64(fp)
 8003168:	00800384 	movi	r2,14
 800316c:	1400f736 	bltu	r2,r16,800354c <_dtoa_r+0x764>
 8003170:	8800f626 	beq	r17,zero,800354c <_dtoa_r+0x764>
 8003174:	d9c00517 	ldw	r7,20(sp)
 8003178:	01c39a0e 	bge	zero,r7,8003fe4 <_dtoa_r+0x11fc>
 800317c:	388003cc 	andi	r2,r7,15
 8003180:	100490fa 	slli	r2,r2,3
 8003184:	382bd13a 	srai	r21,r7,4
 8003188:	00c20074 	movhi	r3,2049
 800318c:	18c6be04 	addi	r3,r3,6904
 8003190:	1885883a 	add	r2,r3,r2
 8003194:	a8c0040c 	andi	r3,r21,16
 8003198:	12400017 	ldw	r9,0(r2)
 800319c:	12000117 	ldw	r8,4(r2)
 80031a0:	18037926 	beq	r3,zero,8003f88 <_dtoa_r+0x11a0>
 80031a4:	00820074 	movhi	r2,2049
 80031a8:	1086b404 	addi	r2,r2,6864
 80031ac:	11800817 	ldw	r6,32(r2)
 80031b0:	11c00917 	ldw	r7,36(r2)
 80031b4:	9009883a 	mov	r4,r18
 80031b8:	980b883a 	mov	r5,r19
 80031bc:	da001715 	stw	r8,92(sp)
 80031c0:	da401615 	stw	r9,88(sp)
 80031c4:	800b2b80 	call	800b2b8 <__divdf3>
 80031c8:	da001717 	ldw	r8,92(sp)
 80031cc:	da401617 	ldw	r9,88(sp)
 80031d0:	ad4003cc 	andi	r21,r21,15
 80031d4:	040000c4 	movi	r16,3
 80031d8:	1023883a 	mov	r17,r2
 80031dc:	1829883a 	mov	r20,r3
 80031e0:	a8001126 	beq	r21,zero,8003228 <_dtoa_r+0x440>
 80031e4:	05c20074 	movhi	r23,2049
 80031e8:	bdc6b404 	addi	r23,r23,6864
 80031ec:	4805883a 	mov	r2,r9
 80031f0:	4007883a 	mov	r3,r8
 80031f4:	a980004c 	andi	r6,r21,1
 80031f8:	1009883a 	mov	r4,r2
 80031fc:	a82bd07a 	srai	r21,r21,1
 8003200:	180b883a 	mov	r5,r3
 8003204:	30000426 	beq	r6,zero,8003218 <_dtoa_r+0x430>
 8003208:	b9800017 	ldw	r6,0(r23)
 800320c:	b9c00117 	ldw	r7,4(r23)
 8003210:	84000044 	addi	r16,r16,1
 8003214:	800bdf80 	call	800bdf8 <__muldf3>
 8003218:	bdc00204 	addi	r23,r23,8
 800321c:	a83ff51e 	bne	r21,zero,80031f4 <__alt_data_end+0xff0031f4>
 8003220:	1013883a 	mov	r9,r2
 8003224:	1811883a 	mov	r8,r3
 8003228:	480d883a 	mov	r6,r9
 800322c:	400f883a 	mov	r7,r8
 8003230:	8809883a 	mov	r4,r17
 8003234:	a00b883a 	mov	r5,r20
 8003238:	800b2b80 	call	800b2b8 <__divdf3>
 800323c:	d8800f15 	stw	r2,60(sp)
 8003240:	d8c01015 	stw	r3,64(sp)
 8003244:	d8c00e17 	ldw	r3,56(sp)
 8003248:	18000626 	beq	r3,zero,8003264 <_dtoa_r+0x47c>
 800324c:	d9000f17 	ldw	r4,60(sp)
 8003250:	d9401017 	ldw	r5,64(sp)
 8003254:	000d883a 	mov	r6,zero
 8003258:	01cffc34 	movhi	r7,16368
 800325c:	800bd040 	call	800bd04 <__ledf2>
 8003260:	10040b16 	blt	r2,zero,8004290 <_dtoa_r+0x14a8>
 8003264:	8009883a 	mov	r4,r16
 8003268:	800ce8c0 	call	800ce8c <__floatsidf>
 800326c:	d9800f17 	ldw	r6,60(sp)
 8003270:	d9c01017 	ldw	r7,64(sp)
 8003274:	1009883a 	mov	r4,r2
 8003278:	180b883a 	mov	r5,r3
 800327c:	800bdf80 	call	800bdf8 <__muldf3>
 8003280:	000d883a 	mov	r6,zero
 8003284:	01d00734 	movhi	r7,16412
 8003288:	1009883a 	mov	r4,r2
 800328c:	180b883a 	mov	r5,r3
 8003290:	800aa0c0 	call	800aa0c <__adddf3>
 8003294:	1021883a 	mov	r16,r2
 8003298:	d8800617 	ldw	r2,24(sp)
 800329c:	047f3034 	movhi	r17,64704
 80032a0:	1c63883a 	add	r17,r3,r17
 80032a4:	10031826 	beq	r2,zero,8003f08 <_dtoa_r+0x1120>
 80032a8:	d8c00517 	ldw	r3,20(sp)
 80032ac:	db000617 	ldw	r12,24(sp)
 80032b0:	d8c01315 	stw	r3,76(sp)
 80032b4:	d9000b17 	ldw	r4,44(sp)
 80032b8:	20038f26 	beq	r4,zero,80040f8 <_dtoa_r+0x1310>
 80032bc:	60bfffc4 	addi	r2,r12,-1
 80032c0:	100490fa 	slli	r2,r2,3
 80032c4:	00c20074 	movhi	r3,2049
 80032c8:	18c6be04 	addi	r3,r3,6904
 80032cc:	1885883a 	add	r2,r3,r2
 80032d0:	11800017 	ldw	r6,0(r2)
 80032d4:	11c00117 	ldw	r7,4(r2)
 80032d8:	d8800717 	ldw	r2,28(sp)
 80032dc:	0009883a 	mov	r4,zero
 80032e0:	014ff834 	movhi	r5,16352
 80032e4:	db001615 	stw	r12,88(sp)
 80032e8:	15c00044 	addi	r23,r2,1
 80032ec:	800b2b80 	call	800b2b8 <__divdf3>
 80032f0:	800d883a 	mov	r6,r16
 80032f4:	880f883a 	mov	r7,r17
 80032f8:	1009883a 	mov	r4,r2
 80032fc:	180b883a 	mov	r5,r3
 8003300:	800c5100 	call	800c510 <__subdf3>
 8003304:	d9401017 	ldw	r5,64(sp)
 8003308:	d9000f17 	ldw	r4,60(sp)
 800330c:	102b883a 	mov	r21,r2
 8003310:	d8c01215 	stw	r3,72(sp)
 8003314:	800ce0c0 	call	800ce0c <__fixdfsi>
 8003318:	1009883a 	mov	r4,r2
 800331c:	1029883a 	mov	r20,r2
 8003320:	800ce8c0 	call	800ce8c <__floatsidf>
 8003324:	d9000f17 	ldw	r4,60(sp)
 8003328:	d9401017 	ldw	r5,64(sp)
 800332c:	100d883a 	mov	r6,r2
 8003330:	180f883a 	mov	r7,r3
 8003334:	800c5100 	call	800c510 <__subdf3>
 8003338:	1823883a 	mov	r17,r3
 800333c:	d8c00717 	ldw	r3,28(sp)
 8003340:	d9401217 	ldw	r5,72(sp)
 8003344:	a2000c04 	addi	r8,r20,48
 8003348:	1021883a 	mov	r16,r2
 800334c:	1a000005 	stb	r8,0(r3)
 8003350:	800d883a 	mov	r6,r16
 8003354:	880f883a 	mov	r7,r17
 8003358:	a809883a 	mov	r4,r21
 800335c:	4029883a 	mov	r20,r8
 8003360:	800bc280 	call	800bc28 <__gedf2>
 8003364:	00841d16 	blt	zero,r2,80043dc <_dtoa_r+0x15f4>
 8003368:	800d883a 	mov	r6,r16
 800336c:	880f883a 	mov	r7,r17
 8003370:	0009883a 	mov	r4,zero
 8003374:	014ffc34 	movhi	r5,16368
 8003378:	800c5100 	call	800c510 <__subdf3>
 800337c:	d9401217 	ldw	r5,72(sp)
 8003380:	100d883a 	mov	r6,r2
 8003384:	180f883a 	mov	r7,r3
 8003388:	a809883a 	mov	r4,r21
 800338c:	800bc280 	call	800bc28 <__gedf2>
 8003390:	db001617 	ldw	r12,88(sp)
 8003394:	00840e16 	blt	zero,r2,80043d0 <_dtoa_r+0x15e8>
 8003398:	00800044 	movi	r2,1
 800339c:	13006b0e 	bge	r2,r12,800354c <_dtoa_r+0x764>
 80033a0:	d9000717 	ldw	r4,28(sp)
 80033a4:	dd800f15 	stw	r22,60(sp)
 80033a8:	dcc01015 	stw	r19,64(sp)
 80033ac:	2319883a 	add	r12,r4,r12
 80033b0:	dcc01217 	ldw	r19,72(sp)
 80033b4:	602d883a 	mov	r22,r12
 80033b8:	dc801215 	stw	r18,72(sp)
 80033bc:	b825883a 	mov	r18,r23
 80033c0:	00000906 	br	80033e8 <_dtoa_r+0x600>
 80033c4:	800c5100 	call	800c510 <__subdf3>
 80033c8:	a80d883a 	mov	r6,r21
 80033cc:	980f883a 	mov	r7,r19
 80033d0:	1009883a 	mov	r4,r2
 80033d4:	180b883a 	mov	r5,r3
 80033d8:	800bd040 	call	800bd04 <__ledf2>
 80033dc:	1003e816 	blt	r2,zero,8004380 <_dtoa_r+0x1598>
 80033e0:	b825883a 	mov	r18,r23
 80033e4:	bd83e926 	beq	r23,r22,800438c <_dtoa_r+0x15a4>
 80033e8:	a809883a 	mov	r4,r21
 80033ec:	980b883a 	mov	r5,r19
 80033f0:	000d883a 	mov	r6,zero
 80033f4:	01d00934 	movhi	r7,16420
 80033f8:	800bdf80 	call	800bdf8 <__muldf3>
 80033fc:	000d883a 	mov	r6,zero
 8003400:	01d00934 	movhi	r7,16420
 8003404:	8009883a 	mov	r4,r16
 8003408:	880b883a 	mov	r5,r17
 800340c:	102b883a 	mov	r21,r2
 8003410:	1827883a 	mov	r19,r3
 8003414:	800bdf80 	call	800bdf8 <__muldf3>
 8003418:	180b883a 	mov	r5,r3
 800341c:	1009883a 	mov	r4,r2
 8003420:	1821883a 	mov	r16,r3
 8003424:	1023883a 	mov	r17,r2
 8003428:	800ce0c0 	call	800ce0c <__fixdfsi>
 800342c:	1009883a 	mov	r4,r2
 8003430:	1029883a 	mov	r20,r2
 8003434:	800ce8c0 	call	800ce8c <__floatsidf>
 8003438:	8809883a 	mov	r4,r17
 800343c:	800b883a 	mov	r5,r16
 8003440:	100d883a 	mov	r6,r2
 8003444:	180f883a 	mov	r7,r3
 8003448:	800c5100 	call	800c510 <__subdf3>
 800344c:	a5000c04 	addi	r20,r20,48
 8003450:	a80d883a 	mov	r6,r21
 8003454:	980f883a 	mov	r7,r19
 8003458:	1009883a 	mov	r4,r2
 800345c:	180b883a 	mov	r5,r3
 8003460:	95000005 	stb	r20,0(r18)
 8003464:	1021883a 	mov	r16,r2
 8003468:	1823883a 	mov	r17,r3
 800346c:	800bd040 	call	800bd04 <__ledf2>
 8003470:	bdc00044 	addi	r23,r23,1
 8003474:	800d883a 	mov	r6,r16
 8003478:	880f883a 	mov	r7,r17
 800347c:	0009883a 	mov	r4,zero
 8003480:	014ffc34 	movhi	r5,16368
 8003484:	103fcf0e 	bge	r2,zero,80033c4 <__alt_data_end+0xff0033c4>
 8003488:	d8c01317 	ldw	r3,76(sp)
 800348c:	d8c00515 	stw	r3,20(sp)
 8003490:	d9400917 	ldw	r5,36(sp)
 8003494:	e009883a 	mov	r4,fp
 8003498:	800652c0 	call	800652c <_Bfree>
 800349c:	d9000517 	ldw	r4,20(sp)
 80034a0:	d9802317 	ldw	r6,140(sp)
 80034a4:	d9c02517 	ldw	r7,148(sp)
 80034a8:	b8000005 	stb	zero,0(r23)
 80034ac:	20800044 	addi	r2,r4,1
 80034b0:	30800015 	stw	r2,0(r6)
 80034b4:	3802aa26 	beq	r7,zero,8003f60 <_dtoa_r+0x1178>
 80034b8:	3dc00015 	stw	r23,0(r7)
 80034bc:	d8800717 	ldw	r2,28(sp)
 80034c0:	003e7906 	br	8002ea8 <__alt_data_end+0xff002ea8>
 80034c4:	00800434 	movhi	r2,16
 80034c8:	10bfffc4 	addi	r2,r2,-1
 80034cc:	88a2703a 	and	r17,r17,r2
 80034d0:	883e851e 	bne	r17,zero,8002ee8 <__alt_data_end+0xff002ee8>
 80034d4:	00820074 	movhi	r2,2049
 80034d8:	10869f04 	addi	r2,r2,6780
 80034dc:	003e8406 	br	8002ef0 <__alt_data_end+0xff002ef0>
 80034e0:	10c00204 	addi	r3,r2,8
 80034e4:	003e8706 	br	8002f04 <__alt_data_end+0xff002f04>
 80034e8:	01400434 	movhi	r5,16
 80034ec:	297fffc4 	addi	r5,r5,-1
 80034f0:	994a703a 	and	r5,r19,r5
 80034f4:	9009883a 	mov	r4,r18
 80034f8:	843f0044 	addi	r16,r16,-1023
 80034fc:	294ffc34 	orhi	r5,r5,16368
 8003500:	dd800217 	ldw	r22,8(sp)
 8003504:	d8001115 	stw	zero,68(sp)
 8003508:	003ea506 	br	8002fa0 <__alt_data_end+0xff002fa0>
 800350c:	00820074 	movhi	r2,2049
 8003510:	10869604 	addi	r2,r2,6744
 8003514:	003e6406 	br	8002ea8 <__alt_data_end+0xff002ea8>
 8003518:	e0001115 	stw	zero,68(fp)
 800351c:	000b883a 	mov	r5,zero
 8003520:	e009883a 	mov	r4,fp
 8003524:	80064840 	call	8006484 <_Balloc>
 8003528:	01bfffc4 	movi	r6,-1
 800352c:	01c00044 	movi	r7,1
 8003530:	d8800715 	stw	r2,28(sp)
 8003534:	d9800c15 	stw	r6,48(sp)
 8003538:	e0801015 	stw	r2,64(fp)
 800353c:	d8000315 	stw	zero,12(sp)
 8003540:	d9c00b15 	stw	r7,44(sp)
 8003544:	d9800615 	stw	r6,24(sp)
 8003548:	d8002215 	stw	zero,136(sp)
 800354c:	d8800117 	ldw	r2,4(sp)
 8003550:	10008916 	blt	r2,zero,8003778 <_dtoa_r+0x990>
 8003554:	d9000517 	ldw	r4,20(sp)
 8003558:	00c00384 	movi	r3,14
 800355c:	19008616 	blt	r3,r4,8003778 <_dtoa_r+0x990>
 8003560:	200490fa 	slli	r2,r4,3
 8003564:	00c20074 	movhi	r3,2049
 8003568:	d9802217 	ldw	r6,136(sp)
 800356c:	18c6be04 	addi	r3,r3,6904
 8003570:	1885883a 	add	r2,r3,r2
 8003574:	14000017 	ldw	r16,0(r2)
 8003578:	14400117 	ldw	r17,4(r2)
 800357c:	30016316 	blt	r6,zero,8003b0c <_dtoa_r+0xd24>
 8003580:	800d883a 	mov	r6,r16
 8003584:	880f883a 	mov	r7,r17
 8003588:	9009883a 	mov	r4,r18
 800358c:	980b883a 	mov	r5,r19
 8003590:	800b2b80 	call	800b2b8 <__divdf3>
 8003594:	180b883a 	mov	r5,r3
 8003598:	1009883a 	mov	r4,r2
 800359c:	800ce0c0 	call	800ce0c <__fixdfsi>
 80035a0:	1009883a 	mov	r4,r2
 80035a4:	102b883a 	mov	r21,r2
 80035a8:	800ce8c0 	call	800ce8c <__floatsidf>
 80035ac:	800d883a 	mov	r6,r16
 80035b0:	880f883a 	mov	r7,r17
 80035b4:	1009883a 	mov	r4,r2
 80035b8:	180b883a 	mov	r5,r3
 80035bc:	800bdf80 	call	800bdf8 <__muldf3>
 80035c0:	100d883a 	mov	r6,r2
 80035c4:	180f883a 	mov	r7,r3
 80035c8:	9009883a 	mov	r4,r18
 80035cc:	980b883a 	mov	r5,r19
 80035d0:	800c5100 	call	800c510 <__subdf3>
 80035d4:	d9c00717 	ldw	r7,28(sp)
 80035d8:	1009883a 	mov	r4,r2
 80035dc:	a8800c04 	addi	r2,r21,48
 80035e0:	38800005 	stb	r2,0(r7)
 80035e4:	3dc00044 	addi	r23,r7,1
 80035e8:	d9c00617 	ldw	r7,24(sp)
 80035ec:	01800044 	movi	r6,1
 80035f0:	180b883a 	mov	r5,r3
 80035f4:	2005883a 	mov	r2,r4
 80035f8:	39803826 	beq	r7,r6,80036dc <_dtoa_r+0x8f4>
 80035fc:	000d883a 	mov	r6,zero
 8003600:	01d00934 	movhi	r7,16420
 8003604:	800bdf80 	call	800bdf8 <__muldf3>
 8003608:	000d883a 	mov	r6,zero
 800360c:	000f883a 	mov	r7,zero
 8003610:	1009883a 	mov	r4,r2
 8003614:	180b883a 	mov	r5,r3
 8003618:	1025883a 	mov	r18,r2
 800361c:	1827883a 	mov	r19,r3
 8003620:	800bba00 	call	800bba0 <__eqdf2>
 8003624:	103f9a26 	beq	r2,zero,8003490 <__alt_data_end+0xff003490>
 8003628:	d9c00617 	ldw	r7,24(sp)
 800362c:	d8c00717 	ldw	r3,28(sp)
 8003630:	b829883a 	mov	r20,r23
 8003634:	38bfffc4 	addi	r2,r7,-1
 8003638:	18ad883a 	add	r22,r3,r2
 800363c:	00000a06 	br	8003668 <_dtoa_r+0x880>
 8003640:	800bdf80 	call	800bdf8 <__muldf3>
 8003644:	000d883a 	mov	r6,zero
 8003648:	000f883a 	mov	r7,zero
 800364c:	1009883a 	mov	r4,r2
 8003650:	180b883a 	mov	r5,r3
 8003654:	1025883a 	mov	r18,r2
 8003658:	1827883a 	mov	r19,r3
 800365c:	b829883a 	mov	r20,r23
 8003660:	800bba00 	call	800bba0 <__eqdf2>
 8003664:	103f8a26 	beq	r2,zero,8003490 <__alt_data_end+0xff003490>
 8003668:	800d883a 	mov	r6,r16
 800366c:	880f883a 	mov	r7,r17
 8003670:	9009883a 	mov	r4,r18
 8003674:	980b883a 	mov	r5,r19
 8003678:	800b2b80 	call	800b2b8 <__divdf3>
 800367c:	180b883a 	mov	r5,r3
 8003680:	1009883a 	mov	r4,r2
 8003684:	800ce0c0 	call	800ce0c <__fixdfsi>
 8003688:	1009883a 	mov	r4,r2
 800368c:	102b883a 	mov	r21,r2
 8003690:	800ce8c0 	call	800ce8c <__floatsidf>
 8003694:	800d883a 	mov	r6,r16
 8003698:	880f883a 	mov	r7,r17
 800369c:	1009883a 	mov	r4,r2
 80036a0:	180b883a 	mov	r5,r3
 80036a4:	800bdf80 	call	800bdf8 <__muldf3>
 80036a8:	100d883a 	mov	r6,r2
 80036ac:	180f883a 	mov	r7,r3
 80036b0:	9009883a 	mov	r4,r18
 80036b4:	980b883a 	mov	r5,r19
 80036b8:	800c5100 	call	800c510 <__subdf3>
 80036bc:	aa000c04 	addi	r8,r21,48
 80036c0:	a2000005 	stb	r8,0(r20)
 80036c4:	000d883a 	mov	r6,zero
 80036c8:	01d00934 	movhi	r7,16420
 80036cc:	1009883a 	mov	r4,r2
 80036d0:	180b883a 	mov	r5,r3
 80036d4:	a5c00044 	addi	r23,r20,1
 80036d8:	b53fd91e 	bne	r22,r20,8003640 <__alt_data_end+0xff003640>
 80036dc:	100d883a 	mov	r6,r2
 80036e0:	180f883a 	mov	r7,r3
 80036e4:	1009883a 	mov	r4,r2
 80036e8:	180b883a 	mov	r5,r3
 80036ec:	800aa0c0 	call	800aa0c <__adddf3>
 80036f0:	100d883a 	mov	r6,r2
 80036f4:	180f883a 	mov	r7,r3
 80036f8:	8009883a 	mov	r4,r16
 80036fc:	880b883a 	mov	r5,r17
 8003700:	1027883a 	mov	r19,r2
 8003704:	1825883a 	mov	r18,r3
 8003708:	800bd040 	call	800bd04 <__ledf2>
 800370c:	10000816 	blt	r2,zero,8003730 <_dtoa_r+0x948>
 8003710:	980d883a 	mov	r6,r19
 8003714:	900f883a 	mov	r7,r18
 8003718:	8009883a 	mov	r4,r16
 800371c:	880b883a 	mov	r5,r17
 8003720:	800bba00 	call	800bba0 <__eqdf2>
 8003724:	103f5a1e 	bne	r2,zero,8003490 <__alt_data_end+0xff003490>
 8003728:	ad40004c 	andi	r21,r21,1
 800372c:	a83f5826 	beq	r21,zero,8003490 <__alt_data_end+0xff003490>
 8003730:	bd3fffc3 	ldbu	r20,-1(r23)
 8003734:	b8bfffc4 	addi	r2,r23,-1
 8003738:	1007883a 	mov	r3,r2
 800373c:	01400e44 	movi	r5,57
 8003740:	d9800717 	ldw	r6,28(sp)
 8003744:	00000506 	br	800375c <_dtoa_r+0x974>
 8003748:	18ffffc4 	addi	r3,r3,-1
 800374c:	11824726 	beq	r2,r6,800406c <_dtoa_r+0x1284>
 8003750:	1d000003 	ldbu	r20,0(r3)
 8003754:	102f883a 	mov	r23,r2
 8003758:	10bfffc4 	addi	r2,r2,-1
 800375c:	a1003fcc 	andi	r4,r20,255
 8003760:	2100201c 	xori	r4,r4,128
 8003764:	213fe004 	addi	r4,r4,-128
 8003768:	217ff726 	beq	r4,r5,8003748 <__alt_data_end+0xff003748>
 800376c:	a2000044 	addi	r8,r20,1
 8003770:	12000005 	stb	r8,0(r2)
 8003774:	003f4606 	br	8003490 <__alt_data_end+0xff003490>
 8003778:	d9000b17 	ldw	r4,44(sp)
 800377c:	2000c826 	beq	r4,zero,8003aa0 <_dtoa_r+0xcb8>
 8003780:	d9800317 	ldw	r6,12(sp)
 8003784:	00c00044 	movi	r3,1
 8003788:	1980f90e 	bge	r3,r6,8003b70 <_dtoa_r+0xd88>
 800378c:	d8800617 	ldw	r2,24(sp)
 8003790:	d8c00a17 	ldw	r3,40(sp)
 8003794:	157fffc4 	addi	r21,r2,-1
 8003798:	1d41f316 	blt	r3,r21,8003f68 <_dtoa_r+0x1180>
 800379c:	1d6bc83a 	sub	r21,r3,r21
 80037a0:	d9c00617 	ldw	r7,24(sp)
 80037a4:	3802aa16 	blt	r7,zero,8004250 <_dtoa_r+0x1468>
 80037a8:	dd000817 	ldw	r20,32(sp)
 80037ac:	d8800617 	ldw	r2,24(sp)
 80037b0:	d8c00817 	ldw	r3,32(sp)
 80037b4:	01400044 	movi	r5,1
 80037b8:	e009883a 	mov	r4,fp
 80037bc:	1887883a 	add	r3,r3,r2
 80037c0:	d8c00815 	stw	r3,32(sp)
 80037c4:	b0ad883a 	add	r22,r22,r2
 80037c8:	80068900 	call	8006890 <__i2b>
 80037cc:	1023883a 	mov	r17,r2
 80037d0:	a0000826 	beq	r20,zero,80037f4 <_dtoa_r+0xa0c>
 80037d4:	0580070e 	bge	zero,r22,80037f4 <_dtoa_r+0xa0c>
 80037d8:	a005883a 	mov	r2,r20
 80037dc:	b500b916 	blt	r22,r20,8003ac4 <_dtoa_r+0xcdc>
 80037e0:	d9000817 	ldw	r4,32(sp)
 80037e4:	a0a9c83a 	sub	r20,r20,r2
 80037e8:	b0adc83a 	sub	r22,r22,r2
 80037ec:	2089c83a 	sub	r4,r4,r2
 80037f0:	d9000815 	stw	r4,32(sp)
 80037f4:	d9800a17 	ldw	r6,40(sp)
 80037f8:	0181810e 	bge	zero,r6,8003e00 <_dtoa_r+0x1018>
 80037fc:	d9c00b17 	ldw	r7,44(sp)
 8003800:	3800b326 	beq	r7,zero,8003ad0 <_dtoa_r+0xce8>
 8003804:	a800b226 	beq	r21,zero,8003ad0 <_dtoa_r+0xce8>
 8003808:	880b883a 	mov	r5,r17
 800380c:	a80d883a 	mov	r6,r21
 8003810:	e009883a 	mov	r4,fp
 8003814:	8006ac40 	call	8006ac4 <__pow5mult>
 8003818:	d9800917 	ldw	r6,36(sp)
 800381c:	100b883a 	mov	r5,r2
 8003820:	e009883a 	mov	r4,fp
 8003824:	1023883a 	mov	r17,r2
 8003828:	80068cc0 	call	80068cc <__multiply>
 800382c:	1021883a 	mov	r16,r2
 8003830:	d8800a17 	ldw	r2,40(sp)
 8003834:	d9400917 	ldw	r5,36(sp)
 8003838:	e009883a 	mov	r4,fp
 800383c:	1545c83a 	sub	r2,r2,r21
 8003840:	d8800a15 	stw	r2,40(sp)
 8003844:	800652c0 	call	800652c <_Bfree>
 8003848:	d8c00a17 	ldw	r3,40(sp)
 800384c:	18009f1e 	bne	r3,zero,8003acc <_dtoa_r+0xce4>
 8003850:	05c00044 	movi	r23,1
 8003854:	e009883a 	mov	r4,fp
 8003858:	b80b883a 	mov	r5,r23
 800385c:	80068900 	call	8006890 <__i2b>
 8003860:	d9000d17 	ldw	r4,52(sp)
 8003864:	102b883a 	mov	r21,r2
 8003868:	2000ce26 	beq	r4,zero,8003ba4 <_dtoa_r+0xdbc>
 800386c:	200d883a 	mov	r6,r4
 8003870:	100b883a 	mov	r5,r2
 8003874:	e009883a 	mov	r4,fp
 8003878:	8006ac40 	call	8006ac4 <__pow5mult>
 800387c:	d9800317 	ldw	r6,12(sp)
 8003880:	102b883a 	mov	r21,r2
 8003884:	b981810e 	bge	r23,r6,8003e8c <_dtoa_r+0x10a4>
 8003888:	0027883a 	mov	r19,zero
 800388c:	a8800417 	ldw	r2,16(r21)
 8003890:	05c00804 	movi	r23,32
 8003894:	10800104 	addi	r2,r2,4
 8003898:	1085883a 	add	r2,r2,r2
 800389c:	1085883a 	add	r2,r2,r2
 80038a0:	a885883a 	add	r2,r21,r2
 80038a4:	11000017 	ldw	r4,0(r2)
 80038a8:	80067780 	call	8006778 <__hi0bits>
 80038ac:	b885c83a 	sub	r2,r23,r2
 80038b0:	1585883a 	add	r2,r2,r22
 80038b4:	108007cc 	andi	r2,r2,31
 80038b8:	1000b326 	beq	r2,zero,8003b88 <_dtoa_r+0xda0>
 80038bc:	00c00804 	movi	r3,32
 80038c0:	1887c83a 	sub	r3,r3,r2
 80038c4:	01000104 	movi	r4,4
 80038c8:	20c2cd0e 	bge	r4,r3,8004400 <_dtoa_r+0x1618>
 80038cc:	00c00704 	movi	r3,28
 80038d0:	1885c83a 	sub	r2,r3,r2
 80038d4:	d8c00817 	ldw	r3,32(sp)
 80038d8:	a0a9883a 	add	r20,r20,r2
 80038dc:	b0ad883a 	add	r22,r22,r2
 80038e0:	1887883a 	add	r3,r3,r2
 80038e4:	d8c00815 	stw	r3,32(sp)
 80038e8:	d9800817 	ldw	r6,32(sp)
 80038ec:	0180040e 	bge	zero,r6,8003900 <_dtoa_r+0xb18>
 80038f0:	800b883a 	mov	r5,r16
 80038f4:	e009883a 	mov	r4,fp
 80038f8:	8006c040 	call	8006c04 <__lshift>
 80038fc:	1021883a 	mov	r16,r2
 8003900:	0580050e 	bge	zero,r22,8003918 <_dtoa_r+0xb30>
 8003904:	a80b883a 	mov	r5,r21
 8003908:	b00d883a 	mov	r6,r22
 800390c:	e009883a 	mov	r4,fp
 8003910:	8006c040 	call	8006c04 <__lshift>
 8003914:	102b883a 	mov	r21,r2
 8003918:	d9c00e17 	ldw	r7,56(sp)
 800391c:	3801211e 	bne	r7,zero,8003da4 <_dtoa_r+0xfbc>
 8003920:	d9800617 	ldw	r6,24(sp)
 8003924:	0181380e 	bge	zero,r6,8003e08 <_dtoa_r+0x1020>
 8003928:	d8c00b17 	ldw	r3,44(sp)
 800392c:	1800ab1e 	bne	r3,zero,8003bdc <_dtoa_r+0xdf4>
 8003930:	dc800717 	ldw	r18,28(sp)
 8003934:	dcc00617 	ldw	r19,24(sp)
 8003938:	9029883a 	mov	r20,r18
 800393c:	00000206 	br	8003948 <_dtoa_r+0xb60>
 8003940:	80065540 	call	8006554 <__multadd>
 8003944:	1021883a 	mov	r16,r2
 8003948:	a80b883a 	mov	r5,r21
 800394c:	8009883a 	mov	r4,r16
 8003950:	8002be80 	call	8002be8 <quorem>
 8003954:	10800c04 	addi	r2,r2,48
 8003958:	90800005 	stb	r2,0(r18)
 800395c:	94800044 	addi	r18,r18,1
 8003960:	9507c83a 	sub	r3,r18,r20
 8003964:	000f883a 	mov	r7,zero
 8003968:	01800284 	movi	r6,10
 800396c:	800b883a 	mov	r5,r16
 8003970:	e009883a 	mov	r4,fp
 8003974:	1cfff216 	blt	r3,r19,8003940 <__alt_data_end+0xff003940>
 8003978:	1011883a 	mov	r8,r2
 800397c:	d8800617 	ldw	r2,24(sp)
 8003980:	0082370e 	bge	zero,r2,8004260 <_dtoa_r+0x1478>
 8003984:	d9000717 	ldw	r4,28(sp)
 8003988:	0025883a 	mov	r18,zero
 800398c:	20af883a 	add	r23,r4,r2
 8003990:	01800044 	movi	r6,1
 8003994:	800b883a 	mov	r5,r16
 8003998:	e009883a 	mov	r4,fp
 800399c:	da001715 	stw	r8,92(sp)
 80039a0:	8006c040 	call	8006c04 <__lshift>
 80039a4:	a80b883a 	mov	r5,r21
 80039a8:	1009883a 	mov	r4,r2
 80039ac:	d8800915 	stw	r2,36(sp)
 80039b0:	8006d4c0 	call	8006d4c <__mcmp>
 80039b4:	da001717 	ldw	r8,92(sp)
 80039b8:	0081800e 	bge	zero,r2,8003fbc <_dtoa_r+0x11d4>
 80039bc:	b93fffc3 	ldbu	r4,-1(r23)
 80039c0:	b8bfffc4 	addi	r2,r23,-1
 80039c4:	1007883a 	mov	r3,r2
 80039c8:	01800e44 	movi	r6,57
 80039cc:	d9c00717 	ldw	r7,28(sp)
 80039d0:	00000506 	br	80039e8 <_dtoa_r+0xc00>
 80039d4:	18ffffc4 	addi	r3,r3,-1
 80039d8:	11c12326 	beq	r2,r7,8003e68 <_dtoa_r+0x1080>
 80039dc:	19000003 	ldbu	r4,0(r3)
 80039e0:	102f883a 	mov	r23,r2
 80039e4:	10bfffc4 	addi	r2,r2,-1
 80039e8:	21403fcc 	andi	r5,r4,255
 80039ec:	2940201c 	xori	r5,r5,128
 80039f0:	297fe004 	addi	r5,r5,-128
 80039f4:	29bff726 	beq	r5,r6,80039d4 <__alt_data_end+0xff0039d4>
 80039f8:	21000044 	addi	r4,r4,1
 80039fc:	11000005 	stb	r4,0(r2)
 8003a00:	a80b883a 	mov	r5,r21
 8003a04:	e009883a 	mov	r4,fp
 8003a08:	800652c0 	call	800652c <_Bfree>
 8003a0c:	883ea026 	beq	r17,zero,8003490 <__alt_data_end+0xff003490>
 8003a10:	90000426 	beq	r18,zero,8003a24 <_dtoa_r+0xc3c>
 8003a14:	94400326 	beq	r18,r17,8003a24 <_dtoa_r+0xc3c>
 8003a18:	900b883a 	mov	r5,r18
 8003a1c:	e009883a 	mov	r4,fp
 8003a20:	800652c0 	call	800652c <_Bfree>
 8003a24:	880b883a 	mov	r5,r17
 8003a28:	e009883a 	mov	r4,fp
 8003a2c:	800652c0 	call	800652c <_Bfree>
 8003a30:	003e9706 	br	8003490 <__alt_data_end+0xff003490>
 8003a34:	01800044 	movi	r6,1
 8003a38:	d9800e15 	stw	r6,56(sp)
 8003a3c:	003d9606 	br	8003098 <__alt_data_end+0xff003098>
 8003a40:	d8800817 	ldw	r2,32(sp)
 8003a44:	d8c00517 	ldw	r3,20(sp)
 8003a48:	d8000d15 	stw	zero,52(sp)
 8003a4c:	10c5c83a 	sub	r2,r2,r3
 8003a50:	00c9c83a 	sub	r4,zero,r3
 8003a54:	d8800815 	stw	r2,32(sp)
 8003a58:	d9000a15 	stw	r4,40(sp)
 8003a5c:	003d9706 	br	80030bc <__alt_data_end+0xff0030bc>
 8003a60:	05adc83a 	sub	r22,zero,r22
 8003a64:	dd800815 	stw	r22,32(sp)
 8003a68:	002d883a 	mov	r22,zero
 8003a6c:	003d8e06 	br	80030a8 <__alt_data_end+0xff0030a8>
 8003a70:	d9000517 	ldw	r4,20(sp)
 8003a74:	800ce8c0 	call	800ce8c <__floatsidf>
 8003a78:	100d883a 	mov	r6,r2
 8003a7c:	180f883a 	mov	r7,r3
 8003a80:	a009883a 	mov	r4,r20
 8003a84:	880b883a 	mov	r5,r17
 8003a88:	800bba00 	call	800bba0 <__eqdf2>
 8003a8c:	103d7126 	beq	r2,zero,8003054 <__alt_data_end+0xff003054>
 8003a90:	d9c00517 	ldw	r7,20(sp)
 8003a94:	39ffffc4 	addi	r7,r7,-1
 8003a98:	d9c00515 	stw	r7,20(sp)
 8003a9c:	003d6d06 	br	8003054 <__alt_data_end+0xff003054>
 8003aa0:	dd400a17 	ldw	r21,40(sp)
 8003aa4:	dd000817 	ldw	r20,32(sp)
 8003aa8:	0023883a 	mov	r17,zero
 8003aac:	003f4806 	br	80037d0 <__alt_data_end+0xff0037d0>
 8003ab0:	10e3c83a 	sub	r17,r2,r3
 8003ab4:	9448983a 	sll	r4,r18,r17
 8003ab8:	003d3206 	br	8002f84 <__alt_data_end+0xff002f84>
 8003abc:	d8000e15 	stw	zero,56(sp)
 8003ac0:	003d7506 	br	8003098 <__alt_data_end+0xff003098>
 8003ac4:	b005883a 	mov	r2,r22
 8003ac8:	003f4506 	br	80037e0 <__alt_data_end+0xff0037e0>
 8003acc:	dc000915 	stw	r16,36(sp)
 8003ad0:	d9800a17 	ldw	r6,40(sp)
 8003ad4:	d9400917 	ldw	r5,36(sp)
 8003ad8:	e009883a 	mov	r4,fp
 8003adc:	8006ac40 	call	8006ac4 <__pow5mult>
 8003ae0:	1021883a 	mov	r16,r2
 8003ae4:	003f5a06 	br	8003850 <__alt_data_end+0xff003850>
 8003ae8:	01c00044 	movi	r7,1
 8003aec:	d9c00b15 	stw	r7,44(sp)
 8003af0:	d8802217 	ldw	r2,136(sp)
 8003af4:	0081280e 	bge	zero,r2,8003f98 <_dtoa_r+0x11b0>
 8003af8:	100d883a 	mov	r6,r2
 8003afc:	1021883a 	mov	r16,r2
 8003b00:	d8800c15 	stw	r2,48(sp)
 8003b04:	d8800615 	stw	r2,24(sp)
 8003b08:	003d8806 	br	800312c <__alt_data_end+0xff00312c>
 8003b0c:	d8800617 	ldw	r2,24(sp)
 8003b10:	00be9b16 	blt	zero,r2,8003580 <__alt_data_end+0xff003580>
 8003b14:	10010f1e 	bne	r2,zero,8003f54 <_dtoa_r+0x116c>
 8003b18:	880b883a 	mov	r5,r17
 8003b1c:	000d883a 	mov	r6,zero
 8003b20:	01d00534 	movhi	r7,16404
 8003b24:	8009883a 	mov	r4,r16
 8003b28:	800bdf80 	call	800bdf8 <__muldf3>
 8003b2c:	900d883a 	mov	r6,r18
 8003b30:	980f883a 	mov	r7,r19
 8003b34:	1009883a 	mov	r4,r2
 8003b38:	180b883a 	mov	r5,r3
 8003b3c:	800bc280 	call	800bc28 <__gedf2>
 8003b40:	002b883a 	mov	r21,zero
 8003b44:	0023883a 	mov	r17,zero
 8003b48:	1000bf16 	blt	r2,zero,8003e48 <_dtoa_r+0x1060>
 8003b4c:	d9802217 	ldw	r6,136(sp)
 8003b50:	ddc00717 	ldw	r23,28(sp)
 8003b54:	018c303a 	nor	r6,zero,r6
 8003b58:	d9800515 	stw	r6,20(sp)
 8003b5c:	a80b883a 	mov	r5,r21
 8003b60:	e009883a 	mov	r4,fp
 8003b64:	800652c0 	call	800652c <_Bfree>
 8003b68:	883e4926 	beq	r17,zero,8003490 <__alt_data_end+0xff003490>
 8003b6c:	003fad06 	br	8003a24 <__alt_data_end+0xff003a24>
 8003b70:	d9c01117 	ldw	r7,68(sp)
 8003b74:	3801bc26 	beq	r7,zero,8004268 <_dtoa_r+0x1480>
 8003b78:	10810cc4 	addi	r2,r2,1075
 8003b7c:	dd400a17 	ldw	r21,40(sp)
 8003b80:	dd000817 	ldw	r20,32(sp)
 8003b84:	003f0a06 	br	80037b0 <__alt_data_end+0xff0037b0>
 8003b88:	00800704 	movi	r2,28
 8003b8c:	d9000817 	ldw	r4,32(sp)
 8003b90:	a0a9883a 	add	r20,r20,r2
 8003b94:	b0ad883a 	add	r22,r22,r2
 8003b98:	2089883a 	add	r4,r4,r2
 8003b9c:	d9000815 	stw	r4,32(sp)
 8003ba0:	003f5106 	br	80038e8 <__alt_data_end+0xff0038e8>
 8003ba4:	d8c00317 	ldw	r3,12(sp)
 8003ba8:	b8c1fc0e 	bge	r23,r3,800439c <_dtoa_r+0x15b4>
 8003bac:	0027883a 	mov	r19,zero
 8003bb0:	b805883a 	mov	r2,r23
 8003bb4:	003f3e06 	br	80038b0 <__alt_data_end+0xff0038b0>
 8003bb8:	880b883a 	mov	r5,r17
 8003bbc:	e009883a 	mov	r4,fp
 8003bc0:	000f883a 	mov	r7,zero
 8003bc4:	01800284 	movi	r6,10
 8003bc8:	80065540 	call	8006554 <__multadd>
 8003bcc:	d9000c17 	ldw	r4,48(sp)
 8003bd0:	1023883a 	mov	r17,r2
 8003bd4:	0102040e 	bge	zero,r4,80043e8 <_dtoa_r+0x1600>
 8003bd8:	d9000615 	stw	r4,24(sp)
 8003bdc:	0500050e 	bge	zero,r20,8003bf4 <_dtoa_r+0xe0c>
 8003be0:	880b883a 	mov	r5,r17
 8003be4:	a00d883a 	mov	r6,r20
 8003be8:	e009883a 	mov	r4,fp
 8003bec:	8006c040 	call	8006c04 <__lshift>
 8003bf0:	1023883a 	mov	r17,r2
 8003bf4:	9801241e 	bne	r19,zero,8004088 <_dtoa_r+0x12a0>
 8003bf8:	8829883a 	mov	r20,r17
 8003bfc:	d9000617 	ldw	r4,24(sp)
 8003c00:	dcc00717 	ldw	r19,28(sp)
 8003c04:	9480004c 	andi	r18,r18,1
 8003c08:	20bfffc4 	addi	r2,r4,-1
 8003c0c:	9885883a 	add	r2,r19,r2
 8003c10:	d8800415 	stw	r2,16(sp)
 8003c14:	dc800615 	stw	r18,24(sp)
 8003c18:	a80b883a 	mov	r5,r21
 8003c1c:	8009883a 	mov	r4,r16
 8003c20:	8002be80 	call	8002be8 <quorem>
 8003c24:	880b883a 	mov	r5,r17
 8003c28:	8009883a 	mov	r4,r16
 8003c2c:	102f883a 	mov	r23,r2
 8003c30:	8006d4c0 	call	8006d4c <__mcmp>
 8003c34:	a80b883a 	mov	r5,r21
 8003c38:	a00d883a 	mov	r6,r20
 8003c3c:	e009883a 	mov	r4,fp
 8003c40:	102d883a 	mov	r22,r2
 8003c44:	8006dac0 	call	8006dac <__mdiff>
 8003c48:	1007883a 	mov	r3,r2
 8003c4c:	10800317 	ldw	r2,12(r2)
 8003c50:	bc800c04 	addi	r18,r23,48
 8003c54:	180b883a 	mov	r5,r3
 8003c58:	10004e1e 	bne	r2,zero,8003d94 <_dtoa_r+0xfac>
 8003c5c:	8009883a 	mov	r4,r16
 8003c60:	d8c01615 	stw	r3,88(sp)
 8003c64:	8006d4c0 	call	8006d4c <__mcmp>
 8003c68:	d8c01617 	ldw	r3,88(sp)
 8003c6c:	e009883a 	mov	r4,fp
 8003c70:	d8801615 	stw	r2,88(sp)
 8003c74:	180b883a 	mov	r5,r3
 8003c78:	800652c0 	call	800652c <_Bfree>
 8003c7c:	d8801617 	ldw	r2,88(sp)
 8003c80:	1000041e 	bne	r2,zero,8003c94 <_dtoa_r+0xeac>
 8003c84:	d9800317 	ldw	r6,12(sp)
 8003c88:	3000021e 	bne	r6,zero,8003c94 <_dtoa_r+0xeac>
 8003c8c:	d8c00617 	ldw	r3,24(sp)
 8003c90:	18003726 	beq	r3,zero,8003d70 <_dtoa_r+0xf88>
 8003c94:	b0002016 	blt	r22,zero,8003d18 <_dtoa_r+0xf30>
 8003c98:	b000041e 	bne	r22,zero,8003cac <_dtoa_r+0xec4>
 8003c9c:	d9000317 	ldw	r4,12(sp)
 8003ca0:	2000021e 	bne	r4,zero,8003cac <_dtoa_r+0xec4>
 8003ca4:	d8c00617 	ldw	r3,24(sp)
 8003ca8:	18001b26 	beq	r3,zero,8003d18 <_dtoa_r+0xf30>
 8003cac:	00810716 	blt	zero,r2,80040cc <_dtoa_r+0x12e4>
 8003cb0:	d8c00417 	ldw	r3,16(sp)
 8003cb4:	9d800044 	addi	r22,r19,1
 8003cb8:	9c800005 	stb	r18,0(r19)
 8003cbc:	b02f883a 	mov	r23,r22
 8003cc0:	98c10626 	beq	r19,r3,80040dc <_dtoa_r+0x12f4>
 8003cc4:	800b883a 	mov	r5,r16
 8003cc8:	000f883a 	mov	r7,zero
 8003ccc:	01800284 	movi	r6,10
 8003cd0:	e009883a 	mov	r4,fp
 8003cd4:	80065540 	call	8006554 <__multadd>
 8003cd8:	1021883a 	mov	r16,r2
 8003cdc:	000f883a 	mov	r7,zero
 8003ce0:	01800284 	movi	r6,10
 8003ce4:	880b883a 	mov	r5,r17
 8003ce8:	e009883a 	mov	r4,fp
 8003cec:	8d002526 	beq	r17,r20,8003d84 <_dtoa_r+0xf9c>
 8003cf0:	80065540 	call	8006554 <__multadd>
 8003cf4:	a00b883a 	mov	r5,r20
 8003cf8:	000f883a 	mov	r7,zero
 8003cfc:	01800284 	movi	r6,10
 8003d00:	e009883a 	mov	r4,fp
 8003d04:	1023883a 	mov	r17,r2
 8003d08:	80065540 	call	8006554 <__multadd>
 8003d0c:	1029883a 	mov	r20,r2
 8003d10:	b027883a 	mov	r19,r22
 8003d14:	003fc006 	br	8003c18 <__alt_data_end+0xff003c18>
 8003d18:	9011883a 	mov	r8,r18
 8003d1c:	00800e0e 	bge	zero,r2,8003d58 <_dtoa_r+0xf70>
 8003d20:	800b883a 	mov	r5,r16
 8003d24:	01800044 	movi	r6,1
 8003d28:	e009883a 	mov	r4,fp
 8003d2c:	da001715 	stw	r8,92(sp)
 8003d30:	8006c040 	call	8006c04 <__lshift>
 8003d34:	a80b883a 	mov	r5,r21
 8003d38:	1009883a 	mov	r4,r2
 8003d3c:	1021883a 	mov	r16,r2
 8003d40:	8006d4c0 	call	8006d4c <__mcmp>
 8003d44:	da001717 	ldw	r8,92(sp)
 8003d48:	0081960e 	bge	zero,r2,80043a4 <_dtoa_r+0x15bc>
 8003d4c:	00800e44 	movi	r2,57
 8003d50:	40817026 	beq	r8,r2,8004314 <_dtoa_r+0x152c>
 8003d54:	ba000c44 	addi	r8,r23,49
 8003d58:	8825883a 	mov	r18,r17
 8003d5c:	9dc00044 	addi	r23,r19,1
 8003d60:	9a000005 	stb	r8,0(r19)
 8003d64:	a023883a 	mov	r17,r20
 8003d68:	dc000915 	stw	r16,36(sp)
 8003d6c:	003f2406 	br	8003a00 <__alt_data_end+0xff003a00>
 8003d70:	00800e44 	movi	r2,57
 8003d74:	9011883a 	mov	r8,r18
 8003d78:	90816626 	beq	r18,r2,8004314 <_dtoa_r+0x152c>
 8003d7c:	05bff516 	blt	zero,r22,8003d54 <__alt_data_end+0xff003d54>
 8003d80:	003ff506 	br	8003d58 <__alt_data_end+0xff003d58>
 8003d84:	80065540 	call	8006554 <__multadd>
 8003d88:	1023883a 	mov	r17,r2
 8003d8c:	1029883a 	mov	r20,r2
 8003d90:	003fdf06 	br	8003d10 <__alt_data_end+0xff003d10>
 8003d94:	e009883a 	mov	r4,fp
 8003d98:	800652c0 	call	800652c <_Bfree>
 8003d9c:	00800044 	movi	r2,1
 8003da0:	003fbc06 	br	8003c94 <__alt_data_end+0xff003c94>
 8003da4:	a80b883a 	mov	r5,r21
 8003da8:	8009883a 	mov	r4,r16
 8003dac:	8006d4c0 	call	8006d4c <__mcmp>
 8003db0:	103edb0e 	bge	r2,zero,8003920 <__alt_data_end+0xff003920>
 8003db4:	800b883a 	mov	r5,r16
 8003db8:	000f883a 	mov	r7,zero
 8003dbc:	01800284 	movi	r6,10
 8003dc0:	e009883a 	mov	r4,fp
 8003dc4:	80065540 	call	8006554 <__multadd>
 8003dc8:	1021883a 	mov	r16,r2
 8003dcc:	d8800517 	ldw	r2,20(sp)
 8003dd0:	d8c00b17 	ldw	r3,44(sp)
 8003dd4:	10bfffc4 	addi	r2,r2,-1
 8003dd8:	d8800515 	stw	r2,20(sp)
 8003ddc:	183f761e 	bne	r3,zero,8003bb8 <__alt_data_end+0xff003bb8>
 8003de0:	d9000c17 	ldw	r4,48(sp)
 8003de4:	0101730e 	bge	zero,r4,80043b4 <_dtoa_r+0x15cc>
 8003de8:	d9000615 	stw	r4,24(sp)
 8003dec:	003ed006 	br	8003930 <__alt_data_end+0xff003930>
 8003df0:	00800084 	movi	r2,2
 8003df4:	3081861e 	bne	r6,r2,8004410 <_dtoa_r+0x1628>
 8003df8:	d8000b15 	stw	zero,44(sp)
 8003dfc:	003f3c06 	br	8003af0 <__alt_data_end+0xff003af0>
 8003e00:	dc000917 	ldw	r16,36(sp)
 8003e04:	003e9206 	br	8003850 <__alt_data_end+0xff003850>
 8003e08:	d9c00317 	ldw	r7,12(sp)
 8003e0c:	00800084 	movi	r2,2
 8003e10:	11fec50e 	bge	r2,r7,8003928 <__alt_data_end+0xff003928>
 8003e14:	d9000617 	ldw	r4,24(sp)
 8003e18:	20013c1e 	bne	r4,zero,800430c <_dtoa_r+0x1524>
 8003e1c:	a80b883a 	mov	r5,r21
 8003e20:	000f883a 	mov	r7,zero
 8003e24:	01800144 	movi	r6,5
 8003e28:	e009883a 	mov	r4,fp
 8003e2c:	80065540 	call	8006554 <__multadd>
 8003e30:	100b883a 	mov	r5,r2
 8003e34:	8009883a 	mov	r4,r16
 8003e38:	102b883a 	mov	r21,r2
 8003e3c:	8006d4c0 	call	8006d4c <__mcmp>
 8003e40:	dc000915 	stw	r16,36(sp)
 8003e44:	00bf410e 	bge	zero,r2,8003b4c <__alt_data_end+0xff003b4c>
 8003e48:	d9c00717 	ldw	r7,28(sp)
 8003e4c:	00800c44 	movi	r2,49
 8003e50:	38800005 	stb	r2,0(r7)
 8003e54:	d8800517 	ldw	r2,20(sp)
 8003e58:	3dc00044 	addi	r23,r7,1
 8003e5c:	10800044 	addi	r2,r2,1
 8003e60:	d8800515 	stw	r2,20(sp)
 8003e64:	003f3d06 	br	8003b5c <__alt_data_end+0xff003b5c>
 8003e68:	d9800517 	ldw	r6,20(sp)
 8003e6c:	d9c00717 	ldw	r7,28(sp)
 8003e70:	00800c44 	movi	r2,49
 8003e74:	31800044 	addi	r6,r6,1
 8003e78:	d9800515 	stw	r6,20(sp)
 8003e7c:	38800005 	stb	r2,0(r7)
 8003e80:	003edf06 	br	8003a00 <__alt_data_end+0xff003a00>
 8003e84:	d8000b15 	stw	zero,44(sp)
 8003e88:	003c9f06 	br	8003108 <__alt_data_end+0xff003108>
 8003e8c:	903e7e1e 	bne	r18,zero,8003888 <__alt_data_end+0xff003888>
 8003e90:	00800434 	movhi	r2,16
 8003e94:	10bfffc4 	addi	r2,r2,-1
 8003e98:	9884703a 	and	r2,r19,r2
 8003e9c:	1000ea1e 	bne	r2,zero,8004248 <_dtoa_r+0x1460>
 8003ea0:	9cdffc2c 	andhi	r19,r19,32752
 8003ea4:	9800e826 	beq	r19,zero,8004248 <_dtoa_r+0x1460>
 8003ea8:	d9c00817 	ldw	r7,32(sp)
 8003eac:	b5800044 	addi	r22,r22,1
 8003eb0:	04c00044 	movi	r19,1
 8003eb4:	39c00044 	addi	r7,r7,1
 8003eb8:	d9c00815 	stw	r7,32(sp)
 8003ebc:	d8800d17 	ldw	r2,52(sp)
 8003ec0:	103e721e 	bne	r2,zero,800388c <__alt_data_end+0xff00388c>
 8003ec4:	00800044 	movi	r2,1
 8003ec8:	003e7906 	br	80038b0 <__alt_data_end+0xff0038b0>
 8003ecc:	8009883a 	mov	r4,r16
 8003ed0:	800ce8c0 	call	800ce8c <__floatsidf>
 8003ed4:	d9800f17 	ldw	r6,60(sp)
 8003ed8:	d9c01017 	ldw	r7,64(sp)
 8003edc:	1009883a 	mov	r4,r2
 8003ee0:	180b883a 	mov	r5,r3
 8003ee4:	800bdf80 	call	800bdf8 <__muldf3>
 8003ee8:	000d883a 	mov	r6,zero
 8003eec:	01d00734 	movhi	r7,16412
 8003ef0:	1009883a 	mov	r4,r2
 8003ef4:	180b883a 	mov	r5,r3
 8003ef8:	800aa0c0 	call	800aa0c <__adddf3>
 8003efc:	047f3034 	movhi	r17,64704
 8003f00:	1021883a 	mov	r16,r2
 8003f04:	1c63883a 	add	r17,r3,r17
 8003f08:	d9000f17 	ldw	r4,60(sp)
 8003f0c:	d9401017 	ldw	r5,64(sp)
 8003f10:	000d883a 	mov	r6,zero
 8003f14:	01d00534 	movhi	r7,16404
 8003f18:	800c5100 	call	800c510 <__subdf3>
 8003f1c:	800d883a 	mov	r6,r16
 8003f20:	880f883a 	mov	r7,r17
 8003f24:	1009883a 	mov	r4,r2
 8003f28:	180b883a 	mov	r5,r3
 8003f2c:	102b883a 	mov	r21,r2
 8003f30:	1829883a 	mov	r20,r3
 8003f34:	800bc280 	call	800bc28 <__gedf2>
 8003f38:	00806c16 	blt	zero,r2,80040ec <_dtoa_r+0x1304>
 8003f3c:	89e0003c 	xorhi	r7,r17,32768
 8003f40:	800d883a 	mov	r6,r16
 8003f44:	a809883a 	mov	r4,r21
 8003f48:	a00b883a 	mov	r5,r20
 8003f4c:	800bd040 	call	800bd04 <__ledf2>
 8003f50:	103d7e0e 	bge	r2,zero,800354c <__alt_data_end+0xff00354c>
 8003f54:	002b883a 	mov	r21,zero
 8003f58:	0023883a 	mov	r17,zero
 8003f5c:	003efb06 	br	8003b4c <__alt_data_end+0xff003b4c>
 8003f60:	d8800717 	ldw	r2,28(sp)
 8003f64:	003bd006 	br	8002ea8 <__alt_data_end+0xff002ea8>
 8003f68:	d9000a17 	ldw	r4,40(sp)
 8003f6c:	d9800d17 	ldw	r6,52(sp)
 8003f70:	dd400a15 	stw	r21,40(sp)
 8003f74:	a905c83a 	sub	r2,r21,r4
 8003f78:	308d883a 	add	r6,r6,r2
 8003f7c:	d9800d15 	stw	r6,52(sp)
 8003f80:	002b883a 	mov	r21,zero
 8003f84:	003e0606 	br	80037a0 <__alt_data_end+0xff0037a0>
 8003f88:	9023883a 	mov	r17,r18
 8003f8c:	9829883a 	mov	r20,r19
 8003f90:	04000084 	movi	r16,2
 8003f94:	003c9206 	br	80031e0 <__alt_data_end+0xff0031e0>
 8003f98:	04000044 	movi	r16,1
 8003f9c:	dc000c15 	stw	r16,48(sp)
 8003fa0:	dc000615 	stw	r16,24(sp)
 8003fa4:	dc002215 	stw	r16,136(sp)
 8003fa8:	e0001115 	stw	zero,68(fp)
 8003fac:	000b883a 	mov	r5,zero
 8003fb0:	003c6906 	br	8003158 <__alt_data_end+0xff003158>
 8003fb4:	3021883a 	mov	r16,r6
 8003fb8:	003ffb06 	br	8003fa8 <__alt_data_end+0xff003fa8>
 8003fbc:	1000021e 	bne	r2,zero,8003fc8 <_dtoa_r+0x11e0>
 8003fc0:	4200004c 	andi	r8,r8,1
 8003fc4:	403e7d1e 	bne	r8,zero,80039bc <__alt_data_end+0xff0039bc>
 8003fc8:	01000c04 	movi	r4,48
 8003fcc:	00000106 	br	8003fd4 <_dtoa_r+0x11ec>
 8003fd0:	102f883a 	mov	r23,r2
 8003fd4:	b8bfffc4 	addi	r2,r23,-1
 8003fd8:	10c00007 	ldb	r3,0(r2)
 8003fdc:	193ffc26 	beq	r3,r4,8003fd0 <__alt_data_end+0xff003fd0>
 8003fe0:	003e8706 	br	8003a00 <__alt_data_end+0xff003a00>
 8003fe4:	d8800517 	ldw	r2,20(sp)
 8003fe8:	00a3c83a 	sub	r17,zero,r2
 8003fec:	8800a426 	beq	r17,zero,8004280 <_dtoa_r+0x1498>
 8003ff0:	888003cc 	andi	r2,r17,15
 8003ff4:	100490fa 	slli	r2,r2,3
 8003ff8:	00c20074 	movhi	r3,2049
 8003ffc:	18c6be04 	addi	r3,r3,6904
 8004000:	1885883a 	add	r2,r3,r2
 8004004:	11800017 	ldw	r6,0(r2)
 8004008:	11c00117 	ldw	r7,4(r2)
 800400c:	9009883a 	mov	r4,r18
 8004010:	980b883a 	mov	r5,r19
 8004014:	8823d13a 	srai	r17,r17,4
 8004018:	800bdf80 	call	800bdf8 <__muldf3>
 800401c:	d8800f15 	stw	r2,60(sp)
 8004020:	d8c01015 	stw	r3,64(sp)
 8004024:	8800e826 	beq	r17,zero,80043c8 <_dtoa_r+0x15e0>
 8004028:	05020074 	movhi	r20,2049
 800402c:	a506b404 	addi	r20,r20,6864
 8004030:	04000084 	movi	r16,2
 8004034:	8980004c 	andi	r6,r17,1
 8004038:	1009883a 	mov	r4,r2
 800403c:	8823d07a 	srai	r17,r17,1
 8004040:	180b883a 	mov	r5,r3
 8004044:	30000426 	beq	r6,zero,8004058 <_dtoa_r+0x1270>
 8004048:	a1800017 	ldw	r6,0(r20)
 800404c:	a1c00117 	ldw	r7,4(r20)
 8004050:	84000044 	addi	r16,r16,1
 8004054:	800bdf80 	call	800bdf8 <__muldf3>
 8004058:	a5000204 	addi	r20,r20,8
 800405c:	883ff51e 	bne	r17,zero,8004034 <__alt_data_end+0xff004034>
 8004060:	d8800f15 	stw	r2,60(sp)
 8004064:	d8c01015 	stw	r3,64(sp)
 8004068:	003c7606 	br	8003244 <__alt_data_end+0xff003244>
 800406c:	00c00c04 	movi	r3,48
 8004070:	10c00005 	stb	r3,0(r2)
 8004074:	d8c00517 	ldw	r3,20(sp)
 8004078:	bd3fffc3 	ldbu	r20,-1(r23)
 800407c:	18c00044 	addi	r3,r3,1
 8004080:	d8c00515 	stw	r3,20(sp)
 8004084:	003db906 	br	800376c <__alt_data_end+0xff00376c>
 8004088:	89400117 	ldw	r5,4(r17)
 800408c:	e009883a 	mov	r4,fp
 8004090:	80064840 	call	8006484 <_Balloc>
 8004094:	89800417 	ldw	r6,16(r17)
 8004098:	89400304 	addi	r5,r17,12
 800409c:	11000304 	addi	r4,r2,12
 80040a0:	31800084 	addi	r6,r6,2
 80040a4:	318d883a 	add	r6,r6,r6
 80040a8:	318d883a 	add	r6,r6,r6
 80040ac:	1027883a 	mov	r19,r2
 80040b0:	80060b80 	call	80060b8 <memcpy>
 80040b4:	01800044 	movi	r6,1
 80040b8:	980b883a 	mov	r5,r19
 80040bc:	e009883a 	mov	r4,fp
 80040c0:	8006c040 	call	8006c04 <__lshift>
 80040c4:	1029883a 	mov	r20,r2
 80040c8:	003ecc06 	br	8003bfc <__alt_data_end+0xff003bfc>
 80040cc:	00800e44 	movi	r2,57
 80040d0:	90809026 	beq	r18,r2,8004314 <_dtoa_r+0x152c>
 80040d4:	92000044 	addi	r8,r18,1
 80040d8:	003f1f06 	br	8003d58 <__alt_data_end+0xff003d58>
 80040dc:	9011883a 	mov	r8,r18
 80040e0:	8825883a 	mov	r18,r17
 80040e4:	a023883a 	mov	r17,r20
 80040e8:	003e2906 	br	8003990 <__alt_data_end+0xff003990>
 80040ec:	002b883a 	mov	r21,zero
 80040f0:	0023883a 	mov	r17,zero
 80040f4:	003f5406 	br	8003e48 <__alt_data_end+0xff003e48>
 80040f8:	61bfffc4 	addi	r6,r12,-1
 80040fc:	300490fa 	slli	r2,r6,3
 8004100:	00c20074 	movhi	r3,2049
 8004104:	18c6be04 	addi	r3,r3,6904
 8004108:	1885883a 	add	r2,r3,r2
 800410c:	11000017 	ldw	r4,0(r2)
 8004110:	11400117 	ldw	r5,4(r2)
 8004114:	d8800717 	ldw	r2,28(sp)
 8004118:	880f883a 	mov	r7,r17
 800411c:	d9801215 	stw	r6,72(sp)
 8004120:	800d883a 	mov	r6,r16
 8004124:	db001615 	stw	r12,88(sp)
 8004128:	15c00044 	addi	r23,r2,1
 800412c:	800bdf80 	call	800bdf8 <__muldf3>
 8004130:	d9401017 	ldw	r5,64(sp)
 8004134:	d9000f17 	ldw	r4,60(sp)
 8004138:	d8c01515 	stw	r3,84(sp)
 800413c:	d8801415 	stw	r2,80(sp)
 8004140:	800ce0c0 	call	800ce0c <__fixdfsi>
 8004144:	1009883a 	mov	r4,r2
 8004148:	1021883a 	mov	r16,r2
 800414c:	800ce8c0 	call	800ce8c <__floatsidf>
 8004150:	d9000f17 	ldw	r4,60(sp)
 8004154:	d9401017 	ldw	r5,64(sp)
 8004158:	100d883a 	mov	r6,r2
 800415c:	180f883a 	mov	r7,r3
 8004160:	800c5100 	call	800c510 <__subdf3>
 8004164:	1829883a 	mov	r20,r3
 8004168:	d8c00717 	ldw	r3,28(sp)
 800416c:	84000c04 	addi	r16,r16,48
 8004170:	1023883a 	mov	r17,r2
 8004174:	1c000005 	stb	r16,0(r3)
 8004178:	db001617 	ldw	r12,88(sp)
 800417c:	00800044 	movi	r2,1
 8004180:	60802226 	beq	r12,r2,800420c <_dtoa_r+0x1424>
 8004184:	d9c00717 	ldw	r7,28(sp)
 8004188:	8805883a 	mov	r2,r17
 800418c:	b82b883a 	mov	r21,r23
 8004190:	3b19883a 	add	r12,r7,r12
 8004194:	6023883a 	mov	r17,r12
 8004198:	a007883a 	mov	r3,r20
 800419c:	dc800f15 	stw	r18,60(sp)
 80041a0:	000d883a 	mov	r6,zero
 80041a4:	01d00934 	movhi	r7,16420
 80041a8:	1009883a 	mov	r4,r2
 80041ac:	180b883a 	mov	r5,r3
 80041b0:	800bdf80 	call	800bdf8 <__muldf3>
 80041b4:	180b883a 	mov	r5,r3
 80041b8:	1009883a 	mov	r4,r2
 80041bc:	1829883a 	mov	r20,r3
 80041c0:	1025883a 	mov	r18,r2
 80041c4:	800ce0c0 	call	800ce0c <__fixdfsi>
 80041c8:	1009883a 	mov	r4,r2
 80041cc:	1021883a 	mov	r16,r2
 80041d0:	800ce8c0 	call	800ce8c <__floatsidf>
 80041d4:	100d883a 	mov	r6,r2
 80041d8:	180f883a 	mov	r7,r3
 80041dc:	9009883a 	mov	r4,r18
 80041e0:	a00b883a 	mov	r5,r20
 80041e4:	84000c04 	addi	r16,r16,48
 80041e8:	800c5100 	call	800c510 <__subdf3>
 80041ec:	ad400044 	addi	r21,r21,1
 80041f0:	ac3fffc5 	stb	r16,-1(r21)
 80041f4:	ac7fea1e 	bne	r21,r17,80041a0 <__alt_data_end+0xff0041a0>
 80041f8:	1023883a 	mov	r17,r2
 80041fc:	d8801217 	ldw	r2,72(sp)
 8004200:	dc800f17 	ldw	r18,60(sp)
 8004204:	1829883a 	mov	r20,r3
 8004208:	b8af883a 	add	r23,r23,r2
 800420c:	d9001417 	ldw	r4,80(sp)
 8004210:	d9401517 	ldw	r5,84(sp)
 8004214:	000d883a 	mov	r6,zero
 8004218:	01cff834 	movhi	r7,16352
 800421c:	800aa0c0 	call	800aa0c <__adddf3>
 8004220:	880d883a 	mov	r6,r17
 8004224:	a00f883a 	mov	r7,r20
 8004228:	1009883a 	mov	r4,r2
 800422c:	180b883a 	mov	r5,r3
 8004230:	800bd040 	call	800bd04 <__ledf2>
 8004234:	10003e0e 	bge	r2,zero,8004330 <_dtoa_r+0x1548>
 8004238:	d9001317 	ldw	r4,76(sp)
 800423c:	bd3fffc3 	ldbu	r20,-1(r23)
 8004240:	d9000515 	stw	r4,20(sp)
 8004244:	003d3b06 	br	8003734 <__alt_data_end+0xff003734>
 8004248:	0027883a 	mov	r19,zero
 800424c:	003f1b06 	br	8003ebc <__alt_data_end+0xff003ebc>
 8004250:	d8800817 	ldw	r2,32(sp)
 8004254:	11e9c83a 	sub	r20,r2,r7
 8004258:	0005883a 	mov	r2,zero
 800425c:	003d5406 	br	80037b0 <__alt_data_end+0xff0037b0>
 8004260:	00800044 	movi	r2,1
 8004264:	003dc706 	br	8003984 <__alt_data_end+0xff003984>
 8004268:	d8c00217 	ldw	r3,8(sp)
 800426c:	00800d84 	movi	r2,54
 8004270:	dd400a17 	ldw	r21,40(sp)
 8004274:	10c5c83a 	sub	r2,r2,r3
 8004278:	dd000817 	ldw	r20,32(sp)
 800427c:	003d4c06 	br	80037b0 <__alt_data_end+0xff0037b0>
 8004280:	dc800f15 	stw	r18,60(sp)
 8004284:	dcc01015 	stw	r19,64(sp)
 8004288:	04000084 	movi	r16,2
 800428c:	003bed06 	br	8003244 <__alt_data_end+0xff003244>
 8004290:	d9000617 	ldw	r4,24(sp)
 8004294:	203f0d26 	beq	r4,zero,8003ecc <__alt_data_end+0xff003ecc>
 8004298:	d9800c17 	ldw	r6,48(sp)
 800429c:	01bcab0e 	bge	zero,r6,800354c <__alt_data_end+0xff00354c>
 80042a0:	d9401017 	ldw	r5,64(sp)
 80042a4:	d9000f17 	ldw	r4,60(sp)
 80042a8:	000d883a 	mov	r6,zero
 80042ac:	01d00934 	movhi	r7,16420
 80042b0:	800bdf80 	call	800bdf8 <__muldf3>
 80042b4:	81000044 	addi	r4,r16,1
 80042b8:	d8800f15 	stw	r2,60(sp)
 80042bc:	d8c01015 	stw	r3,64(sp)
 80042c0:	800ce8c0 	call	800ce8c <__floatsidf>
 80042c4:	d9800f17 	ldw	r6,60(sp)
 80042c8:	d9c01017 	ldw	r7,64(sp)
 80042cc:	1009883a 	mov	r4,r2
 80042d0:	180b883a 	mov	r5,r3
 80042d4:	800bdf80 	call	800bdf8 <__muldf3>
 80042d8:	01d00734 	movhi	r7,16412
 80042dc:	000d883a 	mov	r6,zero
 80042e0:	1009883a 	mov	r4,r2
 80042e4:	180b883a 	mov	r5,r3
 80042e8:	800aa0c0 	call	800aa0c <__adddf3>
 80042ec:	d9c00517 	ldw	r7,20(sp)
 80042f0:	047f3034 	movhi	r17,64704
 80042f4:	1021883a 	mov	r16,r2
 80042f8:	39ffffc4 	addi	r7,r7,-1
 80042fc:	d9c01315 	stw	r7,76(sp)
 8004300:	1c63883a 	add	r17,r3,r17
 8004304:	db000c17 	ldw	r12,48(sp)
 8004308:	003bea06 	br	80032b4 <__alt_data_end+0xff0032b4>
 800430c:	dc000915 	stw	r16,36(sp)
 8004310:	003e0e06 	br	8003b4c <__alt_data_end+0xff003b4c>
 8004314:	01000e44 	movi	r4,57
 8004318:	8825883a 	mov	r18,r17
 800431c:	9dc00044 	addi	r23,r19,1
 8004320:	99000005 	stb	r4,0(r19)
 8004324:	a023883a 	mov	r17,r20
 8004328:	dc000915 	stw	r16,36(sp)
 800432c:	003da406 	br	80039c0 <__alt_data_end+0xff0039c0>
 8004330:	d9801417 	ldw	r6,80(sp)
 8004334:	d9c01517 	ldw	r7,84(sp)
 8004338:	0009883a 	mov	r4,zero
 800433c:	014ff834 	movhi	r5,16352
 8004340:	800c5100 	call	800c510 <__subdf3>
 8004344:	880d883a 	mov	r6,r17
 8004348:	a00f883a 	mov	r7,r20
 800434c:	1009883a 	mov	r4,r2
 8004350:	180b883a 	mov	r5,r3
 8004354:	800bc280 	call	800bc28 <__gedf2>
 8004358:	00bc7c0e 	bge	zero,r2,800354c <__alt_data_end+0xff00354c>
 800435c:	01000c04 	movi	r4,48
 8004360:	00000106 	br	8004368 <_dtoa_r+0x1580>
 8004364:	102f883a 	mov	r23,r2
 8004368:	b8bfffc4 	addi	r2,r23,-1
 800436c:	10c00007 	ldb	r3,0(r2)
 8004370:	193ffc26 	beq	r3,r4,8004364 <__alt_data_end+0xff004364>
 8004374:	d9801317 	ldw	r6,76(sp)
 8004378:	d9800515 	stw	r6,20(sp)
 800437c:	003c4406 	br	8003490 <__alt_data_end+0xff003490>
 8004380:	d9801317 	ldw	r6,76(sp)
 8004384:	d9800515 	stw	r6,20(sp)
 8004388:	003cea06 	br	8003734 <__alt_data_end+0xff003734>
 800438c:	dd800f17 	ldw	r22,60(sp)
 8004390:	dcc01017 	ldw	r19,64(sp)
 8004394:	dc801217 	ldw	r18,72(sp)
 8004398:	003c6c06 	br	800354c <__alt_data_end+0xff00354c>
 800439c:	903e031e 	bne	r18,zero,8003bac <__alt_data_end+0xff003bac>
 80043a0:	003ebb06 	br	8003e90 <__alt_data_end+0xff003e90>
 80043a4:	103e6c1e 	bne	r2,zero,8003d58 <__alt_data_end+0xff003d58>
 80043a8:	4080004c 	andi	r2,r8,1
 80043ac:	103e6a26 	beq	r2,zero,8003d58 <__alt_data_end+0xff003d58>
 80043b0:	003e6606 	br	8003d4c <__alt_data_end+0xff003d4c>
 80043b4:	d8c00317 	ldw	r3,12(sp)
 80043b8:	00800084 	movi	r2,2
 80043bc:	10c02916 	blt	r2,r3,8004464 <_dtoa_r+0x167c>
 80043c0:	d9000c17 	ldw	r4,48(sp)
 80043c4:	003e8806 	br	8003de8 <__alt_data_end+0xff003de8>
 80043c8:	04000084 	movi	r16,2
 80043cc:	003b9d06 	br	8003244 <__alt_data_end+0xff003244>
 80043d0:	d9001317 	ldw	r4,76(sp)
 80043d4:	d9000515 	stw	r4,20(sp)
 80043d8:	003cd606 	br	8003734 <__alt_data_end+0xff003734>
 80043dc:	d8801317 	ldw	r2,76(sp)
 80043e0:	d8800515 	stw	r2,20(sp)
 80043e4:	003c2a06 	br	8003490 <__alt_data_end+0xff003490>
 80043e8:	d9800317 	ldw	r6,12(sp)
 80043ec:	00800084 	movi	r2,2
 80043f0:	11801516 	blt	r2,r6,8004448 <_dtoa_r+0x1660>
 80043f4:	d9c00c17 	ldw	r7,48(sp)
 80043f8:	d9c00615 	stw	r7,24(sp)
 80043fc:	003df706 	br	8003bdc <__alt_data_end+0xff003bdc>
 8004400:	193d3926 	beq	r3,r4,80038e8 <__alt_data_end+0xff0038e8>
 8004404:	00c00f04 	movi	r3,60
 8004408:	1885c83a 	sub	r2,r3,r2
 800440c:	003ddf06 	br	8003b8c <__alt_data_end+0xff003b8c>
 8004410:	e009883a 	mov	r4,fp
 8004414:	e0001115 	stw	zero,68(fp)
 8004418:	000b883a 	mov	r5,zero
 800441c:	80064840 	call	8006484 <_Balloc>
 8004420:	d8800715 	stw	r2,28(sp)
 8004424:	d8c00717 	ldw	r3,28(sp)
 8004428:	00bfffc4 	movi	r2,-1
 800442c:	01000044 	movi	r4,1
 8004430:	d8800c15 	stw	r2,48(sp)
 8004434:	e0c01015 	stw	r3,64(fp)
 8004438:	d9000b15 	stw	r4,44(sp)
 800443c:	d8800615 	stw	r2,24(sp)
 8004440:	d8002215 	stw	zero,136(sp)
 8004444:	003c4106 	br	800354c <__alt_data_end+0xff00354c>
 8004448:	d8c00c17 	ldw	r3,48(sp)
 800444c:	d8c00615 	stw	r3,24(sp)
 8004450:	003e7006 	br	8003e14 <__alt_data_end+0xff003e14>
 8004454:	04400044 	movi	r17,1
 8004458:	003b2006 	br	80030dc <__alt_data_end+0xff0030dc>
 800445c:	000b883a 	mov	r5,zero
 8004460:	003b3d06 	br	8003158 <__alt_data_end+0xff003158>
 8004464:	d8800c17 	ldw	r2,48(sp)
 8004468:	d8800615 	stw	r2,24(sp)
 800446c:	003e6906 	br	8003e14 <__alt_data_end+0xff003e14>

08004470 <__sflush_r>:
 8004470:	2880030b 	ldhu	r2,12(r5)
 8004474:	defffb04 	addi	sp,sp,-20
 8004478:	dcc00315 	stw	r19,12(sp)
 800447c:	dc400115 	stw	r17,4(sp)
 8004480:	dfc00415 	stw	ra,16(sp)
 8004484:	dc800215 	stw	r18,8(sp)
 8004488:	dc000015 	stw	r16,0(sp)
 800448c:	10c0020c 	andi	r3,r2,8
 8004490:	2823883a 	mov	r17,r5
 8004494:	2027883a 	mov	r19,r4
 8004498:	1800311e 	bne	r3,zero,8004560 <__sflush_r+0xf0>
 800449c:	28c00117 	ldw	r3,4(r5)
 80044a0:	10820014 	ori	r2,r2,2048
 80044a4:	2880030d 	sth	r2,12(r5)
 80044a8:	00c04b0e 	bge	zero,r3,80045d8 <__sflush_r+0x168>
 80044ac:	8a000a17 	ldw	r8,40(r17)
 80044b0:	40002326 	beq	r8,zero,8004540 <__sflush_r+0xd0>
 80044b4:	9c000017 	ldw	r16,0(r19)
 80044b8:	10c4000c 	andi	r3,r2,4096
 80044bc:	98000015 	stw	zero,0(r19)
 80044c0:	18004826 	beq	r3,zero,80045e4 <__sflush_r+0x174>
 80044c4:	89801417 	ldw	r6,80(r17)
 80044c8:	10c0010c 	andi	r3,r2,4
 80044cc:	18000626 	beq	r3,zero,80044e8 <__sflush_r+0x78>
 80044d0:	88c00117 	ldw	r3,4(r17)
 80044d4:	88800c17 	ldw	r2,48(r17)
 80044d8:	30cdc83a 	sub	r6,r6,r3
 80044dc:	10000226 	beq	r2,zero,80044e8 <__sflush_r+0x78>
 80044e0:	88800f17 	ldw	r2,60(r17)
 80044e4:	308dc83a 	sub	r6,r6,r2
 80044e8:	89400717 	ldw	r5,28(r17)
 80044ec:	000f883a 	mov	r7,zero
 80044f0:	9809883a 	mov	r4,r19
 80044f4:	403ee83a 	callr	r8
 80044f8:	00ffffc4 	movi	r3,-1
 80044fc:	10c04426 	beq	r2,r3,8004610 <__sflush_r+0x1a0>
 8004500:	88c0030b 	ldhu	r3,12(r17)
 8004504:	89000417 	ldw	r4,16(r17)
 8004508:	88000115 	stw	zero,4(r17)
 800450c:	197dffcc 	andi	r5,r3,63487
 8004510:	8940030d 	sth	r5,12(r17)
 8004514:	89000015 	stw	r4,0(r17)
 8004518:	18c4000c 	andi	r3,r3,4096
 800451c:	18002c1e 	bne	r3,zero,80045d0 <__sflush_r+0x160>
 8004520:	89400c17 	ldw	r5,48(r17)
 8004524:	9c000015 	stw	r16,0(r19)
 8004528:	28000526 	beq	r5,zero,8004540 <__sflush_r+0xd0>
 800452c:	88801004 	addi	r2,r17,64
 8004530:	28800226 	beq	r5,r2,800453c <__sflush_r+0xcc>
 8004534:	9809883a 	mov	r4,r19
 8004538:	8004bdc0 	call	8004bdc <_free_r>
 800453c:	88000c15 	stw	zero,48(r17)
 8004540:	0005883a 	mov	r2,zero
 8004544:	dfc00417 	ldw	ra,16(sp)
 8004548:	dcc00317 	ldw	r19,12(sp)
 800454c:	dc800217 	ldw	r18,8(sp)
 8004550:	dc400117 	ldw	r17,4(sp)
 8004554:	dc000017 	ldw	r16,0(sp)
 8004558:	dec00504 	addi	sp,sp,20
 800455c:	f800283a 	ret
 8004560:	2c800417 	ldw	r18,16(r5)
 8004564:	903ff626 	beq	r18,zero,8004540 <__alt_data_end+0xff004540>
 8004568:	2c000017 	ldw	r16,0(r5)
 800456c:	108000cc 	andi	r2,r2,3
 8004570:	2c800015 	stw	r18,0(r5)
 8004574:	84a1c83a 	sub	r16,r16,r18
 8004578:	1000131e 	bne	r2,zero,80045c8 <__sflush_r+0x158>
 800457c:	28800517 	ldw	r2,20(r5)
 8004580:	88800215 	stw	r2,8(r17)
 8004584:	04000316 	blt	zero,r16,8004594 <__sflush_r+0x124>
 8004588:	003fed06 	br	8004540 <__alt_data_end+0xff004540>
 800458c:	90a5883a 	add	r18,r18,r2
 8004590:	043feb0e 	bge	zero,r16,8004540 <__alt_data_end+0xff004540>
 8004594:	88800917 	ldw	r2,36(r17)
 8004598:	89400717 	ldw	r5,28(r17)
 800459c:	800f883a 	mov	r7,r16
 80045a0:	900d883a 	mov	r6,r18
 80045a4:	9809883a 	mov	r4,r19
 80045a8:	103ee83a 	callr	r2
 80045ac:	80a1c83a 	sub	r16,r16,r2
 80045b0:	00bff616 	blt	zero,r2,800458c <__alt_data_end+0xff00458c>
 80045b4:	88c0030b 	ldhu	r3,12(r17)
 80045b8:	00bfffc4 	movi	r2,-1
 80045bc:	18c01014 	ori	r3,r3,64
 80045c0:	88c0030d 	sth	r3,12(r17)
 80045c4:	003fdf06 	br	8004544 <__alt_data_end+0xff004544>
 80045c8:	0005883a 	mov	r2,zero
 80045cc:	003fec06 	br	8004580 <__alt_data_end+0xff004580>
 80045d0:	88801415 	stw	r2,80(r17)
 80045d4:	003fd206 	br	8004520 <__alt_data_end+0xff004520>
 80045d8:	28c00f17 	ldw	r3,60(r5)
 80045dc:	00ffb316 	blt	zero,r3,80044ac <__alt_data_end+0xff0044ac>
 80045e0:	003fd706 	br	8004540 <__alt_data_end+0xff004540>
 80045e4:	89400717 	ldw	r5,28(r17)
 80045e8:	000d883a 	mov	r6,zero
 80045ec:	01c00044 	movi	r7,1
 80045f0:	9809883a 	mov	r4,r19
 80045f4:	403ee83a 	callr	r8
 80045f8:	100d883a 	mov	r6,r2
 80045fc:	00bfffc4 	movi	r2,-1
 8004600:	30801426 	beq	r6,r2,8004654 <__sflush_r+0x1e4>
 8004604:	8880030b 	ldhu	r2,12(r17)
 8004608:	8a000a17 	ldw	r8,40(r17)
 800460c:	003fae06 	br	80044c8 <__alt_data_end+0xff0044c8>
 8004610:	98c00017 	ldw	r3,0(r19)
 8004614:	183fba26 	beq	r3,zero,8004500 <__alt_data_end+0xff004500>
 8004618:	01000744 	movi	r4,29
 800461c:	19000626 	beq	r3,r4,8004638 <__sflush_r+0x1c8>
 8004620:	01000584 	movi	r4,22
 8004624:	19000426 	beq	r3,r4,8004638 <__sflush_r+0x1c8>
 8004628:	88c0030b 	ldhu	r3,12(r17)
 800462c:	18c01014 	ori	r3,r3,64
 8004630:	88c0030d 	sth	r3,12(r17)
 8004634:	003fc306 	br	8004544 <__alt_data_end+0xff004544>
 8004638:	8880030b 	ldhu	r2,12(r17)
 800463c:	88c00417 	ldw	r3,16(r17)
 8004640:	88000115 	stw	zero,4(r17)
 8004644:	10bdffcc 	andi	r2,r2,63487
 8004648:	8880030d 	sth	r2,12(r17)
 800464c:	88c00015 	stw	r3,0(r17)
 8004650:	003fb306 	br	8004520 <__alt_data_end+0xff004520>
 8004654:	98800017 	ldw	r2,0(r19)
 8004658:	103fea26 	beq	r2,zero,8004604 <__alt_data_end+0xff004604>
 800465c:	00c00744 	movi	r3,29
 8004660:	10c00226 	beq	r2,r3,800466c <__sflush_r+0x1fc>
 8004664:	00c00584 	movi	r3,22
 8004668:	10c0031e 	bne	r2,r3,8004678 <__sflush_r+0x208>
 800466c:	9c000015 	stw	r16,0(r19)
 8004670:	0005883a 	mov	r2,zero
 8004674:	003fb306 	br	8004544 <__alt_data_end+0xff004544>
 8004678:	88c0030b 	ldhu	r3,12(r17)
 800467c:	3005883a 	mov	r2,r6
 8004680:	18c01014 	ori	r3,r3,64
 8004684:	88c0030d 	sth	r3,12(r17)
 8004688:	003fae06 	br	8004544 <__alt_data_end+0xff004544>

0800468c <_fflush_r>:
 800468c:	defffd04 	addi	sp,sp,-12
 8004690:	dc000115 	stw	r16,4(sp)
 8004694:	dfc00215 	stw	ra,8(sp)
 8004698:	2021883a 	mov	r16,r4
 800469c:	20000226 	beq	r4,zero,80046a8 <_fflush_r+0x1c>
 80046a0:	20800e17 	ldw	r2,56(r4)
 80046a4:	10000c26 	beq	r2,zero,80046d8 <_fflush_r+0x4c>
 80046a8:	2880030f 	ldh	r2,12(r5)
 80046ac:	1000051e 	bne	r2,zero,80046c4 <_fflush_r+0x38>
 80046b0:	0005883a 	mov	r2,zero
 80046b4:	dfc00217 	ldw	ra,8(sp)
 80046b8:	dc000117 	ldw	r16,4(sp)
 80046bc:	dec00304 	addi	sp,sp,12
 80046c0:	f800283a 	ret
 80046c4:	8009883a 	mov	r4,r16
 80046c8:	dfc00217 	ldw	ra,8(sp)
 80046cc:	dc000117 	ldw	r16,4(sp)
 80046d0:	dec00304 	addi	sp,sp,12
 80046d4:	80044701 	jmpi	8004470 <__sflush_r>
 80046d8:	d9400015 	stw	r5,0(sp)
 80046dc:	8004a680 	call	8004a68 <__sinit>
 80046e0:	d9400017 	ldw	r5,0(sp)
 80046e4:	003ff006 	br	80046a8 <__alt_data_end+0xff0046a8>

080046e8 <fflush>:
 80046e8:	20000526 	beq	r4,zero,8004700 <fflush+0x18>
 80046ec:	00820074 	movhi	r2,2049
 80046f0:	108e0a04 	addi	r2,r2,14376
 80046f4:	200b883a 	mov	r5,r4
 80046f8:	11000017 	ldw	r4,0(r2)
 80046fc:	800468c1 	jmpi	800468c <_fflush_r>
 8004700:	00820074 	movhi	r2,2049
 8004704:	108e0904 	addi	r2,r2,14372
 8004708:	11000017 	ldw	r4,0(r2)
 800470c:	01420034 	movhi	r5,2048
 8004710:	2951a304 	addi	r5,r5,18060
 8004714:	800546c1 	jmpi	800546c <_fwalk_reent>

08004718 <__fp_unlock>:
 8004718:	0005883a 	mov	r2,zero
 800471c:	f800283a 	ret

08004720 <_cleanup_r>:
 8004720:	01420074 	movhi	r5,2049
 8004724:	2965d104 	addi	r5,r5,-26812
 8004728:	800546c1 	jmpi	800546c <_fwalk_reent>

0800472c <__sinit.part.1>:
 800472c:	defff704 	addi	sp,sp,-36
 8004730:	00c20034 	movhi	r3,2048
 8004734:	dfc00815 	stw	ra,32(sp)
 8004738:	ddc00715 	stw	r23,28(sp)
 800473c:	dd800615 	stw	r22,24(sp)
 8004740:	dd400515 	stw	r21,20(sp)
 8004744:	dd000415 	stw	r20,16(sp)
 8004748:	dcc00315 	stw	r19,12(sp)
 800474c:	dc800215 	stw	r18,8(sp)
 8004750:	dc400115 	stw	r17,4(sp)
 8004754:	dc000015 	stw	r16,0(sp)
 8004758:	18d1c804 	addi	r3,r3,18208
 800475c:	24000117 	ldw	r16,4(r4)
 8004760:	20c00f15 	stw	r3,60(r4)
 8004764:	2080bb04 	addi	r2,r4,748
 8004768:	00c000c4 	movi	r3,3
 800476c:	20c0b915 	stw	r3,740(r4)
 8004770:	2080ba15 	stw	r2,744(r4)
 8004774:	2000b815 	stw	zero,736(r4)
 8004778:	05c00204 	movi	r23,8
 800477c:	00800104 	movi	r2,4
 8004780:	2025883a 	mov	r18,r4
 8004784:	b80d883a 	mov	r6,r23
 8004788:	81001704 	addi	r4,r16,92
 800478c:	000b883a 	mov	r5,zero
 8004790:	80000015 	stw	zero,0(r16)
 8004794:	80000115 	stw	zero,4(r16)
 8004798:	80000215 	stw	zero,8(r16)
 800479c:	8080030d 	sth	r2,12(r16)
 80047a0:	80001915 	stw	zero,100(r16)
 80047a4:	8000038d 	sth	zero,14(r16)
 80047a8:	80000415 	stw	zero,16(r16)
 80047ac:	80000515 	stw	zero,20(r16)
 80047b0:	80000615 	stw	zero,24(r16)
 80047b4:	800635c0 	call	800635c <memset>
 80047b8:	05820034 	movhi	r22,2048
 80047bc:	94400217 	ldw	r17,8(r18)
 80047c0:	05420034 	movhi	r21,2048
 80047c4:	05020034 	movhi	r20,2048
 80047c8:	04c20034 	movhi	r19,2048
 80047cc:	b59f0504 	addi	r22,r22,31764
 80047d0:	ad5f1c04 	addi	r21,r21,31856
 80047d4:	a51f3b04 	addi	r20,r20,31980
 80047d8:	9cdf5204 	addi	r19,r19,32072
 80047dc:	85800815 	stw	r22,32(r16)
 80047e0:	85400915 	stw	r21,36(r16)
 80047e4:	85000a15 	stw	r20,40(r16)
 80047e8:	84c00b15 	stw	r19,44(r16)
 80047ec:	84000715 	stw	r16,28(r16)
 80047f0:	00800284 	movi	r2,10
 80047f4:	8880030d 	sth	r2,12(r17)
 80047f8:	00800044 	movi	r2,1
 80047fc:	b80d883a 	mov	r6,r23
 8004800:	89001704 	addi	r4,r17,92
 8004804:	000b883a 	mov	r5,zero
 8004808:	88000015 	stw	zero,0(r17)
 800480c:	88000115 	stw	zero,4(r17)
 8004810:	88000215 	stw	zero,8(r17)
 8004814:	88001915 	stw	zero,100(r17)
 8004818:	8880038d 	sth	r2,14(r17)
 800481c:	88000415 	stw	zero,16(r17)
 8004820:	88000515 	stw	zero,20(r17)
 8004824:	88000615 	stw	zero,24(r17)
 8004828:	800635c0 	call	800635c <memset>
 800482c:	94000317 	ldw	r16,12(r18)
 8004830:	00800484 	movi	r2,18
 8004834:	8c400715 	stw	r17,28(r17)
 8004838:	8d800815 	stw	r22,32(r17)
 800483c:	8d400915 	stw	r21,36(r17)
 8004840:	8d000a15 	stw	r20,40(r17)
 8004844:	8cc00b15 	stw	r19,44(r17)
 8004848:	8080030d 	sth	r2,12(r16)
 800484c:	00800084 	movi	r2,2
 8004850:	80000015 	stw	zero,0(r16)
 8004854:	80000115 	stw	zero,4(r16)
 8004858:	80000215 	stw	zero,8(r16)
 800485c:	80001915 	stw	zero,100(r16)
 8004860:	8080038d 	sth	r2,14(r16)
 8004864:	80000415 	stw	zero,16(r16)
 8004868:	80000515 	stw	zero,20(r16)
 800486c:	80000615 	stw	zero,24(r16)
 8004870:	b80d883a 	mov	r6,r23
 8004874:	000b883a 	mov	r5,zero
 8004878:	81001704 	addi	r4,r16,92
 800487c:	800635c0 	call	800635c <memset>
 8004880:	00800044 	movi	r2,1
 8004884:	84000715 	stw	r16,28(r16)
 8004888:	85800815 	stw	r22,32(r16)
 800488c:	85400915 	stw	r21,36(r16)
 8004890:	85000a15 	stw	r20,40(r16)
 8004894:	84c00b15 	stw	r19,44(r16)
 8004898:	90800e15 	stw	r2,56(r18)
 800489c:	dfc00817 	ldw	ra,32(sp)
 80048a0:	ddc00717 	ldw	r23,28(sp)
 80048a4:	dd800617 	ldw	r22,24(sp)
 80048a8:	dd400517 	ldw	r21,20(sp)
 80048ac:	dd000417 	ldw	r20,16(sp)
 80048b0:	dcc00317 	ldw	r19,12(sp)
 80048b4:	dc800217 	ldw	r18,8(sp)
 80048b8:	dc400117 	ldw	r17,4(sp)
 80048bc:	dc000017 	ldw	r16,0(sp)
 80048c0:	dec00904 	addi	sp,sp,36
 80048c4:	f800283a 	ret

080048c8 <__fp_lock>:
 80048c8:	0005883a 	mov	r2,zero
 80048cc:	f800283a 	ret

080048d0 <__sfmoreglue>:
 80048d0:	defffc04 	addi	sp,sp,-16
 80048d4:	dc400115 	stw	r17,4(sp)
 80048d8:	2c7fffc4 	addi	r17,r5,-1
 80048dc:	8c401a24 	muli	r17,r17,104
 80048e0:	dc800215 	stw	r18,8(sp)
 80048e4:	2825883a 	mov	r18,r5
 80048e8:	89401d04 	addi	r5,r17,116
 80048ec:	dc000015 	stw	r16,0(sp)
 80048f0:	dfc00315 	stw	ra,12(sp)
 80048f4:	80057c80 	call	80057c8 <_malloc_r>
 80048f8:	1021883a 	mov	r16,r2
 80048fc:	10000726 	beq	r2,zero,800491c <__sfmoreglue+0x4c>
 8004900:	11000304 	addi	r4,r2,12
 8004904:	10000015 	stw	zero,0(r2)
 8004908:	14800115 	stw	r18,4(r2)
 800490c:	11000215 	stw	r4,8(r2)
 8004910:	89801a04 	addi	r6,r17,104
 8004914:	000b883a 	mov	r5,zero
 8004918:	800635c0 	call	800635c <memset>
 800491c:	8005883a 	mov	r2,r16
 8004920:	dfc00317 	ldw	ra,12(sp)
 8004924:	dc800217 	ldw	r18,8(sp)
 8004928:	dc400117 	ldw	r17,4(sp)
 800492c:	dc000017 	ldw	r16,0(sp)
 8004930:	dec00404 	addi	sp,sp,16
 8004934:	f800283a 	ret

08004938 <__sfp>:
 8004938:	defffb04 	addi	sp,sp,-20
 800493c:	dc000015 	stw	r16,0(sp)
 8004940:	04020074 	movhi	r16,2049
 8004944:	840e0904 	addi	r16,r16,14372
 8004948:	dcc00315 	stw	r19,12(sp)
 800494c:	2027883a 	mov	r19,r4
 8004950:	81000017 	ldw	r4,0(r16)
 8004954:	dfc00415 	stw	ra,16(sp)
 8004958:	dc800215 	stw	r18,8(sp)
 800495c:	20800e17 	ldw	r2,56(r4)
 8004960:	dc400115 	stw	r17,4(sp)
 8004964:	1000021e 	bne	r2,zero,8004970 <__sfp+0x38>
 8004968:	800472c0 	call	800472c <__sinit.part.1>
 800496c:	81000017 	ldw	r4,0(r16)
 8004970:	2480b804 	addi	r18,r4,736
 8004974:	047fffc4 	movi	r17,-1
 8004978:	91000117 	ldw	r4,4(r18)
 800497c:	94000217 	ldw	r16,8(r18)
 8004980:	213fffc4 	addi	r4,r4,-1
 8004984:	20000a16 	blt	r4,zero,80049b0 <__sfp+0x78>
 8004988:	8080030f 	ldh	r2,12(r16)
 800498c:	10000c26 	beq	r2,zero,80049c0 <__sfp+0x88>
 8004990:	80c01d04 	addi	r3,r16,116
 8004994:	00000206 	br	80049a0 <__sfp+0x68>
 8004998:	18bfe60f 	ldh	r2,-104(r3)
 800499c:	10000826 	beq	r2,zero,80049c0 <__sfp+0x88>
 80049a0:	213fffc4 	addi	r4,r4,-1
 80049a4:	1c3ffd04 	addi	r16,r3,-12
 80049a8:	18c01a04 	addi	r3,r3,104
 80049ac:	247ffa1e 	bne	r4,r17,8004998 <__alt_data_end+0xff004998>
 80049b0:	90800017 	ldw	r2,0(r18)
 80049b4:	10001d26 	beq	r2,zero,8004a2c <__sfp+0xf4>
 80049b8:	1025883a 	mov	r18,r2
 80049bc:	003fee06 	br	8004978 <__alt_data_end+0xff004978>
 80049c0:	00bfffc4 	movi	r2,-1
 80049c4:	8080038d 	sth	r2,14(r16)
 80049c8:	00800044 	movi	r2,1
 80049cc:	8080030d 	sth	r2,12(r16)
 80049d0:	80001915 	stw	zero,100(r16)
 80049d4:	80000015 	stw	zero,0(r16)
 80049d8:	80000215 	stw	zero,8(r16)
 80049dc:	80000115 	stw	zero,4(r16)
 80049e0:	80000415 	stw	zero,16(r16)
 80049e4:	80000515 	stw	zero,20(r16)
 80049e8:	80000615 	stw	zero,24(r16)
 80049ec:	01800204 	movi	r6,8
 80049f0:	000b883a 	mov	r5,zero
 80049f4:	81001704 	addi	r4,r16,92
 80049f8:	800635c0 	call	800635c <memset>
 80049fc:	8005883a 	mov	r2,r16
 8004a00:	80000c15 	stw	zero,48(r16)
 8004a04:	80000d15 	stw	zero,52(r16)
 8004a08:	80001115 	stw	zero,68(r16)
 8004a0c:	80001215 	stw	zero,72(r16)
 8004a10:	dfc00417 	ldw	ra,16(sp)
 8004a14:	dcc00317 	ldw	r19,12(sp)
 8004a18:	dc800217 	ldw	r18,8(sp)
 8004a1c:	dc400117 	ldw	r17,4(sp)
 8004a20:	dc000017 	ldw	r16,0(sp)
 8004a24:	dec00504 	addi	sp,sp,20
 8004a28:	f800283a 	ret
 8004a2c:	01400104 	movi	r5,4
 8004a30:	9809883a 	mov	r4,r19
 8004a34:	80048d00 	call	80048d0 <__sfmoreglue>
 8004a38:	90800015 	stw	r2,0(r18)
 8004a3c:	103fde1e 	bne	r2,zero,80049b8 <__alt_data_end+0xff0049b8>
 8004a40:	00800304 	movi	r2,12
 8004a44:	98800015 	stw	r2,0(r19)
 8004a48:	0005883a 	mov	r2,zero
 8004a4c:	003ff006 	br	8004a10 <__alt_data_end+0xff004a10>

08004a50 <_cleanup>:
 8004a50:	00820074 	movhi	r2,2049
 8004a54:	108e0904 	addi	r2,r2,14372
 8004a58:	11000017 	ldw	r4,0(r2)
 8004a5c:	01420074 	movhi	r5,2049
 8004a60:	2965d104 	addi	r5,r5,-26812
 8004a64:	800546c1 	jmpi	800546c <_fwalk_reent>

08004a68 <__sinit>:
 8004a68:	20800e17 	ldw	r2,56(r4)
 8004a6c:	10000126 	beq	r2,zero,8004a74 <__sinit+0xc>
 8004a70:	f800283a 	ret
 8004a74:	800472c1 	jmpi	800472c <__sinit.part.1>

08004a78 <__sfp_lock_acquire>:
 8004a78:	f800283a 	ret

08004a7c <__sfp_lock_release>:
 8004a7c:	f800283a 	ret

08004a80 <__sinit_lock_acquire>:
 8004a80:	f800283a 	ret

08004a84 <__sinit_lock_release>:
 8004a84:	f800283a 	ret

08004a88 <__fp_lock_all>:
 8004a88:	00820074 	movhi	r2,2049
 8004a8c:	108e0a04 	addi	r2,r2,14376
 8004a90:	11000017 	ldw	r4,0(r2)
 8004a94:	01420034 	movhi	r5,2048
 8004a98:	29523204 	addi	r5,r5,18632
 8004a9c:	80053a81 	jmpi	80053a8 <_fwalk>

08004aa0 <__fp_unlock_all>:
 8004aa0:	00820074 	movhi	r2,2049
 8004aa4:	108e0a04 	addi	r2,r2,14376
 8004aa8:	11000017 	ldw	r4,0(r2)
 8004aac:	01420034 	movhi	r5,2048
 8004ab0:	2951c604 	addi	r5,r5,18200
 8004ab4:	80053a81 	jmpi	80053a8 <_fwalk>

08004ab8 <_malloc_trim_r>:
 8004ab8:	defffb04 	addi	sp,sp,-20
 8004abc:	dcc00315 	stw	r19,12(sp)
 8004ac0:	04c20074 	movhi	r19,2049
 8004ac4:	dc800215 	stw	r18,8(sp)
 8004ac8:	dc400115 	stw	r17,4(sp)
 8004acc:	dc000015 	stw	r16,0(sp)
 8004ad0:	dfc00415 	stw	ra,16(sp)
 8004ad4:	2821883a 	mov	r16,r5
 8004ad8:	9cc87704 	addi	r19,r19,8668
 8004adc:	2025883a 	mov	r18,r4
 8004ae0:	800d7700 	call	800d770 <__malloc_lock>
 8004ae4:	98800217 	ldw	r2,8(r19)
 8004ae8:	14400117 	ldw	r17,4(r2)
 8004aec:	00bfff04 	movi	r2,-4
 8004af0:	88a2703a 	and	r17,r17,r2
 8004af4:	8c21c83a 	sub	r16,r17,r16
 8004af8:	8403fbc4 	addi	r16,r16,4079
 8004afc:	8020d33a 	srli	r16,r16,12
 8004b00:	0083ffc4 	movi	r2,4095
 8004b04:	843fffc4 	addi	r16,r16,-1
 8004b08:	8020933a 	slli	r16,r16,12
 8004b0c:	1400060e 	bge	r2,r16,8004b28 <_malloc_trim_r+0x70>
 8004b10:	000b883a 	mov	r5,zero
 8004b14:	9009883a 	mov	r4,r18
 8004b18:	8007bc00 	call	8007bc0 <_sbrk_r>
 8004b1c:	98c00217 	ldw	r3,8(r19)
 8004b20:	1c47883a 	add	r3,r3,r17
 8004b24:	10c00a26 	beq	r2,r3,8004b50 <_malloc_trim_r+0x98>
 8004b28:	9009883a 	mov	r4,r18
 8004b2c:	800d7940 	call	800d794 <__malloc_unlock>
 8004b30:	0005883a 	mov	r2,zero
 8004b34:	dfc00417 	ldw	ra,16(sp)
 8004b38:	dcc00317 	ldw	r19,12(sp)
 8004b3c:	dc800217 	ldw	r18,8(sp)
 8004b40:	dc400117 	ldw	r17,4(sp)
 8004b44:	dc000017 	ldw	r16,0(sp)
 8004b48:	dec00504 	addi	sp,sp,20
 8004b4c:	f800283a 	ret
 8004b50:	040bc83a 	sub	r5,zero,r16
 8004b54:	9009883a 	mov	r4,r18
 8004b58:	8007bc00 	call	8007bc0 <_sbrk_r>
 8004b5c:	00ffffc4 	movi	r3,-1
 8004b60:	10c00d26 	beq	r2,r3,8004b98 <_malloc_trim_r+0xe0>
 8004b64:	00c20074 	movhi	r3,2049
 8004b68:	18d4f504 	addi	r3,r3,21460
 8004b6c:	18800017 	ldw	r2,0(r3)
 8004b70:	99000217 	ldw	r4,8(r19)
 8004b74:	8c23c83a 	sub	r17,r17,r16
 8004b78:	8c400054 	ori	r17,r17,1
 8004b7c:	1421c83a 	sub	r16,r2,r16
 8004b80:	24400115 	stw	r17,4(r4)
 8004b84:	9009883a 	mov	r4,r18
 8004b88:	1c000015 	stw	r16,0(r3)
 8004b8c:	800d7940 	call	800d794 <__malloc_unlock>
 8004b90:	00800044 	movi	r2,1
 8004b94:	003fe706 	br	8004b34 <__alt_data_end+0xff004b34>
 8004b98:	000b883a 	mov	r5,zero
 8004b9c:	9009883a 	mov	r4,r18
 8004ba0:	8007bc00 	call	8007bc0 <_sbrk_r>
 8004ba4:	99000217 	ldw	r4,8(r19)
 8004ba8:	014003c4 	movi	r5,15
 8004bac:	1107c83a 	sub	r3,r2,r4
 8004bb0:	28ffdd0e 	bge	r5,r3,8004b28 <__alt_data_end+0xff004b28>
 8004bb4:	01420074 	movhi	r5,2049
 8004bb8:	294e0c04 	addi	r5,r5,14384
 8004bbc:	29400017 	ldw	r5,0(r5)
 8004bc0:	18c00054 	ori	r3,r3,1
 8004bc4:	20c00115 	stw	r3,4(r4)
 8004bc8:	00c20074 	movhi	r3,2049
 8004bcc:	1145c83a 	sub	r2,r2,r5
 8004bd0:	18d4f504 	addi	r3,r3,21460
 8004bd4:	18800015 	stw	r2,0(r3)
 8004bd8:	003fd306 	br	8004b28 <__alt_data_end+0xff004b28>

08004bdc <_free_r>:
 8004bdc:	28004126 	beq	r5,zero,8004ce4 <_free_r+0x108>
 8004be0:	defffd04 	addi	sp,sp,-12
 8004be4:	dc400115 	stw	r17,4(sp)
 8004be8:	dc000015 	stw	r16,0(sp)
 8004bec:	2023883a 	mov	r17,r4
 8004bf0:	2821883a 	mov	r16,r5
 8004bf4:	dfc00215 	stw	ra,8(sp)
 8004bf8:	800d7700 	call	800d770 <__malloc_lock>
 8004bfc:	81ffff17 	ldw	r7,-4(r16)
 8004c00:	00bfff84 	movi	r2,-2
 8004c04:	01020074 	movhi	r4,2049
 8004c08:	81bffe04 	addi	r6,r16,-8
 8004c0c:	3884703a 	and	r2,r7,r2
 8004c10:	21087704 	addi	r4,r4,8668
 8004c14:	308b883a 	add	r5,r6,r2
 8004c18:	2a400117 	ldw	r9,4(r5)
 8004c1c:	22000217 	ldw	r8,8(r4)
 8004c20:	00ffff04 	movi	r3,-4
 8004c24:	48c6703a 	and	r3,r9,r3
 8004c28:	2a005726 	beq	r5,r8,8004d88 <_free_r+0x1ac>
 8004c2c:	28c00115 	stw	r3,4(r5)
 8004c30:	39c0004c 	andi	r7,r7,1
 8004c34:	3800091e 	bne	r7,zero,8004c5c <_free_r+0x80>
 8004c38:	823ffe17 	ldw	r8,-8(r16)
 8004c3c:	22400204 	addi	r9,r4,8
 8004c40:	320dc83a 	sub	r6,r6,r8
 8004c44:	31c00217 	ldw	r7,8(r6)
 8004c48:	1205883a 	add	r2,r2,r8
 8004c4c:	3a406526 	beq	r7,r9,8004de4 <_free_r+0x208>
 8004c50:	32000317 	ldw	r8,12(r6)
 8004c54:	3a000315 	stw	r8,12(r7)
 8004c58:	41c00215 	stw	r7,8(r8)
 8004c5c:	28cf883a 	add	r7,r5,r3
 8004c60:	39c00117 	ldw	r7,4(r7)
 8004c64:	39c0004c 	andi	r7,r7,1
 8004c68:	38003a26 	beq	r7,zero,8004d54 <_free_r+0x178>
 8004c6c:	10c00054 	ori	r3,r2,1
 8004c70:	30c00115 	stw	r3,4(r6)
 8004c74:	3087883a 	add	r3,r6,r2
 8004c78:	18800015 	stw	r2,0(r3)
 8004c7c:	00c07fc4 	movi	r3,511
 8004c80:	18801936 	bltu	r3,r2,8004ce8 <_free_r+0x10c>
 8004c84:	1004d0fa 	srli	r2,r2,3
 8004c88:	01c00044 	movi	r7,1
 8004c8c:	21400117 	ldw	r5,4(r4)
 8004c90:	10c00044 	addi	r3,r2,1
 8004c94:	18c7883a 	add	r3,r3,r3
 8004c98:	1005d0ba 	srai	r2,r2,2
 8004c9c:	18c7883a 	add	r3,r3,r3
 8004ca0:	18c7883a 	add	r3,r3,r3
 8004ca4:	1907883a 	add	r3,r3,r4
 8004ca8:	3884983a 	sll	r2,r7,r2
 8004cac:	19c00017 	ldw	r7,0(r3)
 8004cb0:	1a3ffe04 	addi	r8,r3,-8
 8004cb4:	1144b03a 	or	r2,r2,r5
 8004cb8:	32000315 	stw	r8,12(r6)
 8004cbc:	31c00215 	stw	r7,8(r6)
 8004cc0:	20800115 	stw	r2,4(r4)
 8004cc4:	19800015 	stw	r6,0(r3)
 8004cc8:	39800315 	stw	r6,12(r7)
 8004ccc:	8809883a 	mov	r4,r17
 8004cd0:	dfc00217 	ldw	ra,8(sp)
 8004cd4:	dc400117 	ldw	r17,4(sp)
 8004cd8:	dc000017 	ldw	r16,0(sp)
 8004cdc:	dec00304 	addi	sp,sp,12
 8004ce0:	800d7941 	jmpi	800d794 <__malloc_unlock>
 8004ce4:	f800283a 	ret
 8004ce8:	100ad27a 	srli	r5,r2,9
 8004cec:	00c00104 	movi	r3,4
 8004cf0:	19404a36 	bltu	r3,r5,8004e1c <_free_r+0x240>
 8004cf4:	100ad1ba 	srli	r5,r2,6
 8004cf8:	28c00e44 	addi	r3,r5,57
 8004cfc:	18c7883a 	add	r3,r3,r3
 8004d00:	29400e04 	addi	r5,r5,56
 8004d04:	18c7883a 	add	r3,r3,r3
 8004d08:	18c7883a 	add	r3,r3,r3
 8004d0c:	1909883a 	add	r4,r3,r4
 8004d10:	20c00017 	ldw	r3,0(r4)
 8004d14:	01c20074 	movhi	r7,2049
 8004d18:	213ffe04 	addi	r4,r4,-8
 8004d1c:	39c87704 	addi	r7,r7,8668
 8004d20:	20c04426 	beq	r4,r3,8004e34 <_free_r+0x258>
 8004d24:	01ffff04 	movi	r7,-4
 8004d28:	19400117 	ldw	r5,4(r3)
 8004d2c:	29ca703a 	and	r5,r5,r7
 8004d30:	1140022e 	bgeu	r2,r5,8004d3c <_free_r+0x160>
 8004d34:	18c00217 	ldw	r3,8(r3)
 8004d38:	20fffb1e 	bne	r4,r3,8004d28 <__alt_data_end+0xff004d28>
 8004d3c:	19000317 	ldw	r4,12(r3)
 8004d40:	31000315 	stw	r4,12(r6)
 8004d44:	30c00215 	stw	r3,8(r6)
 8004d48:	21800215 	stw	r6,8(r4)
 8004d4c:	19800315 	stw	r6,12(r3)
 8004d50:	003fde06 	br	8004ccc <__alt_data_end+0xff004ccc>
 8004d54:	29c00217 	ldw	r7,8(r5)
 8004d58:	10c5883a 	add	r2,r2,r3
 8004d5c:	00c20074 	movhi	r3,2049
 8004d60:	18c87904 	addi	r3,r3,8676
 8004d64:	38c03b26 	beq	r7,r3,8004e54 <_free_r+0x278>
 8004d68:	2a000317 	ldw	r8,12(r5)
 8004d6c:	11400054 	ori	r5,r2,1
 8004d70:	3087883a 	add	r3,r6,r2
 8004d74:	3a000315 	stw	r8,12(r7)
 8004d78:	41c00215 	stw	r7,8(r8)
 8004d7c:	31400115 	stw	r5,4(r6)
 8004d80:	18800015 	stw	r2,0(r3)
 8004d84:	003fbd06 	br	8004c7c <__alt_data_end+0xff004c7c>
 8004d88:	39c0004c 	andi	r7,r7,1
 8004d8c:	10c5883a 	add	r2,r2,r3
 8004d90:	3800071e 	bne	r7,zero,8004db0 <_free_r+0x1d4>
 8004d94:	81fffe17 	ldw	r7,-8(r16)
 8004d98:	31cdc83a 	sub	r6,r6,r7
 8004d9c:	30c00317 	ldw	r3,12(r6)
 8004da0:	31400217 	ldw	r5,8(r6)
 8004da4:	11c5883a 	add	r2,r2,r7
 8004da8:	28c00315 	stw	r3,12(r5)
 8004dac:	19400215 	stw	r5,8(r3)
 8004db0:	10c00054 	ori	r3,r2,1
 8004db4:	30c00115 	stw	r3,4(r6)
 8004db8:	00c20074 	movhi	r3,2049
 8004dbc:	18ce0d04 	addi	r3,r3,14388
 8004dc0:	18c00017 	ldw	r3,0(r3)
 8004dc4:	21800215 	stw	r6,8(r4)
 8004dc8:	10ffc036 	bltu	r2,r3,8004ccc <__alt_data_end+0xff004ccc>
 8004dcc:	00820074 	movhi	r2,2049
 8004dd0:	1094ec04 	addi	r2,r2,21424
 8004dd4:	11400017 	ldw	r5,0(r2)
 8004dd8:	8809883a 	mov	r4,r17
 8004ddc:	8004ab80 	call	8004ab8 <_malloc_trim_r>
 8004de0:	003fba06 	br	8004ccc <__alt_data_end+0xff004ccc>
 8004de4:	28c9883a 	add	r4,r5,r3
 8004de8:	21000117 	ldw	r4,4(r4)
 8004dec:	2100004c 	andi	r4,r4,1
 8004df0:	2000391e 	bne	r4,zero,8004ed8 <_free_r+0x2fc>
 8004df4:	29c00217 	ldw	r7,8(r5)
 8004df8:	29000317 	ldw	r4,12(r5)
 8004dfc:	1885883a 	add	r2,r3,r2
 8004e00:	10c00054 	ori	r3,r2,1
 8004e04:	39000315 	stw	r4,12(r7)
 8004e08:	21c00215 	stw	r7,8(r4)
 8004e0c:	30c00115 	stw	r3,4(r6)
 8004e10:	308d883a 	add	r6,r6,r2
 8004e14:	30800015 	stw	r2,0(r6)
 8004e18:	003fac06 	br	8004ccc <__alt_data_end+0xff004ccc>
 8004e1c:	00c00504 	movi	r3,20
 8004e20:	19401536 	bltu	r3,r5,8004e78 <_free_r+0x29c>
 8004e24:	28c01704 	addi	r3,r5,92
 8004e28:	18c7883a 	add	r3,r3,r3
 8004e2c:	294016c4 	addi	r5,r5,91
 8004e30:	003fb406 	br	8004d04 <__alt_data_end+0xff004d04>
 8004e34:	280bd0ba 	srai	r5,r5,2
 8004e38:	00c00044 	movi	r3,1
 8004e3c:	38800117 	ldw	r2,4(r7)
 8004e40:	194a983a 	sll	r5,r3,r5
 8004e44:	2007883a 	mov	r3,r4
 8004e48:	2884b03a 	or	r2,r5,r2
 8004e4c:	38800115 	stw	r2,4(r7)
 8004e50:	003fbb06 	br	8004d40 <__alt_data_end+0xff004d40>
 8004e54:	21800515 	stw	r6,20(r4)
 8004e58:	21800415 	stw	r6,16(r4)
 8004e5c:	10c00054 	ori	r3,r2,1
 8004e60:	31c00315 	stw	r7,12(r6)
 8004e64:	31c00215 	stw	r7,8(r6)
 8004e68:	30c00115 	stw	r3,4(r6)
 8004e6c:	308d883a 	add	r6,r6,r2
 8004e70:	30800015 	stw	r2,0(r6)
 8004e74:	003f9506 	br	8004ccc <__alt_data_end+0xff004ccc>
 8004e78:	00c01504 	movi	r3,84
 8004e7c:	19400536 	bltu	r3,r5,8004e94 <_free_r+0x2b8>
 8004e80:	100ad33a 	srli	r5,r2,12
 8004e84:	28c01bc4 	addi	r3,r5,111
 8004e88:	18c7883a 	add	r3,r3,r3
 8004e8c:	29401b84 	addi	r5,r5,110
 8004e90:	003f9c06 	br	8004d04 <__alt_data_end+0xff004d04>
 8004e94:	00c05504 	movi	r3,340
 8004e98:	19400536 	bltu	r3,r5,8004eb0 <_free_r+0x2d4>
 8004e9c:	100ad3fa 	srli	r5,r2,15
 8004ea0:	28c01e04 	addi	r3,r5,120
 8004ea4:	18c7883a 	add	r3,r3,r3
 8004ea8:	29401dc4 	addi	r5,r5,119
 8004eac:	003f9506 	br	8004d04 <__alt_data_end+0xff004d04>
 8004eb0:	00c15504 	movi	r3,1364
 8004eb4:	19400536 	bltu	r3,r5,8004ecc <_free_r+0x2f0>
 8004eb8:	100ad4ba 	srli	r5,r2,18
 8004ebc:	28c01f44 	addi	r3,r5,125
 8004ec0:	18c7883a 	add	r3,r3,r3
 8004ec4:	29401f04 	addi	r5,r5,124
 8004ec8:	003f8e06 	br	8004d04 <__alt_data_end+0xff004d04>
 8004ecc:	00c03f84 	movi	r3,254
 8004ed0:	01401f84 	movi	r5,126
 8004ed4:	003f8b06 	br	8004d04 <__alt_data_end+0xff004d04>
 8004ed8:	10c00054 	ori	r3,r2,1
 8004edc:	30c00115 	stw	r3,4(r6)
 8004ee0:	308d883a 	add	r6,r6,r2
 8004ee4:	30800015 	stw	r2,0(r6)
 8004ee8:	003f7806 	br	8004ccc <__alt_data_end+0xff004ccc>

08004eec <__sfvwrite_r>:
 8004eec:	30800217 	ldw	r2,8(r6)
 8004ef0:	10006726 	beq	r2,zero,8005090 <__sfvwrite_r+0x1a4>
 8004ef4:	28c0030b 	ldhu	r3,12(r5)
 8004ef8:	defff404 	addi	sp,sp,-48
 8004efc:	dd400715 	stw	r21,28(sp)
 8004f00:	dd000615 	stw	r20,24(sp)
 8004f04:	dc000215 	stw	r16,8(sp)
 8004f08:	dfc00b15 	stw	ra,44(sp)
 8004f0c:	df000a15 	stw	fp,40(sp)
 8004f10:	ddc00915 	stw	r23,36(sp)
 8004f14:	dd800815 	stw	r22,32(sp)
 8004f18:	dcc00515 	stw	r19,20(sp)
 8004f1c:	dc800415 	stw	r18,16(sp)
 8004f20:	dc400315 	stw	r17,12(sp)
 8004f24:	1880020c 	andi	r2,r3,8
 8004f28:	2821883a 	mov	r16,r5
 8004f2c:	202b883a 	mov	r21,r4
 8004f30:	3029883a 	mov	r20,r6
 8004f34:	10002726 	beq	r2,zero,8004fd4 <__sfvwrite_r+0xe8>
 8004f38:	28800417 	ldw	r2,16(r5)
 8004f3c:	10002526 	beq	r2,zero,8004fd4 <__sfvwrite_r+0xe8>
 8004f40:	1880008c 	andi	r2,r3,2
 8004f44:	a4400017 	ldw	r17,0(r20)
 8004f48:	10002a26 	beq	r2,zero,8004ff4 <__sfvwrite_r+0x108>
 8004f4c:	05a00034 	movhi	r22,32768
 8004f50:	0027883a 	mov	r19,zero
 8004f54:	0025883a 	mov	r18,zero
 8004f58:	b5bf0004 	addi	r22,r22,-1024
 8004f5c:	980d883a 	mov	r6,r19
 8004f60:	a809883a 	mov	r4,r21
 8004f64:	90004626 	beq	r18,zero,8005080 <__sfvwrite_r+0x194>
 8004f68:	900f883a 	mov	r7,r18
 8004f6c:	b480022e 	bgeu	r22,r18,8004f78 <__sfvwrite_r+0x8c>
 8004f70:	01e00034 	movhi	r7,32768
 8004f74:	39ff0004 	addi	r7,r7,-1024
 8004f78:	80800917 	ldw	r2,36(r16)
 8004f7c:	81400717 	ldw	r5,28(r16)
 8004f80:	103ee83a 	callr	r2
 8004f84:	0080570e 	bge	zero,r2,80050e4 <__sfvwrite_r+0x1f8>
 8004f88:	a0c00217 	ldw	r3,8(r20)
 8004f8c:	98a7883a 	add	r19,r19,r2
 8004f90:	90a5c83a 	sub	r18,r18,r2
 8004f94:	1885c83a 	sub	r2,r3,r2
 8004f98:	a0800215 	stw	r2,8(r20)
 8004f9c:	103fef1e 	bne	r2,zero,8004f5c <__alt_data_end+0xff004f5c>
 8004fa0:	0005883a 	mov	r2,zero
 8004fa4:	dfc00b17 	ldw	ra,44(sp)
 8004fa8:	df000a17 	ldw	fp,40(sp)
 8004fac:	ddc00917 	ldw	r23,36(sp)
 8004fb0:	dd800817 	ldw	r22,32(sp)
 8004fb4:	dd400717 	ldw	r21,28(sp)
 8004fb8:	dd000617 	ldw	r20,24(sp)
 8004fbc:	dcc00517 	ldw	r19,20(sp)
 8004fc0:	dc800417 	ldw	r18,16(sp)
 8004fc4:	dc400317 	ldw	r17,12(sp)
 8004fc8:	dc000217 	ldw	r16,8(sp)
 8004fcc:	dec00c04 	addi	sp,sp,48
 8004fd0:	f800283a 	ret
 8004fd4:	800b883a 	mov	r5,r16
 8004fd8:	a809883a 	mov	r4,r21
 8004fdc:	8002a940 	call	8002a94 <__swsetup_r>
 8004fe0:	1000eb1e 	bne	r2,zero,8005390 <__sfvwrite_r+0x4a4>
 8004fe4:	80c0030b 	ldhu	r3,12(r16)
 8004fe8:	a4400017 	ldw	r17,0(r20)
 8004fec:	1880008c 	andi	r2,r3,2
 8004ff0:	103fd61e 	bne	r2,zero,8004f4c <__alt_data_end+0xff004f4c>
 8004ff4:	1880004c 	andi	r2,r3,1
 8004ff8:	10003f1e 	bne	r2,zero,80050f8 <__sfvwrite_r+0x20c>
 8004ffc:	0039883a 	mov	fp,zero
 8005000:	0025883a 	mov	r18,zero
 8005004:	90001a26 	beq	r18,zero,8005070 <__sfvwrite_r+0x184>
 8005008:	1880800c 	andi	r2,r3,512
 800500c:	84c00217 	ldw	r19,8(r16)
 8005010:	10002126 	beq	r2,zero,8005098 <__sfvwrite_r+0x1ac>
 8005014:	982f883a 	mov	r23,r19
 8005018:	94c09336 	bltu	r18,r19,8005268 <__sfvwrite_r+0x37c>
 800501c:	1881200c 	andi	r2,r3,1152
 8005020:	10009e1e 	bne	r2,zero,800529c <__sfvwrite_r+0x3b0>
 8005024:	81000017 	ldw	r4,0(r16)
 8005028:	b80d883a 	mov	r6,r23
 800502c:	e00b883a 	mov	r5,fp
 8005030:	80062000 	call	8006200 <memmove>
 8005034:	80c00217 	ldw	r3,8(r16)
 8005038:	81000017 	ldw	r4,0(r16)
 800503c:	9005883a 	mov	r2,r18
 8005040:	1ce7c83a 	sub	r19,r3,r19
 8005044:	25cf883a 	add	r7,r4,r23
 8005048:	84c00215 	stw	r19,8(r16)
 800504c:	81c00015 	stw	r7,0(r16)
 8005050:	a0c00217 	ldw	r3,8(r20)
 8005054:	e0b9883a 	add	fp,fp,r2
 8005058:	90a5c83a 	sub	r18,r18,r2
 800505c:	18a7c83a 	sub	r19,r3,r2
 8005060:	a4c00215 	stw	r19,8(r20)
 8005064:	983fce26 	beq	r19,zero,8004fa0 <__alt_data_end+0xff004fa0>
 8005068:	80c0030b 	ldhu	r3,12(r16)
 800506c:	903fe61e 	bne	r18,zero,8005008 <__alt_data_end+0xff005008>
 8005070:	8f000017 	ldw	fp,0(r17)
 8005074:	8c800117 	ldw	r18,4(r17)
 8005078:	8c400204 	addi	r17,r17,8
 800507c:	003fe106 	br	8005004 <__alt_data_end+0xff005004>
 8005080:	8cc00017 	ldw	r19,0(r17)
 8005084:	8c800117 	ldw	r18,4(r17)
 8005088:	8c400204 	addi	r17,r17,8
 800508c:	003fb306 	br	8004f5c <__alt_data_end+0xff004f5c>
 8005090:	0005883a 	mov	r2,zero
 8005094:	f800283a 	ret
 8005098:	81000017 	ldw	r4,0(r16)
 800509c:	80800417 	ldw	r2,16(r16)
 80050a0:	11005736 	bltu	r2,r4,8005200 <__sfvwrite_r+0x314>
 80050a4:	85c00517 	ldw	r23,20(r16)
 80050a8:	95c05536 	bltu	r18,r23,8005200 <__sfvwrite_r+0x314>
 80050ac:	00a00034 	movhi	r2,32768
 80050b0:	10bfffc4 	addi	r2,r2,-1
 80050b4:	9009883a 	mov	r4,r18
 80050b8:	1480012e 	bgeu	r2,r18,80050c0 <__sfvwrite_r+0x1d4>
 80050bc:	1009883a 	mov	r4,r2
 80050c0:	b80b883a 	mov	r5,r23
 80050c4:	800a8580 	call	800a858 <__divsi3>
 80050c8:	15cf383a 	mul	r7,r2,r23
 80050cc:	81400717 	ldw	r5,28(r16)
 80050d0:	80800917 	ldw	r2,36(r16)
 80050d4:	e00d883a 	mov	r6,fp
 80050d8:	a809883a 	mov	r4,r21
 80050dc:	103ee83a 	callr	r2
 80050e0:	00bfdb16 	blt	zero,r2,8005050 <__alt_data_end+0xff005050>
 80050e4:	8080030b 	ldhu	r2,12(r16)
 80050e8:	10801014 	ori	r2,r2,64
 80050ec:	8080030d 	sth	r2,12(r16)
 80050f0:	00bfffc4 	movi	r2,-1
 80050f4:	003fab06 	br	8004fa4 <__alt_data_end+0xff004fa4>
 80050f8:	0027883a 	mov	r19,zero
 80050fc:	0011883a 	mov	r8,zero
 8005100:	0039883a 	mov	fp,zero
 8005104:	0025883a 	mov	r18,zero
 8005108:	90001f26 	beq	r18,zero,8005188 <__sfvwrite_r+0x29c>
 800510c:	40005a26 	beq	r8,zero,8005278 <__sfvwrite_r+0x38c>
 8005110:	982d883a 	mov	r22,r19
 8005114:	94c0012e 	bgeu	r18,r19,800511c <__sfvwrite_r+0x230>
 8005118:	902d883a 	mov	r22,r18
 800511c:	81000017 	ldw	r4,0(r16)
 8005120:	80800417 	ldw	r2,16(r16)
 8005124:	b02f883a 	mov	r23,r22
 8005128:	81c00517 	ldw	r7,20(r16)
 800512c:	1100032e 	bgeu	r2,r4,800513c <__sfvwrite_r+0x250>
 8005130:	80c00217 	ldw	r3,8(r16)
 8005134:	38c7883a 	add	r3,r7,r3
 8005138:	1d801816 	blt	r3,r22,800519c <__sfvwrite_r+0x2b0>
 800513c:	b1c03e16 	blt	r22,r7,8005238 <__sfvwrite_r+0x34c>
 8005140:	80800917 	ldw	r2,36(r16)
 8005144:	81400717 	ldw	r5,28(r16)
 8005148:	e00d883a 	mov	r6,fp
 800514c:	da000115 	stw	r8,4(sp)
 8005150:	a809883a 	mov	r4,r21
 8005154:	103ee83a 	callr	r2
 8005158:	102f883a 	mov	r23,r2
 800515c:	da000117 	ldw	r8,4(sp)
 8005160:	00bfe00e 	bge	zero,r2,80050e4 <__alt_data_end+0xff0050e4>
 8005164:	9de7c83a 	sub	r19,r19,r23
 8005168:	98001f26 	beq	r19,zero,80051e8 <__sfvwrite_r+0x2fc>
 800516c:	a0800217 	ldw	r2,8(r20)
 8005170:	e5f9883a 	add	fp,fp,r23
 8005174:	95e5c83a 	sub	r18,r18,r23
 8005178:	15efc83a 	sub	r23,r2,r23
 800517c:	a5c00215 	stw	r23,8(r20)
 8005180:	b83f8726 	beq	r23,zero,8004fa0 <__alt_data_end+0xff004fa0>
 8005184:	903fe11e 	bne	r18,zero,800510c <__alt_data_end+0xff00510c>
 8005188:	8f000017 	ldw	fp,0(r17)
 800518c:	8c800117 	ldw	r18,4(r17)
 8005190:	0011883a 	mov	r8,zero
 8005194:	8c400204 	addi	r17,r17,8
 8005198:	003fdb06 	br	8005108 <__alt_data_end+0xff005108>
 800519c:	180d883a 	mov	r6,r3
 80051a0:	e00b883a 	mov	r5,fp
 80051a4:	da000115 	stw	r8,4(sp)
 80051a8:	d8c00015 	stw	r3,0(sp)
 80051ac:	80062000 	call	8006200 <memmove>
 80051b0:	d8c00017 	ldw	r3,0(sp)
 80051b4:	80800017 	ldw	r2,0(r16)
 80051b8:	800b883a 	mov	r5,r16
 80051bc:	a809883a 	mov	r4,r21
 80051c0:	10c5883a 	add	r2,r2,r3
 80051c4:	80800015 	stw	r2,0(r16)
 80051c8:	d8c00015 	stw	r3,0(sp)
 80051cc:	800468c0 	call	800468c <_fflush_r>
 80051d0:	d8c00017 	ldw	r3,0(sp)
 80051d4:	da000117 	ldw	r8,4(sp)
 80051d8:	103fc21e 	bne	r2,zero,80050e4 <__alt_data_end+0xff0050e4>
 80051dc:	182f883a 	mov	r23,r3
 80051e0:	9de7c83a 	sub	r19,r19,r23
 80051e4:	983fe11e 	bne	r19,zero,800516c <__alt_data_end+0xff00516c>
 80051e8:	800b883a 	mov	r5,r16
 80051ec:	a809883a 	mov	r4,r21
 80051f0:	800468c0 	call	800468c <_fflush_r>
 80051f4:	103fbb1e 	bne	r2,zero,80050e4 <__alt_data_end+0xff0050e4>
 80051f8:	0011883a 	mov	r8,zero
 80051fc:	003fdb06 	br	800516c <__alt_data_end+0xff00516c>
 8005200:	94c0012e 	bgeu	r18,r19,8005208 <__sfvwrite_r+0x31c>
 8005204:	9027883a 	mov	r19,r18
 8005208:	980d883a 	mov	r6,r19
 800520c:	e00b883a 	mov	r5,fp
 8005210:	80062000 	call	8006200 <memmove>
 8005214:	80800217 	ldw	r2,8(r16)
 8005218:	80c00017 	ldw	r3,0(r16)
 800521c:	14c5c83a 	sub	r2,r2,r19
 8005220:	1cc7883a 	add	r3,r3,r19
 8005224:	80800215 	stw	r2,8(r16)
 8005228:	80c00015 	stw	r3,0(r16)
 800522c:	10004326 	beq	r2,zero,800533c <__sfvwrite_r+0x450>
 8005230:	9805883a 	mov	r2,r19
 8005234:	003f8606 	br	8005050 <__alt_data_end+0xff005050>
 8005238:	b00d883a 	mov	r6,r22
 800523c:	e00b883a 	mov	r5,fp
 8005240:	da000115 	stw	r8,4(sp)
 8005244:	80062000 	call	8006200 <memmove>
 8005248:	80800217 	ldw	r2,8(r16)
 800524c:	80c00017 	ldw	r3,0(r16)
 8005250:	da000117 	ldw	r8,4(sp)
 8005254:	1585c83a 	sub	r2,r2,r22
 8005258:	1dad883a 	add	r22,r3,r22
 800525c:	80800215 	stw	r2,8(r16)
 8005260:	85800015 	stw	r22,0(r16)
 8005264:	003fbf06 	br	8005164 <__alt_data_end+0xff005164>
 8005268:	81000017 	ldw	r4,0(r16)
 800526c:	9027883a 	mov	r19,r18
 8005270:	902f883a 	mov	r23,r18
 8005274:	003f6c06 	br	8005028 <__alt_data_end+0xff005028>
 8005278:	900d883a 	mov	r6,r18
 800527c:	01400284 	movi	r5,10
 8005280:	e009883a 	mov	r4,fp
 8005284:	8005fd40 	call	8005fd4 <memchr>
 8005288:	10003e26 	beq	r2,zero,8005384 <__sfvwrite_r+0x498>
 800528c:	10800044 	addi	r2,r2,1
 8005290:	1727c83a 	sub	r19,r2,fp
 8005294:	02000044 	movi	r8,1
 8005298:	003f9d06 	br	8005110 <__alt_data_end+0xff005110>
 800529c:	80800517 	ldw	r2,20(r16)
 80052a0:	81400417 	ldw	r5,16(r16)
 80052a4:	81c00017 	ldw	r7,0(r16)
 80052a8:	10a7883a 	add	r19,r2,r2
 80052ac:	9885883a 	add	r2,r19,r2
 80052b0:	1026d7fa 	srli	r19,r2,31
 80052b4:	396dc83a 	sub	r22,r7,r5
 80052b8:	b1000044 	addi	r4,r22,1
 80052bc:	9885883a 	add	r2,r19,r2
 80052c0:	1027d07a 	srai	r19,r2,1
 80052c4:	2485883a 	add	r2,r4,r18
 80052c8:	980d883a 	mov	r6,r19
 80052cc:	9880022e 	bgeu	r19,r2,80052d8 <__sfvwrite_r+0x3ec>
 80052d0:	1027883a 	mov	r19,r2
 80052d4:	100d883a 	mov	r6,r2
 80052d8:	18c1000c 	andi	r3,r3,1024
 80052dc:	18001c26 	beq	r3,zero,8005350 <__sfvwrite_r+0x464>
 80052e0:	300b883a 	mov	r5,r6
 80052e4:	a809883a 	mov	r4,r21
 80052e8:	80057c80 	call	80057c8 <_malloc_r>
 80052ec:	102f883a 	mov	r23,r2
 80052f0:	10002926 	beq	r2,zero,8005398 <__sfvwrite_r+0x4ac>
 80052f4:	81400417 	ldw	r5,16(r16)
 80052f8:	b00d883a 	mov	r6,r22
 80052fc:	1009883a 	mov	r4,r2
 8005300:	80060b80 	call	80060b8 <memcpy>
 8005304:	8080030b 	ldhu	r2,12(r16)
 8005308:	00fedfc4 	movi	r3,-1153
 800530c:	10c4703a 	and	r2,r2,r3
 8005310:	10802014 	ori	r2,r2,128
 8005314:	8080030d 	sth	r2,12(r16)
 8005318:	bd89883a 	add	r4,r23,r22
 800531c:	9d8fc83a 	sub	r7,r19,r22
 8005320:	85c00415 	stw	r23,16(r16)
 8005324:	84c00515 	stw	r19,20(r16)
 8005328:	81000015 	stw	r4,0(r16)
 800532c:	9027883a 	mov	r19,r18
 8005330:	81c00215 	stw	r7,8(r16)
 8005334:	902f883a 	mov	r23,r18
 8005338:	003f3b06 	br	8005028 <__alt_data_end+0xff005028>
 800533c:	800b883a 	mov	r5,r16
 8005340:	a809883a 	mov	r4,r21
 8005344:	800468c0 	call	800468c <_fflush_r>
 8005348:	103fb926 	beq	r2,zero,8005230 <__alt_data_end+0xff005230>
 800534c:	003f6506 	br	80050e4 <__alt_data_end+0xff0050e4>
 8005350:	a809883a 	mov	r4,r21
 8005354:	80075e80 	call	80075e8 <_realloc_r>
 8005358:	102f883a 	mov	r23,r2
 800535c:	103fee1e 	bne	r2,zero,8005318 <__alt_data_end+0xff005318>
 8005360:	81400417 	ldw	r5,16(r16)
 8005364:	a809883a 	mov	r4,r21
 8005368:	8004bdc0 	call	8004bdc <_free_r>
 800536c:	8080030b 	ldhu	r2,12(r16)
 8005370:	00ffdfc4 	movi	r3,-129
 8005374:	1884703a 	and	r2,r3,r2
 8005378:	00c00304 	movi	r3,12
 800537c:	a8c00015 	stw	r3,0(r21)
 8005380:	003f5906 	br	80050e8 <__alt_data_end+0xff0050e8>
 8005384:	94c00044 	addi	r19,r18,1
 8005388:	02000044 	movi	r8,1
 800538c:	003f6006 	br	8005110 <__alt_data_end+0xff005110>
 8005390:	00bfffc4 	movi	r2,-1
 8005394:	003f0306 	br	8004fa4 <__alt_data_end+0xff004fa4>
 8005398:	00800304 	movi	r2,12
 800539c:	a8800015 	stw	r2,0(r21)
 80053a0:	8080030b 	ldhu	r2,12(r16)
 80053a4:	003f5006 	br	80050e8 <__alt_data_end+0xff0050e8>

080053a8 <_fwalk>:
 80053a8:	defff704 	addi	sp,sp,-36
 80053ac:	dd000415 	stw	r20,16(sp)
 80053b0:	dfc00815 	stw	ra,32(sp)
 80053b4:	ddc00715 	stw	r23,28(sp)
 80053b8:	dd800615 	stw	r22,24(sp)
 80053bc:	dd400515 	stw	r21,20(sp)
 80053c0:	dcc00315 	stw	r19,12(sp)
 80053c4:	dc800215 	stw	r18,8(sp)
 80053c8:	dc400115 	stw	r17,4(sp)
 80053cc:	dc000015 	stw	r16,0(sp)
 80053d0:	2500b804 	addi	r20,r4,736
 80053d4:	a0002326 	beq	r20,zero,8005464 <_fwalk+0xbc>
 80053d8:	282b883a 	mov	r21,r5
 80053dc:	002f883a 	mov	r23,zero
 80053e0:	05800044 	movi	r22,1
 80053e4:	04ffffc4 	movi	r19,-1
 80053e8:	a4400117 	ldw	r17,4(r20)
 80053ec:	a4800217 	ldw	r18,8(r20)
 80053f0:	8c7fffc4 	addi	r17,r17,-1
 80053f4:	88000d16 	blt	r17,zero,800542c <_fwalk+0x84>
 80053f8:	94000304 	addi	r16,r18,12
 80053fc:	94800384 	addi	r18,r18,14
 8005400:	8080000b 	ldhu	r2,0(r16)
 8005404:	8c7fffc4 	addi	r17,r17,-1
 8005408:	813ffd04 	addi	r4,r16,-12
 800540c:	b080042e 	bgeu	r22,r2,8005420 <_fwalk+0x78>
 8005410:	9080000f 	ldh	r2,0(r18)
 8005414:	14c00226 	beq	r2,r19,8005420 <_fwalk+0x78>
 8005418:	a83ee83a 	callr	r21
 800541c:	b8aeb03a 	or	r23,r23,r2
 8005420:	84001a04 	addi	r16,r16,104
 8005424:	94801a04 	addi	r18,r18,104
 8005428:	8cfff51e 	bne	r17,r19,8005400 <__alt_data_end+0xff005400>
 800542c:	a5000017 	ldw	r20,0(r20)
 8005430:	a03fed1e 	bne	r20,zero,80053e8 <__alt_data_end+0xff0053e8>
 8005434:	b805883a 	mov	r2,r23
 8005438:	dfc00817 	ldw	ra,32(sp)
 800543c:	ddc00717 	ldw	r23,28(sp)
 8005440:	dd800617 	ldw	r22,24(sp)
 8005444:	dd400517 	ldw	r21,20(sp)
 8005448:	dd000417 	ldw	r20,16(sp)
 800544c:	dcc00317 	ldw	r19,12(sp)
 8005450:	dc800217 	ldw	r18,8(sp)
 8005454:	dc400117 	ldw	r17,4(sp)
 8005458:	dc000017 	ldw	r16,0(sp)
 800545c:	dec00904 	addi	sp,sp,36
 8005460:	f800283a 	ret
 8005464:	002f883a 	mov	r23,zero
 8005468:	003ff206 	br	8005434 <__alt_data_end+0xff005434>

0800546c <_fwalk_reent>:
 800546c:	defff704 	addi	sp,sp,-36
 8005470:	dd000415 	stw	r20,16(sp)
 8005474:	dfc00815 	stw	ra,32(sp)
 8005478:	ddc00715 	stw	r23,28(sp)
 800547c:	dd800615 	stw	r22,24(sp)
 8005480:	dd400515 	stw	r21,20(sp)
 8005484:	dcc00315 	stw	r19,12(sp)
 8005488:	dc800215 	stw	r18,8(sp)
 800548c:	dc400115 	stw	r17,4(sp)
 8005490:	dc000015 	stw	r16,0(sp)
 8005494:	2500b804 	addi	r20,r4,736
 8005498:	a0002326 	beq	r20,zero,8005528 <_fwalk_reent+0xbc>
 800549c:	282b883a 	mov	r21,r5
 80054a0:	2027883a 	mov	r19,r4
 80054a4:	002f883a 	mov	r23,zero
 80054a8:	05800044 	movi	r22,1
 80054ac:	04bfffc4 	movi	r18,-1
 80054b0:	a4400117 	ldw	r17,4(r20)
 80054b4:	a4000217 	ldw	r16,8(r20)
 80054b8:	8c7fffc4 	addi	r17,r17,-1
 80054bc:	88000c16 	blt	r17,zero,80054f0 <_fwalk_reent+0x84>
 80054c0:	84000304 	addi	r16,r16,12
 80054c4:	8080000b 	ldhu	r2,0(r16)
 80054c8:	8c7fffc4 	addi	r17,r17,-1
 80054cc:	817ffd04 	addi	r5,r16,-12
 80054d0:	b080052e 	bgeu	r22,r2,80054e8 <_fwalk_reent+0x7c>
 80054d4:	8080008f 	ldh	r2,2(r16)
 80054d8:	9809883a 	mov	r4,r19
 80054dc:	14800226 	beq	r2,r18,80054e8 <_fwalk_reent+0x7c>
 80054e0:	a83ee83a 	callr	r21
 80054e4:	b8aeb03a 	or	r23,r23,r2
 80054e8:	84001a04 	addi	r16,r16,104
 80054ec:	8cbff51e 	bne	r17,r18,80054c4 <__alt_data_end+0xff0054c4>
 80054f0:	a5000017 	ldw	r20,0(r20)
 80054f4:	a03fee1e 	bne	r20,zero,80054b0 <__alt_data_end+0xff0054b0>
 80054f8:	b805883a 	mov	r2,r23
 80054fc:	dfc00817 	ldw	ra,32(sp)
 8005500:	ddc00717 	ldw	r23,28(sp)
 8005504:	dd800617 	ldw	r22,24(sp)
 8005508:	dd400517 	ldw	r21,20(sp)
 800550c:	dd000417 	ldw	r20,16(sp)
 8005510:	dcc00317 	ldw	r19,12(sp)
 8005514:	dc800217 	ldw	r18,8(sp)
 8005518:	dc400117 	ldw	r17,4(sp)
 800551c:	dc000017 	ldw	r16,0(sp)
 8005520:	dec00904 	addi	sp,sp,36
 8005524:	f800283a 	ret
 8005528:	002f883a 	mov	r23,zero
 800552c:	003ff206 	br	80054f8 <__alt_data_end+0xff0054f8>

08005530 <_setlocale_r>:
 8005530:	30001b26 	beq	r6,zero,80055a0 <_setlocale_r+0x70>
 8005534:	01420074 	movhi	r5,2049
 8005538:	defffe04 	addi	sp,sp,-8
 800553c:	2946a404 	addi	r5,r5,6800
 8005540:	3009883a 	mov	r4,r6
 8005544:	dc000015 	stw	r16,0(sp)
 8005548:	dfc00115 	stw	ra,4(sp)
 800554c:	3021883a 	mov	r16,r6
 8005550:	8007d500 	call	8007d50 <strcmp>
 8005554:	1000061e 	bne	r2,zero,8005570 <_setlocale_r+0x40>
 8005558:	00820074 	movhi	r2,2049
 800555c:	1086a304 	addi	r2,r2,6796
 8005560:	dfc00117 	ldw	ra,4(sp)
 8005564:	dc000017 	ldw	r16,0(sp)
 8005568:	dec00204 	addi	sp,sp,8
 800556c:	f800283a 	ret
 8005570:	01420074 	movhi	r5,2049
 8005574:	2946a304 	addi	r5,r5,6796
 8005578:	8009883a 	mov	r4,r16
 800557c:	8007d500 	call	8007d50 <strcmp>
 8005580:	103ff526 	beq	r2,zero,8005558 <__alt_data_end+0xff005558>
 8005584:	01420074 	movhi	r5,2049
 8005588:	29468e04 	addi	r5,r5,6712
 800558c:	8009883a 	mov	r4,r16
 8005590:	8007d500 	call	8007d50 <strcmp>
 8005594:	103ff026 	beq	r2,zero,8005558 <__alt_data_end+0xff005558>
 8005598:	0005883a 	mov	r2,zero
 800559c:	003ff006 	br	8005560 <__alt_data_end+0xff005560>
 80055a0:	00820074 	movhi	r2,2049
 80055a4:	1086a304 	addi	r2,r2,6796
 80055a8:	f800283a 	ret

080055ac <__locale_charset>:
 80055ac:	00820074 	movhi	r2,2049
 80055b0:	10886104 	addi	r2,r2,8580
 80055b4:	f800283a 	ret

080055b8 <__locale_mb_cur_max>:
 80055b8:	00820074 	movhi	r2,2049
 80055bc:	108e0b04 	addi	r2,r2,14380
 80055c0:	10800017 	ldw	r2,0(r2)
 80055c4:	f800283a 	ret

080055c8 <__locale_msgcharset>:
 80055c8:	00820074 	movhi	r2,2049
 80055cc:	10885904 	addi	r2,r2,8548
 80055d0:	f800283a 	ret

080055d4 <__locale_cjk_lang>:
 80055d4:	0005883a 	mov	r2,zero
 80055d8:	f800283a 	ret

080055dc <_localeconv_r>:
 80055dc:	00820074 	movhi	r2,2049
 80055e0:	10886904 	addi	r2,r2,8612
 80055e4:	f800283a 	ret

080055e8 <setlocale>:
 80055e8:	00820074 	movhi	r2,2049
 80055ec:	108e0a04 	addi	r2,r2,14376
 80055f0:	280d883a 	mov	r6,r5
 80055f4:	200b883a 	mov	r5,r4
 80055f8:	11000017 	ldw	r4,0(r2)
 80055fc:	80055301 	jmpi	8005530 <_setlocale_r>

08005600 <localeconv>:
 8005600:	00820074 	movhi	r2,2049
 8005604:	10886904 	addi	r2,r2,8612
 8005608:	f800283a 	ret

0800560c <__smakebuf_r>:
 800560c:	2880030b 	ldhu	r2,12(r5)
 8005610:	10c0008c 	andi	r3,r2,2
 8005614:	1800411e 	bne	r3,zero,800571c <__smakebuf_r+0x110>
 8005618:	deffec04 	addi	sp,sp,-80
 800561c:	dc000f15 	stw	r16,60(sp)
 8005620:	2821883a 	mov	r16,r5
 8005624:	2940038f 	ldh	r5,14(r5)
 8005628:	dc401015 	stw	r17,64(sp)
 800562c:	dfc01315 	stw	ra,76(sp)
 8005630:	dcc01215 	stw	r19,72(sp)
 8005634:	dc801115 	stw	r18,68(sp)
 8005638:	2023883a 	mov	r17,r4
 800563c:	28001c16 	blt	r5,zero,80056b0 <__smakebuf_r+0xa4>
 8005640:	d80d883a 	mov	r6,sp
 8005644:	8009a500 	call	8009a50 <_fstat_r>
 8005648:	10001816 	blt	r2,zero,80056ac <__smakebuf_r+0xa0>
 800564c:	d8800117 	ldw	r2,4(sp)
 8005650:	00e00014 	movui	r3,32768
 8005654:	10bc000c 	andi	r2,r2,61440
 8005658:	14c80020 	cmpeqi	r19,r2,8192
 800565c:	10c03726 	beq	r2,r3,800573c <__smakebuf_r+0x130>
 8005660:	80c0030b 	ldhu	r3,12(r16)
 8005664:	18c20014 	ori	r3,r3,2048
 8005668:	80c0030d 	sth	r3,12(r16)
 800566c:	00c80004 	movi	r3,8192
 8005670:	10c0521e 	bne	r2,r3,80057bc <__smakebuf_r+0x1b0>
 8005674:	8140038f 	ldh	r5,14(r16)
 8005678:	8809883a 	mov	r4,r17
 800567c:	8009aac0 	call	8009aac <_isatty_r>
 8005680:	10004c26 	beq	r2,zero,80057b4 <__smakebuf_r+0x1a8>
 8005684:	8080030b 	ldhu	r2,12(r16)
 8005688:	80c010c4 	addi	r3,r16,67
 800568c:	80c00015 	stw	r3,0(r16)
 8005690:	10800054 	ori	r2,r2,1
 8005694:	8080030d 	sth	r2,12(r16)
 8005698:	00800044 	movi	r2,1
 800569c:	80c00415 	stw	r3,16(r16)
 80056a0:	80800515 	stw	r2,20(r16)
 80056a4:	04810004 	movi	r18,1024
 80056a8:	00000706 	br	80056c8 <__smakebuf_r+0xbc>
 80056ac:	8080030b 	ldhu	r2,12(r16)
 80056b0:	10c0200c 	andi	r3,r2,128
 80056b4:	18001f1e 	bne	r3,zero,8005734 <__smakebuf_r+0x128>
 80056b8:	04810004 	movi	r18,1024
 80056bc:	10820014 	ori	r2,r2,2048
 80056c0:	8080030d 	sth	r2,12(r16)
 80056c4:	0027883a 	mov	r19,zero
 80056c8:	900b883a 	mov	r5,r18
 80056cc:	8809883a 	mov	r4,r17
 80056d0:	80057c80 	call	80057c8 <_malloc_r>
 80056d4:	10002c26 	beq	r2,zero,8005788 <__smakebuf_r+0x17c>
 80056d8:	80c0030b 	ldhu	r3,12(r16)
 80056dc:	01020034 	movhi	r4,2048
 80056e0:	2111c804 	addi	r4,r4,18208
 80056e4:	89000f15 	stw	r4,60(r17)
 80056e8:	18c02014 	ori	r3,r3,128
 80056ec:	80c0030d 	sth	r3,12(r16)
 80056f0:	80800015 	stw	r2,0(r16)
 80056f4:	80800415 	stw	r2,16(r16)
 80056f8:	84800515 	stw	r18,20(r16)
 80056fc:	98001a1e 	bne	r19,zero,8005768 <__smakebuf_r+0x15c>
 8005700:	dfc01317 	ldw	ra,76(sp)
 8005704:	dcc01217 	ldw	r19,72(sp)
 8005708:	dc801117 	ldw	r18,68(sp)
 800570c:	dc401017 	ldw	r17,64(sp)
 8005710:	dc000f17 	ldw	r16,60(sp)
 8005714:	dec01404 	addi	sp,sp,80
 8005718:	f800283a 	ret
 800571c:	288010c4 	addi	r2,r5,67
 8005720:	28800015 	stw	r2,0(r5)
 8005724:	28800415 	stw	r2,16(r5)
 8005728:	00800044 	movi	r2,1
 800572c:	28800515 	stw	r2,20(r5)
 8005730:	f800283a 	ret
 8005734:	04801004 	movi	r18,64
 8005738:	003fe006 	br	80056bc <__alt_data_end+0xff0056bc>
 800573c:	81000a17 	ldw	r4,40(r16)
 8005740:	00c20034 	movhi	r3,2048
 8005744:	18df3b04 	addi	r3,r3,31980
 8005748:	20ffc51e 	bne	r4,r3,8005660 <__alt_data_end+0xff005660>
 800574c:	8080030b 	ldhu	r2,12(r16)
 8005750:	04810004 	movi	r18,1024
 8005754:	84801315 	stw	r18,76(r16)
 8005758:	1484b03a 	or	r2,r2,r18
 800575c:	8080030d 	sth	r2,12(r16)
 8005760:	0027883a 	mov	r19,zero
 8005764:	003fd806 	br	80056c8 <__alt_data_end+0xff0056c8>
 8005768:	8140038f 	ldh	r5,14(r16)
 800576c:	8809883a 	mov	r4,r17
 8005770:	8009aac0 	call	8009aac <_isatty_r>
 8005774:	103fe226 	beq	r2,zero,8005700 <__alt_data_end+0xff005700>
 8005778:	8080030b 	ldhu	r2,12(r16)
 800577c:	10800054 	ori	r2,r2,1
 8005780:	8080030d 	sth	r2,12(r16)
 8005784:	003fde06 	br	8005700 <__alt_data_end+0xff005700>
 8005788:	8080030b 	ldhu	r2,12(r16)
 800578c:	10c0800c 	andi	r3,r2,512
 8005790:	183fdb1e 	bne	r3,zero,8005700 <__alt_data_end+0xff005700>
 8005794:	10800094 	ori	r2,r2,2
 8005798:	80c010c4 	addi	r3,r16,67
 800579c:	8080030d 	sth	r2,12(r16)
 80057a0:	00800044 	movi	r2,1
 80057a4:	80c00015 	stw	r3,0(r16)
 80057a8:	80c00415 	stw	r3,16(r16)
 80057ac:	80800515 	stw	r2,20(r16)
 80057b0:	003fd306 	br	8005700 <__alt_data_end+0xff005700>
 80057b4:	04810004 	movi	r18,1024
 80057b8:	003fc306 	br	80056c8 <__alt_data_end+0xff0056c8>
 80057bc:	0027883a 	mov	r19,zero
 80057c0:	04810004 	movi	r18,1024
 80057c4:	003fc006 	br	80056c8 <__alt_data_end+0xff0056c8>

080057c8 <_malloc_r>:
 80057c8:	defff504 	addi	sp,sp,-44
 80057cc:	dc800315 	stw	r18,12(sp)
 80057d0:	dfc00a15 	stw	ra,40(sp)
 80057d4:	df000915 	stw	fp,36(sp)
 80057d8:	ddc00815 	stw	r23,32(sp)
 80057dc:	dd800715 	stw	r22,28(sp)
 80057e0:	dd400615 	stw	r21,24(sp)
 80057e4:	dd000515 	stw	r20,20(sp)
 80057e8:	dcc00415 	stw	r19,16(sp)
 80057ec:	dc400215 	stw	r17,8(sp)
 80057f0:	dc000115 	stw	r16,4(sp)
 80057f4:	288002c4 	addi	r2,r5,11
 80057f8:	00c00584 	movi	r3,22
 80057fc:	2025883a 	mov	r18,r4
 8005800:	18807f2e 	bgeu	r3,r2,8005a00 <_malloc_r+0x238>
 8005804:	047ffe04 	movi	r17,-8
 8005808:	1462703a 	and	r17,r2,r17
 800580c:	8800a316 	blt	r17,zero,8005a9c <_malloc_r+0x2d4>
 8005810:	8940a236 	bltu	r17,r5,8005a9c <_malloc_r+0x2d4>
 8005814:	800d7700 	call	800d770 <__malloc_lock>
 8005818:	00807dc4 	movi	r2,503
 800581c:	1441e92e 	bgeu	r2,r17,8005fc4 <_malloc_r+0x7fc>
 8005820:	8804d27a 	srli	r2,r17,9
 8005824:	1000a126 	beq	r2,zero,8005aac <_malloc_r+0x2e4>
 8005828:	00c00104 	movi	r3,4
 800582c:	18811e36 	bltu	r3,r2,8005ca8 <_malloc_r+0x4e0>
 8005830:	8804d1ba 	srli	r2,r17,6
 8005834:	12000e44 	addi	r8,r2,57
 8005838:	11c00e04 	addi	r7,r2,56
 800583c:	4209883a 	add	r4,r8,r8
 8005840:	04c20074 	movhi	r19,2049
 8005844:	2109883a 	add	r4,r4,r4
 8005848:	9cc87704 	addi	r19,r19,8668
 800584c:	2109883a 	add	r4,r4,r4
 8005850:	9909883a 	add	r4,r19,r4
 8005854:	24000117 	ldw	r16,4(r4)
 8005858:	213ffe04 	addi	r4,r4,-8
 800585c:	24009726 	beq	r4,r16,8005abc <_malloc_r+0x2f4>
 8005860:	80800117 	ldw	r2,4(r16)
 8005864:	01bfff04 	movi	r6,-4
 8005868:	014003c4 	movi	r5,15
 800586c:	1184703a 	and	r2,r2,r6
 8005870:	1447c83a 	sub	r3,r2,r17
 8005874:	28c00716 	blt	r5,r3,8005894 <_malloc_r+0xcc>
 8005878:	1800920e 	bge	r3,zero,8005ac4 <_malloc_r+0x2fc>
 800587c:	84000317 	ldw	r16,12(r16)
 8005880:	24008e26 	beq	r4,r16,8005abc <_malloc_r+0x2f4>
 8005884:	80800117 	ldw	r2,4(r16)
 8005888:	1184703a 	and	r2,r2,r6
 800588c:	1447c83a 	sub	r3,r2,r17
 8005890:	28fff90e 	bge	r5,r3,8005878 <__alt_data_end+0xff005878>
 8005894:	3809883a 	mov	r4,r7
 8005898:	01820074 	movhi	r6,2049
 800589c:	9c000417 	ldw	r16,16(r19)
 80058a0:	31887704 	addi	r6,r6,8668
 80058a4:	32000204 	addi	r8,r6,8
 80058a8:	82013426 	beq	r16,r8,8005d7c <_malloc_r+0x5b4>
 80058ac:	80c00117 	ldw	r3,4(r16)
 80058b0:	00bfff04 	movi	r2,-4
 80058b4:	188e703a 	and	r7,r3,r2
 80058b8:	3c45c83a 	sub	r2,r7,r17
 80058bc:	00c003c4 	movi	r3,15
 80058c0:	18811f16 	blt	r3,r2,8005d40 <_malloc_r+0x578>
 80058c4:	32000515 	stw	r8,20(r6)
 80058c8:	32000415 	stw	r8,16(r6)
 80058cc:	10007f0e 	bge	r2,zero,8005acc <_malloc_r+0x304>
 80058d0:	00807fc4 	movi	r2,511
 80058d4:	11c0fd36 	bltu	r2,r7,8005ccc <_malloc_r+0x504>
 80058d8:	3806d0fa 	srli	r3,r7,3
 80058dc:	01c00044 	movi	r7,1
 80058e0:	30800117 	ldw	r2,4(r6)
 80058e4:	19400044 	addi	r5,r3,1
 80058e8:	294b883a 	add	r5,r5,r5
 80058ec:	1807d0ba 	srai	r3,r3,2
 80058f0:	294b883a 	add	r5,r5,r5
 80058f4:	294b883a 	add	r5,r5,r5
 80058f8:	298b883a 	add	r5,r5,r6
 80058fc:	38c6983a 	sll	r3,r7,r3
 8005900:	29c00017 	ldw	r7,0(r5)
 8005904:	2a7ffe04 	addi	r9,r5,-8
 8005908:	1886b03a 	or	r3,r3,r2
 800590c:	82400315 	stw	r9,12(r16)
 8005910:	81c00215 	stw	r7,8(r16)
 8005914:	30c00115 	stw	r3,4(r6)
 8005918:	2c000015 	stw	r16,0(r5)
 800591c:	3c000315 	stw	r16,12(r7)
 8005920:	2005d0ba 	srai	r2,r4,2
 8005924:	01400044 	movi	r5,1
 8005928:	288a983a 	sll	r5,r5,r2
 800592c:	19406f36 	bltu	r3,r5,8005aec <_malloc_r+0x324>
 8005930:	28c4703a 	and	r2,r5,r3
 8005934:	10000a1e 	bne	r2,zero,8005960 <_malloc_r+0x198>
 8005938:	00bfff04 	movi	r2,-4
 800593c:	294b883a 	add	r5,r5,r5
 8005940:	2088703a 	and	r4,r4,r2
 8005944:	28c4703a 	and	r2,r5,r3
 8005948:	21000104 	addi	r4,r4,4
 800594c:	1000041e 	bne	r2,zero,8005960 <_malloc_r+0x198>
 8005950:	294b883a 	add	r5,r5,r5
 8005954:	28c4703a 	and	r2,r5,r3
 8005958:	21000104 	addi	r4,r4,4
 800595c:	103ffc26 	beq	r2,zero,8005950 <__alt_data_end+0xff005950>
 8005960:	02bfff04 	movi	r10,-4
 8005964:	024003c4 	movi	r9,15
 8005968:	21800044 	addi	r6,r4,1
 800596c:	318d883a 	add	r6,r6,r6
 8005970:	318d883a 	add	r6,r6,r6
 8005974:	318d883a 	add	r6,r6,r6
 8005978:	998d883a 	add	r6,r19,r6
 800597c:	333ffe04 	addi	r12,r6,-8
 8005980:	2017883a 	mov	r11,r4
 8005984:	31800104 	addi	r6,r6,4
 8005988:	34000017 	ldw	r16,0(r6)
 800598c:	31fffd04 	addi	r7,r6,-12
 8005990:	81c0041e 	bne	r16,r7,80059a4 <_malloc_r+0x1dc>
 8005994:	0000fb06 	br	8005d84 <_malloc_r+0x5bc>
 8005998:	1801030e 	bge	r3,zero,8005da8 <_malloc_r+0x5e0>
 800599c:	84000317 	ldw	r16,12(r16)
 80059a0:	81c0f826 	beq	r16,r7,8005d84 <_malloc_r+0x5bc>
 80059a4:	80800117 	ldw	r2,4(r16)
 80059a8:	1284703a 	and	r2,r2,r10
 80059ac:	1447c83a 	sub	r3,r2,r17
 80059b0:	48fff90e 	bge	r9,r3,8005998 <__alt_data_end+0xff005998>
 80059b4:	80800317 	ldw	r2,12(r16)
 80059b8:	81000217 	ldw	r4,8(r16)
 80059bc:	89400054 	ori	r5,r17,1
 80059c0:	81400115 	stw	r5,4(r16)
 80059c4:	20800315 	stw	r2,12(r4)
 80059c8:	11000215 	stw	r4,8(r2)
 80059cc:	8463883a 	add	r17,r16,r17
 80059d0:	9c400515 	stw	r17,20(r19)
 80059d4:	9c400415 	stw	r17,16(r19)
 80059d8:	18800054 	ori	r2,r3,1
 80059dc:	88800115 	stw	r2,4(r17)
 80059e0:	8a000315 	stw	r8,12(r17)
 80059e4:	8a000215 	stw	r8,8(r17)
 80059e8:	88e3883a 	add	r17,r17,r3
 80059ec:	88c00015 	stw	r3,0(r17)
 80059f0:	9009883a 	mov	r4,r18
 80059f4:	800d7940 	call	800d794 <__malloc_unlock>
 80059f8:	80800204 	addi	r2,r16,8
 80059fc:	00001b06 	br	8005a6c <_malloc_r+0x2a4>
 8005a00:	04400404 	movi	r17,16
 8005a04:	89402536 	bltu	r17,r5,8005a9c <_malloc_r+0x2d4>
 8005a08:	800d7700 	call	800d770 <__malloc_lock>
 8005a0c:	00800184 	movi	r2,6
 8005a10:	01000084 	movi	r4,2
 8005a14:	04c20074 	movhi	r19,2049
 8005a18:	1085883a 	add	r2,r2,r2
 8005a1c:	9cc87704 	addi	r19,r19,8668
 8005a20:	1085883a 	add	r2,r2,r2
 8005a24:	9885883a 	add	r2,r19,r2
 8005a28:	14000117 	ldw	r16,4(r2)
 8005a2c:	10fffe04 	addi	r3,r2,-8
 8005a30:	80c0d926 	beq	r16,r3,8005d98 <_malloc_r+0x5d0>
 8005a34:	80c00117 	ldw	r3,4(r16)
 8005a38:	81000317 	ldw	r4,12(r16)
 8005a3c:	00bfff04 	movi	r2,-4
 8005a40:	1884703a 	and	r2,r3,r2
 8005a44:	81400217 	ldw	r5,8(r16)
 8005a48:	8085883a 	add	r2,r16,r2
 8005a4c:	10c00117 	ldw	r3,4(r2)
 8005a50:	29000315 	stw	r4,12(r5)
 8005a54:	21400215 	stw	r5,8(r4)
 8005a58:	18c00054 	ori	r3,r3,1
 8005a5c:	10c00115 	stw	r3,4(r2)
 8005a60:	9009883a 	mov	r4,r18
 8005a64:	800d7940 	call	800d794 <__malloc_unlock>
 8005a68:	80800204 	addi	r2,r16,8
 8005a6c:	dfc00a17 	ldw	ra,40(sp)
 8005a70:	df000917 	ldw	fp,36(sp)
 8005a74:	ddc00817 	ldw	r23,32(sp)
 8005a78:	dd800717 	ldw	r22,28(sp)
 8005a7c:	dd400617 	ldw	r21,24(sp)
 8005a80:	dd000517 	ldw	r20,20(sp)
 8005a84:	dcc00417 	ldw	r19,16(sp)
 8005a88:	dc800317 	ldw	r18,12(sp)
 8005a8c:	dc400217 	ldw	r17,8(sp)
 8005a90:	dc000117 	ldw	r16,4(sp)
 8005a94:	dec00b04 	addi	sp,sp,44
 8005a98:	f800283a 	ret
 8005a9c:	00800304 	movi	r2,12
 8005aa0:	90800015 	stw	r2,0(r18)
 8005aa4:	0005883a 	mov	r2,zero
 8005aa8:	003ff006 	br	8005a6c <__alt_data_end+0xff005a6c>
 8005aac:	01002004 	movi	r4,128
 8005ab0:	02001004 	movi	r8,64
 8005ab4:	01c00fc4 	movi	r7,63
 8005ab8:	003f6106 	br	8005840 <__alt_data_end+0xff005840>
 8005abc:	4009883a 	mov	r4,r8
 8005ac0:	003f7506 	br	8005898 <__alt_data_end+0xff005898>
 8005ac4:	81000317 	ldw	r4,12(r16)
 8005ac8:	003fde06 	br	8005a44 <__alt_data_end+0xff005a44>
 8005acc:	81c5883a 	add	r2,r16,r7
 8005ad0:	11400117 	ldw	r5,4(r2)
 8005ad4:	9009883a 	mov	r4,r18
 8005ad8:	29400054 	ori	r5,r5,1
 8005adc:	11400115 	stw	r5,4(r2)
 8005ae0:	800d7940 	call	800d794 <__malloc_unlock>
 8005ae4:	80800204 	addi	r2,r16,8
 8005ae8:	003fe006 	br	8005a6c <__alt_data_end+0xff005a6c>
 8005aec:	9c000217 	ldw	r16,8(r19)
 8005af0:	00bfff04 	movi	r2,-4
 8005af4:	85800117 	ldw	r22,4(r16)
 8005af8:	b0ac703a 	and	r22,r22,r2
 8005afc:	b4400336 	bltu	r22,r17,8005b0c <_malloc_r+0x344>
 8005b00:	b445c83a 	sub	r2,r22,r17
 8005b04:	00c003c4 	movi	r3,15
 8005b08:	18805d16 	blt	r3,r2,8005c80 <_malloc_r+0x4b8>
 8005b0c:	05c20074 	movhi	r23,2049
 8005b10:	00820074 	movhi	r2,2049
 8005b14:	1094ec04 	addi	r2,r2,21424
 8005b18:	bdce0c04 	addi	r23,r23,14384
 8005b1c:	15400017 	ldw	r21,0(r2)
 8005b20:	b8c00017 	ldw	r3,0(r23)
 8005b24:	00bfffc4 	movi	r2,-1
 8005b28:	858d883a 	add	r6,r16,r22
 8005b2c:	8d6b883a 	add	r21,r17,r21
 8005b30:	1880ea26 	beq	r3,r2,8005edc <_malloc_r+0x714>
 8005b34:	ad4403c4 	addi	r21,r21,4111
 8005b38:	00bc0004 	movi	r2,-4096
 8005b3c:	a8aa703a 	and	r21,r21,r2
 8005b40:	a80b883a 	mov	r5,r21
 8005b44:	9009883a 	mov	r4,r18
 8005b48:	d9800015 	stw	r6,0(sp)
 8005b4c:	8007bc00 	call	8007bc0 <_sbrk_r>
 8005b50:	1029883a 	mov	r20,r2
 8005b54:	00bfffc4 	movi	r2,-1
 8005b58:	d9800017 	ldw	r6,0(sp)
 8005b5c:	a080e826 	beq	r20,r2,8005f00 <_malloc_r+0x738>
 8005b60:	a180a636 	bltu	r20,r6,8005dfc <_malloc_r+0x634>
 8005b64:	07020074 	movhi	fp,2049
 8005b68:	e714f504 	addi	fp,fp,21460
 8005b6c:	e0800017 	ldw	r2,0(fp)
 8005b70:	a887883a 	add	r3,r21,r2
 8005b74:	e0c00015 	stw	r3,0(fp)
 8005b78:	3500e626 	beq	r6,r20,8005f14 <_malloc_r+0x74c>
 8005b7c:	b9000017 	ldw	r4,0(r23)
 8005b80:	00bfffc4 	movi	r2,-1
 8005b84:	2080ee26 	beq	r4,r2,8005f40 <_malloc_r+0x778>
 8005b88:	a185c83a 	sub	r2,r20,r6
 8005b8c:	10c5883a 	add	r2,r2,r3
 8005b90:	e0800015 	stw	r2,0(fp)
 8005b94:	a0c001cc 	andi	r3,r20,7
 8005b98:	1800bc26 	beq	r3,zero,8005e8c <_malloc_r+0x6c4>
 8005b9c:	a0e9c83a 	sub	r20,r20,r3
 8005ba0:	00840204 	movi	r2,4104
 8005ba4:	a5000204 	addi	r20,r20,8
 8005ba8:	10c7c83a 	sub	r3,r2,r3
 8005bac:	a545883a 	add	r2,r20,r21
 8005bb0:	1083ffcc 	andi	r2,r2,4095
 8005bb4:	18abc83a 	sub	r21,r3,r2
 8005bb8:	a80b883a 	mov	r5,r21
 8005bbc:	9009883a 	mov	r4,r18
 8005bc0:	8007bc00 	call	8007bc0 <_sbrk_r>
 8005bc4:	00ffffc4 	movi	r3,-1
 8005bc8:	10c0e126 	beq	r2,r3,8005f50 <_malloc_r+0x788>
 8005bcc:	1505c83a 	sub	r2,r2,r20
 8005bd0:	1545883a 	add	r2,r2,r21
 8005bd4:	10800054 	ori	r2,r2,1
 8005bd8:	e0c00017 	ldw	r3,0(fp)
 8005bdc:	9d000215 	stw	r20,8(r19)
 8005be0:	a0800115 	stw	r2,4(r20)
 8005be4:	a8c7883a 	add	r3,r21,r3
 8005be8:	e0c00015 	stw	r3,0(fp)
 8005bec:	84c00e26 	beq	r16,r19,8005c28 <_malloc_r+0x460>
 8005bf0:	018003c4 	movi	r6,15
 8005bf4:	3580a72e 	bgeu	r6,r22,8005e94 <_malloc_r+0x6cc>
 8005bf8:	81400117 	ldw	r5,4(r16)
 8005bfc:	013ffe04 	movi	r4,-8
 8005c00:	b0bffd04 	addi	r2,r22,-12
 8005c04:	1104703a 	and	r2,r2,r4
 8005c08:	2900004c 	andi	r4,r5,1
 8005c0c:	2088b03a 	or	r4,r4,r2
 8005c10:	81000115 	stw	r4,4(r16)
 8005c14:	01400144 	movi	r5,5
 8005c18:	8089883a 	add	r4,r16,r2
 8005c1c:	21400115 	stw	r5,4(r4)
 8005c20:	21400215 	stw	r5,8(r4)
 8005c24:	3080cd36 	bltu	r6,r2,8005f5c <_malloc_r+0x794>
 8005c28:	00820074 	movhi	r2,2049
 8005c2c:	1094eb04 	addi	r2,r2,21420
 8005c30:	11000017 	ldw	r4,0(r2)
 8005c34:	20c0012e 	bgeu	r4,r3,8005c3c <_malloc_r+0x474>
 8005c38:	10c00015 	stw	r3,0(r2)
 8005c3c:	00820074 	movhi	r2,2049
 8005c40:	1094ea04 	addi	r2,r2,21416
 8005c44:	11000017 	ldw	r4,0(r2)
 8005c48:	9c000217 	ldw	r16,8(r19)
 8005c4c:	20c0012e 	bgeu	r4,r3,8005c54 <_malloc_r+0x48c>
 8005c50:	10c00015 	stw	r3,0(r2)
 8005c54:	80c00117 	ldw	r3,4(r16)
 8005c58:	00bfff04 	movi	r2,-4
 8005c5c:	1886703a 	and	r3,r3,r2
 8005c60:	1c45c83a 	sub	r2,r3,r17
 8005c64:	1c400236 	bltu	r3,r17,8005c70 <_malloc_r+0x4a8>
 8005c68:	00c003c4 	movi	r3,15
 8005c6c:	18800416 	blt	r3,r2,8005c80 <_malloc_r+0x4b8>
 8005c70:	9009883a 	mov	r4,r18
 8005c74:	800d7940 	call	800d794 <__malloc_unlock>
 8005c78:	0005883a 	mov	r2,zero
 8005c7c:	003f7b06 	br	8005a6c <__alt_data_end+0xff005a6c>
 8005c80:	88c00054 	ori	r3,r17,1
 8005c84:	80c00115 	stw	r3,4(r16)
 8005c88:	8463883a 	add	r17,r16,r17
 8005c8c:	10800054 	ori	r2,r2,1
 8005c90:	9c400215 	stw	r17,8(r19)
 8005c94:	88800115 	stw	r2,4(r17)
 8005c98:	9009883a 	mov	r4,r18
 8005c9c:	800d7940 	call	800d794 <__malloc_unlock>
 8005ca0:	80800204 	addi	r2,r16,8
 8005ca4:	003f7106 	br	8005a6c <__alt_data_end+0xff005a6c>
 8005ca8:	00c00504 	movi	r3,20
 8005cac:	18804a2e 	bgeu	r3,r2,8005dd8 <_malloc_r+0x610>
 8005cb0:	00c01504 	movi	r3,84
 8005cb4:	18806e36 	bltu	r3,r2,8005e70 <_malloc_r+0x6a8>
 8005cb8:	8804d33a 	srli	r2,r17,12
 8005cbc:	12001bc4 	addi	r8,r2,111
 8005cc0:	11c01b84 	addi	r7,r2,110
 8005cc4:	4209883a 	add	r4,r8,r8
 8005cc8:	003edd06 	br	8005840 <__alt_data_end+0xff005840>
 8005ccc:	3804d27a 	srli	r2,r7,9
 8005cd0:	00c00104 	movi	r3,4
 8005cd4:	1880442e 	bgeu	r3,r2,8005de8 <_malloc_r+0x620>
 8005cd8:	00c00504 	movi	r3,20
 8005cdc:	18808136 	bltu	r3,r2,8005ee4 <_malloc_r+0x71c>
 8005ce0:	11401704 	addi	r5,r2,92
 8005ce4:	10c016c4 	addi	r3,r2,91
 8005ce8:	294b883a 	add	r5,r5,r5
 8005cec:	294b883a 	add	r5,r5,r5
 8005cf0:	294b883a 	add	r5,r5,r5
 8005cf4:	994b883a 	add	r5,r19,r5
 8005cf8:	28800017 	ldw	r2,0(r5)
 8005cfc:	01820074 	movhi	r6,2049
 8005d00:	297ffe04 	addi	r5,r5,-8
 8005d04:	31887704 	addi	r6,r6,8668
 8005d08:	28806526 	beq	r5,r2,8005ea0 <_malloc_r+0x6d8>
 8005d0c:	01bfff04 	movi	r6,-4
 8005d10:	10c00117 	ldw	r3,4(r2)
 8005d14:	1986703a 	and	r3,r3,r6
 8005d18:	38c0022e 	bgeu	r7,r3,8005d24 <_malloc_r+0x55c>
 8005d1c:	10800217 	ldw	r2,8(r2)
 8005d20:	28bffb1e 	bne	r5,r2,8005d10 <__alt_data_end+0xff005d10>
 8005d24:	11400317 	ldw	r5,12(r2)
 8005d28:	98c00117 	ldw	r3,4(r19)
 8005d2c:	81400315 	stw	r5,12(r16)
 8005d30:	80800215 	stw	r2,8(r16)
 8005d34:	2c000215 	stw	r16,8(r5)
 8005d38:	14000315 	stw	r16,12(r2)
 8005d3c:	003ef806 	br	8005920 <__alt_data_end+0xff005920>
 8005d40:	88c00054 	ori	r3,r17,1
 8005d44:	80c00115 	stw	r3,4(r16)
 8005d48:	8463883a 	add	r17,r16,r17
 8005d4c:	34400515 	stw	r17,20(r6)
 8005d50:	34400415 	stw	r17,16(r6)
 8005d54:	10c00054 	ori	r3,r2,1
 8005d58:	8a000315 	stw	r8,12(r17)
 8005d5c:	8a000215 	stw	r8,8(r17)
 8005d60:	88c00115 	stw	r3,4(r17)
 8005d64:	88a3883a 	add	r17,r17,r2
 8005d68:	88800015 	stw	r2,0(r17)
 8005d6c:	9009883a 	mov	r4,r18
 8005d70:	800d7940 	call	800d794 <__malloc_unlock>
 8005d74:	80800204 	addi	r2,r16,8
 8005d78:	003f3c06 	br	8005a6c <__alt_data_end+0xff005a6c>
 8005d7c:	30c00117 	ldw	r3,4(r6)
 8005d80:	003ee706 	br	8005920 <__alt_data_end+0xff005920>
 8005d84:	5ac00044 	addi	r11,r11,1
 8005d88:	588000cc 	andi	r2,r11,3
 8005d8c:	31800204 	addi	r6,r6,8
 8005d90:	103efd1e 	bne	r2,zero,8005988 <__alt_data_end+0xff005988>
 8005d94:	00002406 	br	8005e28 <_malloc_r+0x660>
 8005d98:	14000317 	ldw	r16,12(r2)
 8005d9c:	143f251e 	bne	r2,r16,8005a34 <__alt_data_end+0xff005a34>
 8005da0:	21000084 	addi	r4,r4,2
 8005da4:	003ebc06 	br	8005898 <__alt_data_end+0xff005898>
 8005da8:	8085883a 	add	r2,r16,r2
 8005dac:	10c00117 	ldw	r3,4(r2)
 8005db0:	81000317 	ldw	r4,12(r16)
 8005db4:	81400217 	ldw	r5,8(r16)
 8005db8:	18c00054 	ori	r3,r3,1
 8005dbc:	10c00115 	stw	r3,4(r2)
 8005dc0:	29000315 	stw	r4,12(r5)
 8005dc4:	21400215 	stw	r5,8(r4)
 8005dc8:	9009883a 	mov	r4,r18
 8005dcc:	800d7940 	call	800d794 <__malloc_unlock>
 8005dd0:	80800204 	addi	r2,r16,8
 8005dd4:	003f2506 	br	8005a6c <__alt_data_end+0xff005a6c>
 8005dd8:	12001704 	addi	r8,r2,92
 8005ddc:	11c016c4 	addi	r7,r2,91
 8005de0:	4209883a 	add	r4,r8,r8
 8005de4:	003e9606 	br	8005840 <__alt_data_end+0xff005840>
 8005de8:	3804d1ba 	srli	r2,r7,6
 8005dec:	11400e44 	addi	r5,r2,57
 8005df0:	10c00e04 	addi	r3,r2,56
 8005df4:	294b883a 	add	r5,r5,r5
 8005df8:	003fbc06 	br	8005cec <__alt_data_end+0xff005cec>
 8005dfc:	84ff5926 	beq	r16,r19,8005b64 <__alt_data_end+0xff005b64>
 8005e00:	00820074 	movhi	r2,2049
 8005e04:	10887704 	addi	r2,r2,8668
 8005e08:	14000217 	ldw	r16,8(r2)
 8005e0c:	00bfff04 	movi	r2,-4
 8005e10:	80c00117 	ldw	r3,4(r16)
 8005e14:	1886703a 	and	r3,r3,r2
 8005e18:	003f9106 	br	8005c60 <__alt_data_end+0xff005c60>
 8005e1c:	60800217 	ldw	r2,8(r12)
 8005e20:	213fffc4 	addi	r4,r4,-1
 8005e24:	1300651e 	bne	r2,r12,8005fbc <_malloc_r+0x7f4>
 8005e28:	208000cc 	andi	r2,r4,3
 8005e2c:	633ffe04 	addi	r12,r12,-8
 8005e30:	103ffa1e 	bne	r2,zero,8005e1c <__alt_data_end+0xff005e1c>
 8005e34:	98800117 	ldw	r2,4(r19)
 8005e38:	0146303a 	nor	r3,zero,r5
 8005e3c:	1884703a 	and	r2,r3,r2
 8005e40:	98800115 	stw	r2,4(r19)
 8005e44:	294b883a 	add	r5,r5,r5
 8005e48:	117f2836 	bltu	r2,r5,8005aec <__alt_data_end+0xff005aec>
 8005e4c:	283f2726 	beq	r5,zero,8005aec <__alt_data_end+0xff005aec>
 8005e50:	2886703a 	and	r3,r5,r2
 8005e54:	5809883a 	mov	r4,r11
 8005e58:	183ec31e 	bne	r3,zero,8005968 <__alt_data_end+0xff005968>
 8005e5c:	294b883a 	add	r5,r5,r5
 8005e60:	2886703a 	and	r3,r5,r2
 8005e64:	21000104 	addi	r4,r4,4
 8005e68:	183ffc26 	beq	r3,zero,8005e5c <__alt_data_end+0xff005e5c>
 8005e6c:	003ebe06 	br	8005968 <__alt_data_end+0xff005968>
 8005e70:	00c05504 	movi	r3,340
 8005e74:	18801236 	bltu	r3,r2,8005ec0 <_malloc_r+0x6f8>
 8005e78:	8804d3fa 	srli	r2,r17,15
 8005e7c:	12001e04 	addi	r8,r2,120
 8005e80:	11c01dc4 	addi	r7,r2,119
 8005e84:	4209883a 	add	r4,r8,r8
 8005e88:	003e6d06 	br	8005840 <__alt_data_end+0xff005840>
 8005e8c:	00c40004 	movi	r3,4096
 8005e90:	003f4606 	br	8005bac <__alt_data_end+0xff005bac>
 8005e94:	00800044 	movi	r2,1
 8005e98:	a0800115 	stw	r2,4(r20)
 8005e9c:	003f7406 	br	8005c70 <__alt_data_end+0xff005c70>
 8005ea0:	1805d0ba 	srai	r2,r3,2
 8005ea4:	01c00044 	movi	r7,1
 8005ea8:	30c00117 	ldw	r3,4(r6)
 8005eac:	388e983a 	sll	r7,r7,r2
 8005eb0:	2805883a 	mov	r2,r5
 8005eb4:	38c6b03a 	or	r3,r7,r3
 8005eb8:	30c00115 	stw	r3,4(r6)
 8005ebc:	003f9b06 	br	8005d2c <__alt_data_end+0xff005d2c>
 8005ec0:	00c15504 	movi	r3,1364
 8005ec4:	18801a36 	bltu	r3,r2,8005f30 <_malloc_r+0x768>
 8005ec8:	8804d4ba 	srli	r2,r17,18
 8005ecc:	12001f44 	addi	r8,r2,125
 8005ed0:	11c01f04 	addi	r7,r2,124
 8005ed4:	4209883a 	add	r4,r8,r8
 8005ed8:	003e5906 	br	8005840 <__alt_data_end+0xff005840>
 8005edc:	ad400404 	addi	r21,r21,16
 8005ee0:	003f1706 	br	8005b40 <__alt_data_end+0xff005b40>
 8005ee4:	00c01504 	movi	r3,84
 8005ee8:	18802336 	bltu	r3,r2,8005f78 <_malloc_r+0x7b0>
 8005eec:	3804d33a 	srli	r2,r7,12
 8005ef0:	11401bc4 	addi	r5,r2,111
 8005ef4:	10c01b84 	addi	r3,r2,110
 8005ef8:	294b883a 	add	r5,r5,r5
 8005efc:	003f7b06 	br	8005cec <__alt_data_end+0xff005cec>
 8005f00:	9c000217 	ldw	r16,8(r19)
 8005f04:	00bfff04 	movi	r2,-4
 8005f08:	80c00117 	ldw	r3,4(r16)
 8005f0c:	1886703a 	and	r3,r3,r2
 8005f10:	003f5306 	br	8005c60 <__alt_data_end+0xff005c60>
 8005f14:	3083ffcc 	andi	r2,r6,4095
 8005f18:	103f181e 	bne	r2,zero,8005b7c <__alt_data_end+0xff005b7c>
 8005f1c:	99000217 	ldw	r4,8(r19)
 8005f20:	b545883a 	add	r2,r22,r21
 8005f24:	10800054 	ori	r2,r2,1
 8005f28:	20800115 	stw	r2,4(r4)
 8005f2c:	003f3e06 	br	8005c28 <__alt_data_end+0xff005c28>
 8005f30:	01003f84 	movi	r4,254
 8005f34:	02001fc4 	movi	r8,127
 8005f38:	01c01f84 	movi	r7,126
 8005f3c:	003e4006 	br	8005840 <__alt_data_end+0xff005840>
 8005f40:	00820074 	movhi	r2,2049
 8005f44:	108e0c04 	addi	r2,r2,14384
 8005f48:	15000015 	stw	r20,0(r2)
 8005f4c:	003f1106 	br	8005b94 <__alt_data_end+0xff005b94>
 8005f50:	00800044 	movi	r2,1
 8005f54:	002b883a 	mov	r21,zero
 8005f58:	003f1f06 	br	8005bd8 <__alt_data_end+0xff005bd8>
 8005f5c:	81400204 	addi	r5,r16,8
 8005f60:	9009883a 	mov	r4,r18
 8005f64:	8004bdc0 	call	8004bdc <_free_r>
 8005f68:	00820074 	movhi	r2,2049
 8005f6c:	1094f504 	addi	r2,r2,21460
 8005f70:	10c00017 	ldw	r3,0(r2)
 8005f74:	003f2c06 	br	8005c28 <__alt_data_end+0xff005c28>
 8005f78:	00c05504 	movi	r3,340
 8005f7c:	18800536 	bltu	r3,r2,8005f94 <_malloc_r+0x7cc>
 8005f80:	3804d3fa 	srli	r2,r7,15
 8005f84:	11401e04 	addi	r5,r2,120
 8005f88:	10c01dc4 	addi	r3,r2,119
 8005f8c:	294b883a 	add	r5,r5,r5
 8005f90:	003f5606 	br	8005cec <__alt_data_end+0xff005cec>
 8005f94:	00c15504 	movi	r3,1364
 8005f98:	18800536 	bltu	r3,r2,8005fb0 <_malloc_r+0x7e8>
 8005f9c:	3804d4ba 	srli	r2,r7,18
 8005fa0:	11401f44 	addi	r5,r2,125
 8005fa4:	10c01f04 	addi	r3,r2,124
 8005fa8:	294b883a 	add	r5,r5,r5
 8005fac:	003f4f06 	br	8005cec <__alt_data_end+0xff005cec>
 8005fb0:	01403f84 	movi	r5,254
 8005fb4:	00c01f84 	movi	r3,126
 8005fb8:	003f4c06 	br	8005cec <__alt_data_end+0xff005cec>
 8005fbc:	98800117 	ldw	r2,4(r19)
 8005fc0:	003fa006 	br	8005e44 <__alt_data_end+0xff005e44>
 8005fc4:	8808d0fa 	srli	r4,r17,3
 8005fc8:	20800044 	addi	r2,r4,1
 8005fcc:	1085883a 	add	r2,r2,r2
 8005fd0:	003e9006 	br	8005a14 <__alt_data_end+0xff005a14>

08005fd4 <memchr>:
 8005fd4:	208000cc 	andi	r2,r4,3
 8005fd8:	280f883a 	mov	r7,r5
 8005fdc:	10003426 	beq	r2,zero,80060b0 <memchr+0xdc>
 8005fe0:	30bfffc4 	addi	r2,r6,-1
 8005fe4:	30001a26 	beq	r6,zero,8006050 <memchr+0x7c>
 8005fe8:	20c00003 	ldbu	r3,0(r4)
 8005fec:	29803fcc 	andi	r6,r5,255
 8005ff0:	30c0051e 	bne	r6,r3,8006008 <memchr+0x34>
 8005ff4:	00001806 	br	8006058 <memchr+0x84>
 8005ff8:	10001526 	beq	r2,zero,8006050 <memchr+0x7c>
 8005ffc:	20c00003 	ldbu	r3,0(r4)
 8006000:	10bfffc4 	addi	r2,r2,-1
 8006004:	30c01426 	beq	r6,r3,8006058 <memchr+0x84>
 8006008:	21000044 	addi	r4,r4,1
 800600c:	20c000cc 	andi	r3,r4,3
 8006010:	183ff91e 	bne	r3,zero,8005ff8 <__alt_data_end+0xff005ff8>
 8006014:	020000c4 	movi	r8,3
 8006018:	40801136 	bltu	r8,r2,8006060 <memchr+0x8c>
 800601c:	10000c26 	beq	r2,zero,8006050 <memchr+0x7c>
 8006020:	20c00003 	ldbu	r3,0(r4)
 8006024:	29403fcc 	andi	r5,r5,255
 8006028:	28c00b26 	beq	r5,r3,8006058 <memchr+0x84>
 800602c:	20c00044 	addi	r3,r4,1
 8006030:	39803fcc 	andi	r6,r7,255
 8006034:	2089883a 	add	r4,r4,r2
 8006038:	00000306 	br	8006048 <memchr+0x74>
 800603c:	18c00044 	addi	r3,r3,1
 8006040:	197fffc3 	ldbu	r5,-1(r3)
 8006044:	31400526 	beq	r6,r5,800605c <memchr+0x88>
 8006048:	1805883a 	mov	r2,r3
 800604c:	20fffb1e 	bne	r4,r3,800603c <__alt_data_end+0xff00603c>
 8006050:	0005883a 	mov	r2,zero
 8006054:	f800283a 	ret
 8006058:	2005883a 	mov	r2,r4
 800605c:	f800283a 	ret
 8006060:	28c03fcc 	andi	r3,r5,255
 8006064:	1812923a 	slli	r9,r3,8
 8006068:	02ffbff4 	movhi	r11,65279
 800606c:	02a02074 	movhi	r10,32897
 8006070:	48d2b03a 	or	r9,r9,r3
 8006074:	4806943a 	slli	r3,r9,16
 8006078:	5affbfc4 	addi	r11,r11,-257
 800607c:	52a02004 	addi	r10,r10,-32640
 8006080:	48d2b03a 	or	r9,r9,r3
 8006084:	20c00017 	ldw	r3,0(r4)
 8006088:	48c6f03a 	xor	r3,r9,r3
 800608c:	1acd883a 	add	r6,r3,r11
 8006090:	00c6303a 	nor	r3,zero,r3
 8006094:	30c6703a 	and	r3,r6,r3
 8006098:	1a86703a 	and	r3,r3,r10
 800609c:	183fe01e 	bne	r3,zero,8006020 <__alt_data_end+0xff006020>
 80060a0:	10bfff04 	addi	r2,r2,-4
 80060a4:	21000104 	addi	r4,r4,4
 80060a8:	40bff636 	bltu	r8,r2,8006084 <__alt_data_end+0xff006084>
 80060ac:	003fdb06 	br	800601c <__alt_data_end+0xff00601c>
 80060b0:	3005883a 	mov	r2,r6
 80060b4:	003fd706 	br	8006014 <__alt_data_end+0xff006014>

080060b8 <memcpy>:
 80060b8:	defffd04 	addi	sp,sp,-12
 80060bc:	dfc00215 	stw	ra,8(sp)
 80060c0:	dc400115 	stw	r17,4(sp)
 80060c4:	dc000015 	stw	r16,0(sp)
 80060c8:	00c003c4 	movi	r3,15
 80060cc:	2005883a 	mov	r2,r4
 80060d0:	1980452e 	bgeu	r3,r6,80061e8 <memcpy+0x130>
 80060d4:	2906b03a 	or	r3,r5,r4
 80060d8:	18c000cc 	andi	r3,r3,3
 80060dc:	1800441e 	bne	r3,zero,80061f0 <memcpy+0x138>
 80060e0:	347ffc04 	addi	r17,r6,-16
 80060e4:	8822d13a 	srli	r17,r17,4
 80060e8:	28c00104 	addi	r3,r5,4
 80060ec:	23400104 	addi	r13,r4,4
 80060f0:	8820913a 	slli	r16,r17,4
 80060f4:	2b000204 	addi	r12,r5,8
 80060f8:	22c00204 	addi	r11,r4,8
 80060fc:	84000504 	addi	r16,r16,20
 8006100:	2a800304 	addi	r10,r5,12
 8006104:	22400304 	addi	r9,r4,12
 8006108:	2c21883a 	add	r16,r5,r16
 800610c:	2811883a 	mov	r8,r5
 8006110:	200f883a 	mov	r7,r4
 8006114:	41000017 	ldw	r4,0(r8)
 8006118:	1fc00017 	ldw	ra,0(r3)
 800611c:	63c00017 	ldw	r15,0(r12)
 8006120:	39000015 	stw	r4,0(r7)
 8006124:	53800017 	ldw	r14,0(r10)
 8006128:	6fc00015 	stw	ra,0(r13)
 800612c:	5bc00015 	stw	r15,0(r11)
 8006130:	4b800015 	stw	r14,0(r9)
 8006134:	18c00404 	addi	r3,r3,16
 8006138:	39c00404 	addi	r7,r7,16
 800613c:	42000404 	addi	r8,r8,16
 8006140:	6b400404 	addi	r13,r13,16
 8006144:	63000404 	addi	r12,r12,16
 8006148:	5ac00404 	addi	r11,r11,16
 800614c:	52800404 	addi	r10,r10,16
 8006150:	4a400404 	addi	r9,r9,16
 8006154:	1c3fef1e 	bne	r3,r16,8006114 <__alt_data_end+0xff006114>
 8006158:	89c00044 	addi	r7,r17,1
 800615c:	380e913a 	slli	r7,r7,4
 8006160:	310003cc 	andi	r4,r6,15
 8006164:	02c000c4 	movi	r11,3
 8006168:	11c7883a 	add	r3,r2,r7
 800616c:	29cb883a 	add	r5,r5,r7
 8006170:	5900212e 	bgeu	r11,r4,80061f8 <memcpy+0x140>
 8006174:	1813883a 	mov	r9,r3
 8006178:	2811883a 	mov	r8,r5
 800617c:	200f883a 	mov	r7,r4
 8006180:	42800017 	ldw	r10,0(r8)
 8006184:	4a400104 	addi	r9,r9,4
 8006188:	39ffff04 	addi	r7,r7,-4
 800618c:	4abfff15 	stw	r10,-4(r9)
 8006190:	42000104 	addi	r8,r8,4
 8006194:	59fffa36 	bltu	r11,r7,8006180 <__alt_data_end+0xff006180>
 8006198:	213fff04 	addi	r4,r4,-4
 800619c:	2008d0ba 	srli	r4,r4,2
 80061a0:	318000cc 	andi	r6,r6,3
 80061a4:	21000044 	addi	r4,r4,1
 80061a8:	2109883a 	add	r4,r4,r4
 80061ac:	2109883a 	add	r4,r4,r4
 80061b0:	1907883a 	add	r3,r3,r4
 80061b4:	290b883a 	add	r5,r5,r4
 80061b8:	30000626 	beq	r6,zero,80061d4 <memcpy+0x11c>
 80061bc:	198d883a 	add	r6,r3,r6
 80061c0:	29c00003 	ldbu	r7,0(r5)
 80061c4:	18c00044 	addi	r3,r3,1
 80061c8:	29400044 	addi	r5,r5,1
 80061cc:	19ffffc5 	stb	r7,-1(r3)
 80061d0:	19bffb1e 	bne	r3,r6,80061c0 <__alt_data_end+0xff0061c0>
 80061d4:	dfc00217 	ldw	ra,8(sp)
 80061d8:	dc400117 	ldw	r17,4(sp)
 80061dc:	dc000017 	ldw	r16,0(sp)
 80061e0:	dec00304 	addi	sp,sp,12
 80061e4:	f800283a 	ret
 80061e8:	2007883a 	mov	r3,r4
 80061ec:	003ff206 	br	80061b8 <__alt_data_end+0xff0061b8>
 80061f0:	2007883a 	mov	r3,r4
 80061f4:	003ff106 	br	80061bc <__alt_data_end+0xff0061bc>
 80061f8:	200d883a 	mov	r6,r4
 80061fc:	003fee06 	br	80061b8 <__alt_data_end+0xff0061b8>

08006200 <memmove>:
 8006200:	2005883a 	mov	r2,r4
 8006204:	29000b2e 	bgeu	r5,r4,8006234 <memmove+0x34>
 8006208:	298f883a 	add	r7,r5,r6
 800620c:	21c0092e 	bgeu	r4,r7,8006234 <memmove+0x34>
 8006210:	2187883a 	add	r3,r4,r6
 8006214:	198bc83a 	sub	r5,r3,r6
 8006218:	30004826 	beq	r6,zero,800633c <memmove+0x13c>
 800621c:	39ffffc4 	addi	r7,r7,-1
 8006220:	39000003 	ldbu	r4,0(r7)
 8006224:	18ffffc4 	addi	r3,r3,-1
 8006228:	19000005 	stb	r4,0(r3)
 800622c:	28fffb1e 	bne	r5,r3,800621c <__alt_data_end+0xff00621c>
 8006230:	f800283a 	ret
 8006234:	00c003c4 	movi	r3,15
 8006238:	1980412e 	bgeu	r3,r6,8006340 <memmove+0x140>
 800623c:	2886b03a 	or	r3,r5,r2
 8006240:	18c000cc 	andi	r3,r3,3
 8006244:	1800401e 	bne	r3,zero,8006348 <memmove+0x148>
 8006248:	33fffc04 	addi	r15,r6,-16
 800624c:	781ed13a 	srli	r15,r15,4
 8006250:	28c00104 	addi	r3,r5,4
 8006254:	13400104 	addi	r13,r2,4
 8006258:	781c913a 	slli	r14,r15,4
 800625c:	2b000204 	addi	r12,r5,8
 8006260:	12c00204 	addi	r11,r2,8
 8006264:	73800504 	addi	r14,r14,20
 8006268:	2a800304 	addi	r10,r5,12
 800626c:	12400304 	addi	r9,r2,12
 8006270:	2b9d883a 	add	r14,r5,r14
 8006274:	2811883a 	mov	r8,r5
 8006278:	100f883a 	mov	r7,r2
 800627c:	41000017 	ldw	r4,0(r8)
 8006280:	39c00404 	addi	r7,r7,16
 8006284:	18c00404 	addi	r3,r3,16
 8006288:	393ffc15 	stw	r4,-16(r7)
 800628c:	193ffc17 	ldw	r4,-16(r3)
 8006290:	6b400404 	addi	r13,r13,16
 8006294:	5ac00404 	addi	r11,r11,16
 8006298:	693ffc15 	stw	r4,-16(r13)
 800629c:	61000017 	ldw	r4,0(r12)
 80062a0:	4a400404 	addi	r9,r9,16
 80062a4:	42000404 	addi	r8,r8,16
 80062a8:	593ffc15 	stw	r4,-16(r11)
 80062ac:	51000017 	ldw	r4,0(r10)
 80062b0:	63000404 	addi	r12,r12,16
 80062b4:	52800404 	addi	r10,r10,16
 80062b8:	493ffc15 	stw	r4,-16(r9)
 80062bc:	1bbfef1e 	bne	r3,r14,800627c <__alt_data_end+0xff00627c>
 80062c0:	79000044 	addi	r4,r15,1
 80062c4:	2008913a 	slli	r4,r4,4
 80062c8:	328003cc 	andi	r10,r6,15
 80062cc:	02c000c4 	movi	r11,3
 80062d0:	1107883a 	add	r3,r2,r4
 80062d4:	290b883a 	add	r5,r5,r4
 80062d8:	5a801e2e 	bgeu	r11,r10,8006354 <memmove+0x154>
 80062dc:	1813883a 	mov	r9,r3
 80062e0:	2811883a 	mov	r8,r5
 80062e4:	500f883a 	mov	r7,r10
 80062e8:	41000017 	ldw	r4,0(r8)
 80062ec:	4a400104 	addi	r9,r9,4
 80062f0:	39ffff04 	addi	r7,r7,-4
 80062f4:	493fff15 	stw	r4,-4(r9)
 80062f8:	42000104 	addi	r8,r8,4
 80062fc:	59fffa36 	bltu	r11,r7,80062e8 <__alt_data_end+0xff0062e8>
 8006300:	513fff04 	addi	r4,r10,-4
 8006304:	2008d0ba 	srli	r4,r4,2
 8006308:	318000cc 	andi	r6,r6,3
 800630c:	21000044 	addi	r4,r4,1
 8006310:	2109883a 	add	r4,r4,r4
 8006314:	2109883a 	add	r4,r4,r4
 8006318:	1907883a 	add	r3,r3,r4
 800631c:	290b883a 	add	r5,r5,r4
 8006320:	30000b26 	beq	r6,zero,8006350 <memmove+0x150>
 8006324:	198d883a 	add	r6,r3,r6
 8006328:	29c00003 	ldbu	r7,0(r5)
 800632c:	18c00044 	addi	r3,r3,1
 8006330:	29400044 	addi	r5,r5,1
 8006334:	19ffffc5 	stb	r7,-1(r3)
 8006338:	19bffb1e 	bne	r3,r6,8006328 <__alt_data_end+0xff006328>
 800633c:	f800283a 	ret
 8006340:	1007883a 	mov	r3,r2
 8006344:	003ff606 	br	8006320 <__alt_data_end+0xff006320>
 8006348:	1007883a 	mov	r3,r2
 800634c:	003ff506 	br	8006324 <__alt_data_end+0xff006324>
 8006350:	f800283a 	ret
 8006354:	500d883a 	mov	r6,r10
 8006358:	003ff106 	br	8006320 <__alt_data_end+0xff006320>

0800635c <memset>:
 800635c:	20c000cc 	andi	r3,r4,3
 8006360:	2005883a 	mov	r2,r4
 8006364:	18004426 	beq	r3,zero,8006478 <memset+0x11c>
 8006368:	31ffffc4 	addi	r7,r6,-1
 800636c:	30004026 	beq	r6,zero,8006470 <memset+0x114>
 8006370:	2813883a 	mov	r9,r5
 8006374:	200d883a 	mov	r6,r4
 8006378:	2007883a 	mov	r3,r4
 800637c:	00000406 	br	8006390 <memset+0x34>
 8006380:	3a3fffc4 	addi	r8,r7,-1
 8006384:	31800044 	addi	r6,r6,1
 8006388:	38003926 	beq	r7,zero,8006470 <memset+0x114>
 800638c:	400f883a 	mov	r7,r8
 8006390:	18c00044 	addi	r3,r3,1
 8006394:	32400005 	stb	r9,0(r6)
 8006398:	1a0000cc 	andi	r8,r3,3
 800639c:	403ff81e 	bne	r8,zero,8006380 <__alt_data_end+0xff006380>
 80063a0:	010000c4 	movi	r4,3
 80063a4:	21c02d2e 	bgeu	r4,r7,800645c <memset+0x100>
 80063a8:	29003fcc 	andi	r4,r5,255
 80063ac:	200c923a 	slli	r6,r4,8
 80063b0:	3108b03a 	or	r4,r6,r4
 80063b4:	200c943a 	slli	r6,r4,16
 80063b8:	218cb03a 	or	r6,r4,r6
 80063bc:	010003c4 	movi	r4,15
 80063c0:	21c0182e 	bgeu	r4,r7,8006424 <memset+0xc8>
 80063c4:	3b3ffc04 	addi	r12,r7,-16
 80063c8:	6018d13a 	srli	r12,r12,4
 80063cc:	1a000104 	addi	r8,r3,4
 80063d0:	1ac00204 	addi	r11,r3,8
 80063d4:	6008913a 	slli	r4,r12,4
 80063d8:	1a800304 	addi	r10,r3,12
 80063dc:	1813883a 	mov	r9,r3
 80063e0:	21000504 	addi	r4,r4,20
 80063e4:	1909883a 	add	r4,r3,r4
 80063e8:	49800015 	stw	r6,0(r9)
 80063ec:	41800015 	stw	r6,0(r8)
 80063f0:	59800015 	stw	r6,0(r11)
 80063f4:	51800015 	stw	r6,0(r10)
 80063f8:	42000404 	addi	r8,r8,16
 80063fc:	4a400404 	addi	r9,r9,16
 8006400:	5ac00404 	addi	r11,r11,16
 8006404:	52800404 	addi	r10,r10,16
 8006408:	413ff71e 	bne	r8,r4,80063e8 <__alt_data_end+0xff0063e8>
 800640c:	63000044 	addi	r12,r12,1
 8006410:	6018913a 	slli	r12,r12,4
 8006414:	39c003cc 	andi	r7,r7,15
 8006418:	010000c4 	movi	r4,3
 800641c:	1b07883a 	add	r3,r3,r12
 8006420:	21c00e2e 	bgeu	r4,r7,800645c <memset+0x100>
 8006424:	1813883a 	mov	r9,r3
 8006428:	3811883a 	mov	r8,r7
 800642c:	010000c4 	movi	r4,3
 8006430:	49800015 	stw	r6,0(r9)
 8006434:	423fff04 	addi	r8,r8,-4
 8006438:	4a400104 	addi	r9,r9,4
 800643c:	223ffc36 	bltu	r4,r8,8006430 <__alt_data_end+0xff006430>
 8006440:	393fff04 	addi	r4,r7,-4
 8006444:	2008d0ba 	srli	r4,r4,2
 8006448:	39c000cc 	andi	r7,r7,3
 800644c:	21000044 	addi	r4,r4,1
 8006450:	2109883a 	add	r4,r4,r4
 8006454:	2109883a 	add	r4,r4,r4
 8006458:	1907883a 	add	r3,r3,r4
 800645c:	38000526 	beq	r7,zero,8006474 <memset+0x118>
 8006460:	19cf883a 	add	r7,r3,r7
 8006464:	19400005 	stb	r5,0(r3)
 8006468:	18c00044 	addi	r3,r3,1
 800646c:	38fffd1e 	bne	r7,r3,8006464 <__alt_data_end+0xff006464>
 8006470:	f800283a 	ret
 8006474:	f800283a 	ret
 8006478:	2007883a 	mov	r3,r4
 800647c:	300f883a 	mov	r7,r6
 8006480:	003fc706 	br	80063a0 <__alt_data_end+0xff0063a0>

08006484 <_Balloc>:
 8006484:	20801317 	ldw	r2,76(r4)
 8006488:	defffc04 	addi	sp,sp,-16
 800648c:	dc400115 	stw	r17,4(sp)
 8006490:	dc000015 	stw	r16,0(sp)
 8006494:	dfc00315 	stw	ra,12(sp)
 8006498:	dc800215 	stw	r18,8(sp)
 800649c:	2023883a 	mov	r17,r4
 80064a0:	2821883a 	mov	r16,r5
 80064a4:	10000f26 	beq	r2,zero,80064e4 <_Balloc+0x60>
 80064a8:	8407883a 	add	r3,r16,r16
 80064ac:	18c7883a 	add	r3,r3,r3
 80064b0:	10c7883a 	add	r3,r2,r3
 80064b4:	18800017 	ldw	r2,0(r3)
 80064b8:	10001126 	beq	r2,zero,8006500 <_Balloc+0x7c>
 80064bc:	11000017 	ldw	r4,0(r2)
 80064c0:	19000015 	stw	r4,0(r3)
 80064c4:	10000415 	stw	zero,16(r2)
 80064c8:	10000315 	stw	zero,12(r2)
 80064cc:	dfc00317 	ldw	ra,12(sp)
 80064d0:	dc800217 	ldw	r18,8(sp)
 80064d4:	dc400117 	ldw	r17,4(sp)
 80064d8:	dc000017 	ldw	r16,0(sp)
 80064dc:	dec00404 	addi	sp,sp,16
 80064e0:	f800283a 	ret
 80064e4:	01800844 	movi	r6,33
 80064e8:	01400104 	movi	r5,4
 80064ec:	80096800 	call	8009680 <_calloc_r>
 80064f0:	88801315 	stw	r2,76(r17)
 80064f4:	103fec1e 	bne	r2,zero,80064a8 <__alt_data_end+0xff0064a8>
 80064f8:	0005883a 	mov	r2,zero
 80064fc:	003ff306 	br	80064cc <__alt_data_end+0xff0064cc>
 8006500:	01400044 	movi	r5,1
 8006504:	2c24983a 	sll	r18,r5,r16
 8006508:	8809883a 	mov	r4,r17
 800650c:	91800144 	addi	r6,r18,5
 8006510:	318d883a 	add	r6,r6,r6
 8006514:	318d883a 	add	r6,r6,r6
 8006518:	80096800 	call	8009680 <_calloc_r>
 800651c:	103ff626 	beq	r2,zero,80064f8 <__alt_data_end+0xff0064f8>
 8006520:	14000115 	stw	r16,4(r2)
 8006524:	14800215 	stw	r18,8(r2)
 8006528:	003fe606 	br	80064c4 <__alt_data_end+0xff0064c4>

0800652c <_Bfree>:
 800652c:	28000826 	beq	r5,zero,8006550 <_Bfree+0x24>
 8006530:	28c00117 	ldw	r3,4(r5)
 8006534:	20801317 	ldw	r2,76(r4)
 8006538:	18c7883a 	add	r3,r3,r3
 800653c:	18c7883a 	add	r3,r3,r3
 8006540:	10c5883a 	add	r2,r2,r3
 8006544:	10c00017 	ldw	r3,0(r2)
 8006548:	28c00015 	stw	r3,0(r5)
 800654c:	11400015 	stw	r5,0(r2)
 8006550:	f800283a 	ret

08006554 <__multadd>:
 8006554:	defffa04 	addi	sp,sp,-24
 8006558:	dc800315 	stw	r18,12(sp)
 800655c:	dc400215 	stw	r17,8(sp)
 8006560:	dc000115 	stw	r16,4(sp)
 8006564:	2823883a 	mov	r17,r5
 8006568:	2c000417 	ldw	r16,16(r5)
 800656c:	dfc00515 	stw	ra,20(sp)
 8006570:	dcc00415 	stw	r19,16(sp)
 8006574:	2025883a 	mov	r18,r4
 8006578:	29400504 	addi	r5,r5,20
 800657c:	0011883a 	mov	r8,zero
 8006580:	28c00017 	ldw	r3,0(r5)
 8006584:	29400104 	addi	r5,r5,4
 8006588:	42000044 	addi	r8,r8,1
 800658c:	18bfffcc 	andi	r2,r3,65535
 8006590:	1185383a 	mul	r2,r2,r6
 8006594:	1806d43a 	srli	r3,r3,16
 8006598:	11cf883a 	add	r7,r2,r7
 800659c:	3808d43a 	srli	r4,r7,16
 80065a0:	1987383a 	mul	r3,r3,r6
 80065a4:	38bfffcc 	andi	r2,r7,65535
 80065a8:	1907883a 	add	r3,r3,r4
 80065ac:	1808943a 	slli	r4,r3,16
 80065b0:	180ed43a 	srli	r7,r3,16
 80065b4:	2085883a 	add	r2,r4,r2
 80065b8:	28bfff15 	stw	r2,-4(r5)
 80065bc:	443ff016 	blt	r8,r16,8006580 <__alt_data_end+0xff006580>
 80065c0:	38000926 	beq	r7,zero,80065e8 <__multadd+0x94>
 80065c4:	88800217 	ldw	r2,8(r17)
 80065c8:	80800f0e 	bge	r16,r2,8006608 <__multadd+0xb4>
 80065cc:	80800144 	addi	r2,r16,5
 80065d0:	1085883a 	add	r2,r2,r2
 80065d4:	1085883a 	add	r2,r2,r2
 80065d8:	8885883a 	add	r2,r17,r2
 80065dc:	11c00015 	stw	r7,0(r2)
 80065e0:	84000044 	addi	r16,r16,1
 80065e4:	8c000415 	stw	r16,16(r17)
 80065e8:	8805883a 	mov	r2,r17
 80065ec:	dfc00517 	ldw	ra,20(sp)
 80065f0:	dcc00417 	ldw	r19,16(sp)
 80065f4:	dc800317 	ldw	r18,12(sp)
 80065f8:	dc400217 	ldw	r17,8(sp)
 80065fc:	dc000117 	ldw	r16,4(sp)
 8006600:	dec00604 	addi	sp,sp,24
 8006604:	f800283a 	ret
 8006608:	89400117 	ldw	r5,4(r17)
 800660c:	9009883a 	mov	r4,r18
 8006610:	d9c00015 	stw	r7,0(sp)
 8006614:	29400044 	addi	r5,r5,1
 8006618:	80064840 	call	8006484 <_Balloc>
 800661c:	89800417 	ldw	r6,16(r17)
 8006620:	89400304 	addi	r5,r17,12
 8006624:	11000304 	addi	r4,r2,12
 8006628:	31800084 	addi	r6,r6,2
 800662c:	318d883a 	add	r6,r6,r6
 8006630:	318d883a 	add	r6,r6,r6
 8006634:	1027883a 	mov	r19,r2
 8006638:	80060b80 	call	80060b8 <memcpy>
 800663c:	d9c00017 	ldw	r7,0(sp)
 8006640:	88000a26 	beq	r17,zero,800666c <__multadd+0x118>
 8006644:	88c00117 	ldw	r3,4(r17)
 8006648:	90801317 	ldw	r2,76(r18)
 800664c:	18c7883a 	add	r3,r3,r3
 8006650:	18c7883a 	add	r3,r3,r3
 8006654:	10c5883a 	add	r2,r2,r3
 8006658:	10c00017 	ldw	r3,0(r2)
 800665c:	88c00015 	stw	r3,0(r17)
 8006660:	14400015 	stw	r17,0(r2)
 8006664:	9823883a 	mov	r17,r19
 8006668:	003fd806 	br	80065cc <__alt_data_end+0xff0065cc>
 800666c:	9823883a 	mov	r17,r19
 8006670:	003fd606 	br	80065cc <__alt_data_end+0xff0065cc>

08006674 <__s2b>:
 8006674:	defff904 	addi	sp,sp,-28
 8006678:	dc400115 	stw	r17,4(sp)
 800667c:	dc000015 	stw	r16,0(sp)
 8006680:	2023883a 	mov	r17,r4
 8006684:	2821883a 	mov	r16,r5
 8006688:	39000204 	addi	r4,r7,8
 800668c:	01400244 	movi	r5,9
 8006690:	dcc00315 	stw	r19,12(sp)
 8006694:	dc800215 	stw	r18,8(sp)
 8006698:	dfc00615 	stw	ra,24(sp)
 800669c:	dd400515 	stw	r21,20(sp)
 80066a0:	dd000415 	stw	r20,16(sp)
 80066a4:	3825883a 	mov	r18,r7
 80066a8:	3027883a 	mov	r19,r6
 80066ac:	800a8580 	call	800a858 <__divsi3>
 80066b0:	00c00044 	movi	r3,1
 80066b4:	000b883a 	mov	r5,zero
 80066b8:	1880030e 	bge	r3,r2,80066c8 <__s2b+0x54>
 80066bc:	18c7883a 	add	r3,r3,r3
 80066c0:	29400044 	addi	r5,r5,1
 80066c4:	18bffd16 	blt	r3,r2,80066bc <__alt_data_end+0xff0066bc>
 80066c8:	8809883a 	mov	r4,r17
 80066cc:	80064840 	call	8006484 <_Balloc>
 80066d0:	d8c00717 	ldw	r3,28(sp)
 80066d4:	10c00515 	stw	r3,20(r2)
 80066d8:	00c00044 	movi	r3,1
 80066dc:	10c00415 	stw	r3,16(r2)
 80066e0:	00c00244 	movi	r3,9
 80066e4:	1cc0210e 	bge	r3,r19,800676c <__s2b+0xf8>
 80066e8:	80eb883a 	add	r21,r16,r3
 80066ec:	a829883a 	mov	r20,r21
 80066f0:	84e1883a 	add	r16,r16,r19
 80066f4:	a1c00007 	ldb	r7,0(r20)
 80066f8:	01800284 	movi	r6,10
 80066fc:	a5000044 	addi	r20,r20,1
 8006700:	100b883a 	mov	r5,r2
 8006704:	39fff404 	addi	r7,r7,-48
 8006708:	8809883a 	mov	r4,r17
 800670c:	80065540 	call	8006554 <__multadd>
 8006710:	a43ff81e 	bne	r20,r16,80066f4 <__alt_data_end+0xff0066f4>
 8006714:	ace1883a 	add	r16,r21,r19
 8006718:	843ffe04 	addi	r16,r16,-8
 800671c:	9c800a0e 	bge	r19,r18,8006748 <__s2b+0xd4>
 8006720:	94e5c83a 	sub	r18,r18,r19
 8006724:	84a5883a 	add	r18,r16,r18
 8006728:	81c00007 	ldb	r7,0(r16)
 800672c:	01800284 	movi	r6,10
 8006730:	84000044 	addi	r16,r16,1
 8006734:	100b883a 	mov	r5,r2
 8006738:	39fff404 	addi	r7,r7,-48
 800673c:	8809883a 	mov	r4,r17
 8006740:	80065540 	call	8006554 <__multadd>
 8006744:	84bff81e 	bne	r16,r18,8006728 <__alt_data_end+0xff006728>
 8006748:	dfc00617 	ldw	ra,24(sp)
 800674c:	dd400517 	ldw	r21,20(sp)
 8006750:	dd000417 	ldw	r20,16(sp)
 8006754:	dcc00317 	ldw	r19,12(sp)
 8006758:	dc800217 	ldw	r18,8(sp)
 800675c:	dc400117 	ldw	r17,4(sp)
 8006760:	dc000017 	ldw	r16,0(sp)
 8006764:	dec00704 	addi	sp,sp,28
 8006768:	f800283a 	ret
 800676c:	84000284 	addi	r16,r16,10
 8006770:	1827883a 	mov	r19,r3
 8006774:	003fe906 	br	800671c <__alt_data_end+0xff00671c>

08006778 <__hi0bits>:
 8006778:	20bfffec 	andhi	r2,r4,65535
 800677c:	1000141e 	bne	r2,zero,80067d0 <__hi0bits+0x58>
 8006780:	2008943a 	slli	r4,r4,16
 8006784:	00800404 	movi	r2,16
 8006788:	20ffc02c 	andhi	r3,r4,65280
 800678c:	1800021e 	bne	r3,zero,8006798 <__hi0bits+0x20>
 8006790:	2008923a 	slli	r4,r4,8
 8006794:	10800204 	addi	r2,r2,8
 8006798:	20fc002c 	andhi	r3,r4,61440
 800679c:	1800021e 	bne	r3,zero,80067a8 <__hi0bits+0x30>
 80067a0:	2008913a 	slli	r4,r4,4
 80067a4:	10800104 	addi	r2,r2,4
 80067a8:	20f0002c 	andhi	r3,r4,49152
 80067ac:	1800031e 	bne	r3,zero,80067bc <__hi0bits+0x44>
 80067b0:	2109883a 	add	r4,r4,r4
 80067b4:	10800084 	addi	r2,r2,2
 80067b8:	2109883a 	add	r4,r4,r4
 80067bc:	20000316 	blt	r4,zero,80067cc <__hi0bits+0x54>
 80067c0:	2110002c 	andhi	r4,r4,16384
 80067c4:	2000041e 	bne	r4,zero,80067d8 <__hi0bits+0x60>
 80067c8:	00800804 	movi	r2,32
 80067cc:	f800283a 	ret
 80067d0:	0005883a 	mov	r2,zero
 80067d4:	003fec06 	br	8006788 <__alt_data_end+0xff006788>
 80067d8:	10800044 	addi	r2,r2,1
 80067dc:	f800283a 	ret

080067e0 <__lo0bits>:
 80067e0:	20c00017 	ldw	r3,0(r4)
 80067e4:	188001cc 	andi	r2,r3,7
 80067e8:	10000826 	beq	r2,zero,800680c <__lo0bits+0x2c>
 80067ec:	1880004c 	andi	r2,r3,1
 80067f0:	1000211e 	bne	r2,zero,8006878 <__lo0bits+0x98>
 80067f4:	1880008c 	andi	r2,r3,2
 80067f8:	1000211e 	bne	r2,zero,8006880 <__lo0bits+0xa0>
 80067fc:	1806d0ba 	srli	r3,r3,2
 8006800:	00800084 	movi	r2,2
 8006804:	20c00015 	stw	r3,0(r4)
 8006808:	f800283a 	ret
 800680c:	18bfffcc 	andi	r2,r3,65535
 8006810:	10001326 	beq	r2,zero,8006860 <__lo0bits+0x80>
 8006814:	0005883a 	mov	r2,zero
 8006818:	19403fcc 	andi	r5,r3,255
 800681c:	2800021e 	bne	r5,zero,8006828 <__lo0bits+0x48>
 8006820:	1806d23a 	srli	r3,r3,8
 8006824:	10800204 	addi	r2,r2,8
 8006828:	194003cc 	andi	r5,r3,15
 800682c:	2800021e 	bne	r5,zero,8006838 <__lo0bits+0x58>
 8006830:	1806d13a 	srli	r3,r3,4
 8006834:	10800104 	addi	r2,r2,4
 8006838:	194000cc 	andi	r5,r3,3
 800683c:	2800021e 	bne	r5,zero,8006848 <__lo0bits+0x68>
 8006840:	1806d0ba 	srli	r3,r3,2
 8006844:	10800084 	addi	r2,r2,2
 8006848:	1940004c 	andi	r5,r3,1
 800684c:	2800081e 	bne	r5,zero,8006870 <__lo0bits+0x90>
 8006850:	1806d07a 	srli	r3,r3,1
 8006854:	1800051e 	bne	r3,zero,800686c <__lo0bits+0x8c>
 8006858:	00800804 	movi	r2,32
 800685c:	f800283a 	ret
 8006860:	1806d43a 	srli	r3,r3,16
 8006864:	00800404 	movi	r2,16
 8006868:	003feb06 	br	8006818 <__alt_data_end+0xff006818>
 800686c:	10800044 	addi	r2,r2,1
 8006870:	20c00015 	stw	r3,0(r4)
 8006874:	f800283a 	ret
 8006878:	0005883a 	mov	r2,zero
 800687c:	f800283a 	ret
 8006880:	1806d07a 	srli	r3,r3,1
 8006884:	00800044 	movi	r2,1
 8006888:	20c00015 	stw	r3,0(r4)
 800688c:	f800283a 	ret

08006890 <__i2b>:
 8006890:	defffd04 	addi	sp,sp,-12
 8006894:	dc000015 	stw	r16,0(sp)
 8006898:	04000044 	movi	r16,1
 800689c:	dc400115 	stw	r17,4(sp)
 80068a0:	2823883a 	mov	r17,r5
 80068a4:	800b883a 	mov	r5,r16
 80068a8:	dfc00215 	stw	ra,8(sp)
 80068ac:	80064840 	call	8006484 <_Balloc>
 80068b0:	14400515 	stw	r17,20(r2)
 80068b4:	14000415 	stw	r16,16(r2)
 80068b8:	dfc00217 	ldw	ra,8(sp)
 80068bc:	dc400117 	ldw	r17,4(sp)
 80068c0:	dc000017 	ldw	r16,0(sp)
 80068c4:	dec00304 	addi	sp,sp,12
 80068c8:	f800283a 	ret

080068cc <__multiply>:
 80068cc:	defffa04 	addi	sp,sp,-24
 80068d0:	dcc00315 	stw	r19,12(sp)
 80068d4:	dc800215 	stw	r18,8(sp)
 80068d8:	34c00417 	ldw	r19,16(r6)
 80068dc:	2c800417 	ldw	r18,16(r5)
 80068e0:	dd000415 	stw	r20,16(sp)
 80068e4:	dc400115 	stw	r17,4(sp)
 80068e8:	dfc00515 	stw	ra,20(sp)
 80068ec:	dc000015 	stw	r16,0(sp)
 80068f0:	2829883a 	mov	r20,r5
 80068f4:	3023883a 	mov	r17,r6
 80068f8:	94c0050e 	bge	r18,r19,8006910 <__multiply+0x44>
 80068fc:	9007883a 	mov	r3,r18
 8006900:	3029883a 	mov	r20,r6
 8006904:	9825883a 	mov	r18,r19
 8006908:	2823883a 	mov	r17,r5
 800690c:	1827883a 	mov	r19,r3
 8006910:	a0800217 	ldw	r2,8(r20)
 8006914:	94e1883a 	add	r16,r18,r19
 8006918:	a1400117 	ldw	r5,4(r20)
 800691c:	1400010e 	bge	r2,r16,8006924 <__multiply+0x58>
 8006920:	29400044 	addi	r5,r5,1
 8006924:	80064840 	call	8006484 <_Balloc>
 8006928:	8415883a 	add	r10,r16,r16
 800692c:	12c00504 	addi	r11,r2,20
 8006930:	5295883a 	add	r10,r10,r10
 8006934:	5a95883a 	add	r10,r11,r10
 8006938:	5807883a 	mov	r3,r11
 800693c:	5a80032e 	bgeu	r11,r10,800694c <__multiply+0x80>
 8006940:	18000015 	stw	zero,0(r3)
 8006944:	18c00104 	addi	r3,r3,4
 8006948:	1abffd36 	bltu	r3,r10,8006940 <__alt_data_end+0xff006940>
 800694c:	9ce7883a 	add	r19,r19,r19
 8006950:	94a5883a 	add	r18,r18,r18
 8006954:	89800504 	addi	r6,r17,20
 8006958:	9ce7883a 	add	r19,r19,r19
 800695c:	a3400504 	addi	r13,r20,20
 8006960:	94a5883a 	add	r18,r18,r18
 8006964:	34d9883a 	add	r12,r6,r19
 8006968:	6c93883a 	add	r9,r13,r18
 800696c:	3300422e 	bgeu	r6,r12,8006a78 <__multiply+0x1ac>
 8006970:	37c00017 	ldw	ra,0(r6)
 8006974:	fbffffcc 	andi	r15,ra,65535
 8006978:	78001b26 	beq	r15,zero,80069e8 <__multiply+0x11c>
 800697c:	5811883a 	mov	r8,r11
 8006980:	681d883a 	mov	r14,r13
 8006984:	000f883a 	mov	r7,zero
 8006988:	71000017 	ldw	r4,0(r14)
 800698c:	40c00017 	ldw	r3,0(r8)
 8006990:	73800104 	addi	r14,r14,4
 8006994:	217fffcc 	andi	r5,r4,65535
 8006998:	2bcb383a 	mul	r5,r5,r15
 800699c:	2008d43a 	srli	r4,r4,16
 80069a0:	1c7fffcc 	andi	r17,r3,65535
 80069a4:	2c4b883a 	add	r5,r5,r17
 80069a8:	29cb883a 	add	r5,r5,r7
 80069ac:	23c9383a 	mul	r4,r4,r15
 80069b0:	1806d43a 	srli	r3,r3,16
 80069b4:	280ed43a 	srli	r7,r5,16
 80069b8:	297fffcc 	andi	r5,r5,65535
 80069bc:	20c7883a 	add	r3,r4,r3
 80069c0:	19c7883a 	add	r3,r3,r7
 80069c4:	1808943a 	slli	r4,r3,16
 80069c8:	4023883a 	mov	r17,r8
 80069cc:	180ed43a 	srli	r7,r3,16
 80069d0:	214ab03a 	or	r5,r4,r5
 80069d4:	41400015 	stw	r5,0(r8)
 80069d8:	42000104 	addi	r8,r8,4
 80069dc:	727fea36 	bltu	r14,r9,8006988 <__alt_data_end+0xff006988>
 80069e0:	89c00115 	stw	r7,4(r17)
 80069e4:	37c00017 	ldw	ra,0(r6)
 80069e8:	f83ed43a 	srli	ra,ra,16
 80069ec:	f8001f26 	beq	ra,zero,8006a6c <__multiply+0x1a0>
 80069f0:	58c00017 	ldw	r3,0(r11)
 80069f4:	681d883a 	mov	r14,r13
 80069f8:	581f883a 	mov	r15,r11
 80069fc:	1811883a 	mov	r8,r3
 8006a00:	5825883a 	mov	r18,r11
 8006a04:	000f883a 	mov	r7,zero
 8006a08:	00000106 	br	8006a10 <__multiply+0x144>
 8006a0c:	8825883a 	mov	r18,r17
 8006a10:	7140000b 	ldhu	r5,0(r14)
 8006a14:	4010d43a 	srli	r8,r8,16
 8006a18:	193fffcc 	andi	r4,r3,65535
 8006a1c:	2fcb383a 	mul	r5,r5,ra
 8006a20:	7bc00104 	addi	r15,r15,4
 8006a24:	73800104 	addi	r14,r14,4
 8006a28:	2a0b883a 	add	r5,r5,r8
 8006a2c:	29cb883a 	add	r5,r5,r7
 8006a30:	2806943a 	slli	r3,r5,16
 8006a34:	94400104 	addi	r17,r18,4
 8006a38:	280ad43a 	srli	r5,r5,16
 8006a3c:	1908b03a 	or	r4,r3,r4
 8006a40:	793fff15 	stw	r4,-4(r15)
 8006a44:	70ffff17 	ldw	r3,-4(r14)
 8006a48:	8a000017 	ldw	r8,0(r17)
 8006a4c:	1806d43a 	srli	r3,r3,16
 8006a50:	413fffcc 	andi	r4,r8,65535
 8006a54:	1fc7383a 	mul	r3,r3,ra
 8006a58:	1907883a 	add	r3,r3,r4
 8006a5c:	1947883a 	add	r3,r3,r5
 8006a60:	180ed43a 	srli	r7,r3,16
 8006a64:	727fe936 	bltu	r14,r9,8006a0c <__alt_data_end+0xff006a0c>
 8006a68:	90c00115 	stw	r3,4(r18)
 8006a6c:	31800104 	addi	r6,r6,4
 8006a70:	5ac00104 	addi	r11,r11,4
 8006a74:	333fbe36 	bltu	r6,r12,8006970 <__alt_data_end+0xff006970>
 8006a78:	0400090e 	bge	zero,r16,8006aa0 <__multiply+0x1d4>
 8006a7c:	50ffff17 	ldw	r3,-4(r10)
 8006a80:	52bfff04 	addi	r10,r10,-4
 8006a84:	18000326 	beq	r3,zero,8006a94 <__multiply+0x1c8>
 8006a88:	00000506 	br	8006aa0 <__multiply+0x1d4>
 8006a8c:	50c00017 	ldw	r3,0(r10)
 8006a90:	1800031e 	bne	r3,zero,8006aa0 <__multiply+0x1d4>
 8006a94:	843fffc4 	addi	r16,r16,-1
 8006a98:	52bfff04 	addi	r10,r10,-4
 8006a9c:	803ffb1e 	bne	r16,zero,8006a8c <__alt_data_end+0xff006a8c>
 8006aa0:	14000415 	stw	r16,16(r2)
 8006aa4:	dfc00517 	ldw	ra,20(sp)
 8006aa8:	dd000417 	ldw	r20,16(sp)
 8006aac:	dcc00317 	ldw	r19,12(sp)
 8006ab0:	dc800217 	ldw	r18,8(sp)
 8006ab4:	dc400117 	ldw	r17,4(sp)
 8006ab8:	dc000017 	ldw	r16,0(sp)
 8006abc:	dec00604 	addi	sp,sp,24
 8006ac0:	f800283a 	ret

08006ac4 <__pow5mult>:
 8006ac4:	defffa04 	addi	sp,sp,-24
 8006ac8:	dcc00315 	stw	r19,12(sp)
 8006acc:	dc000015 	stw	r16,0(sp)
 8006ad0:	dfc00515 	stw	ra,20(sp)
 8006ad4:	dd000415 	stw	r20,16(sp)
 8006ad8:	dc800215 	stw	r18,8(sp)
 8006adc:	dc400115 	stw	r17,4(sp)
 8006ae0:	308000cc 	andi	r2,r6,3
 8006ae4:	3021883a 	mov	r16,r6
 8006ae8:	2027883a 	mov	r19,r4
 8006aec:	10002f1e 	bne	r2,zero,8006bac <__pow5mult+0xe8>
 8006af0:	2825883a 	mov	r18,r5
 8006af4:	8021d0ba 	srai	r16,r16,2
 8006af8:	80001a26 	beq	r16,zero,8006b64 <__pow5mult+0xa0>
 8006afc:	9c401217 	ldw	r17,72(r19)
 8006b00:	8800061e 	bne	r17,zero,8006b1c <__pow5mult+0x58>
 8006b04:	00003406 	br	8006bd8 <__pow5mult+0x114>
 8006b08:	8021d07a 	srai	r16,r16,1
 8006b0c:	80001526 	beq	r16,zero,8006b64 <__pow5mult+0xa0>
 8006b10:	88800017 	ldw	r2,0(r17)
 8006b14:	10001c26 	beq	r2,zero,8006b88 <__pow5mult+0xc4>
 8006b18:	1023883a 	mov	r17,r2
 8006b1c:	8080004c 	andi	r2,r16,1
 8006b20:	103ff926 	beq	r2,zero,8006b08 <__alt_data_end+0xff006b08>
 8006b24:	880d883a 	mov	r6,r17
 8006b28:	900b883a 	mov	r5,r18
 8006b2c:	9809883a 	mov	r4,r19
 8006b30:	80068cc0 	call	80068cc <__multiply>
 8006b34:	90001b26 	beq	r18,zero,8006ba4 <__pow5mult+0xe0>
 8006b38:	91000117 	ldw	r4,4(r18)
 8006b3c:	98c01317 	ldw	r3,76(r19)
 8006b40:	8021d07a 	srai	r16,r16,1
 8006b44:	2109883a 	add	r4,r4,r4
 8006b48:	2109883a 	add	r4,r4,r4
 8006b4c:	1907883a 	add	r3,r3,r4
 8006b50:	19000017 	ldw	r4,0(r3)
 8006b54:	91000015 	stw	r4,0(r18)
 8006b58:	1c800015 	stw	r18,0(r3)
 8006b5c:	1025883a 	mov	r18,r2
 8006b60:	803feb1e 	bne	r16,zero,8006b10 <__alt_data_end+0xff006b10>
 8006b64:	9005883a 	mov	r2,r18
 8006b68:	dfc00517 	ldw	ra,20(sp)
 8006b6c:	dd000417 	ldw	r20,16(sp)
 8006b70:	dcc00317 	ldw	r19,12(sp)
 8006b74:	dc800217 	ldw	r18,8(sp)
 8006b78:	dc400117 	ldw	r17,4(sp)
 8006b7c:	dc000017 	ldw	r16,0(sp)
 8006b80:	dec00604 	addi	sp,sp,24
 8006b84:	f800283a 	ret
 8006b88:	880d883a 	mov	r6,r17
 8006b8c:	880b883a 	mov	r5,r17
 8006b90:	9809883a 	mov	r4,r19
 8006b94:	80068cc0 	call	80068cc <__multiply>
 8006b98:	88800015 	stw	r2,0(r17)
 8006b9c:	10000015 	stw	zero,0(r2)
 8006ba0:	003fdd06 	br	8006b18 <__alt_data_end+0xff006b18>
 8006ba4:	1025883a 	mov	r18,r2
 8006ba8:	003fd706 	br	8006b08 <__alt_data_end+0xff006b08>
 8006bac:	10bfffc4 	addi	r2,r2,-1
 8006bb0:	1085883a 	add	r2,r2,r2
 8006bb4:	00c20074 	movhi	r3,2049
 8006bb8:	18c6a704 	addi	r3,r3,6812
 8006bbc:	1085883a 	add	r2,r2,r2
 8006bc0:	1885883a 	add	r2,r3,r2
 8006bc4:	11800017 	ldw	r6,0(r2)
 8006bc8:	000f883a 	mov	r7,zero
 8006bcc:	80065540 	call	8006554 <__multadd>
 8006bd0:	1025883a 	mov	r18,r2
 8006bd4:	003fc706 	br	8006af4 <__alt_data_end+0xff006af4>
 8006bd8:	05000044 	movi	r20,1
 8006bdc:	a00b883a 	mov	r5,r20
 8006be0:	9809883a 	mov	r4,r19
 8006be4:	80064840 	call	8006484 <_Balloc>
 8006be8:	1023883a 	mov	r17,r2
 8006bec:	00809c44 	movi	r2,625
 8006bf0:	88800515 	stw	r2,20(r17)
 8006bf4:	8d000415 	stw	r20,16(r17)
 8006bf8:	9c401215 	stw	r17,72(r19)
 8006bfc:	88000015 	stw	zero,0(r17)
 8006c00:	003fc606 	br	8006b1c <__alt_data_end+0xff006b1c>

08006c04 <__lshift>:
 8006c04:	defff904 	addi	sp,sp,-28
 8006c08:	dd400515 	stw	r21,20(sp)
 8006c0c:	dcc00315 	stw	r19,12(sp)
 8006c10:	302bd17a 	srai	r21,r6,5
 8006c14:	2cc00417 	ldw	r19,16(r5)
 8006c18:	28800217 	ldw	r2,8(r5)
 8006c1c:	dd000415 	stw	r20,16(sp)
 8006c20:	ace7883a 	add	r19,r21,r19
 8006c24:	dc800215 	stw	r18,8(sp)
 8006c28:	dc400115 	stw	r17,4(sp)
 8006c2c:	dc000015 	stw	r16,0(sp)
 8006c30:	dfc00615 	stw	ra,24(sp)
 8006c34:	9c000044 	addi	r16,r19,1
 8006c38:	2823883a 	mov	r17,r5
 8006c3c:	3029883a 	mov	r20,r6
 8006c40:	2025883a 	mov	r18,r4
 8006c44:	29400117 	ldw	r5,4(r5)
 8006c48:	1400030e 	bge	r2,r16,8006c58 <__lshift+0x54>
 8006c4c:	1085883a 	add	r2,r2,r2
 8006c50:	29400044 	addi	r5,r5,1
 8006c54:	143ffd16 	blt	r2,r16,8006c4c <__alt_data_end+0xff006c4c>
 8006c58:	9009883a 	mov	r4,r18
 8006c5c:	80064840 	call	8006484 <_Balloc>
 8006c60:	10c00504 	addi	r3,r2,20
 8006c64:	0540070e 	bge	zero,r21,8006c84 <__lshift+0x80>
 8006c68:	ad6b883a 	add	r21,r21,r21
 8006c6c:	ad6b883a 	add	r21,r21,r21
 8006c70:	1809883a 	mov	r4,r3
 8006c74:	1d47883a 	add	r3,r3,r21
 8006c78:	20000015 	stw	zero,0(r4)
 8006c7c:	21000104 	addi	r4,r4,4
 8006c80:	193ffd1e 	bne	r3,r4,8006c78 <__alt_data_end+0xff006c78>
 8006c84:	8a000417 	ldw	r8,16(r17)
 8006c88:	89000504 	addi	r4,r17,20
 8006c8c:	a18007cc 	andi	r6,r20,31
 8006c90:	4211883a 	add	r8,r8,r8
 8006c94:	4211883a 	add	r8,r8,r8
 8006c98:	2211883a 	add	r8,r4,r8
 8006c9c:	30002326 	beq	r6,zero,8006d2c <__lshift+0x128>
 8006ca0:	02400804 	movi	r9,32
 8006ca4:	4993c83a 	sub	r9,r9,r6
 8006ca8:	000b883a 	mov	r5,zero
 8006cac:	21c00017 	ldw	r7,0(r4)
 8006cb0:	1815883a 	mov	r10,r3
 8006cb4:	18c00104 	addi	r3,r3,4
 8006cb8:	398e983a 	sll	r7,r7,r6
 8006cbc:	21000104 	addi	r4,r4,4
 8006cc0:	394ab03a 	or	r5,r7,r5
 8006cc4:	197fff15 	stw	r5,-4(r3)
 8006cc8:	217fff17 	ldw	r5,-4(r4)
 8006ccc:	2a4ad83a 	srl	r5,r5,r9
 8006cd0:	223ff636 	bltu	r4,r8,8006cac <__alt_data_end+0xff006cac>
 8006cd4:	51400115 	stw	r5,4(r10)
 8006cd8:	28001a1e 	bne	r5,zero,8006d44 <__lshift+0x140>
 8006cdc:	843fffc4 	addi	r16,r16,-1
 8006ce0:	14000415 	stw	r16,16(r2)
 8006ce4:	88000826 	beq	r17,zero,8006d08 <__lshift+0x104>
 8006ce8:	89000117 	ldw	r4,4(r17)
 8006cec:	90c01317 	ldw	r3,76(r18)
 8006cf0:	2109883a 	add	r4,r4,r4
 8006cf4:	2109883a 	add	r4,r4,r4
 8006cf8:	1907883a 	add	r3,r3,r4
 8006cfc:	19000017 	ldw	r4,0(r3)
 8006d00:	89000015 	stw	r4,0(r17)
 8006d04:	1c400015 	stw	r17,0(r3)
 8006d08:	dfc00617 	ldw	ra,24(sp)
 8006d0c:	dd400517 	ldw	r21,20(sp)
 8006d10:	dd000417 	ldw	r20,16(sp)
 8006d14:	dcc00317 	ldw	r19,12(sp)
 8006d18:	dc800217 	ldw	r18,8(sp)
 8006d1c:	dc400117 	ldw	r17,4(sp)
 8006d20:	dc000017 	ldw	r16,0(sp)
 8006d24:	dec00704 	addi	sp,sp,28
 8006d28:	f800283a 	ret
 8006d2c:	21400017 	ldw	r5,0(r4)
 8006d30:	18c00104 	addi	r3,r3,4
 8006d34:	21000104 	addi	r4,r4,4
 8006d38:	197fff15 	stw	r5,-4(r3)
 8006d3c:	223ffb36 	bltu	r4,r8,8006d2c <__alt_data_end+0xff006d2c>
 8006d40:	003fe606 	br	8006cdc <__alt_data_end+0xff006cdc>
 8006d44:	9c000084 	addi	r16,r19,2
 8006d48:	003fe406 	br	8006cdc <__alt_data_end+0xff006cdc>

08006d4c <__mcmp>:
 8006d4c:	20800417 	ldw	r2,16(r4)
 8006d50:	28c00417 	ldw	r3,16(r5)
 8006d54:	10c5c83a 	sub	r2,r2,r3
 8006d58:	1000111e 	bne	r2,zero,8006da0 <__mcmp+0x54>
 8006d5c:	18c7883a 	add	r3,r3,r3
 8006d60:	18c7883a 	add	r3,r3,r3
 8006d64:	21000504 	addi	r4,r4,20
 8006d68:	29400504 	addi	r5,r5,20
 8006d6c:	20c5883a 	add	r2,r4,r3
 8006d70:	28cb883a 	add	r5,r5,r3
 8006d74:	00000106 	br	8006d7c <__mcmp+0x30>
 8006d78:	20800a2e 	bgeu	r4,r2,8006da4 <__mcmp+0x58>
 8006d7c:	10bfff04 	addi	r2,r2,-4
 8006d80:	297fff04 	addi	r5,r5,-4
 8006d84:	11800017 	ldw	r6,0(r2)
 8006d88:	28c00017 	ldw	r3,0(r5)
 8006d8c:	30fffa26 	beq	r6,r3,8006d78 <__alt_data_end+0xff006d78>
 8006d90:	30c00236 	bltu	r6,r3,8006d9c <__mcmp+0x50>
 8006d94:	00800044 	movi	r2,1
 8006d98:	f800283a 	ret
 8006d9c:	00bfffc4 	movi	r2,-1
 8006da0:	f800283a 	ret
 8006da4:	0005883a 	mov	r2,zero
 8006da8:	f800283a 	ret

08006dac <__mdiff>:
 8006dac:	28c00417 	ldw	r3,16(r5)
 8006db0:	30800417 	ldw	r2,16(r6)
 8006db4:	defffa04 	addi	sp,sp,-24
 8006db8:	dcc00315 	stw	r19,12(sp)
 8006dbc:	dc800215 	stw	r18,8(sp)
 8006dc0:	dfc00515 	stw	ra,20(sp)
 8006dc4:	dd000415 	stw	r20,16(sp)
 8006dc8:	dc400115 	stw	r17,4(sp)
 8006dcc:	dc000015 	stw	r16,0(sp)
 8006dd0:	1887c83a 	sub	r3,r3,r2
 8006dd4:	2825883a 	mov	r18,r5
 8006dd8:	3027883a 	mov	r19,r6
 8006ddc:	1800141e 	bne	r3,zero,8006e30 <__mdiff+0x84>
 8006de0:	1085883a 	add	r2,r2,r2
 8006de4:	1085883a 	add	r2,r2,r2
 8006de8:	2a000504 	addi	r8,r5,20
 8006dec:	34000504 	addi	r16,r6,20
 8006df0:	4087883a 	add	r3,r8,r2
 8006df4:	8085883a 	add	r2,r16,r2
 8006df8:	00000106 	br	8006e00 <__mdiff+0x54>
 8006dfc:	40c0592e 	bgeu	r8,r3,8006f64 <__mdiff+0x1b8>
 8006e00:	18ffff04 	addi	r3,r3,-4
 8006e04:	10bfff04 	addi	r2,r2,-4
 8006e08:	19c00017 	ldw	r7,0(r3)
 8006e0c:	11400017 	ldw	r5,0(r2)
 8006e10:	397ffa26 	beq	r7,r5,8006dfc <__alt_data_end+0xff006dfc>
 8006e14:	3940592e 	bgeu	r7,r5,8006f7c <__mdiff+0x1d0>
 8006e18:	9005883a 	mov	r2,r18
 8006e1c:	4023883a 	mov	r17,r8
 8006e20:	9825883a 	mov	r18,r19
 8006e24:	05000044 	movi	r20,1
 8006e28:	1027883a 	mov	r19,r2
 8006e2c:	00000406 	br	8006e40 <__mdiff+0x94>
 8006e30:	18005616 	blt	r3,zero,8006f8c <__mdiff+0x1e0>
 8006e34:	34400504 	addi	r17,r6,20
 8006e38:	2c000504 	addi	r16,r5,20
 8006e3c:	0029883a 	mov	r20,zero
 8006e40:	91400117 	ldw	r5,4(r18)
 8006e44:	80064840 	call	8006484 <_Balloc>
 8006e48:	92400417 	ldw	r9,16(r18)
 8006e4c:	9b000417 	ldw	r12,16(r19)
 8006e50:	12c00504 	addi	r11,r2,20
 8006e54:	4a51883a 	add	r8,r9,r9
 8006e58:	6319883a 	add	r12,r12,r12
 8006e5c:	4211883a 	add	r8,r8,r8
 8006e60:	6319883a 	add	r12,r12,r12
 8006e64:	15000315 	stw	r20,12(r2)
 8006e68:	8211883a 	add	r8,r16,r8
 8006e6c:	8b19883a 	add	r12,r17,r12
 8006e70:	0007883a 	mov	r3,zero
 8006e74:	81400017 	ldw	r5,0(r16)
 8006e78:	89c00017 	ldw	r7,0(r17)
 8006e7c:	59800104 	addi	r6,r11,4
 8006e80:	293fffcc 	andi	r4,r5,65535
 8006e84:	20c7883a 	add	r3,r4,r3
 8006e88:	393fffcc 	andi	r4,r7,65535
 8006e8c:	1909c83a 	sub	r4,r3,r4
 8006e90:	280ad43a 	srli	r5,r5,16
 8006e94:	380ed43a 	srli	r7,r7,16
 8006e98:	2007d43a 	srai	r3,r4,16
 8006e9c:	213fffcc 	andi	r4,r4,65535
 8006ea0:	29cbc83a 	sub	r5,r5,r7
 8006ea4:	28c7883a 	add	r3,r5,r3
 8006ea8:	180a943a 	slli	r5,r3,16
 8006eac:	8c400104 	addi	r17,r17,4
 8006eb0:	84000104 	addi	r16,r16,4
 8006eb4:	2908b03a 	or	r4,r5,r4
 8006eb8:	59000015 	stw	r4,0(r11)
 8006ebc:	1807d43a 	srai	r3,r3,16
 8006ec0:	3015883a 	mov	r10,r6
 8006ec4:	3017883a 	mov	r11,r6
 8006ec8:	8b3fea36 	bltu	r17,r12,8006e74 <__alt_data_end+0xff006e74>
 8006ecc:	8200162e 	bgeu	r16,r8,8006f28 <__mdiff+0x17c>
 8006ed0:	8017883a 	mov	r11,r16
 8006ed4:	59400017 	ldw	r5,0(r11)
 8006ed8:	31800104 	addi	r6,r6,4
 8006edc:	5ac00104 	addi	r11,r11,4
 8006ee0:	293fffcc 	andi	r4,r5,65535
 8006ee4:	20c7883a 	add	r3,r4,r3
 8006ee8:	280ed43a 	srli	r7,r5,16
 8006eec:	180bd43a 	srai	r5,r3,16
 8006ef0:	193fffcc 	andi	r4,r3,65535
 8006ef4:	3947883a 	add	r3,r7,r5
 8006ef8:	180a943a 	slli	r5,r3,16
 8006efc:	1807d43a 	srai	r3,r3,16
 8006f00:	2908b03a 	or	r4,r5,r4
 8006f04:	313fff15 	stw	r4,-4(r6)
 8006f08:	5a3ff236 	bltu	r11,r8,8006ed4 <__alt_data_end+0xff006ed4>
 8006f0c:	0406303a 	nor	r3,zero,r16
 8006f10:	1a07883a 	add	r3,r3,r8
 8006f14:	1806d0ba 	srli	r3,r3,2
 8006f18:	18c00044 	addi	r3,r3,1
 8006f1c:	18c7883a 	add	r3,r3,r3
 8006f20:	18c7883a 	add	r3,r3,r3
 8006f24:	50d5883a 	add	r10,r10,r3
 8006f28:	50ffff04 	addi	r3,r10,-4
 8006f2c:	2000041e 	bne	r4,zero,8006f40 <__mdiff+0x194>
 8006f30:	18ffff04 	addi	r3,r3,-4
 8006f34:	19000017 	ldw	r4,0(r3)
 8006f38:	4a7fffc4 	addi	r9,r9,-1
 8006f3c:	203ffc26 	beq	r4,zero,8006f30 <__alt_data_end+0xff006f30>
 8006f40:	12400415 	stw	r9,16(r2)
 8006f44:	dfc00517 	ldw	ra,20(sp)
 8006f48:	dd000417 	ldw	r20,16(sp)
 8006f4c:	dcc00317 	ldw	r19,12(sp)
 8006f50:	dc800217 	ldw	r18,8(sp)
 8006f54:	dc400117 	ldw	r17,4(sp)
 8006f58:	dc000017 	ldw	r16,0(sp)
 8006f5c:	dec00604 	addi	sp,sp,24
 8006f60:	f800283a 	ret
 8006f64:	000b883a 	mov	r5,zero
 8006f68:	80064840 	call	8006484 <_Balloc>
 8006f6c:	00c00044 	movi	r3,1
 8006f70:	10c00415 	stw	r3,16(r2)
 8006f74:	10000515 	stw	zero,20(r2)
 8006f78:	003ff206 	br	8006f44 <__alt_data_end+0xff006f44>
 8006f7c:	8023883a 	mov	r17,r16
 8006f80:	0029883a 	mov	r20,zero
 8006f84:	4021883a 	mov	r16,r8
 8006f88:	003fad06 	br	8006e40 <__alt_data_end+0xff006e40>
 8006f8c:	9005883a 	mov	r2,r18
 8006f90:	94400504 	addi	r17,r18,20
 8006f94:	9c000504 	addi	r16,r19,20
 8006f98:	9825883a 	mov	r18,r19
 8006f9c:	05000044 	movi	r20,1
 8006fa0:	1027883a 	mov	r19,r2
 8006fa4:	003fa606 	br	8006e40 <__alt_data_end+0xff006e40>

08006fa8 <__ulp>:
 8006fa8:	295ffc2c 	andhi	r5,r5,32752
 8006fac:	00bf3034 	movhi	r2,64704
 8006fb0:	2887883a 	add	r3,r5,r2
 8006fb4:	00c0020e 	bge	zero,r3,8006fc0 <__ulp+0x18>
 8006fb8:	0005883a 	mov	r2,zero
 8006fbc:	f800283a 	ret
 8006fc0:	00c7c83a 	sub	r3,zero,r3
 8006fc4:	1807d53a 	srai	r3,r3,20
 8006fc8:	008004c4 	movi	r2,19
 8006fcc:	10c00b0e 	bge	r2,r3,8006ffc <__ulp+0x54>
 8006fd0:	18bffb04 	addi	r2,r3,-20
 8006fd4:	01000784 	movi	r4,30
 8006fd8:	0007883a 	mov	r3,zero
 8006fdc:	20800516 	blt	r4,r2,8006ff4 <__ulp+0x4c>
 8006fe0:	010007c4 	movi	r4,31
 8006fe4:	2089c83a 	sub	r4,r4,r2
 8006fe8:	00800044 	movi	r2,1
 8006fec:	1104983a 	sll	r2,r2,r4
 8006ff0:	f800283a 	ret
 8006ff4:	00800044 	movi	r2,1
 8006ff8:	f800283a 	ret
 8006ffc:	01400234 	movhi	r5,8
 8007000:	28c7d83a 	sra	r3,r5,r3
 8007004:	0005883a 	mov	r2,zero
 8007008:	f800283a 	ret

0800700c <__b2d>:
 800700c:	defffa04 	addi	sp,sp,-24
 8007010:	dc000015 	stw	r16,0(sp)
 8007014:	24000417 	ldw	r16,16(r4)
 8007018:	dc400115 	stw	r17,4(sp)
 800701c:	24400504 	addi	r17,r4,20
 8007020:	8421883a 	add	r16,r16,r16
 8007024:	8421883a 	add	r16,r16,r16
 8007028:	8c21883a 	add	r16,r17,r16
 800702c:	dc800215 	stw	r18,8(sp)
 8007030:	84bfff17 	ldw	r18,-4(r16)
 8007034:	dd000415 	stw	r20,16(sp)
 8007038:	dcc00315 	stw	r19,12(sp)
 800703c:	9009883a 	mov	r4,r18
 8007040:	2829883a 	mov	r20,r5
 8007044:	dfc00515 	stw	ra,20(sp)
 8007048:	80067780 	call	8006778 <__hi0bits>
 800704c:	00c00804 	movi	r3,32
 8007050:	1889c83a 	sub	r4,r3,r2
 8007054:	a1000015 	stw	r4,0(r20)
 8007058:	01000284 	movi	r4,10
 800705c:	84ffff04 	addi	r19,r16,-4
 8007060:	20801216 	blt	r4,r2,80070ac <__b2d+0xa0>
 8007064:	018002c4 	movi	r6,11
 8007068:	308dc83a 	sub	r6,r6,r2
 800706c:	9186d83a 	srl	r3,r18,r6
 8007070:	18cffc34 	orhi	r3,r3,16368
 8007074:	8cc0212e 	bgeu	r17,r19,80070fc <__b2d+0xf0>
 8007078:	813ffe17 	ldw	r4,-8(r16)
 800707c:	218cd83a 	srl	r6,r4,r6
 8007080:	10800544 	addi	r2,r2,21
 8007084:	9084983a 	sll	r2,r18,r2
 8007088:	1184b03a 	or	r2,r2,r6
 800708c:	dfc00517 	ldw	ra,20(sp)
 8007090:	dd000417 	ldw	r20,16(sp)
 8007094:	dcc00317 	ldw	r19,12(sp)
 8007098:	dc800217 	ldw	r18,8(sp)
 800709c:	dc400117 	ldw	r17,4(sp)
 80070a0:	dc000017 	ldw	r16,0(sp)
 80070a4:	dec00604 	addi	sp,sp,24
 80070a8:	f800283a 	ret
 80070ac:	8cc00f2e 	bgeu	r17,r19,80070ec <__b2d+0xe0>
 80070b0:	117ffd44 	addi	r5,r2,-11
 80070b4:	80bffe17 	ldw	r2,-8(r16)
 80070b8:	28000e26 	beq	r5,zero,80070f4 <__b2d+0xe8>
 80070bc:	1949c83a 	sub	r4,r3,r5
 80070c0:	9164983a 	sll	r18,r18,r5
 80070c4:	1106d83a 	srl	r3,r2,r4
 80070c8:	81bffe04 	addi	r6,r16,-8
 80070cc:	948ffc34 	orhi	r18,r18,16368
 80070d0:	90c6b03a 	or	r3,r18,r3
 80070d4:	89800e2e 	bgeu	r17,r6,8007110 <__b2d+0x104>
 80070d8:	81bffd17 	ldw	r6,-12(r16)
 80070dc:	1144983a 	sll	r2,r2,r5
 80070e0:	310ad83a 	srl	r5,r6,r4
 80070e4:	2884b03a 	or	r2,r5,r2
 80070e8:	003fe806 	br	800708c <__alt_data_end+0xff00708c>
 80070ec:	10bffd44 	addi	r2,r2,-11
 80070f0:	1000041e 	bne	r2,zero,8007104 <__b2d+0xf8>
 80070f4:	90cffc34 	orhi	r3,r18,16368
 80070f8:	003fe406 	br	800708c <__alt_data_end+0xff00708c>
 80070fc:	000d883a 	mov	r6,zero
 8007100:	003fdf06 	br	8007080 <__alt_data_end+0xff007080>
 8007104:	90a4983a 	sll	r18,r18,r2
 8007108:	0005883a 	mov	r2,zero
 800710c:	003ff906 	br	80070f4 <__alt_data_end+0xff0070f4>
 8007110:	1144983a 	sll	r2,r2,r5
 8007114:	003fdd06 	br	800708c <__alt_data_end+0xff00708c>

08007118 <__d2b>:
 8007118:	defff804 	addi	sp,sp,-32
 800711c:	dc000215 	stw	r16,8(sp)
 8007120:	3021883a 	mov	r16,r6
 8007124:	dc400315 	stw	r17,12(sp)
 8007128:	8022907a 	slli	r17,r16,1
 800712c:	dd000615 	stw	r20,24(sp)
 8007130:	2829883a 	mov	r20,r5
 8007134:	01400044 	movi	r5,1
 8007138:	dcc00515 	stw	r19,20(sp)
 800713c:	dc800415 	stw	r18,16(sp)
 8007140:	dfc00715 	stw	ra,28(sp)
 8007144:	3825883a 	mov	r18,r7
 8007148:	8822d57a 	srli	r17,r17,21
 800714c:	80064840 	call	8006484 <_Balloc>
 8007150:	1027883a 	mov	r19,r2
 8007154:	00800434 	movhi	r2,16
 8007158:	10bfffc4 	addi	r2,r2,-1
 800715c:	808c703a 	and	r6,r16,r2
 8007160:	88000126 	beq	r17,zero,8007168 <__d2b+0x50>
 8007164:	31800434 	orhi	r6,r6,16
 8007168:	d9800015 	stw	r6,0(sp)
 800716c:	a0002426 	beq	r20,zero,8007200 <__d2b+0xe8>
 8007170:	d9000104 	addi	r4,sp,4
 8007174:	dd000115 	stw	r20,4(sp)
 8007178:	80067e00 	call	80067e0 <__lo0bits>
 800717c:	d8c00017 	ldw	r3,0(sp)
 8007180:	10002f1e 	bne	r2,zero,8007240 <__d2b+0x128>
 8007184:	d9000117 	ldw	r4,4(sp)
 8007188:	99000515 	stw	r4,20(r19)
 800718c:	1821003a 	cmpeq	r16,r3,zero
 8007190:	01000084 	movi	r4,2
 8007194:	2421c83a 	sub	r16,r4,r16
 8007198:	98c00615 	stw	r3,24(r19)
 800719c:	9c000415 	stw	r16,16(r19)
 80071a0:	88001f1e 	bne	r17,zero,8007220 <__d2b+0x108>
 80071a4:	10bef384 	addi	r2,r2,-1074
 80071a8:	90800015 	stw	r2,0(r18)
 80071ac:	00900034 	movhi	r2,16384
 80071b0:	10bfffc4 	addi	r2,r2,-1
 80071b4:	8085883a 	add	r2,r16,r2
 80071b8:	1085883a 	add	r2,r2,r2
 80071bc:	1085883a 	add	r2,r2,r2
 80071c0:	9885883a 	add	r2,r19,r2
 80071c4:	11000517 	ldw	r4,20(r2)
 80071c8:	8020917a 	slli	r16,r16,5
 80071cc:	80067780 	call	8006778 <__hi0bits>
 80071d0:	d8c00817 	ldw	r3,32(sp)
 80071d4:	8085c83a 	sub	r2,r16,r2
 80071d8:	18800015 	stw	r2,0(r3)
 80071dc:	9805883a 	mov	r2,r19
 80071e0:	dfc00717 	ldw	ra,28(sp)
 80071e4:	dd000617 	ldw	r20,24(sp)
 80071e8:	dcc00517 	ldw	r19,20(sp)
 80071ec:	dc800417 	ldw	r18,16(sp)
 80071f0:	dc400317 	ldw	r17,12(sp)
 80071f4:	dc000217 	ldw	r16,8(sp)
 80071f8:	dec00804 	addi	sp,sp,32
 80071fc:	f800283a 	ret
 8007200:	d809883a 	mov	r4,sp
 8007204:	80067e00 	call	80067e0 <__lo0bits>
 8007208:	d8c00017 	ldw	r3,0(sp)
 800720c:	04000044 	movi	r16,1
 8007210:	9c000415 	stw	r16,16(r19)
 8007214:	98c00515 	stw	r3,20(r19)
 8007218:	10800804 	addi	r2,r2,32
 800721c:	883fe126 	beq	r17,zero,80071a4 <__alt_data_end+0xff0071a4>
 8007220:	00c00d44 	movi	r3,53
 8007224:	8c7ef344 	addi	r17,r17,-1075
 8007228:	88a3883a 	add	r17,r17,r2
 800722c:	1885c83a 	sub	r2,r3,r2
 8007230:	d8c00817 	ldw	r3,32(sp)
 8007234:	94400015 	stw	r17,0(r18)
 8007238:	18800015 	stw	r2,0(r3)
 800723c:	003fe706 	br	80071dc <__alt_data_end+0xff0071dc>
 8007240:	01000804 	movi	r4,32
 8007244:	2089c83a 	sub	r4,r4,r2
 8007248:	1908983a 	sll	r4,r3,r4
 800724c:	d9400117 	ldw	r5,4(sp)
 8007250:	1886d83a 	srl	r3,r3,r2
 8007254:	2148b03a 	or	r4,r4,r5
 8007258:	99000515 	stw	r4,20(r19)
 800725c:	d8c00015 	stw	r3,0(sp)
 8007260:	003fca06 	br	800718c <__alt_data_end+0xff00718c>

08007264 <__ratio>:
 8007264:	defff904 	addi	sp,sp,-28
 8007268:	dc400315 	stw	r17,12(sp)
 800726c:	2823883a 	mov	r17,r5
 8007270:	d9400104 	addi	r5,sp,4
 8007274:	dfc00615 	stw	ra,24(sp)
 8007278:	dcc00515 	stw	r19,20(sp)
 800727c:	dc800415 	stw	r18,16(sp)
 8007280:	2027883a 	mov	r19,r4
 8007284:	dc000215 	stw	r16,8(sp)
 8007288:	800700c0 	call	800700c <__b2d>
 800728c:	d80b883a 	mov	r5,sp
 8007290:	8809883a 	mov	r4,r17
 8007294:	1025883a 	mov	r18,r2
 8007298:	1821883a 	mov	r16,r3
 800729c:	800700c0 	call	800700c <__b2d>
 80072a0:	8a000417 	ldw	r8,16(r17)
 80072a4:	99000417 	ldw	r4,16(r19)
 80072a8:	d9400117 	ldw	r5,4(sp)
 80072ac:	2209c83a 	sub	r4,r4,r8
 80072b0:	2010917a 	slli	r8,r4,5
 80072b4:	d9000017 	ldw	r4,0(sp)
 80072b8:	2909c83a 	sub	r4,r5,r4
 80072bc:	4109883a 	add	r4,r8,r4
 80072c0:	01000e0e 	bge	zero,r4,80072fc <__ratio+0x98>
 80072c4:	2008953a 	slli	r4,r4,20
 80072c8:	2421883a 	add	r16,r4,r16
 80072cc:	100d883a 	mov	r6,r2
 80072d0:	180f883a 	mov	r7,r3
 80072d4:	9009883a 	mov	r4,r18
 80072d8:	800b883a 	mov	r5,r16
 80072dc:	800b2b80 	call	800b2b8 <__divdf3>
 80072e0:	dfc00617 	ldw	ra,24(sp)
 80072e4:	dcc00517 	ldw	r19,20(sp)
 80072e8:	dc800417 	ldw	r18,16(sp)
 80072ec:	dc400317 	ldw	r17,12(sp)
 80072f0:	dc000217 	ldw	r16,8(sp)
 80072f4:	dec00704 	addi	sp,sp,28
 80072f8:	f800283a 	ret
 80072fc:	2008953a 	slli	r4,r4,20
 8007300:	1907c83a 	sub	r3,r3,r4
 8007304:	003ff106 	br	80072cc <__alt_data_end+0xff0072cc>

08007308 <_mprec_log10>:
 8007308:	defffe04 	addi	sp,sp,-8
 800730c:	dc000015 	stw	r16,0(sp)
 8007310:	dfc00115 	stw	ra,4(sp)
 8007314:	008005c4 	movi	r2,23
 8007318:	2021883a 	mov	r16,r4
 800731c:	11000d0e 	bge	r2,r4,8007354 <_mprec_log10+0x4c>
 8007320:	0005883a 	mov	r2,zero
 8007324:	00cffc34 	movhi	r3,16368
 8007328:	843fffc4 	addi	r16,r16,-1
 800732c:	000d883a 	mov	r6,zero
 8007330:	01d00934 	movhi	r7,16420
 8007334:	1009883a 	mov	r4,r2
 8007338:	180b883a 	mov	r5,r3
 800733c:	800bdf80 	call	800bdf8 <__muldf3>
 8007340:	803ff91e 	bne	r16,zero,8007328 <__alt_data_end+0xff007328>
 8007344:	dfc00117 	ldw	ra,4(sp)
 8007348:	dc000017 	ldw	r16,0(sp)
 800734c:	dec00204 	addi	sp,sp,8
 8007350:	f800283a 	ret
 8007354:	202090fa 	slli	r16,r4,3
 8007358:	00820074 	movhi	r2,2049
 800735c:	1086be04 	addi	r2,r2,6904
 8007360:	1421883a 	add	r16,r2,r16
 8007364:	80800017 	ldw	r2,0(r16)
 8007368:	80c00117 	ldw	r3,4(r16)
 800736c:	dfc00117 	ldw	ra,4(sp)
 8007370:	dc000017 	ldw	r16,0(sp)
 8007374:	dec00204 	addi	sp,sp,8
 8007378:	f800283a 	ret

0800737c <__copybits>:
 800737c:	297fffc4 	addi	r5,r5,-1
 8007380:	280fd17a 	srai	r7,r5,5
 8007384:	30c00417 	ldw	r3,16(r6)
 8007388:	30800504 	addi	r2,r6,20
 800738c:	39c00044 	addi	r7,r7,1
 8007390:	18c7883a 	add	r3,r3,r3
 8007394:	39cf883a 	add	r7,r7,r7
 8007398:	18c7883a 	add	r3,r3,r3
 800739c:	39cf883a 	add	r7,r7,r7
 80073a0:	10c7883a 	add	r3,r2,r3
 80073a4:	21cf883a 	add	r7,r4,r7
 80073a8:	10c00d2e 	bgeu	r2,r3,80073e0 <__copybits+0x64>
 80073ac:	200b883a 	mov	r5,r4
 80073b0:	12000017 	ldw	r8,0(r2)
 80073b4:	29400104 	addi	r5,r5,4
 80073b8:	10800104 	addi	r2,r2,4
 80073bc:	2a3fff15 	stw	r8,-4(r5)
 80073c0:	10fffb36 	bltu	r2,r3,80073b0 <__alt_data_end+0xff0073b0>
 80073c4:	1985c83a 	sub	r2,r3,r6
 80073c8:	10bffac4 	addi	r2,r2,-21
 80073cc:	1004d0ba 	srli	r2,r2,2
 80073d0:	10800044 	addi	r2,r2,1
 80073d4:	1085883a 	add	r2,r2,r2
 80073d8:	1085883a 	add	r2,r2,r2
 80073dc:	2089883a 	add	r4,r4,r2
 80073e0:	21c0032e 	bgeu	r4,r7,80073f0 <__copybits+0x74>
 80073e4:	20000015 	stw	zero,0(r4)
 80073e8:	21000104 	addi	r4,r4,4
 80073ec:	21fffd36 	bltu	r4,r7,80073e4 <__alt_data_end+0xff0073e4>
 80073f0:	f800283a 	ret

080073f4 <__any_on>:
 80073f4:	20c00417 	ldw	r3,16(r4)
 80073f8:	2805d17a 	srai	r2,r5,5
 80073fc:	21000504 	addi	r4,r4,20
 8007400:	18800d0e 	bge	r3,r2,8007438 <__any_on+0x44>
 8007404:	18c7883a 	add	r3,r3,r3
 8007408:	18c7883a 	add	r3,r3,r3
 800740c:	20c7883a 	add	r3,r4,r3
 8007410:	20c0192e 	bgeu	r4,r3,8007478 <__any_on+0x84>
 8007414:	18bfff17 	ldw	r2,-4(r3)
 8007418:	18ffff04 	addi	r3,r3,-4
 800741c:	1000041e 	bne	r2,zero,8007430 <__any_on+0x3c>
 8007420:	20c0142e 	bgeu	r4,r3,8007474 <__any_on+0x80>
 8007424:	18ffff04 	addi	r3,r3,-4
 8007428:	19400017 	ldw	r5,0(r3)
 800742c:	283ffc26 	beq	r5,zero,8007420 <__alt_data_end+0xff007420>
 8007430:	00800044 	movi	r2,1
 8007434:	f800283a 	ret
 8007438:	10c00a0e 	bge	r2,r3,8007464 <__any_on+0x70>
 800743c:	1085883a 	add	r2,r2,r2
 8007440:	1085883a 	add	r2,r2,r2
 8007444:	294007cc 	andi	r5,r5,31
 8007448:	2087883a 	add	r3,r4,r2
 800744c:	283ff026 	beq	r5,zero,8007410 <__alt_data_end+0xff007410>
 8007450:	19800017 	ldw	r6,0(r3)
 8007454:	3144d83a 	srl	r2,r6,r5
 8007458:	114a983a 	sll	r5,r2,r5
 800745c:	317ff41e 	bne	r6,r5,8007430 <__alt_data_end+0xff007430>
 8007460:	003feb06 	br	8007410 <__alt_data_end+0xff007410>
 8007464:	1085883a 	add	r2,r2,r2
 8007468:	1085883a 	add	r2,r2,r2
 800746c:	2087883a 	add	r3,r4,r2
 8007470:	003fe706 	br	8007410 <__alt_data_end+0xff007410>
 8007474:	f800283a 	ret
 8007478:	0005883a 	mov	r2,zero
 800747c:	f800283a 	ret

08007480 <_putc_r>:
 8007480:	defffc04 	addi	sp,sp,-16
 8007484:	dc000215 	stw	r16,8(sp)
 8007488:	dfc00315 	stw	ra,12(sp)
 800748c:	2021883a 	mov	r16,r4
 8007490:	20000226 	beq	r4,zero,800749c <_putc_r+0x1c>
 8007494:	20800e17 	ldw	r2,56(r4)
 8007498:	10001b26 	beq	r2,zero,8007508 <_putc_r+0x88>
 800749c:	30800217 	ldw	r2,8(r6)
 80074a0:	10bfffc4 	addi	r2,r2,-1
 80074a4:	30800215 	stw	r2,8(r6)
 80074a8:	10000a16 	blt	r2,zero,80074d4 <_putc_r+0x54>
 80074ac:	30800017 	ldw	r2,0(r6)
 80074b0:	11400005 	stb	r5,0(r2)
 80074b4:	30800017 	ldw	r2,0(r6)
 80074b8:	10c00044 	addi	r3,r2,1
 80074bc:	30c00015 	stw	r3,0(r6)
 80074c0:	10800003 	ldbu	r2,0(r2)
 80074c4:	dfc00317 	ldw	ra,12(sp)
 80074c8:	dc000217 	ldw	r16,8(sp)
 80074cc:	dec00404 	addi	sp,sp,16
 80074d0:	f800283a 	ret
 80074d4:	30c00617 	ldw	r3,24(r6)
 80074d8:	10c00616 	blt	r2,r3,80074f4 <_putc_r+0x74>
 80074dc:	30800017 	ldw	r2,0(r6)
 80074e0:	00c00284 	movi	r3,10
 80074e4:	11400005 	stb	r5,0(r2)
 80074e8:	30800017 	ldw	r2,0(r6)
 80074ec:	11400003 	ldbu	r5,0(r2)
 80074f0:	28fff11e 	bne	r5,r3,80074b8 <__alt_data_end+0xff0074b8>
 80074f4:	8009883a 	mov	r4,r16
 80074f8:	dfc00317 	ldw	ra,12(sp)
 80074fc:	dc000217 	ldw	r16,8(sp)
 8007500:	dec00404 	addi	sp,sp,16
 8007504:	80094741 	jmpi	8009474 <__swbuf_r>
 8007508:	d9400015 	stw	r5,0(sp)
 800750c:	d9800115 	stw	r6,4(sp)
 8007510:	8004a680 	call	8004a68 <__sinit>
 8007514:	d9800117 	ldw	r6,4(sp)
 8007518:	d9400017 	ldw	r5,0(sp)
 800751c:	003fdf06 	br	800749c <__alt_data_end+0xff00749c>

08007520 <putc>:
 8007520:	00820074 	movhi	r2,2049
 8007524:	defffc04 	addi	sp,sp,-16
 8007528:	108e0a04 	addi	r2,r2,14376
 800752c:	dc000115 	stw	r16,4(sp)
 8007530:	14000017 	ldw	r16,0(r2)
 8007534:	dc400215 	stw	r17,8(sp)
 8007538:	dfc00315 	stw	ra,12(sp)
 800753c:	2023883a 	mov	r17,r4
 8007540:	80000226 	beq	r16,zero,800754c <putc+0x2c>
 8007544:	80800e17 	ldw	r2,56(r16)
 8007548:	10001a26 	beq	r2,zero,80075b4 <putc+0x94>
 800754c:	28800217 	ldw	r2,8(r5)
 8007550:	10bfffc4 	addi	r2,r2,-1
 8007554:	28800215 	stw	r2,8(r5)
 8007558:	10000b16 	blt	r2,zero,8007588 <putc+0x68>
 800755c:	28800017 	ldw	r2,0(r5)
 8007560:	14400005 	stb	r17,0(r2)
 8007564:	28800017 	ldw	r2,0(r5)
 8007568:	10c00044 	addi	r3,r2,1
 800756c:	28c00015 	stw	r3,0(r5)
 8007570:	10800003 	ldbu	r2,0(r2)
 8007574:	dfc00317 	ldw	ra,12(sp)
 8007578:	dc400217 	ldw	r17,8(sp)
 800757c:	dc000117 	ldw	r16,4(sp)
 8007580:	dec00404 	addi	sp,sp,16
 8007584:	f800283a 	ret
 8007588:	28c00617 	ldw	r3,24(r5)
 800758c:	10c00e16 	blt	r2,r3,80075c8 <putc+0xa8>
 8007590:	28800017 	ldw	r2,0(r5)
 8007594:	01000284 	movi	r4,10
 8007598:	14400005 	stb	r17,0(r2)
 800759c:	28800017 	ldw	r2,0(r5)
 80075a0:	10c00003 	ldbu	r3,0(r2)
 80075a4:	193ff01e 	bne	r3,r4,8007568 <__alt_data_end+0xff007568>
 80075a8:	280d883a 	mov	r6,r5
 80075ac:	180b883a 	mov	r5,r3
 80075b0:	00000706 	br	80075d0 <putc+0xb0>
 80075b4:	8009883a 	mov	r4,r16
 80075b8:	d9400015 	stw	r5,0(sp)
 80075bc:	8004a680 	call	8004a68 <__sinit>
 80075c0:	d9400017 	ldw	r5,0(sp)
 80075c4:	003fe106 	br	800754c <__alt_data_end+0xff00754c>
 80075c8:	280d883a 	mov	r6,r5
 80075cc:	880b883a 	mov	r5,r17
 80075d0:	8009883a 	mov	r4,r16
 80075d4:	dfc00317 	ldw	ra,12(sp)
 80075d8:	dc400217 	ldw	r17,8(sp)
 80075dc:	dc000117 	ldw	r16,4(sp)
 80075e0:	dec00404 	addi	sp,sp,16
 80075e4:	80094741 	jmpi	8009474 <__swbuf_r>

080075e8 <_realloc_r>:
 80075e8:	defff604 	addi	sp,sp,-40
 80075ec:	dc800215 	stw	r18,8(sp)
 80075f0:	dfc00915 	stw	ra,36(sp)
 80075f4:	df000815 	stw	fp,32(sp)
 80075f8:	ddc00715 	stw	r23,28(sp)
 80075fc:	dd800615 	stw	r22,24(sp)
 8007600:	dd400515 	stw	r21,20(sp)
 8007604:	dd000415 	stw	r20,16(sp)
 8007608:	dcc00315 	stw	r19,12(sp)
 800760c:	dc400115 	stw	r17,4(sp)
 8007610:	dc000015 	stw	r16,0(sp)
 8007614:	3025883a 	mov	r18,r6
 8007618:	2800b726 	beq	r5,zero,80078f8 <_realloc_r+0x310>
 800761c:	282b883a 	mov	r21,r5
 8007620:	2029883a 	mov	r20,r4
 8007624:	800d7700 	call	800d770 <__malloc_lock>
 8007628:	a8bfff17 	ldw	r2,-4(r21)
 800762c:	043fff04 	movi	r16,-4
 8007630:	90c002c4 	addi	r3,r18,11
 8007634:	01000584 	movi	r4,22
 8007638:	acfffe04 	addi	r19,r21,-8
 800763c:	1420703a 	and	r16,r2,r16
 8007640:	20c0332e 	bgeu	r4,r3,8007710 <_realloc_r+0x128>
 8007644:	047ffe04 	movi	r17,-8
 8007648:	1c62703a 	and	r17,r3,r17
 800764c:	8807883a 	mov	r3,r17
 8007650:	88005816 	blt	r17,zero,80077b4 <_realloc_r+0x1cc>
 8007654:	8c805736 	bltu	r17,r18,80077b4 <_realloc_r+0x1cc>
 8007658:	80c0300e 	bge	r16,r3,800771c <_realloc_r+0x134>
 800765c:	07020074 	movhi	fp,2049
 8007660:	e7087704 	addi	fp,fp,8668
 8007664:	e1c00217 	ldw	r7,8(fp)
 8007668:	9c09883a 	add	r4,r19,r16
 800766c:	22000117 	ldw	r8,4(r4)
 8007670:	21c06326 	beq	r4,r7,8007800 <_realloc_r+0x218>
 8007674:	017fff84 	movi	r5,-2
 8007678:	414a703a 	and	r5,r8,r5
 800767c:	214b883a 	add	r5,r4,r5
 8007680:	29800117 	ldw	r6,4(r5)
 8007684:	3180004c 	andi	r6,r6,1
 8007688:	30003f26 	beq	r6,zero,8007788 <_realloc_r+0x1a0>
 800768c:	1080004c 	andi	r2,r2,1
 8007690:	10008326 	beq	r2,zero,80078a0 <_realloc_r+0x2b8>
 8007694:	900b883a 	mov	r5,r18
 8007698:	a009883a 	mov	r4,r20
 800769c:	80057c80 	call	80057c8 <_malloc_r>
 80076a0:	1025883a 	mov	r18,r2
 80076a4:	10011e26 	beq	r2,zero,8007b20 <_realloc_r+0x538>
 80076a8:	a93fff17 	ldw	r4,-4(r21)
 80076ac:	10fffe04 	addi	r3,r2,-8
 80076b0:	00bfff84 	movi	r2,-2
 80076b4:	2084703a 	and	r2,r4,r2
 80076b8:	9885883a 	add	r2,r19,r2
 80076bc:	1880ee26 	beq	r3,r2,8007a78 <_realloc_r+0x490>
 80076c0:	81bfff04 	addi	r6,r16,-4
 80076c4:	00800904 	movi	r2,36
 80076c8:	1180b836 	bltu	r2,r6,80079ac <_realloc_r+0x3c4>
 80076cc:	00c004c4 	movi	r3,19
 80076d0:	19809636 	bltu	r3,r6,800792c <_realloc_r+0x344>
 80076d4:	9005883a 	mov	r2,r18
 80076d8:	a807883a 	mov	r3,r21
 80076dc:	19000017 	ldw	r4,0(r3)
 80076e0:	11000015 	stw	r4,0(r2)
 80076e4:	19000117 	ldw	r4,4(r3)
 80076e8:	11000115 	stw	r4,4(r2)
 80076ec:	18c00217 	ldw	r3,8(r3)
 80076f0:	10c00215 	stw	r3,8(r2)
 80076f4:	a80b883a 	mov	r5,r21
 80076f8:	a009883a 	mov	r4,r20
 80076fc:	8004bdc0 	call	8004bdc <_free_r>
 8007700:	a009883a 	mov	r4,r20
 8007704:	800d7940 	call	800d794 <__malloc_unlock>
 8007708:	9005883a 	mov	r2,r18
 800770c:	00001206 	br	8007758 <_realloc_r+0x170>
 8007710:	00c00404 	movi	r3,16
 8007714:	1823883a 	mov	r17,r3
 8007718:	003fce06 	br	8007654 <__alt_data_end+0xff007654>
 800771c:	a825883a 	mov	r18,r21
 8007720:	8445c83a 	sub	r2,r16,r17
 8007724:	00c003c4 	movi	r3,15
 8007728:	18802636 	bltu	r3,r2,80077c4 <_realloc_r+0x1dc>
 800772c:	99800117 	ldw	r6,4(r19)
 8007730:	9c07883a 	add	r3,r19,r16
 8007734:	3180004c 	andi	r6,r6,1
 8007738:	3420b03a 	or	r16,r6,r16
 800773c:	9c000115 	stw	r16,4(r19)
 8007740:	18800117 	ldw	r2,4(r3)
 8007744:	10800054 	ori	r2,r2,1
 8007748:	18800115 	stw	r2,4(r3)
 800774c:	a009883a 	mov	r4,r20
 8007750:	800d7940 	call	800d794 <__malloc_unlock>
 8007754:	9005883a 	mov	r2,r18
 8007758:	dfc00917 	ldw	ra,36(sp)
 800775c:	df000817 	ldw	fp,32(sp)
 8007760:	ddc00717 	ldw	r23,28(sp)
 8007764:	dd800617 	ldw	r22,24(sp)
 8007768:	dd400517 	ldw	r21,20(sp)
 800776c:	dd000417 	ldw	r20,16(sp)
 8007770:	dcc00317 	ldw	r19,12(sp)
 8007774:	dc800217 	ldw	r18,8(sp)
 8007778:	dc400117 	ldw	r17,4(sp)
 800777c:	dc000017 	ldw	r16,0(sp)
 8007780:	dec00a04 	addi	sp,sp,40
 8007784:	f800283a 	ret
 8007788:	017fff04 	movi	r5,-4
 800778c:	414a703a 	and	r5,r8,r5
 8007790:	814d883a 	add	r6,r16,r5
 8007794:	30c01f16 	blt	r6,r3,8007814 <_realloc_r+0x22c>
 8007798:	20800317 	ldw	r2,12(r4)
 800779c:	20c00217 	ldw	r3,8(r4)
 80077a0:	a825883a 	mov	r18,r21
 80077a4:	3021883a 	mov	r16,r6
 80077a8:	18800315 	stw	r2,12(r3)
 80077ac:	10c00215 	stw	r3,8(r2)
 80077b0:	003fdb06 	br	8007720 <__alt_data_end+0xff007720>
 80077b4:	00800304 	movi	r2,12
 80077b8:	a0800015 	stw	r2,0(r20)
 80077bc:	0005883a 	mov	r2,zero
 80077c0:	003fe506 	br	8007758 <__alt_data_end+0xff007758>
 80077c4:	98c00117 	ldw	r3,4(r19)
 80077c8:	9c4b883a 	add	r5,r19,r17
 80077cc:	11000054 	ori	r4,r2,1
 80077d0:	18c0004c 	andi	r3,r3,1
 80077d4:	1c62b03a 	or	r17,r3,r17
 80077d8:	9c400115 	stw	r17,4(r19)
 80077dc:	29000115 	stw	r4,4(r5)
 80077e0:	2885883a 	add	r2,r5,r2
 80077e4:	10c00117 	ldw	r3,4(r2)
 80077e8:	29400204 	addi	r5,r5,8
 80077ec:	a009883a 	mov	r4,r20
 80077f0:	18c00054 	ori	r3,r3,1
 80077f4:	10c00115 	stw	r3,4(r2)
 80077f8:	8004bdc0 	call	8004bdc <_free_r>
 80077fc:	003fd306 	br	800774c <__alt_data_end+0xff00774c>
 8007800:	017fff04 	movi	r5,-4
 8007804:	414a703a 	and	r5,r8,r5
 8007808:	89800404 	addi	r6,r17,16
 800780c:	8151883a 	add	r8,r16,r5
 8007810:	4180590e 	bge	r8,r6,8007978 <_realloc_r+0x390>
 8007814:	1080004c 	andi	r2,r2,1
 8007818:	103f9e1e 	bne	r2,zero,8007694 <__alt_data_end+0xff007694>
 800781c:	adbffe17 	ldw	r22,-8(r21)
 8007820:	00bfff04 	movi	r2,-4
 8007824:	9dadc83a 	sub	r22,r19,r22
 8007828:	b1800117 	ldw	r6,4(r22)
 800782c:	3084703a 	and	r2,r6,r2
 8007830:	20002026 	beq	r4,zero,80078b4 <_realloc_r+0x2cc>
 8007834:	80af883a 	add	r23,r16,r2
 8007838:	b96f883a 	add	r23,r23,r5
 800783c:	21c05f26 	beq	r4,r7,80079bc <_realloc_r+0x3d4>
 8007840:	b8c01c16 	blt	r23,r3,80078b4 <_realloc_r+0x2cc>
 8007844:	20800317 	ldw	r2,12(r4)
 8007848:	20c00217 	ldw	r3,8(r4)
 800784c:	81bfff04 	addi	r6,r16,-4
 8007850:	01000904 	movi	r4,36
 8007854:	18800315 	stw	r2,12(r3)
 8007858:	10c00215 	stw	r3,8(r2)
 800785c:	b0c00217 	ldw	r3,8(r22)
 8007860:	b0800317 	ldw	r2,12(r22)
 8007864:	b4800204 	addi	r18,r22,8
 8007868:	18800315 	stw	r2,12(r3)
 800786c:	10c00215 	stw	r3,8(r2)
 8007870:	21801b36 	bltu	r4,r6,80078e0 <_realloc_r+0x2f8>
 8007874:	008004c4 	movi	r2,19
 8007878:	1180352e 	bgeu	r2,r6,8007950 <_realloc_r+0x368>
 800787c:	a8800017 	ldw	r2,0(r21)
 8007880:	b0800215 	stw	r2,8(r22)
 8007884:	a8800117 	ldw	r2,4(r21)
 8007888:	b0800315 	stw	r2,12(r22)
 800788c:	008006c4 	movi	r2,27
 8007890:	11807f36 	bltu	r2,r6,8007a90 <_realloc_r+0x4a8>
 8007894:	b0800404 	addi	r2,r22,16
 8007898:	ad400204 	addi	r21,r21,8
 800789c:	00002d06 	br	8007954 <_realloc_r+0x36c>
 80078a0:	adbffe17 	ldw	r22,-8(r21)
 80078a4:	00bfff04 	movi	r2,-4
 80078a8:	9dadc83a 	sub	r22,r19,r22
 80078ac:	b1000117 	ldw	r4,4(r22)
 80078b0:	2084703a 	and	r2,r4,r2
 80078b4:	b03f7726 	beq	r22,zero,8007694 <__alt_data_end+0xff007694>
 80078b8:	80af883a 	add	r23,r16,r2
 80078bc:	b8ff7516 	blt	r23,r3,8007694 <__alt_data_end+0xff007694>
 80078c0:	b0800317 	ldw	r2,12(r22)
 80078c4:	b0c00217 	ldw	r3,8(r22)
 80078c8:	81bfff04 	addi	r6,r16,-4
 80078cc:	01000904 	movi	r4,36
 80078d0:	18800315 	stw	r2,12(r3)
 80078d4:	10c00215 	stw	r3,8(r2)
 80078d8:	b4800204 	addi	r18,r22,8
 80078dc:	21bfe52e 	bgeu	r4,r6,8007874 <__alt_data_end+0xff007874>
 80078e0:	a80b883a 	mov	r5,r21
 80078e4:	9009883a 	mov	r4,r18
 80078e8:	80062000 	call	8006200 <memmove>
 80078ec:	b821883a 	mov	r16,r23
 80078f0:	b027883a 	mov	r19,r22
 80078f4:	003f8a06 	br	8007720 <__alt_data_end+0xff007720>
 80078f8:	300b883a 	mov	r5,r6
 80078fc:	dfc00917 	ldw	ra,36(sp)
 8007900:	df000817 	ldw	fp,32(sp)
 8007904:	ddc00717 	ldw	r23,28(sp)
 8007908:	dd800617 	ldw	r22,24(sp)
 800790c:	dd400517 	ldw	r21,20(sp)
 8007910:	dd000417 	ldw	r20,16(sp)
 8007914:	dcc00317 	ldw	r19,12(sp)
 8007918:	dc800217 	ldw	r18,8(sp)
 800791c:	dc400117 	ldw	r17,4(sp)
 8007920:	dc000017 	ldw	r16,0(sp)
 8007924:	dec00a04 	addi	sp,sp,40
 8007928:	80057c81 	jmpi	80057c8 <_malloc_r>
 800792c:	a8c00017 	ldw	r3,0(r21)
 8007930:	90c00015 	stw	r3,0(r18)
 8007934:	a8c00117 	ldw	r3,4(r21)
 8007938:	90c00115 	stw	r3,4(r18)
 800793c:	00c006c4 	movi	r3,27
 8007940:	19804536 	bltu	r3,r6,8007a58 <_realloc_r+0x470>
 8007944:	90800204 	addi	r2,r18,8
 8007948:	a8c00204 	addi	r3,r21,8
 800794c:	003f6306 	br	80076dc <__alt_data_end+0xff0076dc>
 8007950:	9005883a 	mov	r2,r18
 8007954:	a8c00017 	ldw	r3,0(r21)
 8007958:	b821883a 	mov	r16,r23
 800795c:	b027883a 	mov	r19,r22
 8007960:	10c00015 	stw	r3,0(r2)
 8007964:	a8c00117 	ldw	r3,4(r21)
 8007968:	10c00115 	stw	r3,4(r2)
 800796c:	a8c00217 	ldw	r3,8(r21)
 8007970:	10c00215 	stw	r3,8(r2)
 8007974:	003f6a06 	br	8007720 <__alt_data_end+0xff007720>
 8007978:	9c67883a 	add	r19,r19,r17
 800797c:	4445c83a 	sub	r2,r8,r17
 8007980:	e4c00215 	stw	r19,8(fp)
 8007984:	10800054 	ori	r2,r2,1
 8007988:	98800115 	stw	r2,4(r19)
 800798c:	a8bfff17 	ldw	r2,-4(r21)
 8007990:	a009883a 	mov	r4,r20
 8007994:	1080004c 	andi	r2,r2,1
 8007998:	1462b03a 	or	r17,r2,r17
 800799c:	ac7fff15 	stw	r17,-4(r21)
 80079a0:	800d7940 	call	800d794 <__malloc_unlock>
 80079a4:	a805883a 	mov	r2,r21
 80079a8:	003f6b06 	br	8007758 <__alt_data_end+0xff007758>
 80079ac:	a80b883a 	mov	r5,r21
 80079b0:	9009883a 	mov	r4,r18
 80079b4:	80062000 	call	8006200 <memmove>
 80079b8:	003f4e06 	br	80076f4 <__alt_data_end+0xff0076f4>
 80079bc:	89000404 	addi	r4,r17,16
 80079c0:	b93fbc16 	blt	r23,r4,80078b4 <__alt_data_end+0xff0078b4>
 80079c4:	b0800317 	ldw	r2,12(r22)
 80079c8:	b0c00217 	ldw	r3,8(r22)
 80079cc:	81bfff04 	addi	r6,r16,-4
 80079d0:	01000904 	movi	r4,36
 80079d4:	18800315 	stw	r2,12(r3)
 80079d8:	10c00215 	stw	r3,8(r2)
 80079dc:	b4800204 	addi	r18,r22,8
 80079e0:	21804336 	bltu	r4,r6,8007af0 <_realloc_r+0x508>
 80079e4:	008004c4 	movi	r2,19
 80079e8:	11803f2e 	bgeu	r2,r6,8007ae8 <_realloc_r+0x500>
 80079ec:	a8800017 	ldw	r2,0(r21)
 80079f0:	b0800215 	stw	r2,8(r22)
 80079f4:	a8800117 	ldw	r2,4(r21)
 80079f8:	b0800315 	stw	r2,12(r22)
 80079fc:	008006c4 	movi	r2,27
 8007a00:	11803f36 	bltu	r2,r6,8007b00 <_realloc_r+0x518>
 8007a04:	b0800404 	addi	r2,r22,16
 8007a08:	ad400204 	addi	r21,r21,8
 8007a0c:	a8c00017 	ldw	r3,0(r21)
 8007a10:	10c00015 	stw	r3,0(r2)
 8007a14:	a8c00117 	ldw	r3,4(r21)
 8007a18:	10c00115 	stw	r3,4(r2)
 8007a1c:	a8c00217 	ldw	r3,8(r21)
 8007a20:	10c00215 	stw	r3,8(r2)
 8007a24:	b447883a 	add	r3,r22,r17
 8007a28:	bc45c83a 	sub	r2,r23,r17
 8007a2c:	e0c00215 	stw	r3,8(fp)
 8007a30:	10800054 	ori	r2,r2,1
 8007a34:	18800115 	stw	r2,4(r3)
 8007a38:	b0800117 	ldw	r2,4(r22)
 8007a3c:	a009883a 	mov	r4,r20
 8007a40:	1080004c 	andi	r2,r2,1
 8007a44:	1462b03a 	or	r17,r2,r17
 8007a48:	b4400115 	stw	r17,4(r22)
 8007a4c:	800d7940 	call	800d794 <__malloc_unlock>
 8007a50:	9005883a 	mov	r2,r18
 8007a54:	003f4006 	br	8007758 <__alt_data_end+0xff007758>
 8007a58:	a8c00217 	ldw	r3,8(r21)
 8007a5c:	90c00215 	stw	r3,8(r18)
 8007a60:	a8c00317 	ldw	r3,12(r21)
 8007a64:	90c00315 	stw	r3,12(r18)
 8007a68:	30801126 	beq	r6,r2,8007ab0 <_realloc_r+0x4c8>
 8007a6c:	90800404 	addi	r2,r18,16
 8007a70:	a8c00404 	addi	r3,r21,16
 8007a74:	003f1906 	br	80076dc <__alt_data_end+0xff0076dc>
 8007a78:	90ffff17 	ldw	r3,-4(r18)
 8007a7c:	00bfff04 	movi	r2,-4
 8007a80:	a825883a 	mov	r18,r21
 8007a84:	1884703a 	and	r2,r3,r2
 8007a88:	80a1883a 	add	r16,r16,r2
 8007a8c:	003f2406 	br	8007720 <__alt_data_end+0xff007720>
 8007a90:	a8800217 	ldw	r2,8(r21)
 8007a94:	b0800415 	stw	r2,16(r22)
 8007a98:	a8800317 	ldw	r2,12(r21)
 8007a9c:	b0800515 	stw	r2,20(r22)
 8007aa0:	31000a26 	beq	r6,r4,8007acc <_realloc_r+0x4e4>
 8007aa4:	b0800604 	addi	r2,r22,24
 8007aa8:	ad400404 	addi	r21,r21,16
 8007aac:	003fa906 	br	8007954 <__alt_data_end+0xff007954>
 8007ab0:	a9000417 	ldw	r4,16(r21)
 8007ab4:	90800604 	addi	r2,r18,24
 8007ab8:	a8c00604 	addi	r3,r21,24
 8007abc:	91000415 	stw	r4,16(r18)
 8007ac0:	a9000517 	ldw	r4,20(r21)
 8007ac4:	91000515 	stw	r4,20(r18)
 8007ac8:	003f0406 	br	80076dc <__alt_data_end+0xff0076dc>
 8007acc:	a8c00417 	ldw	r3,16(r21)
 8007ad0:	ad400604 	addi	r21,r21,24
 8007ad4:	b0800804 	addi	r2,r22,32
 8007ad8:	b0c00615 	stw	r3,24(r22)
 8007adc:	a8ffff17 	ldw	r3,-4(r21)
 8007ae0:	b0c00715 	stw	r3,28(r22)
 8007ae4:	003f9b06 	br	8007954 <__alt_data_end+0xff007954>
 8007ae8:	9005883a 	mov	r2,r18
 8007aec:	003fc706 	br	8007a0c <__alt_data_end+0xff007a0c>
 8007af0:	a80b883a 	mov	r5,r21
 8007af4:	9009883a 	mov	r4,r18
 8007af8:	80062000 	call	8006200 <memmove>
 8007afc:	003fc906 	br	8007a24 <__alt_data_end+0xff007a24>
 8007b00:	a8800217 	ldw	r2,8(r21)
 8007b04:	b0800415 	stw	r2,16(r22)
 8007b08:	a8800317 	ldw	r2,12(r21)
 8007b0c:	b0800515 	stw	r2,20(r22)
 8007b10:	31000726 	beq	r6,r4,8007b30 <_realloc_r+0x548>
 8007b14:	b0800604 	addi	r2,r22,24
 8007b18:	ad400404 	addi	r21,r21,16
 8007b1c:	003fbb06 	br	8007a0c <__alt_data_end+0xff007a0c>
 8007b20:	a009883a 	mov	r4,r20
 8007b24:	800d7940 	call	800d794 <__malloc_unlock>
 8007b28:	0005883a 	mov	r2,zero
 8007b2c:	003f0a06 	br	8007758 <__alt_data_end+0xff007758>
 8007b30:	a8c00417 	ldw	r3,16(r21)
 8007b34:	ad400604 	addi	r21,r21,24
 8007b38:	b0800804 	addi	r2,r22,32
 8007b3c:	b0c00615 	stw	r3,24(r22)
 8007b40:	a8ffff17 	ldw	r3,-4(r21)
 8007b44:	b0c00715 	stw	r3,28(r22)
 8007b48:	003fb006 	br	8007a0c <__alt_data_end+0xff007a0c>

08007b4c <__fpclassifyd>:
 8007b4c:	00a00034 	movhi	r2,32768
 8007b50:	10bfffc4 	addi	r2,r2,-1
 8007b54:	2884703a 	and	r2,r5,r2
 8007b58:	10000726 	beq	r2,zero,8007b78 <__fpclassifyd+0x2c>
 8007b5c:	00fffc34 	movhi	r3,65520
 8007b60:	019ff834 	movhi	r6,32736
 8007b64:	28c7883a 	add	r3,r5,r3
 8007b68:	31bfffc4 	addi	r6,r6,-1
 8007b6c:	30c00536 	bltu	r6,r3,8007b84 <__fpclassifyd+0x38>
 8007b70:	00800104 	movi	r2,4
 8007b74:	f800283a 	ret
 8007b78:	2000021e 	bne	r4,zero,8007b84 <__fpclassifyd+0x38>
 8007b7c:	00800084 	movi	r2,2
 8007b80:	f800283a 	ret
 8007b84:	00dffc34 	movhi	r3,32752
 8007b88:	019ff834 	movhi	r6,32736
 8007b8c:	28cb883a 	add	r5,r5,r3
 8007b90:	31bfffc4 	addi	r6,r6,-1
 8007b94:	317ff62e 	bgeu	r6,r5,8007b70 <__alt_data_end+0xff007b70>
 8007b98:	01400434 	movhi	r5,16
 8007b9c:	297fffc4 	addi	r5,r5,-1
 8007ba0:	28800236 	bltu	r5,r2,8007bac <__fpclassifyd+0x60>
 8007ba4:	008000c4 	movi	r2,3
 8007ba8:	f800283a 	ret
 8007bac:	10c00226 	beq	r2,r3,8007bb8 <__fpclassifyd+0x6c>
 8007bb0:	0005883a 	mov	r2,zero
 8007bb4:	f800283a 	ret
 8007bb8:	2005003a 	cmpeq	r2,r4,zero
 8007bbc:	f800283a 	ret

08007bc0 <_sbrk_r>:
 8007bc0:	defffd04 	addi	sp,sp,-12
 8007bc4:	dc000015 	stw	r16,0(sp)
 8007bc8:	04020074 	movhi	r16,2049
 8007bcc:	dc400115 	stw	r17,4(sp)
 8007bd0:	8414ed04 	addi	r16,r16,21428
 8007bd4:	2023883a 	mov	r17,r4
 8007bd8:	2809883a 	mov	r4,r5
 8007bdc:	dfc00215 	stw	ra,8(sp)
 8007be0:	80000015 	stw	zero,0(r16)
 8007be4:	800d9540 	call	800d954 <sbrk>
 8007be8:	00ffffc4 	movi	r3,-1
 8007bec:	10c00526 	beq	r2,r3,8007c04 <_sbrk_r+0x44>
 8007bf0:	dfc00217 	ldw	ra,8(sp)
 8007bf4:	dc400117 	ldw	r17,4(sp)
 8007bf8:	dc000017 	ldw	r16,0(sp)
 8007bfc:	dec00304 	addi	sp,sp,12
 8007c00:	f800283a 	ret
 8007c04:	80c00017 	ldw	r3,0(r16)
 8007c08:	183ff926 	beq	r3,zero,8007bf0 <__alt_data_end+0xff007bf0>
 8007c0c:	88c00015 	stw	r3,0(r17)
 8007c10:	003ff706 	br	8007bf0 <__alt_data_end+0xff007bf0>

08007c14 <__sread>:
 8007c14:	defffe04 	addi	sp,sp,-8
 8007c18:	dc000015 	stw	r16,0(sp)
 8007c1c:	2821883a 	mov	r16,r5
 8007c20:	2940038f 	ldh	r5,14(r5)
 8007c24:	dfc00115 	stw	ra,4(sp)
 8007c28:	8009b600 	call	8009b60 <_read_r>
 8007c2c:	10000716 	blt	r2,zero,8007c4c <__sread+0x38>
 8007c30:	80c01417 	ldw	r3,80(r16)
 8007c34:	1887883a 	add	r3,r3,r2
 8007c38:	80c01415 	stw	r3,80(r16)
 8007c3c:	dfc00117 	ldw	ra,4(sp)
 8007c40:	dc000017 	ldw	r16,0(sp)
 8007c44:	dec00204 	addi	sp,sp,8
 8007c48:	f800283a 	ret
 8007c4c:	80c0030b 	ldhu	r3,12(r16)
 8007c50:	18fbffcc 	andi	r3,r3,61439
 8007c54:	80c0030d 	sth	r3,12(r16)
 8007c58:	dfc00117 	ldw	ra,4(sp)
 8007c5c:	dc000017 	ldw	r16,0(sp)
 8007c60:	dec00204 	addi	sp,sp,8
 8007c64:	f800283a 	ret

08007c68 <__seofread>:
 8007c68:	0005883a 	mov	r2,zero
 8007c6c:	f800283a 	ret

08007c70 <__swrite>:
 8007c70:	2880030b 	ldhu	r2,12(r5)
 8007c74:	defffb04 	addi	sp,sp,-20
 8007c78:	dcc00315 	stw	r19,12(sp)
 8007c7c:	dc800215 	stw	r18,8(sp)
 8007c80:	dc400115 	stw	r17,4(sp)
 8007c84:	dc000015 	stw	r16,0(sp)
 8007c88:	dfc00415 	stw	ra,16(sp)
 8007c8c:	10c0400c 	andi	r3,r2,256
 8007c90:	2821883a 	mov	r16,r5
 8007c94:	2023883a 	mov	r17,r4
 8007c98:	3025883a 	mov	r18,r6
 8007c9c:	3827883a 	mov	r19,r7
 8007ca0:	18000526 	beq	r3,zero,8007cb8 <__swrite+0x48>
 8007ca4:	2940038f 	ldh	r5,14(r5)
 8007ca8:	01c00084 	movi	r7,2
 8007cac:	000d883a 	mov	r6,zero
 8007cb0:	8009b000 	call	8009b00 <_lseek_r>
 8007cb4:	8080030b 	ldhu	r2,12(r16)
 8007cb8:	8140038f 	ldh	r5,14(r16)
 8007cbc:	10bbffcc 	andi	r2,r2,61439
 8007cc0:	980f883a 	mov	r7,r19
 8007cc4:	900d883a 	mov	r6,r18
 8007cc8:	8809883a 	mov	r4,r17
 8007ccc:	8080030d 	sth	r2,12(r16)
 8007cd0:	dfc00417 	ldw	ra,16(sp)
 8007cd4:	dcc00317 	ldw	r19,12(sp)
 8007cd8:	dc800217 	ldw	r18,8(sp)
 8007cdc:	dc400117 	ldw	r17,4(sp)
 8007ce0:	dc000017 	ldw	r16,0(sp)
 8007ce4:	dec00504 	addi	sp,sp,20
 8007ce8:	80095cc1 	jmpi	80095cc <_write_r>

08007cec <__sseek>:
 8007cec:	defffe04 	addi	sp,sp,-8
 8007cf0:	dc000015 	stw	r16,0(sp)
 8007cf4:	2821883a 	mov	r16,r5
 8007cf8:	2940038f 	ldh	r5,14(r5)
 8007cfc:	dfc00115 	stw	ra,4(sp)
 8007d00:	8009b000 	call	8009b00 <_lseek_r>
 8007d04:	00ffffc4 	movi	r3,-1
 8007d08:	10c00826 	beq	r2,r3,8007d2c <__sseek+0x40>
 8007d0c:	80c0030b 	ldhu	r3,12(r16)
 8007d10:	80801415 	stw	r2,80(r16)
 8007d14:	18c40014 	ori	r3,r3,4096
 8007d18:	80c0030d 	sth	r3,12(r16)
 8007d1c:	dfc00117 	ldw	ra,4(sp)
 8007d20:	dc000017 	ldw	r16,0(sp)
 8007d24:	dec00204 	addi	sp,sp,8
 8007d28:	f800283a 	ret
 8007d2c:	80c0030b 	ldhu	r3,12(r16)
 8007d30:	18fbffcc 	andi	r3,r3,61439
 8007d34:	80c0030d 	sth	r3,12(r16)
 8007d38:	dfc00117 	ldw	ra,4(sp)
 8007d3c:	dc000017 	ldw	r16,0(sp)
 8007d40:	dec00204 	addi	sp,sp,8
 8007d44:	f800283a 	ret

08007d48 <__sclose>:
 8007d48:	2940038f 	ldh	r5,14(r5)
 8007d4c:	800962c1 	jmpi	800962c <_close_r>

08007d50 <strcmp>:
 8007d50:	2144b03a 	or	r2,r4,r5
 8007d54:	108000cc 	andi	r2,r2,3
 8007d58:	1000171e 	bne	r2,zero,8007db8 <strcmp+0x68>
 8007d5c:	20800017 	ldw	r2,0(r4)
 8007d60:	28c00017 	ldw	r3,0(r5)
 8007d64:	10c0141e 	bne	r2,r3,8007db8 <strcmp+0x68>
 8007d68:	027fbff4 	movhi	r9,65279
 8007d6c:	4a7fbfc4 	addi	r9,r9,-257
 8007d70:	0086303a 	nor	r3,zero,r2
 8007d74:	02202074 	movhi	r8,32897
 8007d78:	1245883a 	add	r2,r2,r9
 8007d7c:	42202004 	addi	r8,r8,-32640
 8007d80:	10c4703a 	and	r2,r2,r3
 8007d84:	1204703a 	and	r2,r2,r8
 8007d88:	10000226 	beq	r2,zero,8007d94 <strcmp+0x44>
 8007d8c:	00002306 	br	8007e1c <strcmp+0xcc>
 8007d90:	1000221e 	bne	r2,zero,8007e1c <strcmp+0xcc>
 8007d94:	21000104 	addi	r4,r4,4
 8007d98:	20c00017 	ldw	r3,0(r4)
 8007d9c:	29400104 	addi	r5,r5,4
 8007da0:	29800017 	ldw	r6,0(r5)
 8007da4:	1a4f883a 	add	r7,r3,r9
 8007da8:	00c4303a 	nor	r2,zero,r3
 8007dac:	3884703a 	and	r2,r7,r2
 8007db0:	1204703a 	and	r2,r2,r8
 8007db4:	19bff626 	beq	r3,r6,8007d90 <__alt_data_end+0xff007d90>
 8007db8:	20800003 	ldbu	r2,0(r4)
 8007dbc:	10c03fcc 	andi	r3,r2,255
 8007dc0:	18c0201c 	xori	r3,r3,128
 8007dc4:	18ffe004 	addi	r3,r3,-128
 8007dc8:	18000c26 	beq	r3,zero,8007dfc <strcmp+0xac>
 8007dcc:	29800007 	ldb	r6,0(r5)
 8007dd0:	19800326 	beq	r3,r6,8007de0 <strcmp+0x90>
 8007dd4:	00001306 	br	8007e24 <strcmp+0xd4>
 8007dd8:	29800007 	ldb	r6,0(r5)
 8007ddc:	11800b1e 	bne	r2,r6,8007e0c <strcmp+0xbc>
 8007de0:	21000044 	addi	r4,r4,1
 8007de4:	20c00003 	ldbu	r3,0(r4)
 8007de8:	29400044 	addi	r5,r5,1
 8007dec:	18803fcc 	andi	r2,r3,255
 8007df0:	1080201c 	xori	r2,r2,128
 8007df4:	10bfe004 	addi	r2,r2,-128
 8007df8:	103ff71e 	bne	r2,zero,8007dd8 <__alt_data_end+0xff007dd8>
 8007dfc:	0007883a 	mov	r3,zero
 8007e00:	28800003 	ldbu	r2,0(r5)
 8007e04:	1885c83a 	sub	r2,r3,r2
 8007e08:	f800283a 	ret
 8007e0c:	28800003 	ldbu	r2,0(r5)
 8007e10:	18c03fcc 	andi	r3,r3,255
 8007e14:	1885c83a 	sub	r2,r3,r2
 8007e18:	f800283a 	ret
 8007e1c:	0005883a 	mov	r2,zero
 8007e20:	f800283a 	ret
 8007e24:	10c03fcc 	andi	r3,r2,255
 8007e28:	003ff506 	br	8007e00 <__alt_data_end+0xff007e00>

08007e2c <__sprint_r.part.0>:
 8007e2c:	28801917 	ldw	r2,100(r5)
 8007e30:	defff604 	addi	sp,sp,-40
 8007e34:	dd400515 	stw	r21,20(sp)
 8007e38:	dfc00915 	stw	ra,36(sp)
 8007e3c:	df000815 	stw	fp,32(sp)
 8007e40:	ddc00715 	stw	r23,28(sp)
 8007e44:	dd800615 	stw	r22,24(sp)
 8007e48:	dd000415 	stw	r20,16(sp)
 8007e4c:	dcc00315 	stw	r19,12(sp)
 8007e50:	dc800215 	stw	r18,8(sp)
 8007e54:	dc400115 	stw	r17,4(sp)
 8007e58:	dc000015 	stw	r16,0(sp)
 8007e5c:	1088000c 	andi	r2,r2,8192
 8007e60:	302b883a 	mov	r21,r6
 8007e64:	10002e26 	beq	r2,zero,8007f20 <__sprint_r.part.0+0xf4>
 8007e68:	30800217 	ldw	r2,8(r6)
 8007e6c:	35800017 	ldw	r22,0(r6)
 8007e70:	10002926 	beq	r2,zero,8007f18 <__sprint_r.part.0+0xec>
 8007e74:	2827883a 	mov	r19,r5
 8007e78:	2029883a 	mov	r20,r4
 8007e7c:	b5c00104 	addi	r23,r22,4
 8007e80:	04bfffc4 	movi	r18,-1
 8007e84:	bc400017 	ldw	r17,0(r23)
 8007e88:	b4000017 	ldw	r16,0(r22)
 8007e8c:	0039883a 	mov	fp,zero
 8007e90:	8822d0ba 	srli	r17,r17,2
 8007e94:	8800031e 	bne	r17,zero,8007ea4 <__sprint_r.part.0+0x78>
 8007e98:	00001806 	br	8007efc <__sprint_r.part.0+0xd0>
 8007e9c:	84000104 	addi	r16,r16,4
 8007ea0:	8f001526 	beq	r17,fp,8007ef8 <__sprint_r.part.0+0xcc>
 8007ea4:	81400017 	ldw	r5,0(r16)
 8007ea8:	980d883a 	mov	r6,r19
 8007eac:	a009883a 	mov	r4,r20
 8007eb0:	80099ac0 	call	80099ac <_fputwc_r>
 8007eb4:	e7000044 	addi	fp,fp,1
 8007eb8:	14bff81e 	bne	r2,r18,8007e9c <__alt_data_end+0xff007e9c>
 8007ebc:	9005883a 	mov	r2,r18
 8007ec0:	a8000215 	stw	zero,8(r21)
 8007ec4:	a8000115 	stw	zero,4(r21)
 8007ec8:	dfc00917 	ldw	ra,36(sp)
 8007ecc:	df000817 	ldw	fp,32(sp)
 8007ed0:	ddc00717 	ldw	r23,28(sp)
 8007ed4:	dd800617 	ldw	r22,24(sp)
 8007ed8:	dd400517 	ldw	r21,20(sp)
 8007edc:	dd000417 	ldw	r20,16(sp)
 8007ee0:	dcc00317 	ldw	r19,12(sp)
 8007ee4:	dc800217 	ldw	r18,8(sp)
 8007ee8:	dc400117 	ldw	r17,4(sp)
 8007eec:	dc000017 	ldw	r16,0(sp)
 8007ef0:	dec00a04 	addi	sp,sp,40
 8007ef4:	f800283a 	ret
 8007ef8:	a8800217 	ldw	r2,8(r21)
 8007efc:	8c63883a 	add	r17,r17,r17
 8007f00:	8c63883a 	add	r17,r17,r17
 8007f04:	1445c83a 	sub	r2,r2,r17
 8007f08:	a8800215 	stw	r2,8(r21)
 8007f0c:	b5800204 	addi	r22,r22,8
 8007f10:	bdc00204 	addi	r23,r23,8
 8007f14:	103fdb1e 	bne	r2,zero,8007e84 <__alt_data_end+0xff007e84>
 8007f18:	0005883a 	mov	r2,zero
 8007f1c:	003fe806 	br	8007ec0 <__alt_data_end+0xff007ec0>
 8007f20:	8004eec0 	call	8004eec <__sfvwrite_r>
 8007f24:	003fe606 	br	8007ec0 <__alt_data_end+0xff007ec0>

08007f28 <__sprint_r>:
 8007f28:	30c00217 	ldw	r3,8(r6)
 8007f2c:	18000126 	beq	r3,zero,8007f34 <__sprint_r+0xc>
 8007f30:	8007e2c1 	jmpi	8007e2c <__sprint_r.part.0>
 8007f34:	30000115 	stw	zero,4(r6)
 8007f38:	0005883a 	mov	r2,zero
 8007f3c:	f800283a 	ret

08007f40 <___vfiprintf_internal_r>:
 8007f40:	deffc904 	addi	sp,sp,-220
 8007f44:	df003515 	stw	fp,212(sp)
 8007f48:	dd003115 	stw	r20,196(sp)
 8007f4c:	dfc03615 	stw	ra,216(sp)
 8007f50:	ddc03415 	stw	r23,208(sp)
 8007f54:	dd803315 	stw	r22,204(sp)
 8007f58:	dd403215 	stw	r21,200(sp)
 8007f5c:	dcc03015 	stw	r19,192(sp)
 8007f60:	dc802f15 	stw	r18,188(sp)
 8007f64:	dc402e15 	stw	r17,184(sp)
 8007f68:	dc002d15 	stw	r16,180(sp)
 8007f6c:	d9002015 	stw	r4,128(sp)
 8007f70:	d9c02215 	stw	r7,136(sp)
 8007f74:	2829883a 	mov	r20,r5
 8007f78:	3039883a 	mov	fp,r6
 8007f7c:	20000226 	beq	r4,zero,8007f88 <___vfiprintf_internal_r+0x48>
 8007f80:	20800e17 	ldw	r2,56(r4)
 8007f84:	1000cf26 	beq	r2,zero,80082c4 <___vfiprintf_internal_r+0x384>
 8007f88:	a080030b 	ldhu	r2,12(r20)
 8007f8c:	10c8000c 	andi	r3,r2,8192
 8007f90:	1800061e 	bne	r3,zero,8007fac <___vfiprintf_internal_r+0x6c>
 8007f94:	a1001917 	ldw	r4,100(r20)
 8007f98:	00f7ffc4 	movi	r3,-8193
 8007f9c:	10880014 	ori	r2,r2,8192
 8007fa0:	20c6703a 	and	r3,r4,r3
 8007fa4:	a080030d 	sth	r2,12(r20)
 8007fa8:	a0c01915 	stw	r3,100(r20)
 8007fac:	10c0020c 	andi	r3,r2,8
 8007fb0:	1800a926 	beq	r3,zero,8008258 <___vfiprintf_internal_r+0x318>
 8007fb4:	a0c00417 	ldw	r3,16(r20)
 8007fb8:	1800a726 	beq	r3,zero,8008258 <___vfiprintf_internal_r+0x318>
 8007fbc:	1080068c 	andi	r2,r2,26
 8007fc0:	00c00284 	movi	r3,10
 8007fc4:	10c0ac26 	beq	r2,r3,8008278 <___vfiprintf_internal_r+0x338>
 8007fc8:	da801a04 	addi	r10,sp,104
 8007fcc:	da801e15 	stw	r10,120(sp)
 8007fd0:	d8801e17 	ldw	r2,120(sp)
 8007fd4:	da8019c4 	addi	r10,sp,103
 8007fd8:	05820074 	movhi	r22,2049
 8007fdc:	05c20074 	movhi	r23,2049
 8007fe0:	da801f15 	stw	r10,124(sp)
 8007fe4:	1295c83a 	sub	r10,r2,r10
 8007fe8:	b586f404 	addi	r22,r22,7120
 8007fec:	bdc6f004 	addi	r23,r23,7104
 8007ff0:	dec01a15 	stw	sp,104(sp)
 8007ff4:	d8001c15 	stw	zero,112(sp)
 8007ff8:	d8001b15 	stw	zero,108(sp)
 8007ffc:	d8002615 	stw	zero,152(sp)
 8008000:	d8002315 	stw	zero,140(sp)
 8008004:	da802715 	stw	r10,156(sp)
 8008008:	d811883a 	mov	r8,sp
 800800c:	dd002115 	stw	r20,132(sp)
 8008010:	e021883a 	mov	r16,fp
 8008014:	80800007 	ldb	r2,0(r16)
 8008018:	1003ea26 	beq	r2,zero,8008fc4 <___vfiprintf_internal_r+0x1084>
 800801c:	00c00944 	movi	r3,37
 8008020:	8025883a 	mov	r18,r16
 8008024:	10c0021e 	bne	r2,r3,8008030 <___vfiprintf_internal_r+0xf0>
 8008028:	00001606 	br	8008084 <___vfiprintf_internal_r+0x144>
 800802c:	10c00326 	beq	r2,r3,800803c <___vfiprintf_internal_r+0xfc>
 8008030:	94800044 	addi	r18,r18,1
 8008034:	90800007 	ldb	r2,0(r18)
 8008038:	103ffc1e 	bne	r2,zero,800802c <__alt_data_end+0xff00802c>
 800803c:	9423c83a 	sub	r17,r18,r16
 8008040:	88001026 	beq	r17,zero,8008084 <___vfiprintf_internal_r+0x144>
 8008044:	d8c01c17 	ldw	r3,112(sp)
 8008048:	d8801b17 	ldw	r2,108(sp)
 800804c:	44000015 	stw	r16,0(r8)
 8008050:	88c7883a 	add	r3,r17,r3
 8008054:	10800044 	addi	r2,r2,1
 8008058:	44400115 	stw	r17,4(r8)
 800805c:	d8c01c15 	stw	r3,112(sp)
 8008060:	d8801b15 	stw	r2,108(sp)
 8008064:	010001c4 	movi	r4,7
 8008068:	2080760e 	bge	r4,r2,8008244 <___vfiprintf_internal_r+0x304>
 800806c:	1803821e 	bne	r3,zero,8008e78 <___vfiprintf_internal_r+0xf38>
 8008070:	da802317 	ldw	r10,140(sp)
 8008074:	d8001b15 	stw	zero,108(sp)
 8008078:	d811883a 	mov	r8,sp
 800807c:	5455883a 	add	r10,r10,r17
 8008080:	da802315 	stw	r10,140(sp)
 8008084:	90800007 	ldb	r2,0(r18)
 8008088:	10044626 	beq	r2,zero,80091a4 <___vfiprintf_internal_r+0x1264>
 800808c:	90c00047 	ldb	r3,1(r18)
 8008090:	94000044 	addi	r16,r18,1
 8008094:	d8001d85 	stb	zero,118(sp)
 8008098:	0009883a 	mov	r4,zero
 800809c:	000f883a 	mov	r7,zero
 80080a0:	027fffc4 	movi	r9,-1
 80080a4:	0023883a 	mov	r17,zero
 80080a8:	0029883a 	mov	r20,zero
 80080ac:	01401604 	movi	r5,88
 80080b0:	01800244 	movi	r6,9
 80080b4:	03400a84 	movi	r13,42
 80080b8:	03001b04 	movi	r12,108
 80080bc:	84000044 	addi	r16,r16,1
 80080c0:	18bff804 	addi	r2,r3,-32
 80080c4:	28827336 	bltu	r5,r2,8008a94 <___vfiprintf_internal_r+0xb54>
 80080c8:	100490ba 	slli	r2,r2,2
 80080cc:	02820074 	movhi	r10,2049
 80080d0:	52a03804 	addi	r10,r10,-32544
 80080d4:	1285883a 	add	r2,r2,r10
 80080d8:	10800017 	ldw	r2,0(r2)
 80080dc:	1000683a 	jmp	r2
 80080e0:	080087c8 	cmpgei	zero,at,543
 80080e4:	08008a94 	ori	zero,at,554
 80080e8:	08008a94 	ori	zero,at,554
 80080ec:	080087e8 	cmpgeui	zero,at,543
 80080f0:	08008a94 	ori	zero,at,554
 80080f4:	08008a94 	ori	zero,at,554
 80080f8:	08008a94 	ori	zero,at,554
 80080fc:	08008a94 	ori	zero,at,554
 8008100:	08008a94 	ori	zero,at,554
 8008104:	08008a94 	ori	zero,at,554
 8008108:	080089d0 	cmplti	zero,at,551
 800810c:	080089ec 	andhi	zero,at,551
 8008110:	08008a94 	ori	zero,at,554
 8008114:	080082d4 	ori	zero,at,523
 8008118:	080089fc 	xorhi	zero,at,551
 800811c:	08008a94 	ori	zero,at,554
 8008120:	080087f4 	orhi	zero,at,543
 8008124:	08008800 	call	800880 <__alt_mem_onchip_memory2_0+0x800880>
 8008128:	08008800 	call	800880 <__alt_mem_onchip_memory2_0+0x800880>
 800812c:	08008800 	call	800880 <__alt_mem_onchip_memory2_0+0x800880>
 8008130:	08008800 	call	800880 <__alt_mem_onchip_memory2_0+0x800880>
 8008134:	08008800 	call	800880 <__alt_mem_onchip_memory2_0+0x800880>
 8008138:	08008800 	call	800880 <__alt_mem_onchip_memory2_0+0x800880>
 800813c:	08008800 	call	800880 <__alt_mem_onchip_memory2_0+0x800880>
 8008140:	08008800 	call	800880 <__alt_mem_onchip_memory2_0+0x800880>
 8008144:	08008800 	call	800880 <__alt_mem_onchip_memory2_0+0x800880>
 8008148:	08008a94 	ori	zero,at,554
 800814c:	08008a94 	ori	zero,at,554
 8008150:	08008a94 	ori	zero,at,554
 8008154:	08008a94 	ori	zero,at,554
 8008158:	08008a94 	ori	zero,at,554
 800815c:	08008a94 	ori	zero,at,554
 8008160:	08008a94 	ori	zero,at,554
 8008164:	08008a94 	ori	zero,at,554
 8008168:	08008a94 	ori	zero,at,554
 800816c:	08008a94 	ori	zero,at,554
 8008170:	0800882c 	andhi	zero,at,544
 8008174:	08008a94 	ori	zero,at,554
 8008178:	08008a94 	ori	zero,at,554
 800817c:	08008a94 	ori	zero,at,554
 8008180:	08008a94 	ori	zero,at,554
 8008184:	08008a94 	ori	zero,at,554
 8008188:	08008a94 	ori	zero,at,554
 800818c:	08008a94 	ori	zero,at,554
 8008190:	08008a94 	ori	zero,at,554
 8008194:	08008a94 	ori	zero,at,554
 8008198:	08008a94 	ori	zero,at,554
 800819c:	08008864 	muli	zero,at,545
 80081a0:	08008a94 	ori	zero,at,554
 80081a4:	08008a94 	ori	zero,at,554
 80081a8:	08008a94 	ori	zero,at,554
 80081ac:	08008a94 	ori	zero,at,554
 80081b0:	08008a94 	ori	zero,at,554
 80081b4:	080088bc 	xorhi	zero,at,546
 80081b8:	08008a94 	ori	zero,at,554
 80081bc:	08008a94 	ori	zero,at,554
 80081c0:	0800892c 	andhi	zero,at,548
 80081c4:	08008a94 	ori	zero,at,554
 80081c8:	08008a94 	ori	zero,at,554
 80081cc:	08008a94 	ori	zero,at,554
 80081d0:	08008a94 	ori	zero,at,554
 80081d4:	08008a94 	ori	zero,at,554
 80081d8:	08008a94 	ori	zero,at,554
 80081dc:	08008a94 	ori	zero,at,554
 80081e0:	08008a94 	ori	zero,at,554
 80081e4:	08008a94 	ori	zero,at,554
 80081e8:	08008a94 	ori	zero,at,554
 80081ec:	080086d8 	cmpnei	zero,at,539
 80081f0:	08008704 	addi	zero,at,540
 80081f4:	08008a94 	ori	zero,at,554
 80081f8:	08008a94 	ori	zero,at,554
 80081fc:	08008a94 	ori	zero,at,554
 8008200:	08008a3c 	xorhi	zero,at,552
 8008204:	08008704 	addi	zero,at,540
 8008208:	08008a94 	ori	zero,at,554
 800820c:	08008a94 	ori	zero,at,554
 8008210:	08008598 	cmpnei	zero,at,534
 8008214:	08008a94 	ori	zero,at,554
 8008218:	080085a8 	cmpgeui	zero,at,534
 800821c:	080085e4 	muli	zero,at,535
 8008220:	080082e0 	cmpeqi	zero,at,523
 8008224:	0800858c 	andi	zero,at,534
 8008228:	08008a94 	ori	zero,at,554
 800822c:	08008968 	cmpgeui	zero,at,549
 8008230:	08008a94 	ori	zero,at,554
 8008234:	080089c0 	call	80089c <__alt_mem_onchip_memory2_0+0x80089c>
 8008238:	08008a94 	ori	zero,at,554
 800823c:	08008a94 	ori	zero,at,554
 8008240:	08008684 	addi	zero,at,538
 8008244:	42000204 	addi	r8,r8,8
 8008248:	da802317 	ldw	r10,140(sp)
 800824c:	5455883a 	add	r10,r10,r17
 8008250:	da802315 	stw	r10,140(sp)
 8008254:	003f8b06 	br	8008084 <__alt_data_end+0xff008084>
 8008258:	d9002017 	ldw	r4,128(sp)
 800825c:	a00b883a 	mov	r5,r20
 8008260:	8002a940 	call	8002a94 <__swsetup_r>
 8008264:	1003b11e 	bne	r2,zero,800912c <___vfiprintf_internal_r+0x11ec>
 8008268:	a080030b 	ldhu	r2,12(r20)
 800826c:	00c00284 	movi	r3,10
 8008270:	1080068c 	andi	r2,r2,26
 8008274:	10ff541e 	bne	r2,r3,8007fc8 <__alt_data_end+0xff007fc8>
 8008278:	a080038f 	ldh	r2,14(r20)
 800827c:	103f5216 	blt	r2,zero,8007fc8 <__alt_data_end+0xff007fc8>
 8008280:	d9c02217 	ldw	r7,136(sp)
 8008284:	d9002017 	ldw	r4,128(sp)
 8008288:	e00d883a 	mov	r6,fp
 800828c:	a00b883a 	mov	r5,r20
 8008290:	80093b80 	call	80093b8 <__sbprintf>
 8008294:	dfc03617 	ldw	ra,216(sp)
 8008298:	df003517 	ldw	fp,212(sp)
 800829c:	ddc03417 	ldw	r23,208(sp)
 80082a0:	dd803317 	ldw	r22,204(sp)
 80082a4:	dd403217 	ldw	r21,200(sp)
 80082a8:	dd003117 	ldw	r20,196(sp)
 80082ac:	dcc03017 	ldw	r19,192(sp)
 80082b0:	dc802f17 	ldw	r18,188(sp)
 80082b4:	dc402e17 	ldw	r17,184(sp)
 80082b8:	dc002d17 	ldw	r16,180(sp)
 80082bc:	dec03704 	addi	sp,sp,220
 80082c0:	f800283a 	ret
 80082c4:	8004a680 	call	8004a68 <__sinit>
 80082c8:	003f2f06 	br	8007f88 <__alt_data_end+0xff007f88>
 80082cc:	0463c83a 	sub	r17,zero,r17
 80082d0:	d8802215 	stw	r2,136(sp)
 80082d4:	a5000114 	ori	r20,r20,4
 80082d8:	80c00007 	ldb	r3,0(r16)
 80082dc:	003f7706 	br	80080bc <__alt_data_end+0xff0080bc>
 80082e0:	00800c04 	movi	r2,48
 80082e4:	da802217 	ldw	r10,136(sp)
 80082e8:	d8801d05 	stb	r2,116(sp)
 80082ec:	00801e04 	movi	r2,120
 80082f0:	d8801d45 	stb	r2,117(sp)
 80082f4:	d8001d85 	stb	zero,118(sp)
 80082f8:	50c00104 	addi	r3,r10,4
 80082fc:	54800017 	ldw	r18,0(r10)
 8008300:	0027883a 	mov	r19,zero
 8008304:	a0800094 	ori	r2,r20,2
 8008308:	48030b16 	blt	r9,zero,8008f38 <___vfiprintf_internal_r+0xff8>
 800830c:	00bfdfc4 	movi	r2,-129
 8008310:	a096703a 	and	r11,r20,r2
 8008314:	d8c02215 	stw	r3,136(sp)
 8008318:	5d000094 	ori	r20,r11,2
 800831c:	90032b1e 	bne	r18,zero,8008fcc <___vfiprintf_internal_r+0x108c>
 8008320:	00820074 	movhi	r2,2049
 8008324:	10868f04 	addi	r2,r2,6716
 8008328:	d8802615 	stw	r2,152(sp)
 800832c:	0039883a 	mov	fp,zero
 8008330:	48017b1e 	bne	r9,zero,8008920 <___vfiprintf_internal_r+0x9e0>
 8008334:	0013883a 	mov	r9,zero
 8008338:	0027883a 	mov	r19,zero
 800833c:	dd401a04 	addi	r21,sp,104
 8008340:	4825883a 	mov	r18,r9
 8008344:	4cc0010e 	bge	r9,r19,800834c <___vfiprintf_internal_r+0x40c>
 8008348:	9825883a 	mov	r18,r19
 800834c:	e7003fcc 	andi	fp,fp,255
 8008350:	e700201c 	xori	fp,fp,128
 8008354:	e73fe004 	addi	fp,fp,-128
 8008358:	e0000126 	beq	fp,zero,8008360 <___vfiprintf_internal_r+0x420>
 800835c:	94800044 	addi	r18,r18,1
 8008360:	a380008c 	andi	r14,r20,2
 8008364:	70000126 	beq	r14,zero,800836c <___vfiprintf_internal_r+0x42c>
 8008368:	94800084 	addi	r18,r18,2
 800836c:	a700210c 	andi	fp,r20,132
 8008370:	e001df1e 	bne	fp,zero,8008af0 <___vfiprintf_internal_r+0xbb0>
 8008374:	8c87c83a 	sub	r3,r17,r18
 8008378:	00c1dd0e 	bge	zero,r3,8008af0 <___vfiprintf_internal_r+0xbb0>
 800837c:	01c00404 	movi	r7,16
 8008380:	d8801c17 	ldw	r2,112(sp)
 8008384:	38c3ad0e 	bge	r7,r3,800923c <___vfiprintf_internal_r+0x12fc>
 8008388:	02820074 	movhi	r10,2049
 800838c:	5286f404 	addi	r10,r10,7120
 8008390:	dc002915 	stw	r16,164(sp)
 8008394:	d9801b17 	ldw	r6,108(sp)
 8008398:	da802415 	stw	r10,144(sp)
 800839c:	03c001c4 	movi	r15,7
 80083a0:	da402515 	stw	r9,148(sp)
 80083a4:	db802815 	stw	r14,160(sp)
 80083a8:	1821883a 	mov	r16,r3
 80083ac:	00000506 	br	80083c4 <___vfiprintf_internal_r+0x484>
 80083b0:	31400084 	addi	r5,r6,2
 80083b4:	42000204 	addi	r8,r8,8
 80083b8:	200d883a 	mov	r6,r4
 80083bc:	843ffc04 	addi	r16,r16,-16
 80083c0:	3c000d0e 	bge	r7,r16,80083f8 <___vfiprintf_internal_r+0x4b8>
 80083c4:	10800404 	addi	r2,r2,16
 80083c8:	31000044 	addi	r4,r6,1
 80083cc:	45800015 	stw	r22,0(r8)
 80083d0:	41c00115 	stw	r7,4(r8)
 80083d4:	d8801c15 	stw	r2,112(sp)
 80083d8:	d9001b15 	stw	r4,108(sp)
 80083dc:	793ff40e 	bge	r15,r4,80083b0 <__alt_data_end+0xff0083b0>
 80083e0:	1001b51e 	bne	r2,zero,8008ab8 <___vfiprintf_internal_r+0xb78>
 80083e4:	843ffc04 	addi	r16,r16,-16
 80083e8:	000d883a 	mov	r6,zero
 80083ec:	01400044 	movi	r5,1
 80083f0:	d811883a 	mov	r8,sp
 80083f4:	3c3ff316 	blt	r7,r16,80083c4 <__alt_data_end+0xff0083c4>
 80083f8:	8007883a 	mov	r3,r16
 80083fc:	da402517 	ldw	r9,148(sp)
 8008400:	db802817 	ldw	r14,160(sp)
 8008404:	dc002917 	ldw	r16,164(sp)
 8008408:	da802417 	ldw	r10,144(sp)
 800840c:	1885883a 	add	r2,r3,r2
 8008410:	40c00115 	stw	r3,4(r8)
 8008414:	42800015 	stw	r10,0(r8)
 8008418:	d8801c15 	stw	r2,112(sp)
 800841c:	d9401b15 	stw	r5,108(sp)
 8008420:	00c001c4 	movi	r3,7
 8008424:	19426016 	blt	r3,r5,8008da8 <___vfiprintf_internal_r+0xe68>
 8008428:	d8c01d87 	ldb	r3,118(sp)
 800842c:	42000204 	addi	r8,r8,8
 8008430:	29000044 	addi	r4,r5,1
 8008434:	1801b31e 	bne	r3,zero,8008b04 <___vfiprintf_internal_r+0xbc4>
 8008438:	7001c026 	beq	r14,zero,8008b3c <___vfiprintf_internal_r+0xbfc>
 800843c:	d8c01d04 	addi	r3,sp,116
 8008440:	10800084 	addi	r2,r2,2
 8008444:	40c00015 	stw	r3,0(r8)
 8008448:	00c00084 	movi	r3,2
 800844c:	40c00115 	stw	r3,4(r8)
 8008450:	d8801c15 	stw	r2,112(sp)
 8008454:	d9001b15 	stw	r4,108(sp)
 8008458:	00c001c4 	movi	r3,7
 800845c:	1902650e 	bge	r3,r4,8008df4 <___vfiprintf_internal_r+0xeb4>
 8008460:	10029a1e 	bne	r2,zero,8008ecc <___vfiprintf_internal_r+0xf8c>
 8008464:	00c02004 	movi	r3,128
 8008468:	01000044 	movi	r4,1
 800846c:	000b883a 	mov	r5,zero
 8008470:	d811883a 	mov	r8,sp
 8008474:	e0c1b31e 	bne	fp,r3,8008b44 <___vfiprintf_internal_r+0xc04>
 8008478:	8cb9c83a 	sub	fp,r17,r18
 800847c:	0701b10e 	bge	zero,fp,8008b44 <___vfiprintf_internal_r+0xc04>
 8008480:	01c00404 	movi	r7,16
 8008484:	3f03890e 	bge	r7,fp,80092ac <___vfiprintf_internal_r+0x136c>
 8008488:	00c20074 	movhi	r3,2049
 800848c:	18c6f004 	addi	r3,r3,7104
 8008490:	d8c02415 	stw	r3,144(sp)
 8008494:	8007883a 	mov	r3,r16
 8008498:	034001c4 	movi	r13,7
 800849c:	e021883a 	mov	r16,fp
 80084a0:	da402515 	stw	r9,148(sp)
 80084a4:	1839883a 	mov	fp,r3
 80084a8:	00000506 	br	80084c0 <___vfiprintf_internal_r+0x580>
 80084ac:	29800084 	addi	r6,r5,2
 80084b0:	42000204 	addi	r8,r8,8
 80084b4:	180b883a 	mov	r5,r3
 80084b8:	843ffc04 	addi	r16,r16,-16
 80084bc:	3c000d0e 	bge	r7,r16,80084f4 <___vfiprintf_internal_r+0x5b4>
 80084c0:	10800404 	addi	r2,r2,16
 80084c4:	28c00044 	addi	r3,r5,1
 80084c8:	45c00015 	stw	r23,0(r8)
 80084cc:	41c00115 	stw	r7,4(r8)
 80084d0:	d8801c15 	stw	r2,112(sp)
 80084d4:	d8c01b15 	stw	r3,108(sp)
 80084d8:	68fff40e 	bge	r13,r3,80084ac <__alt_data_end+0xff0084ac>
 80084dc:	1002241e 	bne	r2,zero,8008d70 <___vfiprintf_internal_r+0xe30>
 80084e0:	843ffc04 	addi	r16,r16,-16
 80084e4:	01800044 	movi	r6,1
 80084e8:	000b883a 	mov	r5,zero
 80084ec:	d811883a 	mov	r8,sp
 80084f0:	3c3ff316 	blt	r7,r16,80084c0 <__alt_data_end+0xff0084c0>
 80084f4:	da402517 	ldw	r9,148(sp)
 80084f8:	e007883a 	mov	r3,fp
 80084fc:	8039883a 	mov	fp,r16
 8008500:	1821883a 	mov	r16,r3
 8008504:	d8c02417 	ldw	r3,144(sp)
 8008508:	1705883a 	add	r2,r2,fp
 800850c:	47000115 	stw	fp,4(r8)
 8008510:	40c00015 	stw	r3,0(r8)
 8008514:	d8801c15 	stw	r2,112(sp)
 8008518:	d9801b15 	stw	r6,108(sp)
 800851c:	00c001c4 	movi	r3,7
 8008520:	19827616 	blt	r3,r6,8008efc <___vfiprintf_internal_r+0xfbc>
 8008524:	4cf9c83a 	sub	fp,r9,r19
 8008528:	42000204 	addi	r8,r8,8
 800852c:	31000044 	addi	r4,r6,1
 8008530:	300b883a 	mov	r5,r6
 8008534:	07018516 	blt	zero,fp,8008b4c <___vfiprintf_internal_r+0xc0c>
 8008538:	9885883a 	add	r2,r19,r2
 800853c:	45400015 	stw	r21,0(r8)
 8008540:	44c00115 	stw	r19,4(r8)
 8008544:	d8801c15 	stw	r2,112(sp)
 8008548:	d9001b15 	stw	r4,108(sp)
 800854c:	00c001c4 	movi	r3,7
 8008550:	1901dd0e 	bge	r3,r4,8008cc8 <___vfiprintf_internal_r+0xd88>
 8008554:	1002401e 	bne	r2,zero,8008e58 <___vfiprintf_internal_r+0xf18>
 8008558:	d8001b15 	stw	zero,108(sp)
 800855c:	a2c0010c 	andi	r11,r20,4
 8008560:	58000226 	beq	r11,zero,800856c <___vfiprintf_internal_r+0x62c>
 8008564:	8ca7c83a 	sub	r19,r17,r18
 8008568:	04c2f216 	blt	zero,r19,8009134 <___vfiprintf_internal_r+0x11f4>
 800856c:	8c80010e 	bge	r17,r18,8008574 <___vfiprintf_internal_r+0x634>
 8008570:	9023883a 	mov	r17,r18
 8008574:	da802317 	ldw	r10,140(sp)
 8008578:	5455883a 	add	r10,r10,r17
 800857c:	da802315 	stw	r10,140(sp)
 8008580:	d8001b15 	stw	zero,108(sp)
 8008584:	d811883a 	mov	r8,sp
 8008588:	003ea206 	br	8008014 <__alt_data_end+0xff008014>
 800858c:	a5000814 	ori	r20,r20,32
 8008590:	80c00007 	ldb	r3,0(r16)
 8008594:	003ec906 	br	80080bc <__alt_data_end+0xff0080bc>
 8008598:	80c00007 	ldb	r3,0(r16)
 800859c:	1b030926 	beq	r3,r12,80091c4 <___vfiprintf_internal_r+0x1284>
 80085a0:	a5000414 	ori	r20,r20,16
 80085a4:	003ec506 	br	80080bc <__alt_data_end+0xff0080bc>
 80085a8:	21003fcc 	andi	r4,r4,255
 80085ac:	20035e1e 	bne	r4,zero,8009328 <___vfiprintf_internal_r+0x13e8>
 80085b0:	a080080c 	andi	r2,r20,32
 80085b4:	1002a526 	beq	r2,zero,800904c <___vfiprintf_internal_r+0x110c>
 80085b8:	da802217 	ldw	r10,136(sp)
 80085bc:	50800017 	ldw	r2,0(r10)
 80085c0:	da802317 	ldw	r10,140(sp)
 80085c4:	5007d7fa 	srai	r3,r10,31
 80085c8:	da802217 	ldw	r10,136(sp)
 80085cc:	10c00115 	stw	r3,4(r2)
 80085d0:	52800104 	addi	r10,r10,4
 80085d4:	da802215 	stw	r10,136(sp)
 80085d8:	da802317 	ldw	r10,140(sp)
 80085dc:	12800015 	stw	r10,0(r2)
 80085e0:	003e8c06 	br	8008014 <__alt_data_end+0xff008014>
 80085e4:	21003fcc 	andi	r4,r4,255
 80085e8:	2003511e 	bne	r4,zero,8009330 <___vfiprintf_internal_r+0x13f0>
 80085ec:	a080080c 	andi	r2,r20,32
 80085f0:	1000a126 	beq	r2,zero,8008878 <___vfiprintf_internal_r+0x938>
 80085f4:	da802217 	ldw	r10,136(sp)
 80085f8:	d8001d85 	stb	zero,118(sp)
 80085fc:	50800204 	addi	r2,r10,8
 8008600:	54800017 	ldw	r18,0(r10)
 8008604:	54c00117 	ldw	r19,4(r10)
 8008608:	4802b416 	blt	r9,zero,80090dc <___vfiprintf_internal_r+0x119c>
 800860c:	013fdfc4 	movi	r4,-129
 8008610:	94c6b03a 	or	r3,r18,r19
 8008614:	d8802215 	stw	r2,136(sp)
 8008618:	a128703a 	and	r20,r20,r4
 800861c:	1800a226 	beq	r3,zero,80088a8 <___vfiprintf_internal_r+0x968>
 8008620:	0039883a 	mov	fp,zero
 8008624:	dd401a04 	addi	r21,sp,104
 8008628:	9006d0fa 	srli	r3,r18,3
 800862c:	9808977a 	slli	r4,r19,29
 8008630:	9826d0fa 	srli	r19,r19,3
 8008634:	948001cc 	andi	r18,r18,7
 8008638:	90800c04 	addi	r2,r18,48
 800863c:	ad7fffc4 	addi	r21,r21,-1
 8008640:	20e4b03a 	or	r18,r4,r3
 8008644:	a8800005 	stb	r2,0(r21)
 8008648:	94c6b03a 	or	r3,r18,r19
 800864c:	183ff61e 	bne	r3,zero,8008628 <__alt_data_end+0xff008628>
 8008650:	a0c0004c 	andi	r3,r20,1
 8008654:	18005926 	beq	r3,zero,80087bc <___vfiprintf_internal_r+0x87c>
 8008658:	10803fcc 	andi	r2,r2,255
 800865c:	1080201c 	xori	r2,r2,128
 8008660:	10bfe004 	addi	r2,r2,-128
 8008664:	00c00c04 	movi	r3,48
 8008668:	10c05426 	beq	r2,r3,80087bc <___vfiprintf_internal_r+0x87c>
 800866c:	da801e17 	ldw	r10,120(sp)
 8008670:	a8bfffc4 	addi	r2,r21,-1
 8008674:	a8ffffc5 	stb	r3,-1(r21)
 8008678:	50a7c83a 	sub	r19,r10,r2
 800867c:	102b883a 	mov	r21,r2
 8008680:	003f2f06 	br	8008340 <__alt_data_end+0xff008340>
 8008684:	21003fcc 	andi	r4,r4,255
 8008688:	2003421e 	bne	r4,zero,8009394 <___vfiprintf_internal_r+0x1454>
 800868c:	00820074 	movhi	r2,2049
 8008690:	10868f04 	addi	r2,r2,6716
 8008694:	d8802615 	stw	r2,152(sp)
 8008698:	a080080c 	andi	r2,r20,32
 800869c:	1000aa26 	beq	r2,zero,8008948 <___vfiprintf_internal_r+0xa08>
 80086a0:	da802217 	ldw	r10,136(sp)
 80086a4:	54800017 	ldw	r18,0(r10)
 80086a8:	54c00117 	ldw	r19,4(r10)
 80086ac:	52800204 	addi	r10,r10,8
 80086b0:	da802215 	stw	r10,136(sp)
 80086b4:	a080004c 	andi	r2,r20,1
 80086b8:	1001d226 	beq	r2,zero,8008e04 <___vfiprintf_internal_r+0xec4>
 80086bc:	94c4b03a 	or	r2,r18,r19
 80086c0:	1002351e 	bne	r2,zero,8008f98 <___vfiprintf_internal_r+0x1058>
 80086c4:	d8001d85 	stb	zero,118(sp)
 80086c8:	48022216 	blt	r9,zero,8008f54 <___vfiprintf_internal_r+0x1014>
 80086cc:	00bfdfc4 	movi	r2,-129
 80086d0:	a0a8703a 	and	r20,r20,r2
 80086d4:	003f1506 	br	800832c <__alt_data_end+0xff00832c>
 80086d8:	da802217 	ldw	r10,136(sp)
 80086dc:	04800044 	movi	r18,1
 80086e0:	d8001d85 	stb	zero,118(sp)
 80086e4:	50800017 	ldw	r2,0(r10)
 80086e8:	52800104 	addi	r10,r10,4
 80086ec:	da802215 	stw	r10,136(sp)
 80086f0:	d8801005 	stb	r2,64(sp)
 80086f4:	9027883a 	mov	r19,r18
 80086f8:	dd401004 	addi	r21,sp,64
 80086fc:	0013883a 	mov	r9,zero
 8008700:	003f1706 	br	8008360 <__alt_data_end+0xff008360>
 8008704:	21003fcc 	andi	r4,r4,255
 8008708:	2003201e 	bne	r4,zero,800938c <___vfiprintf_internal_r+0x144c>
 800870c:	a080080c 	andi	r2,r20,32
 8008710:	10004b26 	beq	r2,zero,8008840 <___vfiprintf_internal_r+0x900>
 8008714:	da802217 	ldw	r10,136(sp)
 8008718:	50800117 	ldw	r2,4(r10)
 800871c:	54800017 	ldw	r18,0(r10)
 8008720:	52800204 	addi	r10,r10,8
 8008724:	da802215 	stw	r10,136(sp)
 8008728:	1027883a 	mov	r19,r2
 800872c:	10022c16 	blt	r2,zero,8008fe0 <___vfiprintf_internal_r+0x10a0>
 8008730:	df001d83 	ldbu	fp,118(sp)
 8008734:	48007216 	blt	r9,zero,8008900 <___vfiprintf_internal_r+0x9c0>
 8008738:	00ffdfc4 	movi	r3,-129
 800873c:	94c4b03a 	or	r2,r18,r19
 8008740:	a0e8703a 	and	r20,r20,r3
 8008744:	1000cc26 	beq	r2,zero,8008a78 <___vfiprintf_internal_r+0xb38>
 8008748:	98021026 	beq	r19,zero,8008f8c <___vfiprintf_internal_r+0x104c>
 800874c:	dc402415 	stw	r17,144(sp)
 8008750:	dc002515 	stw	r16,148(sp)
 8008754:	9823883a 	mov	r17,r19
 8008758:	9021883a 	mov	r16,r18
 800875c:	dd401a04 	addi	r21,sp,104
 8008760:	4825883a 	mov	r18,r9
 8008764:	4027883a 	mov	r19,r8
 8008768:	8009883a 	mov	r4,r16
 800876c:	880b883a 	mov	r5,r17
 8008770:	01800284 	movi	r6,10
 8008774:	000f883a 	mov	r7,zero
 8008778:	800a3200 	call	800a320 <__umoddi3>
 800877c:	10800c04 	addi	r2,r2,48
 8008780:	ad7fffc4 	addi	r21,r21,-1
 8008784:	8009883a 	mov	r4,r16
 8008788:	880b883a 	mov	r5,r17
 800878c:	a8800005 	stb	r2,0(r21)
 8008790:	01800284 	movi	r6,10
 8008794:	000f883a 	mov	r7,zero
 8008798:	8009da80 	call	8009da8 <__udivdi3>
 800879c:	1021883a 	mov	r16,r2
 80087a0:	10c4b03a 	or	r2,r2,r3
 80087a4:	1823883a 	mov	r17,r3
 80087a8:	103fef1e 	bne	r2,zero,8008768 <__alt_data_end+0xff008768>
 80087ac:	dc402417 	ldw	r17,144(sp)
 80087b0:	dc002517 	ldw	r16,148(sp)
 80087b4:	9013883a 	mov	r9,r18
 80087b8:	9811883a 	mov	r8,r19
 80087bc:	da801e17 	ldw	r10,120(sp)
 80087c0:	5567c83a 	sub	r19,r10,r21
 80087c4:	003ede06 	br	8008340 <__alt_data_end+0xff008340>
 80087c8:	38803fcc 	andi	r2,r7,255
 80087cc:	1080201c 	xori	r2,r2,128
 80087d0:	10bfe004 	addi	r2,r2,-128
 80087d4:	1002371e 	bne	r2,zero,80090b4 <___vfiprintf_internal_r+0x1174>
 80087d8:	01000044 	movi	r4,1
 80087dc:	01c00804 	movi	r7,32
 80087e0:	80c00007 	ldb	r3,0(r16)
 80087e4:	003e3506 	br	80080bc <__alt_data_end+0xff0080bc>
 80087e8:	a5000054 	ori	r20,r20,1
 80087ec:	80c00007 	ldb	r3,0(r16)
 80087f0:	003e3206 	br	80080bc <__alt_data_end+0xff0080bc>
 80087f4:	a5002014 	ori	r20,r20,128
 80087f8:	80c00007 	ldb	r3,0(r16)
 80087fc:	003e2f06 	br	80080bc <__alt_data_end+0xff0080bc>
 8008800:	8015883a 	mov	r10,r16
 8008804:	0023883a 	mov	r17,zero
 8008808:	18bff404 	addi	r2,r3,-48
 800880c:	50c00007 	ldb	r3,0(r10)
 8008810:	8c4002a4 	muli	r17,r17,10
 8008814:	84000044 	addi	r16,r16,1
 8008818:	8015883a 	mov	r10,r16
 800881c:	1463883a 	add	r17,r2,r17
 8008820:	18bff404 	addi	r2,r3,-48
 8008824:	30bff92e 	bgeu	r6,r2,800880c <__alt_data_end+0xff00880c>
 8008828:	003e2506 	br	80080c0 <__alt_data_end+0xff0080c0>
 800882c:	21003fcc 	andi	r4,r4,255
 8008830:	2002d41e 	bne	r4,zero,8009384 <___vfiprintf_internal_r+0x1444>
 8008834:	a5000414 	ori	r20,r20,16
 8008838:	a080080c 	andi	r2,r20,32
 800883c:	103fb51e 	bne	r2,zero,8008714 <__alt_data_end+0xff008714>
 8008840:	a080040c 	andi	r2,r20,16
 8008844:	1001f826 	beq	r2,zero,8009028 <___vfiprintf_internal_r+0x10e8>
 8008848:	da802217 	ldw	r10,136(sp)
 800884c:	54800017 	ldw	r18,0(r10)
 8008850:	52800104 	addi	r10,r10,4
 8008854:	da802215 	stw	r10,136(sp)
 8008858:	9027d7fa 	srai	r19,r18,31
 800885c:	9805883a 	mov	r2,r19
 8008860:	003fb206 	br	800872c <__alt_data_end+0xff00872c>
 8008864:	21003fcc 	andi	r4,r4,255
 8008868:	2002c41e 	bne	r4,zero,800937c <___vfiprintf_internal_r+0x143c>
 800886c:	a5000414 	ori	r20,r20,16
 8008870:	a080080c 	andi	r2,r20,32
 8008874:	103f5f1e 	bne	r2,zero,80085f4 <__alt_data_end+0xff0085f4>
 8008878:	a080040c 	andi	r2,r20,16
 800887c:	10020f26 	beq	r2,zero,80090bc <___vfiprintf_internal_r+0x117c>
 8008880:	da802217 	ldw	r10,136(sp)
 8008884:	d8001d85 	stb	zero,118(sp)
 8008888:	0027883a 	mov	r19,zero
 800888c:	50800104 	addi	r2,r10,4
 8008890:	54800017 	ldw	r18,0(r10)
 8008894:	48021116 	blt	r9,zero,80090dc <___vfiprintf_internal_r+0x119c>
 8008898:	00ffdfc4 	movi	r3,-129
 800889c:	d8802215 	stw	r2,136(sp)
 80088a0:	a0e8703a 	and	r20,r20,r3
 80088a4:	903f5e1e 	bne	r18,zero,8008620 <__alt_data_end+0xff008620>
 80088a8:	0039883a 	mov	fp,zero
 80088ac:	4802a626 	beq	r9,zero,8009348 <___vfiprintf_internal_r+0x1408>
 80088b0:	0025883a 	mov	r18,zero
 80088b4:	0027883a 	mov	r19,zero
 80088b8:	003f5a06 	br	8008624 <__alt_data_end+0xff008624>
 80088bc:	21003fcc 	andi	r4,r4,255
 80088c0:	20029f1e 	bne	r4,zero,8009340 <___vfiprintf_internal_r+0x1400>
 80088c4:	a5000414 	ori	r20,r20,16
 80088c8:	a080080c 	andi	r2,r20,32
 80088cc:	10005e1e 	bne	r2,zero,8008a48 <___vfiprintf_internal_r+0xb08>
 80088d0:	a080040c 	andi	r2,r20,16
 80088d4:	1001a21e 	bne	r2,zero,8008f60 <___vfiprintf_internal_r+0x1020>
 80088d8:	a080100c 	andi	r2,r20,64
 80088dc:	d8001d85 	stb	zero,118(sp)
 80088e0:	da802217 	ldw	r10,136(sp)
 80088e4:	1002231e 	bne	r2,zero,8009174 <___vfiprintf_internal_r+0x1234>
 80088e8:	50800104 	addi	r2,r10,4
 80088ec:	54800017 	ldw	r18,0(r10)
 80088f0:	0027883a 	mov	r19,zero
 80088f4:	4801a00e 	bge	r9,zero,8008f78 <___vfiprintf_internal_r+0x1038>
 80088f8:	d8802215 	stw	r2,136(sp)
 80088fc:	0039883a 	mov	fp,zero
 8008900:	94c4b03a 	or	r2,r18,r19
 8008904:	103f901e 	bne	r2,zero,8008748 <__alt_data_end+0xff008748>
 8008908:	00800044 	movi	r2,1
 800890c:	10803fcc 	andi	r2,r2,255
 8008910:	00c00044 	movi	r3,1
 8008914:	10c05926 	beq	r2,r3,8008a7c <___vfiprintf_internal_r+0xb3c>
 8008918:	00c00084 	movi	r3,2
 800891c:	10ffe41e 	bne	r2,r3,80088b0 <__alt_data_end+0xff0088b0>
 8008920:	0025883a 	mov	r18,zero
 8008924:	0027883a 	mov	r19,zero
 8008928:	00013d06 	br	8008e20 <___vfiprintf_internal_r+0xee0>
 800892c:	21003fcc 	andi	r4,r4,255
 8008930:	2002811e 	bne	r4,zero,8009338 <___vfiprintf_internal_r+0x13f8>
 8008934:	00820074 	movhi	r2,2049
 8008938:	10868a04 	addi	r2,r2,6696
 800893c:	d8802615 	stw	r2,152(sp)
 8008940:	a080080c 	andi	r2,r20,32
 8008944:	103f561e 	bne	r2,zero,80086a0 <__alt_data_end+0xff0086a0>
 8008948:	a080040c 	andi	r2,r20,16
 800894c:	1001d126 	beq	r2,zero,8009094 <___vfiprintf_internal_r+0x1154>
 8008950:	da802217 	ldw	r10,136(sp)
 8008954:	0027883a 	mov	r19,zero
 8008958:	54800017 	ldw	r18,0(r10)
 800895c:	52800104 	addi	r10,r10,4
 8008960:	da802215 	stw	r10,136(sp)
 8008964:	003f5306 	br	80086b4 <__alt_data_end+0xff0086b4>
 8008968:	da802217 	ldw	r10,136(sp)
 800896c:	d8001d85 	stb	zero,118(sp)
 8008970:	55400017 	ldw	r21,0(r10)
 8008974:	50c00104 	addi	r3,r10,4
 8008978:	a8024226 	beq	r21,zero,8009284 <___vfiprintf_internal_r+0x1344>
 800897c:	48021816 	blt	r9,zero,80091e0 <___vfiprintf_internal_r+0x12a0>
 8008980:	480d883a 	mov	r6,r9
 8008984:	000b883a 	mov	r5,zero
 8008988:	a809883a 	mov	r4,r21
 800898c:	d8c02a15 	stw	r3,168(sp)
 8008990:	da002b15 	stw	r8,172(sp)
 8008994:	da402c15 	stw	r9,176(sp)
 8008998:	8005fd40 	call	8005fd4 <memchr>
 800899c:	d8c02a17 	ldw	r3,168(sp)
 80089a0:	da002b17 	ldw	r8,172(sp)
 80089a4:	da402c17 	ldw	r9,176(sp)
 80089a8:	10024826 	beq	r2,zero,80092cc <___vfiprintf_internal_r+0x138c>
 80089ac:	1567c83a 	sub	r19,r2,r21
 80089b0:	df001d83 	ldbu	fp,118(sp)
 80089b4:	d8c02215 	stw	r3,136(sp)
 80089b8:	0013883a 	mov	r9,zero
 80089bc:	003e6006 	br	8008340 <__alt_data_end+0xff008340>
 80089c0:	21003fcc 	andi	r4,r4,255
 80089c4:	203fc026 	beq	r4,zero,80088c8 <__alt_data_end+0xff0088c8>
 80089c8:	d9c01d85 	stb	r7,118(sp)
 80089cc:	003fbe06 	br	80088c8 <__alt_data_end+0xff0088c8>
 80089d0:	da802217 	ldw	r10,136(sp)
 80089d4:	54400017 	ldw	r17,0(r10)
 80089d8:	50800104 	addi	r2,r10,4
 80089dc:	883e3b16 	blt	r17,zero,80082cc <__alt_data_end+0xff0082cc>
 80089e0:	d8802215 	stw	r2,136(sp)
 80089e4:	80c00007 	ldb	r3,0(r16)
 80089e8:	003db406 	br	80080bc <__alt_data_end+0xff0080bc>
 80089ec:	01000044 	movi	r4,1
 80089f0:	01c00ac4 	movi	r7,43
 80089f4:	80c00007 	ldb	r3,0(r16)
 80089f8:	003db006 	br	80080bc <__alt_data_end+0xff0080bc>
 80089fc:	80c00007 	ldb	r3,0(r16)
 8008a00:	82800044 	addi	r10,r16,1
 8008a04:	1b423c26 	beq	r3,r13,80092f8 <___vfiprintf_internal_r+0x13b8>
 8008a08:	18bff404 	addi	r2,r3,-48
 8008a0c:	0013883a 	mov	r9,zero
 8008a10:	30822b36 	bltu	r6,r2,80092c0 <___vfiprintf_internal_r+0x1380>
 8008a14:	50c00007 	ldb	r3,0(r10)
 8008a18:	4a4002a4 	muli	r9,r9,10
 8008a1c:	54000044 	addi	r16,r10,1
 8008a20:	8015883a 	mov	r10,r16
 8008a24:	4893883a 	add	r9,r9,r2
 8008a28:	18bff404 	addi	r2,r3,-48
 8008a2c:	30bff92e 	bgeu	r6,r2,8008a14 <__alt_data_end+0xff008a14>
 8008a30:	483da30e 	bge	r9,zero,80080c0 <__alt_data_end+0xff0080c0>
 8008a34:	027fffc4 	movi	r9,-1
 8008a38:	003da106 	br	80080c0 <__alt_data_end+0xff0080c0>
 8008a3c:	a5001014 	ori	r20,r20,64
 8008a40:	80c00007 	ldb	r3,0(r16)
 8008a44:	003d9d06 	br	80080bc <__alt_data_end+0xff0080bc>
 8008a48:	da802217 	ldw	r10,136(sp)
 8008a4c:	d8001d85 	stb	zero,118(sp)
 8008a50:	50c00204 	addi	r3,r10,8
 8008a54:	54800017 	ldw	r18,0(r10)
 8008a58:	54c00117 	ldw	r19,4(r10)
 8008a5c:	4801ca16 	blt	r9,zero,8009188 <___vfiprintf_internal_r+0x1248>
 8008a60:	013fdfc4 	movi	r4,-129
 8008a64:	94c4b03a 	or	r2,r18,r19
 8008a68:	d8c02215 	stw	r3,136(sp)
 8008a6c:	a128703a 	and	r20,r20,r4
 8008a70:	0039883a 	mov	fp,zero
 8008a74:	103f341e 	bne	r2,zero,8008748 <__alt_data_end+0xff008748>
 8008a78:	483e2e26 	beq	r9,zero,8008334 <__alt_data_end+0xff008334>
 8008a7c:	0025883a 	mov	r18,zero
 8008a80:	94800c04 	addi	r18,r18,48
 8008a84:	dc8019c5 	stb	r18,103(sp)
 8008a88:	dcc02717 	ldw	r19,156(sp)
 8008a8c:	dd4019c4 	addi	r21,sp,103
 8008a90:	003e2b06 	br	8008340 <__alt_data_end+0xff008340>
 8008a94:	21003fcc 	andi	r4,r4,255
 8008a98:	2002361e 	bne	r4,zero,8009374 <___vfiprintf_internal_r+0x1434>
 8008a9c:	1801c126 	beq	r3,zero,80091a4 <___vfiprintf_internal_r+0x1264>
 8008aa0:	04800044 	movi	r18,1
 8008aa4:	d8c01005 	stb	r3,64(sp)
 8008aa8:	d8001d85 	stb	zero,118(sp)
 8008aac:	9027883a 	mov	r19,r18
 8008ab0:	dd401004 	addi	r21,sp,64
 8008ab4:	003f1106 	br	80086fc <__alt_data_end+0xff0086fc>
 8008ab8:	d9402117 	ldw	r5,132(sp)
 8008abc:	d9002017 	ldw	r4,128(sp)
 8008ac0:	d9801a04 	addi	r6,sp,104
 8008ac4:	d9c02b15 	stw	r7,172(sp)
 8008ac8:	dbc02a15 	stw	r15,168(sp)
 8008acc:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 8008ad0:	d9c02b17 	ldw	r7,172(sp)
 8008ad4:	dbc02a17 	ldw	r15,168(sp)
 8008ad8:	10006d1e 	bne	r2,zero,8008c90 <___vfiprintf_internal_r+0xd50>
 8008adc:	d9801b17 	ldw	r6,108(sp)
 8008ae0:	d8801c17 	ldw	r2,112(sp)
 8008ae4:	d811883a 	mov	r8,sp
 8008ae8:	31400044 	addi	r5,r6,1
 8008aec:	003e3306 	br	80083bc <__alt_data_end+0xff0083bc>
 8008af0:	d9401b17 	ldw	r5,108(sp)
 8008af4:	d8801c17 	ldw	r2,112(sp)
 8008af8:	29000044 	addi	r4,r5,1
 8008afc:	d8c01d87 	ldb	r3,118(sp)
 8008b00:	183e4d26 	beq	r3,zero,8008438 <__alt_data_end+0xff008438>
 8008b04:	00c00044 	movi	r3,1
 8008b08:	d9401d84 	addi	r5,sp,118
 8008b0c:	10c5883a 	add	r2,r2,r3
 8008b10:	41400015 	stw	r5,0(r8)
 8008b14:	40c00115 	stw	r3,4(r8)
 8008b18:	d8801c15 	stw	r2,112(sp)
 8008b1c:	d9001b15 	stw	r4,108(sp)
 8008b20:	014001c4 	movi	r5,7
 8008b24:	2900a90e 	bge	r5,r4,8008dcc <___vfiprintf_internal_r+0xe8c>
 8008b28:	1000da1e 	bne	r2,zero,8008e94 <___vfiprintf_internal_r+0xf54>
 8008b2c:	7000ab1e 	bne	r14,zero,8008ddc <___vfiprintf_internal_r+0xe9c>
 8008b30:	000b883a 	mov	r5,zero
 8008b34:	1809883a 	mov	r4,r3
 8008b38:	d811883a 	mov	r8,sp
 8008b3c:	00c02004 	movi	r3,128
 8008b40:	e0fe4d26 	beq	fp,r3,8008478 <__alt_data_end+0xff008478>
 8008b44:	4cf9c83a 	sub	fp,r9,r19
 8008b48:	073e7b0e 	bge	zero,fp,8008538 <__alt_data_end+0xff008538>
 8008b4c:	01c00404 	movi	r7,16
 8008b50:	3f01900e 	bge	r7,fp,8009194 <___vfiprintf_internal_r+0x1254>
 8008b54:	00c20074 	movhi	r3,2049
 8008b58:	18c6f004 	addi	r3,r3,7104
 8008b5c:	d8c02415 	stw	r3,144(sp)
 8008b60:	034001c4 	movi	r13,7
 8008b64:	00000506 	br	8008b7c <___vfiprintf_internal_r+0xc3c>
 8008b68:	29000084 	addi	r4,r5,2
 8008b6c:	42000204 	addi	r8,r8,8
 8008b70:	180b883a 	mov	r5,r3
 8008b74:	e73ffc04 	addi	fp,fp,-16
 8008b78:	3f000d0e 	bge	r7,fp,8008bb0 <___vfiprintf_internal_r+0xc70>
 8008b7c:	10800404 	addi	r2,r2,16
 8008b80:	28c00044 	addi	r3,r5,1
 8008b84:	45c00015 	stw	r23,0(r8)
 8008b88:	41c00115 	stw	r7,4(r8)
 8008b8c:	d8801c15 	stw	r2,112(sp)
 8008b90:	d8c01b15 	stw	r3,108(sp)
 8008b94:	68fff40e 	bge	r13,r3,8008b68 <__alt_data_end+0xff008b68>
 8008b98:	1000101e 	bne	r2,zero,8008bdc <___vfiprintf_internal_r+0xc9c>
 8008b9c:	e73ffc04 	addi	fp,fp,-16
 8008ba0:	01000044 	movi	r4,1
 8008ba4:	000b883a 	mov	r5,zero
 8008ba8:	d811883a 	mov	r8,sp
 8008bac:	3f3ff316 	blt	r7,fp,8008b7c <__alt_data_end+0xff008b7c>
 8008bb0:	da802417 	ldw	r10,144(sp)
 8008bb4:	1705883a 	add	r2,r2,fp
 8008bb8:	47000115 	stw	fp,4(r8)
 8008bbc:	42800015 	stw	r10,0(r8)
 8008bc0:	d8801c15 	stw	r2,112(sp)
 8008bc4:	d9001b15 	stw	r4,108(sp)
 8008bc8:	00c001c4 	movi	r3,7
 8008bcc:	19003616 	blt	r3,r4,8008ca8 <___vfiprintf_internal_r+0xd68>
 8008bd0:	42000204 	addi	r8,r8,8
 8008bd4:	21000044 	addi	r4,r4,1
 8008bd8:	003e5706 	br	8008538 <__alt_data_end+0xff008538>
 8008bdc:	d9402117 	ldw	r5,132(sp)
 8008be0:	d9002017 	ldw	r4,128(sp)
 8008be4:	d9801a04 	addi	r6,sp,104
 8008be8:	d9c02b15 	stw	r7,172(sp)
 8008bec:	db402a15 	stw	r13,168(sp)
 8008bf0:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 8008bf4:	d9c02b17 	ldw	r7,172(sp)
 8008bf8:	db402a17 	ldw	r13,168(sp)
 8008bfc:	1000241e 	bne	r2,zero,8008c90 <___vfiprintf_internal_r+0xd50>
 8008c00:	d9401b17 	ldw	r5,108(sp)
 8008c04:	d8801c17 	ldw	r2,112(sp)
 8008c08:	d811883a 	mov	r8,sp
 8008c0c:	29000044 	addi	r4,r5,1
 8008c10:	003fd806 	br	8008b74 <__alt_data_end+0xff008b74>
 8008c14:	d9401b17 	ldw	r5,108(sp)
 8008c18:	00c20074 	movhi	r3,2049
 8008c1c:	18c6f404 	addi	r3,r3,7120
 8008c20:	d8c02415 	stw	r3,144(sp)
 8008c24:	29400044 	addi	r5,r5,1
 8008c28:	d8c02417 	ldw	r3,144(sp)
 8008c2c:	14c5883a 	add	r2,r2,r19
 8008c30:	44c00115 	stw	r19,4(r8)
 8008c34:	40c00015 	stw	r3,0(r8)
 8008c38:	d8801c15 	stw	r2,112(sp)
 8008c3c:	d9401b15 	stw	r5,108(sp)
 8008c40:	00c001c4 	movi	r3,7
 8008c44:	1940070e 	bge	r3,r5,8008c64 <___vfiprintf_internal_r+0xd24>
 8008c48:	103e4826 	beq	r2,zero,800856c <__alt_data_end+0xff00856c>
 8008c4c:	d9402117 	ldw	r5,132(sp)
 8008c50:	d9002017 	ldw	r4,128(sp)
 8008c54:	d9801a04 	addi	r6,sp,104
 8008c58:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 8008c5c:	10000c1e 	bne	r2,zero,8008c90 <___vfiprintf_internal_r+0xd50>
 8008c60:	d8801c17 	ldw	r2,112(sp)
 8008c64:	8c80010e 	bge	r17,r18,8008c6c <___vfiprintf_internal_r+0xd2c>
 8008c68:	9023883a 	mov	r17,r18
 8008c6c:	da802317 	ldw	r10,140(sp)
 8008c70:	5455883a 	add	r10,r10,r17
 8008c74:	da802315 	stw	r10,140(sp)
 8008c78:	103e4126 	beq	r2,zero,8008580 <__alt_data_end+0xff008580>
 8008c7c:	d9402117 	ldw	r5,132(sp)
 8008c80:	d9002017 	ldw	r4,128(sp)
 8008c84:	d9801a04 	addi	r6,sp,104
 8008c88:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 8008c8c:	103e3c26 	beq	r2,zero,8008580 <__alt_data_end+0xff008580>
 8008c90:	dd002117 	ldw	r20,132(sp)
 8008c94:	a080030b 	ldhu	r2,12(r20)
 8008c98:	1080100c 	andi	r2,r2,64
 8008c9c:	1001231e 	bne	r2,zero,800912c <___vfiprintf_internal_r+0x11ec>
 8008ca0:	d8802317 	ldw	r2,140(sp)
 8008ca4:	003d7b06 	br	8008294 <__alt_data_end+0xff008294>
 8008ca8:	1000991e 	bne	r2,zero,8008f10 <___vfiprintf_internal_r+0xfd0>
 8008cac:	00c00044 	movi	r3,1
 8008cb0:	9805883a 	mov	r2,r19
 8008cb4:	dd400015 	stw	r21,0(sp)
 8008cb8:	dcc00115 	stw	r19,4(sp)
 8008cbc:	dcc01c15 	stw	r19,112(sp)
 8008cc0:	d8c01b15 	stw	r3,108(sp)
 8008cc4:	d811883a 	mov	r8,sp
 8008cc8:	42000204 	addi	r8,r8,8
 8008ccc:	a2c0010c 	andi	r11,r20,4
 8008cd0:	583fe426 	beq	r11,zero,8008c64 <__alt_data_end+0xff008c64>
 8008cd4:	8ca7c83a 	sub	r19,r17,r18
 8008cd8:	04ffe20e 	bge	zero,r19,8008c64 <__alt_data_end+0xff008c64>
 8008cdc:	01c00404 	movi	r7,16
 8008ce0:	3cffcc0e 	bge	r7,r19,8008c14 <__alt_data_end+0xff008c14>
 8008ce4:	02820074 	movhi	r10,2049
 8008ce8:	5286f404 	addi	r10,r10,7120
 8008cec:	d9001b17 	ldw	r4,108(sp)
 8008cf0:	da802415 	stw	r10,144(sp)
 8008cf4:	382b883a 	mov	r21,r7
 8008cf8:	050001c4 	movi	r20,7
 8008cfc:	df002017 	ldw	fp,128(sp)
 8008d00:	00000506 	br	8008d18 <___vfiprintf_internal_r+0xdd8>
 8008d04:	21400084 	addi	r5,r4,2
 8008d08:	42000204 	addi	r8,r8,8
 8008d0c:	1809883a 	mov	r4,r3
 8008d10:	9cfffc04 	addi	r19,r19,-16
 8008d14:	acffc40e 	bge	r21,r19,8008c28 <__alt_data_end+0xff008c28>
 8008d18:	10800404 	addi	r2,r2,16
 8008d1c:	20c00044 	addi	r3,r4,1
 8008d20:	45800015 	stw	r22,0(r8)
 8008d24:	45400115 	stw	r21,4(r8)
 8008d28:	d8801c15 	stw	r2,112(sp)
 8008d2c:	d8c01b15 	stw	r3,108(sp)
 8008d30:	a0fff40e 	bge	r20,r3,8008d04 <__alt_data_end+0xff008d04>
 8008d34:	1000041e 	bne	r2,zero,8008d48 <___vfiprintf_internal_r+0xe08>
 8008d38:	01400044 	movi	r5,1
 8008d3c:	0009883a 	mov	r4,zero
 8008d40:	d811883a 	mov	r8,sp
 8008d44:	003ff206 	br	8008d10 <__alt_data_end+0xff008d10>
 8008d48:	d9402117 	ldw	r5,132(sp)
 8008d4c:	d9801a04 	addi	r6,sp,104
 8008d50:	e009883a 	mov	r4,fp
 8008d54:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 8008d58:	103fcd1e 	bne	r2,zero,8008c90 <__alt_data_end+0xff008c90>
 8008d5c:	d9001b17 	ldw	r4,108(sp)
 8008d60:	d8801c17 	ldw	r2,112(sp)
 8008d64:	d811883a 	mov	r8,sp
 8008d68:	21400044 	addi	r5,r4,1
 8008d6c:	003fe806 	br	8008d10 <__alt_data_end+0xff008d10>
 8008d70:	d9402117 	ldw	r5,132(sp)
 8008d74:	d9002017 	ldw	r4,128(sp)
 8008d78:	d9801a04 	addi	r6,sp,104
 8008d7c:	d9c02b15 	stw	r7,172(sp)
 8008d80:	db402a15 	stw	r13,168(sp)
 8008d84:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 8008d88:	d9c02b17 	ldw	r7,172(sp)
 8008d8c:	db402a17 	ldw	r13,168(sp)
 8008d90:	103fbf1e 	bne	r2,zero,8008c90 <__alt_data_end+0xff008c90>
 8008d94:	d9401b17 	ldw	r5,108(sp)
 8008d98:	d8801c17 	ldw	r2,112(sp)
 8008d9c:	d811883a 	mov	r8,sp
 8008da0:	29800044 	addi	r6,r5,1
 8008da4:	003dc406 	br	80084b8 <__alt_data_end+0xff0084b8>
 8008da8:	1000d21e 	bne	r2,zero,80090f4 <___vfiprintf_internal_r+0x11b4>
 8008dac:	d8c01d87 	ldb	r3,118(sp)
 8008db0:	18009526 	beq	r3,zero,8009008 <___vfiprintf_internal_r+0x10c8>
 8008db4:	00800044 	movi	r2,1
 8008db8:	d8c01d84 	addi	r3,sp,118
 8008dbc:	1009883a 	mov	r4,r2
 8008dc0:	d8c00015 	stw	r3,0(sp)
 8008dc4:	d8800115 	stw	r2,4(sp)
 8008dc8:	d811883a 	mov	r8,sp
 8008dcc:	200b883a 	mov	r5,r4
 8008dd0:	42000204 	addi	r8,r8,8
 8008dd4:	21000044 	addi	r4,r4,1
 8008dd8:	003d9706 	br	8008438 <__alt_data_end+0xff008438>
 8008ddc:	d9001d04 	addi	r4,sp,116
 8008de0:	00800084 	movi	r2,2
 8008de4:	d9000015 	stw	r4,0(sp)
 8008de8:	d8800115 	stw	r2,4(sp)
 8008dec:	1809883a 	mov	r4,r3
 8008df0:	d811883a 	mov	r8,sp
 8008df4:	200b883a 	mov	r5,r4
 8008df8:	42000204 	addi	r8,r8,8
 8008dfc:	21000044 	addi	r4,r4,1
 8008e00:	003f4e06 	br	8008b3c <__alt_data_end+0xff008b3c>
 8008e04:	d8001d85 	stb	zero,118(sp)
 8008e08:	48005016 	blt	r9,zero,8008f4c <___vfiprintf_internal_r+0x100c>
 8008e0c:	00ffdfc4 	movi	r3,-129
 8008e10:	94c4b03a 	or	r2,r18,r19
 8008e14:	a0e8703a 	and	r20,r20,r3
 8008e18:	103d4426 	beq	r2,zero,800832c <__alt_data_end+0xff00832c>
 8008e1c:	0039883a 	mov	fp,zero
 8008e20:	d9002617 	ldw	r4,152(sp)
 8008e24:	dd401a04 	addi	r21,sp,104
 8008e28:	908003cc 	andi	r2,r18,15
 8008e2c:	9806973a 	slli	r3,r19,28
 8008e30:	2085883a 	add	r2,r4,r2
 8008e34:	9024d13a 	srli	r18,r18,4
 8008e38:	10800003 	ldbu	r2,0(r2)
 8008e3c:	9826d13a 	srli	r19,r19,4
 8008e40:	ad7fffc4 	addi	r21,r21,-1
 8008e44:	1ca4b03a 	or	r18,r3,r18
 8008e48:	a8800005 	stb	r2,0(r21)
 8008e4c:	94c4b03a 	or	r2,r18,r19
 8008e50:	103ff51e 	bne	r2,zero,8008e28 <__alt_data_end+0xff008e28>
 8008e54:	003e5906 	br	80087bc <__alt_data_end+0xff0087bc>
 8008e58:	d9402117 	ldw	r5,132(sp)
 8008e5c:	d9002017 	ldw	r4,128(sp)
 8008e60:	d9801a04 	addi	r6,sp,104
 8008e64:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 8008e68:	103f891e 	bne	r2,zero,8008c90 <__alt_data_end+0xff008c90>
 8008e6c:	d8801c17 	ldw	r2,112(sp)
 8008e70:	d811883a 	mov	r8,sp
 8008e74:	003f9506 	br	8008ccc <__alt_data_end+0xff008ccc>
 8008e78:	d9402117 	ldw	r5,132(sp)
 8008e7c:	d9002017 	ldw	r4,128(sp)
 8008e80:	d9801a04 	addi	r6,sp,104
 8008e84:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 8008e88:	103f811e 	bne	r2,zero,8008c90 <__alt_data_end+0xff008c90>
 8008e8c:	d811883a 	mov	r8,sp
 8008e90:	003ced06 	br	8008248 <__alt_data_end+0xff008248>
 8008e94:	d9402117 	ldw	r5,132(sp)
 8008e98:	d9002017 	ldw	r4,128(sp)
 8008e9c:	d9801a04 	addi	r6,sp,104
 8008ea0:	da402c15 	stw	r9,176(sp)
 8008ea4:	db802a15 	stw	r14,168(sp)
 8008ea8:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 8008eac:	da402c17 	ldw	r9,176(sp)
 8008eb0:	db802a17 	ldw	r14,168(sp)
 8008eb4:	103f761e 	bne	r2,zero,8008c90 <__alt_data_end+0xff008c90>
 8008eb8:	d9401b17 	ldw	r5,108(sp)
 8008ebc:	d8801c17 	ldw	r2,112(sp)
 8008ec0:	d811883a 	mov	r8,sp
 8008ec4:	29000044 	addi	r4,r5,1
 8008ec8:	003d5b06 	br	8008438 <__alt_data_end+0xff008438>
 8008ecc:	d9402117 	ldw	r5,132(sp)
 8008ed0:	d9002017 	ldw	r4,128(sp)
 8008ed4:	d9801a04 	addi	r6,sp,104
 8008ed8:	da402c15 	stw	r9,176(sp)
 8008edc:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 8008ee0:	da402c17 	ldw	r9,176(sp)
 8008ee4:	103f6a1e 	bne	r2,zero,8008c90 <__alt_data_end+0xff008c90>
 8008ee8:	d9401b17 	ldw	r5,108(sp)
 8008eec:	d8801c17 	ldw	r2,112(sp)
 8008ef0:	d811883a 	mov	r8,sp
 8008ef4:	29000044 	addi	r4,r5,1
 8008ef8:	003f1006 	br	8008b3c <__alt_data_end+0xff008b3c>
 8008efc:	1000c31e 	bne	r2,zero,800920c <___vfiprintf_internal_r+0x12cc>
 8008f00:	01000044 	movi	r4,1
 8008f04:	000b883a 	mov	r5,zero
 8008f08:	d811883a 	mov	r8,sp
 8008f0c:	003f0d06 	br	8008b44 <__alt_data_end+0xff008b44>
 8008f10:	d9402117 	ldw	r5,132(sp)
 8008f14:	d9002017 	ldw	r4,128(sp)
 8008f18:	d9801a04 	addi	r6,sp,104
 8008f1c:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 8008f20:	103f5b1e 	bne	r2,zero,8008c90 <__alt_data_end+0xff008c90>
 8008f24:	d9001b17 	ldw	r4,108(sp)
 8008f28:	d8801c17 	ldw	r2,112(sp)
 8008f2c:	d811883a 	mov	r8,sp
 8008f30:	21000044 	addi	r4,r4,1
 8008f34:	003d8006 	br	8008538 <__alt_data_end+0xff008538>
 8008f38:	01020074 	movhi	r4,2049
 8008f3c:	21068f04 	addi	r4,r4,6716
 8008f40:	d9002615 	stw	r4,152(sp)
 8008f44:	d8c02215 	stw	r3,136(sp)
 8008f48:	1029883a 	mov	r20,r2
 8008f4c:	94c4b03a 	or	r2,r18,r19
 8008f50:	103fb21e 	bne	r2,zero,8008e1c <__alt_data_end+0xff008e1c>
 8008f54:	0039883a 	mov	fp,zero
 8008f58:	00800084 	movi	r2,2
 8008f5c:	003e6b06 	br	800890c <__alt_data_end+0xff00890c>
 8008f60:	da802217 	ldw	r10,136(sp)
 8008f64:	d8001d85 	stb	zero,118(sp)
 8008f68:	0027883a 	mov	r19,zero
 8008f6c:	50800104 	addi	r2,r10,4
 8008f70:	54800017 	ldw	r18,0(r10)
 8008f74:	483e6016 	blt	r9,zero,80088f8 <__alt_data_end+0xff0088f8>
 8008f78:	00ffdfc4 	movi	r3,-129
 8008f7c:	d8802215 	stw	r2,136(sp)
 8008f80:	a0e8703a 	and	r20,r20,r3
 8008f84:	0039883a 	mov	fp,zero
 8008f88:	903ebb26 	beq	r18,zero,8008a78 <__alt_data_end+0xff008a78>
 8008f8c:	00800244 	movi	r2,9
 8008f90:	14bdee36 	bltu	r2,r18,800874c <__alt_data_end+0xff00874c>
 8008f94:	003eba06 	br	8008a80 <__alt_data_end+0xff008a80>
 8008f98:	00800c04 	movi	r2,48
 8008f9c:	d8c01d45 	stb	r3,117(sp)
 8008fa0:	d8801d05 	stb	r2,116(sp)
 8008fa4:	d8001d85 	stb	zero,118(sp)
 8008fa8:	a0c00094 	ori	r3,r20,2
 8008fac:	4800a916 	blt	r9,zero,8009254 <___vfiprintf_internal_r+0x1314>
 8008fb0:	00bfdfc4 	movi	r2,-129
 8008fb4:	a096703a 	and	r11,r20,r2
 8008fb8:	5d000094 	ori	r20,r11,2
 8008fbc:	0039883a 	mov	fp,zero
 8008fc0:	003f9706 	br	8008e20 <__alt_data_end+0xff008e20>
 8008fc4:	8025883a 	mov	r18,r16
 8008fc8:	003c2e06 	br	8008084 <__alt_data_end+0xff008084>
 8008fcc:	00820074 	movhi	r2,2049
 8008fd0:	10868f04 	addi	r2,r2,6716
 8008fd4:	0039883a 	mov	fp,zero
 8008fd8:	d8802615 	stw	r2,152(sp)
 8008fdc:	003f9006 	br	8008e20 <__alt_data_end+0xff008e20>
 8008fe0:	04a5c83a 	sub	r18,zero,r18
 8008fe4:	07000b44 	movi	fp,45
 8008fe8:	9004c03a 	cmpne	r2,r18,zero
 8008fec:	04e7c83a 	sub	r19,zero,r19
 8008ff0:	df001d85 	stb	fp,118(sp)
 8008ff4:	98a7c83a 	sub	r19,r19,r2
 8008ff8:	48009f16 	blt	r9,zero,8009278 <___vfiprintf_internal_r+0x1338>
 8008ffc:	00bfdfc4 	movi	r2,-129
 8009000:	a0a8703a 	and	r20,r20,r2
 8009004:	003dd006 	br	8008748 <__alt_data_end+0xff008748>
 8009008:	70004c26 	beq	r14,zero,800913c <___vfiprintf_internal_r+0x11fc>
 800900c:	00800084 	movi	r2,2
 8009010:	d8c01d04 	addi	r3,sp,116
 8009014:	d8c00015 	stw	r3,0(sp)
 8009018:	d8800115 	stw	r2,4(sp)
 800901c:	01000044 	movi	r4,1
 8009020:	d811883a 	mov	r8,sp
 8009024:	003f7306 	br	8008df4 <__alt_data_end+0xff008df4>
 8009028:	a080100c 	andi	r2,r20,64
 800902c:	da802217 	ldw	r10,136(sp)
 8009030:	103e0626 	beq	r2,zero,800884c <__alt_data_end+0xff00884c>
 8009034:	5480000f 	ldh	r18,0(r10)
 8009038:	52800104 	addi	r10,r10,4
 800903c:	da802215 	stw	r10,136(sp)
 8009040:	9027d7fa 	srai	r19,r18,31
 8009044:	9805883a 	mov	r2,r19
 8009048:	003db806 	br	800872c <__alt_data_end+0xff00872c>
 800904c:	a080040c 	andi	r2,r20,16
 8009050:	1000091e 	bne	r2,zero,8009078 <___vfiprintf_internal_r+0x1138>
 8009054:	a2c0100c 	andi	r11,r20,64
 8009058:	58000726 	beq	r11,zero,8009078 <___vfiprintf_internal_r+0x1138>
 800905c:	da802217 	ldw	r10,136(sp)
 8009060:	50800017 	ldw	r2,0(r10)
 8009064:	52800104 	addi	r10,r10,4
 8009068:	da802215 	stw	r10,136(sp)
 800906c:	da802317 	ldw	r10,140(sp)
 8009070:	1280000d 	sth	r10,0(r2)
 8009074:	003be706 	br	8008014 <__alt_data_end+0xff008014>
 8009078:	da802217 	ldw	r10,136(sp)
 800907c:	50800017 	ldw	r2,0(r10)
 8009080:	52800104 	addi	r10,r10,4
 8009084:	da802215 	stw	r10,136(sp)
 8009088:	da802317 	ldw	r10,140(sp)
 800908c:	12800015 	stw	r10,0(r2)
 8009090:	003be006 	br	8008014 <__alt_data_end+0xff008014>
 8009094:	a080100c 	andi	r2,r20,64
 8009098:	da802217 	ldw	r10,136(sp)
 800909c:	10003026 	beq	r2,zero,8009160 <___vfiprintf_internal_r+0x1220>
 80090a0:	5480000b 	ldhu	r18,0(r10)
 80090a4:	52800104 	addi	r10,r10,4
 80090a8:	0027883a 	mov	r19,zero
 80090ac:	da802215 	stw	r10,136(sp)
 80090b0:	003d8006 	br	80086b4 <__alt_data_end+0xff0086b4>
 80090b4:	80c00007 	ldb	r3,0(r16)
 80090b8:	003c0006 	br	80080bc <__alt_data_end+0xff0080bc>
 80090bc:	a080100c 	andi	r2,r20,64
 80090c0:	d8001d85 	stb	zero,118(sp)
 80090c4:	da802217 	ldw	r10,136(sp)
 80090c8:	1000201e 	bne	r2,zero,800914c <___vfiprintf_internal_r+0x120c>
 80090cc:	50800104 	addi	r2,r10,4
 80090d0:	54800017 	ldw	r18,0(r10)
 80090d4:	0027883a 	mov	r19,zero
 80090d8:	483def0e 	bge	r9,zero,8008898 <__alt_data_end+0xff008898>
 80090dc:	94c6b03a 	or	r3,r18,r19
 80090e0:	d8802215 	stw	r2,136(sp)
 80090e4:	183d4e1e 	bne	r3,zero,8008620 <__alt_data_end+0xff008620>
 80090e8:	0039883a 	mov	fp,zero
 80090ec:	0005883a 	mov	r2,zero
 80090f0:	003e0606 	br	800890c <__alt_data_end+0xff00890c>
 80090f4:	d9402117 	ldw	r5,132(sp)
 80090f8:	d9002017 	ldw	r4,128(sp)
 80090fc:	d9801a04 	addi	r6,sp,104
 8009100:	da402c15 	stw	r9,176(sp)
 8009104:	db802a15 	stw	r14,168(sp)
 8009108:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 800910c:	da402c17 	ldw	r9,176(sp)
 8009110:	db802a17 	ldw	r14,168(sp)
 8009114:	103ede1e 	bne	r2,zero,8008c90 <__alt_data_end+0xff008c90>
 8009118:	d9401b17 	ldw	r5,108(sp)
 800911c:	d8801c17 	ldw	r2,112(sp)
 8009120:	d811883a 	mov	r8,sp
 8009124:	29000044 	addi	r4,r5,1
 8009128:	003e7406 	br	8008afc <__alt_data_end+0xff008afc>
 800912c:	00bfffc4 	movi	r2,-1
 8009130:	003c5806 	br	8008294 <__alt_data_end+0xff008294>
 8009134:	d811883a 	mov	r8,sp
 8009138:	003ee806 	br	8008cdc <__alt_data_end+0xff008cdc>
 800913c:	000b883a 	mov	r5,zero
 8009140:	01000044 	movi	r4,1
 8009144:	d811883a 	mov	r8,sp
 8009148:	003e7c06 	br	8008b3c <__alt_data_end+0xff008b3c>
 800914c:	50800104 	addi	r2,r10,4
 8009150:	5480000b 	ldhu	r18,0(r10)
 8009154:	0027883a 	mov	r19,zero
 8009158:	483dcf0e 	bge	r9,zero,8008898 <__alt_data_end+0xff008898>
 800915c:	003fdf06 	br	80090dc <__alt_data_end+0xff0090dc>
 8009160:	54800017 	ldw	r18,0(r10)
 8009164:	52800104 	addi	r10,r10,4
 8009168:	0027883a 	mov	r19,zero
 800916c:	da802215 	stw	r10,136(sp)
 8009170:	003d5006 	br	80086b4 <__alt_data_end+0xff0086b4>
 8009174:	50800104 	addi	r2,r10,4
 8009178:	5480000b 	ldhu	r18,0(r10)
 800917c:	0027883a 	mov	r19,zero
 8009180:	483f7d0e 	bge	r9,zero,8008f78 <__alt_data_end+0xff008f78>
 8009184:	003ddc06 	br	80088f8 <__alt_data_end+0xff0088f8>
 8009188:	d8c02215 	stw	r3,136(sp)
 800918c:	0039883a 	mov	fp,zero
 8009190:	003ddb06 	br	8008900 <__alt_data_end+0xff008900>
 8009194:	02820074 	movhi	r10,2049
 8009198:	5286f004 	addi	r10,r10,7104
 800919c:	da802415 	stw	r10,144(sp)
 80091a0:	003e8306 	br	8008bb0 <__alt_data_end+0xff008bb0>
 80091a4:	d8801c17 	ldw	r2,112(sp)
 80091a8:	dd002117 	ldw	r20,132(sp)
 80091ac:	103eb926 	beq	r2,zero,8008c94 <__alt_data_end+0xff008c94>
 80091b0:	d9002017 	ldw	r4,128(sp)
 80091b4:	d9801a04 	addi	r6,sp,104
 80091b8:	a00b883a 	mov	r5,r20
 80091bc:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 80091c0:	003eb406 	br	8008c94 <__alt_data_end+0xff008c94>
 80091c4:	80c00043 	ldbu	r3,1(r16)
 80091c8:	a5000814 	ori	r20,r20,32
 80091cc:	84000044 	addi	r16,r16,1
 80091d0:	18c03fcc 	andi	r3,r3,255
 80091d4:	18c0201c 	xori	r3,r3,128
 80091d8:	18ffe004 	addi	r3,r3,-128
 80091dc:	003bb706 	br	80080bc <__alt_data_end+0xff0080bc>
 80091e0:	a809883a 	mov	r4,r21
 80091e4:	d8c02a15 	stw	r3,168(sp)
 80091e8:	da002b15 	stw	r8,172(sp)
 80091ec:	800072c0 	call	800072c <strlen>
 80091f0:	d8c02a17 	ldw	r3,168(sp)
 80091f4:	1027883a 	mov	r19,r2
 80091f8:	df001d83 	ldbu	fp,118(sp)
 80091fc:	d8c02215 	stw	r3,136(sp)
 8009200:	0013883a 	mov	r9,zero
 8009204:	da002b17 	ldw	r8,172(sp)
 8009208:	003c4d06 	br	8008340 <__alt_data_end+0xff008340>
 800920c:	d9402117 	ldw	r5,132(sp)
 8009210:	d9002017 	ldw	r4,128(sp)
 8009214:	d9801a04 	addi	r6,sp,104
 8009218:	da402c15 	stw	r9,176(sp)
 800921c:	8007e2c0 	call	8007e2c <__sprint_r.part.0>
 8009220:	da402c17 	ldw	r9,176(sp)
 8009224:	103e9a1e 	bne	r2,zero,8008c90 <__alt_data_end+0xff008c90>
 8009228:	d9401b17 	ldw	r5,108(sp)
 800922c:	d8801c17 	ldw	r2,112(sp)
 8009230:	d811883a 	mov	r8,sp
 8009234:	29000044 	addi	r4,r5,1
 8009238:	003e4206 	br	8008b44 <__alt_data_end+0xff008b44>
 800923c:	d9401b17 	ldw	r5,108(sp)
 8009240:	01020074 	movhi	r4,2049
 8009244:	2106f404 	addi	r4,r4,7120
 8009248:	d9002415 	stw	r4,144(sp)
 800924c:	29400044 	addi	r5,r5,1
 8009250:	003c6d06 	br	8008408 <__alt_data_end+0xff008408>
 8009254:	0039883a 	mov	fp,zero
 8009258:	00800084 	movi	r2,2
 800925c:	10803fcc 	andi	r2,r2,255
 8009260:	01000044 	movi	r4,1
 8009264:	11001e26 	beq	r2,r4,80092e0 <___vfiprintf_internal_r+0x13a0>
 8009268:	01000084 	movi	r4,2
 800926c:	11001e1e 	bne	r2,r4,80092e8 <___vfiprintf_internal_r+0x13a8>
 8009270:	1829883a 	mov	r20,r3
 8009274:	003eea06 	br	8008e20 <__alt_data_end+0xff008e20>
 8009278:	a007883a 	mov	r3,r20
 800927c:	00800044 	movi	r2,1
 8009280:	003ff606 	br	800925c <__alt_data_end+0xff00925c>
 8009284:	00800184 	movi	r2,6
 8009288:	1240012e 	bgeu	r2,r9,8009290 <___vfiprintf_internal_r+0x1350>
 800928c:	1013883a 	mov	r9,r2
 8009290:	4827883a 	mov	r19,r9
 8009294:	4825883a 	mov	r18,r9
 8009298:	48001516 	blt	r9,zero,80092f0 <___vfiprintf_internal_r+0x13b0>
 800929c:	05420074 	movhi	r21,2049
 80092a0:	d8c02215 	stw	r3,136(sp)
 80092a4:	ad469404 	addi	r21,r21,6736
 80092a8:	003d1406 	br	80086fc <__alt_data_end+0xff0086fc>
 80092ac:	02820074 	movhi	r10,2049
 80092b0:	5286f004 	addi	r10,r10,7104
 80092b4:	da802415 	stw	r10,144(sp)
 80092b8:	200d883a 	mov	r6,r4
 80092bc:	003c9106 	br	8008504 <__alt_data_end+0xff008504>
 80092c0:	5021883a 	mov	r16,r10
 80092c4:	0013883a 	mov	r9,zero
 80092c8:	003b7d06 	br	80080c0 <__alt_data_end+0xff0080c0>
 80092cc:	4827883a 	mov	r19,r9
 80092d0:	df001d83 	ldbu	fp,118(sp)
 80092d4:	d8c02215 	stw	r3,136(sp)
 80092d8:	0013883a 	mov	r9,zero
 80092dc:	003c1806 	br	8008340 <__alt_data_end+0xff008340>
 80092e0:	1829883a 	mov	r20,r3
 80092e4:	003d1806 	br	8008748 <__alt_data_end+0xff008748>
 80092e8:	1829883a 	mov	r20,r3
 80092ec:	003ccd06 	br	8008624 <__alt_data_end+0xff008624>
 80092f0:	0025883a 	mov	r18,zero
 80092f4:	003fe906 	br	800929c <__alt_data_end+0xff00929c>
 80092f8:	d8802217 	ldw	r2,136(sp)
 80092fc:	80c00043 	ldbu	r3,1(r16)
 8009300:	5021883a 	mov	r16,r10
 8009304:	12400017 	ldw	r9,0(r2)
 8009308:	10800104 	addi	r2,r2,4
 800930c:	d8802215 	stw	r2,136(sp)
 8009310:	483faf0e 	bge	r9,zero,80091d0 <__alt_data_end+0xff0091d0>
 8009314:	18c03fcc 	andi	r3,r3,255
 8009318:	18c0201c 	xori	r3,r3,128
 800931c:	027fffc4 	movi	r9,-1
 8009320:	18ffe004 	addi	r3,r3,-128
 8009324:	003b6506 	br	80080bc <__alt_data_end+0xff0080bc>
 8009328:	d9c01d85 	stb	r7,118(sp)
 800932c:	003ca006 	br	80085b0 <__alt_data_end+0xff0085b0>
 8009330:	d9c01d85 	stb	r7,118(sp)
 8009334:	003cad06 	br	80085ec <__alt_data_end+0xff0085ec>
 8009338:	d9c01d85 	stb	r7,118(sp)
 800933c:	003d7d06 	br	8008934 <__alt_data_end+0xff008934>
 8009340:	d9c01d85 	stb	r7,118(sp)
 8009344:	003d5f06 	br	80088c4 <__alt_data_end+0xff0088c4>
 8009348:	a080004c 	andi	r2,r20,1
 800934c:	0039883a 	mov	fp,zero
 8009350:	10000526 	beq	r2,zero,8009368 <___vfiprintf_internal_r+0x1428>
 8009354:	00800c04 	movi	r2,48
 8009358:	d88019c5 	stb	r2,103(sp)
 800935c:	dcc02717 	ldw	r19,156(sp)
 8009360:	dd4019c4 	addi	r21,sp,103
 8009364:	003bf606 	br	8008340 <__alt_data_end+0xff008340>
 8009368:	0027883a 	mov	r19,zero
 800936c:	dd401a04 	addi	r21,sp,104
 8009370:	003bf306 	br	8008340 <__alt_data_end+0xff008340>
 8009374:	d9c01d85 	stb	r7,118(sp)
 8009378:	003dc806 	br	8008a9c <__alt_data_end+0xff008a9c>
 800937c:	d9c01d85 	stb	r7,118(sp)
 8009380:	003d3a06 	br	800886c <__alt_data_end+0xff00886c>
 8009384:	d9c01d85 	stb	r7,118(sp)
 8009388:	003d2a06 	br	8008834 <__alt_data_end+0xff008834>
 800938c:	d9c01d85 	stb	r7,118(sp)
 8009390:	003cde06 	br	800870c <__alt_data_end+0xff00870c>
 8009394:	d9c01d85 	stb	r7,118(sp)
 8009398:	003cbc06 	br	800868c <__alt_data_end+0xff00868c>

0800939c <__vfiprintf_internal>:
 800939c:	00820074 	movhi	r2,2049
 80093a0:	108e0a04 	addi	r2,r2,14376
 80093a4:	300f883a 	mov	r7,r6
 80093a8:	280d883a 	mov	r6,r5
 80093ac:	200b883a 	mov	r5,r4
 80093b0:	11000017 	ldw	r4,0(r2)
 80093b4:	8007f401 	jmpi	8007f40 <___vfiprintf_internal_r>

080093b8 <__sbprintf>:
 80093b8:	2880030b 	ldhu	r2,12(r5)
 80093bc:	2ac01917 	ldw	r11,100(r5)
 80093c0:	2a80038b 	ldhu	r10,14(r5)
 80093c4:	2a400717 	ldw	r9,28(r5)
 80093c8:	2a000917 	ldw	r8,36(r5)
 80093cc:	defee204 	addi	sp,sp,-1144
 80093d0:	00c10004 	movi	r3,1024
 80093d4:	dc011a15 	stw	r16,1128(sp)
 80093d8:	10bfff4c 	andi	r2,r2,65533
 80093dc:	2821883a 	mov	r16,r5
 80093e0:	d8cb883a 	add	r5,sp,r3
 80093e4:	dc811c15 	stw	r18,1136(sp)
 80093e8:	dc411b15 	stw	r17,1132(sp)
 80093ec:	dfc11d15 	stw	ra,1140(sp)
 80093f0:	2025883a 	mov	r18,r4
 80093f4:	d881030d 	sth	r2,1036(sp)
 80093f8:	dac11915 	stw	r11,1124(sp)
 80093fc:	da81038d 	sth	r10,1038(sp)
 8009400:	da410715 	stw	r9,1052(sp)
 8009404:	da010915 	stw	r8,1060(sp)
 8009408:	dec10015 	stw	sp,1024(sp)
 800940c:	dec10415 	stw	sp,1040(sp)
 8009410:	d8c10215 	stw	r3,1032(sp)
 8009414:	d8c10515 	stw	r3,1044(sp)
 8009418:	d8010615 	stw	zero,1048(sp)
 800941c:	8007f400 	call	8007f40 <___vfiprintf_internal_r>
 8009420:	1023883a 	mov	r17,r2
 8009424:	10000416 	blt	r2,zero,8009438 <__sbprintf+0x80>
 8009428:	d9410004 	addi	r5,sp,1024
 800942c:	9009883a 	mov	r4,r18
 8009430:	800468c0 	call	800468c <_fflush_r>
 8009434:	10000d1e 	bne	r2,zero,800946c <__sbprintf+0xb4>
 8009438:	d881030b 	ldhu	r2,1036(sp)
 800943c:	1080100c 	andi	r2,r2,64
 8009440:	10000326 	beq	r2,zero,8009450 <__sbprintf+0x98>
 8009444:	8080030b 	ldhu	r2,12(r16)
 8009448:	10801014 	ori	r2,r2,64
 800944c:	8080030d 	sth	r2,12(r16)
 8009450:	8805883a 	mov	r2,r17
 8009454:	dfc11d17 	ldw	ra,1140(sp)
 8009458:	dc811c17 	ldw	r18,1136(sp)
 800945c:	dc411b17 	ldw	r17,1132(sp)
 8009460:	dc011a17 	ldw	r16,1128(sp)
 8009464:	dec11e04 	addi	sp,sp,1144
 8009468:	f800283a 	ret
 800946c:	047fffc4 	movi	r17,-1
 8009470:	003ff106 	br	8009438 <__alt_data_end+0xff009438>

08009474 <__swbuf_r>:
 8009474:	defffb04 	addi	sp,sp,-20
 8009478:	dcc00315 	stw	r19,12(sp)
 800947c:	dc800215 	stw	r18,8(sp)
 8009480:	dc000015 	stw	r16,0(sp)
 8009484:	dfc00415 	stw	ra,16(sp)
 8009488:	dc400115 	stw	r17,4(sp)
 800948c:	2025883a 	mov	r18,r4
 8009490:	2827883a 	mov	r19,r5
 8009494:	3021883a 	mov	r16,r6
 8009498:	20000226 	beq	r4,zero,80094a4 <__swbuf_r+0x30>
 800949c:	20800e17 	ldw	r2,56(r4)
 80094a0:	10004226 	beq	r2,zero,80095ac <__swbuf_r+0x138>
 80094a4:	80800617 	ldw	r2,24(r16)
 80094a8:	8100030b 	ldhu	r4,12(r16)
 80094ac:	80800215 	stw	r2,8(r16)
 80094b0:	2080020c 	andi	r2,r4,8
 80094b4:	10003626 	beq	r2,zero,8009590 <__swbuf_r+0x11c>
 80094b8:	80c00417 	ldw	r3,16(r16)
 80094bc:	18003426 	beq	r3,zero,8009590 <__swbuf_r+0x11c>
 80094c0:	2088000c 	andi	r2,r4,8192
 80094c4:	9c403fcc 	andi	r17,r19,255
 80094c8:	10001a26 	beq	r2,zero,8009534 <__swbuf_r+0xc0>
 80094cc:	80800017 	ldw	r2,0(r16)
 80094d0:	81000517 	ldw	r4,20(r16)
 80094d4:	10c7c83a 	sub	r3,r2,r3
 80094d8:	1900200e 	bge	r3,r4,800955c <__swbuf_r+0xe8>
 80094dc:	18c00044 	addi	r3,r3,1
 80094e0:	81000217 	ldw	r4,8(r16)
 80094e4:	11400044 	addi	r5,r2,1
 80094e8:	81400015 	stw	r5,0(r16)
 80094ec:	213fffc4 	addi	r4,r4,-1
 80094f0:	81000215 	stw	r4,8(r16)
 80094f4:	14c00005 	stb	r19,0(r2)
 80094f8:	80800517 	ldw	r2,20(r16)
 80094fc:	10c01e26 	beq	r2,r3,8009578 <__swbuf_r+0x104>
 8009500:	8080030b 	ldhu	r2,12(r16)
 8009504:	1080004c 	andi	r2,r2,1
 8009508:	10000226 	beq	r2,zero,8009514 <__swbuf_r+0xa0>
 800950c:	00800284 	movi	r2,10
 8009510:	88801926 	beq	r17,r2,8009578 <__swbuf_r+0x104>
 8009514:	8805883a 	mov	r2,r17
 8009518:	dfc00417 	ldw	ra,16(sp)
 800951c:	dcc00317 	ldw	r19,12(sp)
 8009520:	dc800217 	ldw	r18,8(sp)
 8009524:	dc400117 	ldw	r17,4(sp)
 8009528:	dc000017 	ldw	r16,0(sp)
 800952c:	dec00504 	addi	sp,sp,20
 8009530:	f800283a 	ret
 8009534:	81401917 	ldw	r5,100(r16)
 8009538:	00b7ffc4 	movi	r2,-8193
 800953c:	21080014 	ori	r4,r4,8192
 8009540:	2884703a 	and	r2,r5,r2
 8009544:	80801915 	stw	r2,100(r16)
 8009548:	80800017 	ldw	r2,0(r16)
 800954c:	8100030d 	sth	r4,12(r16)
 8009550:	81000517 	ldw	r4,20(r16)
 8009554:	10c7c83a 	sub	r3,r2,r3
 8009558:	193fe016 	blt	r3,r4,80094dc <__alt_data_end+0xff0094dc>
 800955c:	800b883a 	mov	r5,r16
 8009560:	9009883a 	mov	r4,r18
 8009564:	800468c0 	call	800468c <_fflush_r>
 8009568:	1000071e 	bne	r2,zero,8009588 <__swbuf_r+0x114>
 800956c:	80800017 	ldw	r2,0(r16)
 8009570:	00c00044 	movi	r3,1
 8009574:	003fda06 	br	80094e0 <__alt_data_end+0xff0094e0>
 8009578:	800b883a 	mov	r5,r16
 800957c:	9009883a 	mov	r4,r18
 8009580:	800468c0 	call	800468c <_fflush_r>
 8009584:	103fe326 	beq	r2,zero,8009514 <__alt_data_end+0xff009514>
 8009588:	00bfffc4 	movi	r2,-1
 800958c:	003fe206 	br	8009518 <__alt_data_end+0xff009518>
 8009590:	800b883a 	mov	r5,r16
 8009594:	9009883a 	mov	r4,r18
 8009598:	8002a940 	call	8002a94 <__swsetup_r>
 800959c:	103ffa1e 	bne	r2,zero,8009588 <__alt_data_end+0xff009588>
 80095a0:	8100030b 	ldhu	r4,12(r16)
 80095a4:	80c00417 	ldw	r3,16(r16)
 80095a8:	003fc506 	br	80094c0 <__alt_data_end+0xff0094c0>
 80095ac:	8004a680 	call	8004a68 <__sinit>
 80095b0:	003fbc06 	br	80094a4 <__alt_data_end+0xff0094a4>

080095b4 <__swbuf>:
 80095b4:	00820074 	movhi	r2,2049
 80095b8:	108e0a04 	addi	r2,r2,14376
 80095bc:	280d883a 	mov	r6,r5
 80095c0:	200b883a 	mov	r5,r4
 80095c4:	11000017 	ldw	r4,0(r2)
 80095c8:	80094741 	jmpi	8009474 <__swbuf_r>

080095cc <_write_r>:
 80095cc:	defffd04 	addi	sp,sp,-12
 80095d0:	2805883a 	mov	r2,r5
 80095d4:	dc000015 	stw	r16,0(sp)
 80095d8:	04020074 	movhi	r16,2049
 80095dc:	dc400115 	stw	r17,4(sp)
 80095e0:	300b883a 	mov	r5,r6
 80095e4:	8414ed04 	addi	r16,r16,21428
 80095e8:	2023883a 	mov	r17,r4
 80095ec:	380d883a 	mov	r6,r7
 80095f0:	1009883a 	mov	r4,r2
 80095f4:	dfc00215 	stw	ra,8(sp)
 80095f8:	80000015 	stw	zero,0(r16)
 80095fc:	800da400 	call	800da40 <write>
 8009600:	00ffffc4 	movi	r3,-1
 8009604:	10c00526 	beq	r2,r3,800961c <_write_r+0x50>
 8009608:	dfc00217 	ldw	ra,8(sp)
 800960c:	dc400117 	ldw	r17,4(sp)
 8009610:	dc000017 	ldw	r16,0(sp)
 8009614:	dec00304 	addi	sp,sp,12
 8009618:	f800283a 	ret
 800961c:	80c00017 	ldw	r3,0(r16)
 8009620:	183ff926 	beq	r3,zero,8009608 <__alt_data_end+0xff009608>
 8009624:	88c00015 	stw	r3,0(r17)
 8009628:	003ff706 	br	8009608 <__alt_data_end+0xff009608>

0800962c <_close_r>:
 800962c:	defffd04 	addi	sp,sp,-12
 8009630:	dc000015 	stw	r16,0(sp)
 8009634:	04020074 	movhi	r16,2049
 8009638:	dc400115 	stw	r17,4(sp)
 800963c:	8414ed04 	addi	r16,r16,21428
 8009640:	2023883a 	mov	r17,r4
 8009644:	2809883a 	mov	r4,r5
 8009648:	dfc00215 	stw	ra,8(sp)
 800964c:	80000015 	stw	zero,0(r16)
 8009650:	800d0b00 	call	800d0b0 <close>
 8009654:	00ffffc4 	movi	r3,-1
 8009658:	10c00526 	beq	r2,r3,8009670 <_close_r+0x44>
 800965c:	dfc00217 	ldw	ra,8(sp)
 8009660:	dc400117 	ldw	r17,4(sp)
 8009664:	dc000017 	ldw	r16,0(sp)
 8009668:	dec00304 	addi	sp,sp,12
 800966c:	f800283a 	ret
 8009670:	80c00017 	ldw	r3,0(r16)
 8009674:	183ff926 	beq	r3,zero,800965c <__alt_data_end+0xff00965c>
 8009678:	88c00015 	stw	r3,0(r17)
 800967c:	003ff706 	br	800965c <__alt_data_end+0xff00965c>

08009680 <_calloc_r>:
 8009680:	298b383a 	mul	r5,r5,r6
 8009684:	defffe04 	addi	sp,sp,-8
 8009688:	dfc00115 	stw	ra,4(sp)
 800968c:	dc000015 	stw	r16,0(sp)
 8009690:	80057c80 	call	80057c8 <_malloc_r>
 8009694:	10002926 	beq	r2,zero,800973c <_calloc_r+0xbc>
 8009698:	11bfff17 	ldw	r6,-4(r2)
 800969c:	1021883a 	mov	r16,r2
 80096a0:	00bfff04 	movi	r2,-4
 80096a4:	308c703a 	and	r6,r6,r2
 80096a8:	00c00904 	movi	r3,36
 80096ac:	308d883a 	add	r6,r6,r2
 80096b0:	19801636 	bltu	r3,r6,800970c <_calloc_r+0x8c>
 80096b4:	008004c4 	movi	r2,19
 80096b8:	11800b2e 	bgeu	r2,r6,80096e8 <_calloc_r+0x68>
 80096bc:	80000015 	stw	zero,0(r16)
 80096c0:	80000115 	stw	zero,4(r16)
 80096c4:	008006c4 	movi	r2,27
 80096c8:	11801a2e 	bgeu	r2,r6,8009734 <_calloc_r+0xb4>
 80096cc:	80000215 	stw	zero,8(r16)
 80096d0:	80000315 	stw	zero,12(r16)
 80096d4:	30c0151e 	bne	r6,r3,800972c <_calloc_r+0xac>
 80096d8:	80000415 	stw	zero,16(r16)
 80096dc:	80800604 	addi	r2,r16,24
 80096e0:	80000515 	stw	zero,20(r16)
 80096e4:	00000106 	br	80096ec <_calloc_r+0x6c>
 80096e8:	8005883a 	mov	r2,r16
 80096ec:	10000015 	stw	zero,0(r2)
 80096f0:	10000115 	stw	zero,4(r2)
 80096f4:	10000215 	stw	zero,8(r2)
 80096f8:	8005883a 	mov	r2,r16
 80096fc:	dfc00117 	ldw	ra,4(sp)
 8009700:	dc000017 	ldw	r16,0(sp)
 8009704:	dec00204 	addi	sp,sp,8
 8009708:	f800283a 	ret
 800970c:	000b883a 	mov	r5,zero
 8009710:	8009883a 	mov	r4,r16
 8009714:	800635c0 	call	800635c <memset>
 8009718:	8005883a 	mov	r2,r16
 800971c:	dfc00117 	ldw	ra,4(sp)
 8009720:	dc000017 	ldw	r16,0(sp)
 8009724:	dec00204 	addi	sp,sp,8
 8009728:	f800283a 	ret
 800972c:	80800404 	addi	r2,r16,16
 8009730:	003fee06 	br	80096ec <__alt_data_end+0xff0096ec>
 8009734:	80800204 	addi	r2,r16,8
 8009738:	003fec06 	br	80096ec <__alt_data_end+0xff0096ec>
 800973c:	0005883a 	mov	r2,zero
 8009740:	003fee06 	br	80096fc <__alt_data_end+0xff0096fc>

08009744 <_fclose_r>:
 8009744:	28003926 	beq	r5,zero,800982c <_fclose_r+0xe8>
 8009748:	defffc04 	addi	sp,sp,-16
 800974c:	dc400115 	stw	r17,4(sp)
 8009750:	dc000015 	stw	r16,0(sp)
 8009754:	dfc00315 	stw	ra,12(sp)
 8009758:	dc800215 	stw	r18,8(sp)
 800975c:	2023883a 	mov	r17,r4
 8009760:	2821883a 	mov	r16,r5
 8009764:	20000226 	beq	r4,zero,8009770 <_fclose_r+0x2c>
 8009768:	20800e17 	ldw	r2,56(r4)
 800976c:	10002726 	beq	r2,zero,800980c <_fclose_r+0xc8>
 8009770:	8080030f 	ldh	r2,12(r16)
 8009774:	1000071e 	bne	r2,zero,8009794 <_fclose_r+0x50>
 8009778:	0005883a 	mov	r2,zero
 800977c:	dfc00317 	ldw	ra,12(sp)
 8009780:	dc800217 	ldw	r18,8(sp)
 8009784:	dc400117 	ldw	r17,4(sp)
 8009788:	dc000017 	ldw	r16,0(sp)
 800978c:	dec00404 	addi	sp,sp,16
 8009790:	f800283a 	ret
 8009794:	800b883a 	mov	r5,r16
 8009798:	8809883a 	mov	r4,r17
 800979c:	80044700 	call	8004470 <__sflush_r>
 80097a0:	1025883a 	mov	r18,r2
 80097a4:	80800b17 	ldw	r2,44(r16)
 80097a8:	10000426 	beq	r2,zero,80097bc <_fclose_r+0x78>
 80097ac:	81400717 	ldw	r5,28(r16)
 80097b0:	8809883a 	mov	r4,r17
 80097b4:	103ee83a 	callr	r2
 80097b8:	10001616 	blt	r2,zero,8009814 <_fclose_r+0xd0>
 80097bc:	8080030b 	ldhu	r2,12(r16)
 80097c0:	1080200c 	andi	r2,r2,128
 80097c4:	1000151e 	bne	r2,zero,800981c <_fclose_r+0xd8>
 80097c8:	81400c17 	ldw	r5,48(r16)
 80097cc:	28000526 	beq	r5,zero,80097e4 <_fclose_r+0xa0>
 80097d0:	80801004 	addi	r2,r16,64
 80097d4:	28800226 	beq	r5,r2,80097e0 <_fclose_r+0x9c>
 80097d8:	8809883a 	mov	r4,r17
 80097dc:	8004bdc0 	call	8004bdc <_free_r>
 80097e0:	80000c15 	stw	zero,48(r16)
 80097e4:	81401117 	ldw	r5,68(r16)
 80097e8:	28000326 	beq	r5,zero,80097f8 <_fclose_r+0xb4>
 80097ec:	8809883a 	mov	r4,r17
 80097f0:	8004bdc0 	call	8004bdc <_free_r>
 80097f4:	80001115 	stw	zero,68(r16)
 80097f8:	8004a780 	call	8004a78 <__sfp_lock_acquire>
 80097fc:	8000030d 	sth	zero,12(r16)
 8009800:	8004a7c0 	call	8004a7c <__sfp_lock_release>
 8009804:	9005883a 	mov	r2,r18
 8009808:	003fdc06 	br	800977c <__alt_data_end+0xff00977c>
 800980c:	8004a680 	call	8004a68 <__sinit>
 8009810:	003fd706 	br	8009770 <__alt_data_end+0xff009770>
 8009814:	04bfffc4 	movi	r18,-1
 8009818:	003fe806 	br	80097bc <__alt_data_end+0xff0097bc>
 800981c:	81400417 	ldw	r5,16(r16)
 8009820:	8809883a 	mov	r4,r17
 8009824:	8004bdc0 	call	8004bdc <_free_r>
 8009828:	003fe706 	br	80097c8 <__alt_data_end+0xff0097c8>
 800982c:	0005883a 	mov	r2,zero
 8009830:	f800283a 	ret

08009834 <fclose>:
 8009834:	00820074 	movhi	r2,2049
 8009838:	108e0a04 	addi	r2,r2,14376
 800983c:	200b883a 	mov	r5,r4
 8009840:	11000017 	ldw	r4,0(r2)
 8009844:	80097441 	jmpi	8009744 <_fclose_r>

08009848 <__fputwc>:
 8009848:	defff804 	addi	sp,sp,-32
 800984c:	dcc00415 	stw	r19,16(sp)
 8009850:	dc800315 	stw	r18,12(sp)
 8009854:	dc000115 	stw	r16,4(sp)
 8009858:	dfc00715 	stw	ra,28(sp)
 800985c:	dd400615 	stw	r21,24(sp)
 8009860:	dd000515 	stw	r20,20(sp)
 8009864:	dc400215 	stw	r17,8(sp)
 8009868:	2027883a 	mov	r19,r4
 800986c:	2825883a 	mov	r18,r5
 8009870:	3021883a 	mov	r16,r6
 8009874:	80055b80 	call	80055b8 <__locale_mb_cur_max>
 8009878:	00c00044 	movi	r3,1
 800987c:	10c03e26 	beq	r2,r3,8009978 <__fputwc+0x130>
 8009880:	81c01704 	addi	r7,r16,92
 8009884:	900d883a 	mov	r6,r18
 8009888:	d80b883a 	mov	r5,sp
 800988c:	9809883a 	mov	r4,r19
 8009890:	8009bc00 	call	8009bc0 <_wcrtomb_r>
 8009894:	1029883a 	mov	r20,r2
 8009898:	00bfffc4 	movi	r2,-1
 800989c:	a0802026 	beq	r20,r2,8009920 <__fputwc+0xd8>
 80098a0:	d9400003 	ldbu	r5,0(sp)
 80098a4:	a0001c26 	beq	r20,zero,8009918 <__fputwc+0xd0>
 80098a8:	0023883a 	mov	r17,zero
 80098ac:	05400284 	movi	r21,10
 80098b0:	00000906 	br	80098d8 <__fputwc+0x90>
 80098b4:	80800017 	ldw	r2,0(r16)
 80098b8:	11400005 	stb	r5,0(r2)
 80098bc:	80c00017 	ldw	r3,0(r16)
 80098c0:	18c00044 	addi	r3,r3,1
 80098c4:	80c00015 	stw	r3,0(r16)
 80098c8:	8c400044 	addi	r17,r17,1
 80098cc:	dc45883a 	add	r2,sp,r17
 80098d0:	8d00112e 	bgeu	r17,r20,8009918 <__fputwc+0xd0>
 80098d4:	11400003 	ldbu	r5,0(r2)
 80098d8:	80c00217 	ldw	r3,8(r16)
 80098dc:	18ffffc4 	addi	r3,r3,-1
 80098e0:	80c00215 	stw	r3,8(r16)
 80098e4:	183ff30e 	bge	r3,zero,80098b4 <__alt_data_end+0xff0098b4>
 80098e8:	80800617 	ldw	r2,24(r16)
 80098ec:	18801916 	blt	r3,r2,8009954 <__fputwc+0x10c>
 80098f0:	80800017 	ldw	r2,0(r16)
 80098f4:	11400005 	stb	r5,0(r2)
 80098f8:	80800017 	ldw	r2,0(r16)
 80098fc:	10c00003 	ldbu	r3,0(r2)
 8009900:	10800044 	addi	r2,r2,1
 8009904:	1d402326 	beq	r3,r21,8009994 <__fputwc+0x14c>
 8009908:	80800015 	stw	r2,0(r16)
 800990c:	8c400044 	addi	r17,r17,1
 8009910:	dc45883a 	add	r2,sp,r17
 8009914:	8d3fef36 	bltu	r17,r20,80098d4 <__alt_data_end+0xff0098d4>
 8009918:	9005883a 	mov	r2,r18
 800991c:	00000406 	br	8009930 <__fputwc+0xe8>
 8009920:	80c0030b 	ldhu	r3,12(r16)
 8009924:	a005883a 	mov	r2,r20
 8009928:	18c01014 	ori	r3,r3,64
 800992c:	80c0030d 	sth	r3,12(r16)
 8009930:	dfc00717 	ldw	ra,28(sp)
 8009934:	dd400617 	ldw	r21,24(sp)
 8009938:	dd000517 	ldw	r20,20(sp)
 800993c:	dcc00417 	ldw	r19,16(sp)
 8009940:	dc800317 	ldw	r18,12(sp)
 8009944:	dc400217 	ldw	r17,8(sp)
 8009948:	dc000117 	ldw	r16,4(sp)
 800994c:	dec00804 	addi	sp,sp,32
 8009950:	f800283a 	ret
 8009954:	800d883a 	mov	r6,r16
 8009958:	29403fcc 	andi	r5,r5,255
 800995c:	9809883a 	mov	r4,r19
 8009960:	80094740 	call	8009474 <__swbuf_r>
 8009964:	10bfffe0 	cmpeqi	r2,r2,-1
 8009968:	10803fcc 	andi	r2,r2,255
 800996c:	103fd626 	beq	r2,zero,80098c8 <__alt_data_end+0xff0098c8>
 8009970:	00bfffc4 	movi	r2,-1
 8009974:	003fee06 	br	8009930 <__alt_data_end+0xff009930>
 8009978:	90ffffc4 	addi	r3,r18,-1
 800997c:	01003f84 	movi	r4,254
 8009980:	20ffbf36 	bltu	r4,r3,8009880 <__alt_data_end+0xff009880>
 8009984:	900b883a 	mov	r5,r18
 8009988:	dc800005 	stb	r18,0(sp)
 800998c:	1029883a 	mov	r20,r2
 8009990:	003fc506 	br	80098a8 <__alt_data_end+0xff0098a8>
 8009994:	800d883a 	mov	r6,r16
 8009998:	a80b883a 	mov	r5,r21
 800999c:	9809883a 	mov	r4,r19
 80099a0:	80094740 	call	8009474 <__swbuf_r>
 80099a4:	10bfffe0 	cmpeqi	r2,r2,-1
 80099a8:	003fef06 	br	8009968 <__alt_data_end+0xff009968>

080099ac <_fputwc_r>:
 80099ac:	3080030b 	ldhu	r2,12(r6)
 80099b0:	10c8000c 	andi	r3,r2,8192
 80099b4:	1800051e 	bne	r3,zero,80099cc <_fputwc_r+0x20>
 80099b8:	30c01917 	ldw	r3,100(r6)
 80099bc:	10880014 	ori	r2,r2,8192
 80099c0:	3080030d 	sth	r2,12(r6)
 80099c4:	18880014 	ori	r2,r3,8192
 80099c8:	30801915 	stw	r2,100(r6)
 80099cc:	80098481 	jmpi	8009848 <__fputwc>

080099d0 <fputwc>:
 80099d0:	00820074 	movhi	r2,2049
 80099d4:	defffc04 	addi	sp,sp,-16
 80099d8:	108e0a04 	addi	r2,r2,14376
 80099dc:	dc000115 	stw	r16,4(sp)
 80099e0:	14000017 	ldw	r16,0(r2)
 80099e4:	dc400215 	stw	r17,8(sp)
 80099e8:	dfc00315 	stw	ra,12(sp)
 80099ec:	2023883a 	mov	r17,r4
 80099f0:	80000226 	beq	r16,zero,80099fc <fputwc+0x2c>
 80099f4:	80800e17 	ldw	r2,56(r16)
 80099f8:	10001026 	beq	r2,zero,8009a3c <fputwc+0x6c>
 80099fc:	2880030b 	ldhu	r2,12(r5)
 8009a00:	10c8000c 	andi	r3,r2,8192
 8009a04:	1800051e 	bne	r3,zero,8009a1c <fputwc+0x4c>
 8009a08:	28c01917 	ldw	r3,100(r5)
 8009a0c:	10880014 	ori	r2,r2,8192
 8009a10:	2880030d 	sth	r2,12(r5)
 8009a14:	18880014 	ori	r2,r3,8192
 8009a18:	28801915 	stw	r2,100(r5)
 8009a1c:	280d883a 	mov	r6,r5
 8009a20:	8009883a 	mov	r4,r16
 8009a24:	880b883a 	mov	r5,r17
 8009a28:	dfc00317 	ldw	ra,12(sp)
 8009a2c:	dc400217 	ldw	r17,8(sp)
 8009a30:	dc000117 	ldw	r16,4(sp)
 8009a34:	dec00404 	addi	sp,sp,16
 8009a38:	80098481 	jmpi	8009848 <__fputwc>
 8009a3c:	8009883a 	mov	r4,r16
 8009a40:	d9400015 	stw	r5,0(sp)
 8009a44:	8004a680 	call	8004a68 <__sinit>
 8009a48:	d9400017 	ldw	r5,0(sp)
 8009a4c:	003feb06 	br	80099fc <__alt_data_end+0xff0099fc>

08009a50 <_fstat_r>:
 8009a50:	defffd04 	addi	sp,sp,-12
 8009a54:	2805883a 	mov	r2,r5
 8009a58:	dc000015 	stw	r16,0(sp)
 8009a5c:	04020074 	movhi	r16,2049
 8009a60:	dc400115 	stw	r17,4(sp)
 8009a64:	8414ed04 	addi	r16,r16,21428
 8009a68:	2023883a 	mov	r17,r4
 8009a6c:	300b883a 	mov	r5,r6
 8009a70:	1009883a 	mov	r4,r2
 8009a74:	dfc00215 	stw	ra,8(sp)
 8009a78:	80000015 	stw	zero,0(r16)
 8009a7c:	800d1e80 	call	800d1e8 <fstat>
 8009a80:	00ffffc4 	movi	r3,-1
 8009a84:	10c00526 	beq	r2,r3,8009a9c <_fstat_r+0x4c>
 8009a88:	dfc00217 	ldw	ra,8(sp)
 8009a8c:	dc400117 	ldw	r17,4(sp)
 8009a90:	dc000017 	ldw	r16,0(sp)
 8009a94:	dec00304 	addi	sp,sp,12
 8009a98:	f800283a 	ret
 8009a9c:	80c00017 	ldw	r3,0(r16)
 8009aa0:	183ff926 	beq	r3,zero,8009a88 <__alt_data_end+0xff009a88>
 8009aa4:	88c00015 	stw	r3,0(r17)
 8009aa8:	003ff706 	br	8009a88 <__alt_data_end+0xff009a88>

08009aac <_isatty_r>:
 8009aac:	defffd04 	addi	sp,sp,-12
 8009ab0:	dc000015 	stw	r16,0(sp)
 8009ab4:	04020074 	movhi	r16,2049
 8009ab8:	dc400115 	stw	r17,4(sp)
 8009abc:	8414ed04 	addi	r16,r16,21428
 8009ac0:	2023883a 	mov	r17,r4
 8009ac4:	2809883a 	mov	r4,r5
 8009ac8:	dfc00215 	stw	ra,8(sp)
 8009acc:	80000015 	stw	zero,0(r16)
 8009ad0:	800d4540 	call	800d454 <isatty>
 8009ad4:	00ffffc4 	movi	r3,-1
 8009ad8:	10c00526 	beq	r2,r3,8009af0 <_isatty_r+0x44>
 8009adc:	dfc00217 	ldw	ra,8(sp)
 8009ae0:	dc400117 	ldw	r17,4(sp)
 8009ae4:	dc000017 	ldw	r16,0(sp)
 8009ae8:	dec00304 	addi	sp,sp,12
 8009aec:	f800283a 	ret
 8009af0:	80c00017 	ldw	r3,0(r16)
 8009af4:	183ff926 	beq	r3,zero,8009adc <__alt_data_end+0xff009adc>
 8009af8:	88c00015 	stw	r3,0(r17)
 8009afc:	003ff706 	br	8009adc <__alt_data_end+0xff009adc>

08009b00 <_lseek_r>:
 8009b00:	defffd04 	addi	sp,sp,-12
 8009b04:	2805883a 	mov	r2,r5
 8009b08:	dc000015 	stw	r16,0(sp)
 8009b0c:	04020074 	movhi	r16,2049
 8009b10:	dc400115 	stw	r17,4(sp)
 8009b14:	300b883a 	mov	r5,r6
 8009b18:	8414ed04 	addi	r16,r16,21428
 8009b1c:	2023883a 	mov	r17,r4
 8009b20:	380d883a 	mov	r6,r7
 8009b24:	1009883a 	mov	r4,r2
 8009b28:	dfc00215 	stw	ra,8(sp)
 8009b2c:	80000015 	stw	zero,0(r16)
 8009b30:	800d6200 	call	800d620 <lseek>
 8009b34:	00ffffc4 	movi	r3,-1
 8009b38:	10c00526 	beq	r2,r3,8009b50 <_lseek_r+0x50>
 8009b3c:	dfc00217 	ldw	ra,8(sp)
 8009b40:	dc400117 	ldw	r17,4(sp)
 8009b44:	dc000017 	ldw	r16,0(sp)
 8009b48:	dec00304 	addi	sp,sp,12
 8009b4c:	f800283a 	ret
 8009b50:	80c00017 	ldw	r3,0(r16)
 8009b54:	183ff926 	beq	r3,zero,8009b3c <__alt_data_end+0xff009b3c>
 8009b58:	88c00015 	stw	r3,0(r17)
 8009b5c:	003ff706 	br	8009b3c <__alt_data_end+0xff009b3c>

08009b60 <_read_r>:
 8009b60:	defffd04 	addi	sp,sp,-12
 8009b64:	2805883a 	mov	r2,r5
 8009b68:	dc000015 	stw	r16,0(sp)
 8009b6c:	04020074 	movhi	r16,2049
 8009b70:	dc400115 	stw	r17,4(sp)
 8009b74:	300b883a 	mov	r5,r6
 8009b78:	8414ed04 	addi	r16,r16,21428
 8009b7c:	2023883a 	mov	r17,r4
 8009b80:	380d883a 	mov	r6,r7
 8009b84:	1009883a 	mov	r4,r2
 8009b88:	dfc00215 	stw	ra,8(sp)
 8009b8c:	80000015 	stw	zero,0(r16)
 8009b90:	800d7f40 	call	800d7f4 <read>
 8009b94:	00ffffc4 	movi	r3,-1
 8009b98:	10c00526 	beq	r2,r3,8009bb0 <_read_r+0x50>
 8009b9c:	dfc00217 	ldw	ra,8(sp)
 8009ba0:	dc400117 	ldw	r17,4(sp)
 8009ba4:	dc000017 	ldw	r16,0(sp)
 8009ba8:	dec00304 	addi	sp,sp,12
 8009bac:	f800283a 	ret
 8009bb0:	80c00017 	ldw	r3,0(r16)
 8009bb4:	183ff926 	beq	r3,zero,8009b9c <__alt_data_end+0xff009b9c>
 8009bb8:	88c00015 	stw	r3,0(r17)
 8009bbc:	003ff706 	br	8009b9c <__alt_data_end+0xff009b9c>

08009bc0 <_wcrtomb_r>:
 8009bc0:	defff604 	addi	sp,sp,-40
 8009bc4:	00820074 	movhi	r2,2049
 8009bc8:	dc800815 	stw	r18,32(sp)
 8009bcc:	dc400715 	stw	r17,28(sp)
 8009bd0:	dc000615 	stw	r16,24(sp)
 8009bd4:	108e0e04 	addi	r2,r2,14392
 8009bd8:	dfc00915 	stw	ra,36(sp)
 8009bdc:	2021883a 	mov	r16,r4
 8009be0:	3823883a 	mov	r17,r7
 8009be4:	14800017 	ldw	r18,0(r2)
 8009be8:	28001426 	beq	r5,zero,8009c3c <_wcrtomb_r+0x7c>
 8009bec:	d9400415 	stw	r5,16(sp)
 8009bf0:	d9800515 	stw	r6,20(sp)
 8009bf4:	80055ac0 	call	80055ac <__locale_charset>
 8009bf8:	d9800517 	ldw	r6,20(sp)
 8009bfc:	d9400417 	ldw	r5,16(sp)
 8009c00:	100f883a 	mov	r7,r2
 8009c04:	dc400015 	stw	r17,0(sp)
 8009c08:	8009883a 	mov	r4,r16
 8009c0c:	903ee83a 	callr	r18
 8009c10:	00ffffc4 	movi	r3,-1
 8009c14:	10c0031e 	bne	r2,r3,8009c24 <_wcrtomb_r+0x64>
 8009c18:	88000015 	stw	zero,0(r17)
 8009c1c:	00c02284 	movi	r3,138
 8009c20:	80c00015 	stw	r3,0(r16)
 8009c24:	dfc00917 	ldw	ra,36(sp)
 8009c28:	dc800817 	ldw	r18,32(sp)
 8009c2c:	dc400717 	ldw	r17,28(sp)
 8009c30:	dc000617 	ldw	r16,24(sp)
 8009c34:	dec00a04 	addi	sp,sp,40
 8009c38:	f800283a 	ret
 8009c3c:	80055ac0 	call	80055ac <__locale_charset>
 8009c40:	100f883a 	mov	r7,r2
 8009c44:	dc400015 	stw	r17,0(sp)
 8009c48:	000d883a 	mov	r6,zero
 8009c4c:	d9400104 	addi	r5,sp,4
 8009c50:	8009883a 	mov	r4,r16
 8009c54:	903ee83a 	callr	r18
 8009c58:	003fed06 	br	8009c10 <__alt_data_end+0xff009c10>

08009c5c <wcrtomb>:
 8009c5c:	defff604 	addi	sp,sp,-40
 8009c60:	00820074 	movhi	r2,2049
 8009c64:	dc800615 	stw	r18,24(sp)
 8009c68:	dc400515 	stw	r17,20(sp)
 8009c6c:	108e0a04 	addi	r2,r2,14376
 8009c70:	dfc00915 	stw	ra,36(sp)
 8009c74:	dd000815 	stw	r20,32(sp)
 8009c78:	dcc00715 	stw	r19,28(sp)
 8009c7c:	dc000415 	stw	r16,16(sp)
 8009c80:	3025883a 	mov	r18,r6
 8009c84:	14400017 	ldw	r17,0(r2)
 8009c88:	20001926 	beq	r4,zero,8009cf0 <wcrtomb+0x94>
 8009c8c:	00820074 	movhi	r2,2049
 8009c90:	108e0e04 	addi	r2,r2,14392
 8009c94:	15000017 	ldw	r20,0(r2)
 8009c98:	2021883a 	mov	r16,r4
 8009c9c:	2827883a 	mov	r19,r5
 8009ca0:	80055ac0 	call	80055ac <__locale_charset>
 8009ca4:	100f883a 	mov	r7,r2
 8009ca8:	dc800015 	stw	r18,0(sp)
 8009cac:	980d883a 	mov	r6,r19
 8009cb0:	800b883a 	mov	r5,r16
 8009cb4:	8809883a 	mov	r4,r17
 8009cb8:	a03ee83a 	callr	r20
 8009cbc:	00ffffc4 	movi	r3,-1
 8009cc0:	10c0031e 	bne	r2,r3,8009cd0 <wcrtomb+0x74>
 8009cc4:	90000015 	stw	zero,0(r18)
 8009cc8:	00c02284 	movi	r3,138
 8009ccc:	88c00015 	stw	r3,0(r17)
 8009cd0:	dfc00917 	ldw	ra,36(sp)
 8009cd4:	dd000817 	ldw	r20,32(sp)
 8009cd8:	dcc00717 	ldw	r19,28(sp)
 8009cdc:	dc800617 	ldw	r18,24(sp)
 8009ce0:	dc400517 	ldw	r17,20(sp)
 8009ce4:	dc000417 	ldw	r16,16(sp)
 8009ce8:	dec00a04 	addi	sp,sp,40
 8009cec:	f800283a 	ret
 8009cf0:	00820074 	movhi	r2,2049
 8009cf4:	108e0e04 	addi	r2,r2,14392
 8009cf8:	14000017 	ldw	r16,0(r2)
 8009cfc:	80055ac0 	call	80055ac <__locale_charset>
 8009d00:	100f883a 	mov	r7,r2
 8009d04:	dc800015 	stw	r18,0(sp)
 8009d08:	000d883a 	mov	r6,zero
 8009d0c:	d9400104 	addi	r5,sp,4
 8009d10:	8809883a 	mov	r4,r17
 8009d14:	803ee83a 	callr	r16
 8009d18:	003fe806 	br	8009cbc <__alt_data_end+0xff009cbc>

08009d1c <__ascii_wctomb>:
 8009d1c:	28000526 	beq	r5,zero,8009d34 <__ascii_wctomb+0x18>
 8009d20:	00803fc4 	movi	r2,255
 8009d24:	11800536 	bltu	r2,r6,8009d3c <__ascii_wctomb+0x20>
 8009d28:	29800005 	stb	r6,0(r5)
 8009d2c:	00800044 	movi	r2,1
 8009d30:	f800283a 	ret
 8009d34:	0005883a 	mov	r2,zero
 8009d38:	f800283a 	ret
 8009d3c:	00802284 	movi	r2,138
 8009d40:	20800015 	stw	r2,0(r4)
 8009d44:	00bfffc4 	movi	r2,-1
 8009d48:	f800283a 	ret

08009d4c <_wctomb_r>:
 8009d4c:	00820074 	movhi	r2,2049
 8009d50:	defff904 	addi	sp,sp,-28
 8009d54:	108e0e04 	addi	r2,r2,14392
 8009d58:	dfc00615 	stw	ra,24(sp)
 8009d5c:	dc400515 	stw	r17,20(sp)
 8009d60:	dc000415 	stw	r16,16(sp)
 8009d64:	3823883a 	mov	r17,r7
 8009d68:	14000017 	ldw	r16,0(r2)
 8009d6c:	d9000115 	stw	r4,4(sp)
 8009d70:	d9400215 	stw	r5,8(sp)
 8009d74:	d9800315 	stw	r6,12(sp)
 8009d78:	80055ac0 	call	80055ac <__locale_charset>
 8009d7c:	d9800317 	ldw	r6,12(sp)
 8009d80:	d9400217 	ldw	r5,8(sp)
 8009d84:	d9000117 	ldw	r4,4(sp)
 8009d88:	100f883a 	mov	r7,r2
 8009d8c:	dc400015 	stw	r17,0(sp)
 8009d90:	803ee83a 	callr	r16
 8009d94:	dfc00617 	ldw	ra,24(sp)
 8009d98:	dc400517 	ldw	r17,20(sp)
 8009d9c:	dc000417 	ldw	r16,16(sp)
 8009da0:	dec00704 	addi	sp,sp,28
 8009da4:	f800283a 	ret

08009da8 <__udivdi3>:
 8009da8:	defff504 	addi	sp,sp,-44
 8009dac:	dcc00415 	stw	r19,16(sp)
 8009db0:	dc000115 	stw	r16,4(sp)
 8009db4:	dfc00a15 	stw	ra,40(sp)
 8009db8:	df000915 	stw	fp,36(sp)
 8009dbc:	ddc00815 	stw	r23,32(sp)
 8009dc0:	dd800715 	stw	r22,28(sp)
 8009dc4:	dd400615 	stw	r21,24(sp)
 8009dc8:	dd000515 	stw	r20,20(sp)
 8009dcc:	dc800315 	stw	r18,12(sp)
 8009dd0:	dc400215 	stw	r17,8(sp)
 8009dd4:	2027883a 	mov	r19,r4
 8009dd8:	2821883a 	mov	r16,r5
 8009ddc:	3800411e 	bne	r7,zero,8009ee4 <__udivdi3+0x13c>
 8009de0:	3023883a 	mov	r17,r6
 8009de4:	2025883a 	mov	r18,r4
 8009de8:	2980522e 	bgeu	r5,r6,8009f34 <__udivdi3+0x18c>
 8009dec:	00bfffd4 	movui	r2,65535
 8009df0:	282d883a 	mov	r22,r5
 8009df4:	1180a836 	bltu	r2,r6,800a098 <__udivdi3+0x2f0>
 8009df8:	00803fc4 	movi	r2,255
 8009dfc:	1185803a 	cmpltu	r2,r2,r6
 8009e00:	100490fa 	slli	r2,r2,3
 8009e04:	3086d83a 	srl	r3,r6,r2
 8009e08:	01020074 	movhi	r4,2049
 8009e0c:	2106f804 	addi	r4,r4,7136
 8009e10:	20c7883a 	add	r3,r4,r3
 8009e14:	18c00003 	ldbu	r3,0(r3)
 8009e18:	1885883a 	add	r2,r3,r2
 8009e1c:	00c00804 	movi	r3,32
 8009e20:	1887c83a 	sub	r3,r3,r2
 8009e24:	18000526 	beq	r3,zero,8009e3c <__udivdi3+0x94>
 8009e28:	80e0983a 	sll	r16,r16,r3
 8009e2c:	9884d83a 	srl	r2,r19,r2
 8009e30:	30e2983a 	sll	r17,r6,r3
 8009e34:	98e4983a 	sll	r18,r19,r3
 8009e38:	142cb03a 	or	r22,r2,r16
 8009e3c:	882ad43a 	srli	r21,r17,16
 8009e40:	b009883a 	mov	r4,r22
 8009e44:	8d3fffcc 	andi	r20,r17,65535
 8009e48:	a80b883a 	mov	r5,r21
 8009e4c:	800a9b40 	call	800a9b4 <__umodsi3>
 8009e50:	b009883a 	mov	r4,r22
 8009e54:	a80b883a 	mov	r5,r21
 8009e58:	1027883a 	mov	r19,r2
 8009e5c:	800a9500 	call	800a950 <__udivsi3>
 8009e60:	102d883a 	mov	r22,r2
 8009e64:	9826943a 	slli	r19,r19,16
 8009e68:	9004d43a 	srli	r2,r18,16
 8009e6c:	a5a1383a 	mul	r16,r20,r22
 8009e70:	14c4b03a 	or	r2,r2,r19
 8009e74:	1400052e 	bgeu	r2,r16,8009e8c <__udivdi3+0xe4>
 8009e78:	1445883a 	add	r2,r2,r17
 8009e7c:	b0ffffc4 	addi	r3,r22,-1
 8009e80:	14400136 	bltu	r2,r17,8009e88 <__udivdi3+0xe0>
 8009e84:	14012336 	bltu	r2,r16,800a314 <__udivdi3+0x56c>
 8009e88:	182d883a 	mov	r22,r3
 8009e8c:	1421c83a 	sub	r16,r2,r16
 8009e90:	a80b883a 	mov	r5,r21
 8009e94:	8009883a 	mov	r4,r16
 8009e98:	800a9b40 	call	800a9b4 <__umodsi3>
 8009e9c:	1027883a 	mov	r19,r2
 8009ea0:	a80b883a 	mov	r5,r21
 8009ea4:	8009883a 	mov	r4,r16
 8009ea8:	800a9500 	call	800a950 <__udivsi3>
 8009eac:	9826943a 	slli	r19,r19,16
 8009eb0:	a0a9383a 	mul	r20,r20,r2
 8009eb4:	94bfffcc 	andi	r18,r18,65535
 8009eb8:	94e4b03a 	or	r18,r18,r19
 8009ebc:	9500052e 	bgeu	r18,r20,8009ed4 <__udivdi3+0x12c>
 8009ec0:	8ca5883a 	add	r18,r17,r18
 8009ec4:	10ffffc4 	addi	r3,r2,-1
 8009ec8:	9440f136 	bltu	r18,r17,800a290 <__udivdi3+0x4e8>
 8009ecc:	9500f02e 	bgeu	r18,r20,800a290 <__udivdi3+0x4e8>
 8009ed0:	10bfff84 	addi	r2,r2,-2
 8009ed4:	b00c943a 	slli	r6,r22,16
 8009ed8:	0007883a 	mov	r3,zero
 8009edc:	3084b03a 	or	r2,r6,r2
 8009ee0:	00005906 	br	800a048 <__udivdi3+0x2a0>
 8009ee4:	29c05636 	bltu	r5,r7,800a040 <__udivdi3+0x298>
 8009ee8:	00bfffd4 	movui	r2,65535
 8009eec:	11c0622e 	bgeu	r2,r7,800a078 <__udivdi3+0x2d0>
 8009ef0:	00804034 	movhi	r2,256
 8009ef4:	10bfffc4 	addi	r2,r2,-1
 8009ef8:	11c0ee36 	bltu	r2,r7,800a2b4 <__udivdi3+0x50c>
 8009efc:	00800404 	movi	r2,16
 8009f00:	3886d83a 	srl	r3,r7,r2
 8009f04:	01020074 	movhi	r4,2049
 8009f08:	2106f804 	addi	r4,r4,7136
 8009f0c:	20c7883a 	add	r3,r4,r3
 8009f10:	18c00003 	ldbu	r3,0(r3)
 8009f14:	05400804 	movi	r21,32
 8009f18:	1885883a 	add	r2,r3,r2
 8009f1c:	a8abc83a 	sub	r21,r21,r2
 8009f20:	a800621e 	bne	r21,zero,800a0ac <__udivdi3+0x304>
 8009f24:	3c00e936 	bltu	r7,r16,800a2cc <__udivdi3+0x524>
 8009f28:	9985403a 	cmpgeu	r2,r19,r6
 8009f2c:	0007883a 	mov	r3,zero
 8009f30:	00004506 	br	800a048 <__udivdi3+0x2a0>
 8009f34:	3000041e 	bne	r6,zero,8009f48 <__udivdi3+0x1a0>
 8009f38:	000b883a 	mov	r5,zero
 8009f3c:	01000044 	movi	r4,1
 8009f40:	800a9500 	call	800a950 <__udivsi3>
 8009f44:	1023883a 	mov	r17,r2
 8009f48:	00bfffd4 	movui	r2,65535
 8009f4c:	14404e2e 	bgeu	r2,r17,800a088 <__udivdi3+0x2e0>
 8009f50:	00804034 	movhi	r2,256
 8009f54:	10bfffc4 	addi	r2,r2,-1
 8009f58:	1440d836 	bltu	r2,r17,800a2bc <__udivdi3+0x514>
 8009f5c:	00800404 	movi	r2,16
 8009f60:	8886d83a 	srl	r3,r17,r2
 8009f64:	01020074 	movhi	r4,2049
 8009f68:	2106f804 	addi	r4,r4,7136
 8009f6c:	20c7883a 	add	r3,r4,r3
 8009f70:	18c00003 	ldbu	r3,0(r3)
 8009f74:	1885883a 	add	r2,r3,r2
 8009f78:	00c00804 	movi	r3,32
 8009f7c:	1887c83a 	sub	r3,r3,r2
 8009f80:	18008f1e 	bne	r3,zero,800a1c0 <__udivdi3+0x418>
 8009f84:	882ad43a 	srli	r21,r17,16
 8009f88:	8461c83a 	sub	r16,r16,r17
 8009f8c:	8d3fffcc 	andi	r20,r17,65535
 8009f90:	00c00044 	movi	r3,1
 8009f94:	8009883a 	mov	r4,r16
 8009f98:	a80b883a 	mov	r5,r21
 8009f9c:	d8c00015 	stw	r3,0(sp)
 8009fa0:	800a9b40 	call	800a9b4 <__umodsi3>
 8009fa4:	8009883a 	mov	r4,r16
 8009fa8:	a80b883a 	mov	r5,r21
 8009fac:	1027883a 	mov	r19,r2
 8009fb0:	800a9500 	call	800a950 <__udivsi3>
 8009fb4:	9826943a 	slli	r19,r19,16
 8009fb8:	9008d43a 	srli	r4,r18,16
 8009fbc:	1521383a 	mul	r16,r2,r20
 8009fc0:	102d883a 	mov	r22,r2
 8009fc4:	24c8b03a 	or	r4,r4,r19
 8009fc8:	d8c00017 	ldw	r3,0(sp)
 8009fcc:	2400052e 	bgeu	r4,r16,8009fe4 <__udivdi3+0x23c>
 8009fd0:	2449883a 	add	r4,r4,r17
 8009fd4:	b0bfffc4 	addi	r2,r22,-1
 8009fd8:	24400136 	bltu	r4,r17,8009fe0 <__udivdi3+0x238>
 8009fdc:	2400ca36 	bltu	r4,r16,800a308 <__udivdi3+0x560>
 8009fe0:	102d883a 	mov	r22,r2
 8009fe4:	2421c83a 	sub	r16,r4,r16
 8009fe8:	a80b883a 	mov	r5,r21
 8009fec:	8009883a 	mov	r4,r16
 8009ff0:	d8c00015 	stw	r3,0(sp)
 8009ff4:	800a9b40 	call	800a9b4 <__umodsi3>
 8009ff8:	1027883a 	mov	r19,r2
 8009ffc:	a80b883a 	mov	r5,r21
 800a000:	8009883a 	mov	r4,r16
 800a004:	800a9500 	call	800a950 <__udivsi3>
 800a008:	9826943a 	slli	r19,r19,16
 800a00c:	1529383a 	mul	r20,r2,r20
 800a010:	94bfffcc 	andi	r18,r18,65535
 800a014:	94e4b03a 	or	r18,r18,r19
 800a018:	d8c00017 	ldw	r3,0(sp)
 800a01c:	9500052e 	bgeu	r18,r20,800a034 <__udivdi3+0x28c>
 800a020:	8ca5883a 	add	r18,r17,r18
 800a024:	113fffc4 	addi	r4,r2,-1
 800a028:	94409736 	bltu	r18,r17,800a288 <__udivdi3+0x4e0>
 800a02c:	9500962e 	bgeu	r18,r20,800a288 <__udivdi3+0x4e0>
 800a030:	10bfff84 	addi	r2,r2,-2
 800a034:	b00c943a 	slli	r6,r22,16
 800a038:	3084b03a 	or	r2,r6,r2
 800a03c:	00000206 	br	800a048 <__udivdi3+0x2a0>
 800a040:	0007883a 	mov	r3,zero
 800a044:	0005883a 	mov	r2,zero
 800a048:	dfc00a17 	ldw	ra,40(sp)
 800a04c:	df000917 	ldw	fp,36(sp)
 800a050:	ddc00817 	ldw	r23,32(sp)
 800a054:	dd800717 	ldw	r22,28(sp)
 800a058:	dd400617 	ldw	r21,24(sp)
 800a05c:	dd000517 	ldw	r20,20(sp)
 800a060:	dcc00417 	ldw	r19,16(sp)
 800a064:	dc800317 	ldw	r18,12(sp)
 800a068:	dc400217 	ldw	r17,8(sp)
 800a06c:	dc000117 	ldw	r16,4(sp)
 800a070:	dec00b04 	addi	sp,sp,44
 800a074:	f800283a 	ret
 800a078:	00803fc4 	movi	r2,255
 800a07c:	11c5803a 	cmpltu	r2,r2,r7
 800a080:	100490fa 	slli	r2,r2,3
 800a084:	003f9e06 	br	8009f00 <__alt_data_end+0xff009f00>
 800a088:	00803fc4 	movi	r2,255
 800a08c:	1445803a 	cmpltu	r2,r2,r17
 800a090:	100490fa 	slli	r2,r2,3
 800a094:	003fb206 	br	8009f60 <__alt_data_end+0xff009f60>
 800a098:	00804034 	movhi	r2,256
 800a09c:	10bfffc4 	addi	r2,r2,-1
 800a0a0:	11808836 	bltu	r2,r6,800a2c4 <__udivdi3+0x51c>
 800a0a4:	00800404 	movi	r2,16
 800a0a8:	003f5606 	br	8009e04 <__alt_data_end+0xff009e04>
 800a0ac:	30aed83a 	srl	r23,r6,r2
 800a0b0:	3d4e983a 	sll	r7,r7,r21
 800a0b4:	80acd83a 	srl	r22,r16,r2
 800a0b8:	9884d83a 	srl	r2,r19,r2
 800a0bc:	3deeb03a 	or	r23,r7,r23
 800a0c0:	b824d43a 	srli	r18,r23,16
 800a0c4:	8560983a 	sll	r16,r16,r21
 800a0c8:	b009883a 	mov	r4,r22
 800a0cc:	900b883a 	mov	r5,r18
 800a0d0:	3568983a 	sll	r20,r6,r21
 800a0d4:	1420b03a 	or	r16,r2,r16
 800a0d8:	800a9b40 	call	800a9b4 <__umodsi3>
 800a0dc:	b009883a 	mov	r4,r22
 800a0e0:	900b883a 	mov	r5,r18
 800a0e4:	1023883a 	mov	r17,r2
 800a0e8:	800a9500 	call	800a950 <__udivsi3>
 800a0ec:	8808943a 	slli	r4,r17,16
 800a0f0:	bf3fffcc 	andi	fp,r23,65535
 800a0f4:	8006d43a 	srli	r3,r16,16
 800a0f8:	e0a3383a 	mul	r17,fp,r2
 800a0fc:	100d883a 	mov	r6,r2
 800a100:	1906b03a 	or	r3,r3,r4
 800a104:	1c40042e 	bgeu	r3,r17,800a118 <__udivdi3+0x370>
 800a108:	1dc7883a 	add	r3,r3,r23
 800a10c:	10bfffc4 	addi	r2,r2,-1
 800a110:	1dc0752e 	bgeu	r3,r23,800a2e8 <__udivdi3+0x540>
 800a114:	100d883a 	mov	r6,r2
 800a118:	1c63c83a 	sub	r17,r3,r17
 800a11c:	900b883a 	mov	r5,r18
 800a120:	8809883a 	mov	r4,r17
 800a124:	d9800015 	stw	r6,0(sp)
 800a128:	800a9b40 	call	800a9b4 <__umodsi3>
 800a12c:	102d883a 	mov	r22,r2
 800a130:	8809883a 	mov	r4,r17
 800a134:	900b883a 	mov	r5,r18
 800a138:	800a9500 	call	800a950 <__udivsi3>
 800a13c:	b02c943a 	slli	r22,r22,16
 800a140:	e089383a 	mul	r4,fp,r2
 800a144:	843fffcc 	andi	r16,r16,65535
 800a148:	85a0b03a 	or	r16,r16,r22
 800a14c:	d9800017 	ldw	r6,0(sp)
 800a150:	8100042e 	bgeu	r16,r4,800a164 <__udivdi3+0x3bc>
 800a154:	85e1883a 	add	r16,r16,r23
 800a158:	10ffffc4 	addi	r3,r2,-1
 800a15c:	85c05e2e 	bgeu	r16,r23,800a2d8 <__udivdi3+0x530>
 800a160:	1805883a 	mov	r2,r3
 800a164:	300c943a 	slli	r6,r6,16
 800a168:	a17fffcc 	andi	r5,r20,65535
 800a16c:	a028d43a 	srli	r20,r20,16
 800a170:	3084b03a 	or	r2,r6,r2
 800a174:	10ffffcc 	andi	r3,r2,65535
 800a178:	100cd43a 	srli	r6,r2,16
 800a17c:	194f383a 	mul	r7,r3,r5
 800a180:	1d07383a 	mul	r3,r3,r20
 800a184:	314b383a 	mul	r5,r6,r5
 800a188:	3810d43a 	srli	r8,r7,16
 800a18c:	8121c83a 	sub	r16,r16,r4
 800a190:	1947883a 	add	r3,r3,r5
 800a194:	40c7883a 	add	r3,r8,r3
 800a198:	350d383a 	mul	r6,r6,r20
 800a19c:	1940022e 	bgeu	r3,r5,800a1a8 <__udivdi3+0x400>
 800a1a0:	01000074 	movhi	r4,1
 800a1a4:	310d883a 	add	r6,r6,r4
 800a1a8:	1828d43a 	srli	r20,r3,16
 800a1ac:	a18d883a 	add	r6,r20,r6
 800a1b0:	81803e36 	bltu	r16,r6,800a2ac <__udivdi3+0x504>
 800a1b4:	81803826 	beq	r16,r6,800a298 <__udivdi3+0x4f0>
 800a1b8:	0007883a 	mov	r3,zero
 800a1bc:	003fa206 	br	800a048 <__alt_data_end+0xff00a048>
 800a1c0:	88e2983a 	sll	r17,r17,r3
 800a1c4:	80a8d83a 	srl	r20,r16,r2
 800a1c8:	80e0983a 	sll	r16,r16,r3
 800a1cc:	882ad43a 	srli	r21,r17,16
 800a1d0:	9884d83a 	srl	r2,r19,r2
 800a1d4:	a009883a 	mov	r4,r20
 800a1d8:	a80b883a 	mov	r5,r21
 800a1dc:	142eb03a 	or	r23,r2,r16
 800a1e0:	98e4983a 	sll	r18,r19,r3
 800a1e4:	800a9b40 	call	800a9b4 <__umodsi3>
 800a1e8:	a009883a 	mov	r4,r20
 800a1ec:	a80b883a 	mov	r5,r21
 800a1f0:	1021883a 	mov	r16,r2
 800a1f4:	800a9500 	call	800a950 <__udivsi3>
 800a1f8:	1039883a 	mov	fp,r2
 800a1fc:	8d3fffcc 	andi	r20,r17,65535
 800a200:	8020943a 	slli	r16,r16,16
 800a204:	b804d43a 	srli	r2,r23,16
 800a208:	a72d383a 	mul	r22,r20,fp
 800a20c:	1404b03a 	or	r2,r2,r16
 800a210:	1580062e 	bgeu	r2,r22,800a22c <__udivdi3+0x484>
 800a214:	1445883a 	add	r2,r2,r17
 800a218:	e0ffffc4 	addi	r3,fp,-1
 800a21c:	14403836 	bltu	r2,r17,800a300 <__udivdi3+0x558>
 800a220:	1580372e 	bgeu	r2,r22,800a300 <__udivdi3+0x558>
 800a224:	e73fff84 	addi	fp,fp,-2
 800a228:	1445883a 	add	r2,r2,r17
 800a22c:	15adc83a 	sub	r22,r2,r22
 800a230:	a80b883a 	mov	r5,r21
 800a234:	b009883a 	mov	r4,r22
 800a238:	800a9b40 	call	800a9b4 <__umodsi3>
 800a23c:	1027883a 	mov	r19,r2
 800a240:	b009883a 	mov	r4,r22
 800a244:	a80b883a 	mov	r5,r21
 800a248:	800a9500 	call	800a950 <__udivsi3>
 800a24c:	9826943a 	slli	r19,r19,16
 800a250:	a0a1383a 	mul	r16,r20,r2
 800a254:	b93fffcc 	andi	r4,r23,65535
 800a258:	24c8b03a 	or	r4,r4,r19
 800a25c:	2400062e 	bgeu	r4,r16,800a278 <__udivdi3+0x4d0>
 800a260:	2449883a 	add	r4,r4,r17
 800a264:	10ffffc4 	addi	r3,r2,-1
 800a268:	24402336 	bltu	r4,r17,800a2f8 <__udivdi3+0x550>
 800a26c:	2400222e 	bgeu	r4,r16,800a2f8 <__udivdi3+0x550>
 800a270:	10bfff84 	addi	r2,r2,-2
 800a274:	2449883a 	add	r4,r4,r17
 800a278:	e038943a 	slli	fp,fp,16
 800a27c:	2421c83a 	sub	r16,r4,r16
 800a280:	e086b03a 	or	r3,fp,r2
 800a284:	003f4306 	br	8009f94 <__alt_data_end+0xff009f94>
 800a288:	2005883a 	mov	r2,r4
 800a28c:	003f6906 	br	800a034 <__alt_data_end+0xff00a034>
 800a290:	1805883a 	mov	r2,r3
 800a294:	003f0f06 	br	8009ed4 <__alt_data_end+0xff009ed4>
 800a298:	1806943a 	slli	r3,r3,16
 800a29c:	9d66983a 	sll	r19,r19,r21
 800a2a0:	39ffffcc 	andi	r7,r7,65535
 800a2a4:	19c7883a 	add	r3,r3,r7
 800a2a8:	98ffc32e 	bgeu	r19,r3,800a1b8 <__alt_data_end+0xff00a1b8>
 800a2ac:	10bfffc4 	addi	r2,r2,-1
 800a2b0:	003fc106 	br	800a1b8 <__alt_data_end+0xff00a1b8>
 800a2b4:	00800604 	movi	r2,24
 800a2b8:	003f1106 	br	8009f00 <__alt_data_end+0xff009f00>
 800a2bc:	00800604 	movi	r2,24
 800a2c0:	003f2706 	br	8009f60 <__alt_data_end+0xff009f60>
 800a2c4:	00800604 	movi	r2,24
 800a2c8:	003ece06 	br	8009e04 <__alt_data_end+0xff009e04>
 800a2cc:	0007883a 	mov	r3,zero
 800a2d0:	00800044 	movi	r2,1
 800a2d4:	003f5c06 	br	800a048 <__alt_data_end+0xff00a048>
 800a2d8:	813fa12e 	bgeu	r16,r4,800a160 <__alt_data_end+0xff00a160>
 800a2dc:	10bfff84 	addi	r2,r2,-2
 800a2e0:	85e1883a 	add	r16,r16,r23
 800a2e4:	003f9f06 	br	800a164 <__alt_data_end+0xff00a164>
 800a2e8:	1c7f8a2e 	bgeu	r3,r17,800a114 <__alt_data_end+0xff00a114>
 800a2ec:	31bfff84 	addi	r6,r6,-2
 800a2f0:	1dc7883a 	add	r3,r3,r23
 800a2f4:	003f8806 	br	800a118 <__alt_data_end+0xff00a118>
 800a2f8:	1805883a 	mov	r2,r3
 800a2fc:	003fde06 	br	800a278 <__alt_data_end+0xff00a278>
 800a300:	1839883a 	mov	fp,r3
 800a304:	003fc906 	br	800a22c <__alt_data_end+0xff00a22c>
 800a308:	b5bfff84 	addi	r22,r22,-2
 800a30c:	2449883a 	add	r4,r4,r17
 800a310:	003f3406 	br	8009fe4 <__alt_data_end+0xff009fe4>
 800a314:	b5bfff84 	addi	r22,r22,-2
 800a318:	1445883a 	add	r2,r2,r17
 800a31c:	003edb06 	br	8009e8c <__alt_data_end+0xff009e8c>

0800a320 <__umoddi3>:
 800a320:	defff404 	addi	sp,sp,-48
 800a324:	df000a15 	stw	fp,40(sp)
 800a328:	dc400315 	stw	r17,12(sp)
 800a32c:	dc000215 	stw	r16,8(sp)
 800a330:	dfc00b15 	stw	ra,44(sp)
 800a334:	ddc00915 	stw	r23,36(sp)
 800a338:	dd800815 	stw	r22,32(sp)
 800a33c:	dd400715 	stw	r21,28(sp)
 800a340:	dd000615 	stw	r20,24(sp)
 800a344:	dcc00515 	stw	r19,20(sp)
 800a348:	dc800415 	stw	r18,16(sp)
 800a34c:	2021883a 	mov	r16,r4
 800a350:	2823883a 	mov	r17,r5
 800a354:	2839883a 	mov	fp,r5
 800a358:	38003c1e 	bne	r7,zero,800a44c <__umoddi3+0x12c>
 800a35c:	3027883a 	mov	r19,r6
 800a360:	2029883a 	mov	r20,r4
 800a364:	2980512e 	bgeu	r5,r6,800a4ac <__umoddi3+0x18c>
 800a368:	00bfffd4 	movui	r2,65535
 800a36c:	11809a36 	bltu	r2,r6,800a5d8 <__umoddi3+0x2b8>
 800a370:	01003fc4 	movi	r4,255
 800a374:	2189803a 	cmpltu	r4,r4,r6
 800a378:	200890fa 	slli	r4,r4,3
 800a37c:	3104d83a 	srl	r2,r6,r4
 800a380:	00c20074 	movhi	r3,2049
 800a384:	18c6f804 	addi	r3,r3,7136
 800a388:	1885883a 	add	r2,r3,r2
 800a38c:	10c00003 	ldbu	r3,0(r2)
 800a390:	00800804 	movi	r2,32
 800a394:	1909883a 	add	r4,r3,r4
 800a398:	1125c83a 	sub	r18,r2,r4
 800a39c:	90000526 	beq	r18,zero,800a3b4 <__umoddi3+0x94>
 800a3a0:	8ca2983a 	sll	r17,r17,r18
 800a3a4:	8108d83a 	srl	r4,r16,r4
 800a3a8:	34a6983a 	sll	r19,r6,r18
 800a3ac:	84a8983a 	sll	r20,r16,r18
 800a3b0:	2478b03a 	or	fp,r4,r17
 800a3b4:	982ed43a 	srli	r23,r19,16
 800a3b8:	e009883a 	mov	r4,fp
 800a3bc:	9dbfffcc 	andi	r22,r19,65535
 800a3c0:	b80b883a 	mov	r5,r23
 800a3c4:	800a9b40 	call	800a9b4 <__umodsi3>
 800a3c8:	e009883a 	mov	r4,fp
 800a3cc:	b80b883a 	mov	r5,r23
 800a3d0:	102b883a 	mov	r21,r2
 800a3d4:	800a9500 	call	800a950 <__udivsi3>
 800a3d8:	a806943a 	slli	r3,r21,16
 800a3dc:	a008d43a 	srli	r4,r20,16
 800a3e0:	b085383a 	mul	r2,r22,r2
 800a3e4:	20c8b03a 	or	r4,r4,r3
 800a3e8:	2080032e 	bgeu	r4,r2,800a3f8 <__umoddi3+0xd8>
 800a3ec:	24c9883a 	add	r4,r4,r19
 800a3f0:	24c00136 	bltu	r4,r19,800a3f8 <__umoddi3+0xd8>
 800a3f4:	20811036 	bltu	r4,r2,800a838 <__umoddi3+0x518>
 800a3f8:	20abc83a 	sub	r21,r4,r2
 800a3fc:	b80b883a 	mov	r5,r23
 800a400:	a809883a 	mov	r4,r21
 800a404:	800a9b40 	call	800a9b4 <__umodsi3>
 800a408:	1023883a 	mov	r17,r2
 800a40c:	b80b883a 	mov	r5,r23
 800a410:	a809883a 	mov	r4,r21
 800a414:	800a9500 	call	800a950 <__udivsi3>
 800a418:	8822943a 	slli	r17,r17,16
 800a41c:	b085383a 	mul	r2,r22,r2
 800a420:	a0ffffcc 	andi	r3,r20,65535
 800a424:	1c46b03a 	or	r3,r3,r17
 800a428:	1880042e 	bgeu	r3,r2,800a43c <__umoddi3+0x11c>
 800a42c:	1cc7883a 	add	r3,r3,r19
 800a430:	1cc00236 	bltu	r3,r19,800a43c <__umoddi3+0x11c>
 800a434:	1880012e 	bgeu	r3,r2,800a43c <__umoddi3+0x11c>
 800a438:	1cc7883a 	add	r3,r3,r19
 800a43c:	1885c83a 	sub	r2,r3,r2
 800a440:	1484d83a 	srl	r2,r2,r18
 800a444:	0007883a 	mov	r3,zero
 800a448:	00004f06 	br	800a588 <__umoddi3+0x268>
 800a44c:	29c04c36 	bltu	r5,r7,800a580 <__umoddi3+0x260>
 800a450:	00bfffd4 	movui	r2,65535
 800a454:	11c0582e 	bgeu	r2,r7,800a5b8 <__umoddi3+0x298>
 800a458:	00804034 	movhi	r2,256
 800a45c:	10bfffc4 	addi	r2,r2,-1
 800a460:	11c0e736 	bltu	r2,r7,800a800 <__umoddi3+0x4e0>
 800a464:	01000404 	movi	r4,16
 800a468:	3904d83a 	srl	r2,r7,r4
 800a46c:	00c20074 	movhi	r3,2049
 800a470:	18c6f804 	addi	r3,r3,7136
 800a474:	1885883a 	add	r2,r3,r2
 800a478:	14c00003 	ldbu	r19,0(r2)
 800a47c:	00c00804 	movi	r3,32
 800a480:	9927883a 	add	r19,r19,r4
 800a484:	1ce9c83a 	sub	r20,r3,r19
 800a488:	a000581e 	bne	r20,zero,800a5ec <__umoddi3+0x2cc>
 800a48c:	3c400136 	bltu	r7,r17,800a494 <__umoddi3+0x174>
 800a490:	8180eb36 	bltu	r16,r6,800a840 <__umoddi3+0x520>
 800a494:	8185c83a 	sub	r2,r16,r6
 800a498:	89e3c83a 	sub	r17,r17,r7
 800a49c:	8089803a 	cmpltu	r4,r16,r2
 800a4a0:	8939c83a 	sub	fp,r17,r4
 800a4a4:	e007883a 	mov	r3,fp
 800a4a8:	00003706 	br	800a588 <__umoddi3+0x268>
 800a4ac:	3000041e 	bne	r6,zero,800a4c0 <__umoddi3+0x1a0>
 800a4b0:	000b883a 	mov	r5,zero
 800a4b4:	01000044 	movi	r4,1
 800a4b8:	800a9500 	call	800a950 <__udivsi3>
 800a4bc:	1027883a 	mov	r19,r2
 800a4c0:	00bfffd4 	movui	r2,65535
 800a4c4:	14c0402e 	bgeu	r2,r19,800a5c8 <__umoddi3+0x2a8>
 800a4c8:	00804034 	movhi	r2,256
 800a4cc:	10bfffc4 	addi	r2,r2,-1
 800a4d0:	14c0cd36 	bltu	r2,r19,800a808 <__umoddi3+0x4e8>
 800a4d4:	00800404 	movi	r2,16
 800a4d8:	9886d83a 	srl	r3,r19,r2
 800a4dc:	01020074 	movhi	r4,2049
 800a4e0:	2106f804 	addi	r4,r4,7136
 800a4e4:	20c7883a 	add	r3,r4,r3
 800a4e8:	18c00003 	ldbu	r3,0(r3)
 800a4ec:	1887883a 	add	r3,r3,r2
 800a4f0:	00800804 	movi	r2,32
 800a4f4:	10e5c83a 	sub	r18,r2,r3
 800a4f8:	9000901e 	bne	r18,zero,800a73c <__umoddi3+0x41c>
 800a4fc:	982cd43a 	srli	r22,r19,16
 800a500:	8ce3c83a 	sub	r17,r17,r19
 800a504:	9d7fffcc 	andi	r21,r19,65535
 800a508:	b00b883a 	mov	r5,r22
 800a50c:	8809883a 	mov	r4,r17
 800a510:	800a9b40 	call	800a9b4 <__umodsi3>
 800a514:	8809883a 	mov	r4,r17
 800a518:	b00b883a 	mov	r5,r22
 800a51c:	1021883a 	mov	r16,r2
 800a520:	800a9500 	call	800a950 <__udivsi3>
 800a524:	8006943a 	slli	r3,r16,16
 800a528:	a008d43a 	srli	r4,r20,16
 800a52c:	1545383a 	mul	r2,r2,r21
 800a530:	20c8b03a 	or	r4,r4,r3
 800a534:	2080042e 	bgeu	r4,r2,800a548 <__umoddi3+0x228>
 800a538:	24c9883a 	add	r4,r4,r19
 800a53c:	24c00236 	bltu	r4,r19,800a548 <__umoddi3+0x228>
 800a540:	2080012e 	bgeu	r4,r2,800a548 <__umoddi3+0x228>
 800a544:	24c9883a 	add	r4,r4,r19
 800a548:	20a1c83a 	sub	r16,r4,r2
 800a54c:	b00b883a 	mov	r5,r22
 800a550:	8009883a 	mov	r4,r16
 800a554:	800a9b40 	call	800a9b4 <__umodsi3>
 800a558:	1023883a 	mov	r17,r2
 800a55c:	b00b883a 	mov	r5,r22
 800a560:	8009883a 	mov	r4,r16
 800a564:	800a9500 	call	800a950 <__udivsi3>
 800a568:	8822943a 	slli	r17,r17,16
 800a56c:	1545383a 	mul	r2,r2,r21
 800a570:	a53fffcc 	andi	r20,r20,65535
 800a574:	a446b03a 	or	r3,r20,r17
 800a578:	18bfb02e 	bgeu	r3,r2,800a43c <__alt_data_end+0xff00a43c>
 800a57c:	003fab06 	br	800a42c <__alt_data_end+0xff00a42c>
 800a580:	2005883a 	mov	r2,r4
 800a584:	2807883a 	mov	r3,r5
 800a588:	dfc00b17 	ldw	ra,44(sp)
 800a58c:	df000a17 	ldw	fp,40(sp)
 800a590:	ddc00917 	ldw	r23,36(sp)
 800a594:	dd800817 	ldw	r22,32(sp)
 800a598:	dd400717 	ldw	r21,28(sp)
 800a59c:	dd000617 	ldw	r20,24(sp)
 800a5a0:	dcc00517 	ldw	r19,20(sp)
 800a5a4:	dc800417 	ldw	r18,16(sp)
 800a5a8:	dc400317 	ldw	r17,12(sp)
 800a5ac:	dc000217 	ldw	r16,8(sp)
 800a5b0:	dec00c04 	addi	sp,sp,48
 800a5b4:	f800283a 	ret
 800a5b8:	04c03fc4 	movi	r19,255
 800a5bc:	99c9803a 	cmpltu	r4,r19,r7
 800a5c0:	200890fa 	slli	r4,r4,3
 800a5c4:	003fa806 	br	800a468 <__alt_data_end+0xff00a468>
 800a5c8:	00803fc4 	movi	r2,255
 800a5cc:	14c5803a 	cmpltu	r2,r2,r19
 800a5d0:	100490fa 	slli	r2,r2,3
 800a5d4:	003fc006 	br	800a4d8 <__alt_data_end+0xff00a4d8>
 800a5d8:	00804034 	movhi	r2,256
 800a5dc:	10bfffc4 	addi	r2,r2,-1
 800a5e0:	11808b36 	bltu	r2,r6,800a810 <__umoddi3+0x4f0>
 800a5e4:	01000404 	movi	r4,16
 800a5e8:	003f6406 	br	800a37c <__alt_data_end+0xff00a37c>
 800a5ec:	34c4d83a 	srl	r2,r6,r19
 800a5f0:	3d0e983a 	sll	r7,r7,r20
 800a5f4:	8cf8d83a 	srl	fp,r17,r19
 800a5f8:	8d10983a 	sll	r8,r17,r20
 800a5fc:	38aab03a 	or	r21,r7,r2
 800a600:	a82cd43a 	srli	r22,r21,16
 800a604:	84e2d83a 	srl	r17,r16,r19
 800a608:	e009883a 	mov	r4,fp
 800a60c:	b00b883a 	mov	r5,r22
 800a610:	8a22b03a 	or	r17,r17,r8
 800a614:	3524983a 	sll	r18,r6,r20
 800a618:	800a9b40 	call	800a9b4 <__umodsi3>
 800a61c:	e009883a 	mov	r4,fp
 800a620:	b00b883a 	mov	r5,r22
 800a624:	102f883a 	mov	r23,r2
 800a628:	800a9500 	call	800a950 <__udivsi3>
 800a62c:	100d883a 	mov	r6,r2
 800a630:	b808943a 	slli	r4,r23,16
 800a634:	aa3fffcc 	andi	r8,r21,65535
 800a638:	8804d43a 	srli	r2,r17,16
 800a63c:	41af383a 	mul	r23,r8,r6
 800a640:	8520983a 	sll	r16,r16,r20
 800a644:	1104b03a 	or	r2,r2,r4
 800a648:	15c0042e 	bgeu	r2,r23,800a65c <__umoddi3+0x33c>
 800a64c:	1545883a 	add	r2,r2,r21
 800a650:	30ffffc4 	addi	r3,r6,-1
 800a654:	1540742e 	bgeu	r2,r21,800a828 <__umoddi3+0x508>
 800a658:	180d883a 	mov	r6,r3
 800a65c:	15efc83a 	sub	r23,r2,r23
 800a660:	b00b883a 	mov	r5,r22
 800a664:	b809883a 	mov	r4,r23
 800a668:	d9800115 	stw	r6,4(sp)
 800a66c:	da000015 	stw	r8,0(sp)
 800a670:	800a9b40 	call	800a9b4 <__umodsi3>
 800a674:	b00b883a 	mov	r5,r22
 800a678:	b809883a 	mov	r4,r23
 800a67c:	1039883a 	mov	fp,r2
 800a680:	800a9500 	call	800a950 <__udivsi3>
 800a684:	da000017 	ldw	r8,0(sp)
 800a688:	e038943a 	slli	fp,fp,16
 800a68c:	100b883a 	mov	r5,r2
 800a690:	4089383a 	mul	r4,r8,r2
 800a694:	8a3fffcc 	andi	r8,r17,65535
 800a698:	4710b03a 	or	r8,r8,fp
 800a69c:	d9800117 	ldw	r6,4(sp)
 800a6a0:	4100042e 	bgeu	r8,r4,800a6b4 <__umoddi3+0x394>
 800a6a4:	4551883a 	add	r8,r8,r21
 800a6a8:	10bfffc4 	addi	r2,r2,-1
 800a6ac:	45405a2e 	bgeu	r8,r21,800a818 <__umoddi3+0x4f8>
 800a6b0:	100b883a 	mov	r5,r2
 800a6b4:	300c943a 	slli	r6,r6,16
 800a6b8:	91ffffcc 	andi	r7,r18,65535
 800a6bc:	9004d43a 	srli	r2,r18,16
 800a6c0:	314cb03a 	or	r6,r6,r5
 800a6c4:	317fffcc 	andi	r5,r6,65535
 800a6c8:	300cd43a 	srli	r6,r6,16
 800a6cc:	29d3383a 	mul	r9,r5,r7
 800a6d0:	288b383a 	mul	r5,r5,r2
 800a6d4:	31cf383a 	mul	r7,r6,r7
 800a6d8:	4806d43a 	srli	r3,r9,16
 800a6dc:	4111c83a 	sub	r8,r8,r4
 800a6e0:	29cb883a 	add	r5,r5,r7
 800a6e4:	194b883a 	add	r5,r3,r5
 800a6e8:	3085383a 	mul	r2,r6,r2
 800a6ec:	29c0022e 	bgeu	r5,r7,800a6f8 <__umoddi3+0x3d8>
 800a6f0:	00c00074 	movhi	r3,1
 800a6f4:	10c5883a 	add	r2,r2,r3
 800a6f8:	2808d43a 	srli	r4,r5,16
 800a6fc:	280a943a 	slli	r5,r5,16
 800a700:	4a7fffcc 	andi	r9,r9,65535
 800a704:	2085883a 	add	r2,r4,r2
 800a708:	2a4b883a 	add	r5,r5,r9
 800a70c:	40803636 	bltu	r8,r2,800a7e8 <__umoddi3+0x4c8>
 800a710:	40804d26 	beq	r8,r2,800a848 <__umoddi3+0x528>
 800a714:	4089c83a 	sub	r4,r8,r2
 800a718:	280f883a 	mov	r7,r5
 800a71c:	81cfc83a 	sub	r7,r16,r7
 800a720:	81c7803a 	cmpltu	r3,r16,r7
 800a724:	20c7c83a 	sub	r3,r4,r3
 800a728:	1cc4983a 	sll	r2,r3,r19
 800a72c:	3d0ed83a 	srl	r7,r7,r20
 800a730:	1d06d83a 	srl	r3,r3,r20
 800a734:	11c4b03a 	or	r2,r2,r7
 800a738:	003f9306 	br	800a588 <__alt_data_end+0xff00a588>
 800a73c:	9ca6983a 	sll	r19,r19,r18
 800a740:	88e8d83a 	srl	r20,r17,r3
 800a744:	80c4d83a 	srl	r2,r16,r3
 800a748:	982cd43a 	srli	r22,r19,16
 800a74c:	8ca2983a 	sll	r17,r17,r18
 800a750:	a009883a 	mov	r4,r20
 800a754:	b00b883a 	mov	r5,r22
 800a758:	1478b03a 	or	fp,r2,r17
 800a75c:	800a9b40 	call	800a9b4 <__umodsi3>
 800a760:	a009883a 	mov	r4,r20
 800a764:	b00b883a 	mov	r5,r22
 800a768:	1023883a 	mov	r17,r2
 800a76c:	800a9500 	call	800a950 <__udivsi3>
 800a770:	9d7fffcc 	andi	r21,r19,65535
 800a774:	880a943a 	slli	r5,r17,16
 800a778:	e008d43a 	srli	r4,fp,16
 800a77c:	a885383a 	mul	r2,r21,r2
 800a780:	84a8983a 	sll	r20,r16,r18
 800a784:	2148b03a 	or	r4,r4,r5
 800a788:	2080042e 	bgeu	r4,r2,800a79c <__umoddi3+0x47c>
 800a78c:	24c9883a 	add	r4,r4,r19
 800a790:	24c00236 	bltu	r4,r19,800a79c <__umoddi3+0x47c>
 800a794:	2080012e 	bgeu	r4,r2,800a79c <__umoddi3+0x47c>
 800a798:	24c9883a 	add	r4,r4,r19
 800a79c:	20a3c83a 	sub	r17,r4,r2
 800a7a0:	b00b883a 	mov	r5,r22
 800a7a4:	8809883a 	mov	r4,r17
 800a7a8:	800a9b40 	call	800a9b4 <__umodsi3>
 800a7ac:	102f883a 	mov	r23,r2
 800a7b0:	8809883a 	mov	r4,r17
 800a7b4:	b00b883a 	mov	r5,r22
 800a7b8:	800a9500 	call	800a950 <__udivsi3>
 800a7bc:	b82e943a 	slli	r23,r23,16
 800a7c0:	a885383a 	mul	r2,r21,r2
 800a7c4:	e13fffcc 	andi	r4,fp,65535
 800a7c8:	25c8b03a 	or	r4,r4,r23
 800a7cc:	2080042e 	bgeu	r4,r2,800a7e0 <__umoddi3+0x4c0>
 800a7d0:	24c9883a 	add	r4,r4,r19
 800a7d4:	24c00236 	bltu	r4,r19,800a7e0 <__umoddi3+0x4c0>
 800a7d8:	2080012e 	bgeu	r4,r2,800a7e0 <__umoddi3+0x4c0>
 800a7dc:	24c9883a 	add	r4,r4,r19
 800a7e0:	20a3c83a 	sub	r17,r4,r2
 800a7e4:	003f4806 	br	800a508 <__alt_data_end+0xff00a508>
 800a7e8:	2c8fc83a 	sub	r7,r5,r18
 800a7ec:	1545c83a 	sub	r2,r2,r21
 800a7f0:	29cb803a 	cmpltu	r5,r5,r7
 800a7f4:	1145c83a 	sub	r2,r2,r5
 800a7f8:	4089c83a 	sub	r4,r8,r2
 800a7fc:	003fc706 	br	800a71c <__alt_data_end+0xff00a71c>
 800a800:	01000604 	movi	r4,24
 800a804:	003f1806 	br	800a468 <__alt_data_end+0xff00a468>
 800a808:	00800604 	movi	r2,24
 800a80c:	003f3206 	br	800a4d8 <__alt_data_end+0xff00a4d8>
 800a810:	01000604 	movi	r4,24
 800a814:	003ed906 	br	800a37c <__alt_data_end+0xff00a37c>
 800a818:	413fa52e 	bgeu	r8,r4,800a6b0 <__alt_data_end+0xff00a6b0>
 800a81c:	297fff84 	addi	r5,r5,-2
 800a820:	4551883a 	add	r8,r8,r21
 800a824:	003fa306 	br	800a6b4 <__alt_data_end+0xff00a6b4>
 800a828:	15ff8b2e 	bgeu	r2,r23,800a658 <__alt_data_end+0xff00a658>
 800a82c:	31bfff84 	addi	r6,r6,-2
 800a830:	1545883a 	add	r2,r2,r21
 800a834:	003f8906 	br	800a65c <__alt_data_end+0xff00a65c>
 800a838:	24c9883a 	add	r4,r4,r19
 800a83c:	003eee06 	br	800a3f8 <__alt_data_end+0xff00a3f8>
 800a840:	8005883a 	mov	r2,r16
 800a844:	003f1706 	br	800a4a4 <__alt_data_end+0xff00a4a4>
 800a848:	817fe736 	bltu	r16,r5,800a7e8 <__alt_data_end+0xff00a7e8>
 800a84c:	280f883a 	mov	r7,r5
 800a850:	0009883a 	mov	r4,zero
 800a854:	003fb106 	br	800a71c <__alt_data_end+0xff00a71c>

0800a858 <__divsi3>:
 800a858:	20001b16 	blt	r4,zero,800a8c8 <__divsi3+0x70>
 800a85c:	000f883a 	mov	r7,zero
 800a860:	28001616 	blt	r5,zero,800a8bc <__divsi3+0x64>
 800a864:	200d883a 	mov	r6,r4
 800a868:	29001a2e 	bgeu	r5,r4,800a8d4 <__divsi3+0x7c>
 800a86c:	00800804 	movi	r2,32
 800a870:	00c00044 	movi	r3,1
 800a874:	00000106 	br	800a87c <__divsi3+0x24>
 800a878:	10000d26 	beq	r2,zero,800a8b0 <__divsi3+0x58>
 800a87c:	294b883a 	add	r5,r5,r5
 800a880:	10bfffc4 	addi	r2,r2,-1
 800a884:	18c7883a 	add	r3,r3,r3
 800a888:	293ffb36 	bltu	r5,r4,800a878 <__alt_data_end+0xff00a878>
 800a88c:	0005883a 	mov	r2,zero
 800a890:	18000726 	beq	r3,zero,800a8b0 <__divsi3+0x58>
 800a894:	0005883a 	mov	r2,zero
 800a898:	31400236 	bltu	r6,r5,800a8a4 <__divsi3+0x4c>
 800a89c:	314dc83a 	sub	r6,r6,r5
 800a8a0:	10c4b03a 	or	r2,r2,r3
 800a8a4:	1806d07a 	srli	r3,r3,1
 800a8a8:	280ad07a 	srli	r5,r5,1
 800a8ac:	183ffa1e 	bne	r3,zero,800a898 <__alt_data_end+0xff00a898>
 800a8b0:	38000126 	beq	r7,zero,800a8b8 <__divsi3+0x60>
 800a8b4:	0085c83a 	sub	r2,zero,r2
 800a8b8:	f800283a 	ret
 800a8bc:	014bc83a 	sub	r5,zero,r5
 800a8c0:	39c0005c 	xori	r7,r7,1
 800a8c4:	003fe706 	br	800a864 <__alt_data_end+0xff00a864>
 800a8c8:	0109c83a 	sub	r4,zero,r4
 800a8cc:	01c00044 	movi	r7,1
 800a8d0:	003fe306 	br	800a860 <__alt_data_end+0xff00a860>
 800a8d4:	00c00044 	movi	r3,1
 800a8d8:	003fee06 	br	800a894 <__alt_data_end+0xff00a894>

0800a8dc <__modsi3>:
 800a8dc:	20001716 	blt	r4,zero,800a93c <__modsi3+0x60>
 800a8e0:	000f883a 	mov	r7,zero
 800a8e4:	2005883a 	mov	r2,r4
 800a8e8:	28001216 	blt	r5,zero,800a934 <__modsi3+0x58>
 800a8ec:	2900162e 	bgeu	r5,r4,800a948 <__modsi3+0x6c>
 800a8f0:	01800804 	movi	r6,32
 800a8f4:	00c00044 	movi	r3,1
 800a8f8:	00000106 	br	800a900 <__modsi3+0x24>
 800a8fc:	30000a26 	beq	r6,zero,800a928 <__modsi3+0x4c>
 800a900:	294b883a 	add	r5,r5,r5
 800a904:	31bfffc4 	addi	r6,r6,-1
 800a908:	18c7883a 	add	r3,r3,r3
 800a90c:	293ffb36 	bltu	r5,r4,800a8fc <__alt_data_end+0xff00a8fc>
 800a910:	18000526 	beq	r3,zero,800a928 <__modsi3+0x4c>
 800a914:	1806d07a 	srli	r3,r3,1
 800a918:	11400136 	bltu	r2,r5,800a920 <__modsi3+0x44>
 800a91c:	1145c83a 	sub	r2,r2,r5
 800a920:	280ad07a 	srli	r5,r5,1
 800a924:	183ffb1e 	bne	r3,zero,800a914 <__alt_data_end+0xff00a914>
 800a928:	38000126 	beq	r7,zero,800a930 <__modsi3+0x54>
 800a92c:	0085c83a 	sub	r2,zero,r2
 800a930:	f800283a 	ret
 800a934:	014bc83a 	sub	r5,zero,r5
 800a938:	003fec06 	br	800a8ec <__alt_data_end+0xff00a8ec>
 800a93c:	0109c83a 	sub	r4,zero,r4
 800a940:	01c00044 	movi	r7,1
 800a944:	003fe706 	br	800a8e4 <__alt_data_end+0xff00a8e4>
 800a948:	00c00044 	movi	r3,1
 800a94c:	003ff106 	br	800a914 <__alt_data_end+0xff00a914>

0800a950 <__udivsi3>:
 800a950:	200d883a 	mov	r6,r4
 800a954:	2900152e 	bgeu	r5,r4,800a9ac <__udivsi3+0x5c>
 800a958:	28001416 	blt	r5,zero,800a9ac <__udivsi3+0x5c>
 800a95c:	00800804 	movi	r2,32
 800a960:	00c00044 	movi	r3,1
 800a964:	00000206 	br	800a970 <__udivsi3+0x20>
 800a968:	10000e26 	beq	r2,zero,800a9a4 <__udivsi3+0x54>
 800a96c:	28000516 	blt	r5,zero,800a984 <__udivsi3+0x34>
 800a970:	294b883a 	add	r5,r5,r5
 800a974:	10bfffc4 	addi	r2,r2,-1
 800a978:	18c7883a 	add	r3,r3,r3
 800a97c:	293ffa36 	bltu	r5,r4,800a968 <__alt_data_end+0xff00a968>
 800a980:	18000826 	beq	r3,zero,800a9a4 <__udivsi3+0x54>
 800a984:	0005883a 	mov	r2,zero
 800a988:	31400236 	bltu	r6,r5,800a994 <__udivsi3+0x44>
 800a98c:	314dc83a 	sub	r6,r6,r5
 800a990:	10c4b03a 	or	r2,r2,r3
 800a994:	1806d07a 	srli	r3,r3,1
 800a998:	280ad07a 	srli	r5,r5,1
 800a99c:	183ffa1e 	bne	r3,zero,800a988 <__alt_data_end+0xff00a988>
 800a9a0:	f800283a 	ret
 800a9a4:	0005883a 	mov	r2,zero
 800a9a8:	f800283a 	ret
 800a9ac:	00c00044 	movi	r3,1
 800a9b0:	003ff406 	br	800a984 <__alt_data_end+0xff00a984>

0800a9b4 <__umodsi3>:
 800a9b4:	2005883a 	mov	r2,r4
 800a9b8:	2900122e 	bgeu	r5,r4,800aa04 <__umodsi3+0x50>
 800a9bc:	28001116 	blt	r5,zero,800aa04 <__umodsi3+0x50>
 800a9c0:	01800804 	movi	r6,32
 800a9c4:	00c00044 	movi	r3,1
 800a9c8:	00000206 	br	800a9d4 <__umodsi3+0x20>
 800a9cc:	30000c26 	beq	r6,zero,800aa00 <__umodsi3+0x4c>
 800a9d0:	28000516 	blt	r5,zero,800a9e8 <__umodsi3+0x34>
 800a9d4:	294b883a 	add	r5,r5,r5
 800a9d8:	31bfffc4 	addi	r6,r6,-1
 800a9dc:	18c7883a 	add	r3,r3,r3
 800a9e0:	293ffa36 	bltu	r5,r4,800a9cc <__alt_data_end+0xff00a9cc>
 800a9e4:	18000626 	beq	r3,zero,800aa00 <__umodsi3+0x4c>
 800a9e8:	1806d07a 	srli	r3,r3,1
 800a9ec:	11400136 	bltu	r2,r5,800a9f4 <__umodsi3+0x40>
 800a9f0:	1145c83a 	sub	r2,r2,r5
 800a9f4:	280ad07a 	srli	r5,r5,1
 800a9f8:	183ffb1e 	bne	r3,zero,800a9e8 <__alt_data_end+0xff00a9e8>
 800a9fc:	f800283a 	ret
 800aa00:	f800283a 	ret
 800aa04:	00c00044 	movi	r3,1
 800aa08:	003ff706 	br	800a9e8 <__alt_data_end+0xff00a9e8>

0800aa0c <__adddf3>:
 800aa0c:	02c00434 	movhi	r11,16
 800aa10:	5affffc4 	addi	r11,r11,-1
 800aa14:	2806d7fa 	srli	r3,r5,31
 800aa18:	2ad4703a 	and	r10,r5,r11
 800aa1c:	3ad2703a 	and	r9,r7,r11
 800aa20:	3804d53a 	srli	r2,r7,20
 800aa24:	3018d77a 	srli	r12,r6,29
 800aa28:	280ad53a 	srli	r5,r5,20
 800aa2c:	501490fa 	slli	r10,r10,3
 800aa30:	2010d77a 	srli	r8,r4,29
 800aa34:	481290fa 	slli	r9,r9,3
 800aa38:	380ed7fa 	srli	r7,r7,31
 800aa3c:	defffb04 	addi	sp,sp,-20
 800aa40:	dc800215 	stw	r18,8(sp)
 800aa44:	dc400115 	stw	r17,4(sp)
 800aa48:	dc000015 	stw	r16,0(sp)
 800aa4c:	dfc00415 	stw	ra,16(sp)
 800aa50:	dcc00315 	stw	r19,12(sp)
 800aa54:	1c803fcc 	andi	r18,r3,255
 800aa58:	2c01ffcc 	andi	r16,r5,2047
 800aa5c:	5210b03a 	or	r8,r10,r8
 800aa60:	202290fa 	slli	r17,r4,3
 800aa64:	1081ffcc 	andi	r2,r2,2047
 800aa68:	4b12b03a 	or	r9,r9,r12
 800aa6c:	300c90fa 	slli	r6,r6,3
 800aa70:	91c07526 	beq	r18,r7,800ac48 <__adddf3+0x23c>
 800aa74:	8087c83a 	sub	r3,r16,r2
 800aa78:	00c0ab0e 	bge	zero,r3,800ad28 <__adddf3+0x31c>
 800aa7c:	10002a1e 	bne	r2,zero,800ab28 <__adddf3+0x11c>
 800aa80:	4984b03a 	or	r2,r9,r6
 800aa84:	1000961e 	bne	r2,zero,800ace0 <__adddf3+0x2d4>
 800aa88:	888001cc 	andi	r2,r17,7
 800aa8c:	10000726 	beq	r2,zero,800aaac <__adddf3+0xa0>
 800aa90:	888003cc 	andi	r2,r17,15
 800aa94:	00c00104 	movi	r3,4
 800aa98:	10c00426 	beq	r2,r3,800aaac <__adddf3+0xa0>
 800aa9c:	88c7883a 	add	r3,r17,r3
 800aaa0:	1c63803a 	cmpltu	r17,r3,r17
 800aaa4:	4451883a 	add	r8,r8,r17
 800aaa8:	1823883a 	mov	r17,r3
 800aaac:	4080202c 	andhi	r2,r8,128
 800aab0:	10005926 	beq	r2,zero,800ac18 <__adddf3+0x20c>
 800aab4:	84000044 	addi	r16,r16,1
 800aab8:	0081ffc4 	movi	r2,2047
 800aabc:	8080ba26 	beq	r16,r2,800ada8 <__adddf3+0x39c>
 800aac0:	00bfe034 	movhi	r2,65408
 800aac4:	10bfffc4 	addi	r2,r2,-1
 800aac8:	4090703a 	and	r8,r8,r2
 800aacc:	4004977a 	slli	r2,r8,29
 800aad0:	4010927a 	slli	r8,r8,9
 800aad4:	8822d0fa 	srli	r17,r17,3
 800aad8:	8401ffcc 	andi	r16,r16,2047
 800aadc:	4010d33a 	srli	r8,r8,12
 800aae0:	9007883a 	mov	r3,r18
 800aae4:	1444b03a 	or	r2,r2,r17
 800aae8:	8401ffcc 	andi	r16,r16,2047
 800aaec:	8020953a 	slli	r16,r16,20
 800aaf0:	18c03fcc 	andi	r3,r3,255
 800aaf4:	01000434 	movhi	r4,16
 800aaf8:	213fffc4 	addi	r4,r4,-1
 800aafc:	180697fa 	slli	r3,r3,31
 800ab00:	4110703a 	and	r8,r8,r4
 800ab04:	4410b03a 	or	r8,r8,r16
 800ab08:	40c6b03a 	or	r3,r8,r3
 800ab0c:	dfc00417 	ldw	ra,16(sp)
 800ab10:	dcc00317 	ldw	r19,12(sp)
 800ab14:	dc800217 	ldw	r18,8(sp)
 800ab18:	dc400117 	ldw	r17,4(sp)
 800ab1c:	dc000017 	ldw	r16,0(sp)
 800ab20:	dec00504 	addi	sp,sp,20
 800ab24:	f800283a 	ret
 800ab28:	0081ffc4 	movi	r2,2047
 800ab2c:	80bfd626 	beq	r16,r2,800aa88 <__alt_data_end+0xff00aa88>
 800ab30:	4a402034 	orhi	r9,r9,128
 800ab34:	00800e04 	movi	r2,56
 800ab38:	10c09f16 	blt	r2,r3,800adb8 <__adddf3+0x3ac>
 800ab3c:	008007c4 	movi	r2,31
 800ab40:	10c0c216 	blt	r2,r3,800ae4c <__adddf3+0x440>
 800ab44:	00800804 	movi	r2,32
 800ab48:	10c5c83a 	sub	r2,r2,r3
 800ab4c:	488a983a 	sll	r5,r9,r2
 800ab50:	30c8d83a 	srl	r4,r6,r3
 800ab54:	3084983a 	sll	r2,r6,r2
 800ab58:	48c6d83a 	srl	r3,r9,r3
 800ab5c:	290cb03a 	or	r6,r5,r4
 800ab60:	1004c03a 	cmpne	r2,r2,zero
 800ab64:	308cb03a 	or	r6,r6,r2
 800ab68:	898dc83a 	sub	r6,r17,r6
 800ab6c:	89a3803a 	cmpltu	r17,r17,r6
 800ab70:	40d1c83a 	sub	r8,r8,r3
 800ab74:	4451c83a 	sub	r8,r8,r17
 800ab78:	3023883a 	mov	r17,r6
 800ab7c:	4080202c 	andhi	r2,r8,128
 800ab80:	10002326 	beq	r2,zero,800ac10 <__adddf3+0x204>
 800ab84:	04c02034 	movhi	r19,128
 800ab88:	9cffffc4 	addi	r19,r19,-1
 800ab8c:	44e6703a 	and	r19,r8,r19
 800ab90:	98007626 	beq	r19,zero,800ad6c <__adddf3+0x360>
 800ab94:	9809883a 	mov	r4,r19
 800ab98:	800d0100 	call	800d010 <__clzsi2>
 800ab9c:	10fffe04 	addi	r3,r2,-8
 800aba0:	010007c4 	movi	r4,31
 800aba4:	20c07716 	blt	r4,r3,800ad84 <__adddf3+0x378>
 800aba8:	00800804 	movi	r2,32
 800abac:	10c5c83a 	sub	r2,r2,r3
 800abb0:	8884d83a 	srl	r2,r17,r2
 800abb4:	98d0983a 	sll	r8,r19,r3
 800abb8:	88e2983a 	sll	r17,r17,r3
 800abbc:	1204b03a 	or	r2,r2,r8
 800abc0:	1c007416 	blt	r3,r16,800ad94 <__adddf3+0x388>
 800abc4:	1c21c83a 	sub	r16,r3,r16
 800abc8:	82000044 	addi	r8,r16,1
 800abcc:	00c007c4 	movi	r3,31
 800abd0:	1a009116 	blt	r3,r8,800ae18 <__adddf3+0x40c>
 800abd4:	00c00804 	movi	r3,32
 800abd8:	1a07c83a 	sub	r3,r3,r8
 800abdc:	8a08d83a 	srl	r4,r17,r8
 800abe0:	88e2983a 	sll	r17,r17,r3
 800abe4:	10c6983a 	sll	r3,r2,r3
 800abe8:	1210d83a 	srl	r8,r2,r8
 800abec:	8804c03a 	cmpne	r2,r17,zero
 800abf0:	1906b03a 	or	r3,r3,r4
 800abf4:	18a2b03a 	or	r17,r3,r2
 800abf8:	0021883a 	mov	r16,zero
 800abfc:	003fa206 	br	800aa88 <__alt_data_end+0xff00aa88>
 800ac00:	1890b03a 	or	r8,r3,r2
 800ac04:	40017d26 	beq	r8,zero,800b1fc <__adddf3+0x7f0>
 800ac08:	1011883a 	mov	r8,r2
 800ac0c:	1823883a 	mov	r17,r3
 800ac10:	888001cc 	andi	r2,r17,7
 800ac14:	103f9e1e 	bne	r2,zero,800aa90 <__alt_data_end+0xff00aa90>
 800ac18:	4004977a 	slli	r2,r8,29
 800ac1c:	8822d0fa 	srli	r17,r17,3
 800ac20:	4010d0fa 	srli	r8,r8,3
 800ac24:	9007883a 	mov	r3,r18
 800ac28:	1444b03a 	or	r2,r2,r17
 800ac2c:	0101ffc4 	movi	r4,2047
 800ac30:	81002426 	beq	r16,r4,800acc4 <__adddf3+0x2b8>
 800ac34:	8120703a 	and	r16,r16,r4
 800ac38:	01000434 	movhi	r4,16
 800ac3c:	213fffc4 	addi	r4,r4,-1
 800ac40:	4110703a 	and	r8,r8,r4
 800ac44:	003fa806 	br	800aae8 <__alt_data_end+0xff00aae8>
 800ac48:	8089c83a 	sub	r4,r16,r2
 800ac4c:	01005e0e 	bge	zero,r4,800adc8 <__adddf3+0x3bc>
 800ac50:	10002b26 	beq	r2,zero,800ad00 <__adddf3+0x2f4>
 800ac54:	0081ffc4 	movi	r2,2047
 800ac58:	80bf8b26 	beq	r16,r2,800aa88 <__alt_data_end+0xff00aa88>
 800ac5c:	4a402034 	orhi	r9,r9,128
 800ac60:	00800e04 	movi	r2,56
 800ac64:	1100a40e 	bge	r2,r4,800aef8 <__adddf3+0x4ec>
 800ac68:	498cb03a 	or	r6,r9,r6
 800ac6c:	300ac03a 	cmpne	r5,r6,zero
 800ac70:	0013883a 	mov	r9,zero
 800ac74:	2c4b883a 	add	r5,r5,r17
 800ac78:	2c63803a 	cmpltu	r17,r5,r17
 800ac7c:	4a11883a 	add	r8,r9,r8
 800ac80:	8a11883a 	add	r8,r17,r8
 800ac84:	2823883a 	mov	r17,r5
 800ac88:	4080202c 	andhi	r2,r8,128
 800ac8c:	103fe026 	beq	r2,zero,800ac10 <__alt_data_end+0xff00ac10>
 800ac90:	84000044 	addi	r16,r16,1
 800ac94:	0081ffc4 	movi	r2,2047
 800ac98:	8080d226 	beq	r16,r2,800afe4 <__adddf3+0x5d8>
 800ac9c:	00bfe034 	movhi	r2,65408
 800aca0:	10bfffc4 	addi	r2,r2,-1
 800aca4:	4090703a 	and	r8,r8,r2
 800aca8:	880ad07a 	srli	r5,r17,1
 800acac:	400897fa 	slli	r4,r8,31
 800acb0:	88c0004c 	andi	r3,r17,1
 800acb4:	28e2b03a 	or	r17,r5,r3
 800acb8:	4010d07a 	srli	r8,r8,1
 800acbc:	2462b03a 	or	r17,r4,r17
 800acc0:	003f7106 	br	800aa88 <__alt_data_end+0xff00aa88>
 800acc4:	4088b03a 	or	r4,r8,r2
 800acc8:	20014526 	beq	r4,zero,800b1e0 <__adddf3+0x7d4>
 800accc:	01000434 	movhi	r4,16
 800acd0:	42000234 	orhi	r8,r8,8
 800acd4:	213fffc4 	addi	r4,r4,-1
 800acd8:	4110703a 	and	r8,r8,r4
 800acdc:	003f8206 	br	800aae8 <__alt_data_end+0xff00aae8>
 800ace0:	18ffffc4 	addi	r3,r3,-1
 800ace4:	1800491e 	bne	r3,zero,800ae0c <__adddf3+0x400>
 800ace8:	898bc83a 	sub	r5,r17,r6
 800acec:	8963803a 	cmpltu	r17,r17,r5
 800acf0:	4251c83a 	sub	r8,r8,r9
 800acf4:	4451c83a 	sub	r8,r8,r17
 800acf8:	2823883a 	mov	r17,r5
 800acfc:	003f9f06 	br	800ab7c <__alt_data_end+0xff00ab7c>
 800ad00:	4984b03a 	or	r2,r9,r6
 800ad04:	103f6026 	beq	r2,zero,800aa88 <__alt_data_end+0xff00aa88>
 800ad08:	213fffc4 	addi	r4,r4,-1
 800ad0c:	2000931e 	bne	r4,zero,800af5c <__adddf3+0x550>
 800ad10:	898d883a 	add	r6,r17,r6
 800ad14:	3463803a 	cmpltu	r17,r6,r17
 800ad18:	4251883a 	add	r8,r8,r9
 800ad1c:	8a11883a 	add	r8,r17,r8
 800ad20:	3023883a 	mov	r17,r6
 800ad24:	003fd806 	br	800ac88 <__alt_data_end+0xff00ac88>
 800ad28:	1800541e 	bne	r3,zero,800ae7c <__adddf3+0x470>
 800ad2c:	80800044 	addi	r2,r16,1
 800ad30:	1081ffcc 	andi	r2,r2,2047
 800ad34:	00c00044 	movi	r3,1
 800ad38:	1880a00e 	bge	r3,r2,800afbc <__adddf3+0x5b0>
 800ad3c:	8989c83a 	sub	r4,r17,r6
 800ad40:	8905803a 	cmpltu	r2,r17,r4
 800ad44:	4267c83a 	sub	r19,r8,r9
 800ad48:	98a7c83a 	sub	r19,r19,r2
 800ad4c:	9880202c 	andhi	r2,r19,128
 800ad50:	10006326 	beq	r2,zero,800aee0 <__adddf3+0x4d4>
 800ad54:	3463c83a 	sub	r17,r6,r17
 800ad58:	4a07c83a 	sub	r3,r9,r8
 800ad5c:	344d803a 	cmpltu	r6,r6,r17
 800ad60:	19a7c83a 	sub	r19,r3,r6
 800ad64:	3825883a 	mov	r18,r7
 800ad68:	983f8a1e 	bne	r19,zero,800ab94 <__alt_data_end+0xff00ab94>
 800ad6c:	8809883a 	mov	r4,r17
 800ad70:	800d0100 	call	800d010 <__clzsi2>
 800ad74:	10800804 	addi	r2,r2,32
 800ad78:	10fffe04 	addi	r3,r2,-8
 800ad7c:	010007c4 	movi	r4,31
 800ad80:	20ff890e 	bge	r4,r3,800aba8 <__alt_data_end+0xff00aba8>
 800ad84:	10bff604 	addi	r2,r2,-40
 800ad88:	8884983a 	sll	r2,r17,r2
 800ad8c:	0023883a 	mov	r17,zero
 800ad90:	1c3f8c0e 	bge	r3,r16,800abc4 <__alt_data_end+0xff00abc4>
 800ad94:	023fe034 	movhi	r8,65408
 800ad98:	423fffc4 	addi	r8,r8,-1
 800ad9c:	80e1c83a 	sub	r16,r16,r3
 800ada0:	1210703a 	and	r8,r2,r8
 800ada4:	003f3806 	br	800aa88 <__alt_data_end+0xff00aa88>
 800ada8:	9007883a 	mov	r3,r18
 800adac:	0011883a 	mov	r8,zero
 800adb0:	0005883a 	mov	r2,zero
 800adb4:	003f4c06 	br	800aae8 <__alt_data_end+0xff00aae8>
 800adb8:	498cb03a 	or	r6,r9,r6
 800adbc:	300cc03a 	cmpne	r6,r6,zero
 800adc0:	0007883a 	mov	r3,zero
 800adc4:	003f6806 	br	800ab68 <__alt_data_end+0xff00ab68>
 800adc8:	20009c1e 	bne	r4,zero,800b03c <__adddf3+0x630>
 800adcc:	80800044 	addi	r2,r16,1
 800add0:	1141ffcc 	andi	r5,r2,2047
 800add4:	01000044 	movi	r4,1
 800add8:	2140670e 	bge	r4,r5,800af78 <__adddf3+0x56c>
 800addc:	0101ffc4 	movi	r4,2047
 800ade0:	11007f26 	beq	r2,r4,800afe0 <__adddf3+0x5d4>
 800ade4:	898d883a 	add	r6,r17,r6
 800ade8:	4247883a 	add	r3,r8,r9
 800adec:	3451803a 	cmpltu	r8,r6,r17
 800adf0:	40d1883a 	add	r8,r8,r3
 800adf4:	402297fa 	slli	r17,r8,31
 800adf8:	300cd07a 	srli	r6,r6,1
 800adfc:	4010d07a 	srli	r8,r8,1
 800ae00:	1021883a 	mov	r16,r2
 800ae04:	89a2b03a 	or	r17,r17,r6
 800ae08:	003f1f06 	br	800aa88 <__alt_data_end+0xff00aa88>
 800ae0c:	0081ffc4 	movi	r2,2047
 800ae10:	80bf481e 	bne	r16,r2,800ab34 <__alt_data_end+0xff00ab34>
 800ae14:	003f1c06 	br	800aa88 <__alt_data_end+0xff00aa88>
 800ae18:	843ff844 	addi	r16,r16,-31
 800ae1c:	01000804 	movi	r4,32
 800ae20:	1406d83a 	srl	r3,r2,r16
 800ae24:	41005026 	beq	r8,r4,800af68 <__adddf3+0x55c>
 800ae28:	01001004 	movi	r4,64
 800ae2c:	2211c83a 	sub	r8,r4,r8
 800ae30:	1204983a 	sll	r2,r2,r8
 800ae34:	88a2b03a 	or	r17,r17,r2
 800ae38:	8822c03a 	cmpne	r17,r17,zero
 800ae3c:	1c62b03a 	or	r17,r3,r17
 800ae40:	0011883a 	mov	r8,zero
 800ae44:	0021883a 	mov	r16,zero
 800ae48:	003f7106 	br	800ac10 <__alt_data_end+0xff00ac10>
 800ae4c:	193ff804 	addi	r4,r3,-32
 800ae50:	00800804 	movi	r2,32
 800ae54:	4908d83a 	srl	r4,r9,r4
 800ae58:	18804526 	beq	r3,r2,800af70 <__adddf3+0x564>
 800ae5c:	00801004 	movi	r2,64
 800ae60:	10c5c83a 	sub	r2,r2,r3
 800ae64:	4886983a 	sll	r3,r9,r2
 800ae68:	198cb03a 	or	r6,r3,r6
 800ae6c:	300cc03a 	cmpne	r6,r6,zero
 800ae70:	218cb03a 	or	r6,r4,r6
 800ae74:	0007883a 	mov	r3,zero
 800ae78:	003f3b06 	br	800ab68 <__alt_data_end+0xff00ab68>
 800ae7c:	80002a26 	beq	r16,zero,800af28 <__adddf3+0x51c>
 800ae80:	0101ffc4 	movi	r4,2047
 800ae84:	11006826 	beq	r2,r4,800b028 <__adddf3+0x61c>
 800ae88:	00c7c83a 	sub	r3,zero,r3
 800ae8c:	42002034 	orhi	r8,r8,128
 800ae90:	01000e04 	movi	r4,56
 800ae94:	20c07c16 	blt	r4,r3,800b088 <__adddf3+0x67c>
 800ae98:	010007c4 	movi	r4,31
 800ae9c:	20c0da16 	blt	r4,r3,800b208 <__adddf3+0x7fc>
 800aea0:	01000804 	movi	r4,32
 800aea4:	20c9c83a 	sub	r4,r4,r3
 800aea8:	4114983a 	sll	r10,r8,r4
 800aeac:	88cad83a 	srl	r5,r17,r3
 800aeb0:	8908983a 	sll	r4,r17,r4
 800aeb4:	40c6d83a 	srl	r3,r8,r3
 800aeb8:	5162b03a 	or	r17,r10,r5
 800aebc:	2008c03a 	cmpne	r4,r4,zero
 800aec0:	8922b03a 	or	r17,r17,r4
 800aec4:	3463c83a 	sub	r17,r6,r17
 800aec8:	48c7c83a 	sub	r3,r9,r3
 800aecc:	344d803a 	cmpltu	r6,r6,r17
 800aed0:	1991c83a 	sub	r8,r3,r6
 800aed4:	1021883a 	mov	r16,r2
 800aed8:	3825883a 	mov	r18,r7
 800aedc:	003f2706 	br	800ab7c <__alt_data_end+0xff00ab7c>
 800aee0:	24d0b03a 	or	r8,r4,r19
 800aee4:	40001b1e 	bne	r8,zero,800af54 <__adddf3+0x548>
 800aee8:	0005883a 	mov	r2,zero
 800aeec:	0007883a 	mov	r3,zero
 800aef0:	0021883a 	mov	r16,zero
 800aef4:	003f4d06 	br	800ac2c <__alt_data_end+0xff00ac2c>
 800aef8:	008007c4 	movi	r2,31
 800aefc:	11003c16 	blt	r2,r4,800aff0 <__adddf3+0x5e4>
 800af00:	00800804 	movi	r2,32
 800af04:	1105c83a 	sub	r2,r2,r4
 800af08:	488e983a 	sll	r7,r9,r2
 800af0c:	310ad83a 	srl	r5,r6,r4
 800af10:	3084983a 	sll	r2,r6,r2
 800af14:	4912d83a 	srl	r9,r9,r4
 800af18:	394ab03a 	or	r5,r7,r5
 800af1c:	1004c03a 	cmpne	r2,r2,zero
 800af20:	288ab03a 	or	r5,r5,r2
 800af24:	003f5306 	br	800ac74 <__alt_data_end+0xff00ac74>
 800af28:	4448b03a 	or	r4,r8,r17
 800af2c:	20003e26 	beq	r4,zero,800b028 <__adddf3+0x61c>
 800af30:	00c6303a 	nor	r3,zero,r3
 800af34:	18003a1e 	bne	r3,zero,800b020 <__adddf3+0x614>
 800af38:	3463c83a 	sub	r17,r6,r17
 800af3c:	4a07c83a 	sub	r3,r9,r8
 800af40:	344d803a 	cmpltu	r6,r6,r17
 800af44:	1991c83a 	sub	r8,r3,r6
 800af48:	1021883a 	mov	r16,r2
 800af4c:	3825883a 	mov	r18,r7
 800af50:	003f0a06 	br	800ab7c <__alt_data_end+0xff00ab7c>
 800af54:	2023883a 	mov	r17,r4
 800af58:	003f0d06 	br	800ab90 <__alt_data_end+0xff00ab90>
 800af5c:	0081ffc4 	movi	r2,2047
 800af60:	80bf3f1e 	bne	r16,r2,800ac60 <__alt_data_end+0xff00ac60>
 800af64:	003ec806 	br	800aa88 <__alt_data_end+0xff00aa88>
 800af68:	0005883a 	mov	r2,zero
 800af6c:	003fb106 	br	800ae34 <__alt_data_end+0xff00ae34>
 800af70:	0007883a 	mov	r3,zero
 800af74:	003fbc06 	br	800ae68 <__alt_data_end+0xff00ae68>
 800af78:	4444b03a 	or	r2,r8,r17
 800af7c:	8000871e 	bne	r16,zero,800b19c <__adddf3+0x790>
 800af80:	1000ba26 	beq	r2,zero,800b26c <__adddf3+0x860>
 800af84:	4984b03a 	or	r2,r9,r6
 800af88:	103ebf26 	beq	r2,zero,800aa88 <__alt_data_end+0xff00aa88>
 800af8c:	8985883a 	add	r2,r17,r6
 800af90:	4247883a 	add	r3,r8,r9
 800af94:	1451803a 	cmpltu	r8,r2,r17
 800af98:	40d1883a 	add	r8,r8,r3
 800af9c:	40c0202c 	andhi	r3,r8,128
 800afa0:	1023883a 	mov	r17,r2
 800afa4:	183f1a26 	beq	r3,zero,800ac10 <__alt_data_end+0xff00ac10>
 800afa8:	00bfe034 	movhi	r2,65408
 800afac:	10bfffc4 	addi	r2,r2,-1
 800afb0:	2021883a 	mov	r16,r4
 800afb4:	4090703a 	and	r8,r8,r2
 800afb8:	003eb306 	br	800aa88 <__alt_data_end+0xff00aa88>
 800afbc:	4444b03a 	or	r2,r8,r17
 800afc0:	8000291e 	bne	r16,zero,800b068 <__adddf3+0x65c>
 800afc4:	10004b1e 	bne	r2,zero,800b0f4 <__adddf3+0x6e8>
 800afc8:	4990b03a 	or	r8,r9,r6
 800afcc:	40008b26 	beq	r8,zero,800b1fc <__adddf3+0x7f0>
 800afd0:	4811883a 	mov	r8,r9
 800afd4:	3023883a 	mov	r17,r6
 800afd8:	3825883a 	mov	r18,r7
 800afdc:	003eaa06 	br	800aa88 <__alt_data_end+0xff00aa88>
 800afe0:	1021883a 	mov	r16,r2
 800afe4:	0011883a 	mov	r8,zero
 800afe8:	0005883a 	mov	r2,zero
 800afec:	003f0f06 	br	800ac2c <__alt_data_end+0xff00ac2c>
 800aff0:	217ff804 	addi	r5,r4,-32
 800aff4:	00800804 	movi	r2,32
 800aff8:	494ad83a 	srl	r5,r9,r5
 800affc:	20807d26 	beq	r4,r2,800b1f4 <__adddf3+0x7e8>
 800b000:	00801004 	movi	r2,64
 800b004:	1109c83a 	sub	r4,r2,r4
 800b008:	4912983a 	sll	r9,r9,r4
 800b00c:	498cb03a 	or	r6,r9,r6
 800b010:	300cc03a 	cmpne	r6,r6,zero
 800b014:	298ab03a 	or	r5,r5,r6
 800b018:	0013883a 	mov	r9,zero
 800b01c:	003f1506 	br	800ac74 <__alt_data_end+0xff00ac74>
 800b020:	0101ffc4 	movi	r4,2047
 800b024:	113f9a1e 	bne	r2,r4,800ae90 <__alt_data_end+0xff00ae90>
 800b028:	4811883a 	mov	r8,r9
 800b02c:	3023883a 	mov	r17,r6
 800b030:	1021883a 	mov	r16,r2
 800b034:	3825883a 	mov	r18,r7
 800b038:	003e9306 	br	800aa88 <__alt_data_end+0xff00aa88>
 800b03c:	8000161e 	bne	r16,zero,800b098 <__adddf3+0x68c>
 800b040:	444ab03a 	or	r5,r8,r17
 800b044:	28005126 	beq	r5,zero,800b18c <__adddf3+0x780>
 800b048:	0108303a 	nor	r4,zero,r4
 800b04c:	20004d1e 	bne	r4,zero,800b184 <__adddf3+0x778>
 800b050:	89a3883a 	add	r17,r17,r6
 800b054:	4253883a 	add	r9,r8,r9
 800b058:	898d803a 	cmpltu	r6,r17,r6
 800b05c:	3251883a 	add	r8,r6,r9
 800b060:	1021883a 	mov	r16,r2
 800b064:	003f0806 	br	800ac88 <__alt_data_end+0xff00ac88>
 800b068:	1000301e 	bne	r2,zero,800b12c <__adddf3+0x720>
 800b06c:	4984b03a 	or	r2,r9,r6
 800b070:	10007126 	beq	r2,zero,800b238 <__adddf3+0x82c>
 800b074:	4811883a 	mov	r8,r9
 800b078:	3023883a 	mov	r17,r6
 800b07c:	3825883a 	mov	r18,r7
 800b080:	0401ffc4 	movi	r16,2047
 800b084:	003e8006 	br	800aa88 <__alt_data_end+0xff00aa88>
 800b088:	4462b03a 	or	r17,r8,r17
 800b08c:	8822c03a 	cmpne	r17,r17,zero
 800b090:	0007883a 	mov	r3,zero
 800b094:	003f8b06 	br	800aec4 <__alt_data_end+0xff00aec4>
 800b098:	0141ffc4 	movi	r5,2047
 800b09c:	11403b26 	beq	r2,r5,800b18c <__adddf3+0x780>
 800b0a0:	0109c83a 	sub	r4,zero,r4
 800b0a4:	42002034 	orhi	r8,r8,128
 800b0a8:	01400e04 	movi	r5,56
 800b0ac:	29006716 	blt	r5,r4,800b24c <__adddf3+0x840>
 800b0b0:	014007c4 	movi	r5,31
 800b0b4:	29007016 	blt	r5,r4,800b278 <__adddf3+0x86c>
 800b0b8:	01400804 	movi	r5,32
 800b0bc:	290bc83a 	sub	r5,r5,r4
 800b0c0:	4154983a 	sll	r10,r8,r5
 800b0c4:	890ed83a 	srl	r7,r17,r4
 800b0c8:	894a983a 	sll	r5,r17,r5
 800b0cc:	4108d83a 	srl	r4,r8,r4
 800b0d0:	51e2b03a 	or	r17,r10,r7
 800b0d4:	280ac03a 	cmpne	r5,r5,zero
 800b0d8:	8962b03a 	or	r17,r17,r5
 800b0dc:	89a3883a 	add	r17,r17,r6
 800b0e0:	2253883a 	add	r9,r4,r9
 800b0e4:	898d803a 	cmpltu	r6,r17,r6
 800b0e8:	3251883a 	add	r8,r6,r9
 800b0ec:	1021883a 	mov	r16,r2
 800b0f0:	003ee506 	br	800ac88 <__alt_data_end+0xff00ac88>
 800b0f4:	4984b03a 	or	r2,r9,r6
 800b0f8:	103e6326 	beq	r2,zero,800aa88 <__alt_data_end+0xff00aa88>
 800b0fc:	8987c83a 	sub	r3,r17,r6
 800b100:	88c9803a 	cmpltu	r4,r17,r3
 800b104:	4245c83a 	sub	r2,r8,r9
 800b108:	1105c83a 	sub	r2,r2,r4
 800b10c:	1100202c 	andhi	r4,r2,128
 800b110:	203ebb26 	beq	r4,zero,800ac00 <__alt_data_end+0xff00ac00>
 800b114:	3463c83a 	sub	r17,r6,r17
 800b118:	4a07c83a 	sub	r3,r9,r8
 800b11c:	344d803a 	cmpltu	r6,r6,r17
 800b120:	1991c83a 	sub	r8,r3,r6
 800b124:	3825883a 	mov	r18,r7
 800b128:	003e5706 	br	800aa88 <__alt_data_end+0xff00aa88>
 800b12c:	4984b03a 	or	r2,r9,r6
 800b130:	10002e26 	beq	r2,zero,800b1ec <__adddf3+0x7e0>
 800b134:	4004d0fa 	srli	r2,r8,3
 800b138:	8822d0fa 	srli	r17,r17,3
 800b13c:	4010977a 	slli	r8,r8,29
 800b140:	10c0022c 	andhi	r3,r2,8
 800b144:	4462b03a 	or	r17,r8,r17
 800b148:	18000826 	beq	r3,zero,800b16c <__adddf3+0x760>
 800b14c:	4808d0fa 	srli	r4,r9,3
 800b150:	20c0022c 	andhi	r3,r4,8
 800b154:	1800051e 	bne	r3,zero,800b16c <__adddf3+0x760>
 800b158:	300cd0fa 	srli	r6,r6,3
 800b15c:	4806977a 	slli	r3,r9,29
 800b160:	2005883a 	mov	r2,r4
 800b164:	3825883a 	mov	r18,r7
 800b168:	19a2b03a 	or	r17,r3,r6
 800b16c:	8810d77a 	srli	r8,r17,29
 800b170:	100490fa 	slli	r2,r2,3
 800b174:	882290fa 	slli	r17,r17,3
 800b178:	0401ffc4 	movi	r16,2047
 800b17c:	4090b03a 	or	r8,r8,r2
 800b180:	003e4106 	br	800aa88 <__alt_data_end+0xff00aa88>
 800b184:	0141ffc4 	movi	r5,2047
 800b188:	117fc71e 	bne	r2,r5,800b0a8 <__alt_data_end+0xff00b0a8>
 800b18c:	4811883a 	mov	r8,r9
 800b190:	3023883a 	mov	r17,r6
 800b194:	1021883a 	mov	r16,r2
 800b198:	003e3b06 	br	800aa88 <__alt_data_end+0xff00aa88>
 800b19c:	10002f26 	beq	r2,zero,800b25c <__adddf3+0x850>
 800b1a0:	4984b03a 	or	r2,r9,r6
 800b1a4:	10001126 	beq	r2,zero,800b1ec <__adddf3+0x7e0>
 800b1a8:	4004d0fa 	srli	r2,r8,3
 800b1ac:	8822d0fa 	srli	r17,r17,3
 800b1b0:	4010977a 	slli	r8,r8,29
 800b1b4:	10c0022c 	andhi	r3,r2,8
 800b1b8:	4462b03a 	or	r17,r8,r17
 800b1bc:	183feb26 	beq	r3,zero,800b16c <__alt_data_end+0xff00b16c>
 800b1c0:	4808d0fa 	srli	r4,r9,3
 800b1c4:	20c0022c 	andhi	r3,r4,8
 800b1c8:	183fe81e 	bne	r3,zero,800b16c <__alt_data_end+0xff00b16c>
 800b1cc:	300cd0fa 	srli	r6,r6,3
 800b1d0:	4806977a 	slli	r3,r9,29
 800b1d4:	2005883a 	mov	r2,r4
 800b1d8:	19a2b03a 	or	r17,r3,r6
 800b1dc:	003fe306 	br	800b16c <__alt_data_end+0xff00b16c>
 800b1e0:	0011883a 	mov	r8,zero
 800b1e4:	0005883a 	mov	r2,zero
 800b1e8:	003e3f06 	br	800aae8 <__alt_data_end+0xff00aae8>
 800b1ec:	0401ffc4 	movi	r16,2047
 800b1f0:	003e2506 	br	800aa88 <__alt_data_end+0xff00aa88>
 800b1f4:	0013883a 	mov	r9,zero
 800b1f8:	003f8406 	br	800b00c <__alt_data_end+0xff00b00c>
 800b1fc:	0005883a 	mov	r2,zero
 800b200:	0007883a 	mov	r3,zero
 800b204:	003e8906 	br	800ac2c <__alt_data_end+0xff00ac2c>
 800b208:	197ff804 	addi	r5,r3,-32
 800b20c:	01000804 	movi	r4,32
 800b210:	414ad83a 	srl	r5,r8,r5
 800b214:	19002426 	beq	r3,r4,800b2a8 <__adddf3+0x89c>
 800b218:	01001004 	movi	r4,64
 800b21c:	20c7c83a 	sub	r3,r4,r3
 800b220:	40c6983a 	sll	r3,r8,r3
 800b224:	1c46b03a 	or	r3,r3,r17
 800b228:	1806c03a 	cmpne	r3,r3,zero
 800b22c:	28e2b03a 	or	r17,r5,r3
 800b230:	0007883a 	mov	r3,zero
 800b234:	003f2306 	br	800aec4 <__alt_data_end+0xff00aec4>
 800b238:	0007883a 	mov	r3,zero
 800b23c:	5811883a 	mov	r8,r11
 800b240:	00bfffc4 	movi	r2,-1
 800b244:	0401ffc4 	movi	r16,2047
 800b248:	003e7806 	br	800ac2c <__alt_data_end+0xff00ac2c>
 800b24c:	4462b03a 	or	r17,r8,r17
 800b250:	8822c03a 	cmpne	r17,r17,zero
 800b254:	0009883a 	mov	r4,zero
 800b258:	003fa006 	br	800b0dc <__alt_data_end+0xff00b0dc>
 800b25c:	4811883a 	mov	r8,r9
 800b260:	3023883a 	mov	r17,r6
 800b264:	0401ffc4 	movi	r16,2047
 800b268:	003e0706 	br	800aa88 <__alt_data_end+0xff00aa88>
 800b26c:	4811883a 	mov	r8,r9
 800b270:	3023883a 	mov	r17,r6
 800b274:	003e0406 	br	800aa88 <__alt_data_end+0xff00aa88>
 800b278:	21fff804 	addi	r7,r4,-32
 800b27c:	01400804 	movi	r5,32
 800b280:	41ced83a 	srl	r7,r8,r7
 800b284:	21400a26 	beq	r4,r5,800b2b0 <__adddf3+0x8a4>
 800b288:	01401004 	movi	r5,64
 800b28c:	2909c83a 	sub	r4,r5,r4
 800b290:	4108983a 	sll	r4,r8,r4
 800b294:	2448b03a 	or	r4,r4,r17
 800b298:	2008c03a 	cmpne	r4,r4,zero
 800b29c:	3922b03a 	or	r17,r7,r4
 800b2a0:	0009883a 	mov	r4,zero
 800b2a4:	003f8d06 	br	800b0dc <__alt_data_end+0xff00b0dc>
 800b2a8:	0007883a 	mov	r3,zero
 800b2ac:	003fdd06 	br	800b224 <__alt_data_end+0xff00b224>
 800b2b0:	0009883a 	mov	r4,zero
 800b2b4:	003ff706 	br	800b294 <__alt_data_end+0xff00b294>

0800b2b8 <__divdf3>:
 800b2b8:	defff204 	addi	sp,sp,-56
 800b2bc:	dd400915 	stw	r21,36(sp)
 800b2c0:	282ad53a 	srli	r21,r5,20
 800b2c4:	dd000815 	stw	r20,32(sp)
 800b2c8:	2828d7fa 	srli	r20,r5,31
 800b2cc:	dc000415 	stw	r16,16(sp)
 800b2d0:	04000434 	movhi	r16,16
 800b2d4:	df000c15 	stw	fp,48(sp)
 800b2d8:	843fffc4 	addi	r16,r16,-1
 800b2dc:	dfc00d15 	stw	ra,52(sp)
 800b2e0:	ddc00b15 	stw	r23,44(sp)
 800b2e4:	dd800a15 	stw	r22,40(sp)
 800b2e8:	dcc00715 	stw	r19,28(sp)
 800b2ec:	dc800615 	stw	r18,24(sp)
 800b2f0:	dc400515 	stw	r17,20(sp)
 800b2f4:	ad41ffcc 	andi	r21,r21,2047
 800b2f8:	2c20703a 	and	r16,r5,r16
 800b2fc:	a7003fcc 	andi	fp,r20,255
 800b300:	a8006126 	beq	r21,zero,800b488 <__divdf3+0x1d0>
 800b304:	0081ffc4 	movi	r2,2047
 800b308:	2025883a 	mov	r18,r4
 800b30c:	a8803726 	beq	r21,r2,800b3ec <__divdf3+0x134>
 800b310:	80800434 	orhi	r2,r16,16
 800b314:	100490fa 	slli	r2,r2,3
 800b318:	2020d77a 	srli	r16,r4,29
 800b31c:	202490fa 	slli	r18,r4,3
 800b320:	ad7f0044 	addi	r21,r21,-1023
 800b324:	80a0b03a 	or	r16,r16,r2
 800b328:	0027883a 	mov	r19,zero
 800b32c:	0013883a 	mov	r9,zero
 800b330:	3804d53a 	srli	r2,r7,20
 800b334:	382cd7fa 	srli	r22,r7,31
 800b338:	04400434 	movhi	r17,16
 800b33c:	8c7fffc4 	addi	r17,r17,-1
 800b340:	1081ffcc 	andi	r2,r2,2047
 800b344:	3011883a 	mov	r8,r6
 800b348:	3c62703a 	and	r17,r7,r17
 800b34c:	b5c03fcc 	andi	r23,r22,255
 800b350:	10006c26 	beq	r2,zero,800b504 <__divdf3+0x24c>
 800b354:	00c1ffc4 	movi	r3,2047
 800b358:	10c06426 	beq	r2,r3,800b4ec <__divdf3+0x234>
 800b35c:	88c00434 	orhi	r3,r17,16
 800b360:	180690fa 	slli	r3,r3,3
 800b364:	3022d77a 	srli	r17,r6,29
 800b368:	301090fa 	slli	r8,r6,3
 800b36c:	10bf0044 	addi	r2,r2,-1023
 800b370:	88e2b03a 	or	r17,r17,r3
 800b374:	000f883a 	mov	r7,zero
 800b378:	a58cf03a 	xor	r6,r20,r22
 800b37c:	3cc8b03a 	or	r4,r7,r19
 800b380:	a8abc83a 	sub	r21,r21,r2
 800b384:	008003c4 	movi	r2,15
 800b388:	3007883a 	mov	r3,r6
 800b38c:	34c03fcc 	andi	r19,r6,255
 800b390:	11009036 	bltu	r2,r4,800b5d4 <__divdf3+0x31c>
 800b394:	200890ba 	slli	r4,r4,2
 800b398:	00820074 	movhi	r2,2049
 800b39c:	10aceb04 	addi	r2,r2,-19540
 800b3a0:	2089883a 	add	r4,r4,r2
 800b3a4:	20800017 	ldw	r2,0(r4)
 800b3a8:	1000683a 	jmp	r2
 800b3ac:	0800b5d4 	ori	zero,at,727
 800b3b0:	0800b424 	muli	zero,at,720
 800b3b4:	0800b5c4 	addi	zero,at,727
 800b3b8:	0800b418 	cmpnei	zero,at,720
 800b3bc:	0800b5c4 	addi	zero,at,727
 800b3c0:	0800b598 	cmpnei	zero,at,726
 800b3c4:	0800b5c4 	addi	zero,at,727
 800b3c8:	0800b418 	cmpnei	zero,at,720
 800b3cc:	0800b424 	muli	zero,at,720
 800b3d0:	0800b424 	muli	zero,at,720
 800b3d4:	0800b598 	cmpnei	zero,at,726
 800b3d8:	0800b418 	cmpnei	zero,at,720
 800b3dc:	0800b408 	cmpgei	zero,at,720
 800b3e0:	0800b408 	cmpgei	zero,at,720
 800b3e4:	0800b408 	cmpgei	zero,at,720
 800b3e8:	0800b8b8 	rdprs	zero,at,738
 800b3ec:	2404b03a 	or	r2,r4,r16
 800b3f0:	1000661e 	bne	r2,zero,800b58c <__divdf3+0x2d4>
 800b3f4:	04c00204 	movi	r19,8
 800b3f8:	0021883a 	mov	r16,zero
 800b3fc:	0025883a 	mov	r18,zero
 800b400:	02400084 	movi	r9,2
 800b404:	003fca06 	br	800b330 <__alt_data_end+0xff00b330>
 800b408:	8023883a 	mov	r17,r16
 800b40c:	9011883a 	mov	r8,r18
 800b410:	e02f883a 	mov	r23,fp
 800b414:	480f883a 	mov	r7,r9
 800b418:	00800084 	movi	r2,2
 800b41c:	3881311e 	bne	r7,r2,800b8e4 <__divdf3+0x62c>
 800b420:	b827883a 	mov	r19,r23
 800b424:	98c0004c 	andi	r3,r19,1
 800b428:	0081ffc4 	movi	r2,2047
 800b42c:	000b883a 	mov	r5,zero
 800b430:	0025883a 	mov	r18,zero
 800b434:	1004953a 	slli	r2,r2,20
 800b438:	18c03fcc 	andi	r3,r3,255
 800b43c:	04400434 	movhi	r17,16
 800b440:	8c7fffc4 	addi	r17,r17,-1
 800b444:	180697fa 	slli	r3,r3,31
 800b448:	2c4a703a 	and	r5,r5,r17
 800b44c:	288ab03a 	or	r5,r5,r2
 800b450:	28c6b03a 	or	r3,r5,r3
 800b454:	9005883a 	mov	r2,r18
 800b458:	dfc00d17 	ldw	ra,52(sp)
 800b45c:	df000c17 	ldw	fp,48(sp)
 800b460:	ddc00b17 	ldw	r23,44(sp)
 800b464:	dd800a17 	ldw	r22,40(sp)
 800b468:	dd400917 	ldw	r21,36(sp)
 800b46c:	dd000817 	ldw	r20,32(sp)
 800b470:	dcc00717 	ldw	r19,28(sp)
 800b474:	dc800617 	ldw	r18,24(sp)
 800b478:	dc400517 	ldw	r17,20(sp)
 800b47c:	dc000417 	ldw	r16,16(sp)
 800b480:	dec00e04 	addi	sp,sp,56
 800b484:	f800283a 	ret
 800b488:	2404b03a 	or	r2,r4,r16
 800b48c:	2027883a 	mov	r19,r4
 800b490:	10003926 	beq	r2,zero,800b578 <__divdf3+0x2c0>
 800b494:	80012e26 	beq	r16,zero,800b950 <__divdf3+0x698>
 800b498:	8009883a 	mov	r4,r16
 800b49c:	d9800315 	stw	r6,12(sp)
 800b4a0:	d9c00215 	stw	r7,8(sp)
 800b4a4:	800d0100 	call	800d010 <__clzsi2>
 800b4a8:	d9800317 	ldw	r6,12(sp)
 800b4ac:	d9c00217 	ldw	r7,8(sp)
 800b4b0:	113ffd44 	addi	r4,r2,-11
 800b4b4:	00c00704 	movi	r3,28
 800b4b8:	19012116 	blt	r3,r4,800b940 <__divdf3+0x688>
 800b4bc:	00c00744 	movi	r3,29
 800b4c0:	147ffe04 	addi	r17,r2,-8
 800b4c4:	1907c83a 	sub	r3,r3,r4
 800b4c8:	8460983a 	sll	r16,r16,r17
 800b4cc:	98c6d83a 	srl	r3,r19,r3
 800b4d0:	9c64983a 	sll	r18,r19,r17
 800b4d4:	1c20b03a 	or	r16,r3,r16
 800b4d8:	1080fcc4 	addi	r2,r2,1011
 800b4dc:	00abc83a 	sub	r21,zero,r2
 800b4e0:	0027883a 	mov	r19,zero
 800b4e4:	0013883a 	mov	r9,zero
 800b4e8:	003f9106 	br	800b330 <__alt_data_end+0xff00b330>
 800b4ec:	3446b03a 	or	r3,r6,r17
 800b4f0:	18001f1e 	bne	r3,zero,800b570 <__divdf3+0x2b8>
 800b4f4:	0023883a 	mov	r17,zero
 800b4f8:	0011883a 	mov	r8,zero
 800b4fc:	01c00084 	movi	r7,2
 800b500:	003f9d06 	br	800b378 <__alt_data_end+0xff00b378>
 800b504:	3446b03a 	or	r3,r6,r17
 800b508:	18001526 	beq	r3,zero,800b560 <__divdf3+0x2a8>
 800b50c:	88011b26 	beq	r17,zero,800b97c <__divdf3+0x6c4>
 800b510:	8809883a 	mov	r4,r17
 800b514:	d9800315 	stw	r6,12(sp)
 800b518:	da400115 	stw	r9,4(sp)
 800b51c:	800d0100 	call	800d010 <__clzsi2>
 800b520:	d9800317 	ldw	r6,12(sp)
 800b524:	da400117 	ldw	r9,4(sp)
 800b528:	113ffd44 	addi	r4,r2,-11
 800b52c:	00c00704 	movi	r3,28
 800b530:	19010e16 	blt	r3,r4,800b96c <__divdf3+0x6b4>
 800b534:	00c00744 	movi	r3,29
 800b538:	123ffe04 	addi	r8,r2,-8
 800b53c:	1907c83a 	sub	r3,r3,r4
 800b540:	8a22983a 	sll	r17,r17,r8
 800b544:	30c6d83a 	srl	r3,r6,r3
 800b548:	3210983a 	sll	r8,r6,r8
 800b54c:	1c62b03a 	or	r17,r3,r17
 800b550:	1080fcc4 	addi	r2,r2,1011
 800b554:	0085c83a 	sub	r2,zero,r2
 800b558:	000f883a 	mov	r7,zero
 800b55c:	003f8606 	br	800b378 <__alt_data_end+0xff00b378>
 800b560:	0023883a 	mov	r17,zero
 800b564:	0011883a 	mov	r8,zero
 800b568:	01c00044 	movi	r7,1
 800b56c:	003f8206 	br	800b378 <__alt_data_end+0xff00b378>
 800b570:	01c000c4 	movi	r7,3
 800b574:	003f8006 	br	800b378 <__alt_data_end+0xff00b378>
 800b578:	04c00104 	movi	r19,4
 800b57c:	0021883a 	mov	r16,zero
 800b580:	0025883a 	mov	r18,zero
 800b584:	02400044 	movi	r9,1
 800b588:	003f6906 	br	800b330 <__alt_data_end+0xff00b330>
 800b58c:	04c00304 	movi	r19,12
 800b590:	024000c4 	movi	r9,3
 800b594:	003f6606 	br	800b330 <__alt_data_end+0xff00b330>
 800b598:	01400434 	movhi	r5,16
 800b59c:	0007883a 	mov	r3,zero
 800b5a0:	297fffc4 	addi	r5,r5,-1
 800b5a4:	04bfffc4 	movi	r18,-1
 800b5a8:	0081ffc4 	movi	r2,2047
 800b5ac:	003fa106 	br	800b434 <__alt_data_end+0xff00b434>
 800b5b0:	00c00044 	movi	r3,1
 800b5b4:	1887c83a 	sub	r3,r3,r2
 800b5b8:	01000e04 	movi	r4,56
 800b5bc:	20c1210e 	bge	r4,r3,800ba44 <__divdf3+0x78c>
 800b5c0:	98c0004c 	andi	r3,r19,1
 800b5c4:	0005883a 	mov	r2,zero
 800b5c8:	000b883a 	mov	r5,zero
 800b5cc:	0025883a 	mov	r18,zero
 800b5d0:	003f9806 	br	800b434 <__alt_data_end+0xff00b434>
 800b5d4:	8c00fd36 	bltu	r17,r16,800b9cc <__divdf3+0x714>
 800b5d8:	8440fb26 	beq	r16,r17,800b9c8 <__divdf3+0x710>
 800b5dc:	8007883a 	mov	r3,r16
 800b5e0:	ad7fffc4 	addi	r21,r21,-1
 800b5e4:	0021883a 	mov	r16,zero
 800b5e8:	4004d63a 	srli	r2,r8,24
 800b5ec:	8822923a 	slli	r17,r17,8
 800b5f0:	1809883a 	mov	r4,r3
 800b5f4:	402c923a 	slli	r22,r8,8
 800b5f8:	88b8b03a 	or	fp,r17,r2
 800b5fc:	e028d43a 	srli	r20,fp,16
 800b600:	d8c00015 	stw	r3,0(sp)
 800b604:	e5ffffcc 	andi	r23,fp,65535
 800b608:	a00b883a 	mov	r5,r20
 800b60c:	800a9500 	call	800a950 <__udivsi3>
 800b610:	d8c00017 	ldw	r3,0(sp)
 800b614:	a00b883a 	mov	r5,r20
 800b618:	d8800315 	stw	r2,12(sp)
 800b61c:	1809883a 	mov	r4,r3
 800b620:	800a9b40 	call	800a9b4 <__umodsi3>
 800b624:	d9800317 	ldw	r6,12(sp)
 800b628:	1006943a 	slli	r3,r2,16
 800b62c:	9004d43a 	srli	r2,r18,16
 800b630:	b9a3383a 	mul	r17,r23,r6
 800b634:	10c4b03a 	or	r2,r2,r3
 800b638:	1440062e 	bgeu	r2,r17,800b654 <__divdf3+0x39c>
 800b63c:	1705883a 	add	r2,r2,fp
 800b640:	30ffffc4 	addi	r3,r6,-1
 800b644:	1700ee36 	bltu	r2,fp,800ba00 <__divdf3+0x748>
 800b648:	1440ed2e 	bgeu	r2,r17,800ba00 <__divdf3+0x748>
 800b64c:	31bfff84 	addi	r6,r6,-2
 800b650:	1705883a 	add	r2,r2,fp
 800b654:	1463c83a 	sub	r17,r2,r17
 800b658:	a00b883a 	mov	r5,r20
 800b65c:	8809883a 	mov	r4,r17
 800b660:	d9800315 	stw	r6,12(sp)
 800b664:	800a9500 	call	800a950 <__udivsi3>
 800b668:	a00b883a 	mov	r5,r20
 800b66c:	8809883a 	mov	r4,r17
 800b670:	d8800215 	stw	r2,8(sp)
 800b674:	800a9b40 	call	800a9b4 <__umodsi3>
 800b678:	d9c00217 	ldw	r7,8(sp)
 800b67c:	1004943a 	slli	r2,r2,16
 800b680:	94bfffcc 	andi	r18,r18,65535
 800b684:	b9d1383a 	mul	r8,r23,r7
 800b688:	90a4b03a 	or	r18,r18,r2
 800b68c:	d9800317 	ldw	r6,12(sp)
 800b690:	9200062e 	bgeu	r18,r8,800b6ac <__divdf3+0x3f4>
 800b694:	9725883a 	add	r18,r18,fp
 800b698:	38bfffc4 	addi	r2,r7,-1
 800b69c:	9700d636 	bltu	r18,fp,800b9f8 <__divdf3+0x740>
 800b6a0:	9200d52e 	bgeu	r18,r8,800b9f8 <__divdf3+0x740>
 800b6a4:	39ffff84 	addi	r7,r7,-2
 800b6a8:	9725883a 	add	r18,r18,fp
 800b6ac:	3004943a 	slli	r2,r6,16
 800b6b0:	b012d43a 	srli	r9,r22,16
 800b6b4:	b1bfffcc 	andi	r6,r22,65535
 800b6b8:	11e2b03a 	or	r17,r2,r7
 800b6bc:	8806d43a 	srli	r3,r17,16
 800b6c0:	893fffcc 	andi	r4,r17,65535
 800b6c4:	218b383a 	mul	r5,r4,r6
 800b6c8:	30c5383a 	mul	r2,r6,r3
 800b6cc:	2249383a 	mul	r4,r4,r9
 800b6d0:	280ed43a 	srli	r7,r5,16
 800b6d4:	9225c83a 	sub	r18,r18,r8
 800b6d8:	2089883a 	add	r4,r4,r2
 800b6dc:	3909883a 	add	r4,r7,r4
 800b6e0:	1a47383a 	mul	r3,r3,r9
 800b6e4:	2080022e 	bgeu	r4,r2,800b6f0 <__divdf3+0x438>
 800b6e8:	00800074 	movhi	r2,1
 800b6ec:	1887883a 	add	r3,r3,r2
 800b6f0:	2004d43a 	srli	r2,r4,16
 800b6f4:	2008943a 	slli	r4,r4,16
 800b6f8:	297fffcc 	andi	r5,r5,65535
 800b6fc:	10c7883a 	add	r3,r2,r3
 800b700:	2149883a 	add	r4,r4,r5
 800b704:	90c0a536 	bltu	r18,r3,800b99c <__divdf3+0x6e4>
 800b708:	90c0bf26 	beq	r18,r3,800ba08 <__divdf3+0x750>
 800b70c:	90c7c83a 	sub	r3,r18,r3
 800b710:	810fc83a 	sub	r7,r16,r4
 800b714:	81e5803a 	cmpltu	r18,r16,r7
 800b718:	1ca5c83a 	sub	r18,r3,r18
 800b71c:	e480c126 	beq	fp,r18,800ba24 <__divdf3+0x76c>
 800b720:	a00b883a 	mov	r5,r20
 800b724:	9009883a 	mov	r4,r18
 800b728:	d9800315 	stw	r6,12(sp)
 800b72c:	d9c00215 	stw	r7,8(sp)
 800b730:	da400115 	stw	r9,4(sp)
 800b734:	800a9500 	call	800a950 <__udivsi3>
 800b738:	a00b883a 	mov	r5,r20
 800b73c:	9009883a 	mov	r4,r18
 800b740:	d8800015 	stw	r2,0(sp)
 800b744:	800a9b40 	call	800a9b4 <__umodsi3>
 800b748:	d9c00217 	ldw	r7,8(sp)
 800b74c:	da000017 	ldw	r8,0(sp)
 800b750:	1006943a 	slli	r3,r2,16
 800b754:	3804d43a 	srli	r2,r7,16
 800b758:	ba21383a 	mul	r16,r23,r8
 800b75c:	d9800317 	ldw	r6,12(sp)
 800b760:	10c4b03a 	or	r2,r2,r3
 800b764:	da400117 	ldw	r9,4(sp)
 800b768:	1400062e 	bgeu	r2,r16,800b784 <__divdf3+0x4cc>
 800b76c:	1705883a 	add	r2,r2,fp
 800b770:	40ffffc4 	addi	r3,r8,-1
 800b774:	1700ad36 	bltu	r2,fp,800ba2c <__divdf3+0x774>
 800b778:	1400ac2e 	bgeu	r2,r16,800ba2c <__divdf3+0x774>
 800b77c:	423fff84 	addi	r8,r8,-2
 800b780:	1705883a 	add	r2,r2,fp
 800b784:	1421c83a 	sub	r16,r2,r16
 800b788:	a00b883a 	mov	r5,r20
 800b78c:	8009883a 	mov	r4,r16
 800b790:	d9800315 	stw	r6,12(sp)
 800b794:	d9c00215 	stw	r7,8(sp)
 800b798:	da000015 	stw	r8,0(sp)
 800b79c:	da400115 	stw	r9,4(sp)
 800b7a0:	800a9500 	call	800a950 <__udivsi3>
 800b7a4:	8009883a 	mov	r4,r16
 800b7a8:	a00b883a 	mov	r5,r20
 800b7ac:	1025883a 	mov	r18,r2
 800b7b0:	800a9b40 	call	800a9b4 <__umodsi3>
 800b7b4:	d9c00217 	ldw	r7,8(sp)
 800b7b8:	1004943a 	slli	r2,r2,16
 800b7bc:	bcaf383a 	mul	r23,r23,r18
 800b7c0:	393fffcc 	andi	r4,r7,65535
 800b7c4:	2088b03a 	or	r4,r4,r2
 800b7c8:	d9800317 	ldw	r6,12(sp)
 800b7cc:	da000017 	ldw	r8,0(sp)
 800b7d0:	da400117 	ldw	r9,4(sp)
 800b7d4:	25c0062e 	bgeu	r4,r23,800b7f0 <__divdf3+0x538>
 800b7d8:	2709883a 	add	r4,r4,fp
 800b7dc:	90bfffc4 	addi	r2,r18,-1
 800b7e0:	27009436 	bltu	r4,fp,800ba34 <__divdf3+0x77c>
 800b7e4:	25c0932e 	bgeu	r4,r23,800ba34 <__divdf3+0x77c>
 800b7e8:	94bfff84 	addi	r18,r18,-2
 800b7ec:	2709883a 	add	r4,r4,fp
 800b7f0:	4004943a 	slli	r2,r8,16
 800b7f4:	25efc83a 	sub	r23,r4,r23
 800b7f8:	1490b03a 	or	r8,r2,r18
 800b7fc:	4008d43a 	srli	r4,r8,16
 800b800:	40ffffcc 	andi	r3,r8,65535
 800b804:	30c5383a 	mul	r2,r6,r3
 800b808:	1a47383a 	mul	r3,r3,r9
 800b80c:	310d383a 	mul	r6,r6,r4
 800b810:	100ad43a 	srli	r5,r2,16
 800b814:	4913383a 	mul	r9,r9,r4
 800b818:	1987883a 	add	r3,r3,r6
 800b81c:	28c7883a 	add	r3,r5,r3
 800b820:	1980022e 	bgeu	r3,r6,800b82c <__divdf3+0x574>
 800b824:	01000074 	movhi	r4,1
 800b828:	4913883a 	add	r9,r9,r4
 800b82c:	1808d43a 	srli	r4,r3,16
 800b830:	1806943a 	slli	r3,r3,16
 800b834:	10bfffcc 	andi	r2,r2,65535
 800b838:	2253883a 	add	r9,r4,r9
 800b83c:	1887883a 	add	r3,r3,r2
 800b840:	ba403836 	bltu	r23,r9,800b924 <__divdf3+0x66c>
 800b844:	ba403626 	beq	r23,r9,800b920 <__divdf3+0x668>
 800b848:	42000054 	ori	r8,r8,1
 800b84c:	a880ffc4 	addi	r2,r21,1023
 800b850:	00bf570e 	bge	zero,r2,800b5b0 <__alt_data_end+0xff00b5b0>
 800b854:	40c001cc 	andi	r3,r8,7
 800b858:	18000726 	beq	r3,zero,800b878 <__divdf3+0x5c0>
 800b85c:	40c003cc 	andi	r3,r8,15
 800b860:	01000104 	movi	r4,4
 800b864:	19000426 	beq	r3,r4,800b878 <__divdf3+0x5c0>
 800b868:	4107883a 	add	r3,r8,r4
 800b86c:	1a11803a 	cmpltu	r8,r3,r8
 800b870:	8a23883a 	add	r17,r17,r8
 800b874:	1811883a 	mov	r8,r3
 800b878:	88c0402c 	andhi	r3,r17,256
 800b87c:	18000426 	beq	r3,zero,800b890 <__divdf3+0x5d8>
 800b880:	00ffc034 	movhi	r3,65280
 800b884:	18ffffc4 	addi	r3,r3,-1
 800b888:	a8810004 	addi	r2,r21,1024
 800b88c:	88e2703a 	and	r17,r17,r3
 800b890:	00c1ff84 	movi	r3,2046
 800b894:	18bee316 	blt	r3,r2,800b424 <__alt_data_end+0xff00b424>
 800b898:	8824977a 	slli	r18,r17,29
 800b89c:	4010d0fa 	srli	r8,r8,3
 800b8a0:	8822927a 	slli	r17,r17,9
 800b8a4:	1081ffcc 	andi	r2,r2,2047
 800b8a8:	9224b03a 	or	r18,r18,r8
 800b8ac:	880ad33a 	srli	r5,r17,12
 800b8b0:	98c0004c 	andi	r3,r19,1
 800b8b4:	003edf06 	br	800b434 <__alt_data_end+0xff00b434>
 800b8b8:	8080022c 	andhi	r2,r16,8
 800b8bc:	10001226 	beq	r2,zero,800b908 <__divdf3+0x650>
 800b8c0:	8880022c 	andhi	r2,r17,8
 800b8c4:	1000101e 	bne	r2,zero,800b908 <__divdf3+0x650>
 800b8c8:	00800434 	movhi	r2,16
 800b8cc:	89400234 	orhi	r5,r17,8
 800b8d0:	10bfffc4 	addi	r2,r2,-1
 800b8d4:	b007883a 	mov	r3,r22
 800b8d8:	288a703a 	and	r5,r5,r2
 800b8dc:	4025883a 	mov	r18,r8
 800b8e0:	003f3106 	br	800b5a8 <__alt_data_end+0xff00b5a8>
 800b8e4:	008000c4 	movi	r2,3
 800b8e8:	3880a626 	beq	r7,r2,800bb84 <__divdf3+0x8cc>
 800b8ec:	00800044 	movi	r2,1
 800b8f0:	3880521e 	bne	r7,r2,800ba3c <__divdf3+0x784>
 800b8f4:	b807883a 	mov	r3,r23
 800b8f8:	0005883a 	mov	r2,zero
 800b8fc:	000b883a 	mov	r5,zero
 800b900:	0025883a 	mov	r18,zero
 800b904:	003ecb06 	br	800b434 <__alt_data_end+0xff00b434>
 800b908:	00800434 	movhi	r2,16
 800b90c:	81400234 	orhi	r5,r16,8
 800b910:	10bfffc4 	addi	r2,r2,-1
 800b914:	a007883a 	mov	r3,r20
 800b918:	288a703a 	and	r5,r5,r2
 800b91c:	003f2206 	br	800b5a8 <__alt_data_end+0xff00b5a8>
 800b920:	183fca26 	beq	r3,zero,800b84c <__alt_data_end+0xff00b84c>
 800b924:	e5ef883a 	add	r23,fp,r23
 800b928:	40bfffc4 	addi	r2,r8,-1
 800b92c:	bf00392e 	bgeu	r23,fp,800ba14 <__divdf3+0x75c>
 800b930:	1011883a 	mov	r8,r2
 800b934:	ba7fc41e 	bne	r23,r9,800b848 <__alt_data_end+0xff00b848>
 800b938:	b0ffc31e 	bne	r22,r3,800b848 <__alt_data_end+0xff00b848>
 800b93c:	003fc306 	br	800b84c <__alt_data_end+0xff00b84c>
 800b940:	143ff604 	addi	r16,r2,-40
 800b944:	9c20983a 	sll	r16,r19,r16
 800b948:	0025883a 	mov	r18,zero
 800b94c:	003ee206 	br	800b4d8 <__alt_data_end+0xff00b4d8>
 800b950:	d9800315 	stw	r6,12(sp)
 800b954:	d9c00215 	stw	r7,8(sp)
 800b958:	800d0100 	call	800d010 <__clzsi2>
 800b95c:	10800804 	addi	r2,r2,32
 800b960:	d9c00217 	ldw	r7,8(sp)
 800b964:	d9800317 	ldw	r6,12(sp)
 800b968:	003ed106 	br	800b4b0 <__alt_data_end+0xff00b4b0>
 800b96c:	147ff604 	addi	r17,r2,-40
 800b970:	3462983a 	sll	r17,r6,r17
 800b974:	0011883a 	mov	r8,zero
 800b978:	003ef506 	br	800b550 <__alt_data_end+0xff00b550>
 800b97c:	3009883a 	mov	r4,r6
 800b980:	d9800315 	stw	r6,12(sp)
 800b984:	da400115 	stw	r9,4(sp)
 800b988:	800d0100 	call	800d010 <__clzsi2>
 800b98c:	10800804 	addi	r2,r2,32
 800b990:	da400117 	ldw	r9,4(sp)
 800b994:	d9800317 	ldw	r6,12(sp)
 800b998:	003ee306 	br	800b528 <__alt_data_end+0xff00b528>
 800b99c:	85a1883a 	add	r16,r16,r22
 800b9a0:	8585803a 	cmpltu	r2,r16,r22
 800b9a4:	1705883a 	add	r2,r2,fp
 800b9a8:	14a5883a 	add	r18,r2,r18
 800b9ac:	88bfffc4 	addi	r2,r17,-1
 800b9b0:	e4800c2e 	bgeu	fp,r18,800b9e4 <__divdf3+0x72c>
 800b9b4:	90c03e36 	bltu	r18,r3,800bab0 <__divdf3+0x7f8>
 800b9b8:	1c806926 	beq	r3,r18,800bb60 <__divdf3+0x8a8>
 800b9bc:	90c7c83a 	sub	r3,r18,r3
 800b9c0:	1023883a 	mov	r17,r2
 800b9c4:	003f5206 	br	800b710 <__alt_data_end+0xff00b710>
 800b9c8:	923f0436 	bltu	r18,r8,800b5dc <__alt_data_end+0xff00b5dc>
 800b9cc:	800897fa 	slli	r4,r16,31
 800b9d0:	9004d07a 	srli	r2,r18,1
 800b9d4:	8006d07a 	srli	r3,r16,1
 800b9d8:	902097fa 	slli	r16,r18,31
 800b9dc:	20a4b03a 	or	r18,r4,r2
 800b9e0:	003f0106 	br	800b5e8 <__alt_data_end+0xff00b5e8>
 800b9e4:	e4bff51e 	bne	fp,r18,800b9bc <__alt_data_end+0xff00b9bc>
 800b9e8:	85bff22e 	bgeu	r16,r22,800b9b4 <__alt_data_end+0xff00b9b4>
 800b9ec:	e0c7c83a 	sub	r3,fp,r3
 800b9f0:	1023883a 	mov	r17,r2
 800b9f4:	003f4606 	br	800b710 <__alt_data_end+0xff00b710>
 800b9f8:	100f883a 	mov	r7,r2
 800b9fc:	003f2b06 	br	800b6ac <__alt_data_end+0xff00b6ac>
 800ba00:	180d883a 	mov	r6,r3
 800ba04:	003f1306 	br	800b654 <__alt_data_end+0xff00b654>
 800ba08:	813fe436 	bltu	r16,r4,800b99c <__alt_data_end+0xff00b99c>
 800ba0c:	0007883a 	mov	r3,zero
 800ba10:	003f3f06 	br	800b710 <__alt_data_end+0xff00b710>
 800ba14:	ba402c36 	bltu	r23,r9,800bac8 <__divdf3+0x810>
 800ba18:	4dc05426 	beq	r9,r23,800bb6c <__divdf3+0x8b4>
 800ba1c:	1011883a 	mov	r8,r2
 800ba20:	003f8906 	br	800b848 <__alt_data_end+0xff00b848>
 800ba24:	023fffc4 	movi	r8,-1
 800ba28:	003f8806 	br	800b84c <__alt_data_end+0xff00b84c>
 800ba2c:	1811883a 	mov	r8,r3
 800ba30:	003f5406 	br	800b784 <__alt_data_end+0xff00b784>
 800ba34:	1025883a 	mov	r18,r2
 800ba38:	003f6d06 	br	800b7f0 <__alt_data_end+0xff00b7f0>
 800ba3c:	b827883a 	mov	r19,r23
 800ba40:	003f8206 	br	800b84c <__alt_data_end+0xff00b84c>
 800ba44:	010007c4 	movi	r4,31
 800ba48:	20c02616 	blt	r4,r3,800bae4 <__divdf3+0x82c>
 800ba4c:	00800804 	movi	r2,32
 800ba50:	10c5c83a 	sub	r2,r2,r3
 800ba54:	888a983a 	sll	r5,r17,r2
 800ba58:	40c8d83a 	srl	r4,r8,r3
 800ba5c:	4084983a 	sll	r2,r8,r2
 800ba60:	88e2d83a 	srl	r17,r17,r3
 800ba64:	2906b03a 	or	r3,r5,r4
 800ba68:	1004c03a 	cmpne	r2,r2,zero
 800ba6c:	1886b03a 	or	r3,r3,r2
 800ba70:	188001cc 	andi	r2,r3,7
 800ba74:	10000726 	beq	r2,zero,800ba94 <__divdf3+0x7dc>
 800ba78:	188003cc 	andi	r2,r3,15
 800ba7c:	01000104 	movi	r4,4
 800ba80:	11000426 	beq	r2,r4,800ba94 <__divdf3+0x7dc>
 800ba84:	1805883a 	mov	r2,r3
 800ba88:	10c00104 	addi	r3,r2,4
 800ba8c:	1885803a 	cmpltu	r2,r3,r2
 800ba90:	88a3883a 	add	r17,r17,r2
 800ba94:	8880202c 	andhi	r2,r17,128
 800ba98:	10002726 	beq	r2,zero,800bb38 <__divdf3+0x880>
 800ba9c:	98c0004c 	andi	r3,r19,1
 800baa0:	00800044 	movi	r2,1
 800baa4:	000b883a 	mov	r5,zero
 800baa8:	0025883a 	mov	r18,zero
 800baac:	003e6106 	br	800b434 <__alt_data_end+0xff00b434>
 800bab0:	85a1883a 	add	r16,r16,r22
 800bab4:	8585803a 	cmpltu	r2,r16,r22
 800bab8:	1705883a 	add	r2,r2,fp
 800babc:	14a5883a 	add	r18,r2,r18
 800bac0:	8c7fff84 	addi	r17,r17,-2
 800bac4:	003f1106 	br	800b70c <__alt_data_end+0xff00b70c>
 800bac8:	b589883a 	add	r4,r22,r22
 800bacc:	25ad803a 	cmpltu	r22,r4,r22
 800bad0:	b739883a 	add	fp,r22,fp
 800bad4:	40bfff84 	addi	r2,r8,-2
 800bad8:	bf2f883a 	add	r23,r23,fp
 800badc:	202d883a 	mov	r22,r4
 800bae0:	003f9306 	br	800b930 <__alt_data_end+0xff00b930>
 800bae4:	013ff844 	movi	r4,-31
 800bae8:	2085c83a 	sub	r2,r4,r2
 800baec:	8888d83a 	srl	r4,r17,r2
 800baf0:	00800804 	movi	r2,32
 800baf4:	18802126 	beq	r3,r2,800bb7c <__divdf3+0x8c4>
 800baf8:	00801004 	movi	r2,64
 800bafc:	10c5c83a 	sub	r2,r2,r3
 800bb00:	8884983a 	sll	r2,r17,r2
 800bb04:	1204b03a 	or	r2,r2,r8
 800bb08:	1004c03a 	cmpne	r2,r2,zero
 800bb0c:	2084b03a 	or	r2,r4,r2
 800bb10:	144001cc 	andi	r17,r2,7
 800bb14:	88000d1e 	bne	r17,zero,800bb4c <__divdf3+0x894>
 800bb18:	000b883a 	mov	r5,zero
 800bb1c:	1024d0fa 	srli	r18,r2,3
 800bb20:	98c0004c 	andi	r3,r19,1
 800bb24:	0005883a 	mov	r2,zero
 800bb28:	9464b03a 	or	r18,r18,r17
 800bb2c:	003e4106 	br	800b434 <__alt_data_end+0xff00b434>
 800bb30:	1007883a 	mov	r3,r2
 800bb34:	0023883a 	mov	r17,zero
 800bb38:	880a927a 	slli	r5,r17,9
 800bb3c:	1805883a 	mov	r2,r3
 800bb40:	8822977a 	slli	r17,r17,29
 800bb44:	280ad33a 	srli	r5,r5,12
 800bb48:	003ff406 	br	800bb1c <__alt_data_end+0xff00bb1c>
 800bb4c:	10c003cc 	andi	r3,r2,15
 800bb50:	01000104 	movi	r4,4
 800bb54:	193ff626 	beq	r3,r4,800bb30 <__alt_data_end+0xff00bb30>
 800bb58:	0023883a 	mov	r17,zero
 800bb5c:	003fca06 	br	800ba88 <__alt_data_end+0xff00ba88>
 800bb60:	813fd336 	bltu	r16,r4,800bab0 <__alt_data_end+0xff00bab0>
 800bb64:	1023883a 	mov	r17,r2
 800bb68:	003fa806 	br	800ba0c <__alt_data_end+0xff00ba0c>
 800bb6c:	b0ffd636 	bltu	r22,r3,800bac8 <__alt_data_end+0xff00bac8>
 800bb70:	1011883a 	mov	r8,r2
 800bb74:	b0ff341e 	bne	r22,r3,800b848 <__alt_data_end+0xff00b848>
 800bb78:	003f3406 	br	800b84c <__alt_data_end+0xff00b84c>
 800bb7c:	0005883a 	mov	r2,zero
 800bb80:	003fe006 	br	800bb04 <__alt_data_end+0xff00bb04>
 800bb84:	00800434 	movhi	r2,16
 800bb88:	89400234 	orhi	r5,r17,8
 800bb8c:	10bfffc4 	addi	r2,r2,-1
 800bb90:	b807883a 	mov	r3,r23
 800bb94:	288a703a 	and	r5,r5,r2
 800bb98:	4025883a 	mov	r18,r8
 800bb9c:	003e8206 	br	800b5a8 <__alt_data_end+0xff00b5a8>

0800bba0 <__eqdf2>:
 800bba0:	2804d53a 	srli	r2,r5,20
 800bba4:	3806d53a 	srli	r3,r7,20
 800bba8:	02000434 	movhi	r8,16
 800bbac:	423fffc4 	addi	r8,r8,-1
 800bbb0:	1081ffcc 	andi	r2,r2,2047
 800bbb4:	0281ffc4 	movi	r10,2047
 800bbb8:	2a12703a 	and	r9,r5,r8
 800bbbc:	18c1ffcc 	andi	r3,r3,2047
 800bbc0:	3a10703a 	and	r8,r7,r8
 800bbc4:	280ad7fa 	srli	r5,r5,31
 800bbc8:	380ed7fa 	srli	r7,r7,31
 800bbcc:	12801026 	beq	r2,r10,800bc10 <__eqdf2+0x70>
 800bbd0:	0281ffc4 	movi	r10,2047
 800bbd4:	1a800a26 	beq	r3,r10,800bc00 <__eqdf2+0x60>
 800bbd8:	10c00226 	beq	r2,r3,800bbe4 <__eqdf2+0x44>
 800bbdc:	00800044 	movi	r2,1
 800bbe0:	f800283a 	ret
 800bbe4:	4a3ffd1e 	bne	r9,r8,800bbdc <__alt_data_end+0xff00bbdc>
 800bbe8:	21bffc1e 	bne	r4,r6,800bbdc <__alt_data_end+0xff00bbdc>
 800bbec:	29c00c26 	beq	r5,r7,800bc20 <__eqdf2+0x80>
 800bbf0:	103ffa1e 	bne	r2,zero,800bbdc <__alt_data_end+0xff00bbdc>
 800bbf4:	2244b03a 	or	r2,r4,r9
 800bbf8:	1004c03a 	cmpne	r2,r2,zero
 800bbfc:	f800283a 	ret
 800bc00:	3214b03a 	or	r10,r6,r8
 800bc04:	503ff426 	beq	r10,zero,800bbd8 <__alt_data_end+0xff00bbd8>
 800bc08:	00800044 	movi	r2,1
 800bc0c:	f800283a 	ret
 800bc10:	2254b03a 	or	r10,r4,r9
 800bc14:	503fee26 	beq	r10,zero,800bbd0 <__alt_data_end+0xff00bbd0>
 800bc18:	00800044 	movi	r2,1
 800bc1c:	f800283a 	ret
 800bc20:	0005883a 	mov	r2,zero
 800bc24:	f800283a 	ret

0800bc28 <__gedf2>:
 800bc28:	2804d53a 	srli	r2,r5,20
 800bc2c:	3806d53a 	srli	r3,r7,20
 800bc30:	02000434 	movhi	r8,16
 800bc34:	423fffc4 	addi	r8,r8,-1
 800bc38:	1081ffcc 	andi	r2,r2,2047
 800bc3c:	0241ffc4 	movi	r9,2047
 800bc40:	2a14703a 	and	r10,r5,r8
 800bc44:	18c1ffcc 	andi	r3,r3,2047
 800bc48:	3a10703a 	and	r8,r7,r8
 800bc4c:	280ad7fa 	srli	r5,r5,31
 800bc50:	380ed7fa 	srli	r7,r7,31
 800bc54:	12401d26 	beq	r2,r9,800bccc <__gedf2+0xa4>
 800bc58:	0241ffc4 	movi	r9,2047
 800bc5c:	1a401226 	beq	r3,r9,800bca8 <__gedf2+0x80>
 800bc60:	1000081e 	bne	r2,zero,800bc84 <__gedf2+0x5c>
 800bc64:	2296b03a 	or	r11,r4,r10
 800bc68:	5813003a 	cmpeq	r9,r11,zero
 800bc6c:	1800091e 	bne	r3,zero,800bc94 <__gedf2+0x6c>
 800bc70:	3218b03a 	or	r12,r6,r8
 800bc74:	6000071e 	bne	r12,zero,800bc94 <__gedf2+0x6c>
 800bc78:	0005883a 	mov	r2,zero
 800bc7c:	5800101e 	bne	r11,zero,800bcc0 <__gedf2+0x98>
 800bc80:	f800283a 	ret
 800bc84:	18000c1e 	bne	r3,zero,800bcb8 <__gedf2+0x90>
 800bc88:	3212b03a 	or	r9,r6,r8
 800bc8c:	48000c26 	beq	r9,zero,800bcc0 <__gedf2+0x98>
 800bc90:	0013883a 	mov	r9,zero
 800bc94:	39c03fcc 	andi	r7,r7,255
 800bc98:	48000826 	beq	r9,zero,800bcbc <__gedf2+0x94>
 800bc9c:	38000926 	beq	r7,zero,800bcc4 <__gedf2+0x9c>
 800bca0:	00800044 	movi	r2,1
 800bca4:	f800283a 	ret
 800bca8:	3212b03a 	or	r9,r6,r8
 800bcac:	483fec26 	beq	r9,zero,800bc60 <__alt_data_end+0xff00bc60>
 800bcb0:	00bfff84 	movi	r2,-2
 800bcb4:	f800283a 	ret
 800bcb8:	39c03fcc 	andi	r7,r7,255
 800bcbc:	29c00626 	beq	r5,r7,800bcd8 <__gedf2+0xb0>
 800bcc0:	283ff726 	beq	r5,zero,800bca0 <__alt_data_end+0xff00bca0>
 800bcc4:	00bfffc4 	movi	r2,-1
 800bcc8:	f800283a 	ret
 800bccc:	2292b03a 	or	r9,r4,r10
 800bcd0:	483fe126 	beq	r9,zero,800bc58 <__alt_data_end+0xff00bc58>
 800bcd4:	003ff606 	br	800bcb0 <__alt_data_end+0xff00bcb0>
 800bcd8:	18bff916 	blt	r3,r2,800bcc0 <__alt_data_end+0xff00bcc0>
 800bcdc:	10c00316 	blt	r2,r3,800bcec <__gedf2+0xc4>
 800bce0:	42bff736 	bltu	r8,r10,800bcc0 <__alt_data_end+0xff00bcc0>
 800bce4:	52000326 	beq	r10,r8,800bcf4 <__gedf2+0xcc>
 800bce8:	5200042e 	bgeu	r10,r8,800bcfc <__gedf2+0xd4>
 800bcec:	283fec1e 	bne	r5,zero,800bca0 <__alt_data_end+0xff00bca0>
 800bcf0:	003ff406 	br	800bcc4 <__alt_data_end+0xff00bcc4>
 800bcf4:	313ff236 	bltu	r6,r4,800bcc0 <__alt_data_end+0xff00bcc0>
 800bcf8:	21bffc36 	bltu	r4,r6,800bcec <__alt_data_end+0xff00bcec>
 800bcfc:	0005883a 	mov	r2,zero
 800bd00:	f800283a 	ret

0800bd04 <__ledf2>:
 800bd04:	2804d53a 	srli	r2,r5,20
 800bd08:	3810d53a 	srli	r8,r7,20
 800bd0c:	00c00434 	movhi	r3,16
 800bd10:	18ffffc4 	addi	r3,r3,-1
 800bd14:	1081ffcc 	andi	r2,r2,2047
 800bd18:	0241ffc4 	movi	r9,2047
 800bd1c:	28d4703a 	and	r10,r5,r3
 800bd20:	4201ffcc 	andi	r8,r8,2047
 800bd24:	38c6703a 	and	r3,r7,r3
 800bd28:	280ad7fa 	srli	r5,r5,31
 800bd2c:	380ed7fa 	srli	r7,r7,31
 800bd30:	12401f26 	beq	r2,r9,800bdb0 <__ledf2+0xac>
 800bd34:	0241ffc4 	movi	r9,2047
 800bd38:	42401426 	beq	r8,r9,800bd8c <__ledf2+0x88>
 800bd3c:	1000091e 	bne	r2,zero,800bd64 <__ledf2+0x60>
 800bd40:	2296b03a 	or	r11,r4,r10
 800bd44:	5813003a 	cmpeq	r9,r11,zero
 800bd48:	29403fcc 	andi	r5,r5,255
 800bd4c:	40000a1e 	bne	r8,zero,800bd78 <__ledf2+0x74>
 800bd50:	30d8b03a 	or	r12,r6,r3
 800bd54:	6000081e 	bne	r12,zero,800bd78 <__ledf2+0x74>
 800bd58:	0005883a 	mov	r2,zero
 800bd5c:	5800111e 	bne	r11,zero,800bda4 <__ledf2+0xa0>
 800bd60:	f800283a 	ret
 800bd64:	29403fcc 	andi	r5,r5,255
 800bd68:	40000c1e 	bne	r8,zero,800bd9c <__ledf2+0x98>
 800bd6c:	30d2b03a 	or	r9,r6,r3
 800bd70:	48000c26 	beq	r9,zero,800bda4 <__ledf2+0xa0>
 800bd74:	0013883a 	mov	r9,zero
 800bd78:	39c03fcc 	andi	r7,r7,255
 800bd7c:	48000826 	beq	r9,zero,800bda0 <__ledf2+0x9c>
 800bd80:	38001126 	beq	r7,zero,800bdc8 <__ledf2+0xc4>
 800bd84:	00800044 	movi	r2,1
 800bd88:	f800283a 	ret
 800bd8c:	30d2b03a 	or	r9,r6,r3
 800bd90:	483fea26 	beq	r9,zero,800bd3c <__alt_data_end+0xff00bd3c>
 800bd94:	00800084 	movi	r2,2
 800bd98:	f800283a 	ret
 800bd9c:	39c03fcc 	andi	r7,r7,255
 800bda0:	39400726 	beq	r7,r5,800bdc0 <__ledf2+0xbc>
 800bda4:	2800081e 	bne	r5,zero,800bdc8 <__ledf2+0xc4>
 800bda8:	00800044 	movi	r2,1
 800bdac:	f800283a 	ret
 800bdb0:	2292b03a 	or	r9,r4,r10
 800bdb4:	483fdf26 	beq	r9,zero,800bd34 <__alt_data_end+0xff00bd34>
 800bdb8:	00800084 	movi	r2,2
 800bdbc:	f800283a 	ret
 800bdc0:	4080030e 	bge	r8,r2,800bdd0 <__ledf2+0xcc>
 800bdc4:	383fef26 	beq	r7,zero,800bd84 <__alt_data_end+0xff00bd84>
 800bdc8:	00bfffc4 	movi	r2,-1
 800bdcc:	f800283a 	ret
 800bdd0:	123feb16 	blt	r2,r8,800bd80 <__alt_data_end+0xff00bd80>
 800bdd4:	1abff336 	bltu	r3,r10,800bda4 <__alt_data_end+0xff00bda4>
 800bdd8:	50c00326 	beq	r10,r3,800bde8 <__ledf2+0xe4>
 800bddc:	50c0042e 	bgeu	r10,r3,800bdf0 <__ledf2+0xec>
 800bde0:	283fe81e 	bne	r5,zero,800bd84 <__alt_data_end+0xff00bd84>
 800bde4:	003ff806 	br	800bdc8 <__alt_data_end+0xff00bdc8>
 800bde8:	313fee36 	bltu	r6,r4,800bda4 <__alt_data_end+0xff00bda4>
 800bdec:	21bffc36 	bltu	r4,r6,800bde0 <__alt_data_end+0xff00bde0>
 800bdf0:	0005883a 	mov	r2,zero
 800bdf4:	f800283a 	ret

0800bdf8 <__muldf3>:
 800bdf8:	defff304 	addi	sp,sp,-52
 800bdfc:	2804d53a 	srli	r2,r5,20
 800be00:	dd800915 	stw	r22,36(sp)
 800be04:	282cd7fa 	srli	r22,r5,31
 800be08:	dc000315 	stw	r16,12(sp)
 800be0c:	04000434 	movhi	r16,16
 800be10:	dd400815 	stw	r21,32(sp)
 800be14:	dc800515 	stw	r18,20(sp)
 800be18:	843fffc4 	addi	r16,r16,-1
 800be1c:	dfc00c15 	stw	ra,48(sp)
 800be20:	df000b15 	stw	fp,44(sp)
 800be24:	ddc00a15 	stw	r23,40(sp)
 800be28:	dd000715 	stw	r20,28(sp)
 800be2c:	dcc00615 	stw	r19,24(sp)
 800be30:	dc400415 	stw	r17,16(sp)
 800be34:	1481ffcc 	andi	r18,r2,2047
 800be38:	2c20703a 	and	r16,r5,r16
 800be3c:	b02b883a 	mov	r21,r22
 800be40:	b2403fcc 	andi	r9,r22,255
 800be44:	90006026 	beq	r18,zero,800bfc8 <__muldf3+0x1d0>
 800be48:	0081ffc4 	movi	r2,2047
 800be4c:	2029883a 	mov	r20,r4
 800be50:	90803626 	beq	r18,r2,800bf2c <__muldf3+0x134>
 800be54:	80800434 	orhi	r2,r16,16
 800be58:	100490fa 	slli	r2,r2,3
 800be5c:	2020d77a 	srli	r16,r4,29
 800be60:	202890fa 	slli	r20,r4,3
 800be64:	94bf0044 	addi	r18,r18,-1023
 800be68:	80a0b03a 	or	r16,r16,r2
 800be6c:	0027883a 	mov	r19,zero
 800be70:	0039883a 	mov	fp,zero
 800be74:	3804d53a 	srli	r2,r7,20
 800be78:	382ed7fa 	srli	r23,r7,31
 800be7c:	04400434 	movhi	r17,16
 800be80:	8c7fffc4 	addi	r17,r17,-1
 800be84:	1081ffcc 	andi	r2,r2,2047
 800be88:	3011883a 	mov	r8,r6
 800be8c:	3c62703a 	and	r17,r7,r17
 800be90:	ba803fcc 	andi	r10,r23,255
 800be94:	10006d26 	beq	r2,zero,800c04c <__muldf3+0x254>
 800be98:	00c1ffc4 	movi	r3,2047
 800be9c:	10c06526 	beq	r2,r3,800c034 <__muldf3+0x23c>
 800bea0:	88c00434 	orhi	r3,r17,16
 800bea4:	180690fa 	slli	r3,r3,3
 800bea8:	3022d77a 	srli	r17,r6,29
 800beac:	301090fa 	slli	r8,r6,3
 800beb0:	10bf0044 	addi	r2,r2,-1023
 800beb4:	88e2b03a 	or	r17,r17,r3
 800beb8:	000b883a 	mov	r5,zero
 800bebc:	9085883a 	add	r2,r18,r2
 800bec0:	2cc8b03a 	or	r4,r5,r19
 800bec4:	00c003c4 	movi	r3,15
 800bec8:	bdacf03a 	xor	r22,r23,r22
 800becc:	12c00044 	addi	r11,r2,1
 800bed0:	19009936 	bltu	r3,r4,800c138 <__muldf3+0x340>
 800bed4:	200890ba 	slli	r4,r4,2
 800bed8:	00c20074 	movhi	r3,2049
 800bedc:	18efbb04 	addi	r3,r3,-16660
 800bee0:	20c9883a 	add	r4,r4,r3
 800bee4:	20c00017 	ldw	r3,0(r4)
 800bee8:	1800683a 	jmp	r3
 800beec:	0800c138 	rdprs	zero,at,772
 800bef0:	0800bf4c 	andi	zero,at,765
 800bef4:	0800bf4c 	andi	zero,at,765
 800bef8:	0800bf48 	cmpgei	zero,at,765
 800befc:	0800c114 	ori	zero,at,772
 800bf00:	0800c114 	ori	zero,at,772
 800bf04:	0800c0fc 	xorhi	zero,at,771
 800bf08:	0800bf48 	cmpgei	zero,at,765
 800bf0c:	0800c114 	ori	zero,at,772
 800bf10:	0800c0fc 	xorhi	zero,at,771
 800bf14:	0800c114 	ori	zero,at,772
 800bf18:	0800bf48 	cmpgei	zero,at,765
 800bf1c:	0800c124 	muli	zero,at,772
 800bf20:	0800c124 	muli	zero,at,772
 800bf24:	0800c124 	muli	zero,at,772
 800bf28:	0800c340 	call	800c34 <__alt_mem_onchip_memory2_0+0x800c34>
 800bf2c:	2404b03a 	or	r2,r4,r16
 800bf30:	10006f1e 	bne	r2,zero,800c0f0 <__muldf3+0x2f8>
 800bf34:	04c00204 	movi	r19,8
 800bf38:	0021883a 	mov	r16,zero
 800bf3c:	0029883a 	mov	r20,zero
 800bf40:	07000084 	movi	fp,2
 800bf44:	003fcb06 	br	800be74 <__alt_data_end+0xff00be74>
 800bf48:	502d883a 	mov	r22,r10
 800bf4c:	00800084 	movi	r2,2
 800bf50:	28805726 	beq	r5,r2,800c0b0 <__muldf3+0x2b8>
 800bf54:	008000c4 	movi	r2,3
 800bf58:	28816626 	beq	r5,r2,800c4f4 <__muldf3+0x6fc>
 800bf5c:	00800044 	movi	r2,1
 800bf60:	2881411e 	bne	r5,r2,800c468 <__muldf3+0x670>
 800bf64:	b02b883a 	mov	r21,r22
 800bf68:	0005883a 	mov	r2,zero
 800bf6c:	000b883a 	mov	r5,zero
 800bf70:	0029883a 	mov	r20,zero
 800bf74:	1004953a 	slli	r2,r2,20
 800bf78:	a8c03fcc 	andi	r3,r21,255
 800bf7c:	04400434 	movhi	r17,16
 800bf80:	8c7fffc4 	addi	r17,r17,-1
 800bf84:	180697fa 	slli	r3,r3,31
 800bf88:	2c4a703a 	and	r5,r5,r17
 800bf8c:	288ab03a 	or	r5,r5,r2
 800bf90:	28c6b03a 	or	r3,r5,r3
 800bf94:	a005883a 	mov	r2,r20
 800bf98:	dfc00c17 	ldw	ra,48(sp)
 800bf9c:	df000b17 	ldw	fp,44(sp)
 800bfa0:	ddc00a17 	ldw	r23,40(sp)
 800bfa4:	dd800917 	ldw	r22,36(sp)
 800bfa8:	dd400817 	ldw	r21,32(sp)
 800bfac:	dd000717 	ldw	r20,28(sp)
 800bfb0:	dcc00617 	ldw	r19,24(sp)
 800bfb4:	dc800517 	ldw	r18,20(sp)
 800bfb8:	dc400417 	ldw	r17,16(sp)
 800bfbc:	dc000317 	ldw	r16,12(sp)
 800bfc0:	dec00d04 	addi	sp,sp,52
 800bfc4:	f800283a 	ret
 800bfc8:	2404b03a 	or	r2,r4,r16
 800bfcc:	2027883a 	mov	r19,r4
 800bfd0:	10004226 	beq	r2,zero,800c0dc <__muldf3+0x2e4>
 800bfd4:	8000fc26 	beq	r16,zero,800c3c8 <__muldf3+0x5d0>
 800bfd8:	8009883a 	mov	r4,r16
 800bfdc:	d9800215 	stw	r6,8(sp)
 800bfe0:	d9c00015 	stw	r7,0(sp)
 800bfe4:	da400115 	stw	r9,4(sp)
 800bfe8:	800d0100 	call	800d010 <__clzsi2>
 800bfec:	d9800217 	ldw	r6,8(sp)
 800bff0:	d9c00017 	ldw	r7,0(sp)
 800bff4:	da400117 	ldw	r9,4(sp)
 800bff8:	113ffd44 	addi	r4,r2,-11
 800bffc:	00c00704 	movi	r3,28
 800c000:	1900ed16 	blt	r3,r4,800c3b8 <__muldf3+0x5c0>
 800c004:	00c00744 	movi	r3,29
 800c008:	147ffe04 	addi	r17,r2,-8
 800c00c:	1907c83a 	sub	r3,r3,r4
 800c010:	8460983a 	sll	r16,r16,r17
 800c014:	98c6d83a 	srl	r3,r19,r3
 800c018:	9c68983a 	sll	r20,r19,r17
 800c01c:	1c20b03a 	or	r16,r3,r16
 800c020:	1080fcc4 	addi	r2,r2,1011
 800c024:	00a5c83a 	sub	r18,zero,r2
 800c028:	0027883a 	mov	r19,zero
 800c02c:	0039883a 	mov	fp,zero
 800c030:	003f9006 	br	800be74 <__alt_data_end+0xff00be74>
 800c034:	3446b03a 	or	r3,r6,r17
 800c038:	1800261e 	bne	r3,zero,800c0d4 <__muldf3+0x2dc>
 800c03c:	0023883a 	mov	r17,zero
 800c040:	0011883a 	mov	r8,zero
 800c044:	01400084 	movi	r5,2
 800c048:	003f9c06 	br	800bebc <__alt_data_end+0xff00bebc>
 800c04c:	3446b03a 	or	r3,r6,r17
 800c050:	18001c26 	beq	r3,zero,800c0c4 <__muldf3+0x2cc>
 800c054:	8800ce26 	beq	r17,zero,800c390 <__muldf3+0x598>
 800c058:	8809883a 	mov	r4,r17
 800c05c:	d9800215 	stw	r6,8(sp)
 800c060:	da400115 	stw	r9,4(sp)
 800c064:	da800015 	stw	r10,0(sp)
 800c068:	800d0100 	call	800d010 <__clzsi2>
 800c06c:	d9800217 	ldw	r6,8(sp)
 800c070:	da400117 	ldw	r9,4(sp)
 800c074:	da800017 	ldw	r10,0(sp)
 800c078:	113ffd44 	addi	r4,r2,-11
 800c07c:	00c00704 	movi	r3,28
 800c080:	1900bf16 	blt	r3,r4,800c380 <__muldf3+0x588>
 800c084:	00c00744 	movi	r3,29
 800c088:	123ffe04 	addi	r8,r2,-8
 800c08c:	1907c83a 	sub	r3,r3,r4
 800c090:	8a22983a 	sll	r17,r17,r8
 800c094:	30c6d83a 	srl	r3,r6,r3
 800c098:	3210983a 	sll	r8,r6,r8
 800c09c:	1c62b03a 	or	r17,r3,r17
 800c0a0:	1080fcc4 	addi	r2,r2,1011
 800c0a4:	0085c83a 	sub	r2,zero,r2
 800c0a8:	000b883a 	mov	r5,zero
 800c0ac:	003f8306 	br	800bebc <__alt_data_end+0xff00bebc>
 800c0b0:	b02b883a 	mov	r21,r22
 800c0b4:	0081ffc4 	movi	r2,2047
 800c0b8:	000b883a 	mov	r5,zero
 800c0bc:	0029883a 	mov	r20,zero
 800c0c0:	003fac06 	br	800bf74 <__alt_data_end+0xff00bf74>
 800c0c4:	0023883a 	mov	r17,zero
 800c0c8:	0011883a 	mov	r8,zero
 800c0cc:	01400044 	movi	r5,1
 800c0d0:	003f7a06 	br	800bebc <__alt_data_end+0xff00bebc>
 800c0d4:	014000c4 	movi	r5,3
 800c0d8:	003f7806 	br	800bebc <__alt_data_end+0xff00bebc>
 800c0dc:	04c00104 	movi	r19,4
 800c0e0:	0021883a 	mov	r16,zero
 800c0e4:	0029883a 	mov	r20,zero
 800c0e8:	07000044 	movi	fp,1
 800c0ec:	003f6106 	br	800be74 <__alt_data_end+0xff00be74>
 800c0f0:	04c00304 	movi	r19,12
 800c0f4:	070000c4 	movi	fp,3
 800c0f8:	003f5e06 	br	800be74 <__alt_data_end+0xff00be74>
 800c0fc:	01400434 	movhi	r5,16
 800c100:	002b883a 	mov	r21,zero
 800c104:	297fffc4 	addi	r5,r5,-1
 800c108:	053fffc4 	movi	r20,-1
 800c10c:	0081ffc4 	movi	r2,2047
 800c110:	003f9806 	br	800bf74 <__alt_data_end+0xff00bf74>
 800c114:	8023883a 	mov	r17,r16
 800c118:	a011883a 	mov	r8,r20
 800c11c:	e00b883a 	mov	r5,fp
 800c120:	003f8a06 	br	800bf4c <__alt_data_end+0xff00bf4c>
 800c124:	8023883a 	mov	r17,r16
 800c128:	a011883a 	mov	r8,r20
 800c12c:	482d883a 	mov	r22,r9
 800c130:	e00b883a 	mov	r5,fp
 800c134:	003f8506 	br	800bf4c <__alt_data_end+0xff00bf4c>
 800c138:	a00ad43a 	srli	r5,r20,16
 800c13c:	401ad43a 	srli	r13,r8,16
 800c140:	a53fffcc 	andi	r20,r20,65535
 800c144:	423fffcc 	andi	r8,r8,65535
 800c148:	4519383a 	mul	r12,r8,r20
 800c14c:	4147383a 	mul	r3,r8,r5
 800c150:	6d09383a 	mul	r4,r13,r20
 800c154:	600cd43a 	srli	r6,r12,16
 800c158:	2b5d383a 	mul	r14,r5,r13
 800c15c:	20c9883a 	add	r4,r4,r3
 800c160:	310d883a 	add	r6,r6,r4
 800c164:	30c0022e 	bgeu	r6,r3,800c170 <__muldf3+0x378>
 800c168:	00c00074 	movhi	r3,1
 800c16c:	70dd883a 	add	r14,r14,r3
 800c170:	8826d43a 	srli	r19,r17,16
 800c174:	8bffffcc 	andi	r15,r17,65535
 800c178:	7d23383a 	mul	r17,r15,r20
 800c17c:	7949383a 	mul	r4,r15,r5
 800c180:	9d29383a 	mul	r20,r19,r20
 800c184:	8814d43a 	srli	r10,r17,16
 800c188:	3012943a 	slli	r9,r6,16
 800c18c:	a129883a 	add	r20,r20,r4
 800c190:	633fffcc 	andi	r12,r12,65535
 800c194:	5515883a 	add	r10,r10,r20
 800c198:	3006d43a 	srli	r3,r6,16
 800c19c:	4b13883a 	add	r9,r9,r12
 800c1a0:	2ccb383a 	mul	r5,r5,r19
 800c1a4:	5100022e 	bgeu	r10,r4,800c1b0 <__muldf3+0x3b8>
 800c1a8:	01000074 	movhi	r4,1
 800c1ac:	290b883a 	add	r5,r5,r4
 800c1b0:	802ad43a 	srli	r21,r16,16
 800c1b4:	843fffcc 	andi	r16,r16,65535
 800c1b8:	440d383a 	mul	r6,r8,r16
 800c1bc:	4565383a 	mul	r18,r8,r21
 800c1c0:	8349383a 	mul	r4,r16,r13
 800c1c4:	500e943a 	slli	r7,r10,16
 800c1c8:	3010d43a 	srli	r8,r6,16
 800c1cc:	5028d43a 	srli	r20,r10,16
 800c1d0:	2489883a 	add	r4,r4,r18
 800c1d4:	8abfffcc 	andi	r10,r17,65535
 800c1d8:	3a95883a 	add	r10,r7,r10
 800c1dc:	4119883a 	add	r12,r8,r4
 800c1e0:	a169883a 	add	r20,r20,r5
 800c1e4:	1a87883a 	add	r3,r3,r10
 800c1e8:	6d5b383a 	mul	r13,r13,r21
 800c1ec:	6480022e 	bgeu	r12,r18,800c1f8 <__muldf3+0x400>
 800c1f0:	01000074 	movhi	r4,1
 800c1f4:	691b883a 	add	r13,r13,r4
 800c1f8:	7c25383a 	mul	r18,r15,r16
 800c1fc:	7d4b383a 	mul	r5,r15,r21
 800c200:	84cf383a 	mul	r7,r16,r19
 800c204:	901ed43a 	srli	r15,r18,16
 800c208:	6008d43a 	srli	r4,r12,16
 800c20c:	6010943a 	slli	r8,r12,16
 800c210:	394f883a 	add	r7,r7,r5
 800c214:	333fffcc 	andi	r12,r6,65535
 800c218:	79df883a 	add	r15,r15,r7
 800c21c:	235b883a 	add	r13,r4,r13
 800c220:	9d63383a 	mul	r17,r19,r21
 800c224:	4309883a 	add	r4,r8,r12
 800c228:	7940022e 	bgeu	r15,r5,800c234 <__muldf3+0x43c>
 800c22c:	01400074 	movhi	r5,1
 800c230:	8963883a 	add	r17,r17,r5
 800c234:	780a943a 	slli	r5,r15,16
 800c238:	91bfffcc 	andi	r6,r18,65535
 800c23c:	70c7883a 	add	r3,r14,r3
 800c240:	298d883a 	add	r6,r5,r6
 800c244:	1a8f803a 	cmpltu	r7,r3,r10
 800c248:	350b883a 	add	r5,r6,r20
 800c24c:	20c7883a 	add	r3,r4,r3
 800c250:	3955883a 	add	r10,r7,r5
 800c254:	1909803a 	cmpltu	r4,r3,r4
 800c258:	6a91883a 	add	r8,r13,r10
 800c25c:	780cd43a 	srli	r6,r15,16
 800c260:	2219883a 	add	r12,r4,r8
 800c264:	2d0b803a 	cmpltu	r5,r5,r20
 800c268:	51cf803a 	cmpltu	r7,r10,r7
 800c26c:	29ceb03a 	or	r7,r5,r7
 800c270:	4351803a 	cmpltu	r8,r8,r13
 800c274:	610b803a 	cmpltu	r5,r12,r4
 800c278:	4148b03a 	or	r4,r8,r5
 800c27c:	398f883a 	add	r7,r7,r6
 800c280:	3909883a 	add	r4,r7,r4
 800c284:	1810927a 	slli	r8,r3,9
 800c288:	2449883a 	add	r4,r4,r17
 800c28c:	2008927a 	slli	r4,r4,9
 800c290:	6022d5fa 	srli	r17,r12,23
 800c294:	1806d5fa 	srli	r3,r3,23
 800c298:	4252b03a 	or	r9,r8,r9
 800c29c:	600a927a 	slli	r5,r12,9
 800c2a0:	4810c03a 	cmpne	r8,r9,zero
 800c2a4:	2462b03a 	or	r17,r4,r17
 800c2a8:	40c6b03a 	or	r3,r8,r3
 800c2ac:	8900402c 	andhi	r4,r17,256
 800c2b0:	1950b03a 	or	r8,r3,r5
 800c2b4:	20000726 	beq	r4,zero,800c2d4 <__muldf3+0x4dc>
 800c2b8:	4006d07a 	srli	r3,r8,1
 800c2bc:	880497fa 	slli	r2,r17,31
 800c2c0:	4200004c 	andi	r8,r8,1
 800c2c4:	8822d07a 	srli	r17,r17,1
 800c2c8:	1a10b03a 	or	r8,r3,r8
 800c2cc:	1210b03a 	or	r8,r2,r8
 800c2d0:	5805883a 	mov	r2,r11
 800c2d4:	1140ffc4 	addi	r5,r2,1023
 800c2d8:	0140440e 	bge	zero,r5,800c3ec <__muldf3+0x5f4>
 800c2dc:	40c001cc 	andi	r3,r8,7
 800c2e0:	18000726 	beq	r3,zero,800c300 <__muldf3+0x508>
 800c2e4:	40c003cc 	andi	r3,r8,15
 800c2e8:	01000104 	movi	r4,4
 800c2ec:	19000426 	beq	r3,r4,800c300 <__muldf3+0x508>
 800c2f0:	4107883a 	add	r3,r8,r4
 800c2f4:	1a11803a 	cmpltu	r8,r3,r8
 800c2f8:	8a23883a 	add	r17,r17,r8
 800c2fc:	1811883a 	mov	r8,r3
 800c300:	88c0402c 	andhi	r3,r17,256
 800c304:	18000426 	beq	r3,zero,800c318 <__muldf3+0x520>
 800c308:	11410004 	addi	r5,r2,1024
 800c30c:	00bfc034 	movhi	r2,65280
 800c310:	10bfffc4 	addi	r2,r2,-1
 800c314:	88a2703a 	and	r17,r17,r2
 800c318:	0081ff84 	movi	r2,2046
 800c31c:	117f6416 	blt	r2,r5,800c0b0 <__alt_data_end+0xff00c0b0>
 800c320:	8828977a 	slli	r20,r17,29
 800c324:	4010d0fa 	srli	r8,r8,3
 800c328:	8822927a 	slli	r17,r17,9
 800c32c:	2881ffcc 	andi	r2,r5,2047
 800c330:	a228b03a 	or	r20,r20,r8
 800c334:	880ad33a 	srli	r5,r17,12
 800c338:	b02b883a 	mov	r21,r22
 800c33c:	003f0d06 	br	800bf74 <__alt_data_end+0xff00bf74>
 800c340:	8080022c 	andhi	r2,r16,8
 800c344:	10000926 	beq	r2,zero,800c36c <__muldf3+0x574>
 800c348:	8880022c 	andhi	r2,r17,8
 800c34c:	1000071e 	bne	r2,zero,800c36c <__muldf3+0x574>
 800c350:	00800434 	movhi	r2,16
 800c354:	89400234 	orhi	r5,r17,8
 800c358:	10bfffc4 	addi	r2,r2,-1
 800c35c:	b82b883a 	mov	r21,r23
 800c360:	288a703a 	and	r5,r5,r2
 800c364:	4029883a 	mov	r20,r8
 800c368:	003f6806 	br	800c10c <__alt_data_end+0xff00c10c>
 800c36c:	00800434 	movhi	r2,16
 800c370:	81400234 	orhi	r5,r16,8
 800c374:	10bfffc4 	addi	r2,r2,-1
 800c378:	288a703a 	and	r5,r5,r2
 800c37c:	003f6306 	br	800c10c <__alt_data_end+0xff00c10c>
 800c380:	147ff604 	addi	r17,r2,-40
 800c384:	3462983a 	sll	r17,r6,r17
 800c388:	0011883a 	mov	r8,zero
 800c38c:	003f4406 	br	800c0a0 <__alt_data_end+0xff00c0a0>
 800c390:	3009883a 	mov	r4,r6
 800c394:	d9800215 	stw	r6,8(sp)
 800c398:	da400115 	stw	r9,4(sp)
 800c39c:	da800015 	stw	r10,0(sp)
 800c3a0:	800d0100 	call	800d010 <__clzsi2>
 800c3a4:	10800804 	addi	r2,r2,32
 800c3a8:	da800017 	ldw	r10,0(sp)
 800c3ac:	da400117 	ldw	r9,4(sp)
 800c3b0:	d9800217 	ldw	r6,8(sp)
 800c3b4:	003f3006 	br	800c078 <__alt_data_end+0xff00c078>
 800c3b8:	143ff604 	addi	r16,r2,-40
 800c3bc:	9c20983a 	sll	r16,r19,r16
 800c3c0:	0029883a 	mov	r20,zero
 800c3c4:	003f1606 	br	800c020 <__alt_data_end+0xff00c020>
 800c3c8:	d9800215 	stw	r6,8(sp)
 800c3cc:	d9c00015 	stw	r7,0(sp)
 800c3d0:	da400115 	stw	r9,4(sp)
 800c3d4:	800d0100 	call	800d010 <__clzsi2>
 800c3d8:	10800804 	addi	r2,r2,32
 800c3dc:	da400117 	ldw	r9,4(sp)
 800c3e0:	d9c00017 	ldw	r7,0(sp)
 800c3e4:	d9800217 	ldw	r6,8(sp)
 800c3e8:	003f0306 	br	800bff8 <__alt_data_end+0xff00bff8>
 800c3ec:	00c00044 	movi	r3,1
 800c3f0:	1947c83a 	sub	r3,r3,r5
 800c3f4:	00800e04 	movi	r2,56
 800c3f8:	10feda16 	blt	r2,r3,800bf64 <__alt_data_end+0xff00bf64>
 800c3fc:	008007c4 	movi	r2,31
 800c400:	10c01b16 	blt	r2,r3,800c470 <__muldf3+0x678>
 800c404:	00800804 	movi	r2,32
 800c408:	10c5c83a 	sub	r2,r2,r3
 800c40c:	888a983a 	sll	r5,r17,r2
 800c410:	40c8d83a 	srl	r4,r8,r3
 800c414:	4084983a 	sll	r2,r8,r2
 800c418:	88e2d83a 	srl	r17,r17,r3
 800c41c:	2906b03a 	or	r3,r5,r4
 800c420:	1004c03a 	cmpne	r2,r2,zero
 800c424:	1886b03a 	or	r3,r3,r2
 800c428:	188001cc 	andi	r2,r3,7
 800c42c:	10000726 	beq	r2,zero,800c44c <__muldf3+0x654>
 800c430:	188003cc 	andi	r2,r3,15
 800c434:	01000104 	movi	r4,4
 800c438:	11000426 	beq	r2,r4,800c44c <__muldf3+0x654>
 800c43c:	1805883a 	mov	r2,r3
 800c440:	10c00104 	addi	r3,r2,4
 800c444:	1885803a 	cmpltu	r2,r3,r2
 800c448:	88a3883a 	add	r17,r17,r2
 800c44c:	8880202c 	andhi	r2,r17,128
 800c450:	10001c26 	beq	r2,zero,800c4c4 <__muldf3+0x6cc>
 800c454:	b02b883a 	mov	r21,r22
 800c458:	00800044 	movi	r2,1
 800c45c:	000b883a 	mov	r5,zero
 800c460:	0029883a 	mov	r20,zero
 800c464:	003ec306 	br	800bf74 <__alt_data_end+0xff00bf74>
 800c468:	5805883a 	mov	r2,r11
 800c46c:	003f9906 	br	800c2d4 <__alt_data_end+0xff00c2d4>
 800c470:	00bff844 	movi	r2,-31
 800c474:	1145c83a 	sub	r2,r2,r5
 800c478:	8888d83a 	srl	r4,r17,r2
 800c47c:	00800804 	movi	r2,32
 800c480:	18801a26 	beq	r3,r2,800c4ec <__muldf3+0x6f4>
 800c484:	00801004 	movi	r2,64
 800c488:	10c5c83a 	sub	r2,r2,r3
 800c48c:	8884983a 	sll	r2,r17,r2
 800c490:	1204b03a 	or	r2,r2,r8
 800c494:	1004c03a 	cmpne	r2,r2,zero
 800c498:	2084b03a 	or	r2,r4,r2
 800c49c:	144001cc 	andi	r17,r2,7
 800c4a0:	88000d1e 	bne	r17,zero,800c4d8 <__muldf3+0x6e0>
 800c4a4:	000b883a 	mov	r5,zero
 800c4a8:	1028d0fa 	srli	r20,r2,3
 800c4ac:	b02b883a 	mov	r21,r22
 800c4b0:	0005883a 	mov	r2,zero
 800c4b4:	a468b03a 	or	r20,r20,r17
 800c4b8:	003eae06 	br	800bf74 <__alt_data_end+0xff00bf74>
 800c4bc:	1007883a 	mov	r3,r2
 800c4c0:	0023883a 	mov	r17,zero
 800c4c4:	880a927a 	slli	r5,r17,9
 800c4c8:	1805883a 	mov	r2,r3
 800c4cc:	8822977a 	slli	r17,r17,29
 800c4d0:	280ad33a 	srli	r5,r5,12
 800c4d4:	003ff406 	br	800c4a8 <__alt_data_end+0xff00c4a8>
 800c4d8:	10c003cc 	andi	r3,r2,15
 800c4dc:	01000104 	movi	r4,4
 800c4e0:	193ff626 	beq	r3,r4,800c4bc <__alt_data_end+0xff00c4bc>
 800c4e4:	0023883a 	mov	r17,zero
 800c4e8:	003fd506 	br	800c440 <__alt_data_end+0xff00c440>
 800c4ec:	0005883a 	mov	r2,zero
 800c4f0:	003fe706 	br	800c490 <__alt_data_end+0xff00c490>
 800c4f4:	00800434 	movhi	r2,16
 800c4f8:	89400234 	orhi	r5,r17,8
 800c4fc:	10bfffc4 	addi	r2,r2,-1
 800c500:	b02b883a 	mov	r21,r22
 800c504:	288a703a 	and	r5,r5,r2
 800c508:	4029883a 	mov	r20,r8
 800c50c:	003eff06 	br	800c10c <__alt_data_end+0xff00c10c>

0800c510 <__subdf3>:
 800c510:	02000434 	movhi	r8,16
 800c514:	423fffc4 	addi	r8,r8,-1
 800c518:	defffb04 	addi	sp,sp,-20
 800c51c:	2a14703a 	and	r10,r5,r8
 800c520:	3812d53a 	srli	r9,r7,20
 800c524:	3a10703a 	and	r8,r7,r8
 800c528:	2006d77a 	srli	r3,r4,29
 800c52c:	3004d77a 	srli	r2,r6,29
 800c530:	dc000015 	stw	r16,0(sp)
 800c534:	501490fa 	slli	r10,r10,3
 800c538:	2820d53a 	srli	r16,r5,20
 800c53c:	401090fa 	slli	r8,r8,3
 800c540:	dc800215 	stw	r18,8(sp)
 800c544:	dc400115 	stw	r17,4(sp)
 800c548:	dfc00415 	stw	ra,16(sp)
 800c54c:	202290fa 	slli	r17,r4,3
 800c550:	dcc00315 	stw	r19,12(sp)
 800c554:	4a41ffcc 	andi	r9,r9,2047
 800c558:	0101ffc4 	movi	r4,2047
 800c55c:	2824d7fa 	srli	r18,r5,31
 800c560:	8401ffcc 	andi	r16,r16,2047
 800c564:	50c6b03a 	or	r3,r10,r3
 800c568:	380ed7fa 	srli	r7,r7,31
 800c56c:	408ab03a 	or	r5,r8,r2
 800c570:	300c90fa 	slli	r6,r6,3
 800c574:	49009626 	beq	r9,r4,800c7d0 <__subdf3+0x2c0>
 800c578:	39c0005c 	xori	r7,r7,1
 800c57c:	8245c83a 	sub	r2,r16,r9
 800c580:	3c807426 	beq	r7,r18,800c754 <__subdf3+0x244>
 800c584:	0080af0e 	bge	zero,r2,800c844 <__subdf3+0x334>
 800c588:	48002a1e 	bne	r9,zero,800c634 <__subdf3+0x124>
 800c58c:	2988b03a 	or	r4,r5,r6
 800c590:	20009a1e 	bne	r4,zero,800c7fc <__subdf3+0x2ec>
 800c594:	888001cc 	andi	r2,r17,7
 800c598:	10000726 	beq	r2,zero,800c5b8 <__subdf3+0xa8>
 800c59c:	888003cc 	andi	r2,r17,15
 800c5a0:	01000104 	movi	r4,4
 800c5a4:	11000426 	beq	r2,r4,800c5b8 <__subdf3+0xa8>
 800c5a8:	890b883a 	add	r5,r17,r4
 800c5ac:	2c63803a 	cmpltu	r17,r5,r17
 800c5b0:	1c47883a 	add	r3,r3,r17
 800c5b4:	2823883a 	mov	r17,r5
 800c5b8:	1880202c 	andhi	r2,r3,128
 800c5bc:	10005926 	beq	r2,zero,800c724 <__subdf3+0x214>
 800c5c0:	84000044 	addi	r16,r16,1
 800c5c4:	0081ffc4 	movi	r2,2047
 800c5c8:	8080be26 	beq	r16,r2,800c8c4 <__subdf3+0x3b4>
 800c5cc:	017fe034 	movhi	r5,65408
 800c5d0:	297fffc4 	addi	r5,r5,-1
 800c5d4:	1946703a 	and	r3,r3,r5
 800c5d8:	1804977a 	slli	r2,r3,29
 800c5dc:	1806927a 	slli	r3,r3,9
 800c5e0:	8822d0fa 	srli	r17,r17,3
 800c5e4:	8401ffcc 	andi	r16,r16,2047
 800c5e8:	180ad33a 	srli	r5,r3,12
 800c5ec:	9100004c 	andi	r4,r18,1
 800c5f0:	1444b03a 	or	r2,r2,r17
 800c5f4:	80c1ffcc 	andi	r3,r16,2047
 800c5f8:	1820953a 	slli	r16,r3,20
 800c5fc:	20c03fcc 	andi	r3,r4,255
 800c600:	180897fa 	slli	r4,r3,31
 800c604:	00c00434 	movhi	r3,16
 800c608:	18ffffc4 	addi	r3,r3,-1
 800c60c:	28c6703a 	and	r3,r5,r3
 800c610:	1c06b03a 	or	r3,r3,r16
 800c614:	1906b03a 	or	r3,r3,r4
 800c618:	dfc00417 	ldw	ra,16(sp)
 800c61c:	dcc00317 	ldw	r19,12(sp)
 800c620:	dc800217 	ldw	r18,8(sp)
 800c624:	dc400117 	ldw	r17,4(sp)
 800c628:	dc000017 	ldw	r16,0(sp)
 800c62c:	dec00504 	addi	sp,sp,20
 800c630:	f800283a 	ret
 800c634:	0101ffc4 	movi	r4,2047
 800c638:	813fd626 	beq	r16,r4,800c594 <__alt_data_end+0xff00c594>
 800c63c:	29402034 	orhi	r5,r5,128
 800c640:	01000e04 	movi	r4,56
 800c644:	2080a316 	blt	r4,r2,800c8d4 <__subdf3+0x3c4>
 800c648:	010007c4 	movi	r4,31
 800c64c:	2080c616 	blt	r4,r2,800c968 <__subdf3+0x458>
 800c650:	01000804 	movi	r4,32
 800c654:	2089c83a 	sub	r4,r4,r2
 800c658:	2910983a 	sll	r8,r5,r4
 800c65c:	308ed83a 	srl	r7,r6,r2
 800c660:	3108983a 	sll	r4,r6,r4
 800c664:	2884d83a 	srl	r2,r5,r2
 800c668:	41ccb03a 	or	r6,r8,r7
 800c66c:	2008c03a 	cmpne	r4,r4,zero
 800c670:	310cb03a 	or	r6,r6,r4
 800c674:	898dc83a 	sub	r6,r17,r6
 800c678:	89a3803a 	cmpltu	r17,r17,r6
 800c67c:	1887c83a 	sub	r3,r3,r2
 800c680:	1c47c83a 	sub	r3,r3,r17
 800c684:	3023883a 	mov	r17,r6
 800c688:	1880202c 	andhi	r2,r3,128
 800c68c:	10002326 	beq	r2,zero,800c71c <__subdf3+0x20c>
 800c690:	04c02034 	movhi	r19,128
 800c694:	9cffffc4 	addi	r19,r19,-1
 800c698:	1ce6703a 	and	r19,r3,r19
 800c69c:	98007a26 	beq	r19,zero,800c888 <__subdf3+0x378>
 800c6a0:	9809883a 	mov	r4,r19
 800c6a4:	800d0100 	call	800d010 <__clzsi2>
 800c6a8:	113ffe04 	addi	r4,r2,-8
 800c6ac:	00c007c4 	movi	r3,31
 800c6b0:	19007b16 	blt	r3,r4,800c8a0 <__subdf3+0x390>
 800c6b4:	00800804 	movi	r2,32
 800c6b8:	1105c83a 	sub	r2,r2,r4
 800c6bc:	8884d83a 	srl	r2,r17,r2
 800c6c0:	9906983a 	sll	r3,r19,r4
 800c6c4:	8922983a 	sll	r17,r17,r4
 800c6c8:	10c4b03a 	or	r2,r2,r3
 800c6cc:	24007816 	blt	r4,r16,800c8b0 <__subdf3+0x3a0>
 800c6d0:	2421c83a 	sub	r16,r4,r16
 800c6d4:	80c00044 	addi	r3,r16,1
 800c6d8:	010007c4 	movi	r4,31
 800c6dc:	20c09516 	blt	r4,r3,800c934 <__subdf3+0x424>
 800c6e0:	01400804 	movi	r5,32
 800c6e4:	28cbc83a 	sub	r5,r5,r3
 800c6e8:	88c8d83a 	srl	r4,r17,r3
 800c6ec:	8962983a 	sll	r17,r17,r5
 800c6f0:	114a983a 	sll	r5,r2,r5
 800c6f4:	10c6d83a 	srl	r3,r2,r3
 800c6f8:	8804c03a 	cmpne	r2,r17,zero
 800c6fc:	290ab03a 	or	r5,r5,r4
 800c700:	28a2b03a 	or	r17,r5,r2
 800c704:	0021883a 	mov	r16,zero
 800c708:	003fa206 	br	800c594 <__alt_data_end+0xff00c594>
 800c70c:	2090b03a 	or	r8,r4,r2
 800c710:	40018e26 	beq	r8,zero,800cd4c <__subdf3+0x83c>
 800c714:	1007883a 	mov	r3,r2
 800c718:	2023883a 	mov	r17,r4
 800c71c:	888001cc 	andi	r2,r17,7
 800c720:	103f9e1e 	bne	r2,zero,800c59c <__alt_data_end+0xff00c59c>
 800c724:	1804977a 	slli	r2,r3,29
 800c728:	8822d0fa 	srli	r17,r17,3
 800c72c:	1810d0fa 	srli	r8,r3,3
 800c730:	9100004c 	andi	r4,r18,1
 800c734:	1444b03a 	or	r2,r2,r17
 800c738:	00c1ffc4 	movi	r3,2047
 800c73c:	80c02826 	beq	r16,r3,800c7e0 <__subdf3+0x2d0>
 800c740:	01400434 	movhi	r5,16
 800c744:	297fffc4 	addi	r5,r5,-1
 800c748:	80e0703a 	and	r16,r16,r3
 800c74c:	414a703a 	and	r5,r8,r5
 800c750:	003fa806 	br	800c5f4 <__alt_data_end+0xff00c5f4>
 800c754:	0080630e 	bge	zero,r2,800c8e4 <__subdf3+0x3d4>
 800c758:	48003026 	beq	r9,zero,800c81c <__subdf3+0x30c>
 800c75c:	0101ffc4 	movi	r4,2047
 800c760:	813f8c26 	beq	r16,r4,800c594 <__alt_data_end+0xff00c594>
 800c764:	29402034 	orhi	r5,r5,128
 800c768:	01000e04 	movi	r4,56
 800c76c:	2080a90e 	bge	r4,r2,800ca14 <__subdf3+0x504>
 800c770:	298cb03a 	or	r6,r5,r6
 800c774:	3012c03a 	cmpne	r9,r6,zero
 800c778:	0005883a 	mov	r2,zero
 800c77c:	4c53883a 	add	r9,r9,r17
 800c780:	4c63803a 	cmpltu	r17,r9,r17
 800c784:	10c7883a 	add	r3,r2,r3
 800c788:	88c7883a 	add	r3,r17,r3
 800c78c:	4823883a 	mov	r17,r9
 800c790:	1880202c 	andhi	r2,r3,128
 800c794:	1000d026 	beq	r2,zero,800cad8 <__subdf3+0x5c8>
 800c798:	84000044 	addi	r16,r16,1
 800c79c:	0081ffc4 	movi	r2,2047
 800c7a0:	8080fe26 	beq	r16,r2,800cb9c <__subdf3+0x68c>
 800c7a4:	00bfe034 	movhi	r2,65408
 800c7a8:	10bfffc4 	addi	r2,r2,-1
 800c7ac:	1886703a 	and	r3,r3,r2
 800c7b0:	880ad07a 	srli	r5,r17,1
 800c7b4:	180497fa 	slli	r2,r3,31
 800c7b8:	8900004c 	andi	r4,r17,1
 800c7bc:	2922b03a 	or	r17,r5,r4
 800c7c0:	1806d07a 	srli	r3,r3,1
 800c7c4:	1462b03a 	or	r17,r2,r17
 800c7c8:	3825883a 	mov	r18,r7
 800c7cc:	003f7106 	br	800c594 <__alt_data_end+0xff00c594>
 800c7d0:	2984b03a 	or	r2,r5,r6
 800c7d4:	103f6826 	beq	r2,zero,800c578 <__alt_data_end+0xff00c578>
 800c7d8:	39c03fcc 	andi	r7,r7,255
 800c7dc:	003f6706 	br	800c57c <__alt_data_end+0xff00c57c>
 800c7e0:	4086b03a 	or	r3,r8,r2
 800c7e4:	18015226 	beq	r3,zero,800cd30 <__subdf3+0x820>
 800c7e8:	00c00434 	movhi	r3,16
 800c7ec:	41400234 	orhi	r5,r8,8
 800c7f0:	18ffffc4 	addi	r3,r3,-1
 800c7f4:	28ca703a 	and	r5,r5,r3
 800c7f8:	003f7e06 	br	800c5f4 <__alt_data_end+0xff00c5f4>
 800c7fc:	10bfffc4 	addi	r2,r2,-1
 800c800:	1000491e 	bne	r2,zero,800c928 <__subdf3+0x418>
 800c804:	898fc83a 	sub	r7,r17,r6
 800c808:	89e3803a 	cmpltu	r17,r17,r7
 800c80c:	1947c83a 	sub	r3,r3,r5
 800c810:	1c47c83a 	sub	r3,r3,r17
 800c814:	3823883a 	mov	r17,r7
 800c818:	003f9b06 	br	800c688 <__alt_data_end+0xff00c688>
 800c81c:	2988b03a 	or	r4,r5,r6
 800c820:	203f5c26 	beq	r4,zero,800c594 <__alt_data_end+0xff00c594>
 800c824:	10bfffc4 	addi	r2,r2,-1
 800c828:	1000931e 	bne	r2,zero,800ca78 <__subdf3+0x568>
 800c82c:	898d883a 	add	r6,r17,r6
 800c830:	3463803a 	cmpltu	r17,r6,r17
 800c834:	1947883a 	add	r3,r3,r5
 800c838:	88c7883a 	add	r3,r17,r3
 800c83c:	3023883a 	mov	r17,r6
 800c840:	003fd306 	br	800c790 <__alt_data_end+0xff00c790>
 800c844:	1000541e 	bne	r2,zero,800c998 <__subdf3+0x488>
 800c848:	80800044 	addi	r2,r16,1
 800c84c:	1081ffcc 	andi	r2,r2,2047
 800c850:	01000044 	movi	r4,1
 800c854:	2080a20e 	bge	r4,r2,800cae0 <__subdf3+0x5d0>
 800c858:	8989c83a 	sub	r4,r17,r6
 800c85c:	8905803a 	cmpltu	r2,r17,r4
 800c860:	1967c83a 	sub	r19,r3,r5
 800c864:	98a7c83a 	sub	r19,r19,r2
 800c868:	9880202c 	andhi	r2,r19,128
 800c86c:	10006326 	beq	r2,zero,800c9fc <__subdf3+0x4ec>
 800c870:	3463c83a 	sub	r17,r6,r17
 800c874:	28c7c83a 	sub	r3,r5,r3
 800c878:	344d803a 	cmpltu	r6,r6,r17
 800c87c:	19a7c83a 	sub	r19,r3,r6
 800c880:	3825883a 	mov	r18,r7
 800c884:	983f861e 	bne	r19,zero,800c6a0 <__alt_data_end+0xff00c6a0>
 800c888:	8809883a 	mov	r4,r17
 800c88c:	800d0100 	call	800d010 <__clzsi2>
 800c890:	10800804 	addi	r2,r2,32
 800c894:	113ffe04 	addi	r4,r2,-8
 800c898:	00c007c4 	movi	r3,31
 800c89c:	193f850e 	bge	r3,r4,800c6b4 <__alt_data_end+0xff00c6b4>
 800c8a0:	10bff604 	addi	r2,r2,-40
 800c8a4:	8884983a 	sll	r2,r17,r2
 800c8a8:	0023883a 	mov	r17,zero
 800c8ac:	243f880e 	bge	r4,r16,800c6d0 <__alt_data_end+0xff00c6d0>
 800c8b0:	00ffe034 	movhi	r3,65408
 800c8b4:	18ffffc4 	addi	r3,r3,-1
 800c8b8:	8121c83a 	sub	r16,r16,r4
 800c8bc:	10c6703a 	and	r3,r2,r3
 800c8c0:	003f3406 	br	800c594 <__alt_data_end+0xff00c594>
 800c8c4:	9100004c 	andi	r4,r18,1
 800c8c8:	000b883a 	mov	r5,zero
 800c8cc:	0005883a 	mov	r2,zero
 800c8d0:	003f4806 	br	800c5f4 <__alt_data_end+0xff00c5f4>
 800c8d4:	298cb03a 	or	r6,r5,r6
 800c8d8:	300cc03a 	cmpne	r6,r6,zero
 800c8dc:	0005883a 	mov	r2,zero
 800c8e0:	003f6406 	br	800c674 <__alt_data_end+0xff00c674>
 800c8e4:	10009a1e 	bne	r2,zero,800cb50 <__subdf3+0x640>
 800c8e8:	82400044 	addi	r9,r16,1
 800c8ec:	4881ffcc 	andi	r2,r9,2047
 800c8f0:	02800044 	movi	r10,1
 800c8f4:	5080670e 	bge	r10,r2,800ca94 <__subdf3+0x584>
 800c8f8:	0081ffc4 	movi	r2,2047
 800c8fc:	4880af26 	beq	r9,r2,800cbbc <__subdf3+0x6ac>
 800c900:	898d883a 	add	r6,r17,r6
 800c904:	1945883a 	add	r2,r3,r5
 800c908:	3447803a 	cmpltu	r3,r6,r17
 800c90c:	1887883a 	add	r3,r3,r2
 800c910:	182297fa 	slli	r17,r3,31
 800c914:	300cd07a 	srli	r6,r6,1
 800c918:	1806d07a 	srli	r3,r3,1
 800c91c:	4821883a 	mov	r16,r9
 800c920:	89a2b03a 	or	r17,r17,r6
 800c924:	003f1b06 	br	800c594 <__alt_data_end+0xff00c594>
 800c928:	0101ffc4 	movi	r4,2047
 800c92c:	813f441e 	bne	r16,r4,800c640 <__alt_data_end+0xff00c640>
 800c930:	003f1806 	br	800c594 <__alt_data_end+0xff00c594>
 800c934:	843ff844 	addi	r16,r16,-31
 800c938:	01400804 	movi	r5,32
 800c93c:	1408d83a 	srl	r4,r2,r16
 800c940:	19405026 	beq	r3,r5,800ca84 <__subdf3+0x574>
 800c944:	01401004 	movi	r5,64
 800c948:	28c7c83a 	sub	r3,r5,r3
 800c94c:	10c4983a 	sll	r2,r2,r3
 800c950:	88a2b03a 	or	r17,r17,r2
 800c954:	8822c03a 	cmpne	r17,r17,zero
 800c958:	2462b03a 	or	r17,r4,r17
 800c95c:	0007883a 	mov	r3,zero
 800c960:	0021883a 	mov	r16,zero
 800c964:	003f6d06 	br	800c71c <__alt_data_end+0xff00c71c>
 800c968:	11fff804 	addi	r7,r2,-32
 800c96c:	01000804 	movi	r4,32
 800c970:	29ced83a 	srl	r7,r5,r7
 800c974:	11004526 	beq	r2,r4,800ca8c <__subdf3+0x57c>
 800c978:	01001004 	movi	r4,64
 800c97c:	2089c83a 	sub	r4,r4,r2
 800c980:	2904983a 	sll	r2,r5,r4
 800c984:	118cb03a 	or	r6,r2,r6
 800c988:	300cc03a 	cmpne	r6,r6,zero
 800c98c:	398cb03a 	or	r6,r7,r6
 800c990:	0005883a 	mov	r2,zero
 800c994:	003f3706 	br	800c674 <__alt_data_end+0xff00c674>
 800c998:	80002a26 	beq	r16,zero,800ca44 <__subdf3+0x534>
 800c99c:	0101ffc4 	movi	r4,2047
 800c9a0:	49006626 	beq	r9,r4,800cb3c <__subdf3+0x62c>
 800c9a4:	0085c83a 	sub	r2,zero,r2
 800c9a8:	18c02034 	orhi	r3,r3,128
 800c9ac:	01000e04 	movi	r4,56
 800c9b0:	20807e16 	blt	r4,r2,800cbac <__subdf3+0x69c>
 800c9b4:	010007c4 	movi	r4,31
 800c9b8:	2080e716 	blt	r4,r2,800cd58 <__subdf3+0x848>
 800c9bc:	01000804 	movi	r4,32
 800c9c0:	2089c83a 	sub	r4,r4,r2
 800c9c4:	1914983a 	sll	r10,r3,r4
 800c9c8:	8890d83a 	srl	r8,r17,r2
 800c9cc:	8908983a 	sll	r4,r17,r4
 800c9d0:	1884d83a 	srl	r2,r3,r2
 800c9d4:	5222b03a 	or	r17,r10,r8
 800c9d8:	2006c03a 	cmpne	r3,r4,zero
 800c9dc:	88e2b03a 	or	r17,r17,r3
 800c9e0:	3463c83a 	sub	r17,r6,r17
 800c9e4:	2885c83a 	sub	r2,r5,r2
 800c9e8:	344d803a 	cmpltu	r6,r6,r17
 800c9ec:	1187c83a 	sub	r3,r2,r6
 800c9f0:	4821883a 	mov	r16,r9
 800c9f4:	3825883a 	mov	r18,r7
 800c9f8:	003f2306 	br	800c688 <__alt_data_end+0xff00c688>
 800c9fc:	24d0b03a 	or	r8,r4,r19
 800ca00:	40001b1e 	bne	r8,zero,800ca70 <__subdf3+0x560>
 800ca04:	0005883a 	mov	r2,zero
 800ca08:	0009883a 	mov	r4,zero
 800ca0c:	0021883a 	mov	r16,zero
 800ca10:	003f4906 	br	800c738 <__alt_data_end+0xff00c738>
 800ca14:	010007c4 	movi	r4,31
 800ca18:	20803a16 	blt	r4,r2,800cb04 <__subdf3+0x5f4>
 800ca1c:	01000804 	movi	r4,32
 800ca20:	2089c83a 	sub	r4,r4,r2
 800ca24:	2912983a 	sll	r9,r5,r4
 800ca28:	3090d83a 	srl	r8,r6,r2
 800ca2c:	3108983a 	sll	r4,r6,r4
 800ca30:	2884d83a 	srl	r2,r5,r2
 800ca34:	4a12b03a 	or	r9,r9,r8
 800ca38:	2008c03a 	cmpne	r4,r4,zero
 800ca3c:	4912b03a 	or	r9,r9,r4
 800ca40:	003f4e06 	br	800c77c <__alt_data_end+0xff00c77c>
 800ca44:	1c48b03a 	or	r4,r3,r17
 800ca48:	20003c26 	beq	r4,zero,800cb3c <__subdf3+0x62c>
 800ca4c:	0084303a 	nor	r2,zero,r2
 800ca50:	1000381e 	bne	r2,zero,800cb34 <__subdf3+0x624>
 800ca54:	3463c83a 	sub	r17,r6,r17
 800ca58:	28c5c83a 	sub	r2,r5,r3
 800ca5c:	344d803a 	cmpltu	r6,r6,r17
 800ca60:	1187c83a 	sub	r3,r2,r6
 800ca64:	4821883a 	mov	r16,r9
 800ca68:	3825883a 	mov	r18,r7
 800ca6c:	003f0606 	br	800c688 <__alt_data_end+0xff00c688>
 800ca70:	2023883a 	mov	r17,r4
 800ca74:	003f0906 	br	800c69c <__alt_data_end+0xff00c69c>
 800ca78:	0101ffc4 	movi	r4,2047
 800ca7c:	813f3a1e 	bne	r16,r4,800c768 <__alt_data_end+0xff00c768>
 800ca80:	003ec406 	br	800c594 <__alt_data_end+0xff00c594>
 800ca84:	0005883a 	mov	r2,zero
 800ca88:	003fb106 	br	800c950 <__alt_data_end+0xff00c950>
 800ca8c:	0005883a 	mov	r2,zero
 800ca90:	003fbc06 	br	800c984 <__alt_data_end+0xff00c984>
 800ca94:	1c44b03a 	or	r2,r3,r17
 800ca98:	80008e1e 	bne	r16,zero,800ccd4 <__subdf3+0x7c4>
 800ca9c:	1000c826 	beq	r2,zero,800cdc0 <__subdf3+0x8b0>
 800caa0:	2984b03a 	or	r2,r5,r6
 800caa4:	103ebb26 	beq	r2,zero,800c594 <__alt_data_end+0xff00c594>
 800caa8:	8989883a 	add	r4,r17,r6
 800caac:	1945883a 	add	r2,r3,r5
 800cab0:	2447803a 	cmpltu	r3,r4,r17
 800cab4:	1887883a 	add	r3,r3,r2
 800cab8:	1880202c 	andhi	r2,r3,128
 800cabc:	2023883a 	mov	r17,r4
 800cac0:	103f1626 	beq	r2,zero,800c71c <__alt_data_end+0xff00c71c>
 800cac4:	00bfe034 	movhi	r2,65408
 800cac8:	10bfffc4 	addi	r2,r2,-1
 800cacc:	5021883a 	mov	r16,r10
 800cad0:	1886703a 	and	r3,r3,r2
 800cad4:	003eaf06 	br	800c594 <__alt_data_end+0xff00c594>
 800cad8:	3825883a 	mov	r18,r7
 800cadc:	003f0f06 	br	800c71c <__alt_data_end+0xff00c71c>
 800cae0:	1c44b03a 	or	r2,r3,r17
 800cae4:	8000251e 	bne	r16,zero,800cb7c <__subdf3+0x66c>
 800cae8:	1000661e 	bne	r2,zero,800cc84 <__subdf3+0x774>
 800caec:	2990b03a 	or	r8,r5,r6
 800caf0:	40009626 	beq	r8,zero,800cd4c <__subdf3+0x83c>
 800caf4:	2807883a 	mov	r3,r5
 800caf8:	3023883a 	mov	r17,r6
 800cafc:	3825883a 	mov	r18,r7
 800cb00:	003ea406 	br	800c594 <__alt_data_end+0xff00c594>
 800cb04:	127ff804 	addi	r9,r2,-32
 800cb08:	01000804 	movi	r4,32
 800cb0c:	2a52d83a 	srl	r9,r5,r9
 800cb10:	11008c26 	beq	r2,r4,800cd44 <__subdf3+0x834>
 800cb14:	01001004 	movi	r4,64
 800cb18:	2085c83a 	sub	r2,r4,r2
 800cb1c:	2884983a 	sll	r2,r5,r2
 800cb20:	118cb03a 	or	r6,r2,r6
 800cb24:	300cc03a 	cmpne	r6,r6,zero
 800cb28:	4992b03a 	or	r9,r9,r6
 800cb2c:	0005883a 	mov	r2,zero
 800cb30:	003f1206 	br	800c77c <__alt_data_end+0xff00c77c>
 800cb34:	0101ffc4 	movi	r4,2047
 800cb38:	493f9c1e 	bne	r9,r4,800c9ac <__alt_data_end+0xff00c9ac>
 800cb3c:	2807883a 	mov	r3,r5
 800cb40:	3023883a 	mov	r17,r6
 800cb44:	4821883a 	mov	r16,r9
 800cb48:	3825883a 	mov	r18,r7
 800cb4c:	003e9106 	br	800c594 <__alt_data_end+0xff00c594>
 800cb50:	80001f1e 	bne	r16,zero,800cbd0 <__subdf3+0x6c0>
 800cb54:	1c48b03a 	or	r4,r3,r17
 800cb58:	20005a26 	beq	r4,zero,800ccc4 <__subdf3+0x7b4>
 800cb5c:	0084303a 	nor	r2,zero,r2
 800cb60:	1000561e 	bne	r2,zero,800ccbc <__subdf3+0x7ac>
 800cb64:	89a3883a 	add	r17,r17,r6
 800cb68:	1945883a 	add	r2,r3,r5
 800cb6c:	898d803a 	cmpltu	r6,r17,r6
 800cb70:	3087883a 	add	r3,r6,r2
 800cb74:	4821883a 	mov	r16,r9
 800cb78:	003f0506 	br	800c790 <__alt_data_end+0xff00c790>
 800cb7c:	10002b1e 	bne	r2,zero,800cc2c <__subdf3+0x71c>
 800cb80:	2984b03a 	or	r2,r5,r6
 800cb84:	10008026 	beq	r2,zero,800cd88 <__subdf3+0x878>
 800cb88:	2807883a 	mov	r3,r5
 800cb8c:	3023883a 	mov	r17,r6
 800cb90:	3825883a 	mov	r18,r7
 800cb94:	0401ffc4 	movi	r16,2047
 800cb98:	003e7e06 	br	800c594 <__alt_data_end+0xff00c594>
 800cb9c:	3809883a 	mov	r4,r7
 800cba0:	0011883a 	mov	r8,zero
 800cba4:	0005883a 	mov	r2,zero
 800cba8:	003ee306 	br	800c738 <__alt_data_end+0xff00c738>
 800cbac:	1c62b03a 	or	r17,r3,r17
 800cbb0:	8822c03a 	cmpne	r17,r17,zero
 800cbb4:	0005883a 	mov	r2,zero
 800cbb8:	003f8906 	br	800c9e0 <__alt_data_end+0xff00c9e0>
 800cbbc:	3809883a 	mov	r4,r7
 800cbc0:	4821883a 	mov	r16,r9
 800cbc4:	0011883a 	mov	r8,zero
 800cbc8:	0005883a 	mov	r2,zero
 800cbcc:	003eda06 	br	800c738 <__alt_data_end+0xff00c738>
 800cbd0:	0101ffc4 	movi	r4,2047
 800cbd4:	49003b26 	beq	r9,r4,800ccc4 <__subdf3+0x7b4>
 800cbd8:	0085c83a 	sub	r2,zero,r2
 800cbdc:	18c02034 	orhi	r3,r3,128
 800cbe0:	01000e04 	movi	r4,56
 800cbe4:	20806e16 	blt	r4,r2,800cda0 <__subdf3+0x890>
 800cbe8:	010007c4 	movi	r4,31
 800cbec:	20807716 	blt	r4,r2,800cdcc <__subdf3+0x8bc>
 800cbf0:	01000804 	movi	r4,32
 800cbf4:	2089c83a 	sub	r4,r4,r2
 800cbf8:	1914983a 	sll	r10,r3,r4
 800cbfc:	8890d83a 	srl	r8,r17,r2
 800cc00:	8908983a 	sll	r4,r17,r4
 800cc04:	1884d83a 	srl	r2,r3,r2
 800cc08:	5222b03a 	or	r17,r10,r8
 800cc0c:	2006c03a 	cmpne	r3,r4,zero
 800cc10:	88e2b03a 	or	r17,r17,r3
 800cc14:	89a3883a 	add	r17,r17,r6
 800cc18:	1145883a 	add	r2,r2,r5
 800cc1c:	898d803a 	cmpltu	r6,r17,r6
 800cc20:	3087883a 	add	r3,r6,r2
 800cc24:	4821883a 	mov	r16,r9
 800cc28:	003ed906 	br	800c790 <__alt_data_end+0xff00c790>
 800cc2c:	2984b03a 	or	r2,r5,r6
 800cc30:	10004226 	beq	r2,zero,800cd3c <__subdf3+0x82c>
 800cc34:	1808d0fa 	srli	r4,r3,3
 800cc38:	8822d0fa 	srli	r17,r17,3
 800cc3c:	1806977a 	slli	r3,r3,29
 800cc40:	2080022c 	andhi	r2,r4,8
 800cc44:	1c62b03a 	or	r17,r3,r17
 800cc48:	10000826 	beq	r2,zero,800cc6c <__subdf3+0x75c>
 800cc4c:	2812d0fa 	srli	r9,r5,3
 800cc50:	4880022c 	andhi	r2,r9,8
 800cc54:	1000051e 	bne	r2,zero,800cc6c <__subdf3+0x75c>
 800cc58:	300cd0fa 	srli	r6,r6,3
 800cc5c:	2804977a 	slli	r2,r5,29
 800cc60:	4809883a 	mov	r4,r9
 800cc64:	3825883a 	mov	r18,r7
 800cc68:	11a2b03a 	or	r17,r2,r6
 800cc6c:	8806d77a 	srli	r3,r17,29
 800cc70:	200890fa 	slli	r4,r4,3
 800cc74:	882290fa 	slli	r17,r17,3
 800cc78:	0401ffc4 	movi	r16,2047
 800cc7c:	1906b03a 	or	r3,r3,r4
 800cc80:	003e4406 	br	800c594 <__alt_data_end+0xff00c594>
 800cc84:	2984b03a 	or	r2,r5,r6
 800cc88:	103e4226 	beq	r2,zero,800c594 <__alt_data_end+0xff00c594>
 800cc8c:	8989c83a 	sub	r4,r17,r6
 800cc90:	8911803a 	cmpltu	r8,r17,r4
 800cc94:	1945c83a 	sub	r2,r3,r5
 800cc98:	1205c83a 	sub	r2,r2,r8
 800cc9c:	1200202c 	andhi	r8,r2,128
 800cca0:	403e9a26 	beq	r8,zero,800c70c <__alt_data_end+0xff00c70c>
 800cca4:	3463c83a 	sub	r17,r6,r17
 800cca8:	28c5c83a 	sub	r2,r5,r3
 800ccac:	344d803a 	cmpltu	r6,r6,r17
 800ccb0:	1187c83a 	sub	r3,r2,r6
 800ccb4:	3825883a 	mov	r18,r7
 800ccb8:	003e3606 	br	800c594 <__alt_data_end+0xff00c594>
 800ccbc:	0101ffc4 	movi	r4,2047
 800ccc0:	493fc71e 	bne	r9,r4,800cbe0 <__alt_data_end+0xff00cbe0>
 800ccc4:	2807883a 	mov	r3,r5
 800ccc8:	3023883a 	mov	r17,r6
 800cccc:	4821883a 	mov	r16,r9
 800ccd0:	003e3006 	br	800c594 <__alt_data_end+0xff00c594>
 800ccd4:	10003626 	beq	r2,zero,800cdb0 <__subdf3+0x8a0>
 800ccd8:	2984b03a 	or	r2,r5,r6
 800ccdc:	10001726 	beq	r2,zero,800cd3c <__subdf3+0x82c>
 800cce0:	1808d0fa 	srli	r4,r3,3
 800cce4:	8822d0fa 	srli	r17,r17,3
 800cce8:	1806977a 	slli	r3,r3,29
 800ccec:	2080022c 	andhi	r2,r4,8
 800ccf0:	1c62b03a 	or	r17,r3,r17
 800ccf4:	10000726 	beq	r2,zero,800cd14 <__subdf3+0x804>
 800ccf8:	2812d0fa 	srli	r9,r5,3
 800ccfc:	4880022c 	andhi	r2,r9,8
 800cd00:	1000041e 	bne	r2,zero,800cd14 <__subdf3+0x804>
 800cd04:	300cd0fa 	srli	r6,r6,3
 800cd08:	2804977a 	slli	r2,r5,29
 800cd0c:	4809883a 	mov	r4,r9
 800cd10:	11a2b03a 	or	r17,r2,r6
 800cd14:	8806d77a 	srli	r3,r17,29
 800cd18:	200890fa 	slli	r4,r4,3
 800cd1c:	882290fa 	slli	r17,r17,3
 800cd20:	3825883a 	mov	r18,r7
 800cd24:	1906b03a 	or	r3,r3,r4
 800cd28:	0401ffc4 	movi	r16,2047
 800cd2c:	003e1906 	br	800c594 <__alt_data_end+0xff00c594>
 800cd30:	000b883a 	mov	r5,zero
 800cd34:	0005883a 	mov	r2,zero
 800cd38:	003e2e06 	br	800c5f4 <__alt_data_end+0xff00c5f4>
 800cd3c:	0401ffc4 	movi	r16,2047
 800cd40:	003e1406 	br	800c594 <__alt_data_end+0xff00c594>
 800cd44:	0005883a 	mov	r2,zero
 800cd48:	003f7506 	br	800cb20 <__alt_data_end+0xff00cb20>
 800cd4c:	0005883a 	mov	r2,zero
 800cd50:	0009883a 	mov	r4,zero
 800cd54:	003e7806 	br	800c738 <__alt_data_end+0xff00c738>
 800cd58:	123ff804 	addi	r8,r2,-32
 800cd5c:	01000804 	movi	r4,32
 800cd60:	1a10d83a 	srl	r8,r3,r8
 800cd64:	11002526 	beq	r2,r4,800cdfc <__subdf3+0x8ec>
 800cd68:	01001004 	movi	r4,64
 800cd6c:	2085c83a 	sub	r2,r4,r2
 800cd70:	1884983a 	sll	r2,r3,r2
 800cd74:	1444b03a 	or	r2,r2,r17
 800cd78:	1004c03a 	cmpne	r2,r2,zero
 800cd7c:	40a2b03a 	or	r17,r8,r2
 800cd80:	0005883a 	mov	r2,zero
 800cd84:	003f1606 	br	800c9e0 <__alt_data_end+0xff00c9e0>
 800cd88:	02000434 	movhi	r8,16
 800cd8c:	0009883a 	mov	r4,zero
 800cd90:	423fffc4 	addi	r8,r8,-1
 800cd94:	00bfffc4 	movi	r2,-1
 800cd98:	0401ffc4 	movi	r16,2047
 800cd9c:	003e6606 	br	800c738 <__alt_data_end+0xff00c738>
 800cda0:	1c62b03a 	or	r17,r3,r17
 800cda4:	8822c03a 	cmpne	r17,r17,zero
 800cda8:	0005883a 	mov	r2,zero
 800cdac:	003f9906 	br	800cc14 <__alt_data_end+0xff00cc14>
 800cdb0:	2807883a 	mov	r3,r5
 800cdb4:	3023883a 	mov	r17,r6
 800cdb8:	0401ffc4 	movi	r16,2047
 800cdbc:	003df506 	br	800c594 <__alt_data_end+0xff00c594>
 800cdc0:	2807883a 	mov	r3,r5
 800cdc4:	3023883a 	mov	r17,r6
 800cdc8:	003df206 	br	800c594 <__alt_data_end+0xff00c594>
 800cdcc:	123ff804 	addi	r8,r2,-32
 800cdd0:	01000804 	movi	r4,32
 800cdd4:	1a10d83a 	srl	r8,r3,r8
 800cdd8:	11000a26 	beq	r2,r4,800ce04 <__subdf3+0x8f4>
 800cddc:	01001004 	movi	r4,64
 800cde0:	2085c83a 	sub	r2,r4,r2
 800cde4:	1884983a 	sll	r2,r3,r2
 800cde8:	1444b03a 	or	r2,r2,r17
 800cdec:	1004c03a 	cmpne	r2,r2,zero
 800cdf0:	40a2b03a 	or	r17,r8,r2
 800cdf4:	0005883a 	mov	r2,zero
 800cdf8:	003f8606 	br	800cc14 <__alt_data_end+0xff00cc14>
 800cdfc:	0005883a 	mov	r2,zero
 800ce00:	003fdc06 	br	800cd74 <__alt_data_end+0xff00cd74>
 800ce04:	0005883a 	mov	r2,zero
 800ce08:	003ff706 	br	800cde8 <__alt_data_end+0xff00cde8>

0800ce0c <__fixdfsi>:
 800ce0c:	280cd53a 	srli	r6,r5,20
 800ce10:	00c00434 	movhi	r3,16
 800ce14:	18ffffc4 	addi	r3,r3,-1
 800ce18:	3181ffcc 	andi	r6,r6,2047
 800ce1c:	01c0ff84 	movi	r7,1022
 800ce20:	28c6703a 	and	r3,r5,r3
 800ce24:	280ad7fa 	srli	r5,r5,31
 800ce28:	3980120e 	bge	r7,r6,800ce74 <__fixdfsi+0x68>
 800ce2c:	00810744 	movi	r2,1053
 800ce30:	11800c16 	blt	r2,r6,800ce64 <__fixdfsi+0x58>
 800ce34:	00810cc4 	movi	r2,1075
 800ce38:	1185c83a 	sub	r2,r2,r6
 800ce3c:	01c007c4 	movi	r7,31
 800ce40:	18c00434 	orhi	r3,r3,16
 800ce44:	38800d16 	blt	r7,r2,800ce7c <__fixdfsi+0x70>
 800ce48:	31befb44 	addi	r6,r6,-1043
 800ce4c:	2084d83a 	srl	r2,r4,r2
 800ce50:	1986983a 	sll	r3,r3,r6
 800ce54:	1884b03a 	or	r2,r3,r2
 800ce58:	28000726 	beq	r5,zero,800ce78 <__fixdfsi+0x6c>
 800ce5c:	0085c83a 	sub	r2,zero,r2
 800ce60:	f800283a 	ret
 800ce64:	00a00034 	movhi	r2,32768
 800ce68:	10bfffc4 	addi	r2,r2,-1
 800ce6c:	2885883a 	add	r2,r5,r2
 800ce70:	f800283a 	ret
 800ce74:	0005883a 	mov	r2,zero
 800ce78:	f800283a 	ret
 800ce7c:	008104c4 	movi	r2,1043
 800ce80:	1185c83a 	sub	r2,r2,r6
 800ce84:	1884d83a 	srl	r2,r3,r2
 800ce88:	003ff306 	br	800ce58 <__alt_data_end+0xff00ce58>

0800ce8c <__floatsidf>:
 800ce8c:	defffd04 	addi	sp,sp,-12
 800ce90:	dfc00215 	stw	ra,8(sp)
 800ce94:	dc400115 	stw	r17,4(sp)
 800ce98:	dc000015 	stw	r16,0(sp)
 800ce9c:	20002b26 	beq	r4,zero,800cf4c <__floatsidf+0xc0>
 800cea0:	2023883a 	mov	r17,r4
 800cea4:	2020d7fa 	srli	r16,r4,31
 800cea8:	20002d16 	blt	r4,zero,800cf60 <__floatsidf+0xd4>
 800ceac:	8809883a 	mov	r4,r17
 800ceb0:	800d0100 	call	800d010 <__clzsi2>
 800ceb4:	01410784 	movi	r5,1054
 800ceb8:	288bc83a 	sub	r5,r5,r2
 800cebc:	01010cc4 	movi	r4,1075
 800cec0:	2149c83a 	sub	r4,r4,r5
 800cec4:	00c007c4 	movi	r3,31
 800cec8:	1900160e 	bge	r3,r4,800cf24 <__floatsidf+0x98>
 800cecc:	00c104c4 	movi	r3,1043
 800ced0:	1947c83a 	sub	r3,r3,r5
 800ced4:	88c6983a 	sll	r3,r17,r3
 800ced8:	00800434 	movhi	r2,16
 800cedc:	10bfffc4 	addi	r2,r2,-1
 800cee0:	1886703a 	and	r3,r3,r2
 800cee4:	2941ffcc 	andi	r5,r5,2047
 800cee8:	800d883a 	mov	r6,r16
 800ceec:	0005883a 	mov	r2,zero
 800cef0:	280a953a 	slli	r5,r5,20
 800cef4:	31803fcc 	andi	r6,r6,255
 800cef8:	01000434 	movhi	r4,16
 800cefc:	300c97fa 	slli	r6,r6,31
 800cf00:	213fffc4 	addi	r4,r4,-1
 800cf04:	1906703a 	and	r3,r3,r4
 800cf08:	1946b03a 	or	r3,r3,r5
 800cf0c:	1986b03a 	or	r3,r3,r6
 800cf10:	dfc00217 	ldw	ra,8(sp)
 800cf14:	dc400117 	ldw	r17,4(sp)
 800cf18:	dc000017 	ldw	r16,0(sp)
 800cf1c:	dec00304 	addi	sp,sp,12
 800cf20:	f800283a 	ret
 800cf24:	00c002c4 	movi	r3,11
 800cf28:	1887c83a 	sub	r3,r3,r2
 800cf2c:	88c6d83a 	srl	r3,r17,r3
 800cf30:	8904983a 	sll	r2,r17,r4
 800cf34:	01000434 	movhi	r4,16
 800cf38:	213fffc4 	addi	r4,r4,-1
 800cf3c:	2941ffcc 	andi	r5,r5,2047
 800cf40:	1906703a 	and	r3,r3,r4
 800cf44:	800d883a 	mov	r6,r16
 800cf48:	003fe906 	br	800cef0 <__alt_data_end+0xff00cef0>
 800cf4c:	000d883a 	mov	r6,zero
 800cf50:	000b883a 	mov	r5,zero
 800cf54:	0007883a 	mov	r3,zero
 800cf58:	0005883a 	mov	r2,zero
 800cf5c:	003fe406 	br	800cef0 <__alt_data_end+0xff00cef0>
 800cf60:	0123c83a 	sub	r17,zero,r4
 800cf64:	003fd106 	br	800ceac <__alt_data_end+0xff00ceac>

0800cf68 <__floatunsidf>:
 800cf68:	defffe04 	addi	sp,sp,-8
 800cf6c:	dc000015 	stw	r16,0(sp)
 800cf70:	dfc00115 	stw	ra,4(sp)
 800cf74:	2021883a 	mov	r16,r4
 800cf78:	20002226 	beq	r4,zero,800d004 <__floatunsidf+0x9c>
 800cf7c:	800d0100 	call	800d010 <__clzsi2>
 800cf80:	01010784 	movi	r4,1054
 800cf84:	2089c83a 	sub	r4,r4,r2
 800cf88:	01810cc4 	movi	r6,1075
 800cf8c:	310dc83a 	sub	r6,r6,r4
 800cf90:	00c007c4 	movi	r3,31
 800cf94:	1980120e 	bge	r3,r6,800cfe0 <__floatunsidf+0x78>
 800cf98:	00c104c4 	movi	r3,1043
 800cf9c:	1907c83a 	sub	r3,r3,r4
 800cfa0:	80ca983a 	sll	r5,r16,r3
 800cfa4:	00800434 	movhi	r2,16
 800cfa8:	10bfffc4 	addi	r2,r2,-1
 800cfac:	2101ffcc 	andi	r4,r4,2047
 800cfb0:	0021883a 	mov	r16,zero
 800cfb4:	288a703a 	and	r5,r5,r2
 800cfb8:	2008953a 	slli	r4,r4,20
 800cfbc:	00c00434 	movhi	r3,16
 800cfc0:	18ffffc4 	addi	r3,r3,-1
 800cfc4:	28c6703a 	and	r3,r5,r3
 800cfc8:	8005883a 	mov	r2,r16
 800cfcc:	1906b03a 	or	r3,r3,r4
 800cfd0:	dfc00117 	ldw	ra,4(sp)
 800cfd4:	dc000017 	ldw	r16,0(sp)
 800cfd8:	dec00204 	addi	sp,sp,8
 800cfdc:	f800283a 	ret
 800cfe0:	00c002c4 	movi	r3,11
 800cfe4:	188bc83a 	sub	r5,r3,r2
 800cfe8:	814ad83a 	srl	r5,r16,r5
 800cfec:	00c00434 	movhi	r3,16
 800cff0:	18ffffc4 	addi	r3,r3,-1
 800cff4:	81a0983a 	sll	r16,r16,r6
 800cff8:	2101ffcc 	andi	r4,r4,2047
 800cffc:	28ca703a 	and	r5,r5,r3
 800d000:	003fed06 	br	800cfb8 <__alt_data_end+0xff00cfb8>
 800d004:	0009883a 	mov	r4,zero
 800d008:	000b883a 	mov	r5,zero
 800d00c:	003fea06 	br	800cfb8 <__alt_data_end+0xff00cfb8>

0800d010 <__clzsi2>:
 800d010:	00bfffd4 	movui	r2,65535
 800d014:	11000536 	bltu	r2,r4,800d02c <__clzsi2+0x1c>
 800d018:	00803fc4 	movi	r2,255
 800d01c:	11000f36 	bltu	r2,r4,800d05c <__clzsi2+0x4c>
 800d020:	00800804 	movi	r2,32
 800d024:	0007883a 	mov	r3,zero
 800d028:	00000506 	br	800d040 <__clzsi2+0x30>
 800d02c:	00804034 	movhi	r2,256
 800d030:	10bfffc4 	addi	r2,r2,-1
 800d034:	11000c2e 	bgeu	r2,r4,800d068 <__clzsi2+0x58>
 800d038:	00800204 	movi	r2,8
 800d03c:	00c00604 	movi	r3,24
 800d040:	20c8d83a 	srl	r4,r4,r3
 800d044:	00c20074 	movhi	r3,2049
 800d048:	18c6f804 	addi	r3,r3,7136
 800d04c:	1909883a 	add	r4,r3,r4
 800d050:	20c00003 	ldbu	r3,0(r4)
 800d054:	10c5c83a 	sub	r2,r2,r3
 800d058:	f800283a 	ret
 800d05c:	00800604 	movi	r2,24
 800d060:	00c00204 	movi	r3,8
 800d064:	003ff606 	br	800d040 <__alt_data_end+0xff00d040>
 800d068:	00800404 	movi	r2,16
 800d06c:	1007883a 	mov	r3,r2
 800d070:	003ff306 	br	800d040 <__alt_data_end+0xff00d040>

0800d074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d074:	defffe04 	addi	sp,sp,-8
 800d078:	dfc00115 	stw	ra,4(sp)
 800d07c:	df000015 	stw	fp,0(sp)
 800d080:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d084:	d0a00b17 	ldw	r2,-32724(gp)
 800d088:	10000326 	beq	r2,zero,800d098 <alt_get_errno+0x24>
 800d08c:	d0a00b17 	ldw	r2,-32724(gp)
 800d090:	103ee83a 	callr	r2
 800d094:	00000106 	br	800d09c <alt_get_errno+0x28>
 800d098:	d0a6e404 	addi	r2,gp,-25712
}
 800d09c:	e037883a 	mov	sp,fp
 800d0a0:	dfc00117 	ldw	ra,4(sp)
 800d0a4:	df000017 	ldw	fp,0(sp)
 800d0a8:	dec00204 	addi	sp,sp,8
 800d0ac:	f800283a 	ret

0800d0b0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800d0b0:	defffb04 	addi	sp,sp,-20
 800d0b4:	dfc00415 	stw	ra,16(sp)
 800d0b8:	df000315 	stw	fp,12(sp)
 800d0bc:	df000304 	addi	fp,sp,12
 800d0c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800d0c4:	e0bfff17 	ldw	r2,-4(fp)
 800d0c8:	10000616 	blt	r2,zero,800d0e4 <close+0x34>
 800d0cc:	e0bfff17 	ldw	r2,-4(fp)
 800d0d0:	10c00324 	muli	r3,r2,12
 800d0d4:	00820074 	movhi	r2,2049
 800d0d8:	10898304 	addi	r2,r2,9740
 800d0dc:	1885883a 	add	r2,r3,r2
 800d0e0:	00000106 	br	800d0e8 <close+0x38>
 800d0e4:	0005883a 	mov	r2,zero
 800d0e8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800d0ec:	e0bffd17 	ldw	r2,-12(fp)
 800d0f0:	10001926 	beq	r2,zero,800d158 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d0f4:	e0bffd17 	ldw	r2,-12(fp)
 800d0f8:	10800017 	ldw	r2,0(r2)
 800d0fc:	10800417 	ldw	r2,16(r2)
 800d100:	10000626 	beq	r2,zero,800d11c <close+0x6c>
 800d104:	e0bffd17 	ldw	r2,-12(fp)
 800d108:	10800017 	ldw	r2,0(r2)
 800d10c:	10800417 	ldw	r2,16(r2)
 800d110:	e13ffd17 	ldw	r4,-12(fp)
 800d114:	103ee83a 	callr	r2
 800d118:	00000106 	br	800d120 <close+0x70>
 800d11c:	0005883a 	mov	r2,zero
 800d120:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d124:	e13fff17 	ldw	r4,-4(fp)
 800d128:	800d8f00 	call	800d8f0 <alt_release_fd>
    if (rval < 0)
 800d12c:	e0bffe17 	ldw	r2,-8(fp)
 800d130:	1000070e 	bge	r2,zero,800d150 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800d134:	800d0740 	call	800d074 <alt_get_errno>
 800d138:	1007883a 	mov	r3,r2
 800d13c:	e0bffe17 	ldw	r2,-8(fp)
 800d140:	0085c83a 	sub	r2,zero,r2
 800d144:	18800015 	stw	r2,0(r3)
      return -1;
 800d148:	00bfffc4 	movi	r2,-1
 800d14c:	00000706 	br	800d16c <close+0xbc>
    }
    return 0;
 800d150:	0005883a 	mov	r2,zero
 800d154:	00000506 	br	800d16c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d158:	800d0740 	call	800d074 <alt_get_errno>
 800d15c:	1007883a 	mov	r3,r2
 800d160:	00801444 	movi	r2,81
 800d164:	18800015 	stw	r2,0(r3)
    return -1;
 800d168:	00bfffc4 	movi	r2,-1
  }
}
 800d16c:	e037883a 	mov	sp,fp
 800d170:	dfc00117 	ldw	ra,4(sp)
 800d174:	df000017 	ldw	fp,0(sp)
 800d178:	dec00204 	addi	sp,sp,8
 800d17c:	f800283a 	ret

0800d180 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d180:	defffc04 	addi	sp,sp,-16
 800d184:	df000315 	stw	fp,12(sp)
 800d188:	df000304 	addi	fp,sp,12
 800d18c:	e13ffd15 	stw	r4,-12(fp)
 800d190:	e17ffe15 	stw	r5,-8(fp)
 800d194:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d198:	e0bfff17 	ldw	r2,-4(fp)
}
 800d19c:	e037883a 	mov	sp,fp
 800d1a0:	df000017 	ldw	fp,0(sp)
 800d1a4:	dec00104 	addi	sp,sp,4
 800d1a8:	f800283a 	ret

0800d1ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d1ac:	defffe04 	addi	sp,sp,-8
 800d1b0:	dfc00115 	stw	ra,4(sp)
 800d1b4:	df000015 	stw	fp,0(sp)
 800d1b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d1bc:	d0a00b17 	ldw	r2,-32724(gp)
 800d1c0:	10000326 	beq	r2,zero,800d1d0 <alt_get_errno+0x24>
 800d1c4:	d0a00b17 	ldw	r2,-32724(gp)
 800d1c8:	103ee83a 	callr	r2
 800d1cc:	00000106 	br	800d1d4 <alt_get_errno+0x28>
 800d1d0:	d0a6e404 	addi	r2,gp,-25712
}
 800d1d4:	e037883a 	mov	sp,fp
 800d1d8:	dfc00117 	ldw	ra,4(sp)
 800d1dc:	df000017 	ldw	fp,0(sp)
 800d1e0:	dec00204 	addi	sp,sp,8
 800d1e4:	f800283a 	ret

0800d1e8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800d1e8:	defffb04 	addi	sp,sp,-20
 800d1ec:	dfc00415 	stw	ra,16(sp)
 800d1f0:	df000315 	stw	fp,12(sp)
 800d1f4:	df000304 	addi	fp,sp,12
 800d1f8:	e13ffe15 	stw	r4,-8(fp)
 800d1fc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d200:	e0bffe17 	ldw	r2,-8(fp)
 800d204:	10000616 	blt	r2,zero,800d220 <fstat+0x38>
 800d208:	e0bffe17 	ldw	r2,-8(fp)
 800d20c:	10c00324 	muli	r3,r2,12
 800d210:	00820074 	movhi	r2,2049
 800d214:	10898304 	addi	r2,r2,9740
 800d218:	1885883a 	add	r2,r3,r2
 800d21c:	00000106 	br	800d224 <fstat+0x3c>
 800d220:	0005883a 	mov	r2,zero
 800d224:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800d228:	e0bffd17 	ldw	r2,-12(fp)
 800d22c:	10001026 	beq	r2,zero,800d270 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800d230:	e0bffd17 	ldw	r2,-12(fp)
 800d234:	10800017 	ldw	r2,0(r2)
 800d238:	10800817 	ldw	r2,32(r2)
 800d23c:	10000726 	beq	r2,zero,800d25c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800d240:	e0bffd17 	ldw	r2,-12(fp)
 800d244:	10800017 	ldw	r2,0(r2)
 800d248:	10800817 	ldw	r2,32(r2)
 800d24c:	e17fff17 	ldw	r5,-4(fp)
 800d250:	e13ffd17 	ldw	r4,-12(fp)
 800d254:	103ee83a 	callr	r2
 800d258:	00000a06 	br	800d284 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800d25c:	e0bfff17 	ldw	r2,-4(fp)
 800d260:	00c80004 	movi	r3,8192
 800d264:	10c00115 	stw	r3,4(r2)
      return 0;
 800d268:	0005883a 	mov	r2,zero
 800d26c:	00000506 	br	800d284 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d270:	800d1ac0 	call	800d1ac <alt_get_errno>
 800d274:	1007883a 	mov	r3,r2
 800d278:	00801444 	movi	r2,81
 800d27c:	18800015 	stw	r2,0(r3)
    return -1;
 800d280:	00bfffc4 	movi	r2,-1
  }
}
 800d284:	e037883a 	mov	sp,fp
 800d288:	dfc00117 	ldw	ra,4(sp)
 800d28c:	df000017 	ldw	fp,0(sp)
 800d290:	dec00204 	addi	sp,sp,8
 800d294:	f800283a 	ret

0800d298 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 800d298:	defff004 	addi	sp,sp,-64
 800d29c:	df000f15 	stw	fp,60(sp)
 800d2a0:	df000f04 	addi	fp,sp,60
 800d2a4:	e13ffd15 	stw	r4,-12(fp)
 800d2a8:	e17ffe15 	stw	r5,-8(fp)
 800d2ac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 800d2b0:	00bffa84 	movi	r2,-22
 800d2b4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800d2b8:	e0bffd17 	ldw	r2,-12(fp)
 800d2bc:	10800828 	cmpgeui	r2,r2,32
 800d2c0:	1000501e 	bne	r2,zero,800d404 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d2c4:	0005303a 	rdctl	r2,status
 800d2c8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d2cc:	e0fff617 	ldw	r3,-40(fp)
 800d2d0:	00bfff84 	movi	r2,-2
 800d2d4:	1884703a 	and	r2,r3,r2
 800d2d8:	1001703a 	wrctl	status,r2
  
  return context;
 800d2dc:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 800d2e0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 800d2e4:	00820074 	movhi	r2,2049
 800d2e8:	1094ff04 	addi	r2,r2,21500
 800d2ec:	e0fffd17 	ldw	r3,-12(fp)
 800d2f0:	180690fa 	slli	r3,r3,3
 800d2f4:	10c5883a 	add	r2,r2,r3
 800d2f8:	e0ffff17 	ldw	r3,-4(fp)
 800d2fc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 800d300:	00820074 	movhi	r2,2049
 800d304:	1094ff04 	addi	r2,r2,21500
 800d308:	e0fffd17 	ldw	r3,-12(fp)
 800d30c:	180690fa 	slli	r3,r3,3
 800d310:	10c5883a 	add	r2,r2,r3
 800d314:	10800104 	addi	r2,r2,4
 800d318:	e0fffe17 	ldw	r3,-8(fp)
 800d31c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 800d320:	e0bfff17 	ldw	r2,-4(fp)
 800d324:	10001926 	beq	r2,zero,800d38c <alt_irq_register+0xf4>
 800d328:	e0bffd17 	ldw	r2,-12(fp)
 800d32c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d330:	0005303a 	rdctl	r2,status
 800d334:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d338:	e0fff717 	ldw	r3,-36(fp)
 800d33c:	00bfff84 	movi	r2,-2
 800d340:	1884703a 	and	r2,r3,r2
 800d344:	1001703a 	wrctl	status,r2
  
  return context;
 800d348:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d34c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 800d350:	00c00044 	movi	r3,1
 800d354:	e0bff217 	ldw	r2,-56(fp)
 800d358:	1884983a 	sll	r2,r3,r2
 800d35c:	1007883a 	mov	r3,r2
 800d360:	d0a6e517 	ldw	r2,-25708(gp)
 800d364:	1884b03a 	or	r2,r3,r2
 800d368:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d36c:	d0a6e517 	ldw	r2,-25708(gp)
 800d370:	100170fa 	wrctl	ienable,r2
 800d374:	e0bff817 	ldw	r2,-32(fp)
 800d378:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d37c:	e0bff917 	ldw	r2,-28(fp)
 800d380:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d384:	0005883a 	mov	r2,zero
 800d388:	00001906 	br	800d3f0 <alt_irq_register+0x158>
 800d38c:	e0bffd17 	ldw	r2,-12(fp)
 800d390:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d394:	0005303a 	rdctl	r2,status
 800d398:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d39c:	e0fffa17 	ldw	r3,-24(fp)
 800d3a0:	00bfff84 	movi	r2,-2
 800d3a4:	1884703a 	and	r2,r3,r2
 800d3a8:	1001703a 	wrctl	status,r2
  
  return context;
 800d3ac:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d3b0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 800d3b4:	00c00044 	movi	r3,1
 800d3b8:	e0bff417 	ldw	r2,-48(fp)
 800d3bc:	1884983a 	sll	r2,r3,r2
 800d3c0:	0084303a 	nor	r2,zero,r2
 800d3c4:	1007883a 	mov	r3,r2
 800d3c8:	d0a6e517 	ldw	r2,-25708(gp)
 800d3cc:	1884703a 	and	r2,r3,r2
 800d3d0:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d3d4:	d0a6e517 	ldw	r2,-25708(gp)
 800d3d8:	100170fa 	wrctl	ienable,r2
 800d3dc:	e0bffb17 	ldw	r2,-20(fp)
 800d3e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d3e4:	e0bffc17 	ldw	r2,-16(fp)
 800d3e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d3ec:	0005883a 	mov	r2,zero
 800d3f0:	e0bff115 	stw	r2,-60(fp)
 800d3f4:	e0bff317 	ldw	r2,-52(fp)
 800d3f8:	e0bff515 	stw	r2,-44(fp)
 800d3fc:	e0bff517 	ldw	r2,-44(fp)
 800d400:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 800d404:	e0bff117 	ldw	r2,-60(fp)
}
 800d408:	e037883a 	mov	sp,fp
 800d40c:	df000017 	ldw	fp,0(sp)
 800d410:	dec00104 	addi	sp,sp,4
 800d414:	f800283a 	ret

0800d418 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d418:	defffe04 	addi	sp,sp,-8
 800d41c:	dfc00115 	stw	ra,4(sp)
 800d420:	df000015 	stw	fp,0(sp)
 800d424:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d428:	d0a00b17 	ldw	r2,-32724(gp)
 800d42c:	10000326 	beq	r2,zero,800d43c <alt_get_errno+0x24>
 800d430:	d0a00b17 	ldw	r2,-32724(gp)
 800d434:	103ee83a 	callr	r2
 800d438:	00000106 	br	800d440 <alt_get_errno+0x28>
 800d43c:	d0a6e404 	addi	r2,gp,-25712
}
 800d440:	e037883a 	mov	sp,fp
 800d444:	dfc00117 	ldw	ra,4(sp)
 800d448:	df000017 	ldw	fp,0(sp)
 800d44c:	dec00204 	addi	sp,sp,8
 800d450:	f800283a 	ret

0800d454 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800d454:	deffed04 	addi	sp,sp,-76
 800d458:	dfc01215 	stw	ra,72(sp)
 800d45c:	df001115 	stw	fp,68(sp)
 800d460:	df001104 	addi	fp,sp,68
 800d464:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d468:	e0bfff17 	ldw	r2,-4(fp)
 800d46c:	10000616 	blt	r2,zero,800d488 <isatty+0x34>
 800d470:	e0bfff17 	ldw	r2,-4(fp)
 800d474:	10c00324 	muli	r3,r2,12
 800d478:	00820074 	movhi	r2,2049
 800d47c:	10898304 	addi	r2,r2,9740
 800d480:	1885883a 	add	r2,r3,r2
 800d484:	00000106 	br	800d48c <isatty+0x38>
 800d488:	0005883a 	mov	r2,zero
 800d48c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800d490:	e0bfef17 	ldw	r2,-68(fp)
 800d494:	10000e26 	beq	r2,zero,800d4d0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800d498:	e0bfef17 	ldw	r2,-68(fp)
 800d49c:	10800017 	ldw	r2,0(r2)
 800d4a0:	10800817 	ldw	r2,32(r2)
 800d4a4:	1000021e 	bne	r2,zero,800d4b0 <isatty+0x5c>
    {
      return 1;
 800d4a8:	00800044 	movi	r2,1
 800d4ac:	00000d06 	br	800d4e4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800d4b0:	e0bff004 	addi	r2,fp,-64
 800d4b4:	100b883a 	mov	r5,r2
 800d4b8:	e13fff17 	ldw	r4,-4(fp)
 800d4bc:	800d1e80 	call	800d1e8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800d4c0:	e0bff117 	ldw	r2,-60(fp)
 800d4c4:	10880020 	cmpeqi	r2,r2,8192
 800d4c8:	10803fcc 	andi	r2,r2,255
 800d4cc:	00000506 	br	800d4e4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d4d0:	800d4180 	call	800d418 <alt_get_errno>
 800d4d4:	1007883a 	mov	r3,r2
 800d4d8:	00801444 	movi	r2,81
 800d4dc:	18800015 	stw	r2,0(r3)
    return 0;
 800d4e0:	0005883a 	mov	r2,zero
  }
}
 800d4e4:	e037883a 	mov	sp,fp
 800d4e8:	dfc00117 	ldw	ra,4(sp)
 800d4ec:	df000017 	ldw	fp,0(sp)
 800d4f0:	dec00204 	addi	sp,sp,8
 800d4f4:	f800283a 	ret

0800d4f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800d4f8:	defffc04 	addi	sp,sp,-16
 800d4fc:	df000315 	stw	fp,12(sp)
 800d500:	df000304 	addi	fp,sp,12
 800d504:	e13ffd15 	stw	r4,-12(fp)
 800d508:	e17ffe15 	stw	r5,-8(fp)
 800d50c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800d510:	e0fffe17 	ldw	r3,-8(fp)
 800d514:	e0bffd17 	ldw	r2,-12(fp)
 800d518:	18800c26 	beq	r3,r2,800d54c <alt_load_section+0x54>
  {
    while( to != end )
 800d51c:	00000806 	br	800d540 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800d520:	e0bffe17 	ldw	r2,-8(fp)
 800d524:	10c00104 	addi	r3,r2,4
 800d528:	e0fffe15 	stw	r3,-8(fp)
 800d52c:	e0fffd17 	ldw	r3,-12(fp)
 800d530:	19000104 	addi	r4,r3,4
 800d534:	e13ffd15 	stw	r4,-12(fp)
 800d538:	18c00017 	ldw	r3,0(r3)
 800d53c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800d540:	e0fffe17 	ldw	r3,-8(fp)
 800d544:	e0bfff17 	ldw	r2,-4(fp)
 800d548:	18bff51e 	bne	r3,r2,800d520 <__alt_data_end+0xff00d520>
    {
      *to++ = *from++;
    }
  }
}
 800d54c:	0001883a 	nop
 800d550:	e037883a 	mov	sp,fp
 800d554:	df000017 	ldw	fp,0(sp)
 800d558:	dec00104 	addi	sp,sp,4
 800d55c:	f800283a 	ret

0800d560 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800d560:	defffe04 	addi	sp,sp,-8
 800d564:	dfc00115 	stw	ra,4(sp)
 800d568:	df000015 	stw	fp,0(sp)
 800d56c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800d570:	01820074 	movhi	r6,2049
 800d574:	318e1b04 	addi	r6,r6,14444
 800d578:	01420074 	movhi	r5,2049
 800d57c:	29475004 	addi	r5,r5,7488
 800d580:	01020074 	movhi	r4,2049
 800d584:	210e1b04 	addi	r4,r4,14444
 800d588:	800d4f80 	call	800d4f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800d58c:	01820034 	movhi	r6,2048
 800d590:	31809104 	addi	r6,r6,580
 800d594:	01420034 	movhi	r5,2048
 800d598:	29400804 	addi	r5,r5,32
 800d59c:	01020034 	movhi	r4,2048
 800d5a0:	21000804 	addi	r4,r4,32
 800d5a4:	800d4f80 	call	800d4f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800d5a8:	01820074 	movhi	r6,2049
 800d5ac:	31875004 	addi	r6,r6,7488
 800d5b0:	01420074 	movhi	r5,2049
 800d5b4:	29465c04 	addi	r5,r5,6512
 800d5b8:	01020074 	movhi	r4,2049
 800d5bc:	21065c04 	addi	r4,r4,6512
 800d5c0:	800d4f80 	call	800d4f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800d5c4:	80105f40 	call	80105f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800d5c8:	801086c0 	call	801086c <alt_icache_flush_all>
}
 800d5cc:	0001883a 	nop
 800d5d0:	e037883a 	mov	sp,fp
 800d5d4:	dfc00117 	ldw	ra,4(sp)
 800d5d8:	df000017 	ldw	fp,0(sp)
 800d5dc:	dec00204 	addi	sp,sp,8
 800d5e0:	f800283a 	ret

0800d5e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d5e4:	defffe04 	addi	sp,sp,-8
 800d5e8:	dfc00115 	stw	ra,4(sp)
 800d5ec:	df000015 	stw	fp,0(sp)
 800d5f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d5f4:	d0a00b17 	ldw	r2,-32724(gp)
 800d5f8:	10000326 	beq	r2,zero,800d608 <alt_get_errno+0x24>
 800d5fc:	d0a00b17 	ldw	r2,-32724(gp)
 800d600:	103ee83a 	callr	r2
 800d604:	00000106 	br	800d60c <alt_get_errno+0x28>
 800d608:	d0a6e404 	addi	r2,gp,-25712
}
 800d60c:	e037883a 	mov	sp,fp
 800d610:	dfc00117 	ldw	ra,4(sp)
 800d614:	df000017 	ldw	fp,0(sp)
 800d618:	dec00204 	addi	sp,sp,8
 800d61c:	f800283a 	ret

0800d620 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800d620:	defff904 	addi	sp,sp,-28
 800d624:	dfc00615 	stw	ra,24(sp)
 800d628:	df000515 	stw	fp,20(sp)
 800d62c:	df000504 	addi	fp,sp,20
 800d630:	e13ffd15 	stw	r4,-12(fp)
 800d634:	e17ffe15 	stw	r5,-8(fp)
 800d638:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800d63c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d640:	e0bffd17 	ldw	r2,-12(fp)
 800d644:	10000616 	blt	r2,zero,800d660 <lseek+0x40>
 800d648:	e0bffd17 	ldw	r2,-12(fp)
 800d64c:	10c00324 	muli	r3,r2,12
 800d650:	00820074 	movhi	r2,2049
 800d654:	10898304 	addi	r2,r2,9740
 800d658:	1885883a 	add	r2,r3,r2
 800d65c:	00000106 	br	800d664 <lseek+0x44>
 800d660:	0005883a 	mov	r2,zero
 800d664:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800d668:	e0bffc17 	ldw	r2,-16(fp)
 800d66c:	10001026 	beq	r2,zero,800d6b0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800d670:	e0bffc17 	ldw	r2,-16(fp)
 800d674:	10800017 	ldw	r2,0(r2)
 800d678:	10800717 	ldw	r2,28(r2)
 800d67c:	10000926 	beq	r2,zero,800d6a4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800d680:	e0bffc17 	ldw	r2,-16(fp)
 800d684:	10800017 	ldw	r2,0(r2)
 800d688:	10800717 	ldw	r2,28(r2)
 800d68c:	e1bfff17 	ldw	r6,-4(fp)
 800d690:	e17ffe17 	ldw	r5,-8(fp)
 800d694:	e13ffc17 	ldw	r4,-16(fp)
 800d698:	103ee83a 	callr	r2
 800d69c:	e0bffb15 	stw	r2,-20(fp)
 800d6a0:	00000506 	br	800d6b8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800d6a4:	00bfde84 	movi	r2,-134
 800d6a8:	e0bffb15 	stw	r2,-20(fp)
 800d6ac:	00000206 	br	800d6b8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800d6b0:	00bfebc4 	movi	r2,-81
 800d6b4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800d6b8:	e0bffb17 	ldw	r2,-20(fp)
 800d6bc:	1000070e 	bge	r2,zero,800d6dc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800d6c0:	800d5e40 	call	800d5e4 <alt_get_errno>
 800d6c4:	1007883a 	mov	r3,r2
 800d6c8:	e0bffb17 	ldw	r2,-20(fp)
 800d6cc:	0085c83a 	sub	r2,zero,r2
 800d6d0:	18800015 	stw	r2,0(r3)
    rc = -1;
 800d6d4:	00bfffc4 	movi	r2,-1
 800d6d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800d6dc:	e0bffb17 	ldw	r2,-20(fp)
}
 800d6e0:	e037883a 	mov	sp,fp
 800d6e4:	dfc00117 	ldw	ra,4(sp)
 800d6e8:	df000017 	ldw	fp,0(sp)
 800d6ec:	dec00204 	addi	sp,sp,8
 800d6f0:	f800283a 	ret

0800d6f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800d6f4:	defffd04 	addi	sp,sp,-12
 800d6f8:	dfc00215 	stw	ra,8(sp)
 800d6fc:	df000115 	stw	fp,4(sp)
 800d700:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800d704:	0009883a 	mov	r4,zero
 800d708:	800db6c0 	call	800db6c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800d70c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800d710:	800dba40 	call	800dba4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800d714:	01820074 	movhi	r6,2049
 800d718:	31873b04 	addi	r6,r6,7404
 800d71c:	01420074 	movhi	r5,2049
 800d720:	29473b04 	addi	r5,r5,7404
 800d724:	01020074 	movhi	r4,2049
 800d728:	21073b04 	addi	r4,r4,7404
 800d72c:	8010c040 	call	8010c04 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800d730:	801071c0 	call	801071c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800d734:	01020074 	movhi	r4,2049
 800d738:	2101df04 	addi	r4,r4,1916
 800d73c:	80115dc0 	call	80115dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800d740:	d0a6e617 	ldw	r2,-25704(gp)
 800d744:	d0e6e717 	ldw	r3,-25700(gp)
 800d748:	d126e817 	ldw	r4,-25696(gp)
 800d74c:	200d883a 	mov	r6,r4
 800d750:	180b883a 	mov	r5,r3
 800d754:	1009883a 	mov	r4,r2
 800d758:	80004d40 	call	80004d4 <main>
 800d75c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800d760:	01000044 	movi	r4,1
 800d764:	800d0b00 	call	800d0b0 <close>
  exit (result);
 800d768:	e13fff17 	ldw	r4,-4(fp)
 800d76c:	80115f00 	call	80115f0 <exit>

0800d770 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800d770:	defffe04 	addi	sp,sp,-8
 800d774:	df000115 	stw	fp,4(sp)
 800d778:	df000104 	addi	fp,sp,4
 800d77c:	e13fff15 	stw	r4,-4(fp)
}
 800d780:	0001883a 	nop
 800d784:	e037883a 	mov	sp,fp
 800d788:	df000017 	ldw	fp,0(sp)
 800d78c:	dec00104 	addi	sp,sp,4
 800d790:	f800283a 	ret

0800d794 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800d794:	defffe04 	addi	sp,sp,-8
 800d798:	df000115 	stw	fp,4(sp)
 800d79c:	df000104 	addi	fp,sp,4
 800d7a0:	e13fff15 	stw	r4,-4(fp)
}
 800d7a4:	0001883a 	nop
 800d7a8:	e037883a 	mov	sp,fp
 800d7ac:	df000017 	ldw	fp,0(sp)
 800d7b0:	dec00104 	addi	sp,sp,4
 800d7b4:	f800283a 	ret

0800d7b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d7b8:	defffe04 	addi	sp,sp,-8
 800d7bc:	dfc00115 	stw	ra,4(sp)
 800d7c0:	df000015 	stw	fp,0(sp)
 800d7c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d7c8:	d0a00b17 	ldw	r2,-32724(gp)
 800d7cc:	10000326 	beq	r2,zero,800d7dc <alt_get_errno+0x24>
 800d7d0:	d0a00b17 	ldw	r2,-32724(gp)
 800d7d4:	103ee83a 	callr	r2
 800d7d8:	00000106 	br	800d7e0 <alt_get_errno+0x28>
 800d7dc:	d0a6e404 	addi	r2,gp,-25712
}
 800d7e0:	e037883a 	mov	sp,fp
 800d7e4:	dfc00117 	ldw	ra,4(sp)
 800d7e8:	df000017 	ldw	fp,0(sp)
 800d7ec:	dec00204 	addi	sp,sp,8
 800d7f0:	f800283a 	ret

0800d7f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800d7f4:	defff904 	addi	sp,sp,-28
 800d7f8:	dfc00615 	stw	ra,24(sp)
 800d7fc:	df000515 	stw	fp,20(sp)
 800d800:	df000504 	addi	fp,sp,20
 800d804:	e13ffd15 	stw	r4,-12(fp)
 800d808:	e17ffe15 	stw	r5,-8(fp)
 800d80c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d810:	e0bffd17 	ldw	r2,-12(fp)
 800d814:	10000616 	blt	r2,zero,800d830 <read+0x3c>
 800d818:	e0bffd17 	ldw	r2,-12(fp)
 800d81c:	10c00324 	muli	r3,r2,12
 800d820:	00820074 	movhi	r2,2049
 800d824:	10898304 	addi	r2,r2,9740
 800d828:	1885883a 	add	r2,r3,r2
 800d82c:	00000106 	br	800d834 <read+0x40>
 800d830:	0005883a 	mov	r2,zero
 800d834:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d838:	e0bffb17 	ldw	r2,-20(fp)
 800d83c:	10002226 	beq	r2,zero,800d8c8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d840:	e0bffb17 	ldw	r2,-20(fp)
 800d844:	10800217 	ldw	r2,8(r2)
 800d848:	108000cc 	andi	r2,r2,3
 800d84c:	10800060 	cmpeqi	r2,r2,1
 800d850:	1000181e 	bne	r2,zero,800d8b4 <read+0xc0>
        (fd->dev->read))
 800d854:	e0bffb17 	ldw	r2,-20(fp)
 800d858:	10800017 	ldw	r2,0(r2)
 800d85c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d860:	10001426 	beq	r2,zero,800d8b4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800d864:	e0bffb17 	ldw	r2,-20(fp)
 800d868:	10800017 	ldw	r2,0(r2)
 800d86c:	10800517 	ldw	r2,20(r2)
 800d870:	e0ffff17 	ldw	r3,-4(fp)
 800d874:	180d883a 	mov	r6,r3
 800d878:	e17ffe17 	ldw	r5,-8(fp)
 800d87c:	e13ffb17 	ldw	r4,-20(fp)
 800d880:	103ee83a 	callr	r2
 800d884:	e0bffc15 	stw	r2,-16(fp)
 800d888:	e0bffc17 	ldw	r2,-16(fp)
 800d88c:	1000070e 	bge	r2,zero,800d8ac <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800d890:	800d7b80 	call	800d7b8 <alt_get_errno>
 800d894:	1007883a 	mov	r3,r2
 800d898:	e0bffc17 	ldw	r2,-16(fp)
 800d89c:	0085c83a 	sub	r2,zero,r2
 800d8a0:	18800015 	stw	r2,0(r3)
          return -1;
 800d8a4:	00bfffc4 	movi	r2,-1
 800d8a8:	00000c06 	br	800d8dc <read+0xe8>
        }
        return rval;
 800d8ac:	e0bffc17 	ldw	r2,-16(fp)
 800d8b0:	00000a06 	br	800d8dc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800d8b4:	800d7b80 	call	800d7b8 <alt_get_errno>
 800d8b8:	1007883a 	mov	r3,r2
 800d8bc:	00800344 	movi	r2,13
 800d8c0:	18800015 	stw	r2,0(r3)
 800d8c4:	00000406 	br	800d8d8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800d8c8:	800d7b80 	call	800d7b8 <alt_get_errno>
 800d8cc:	1007883a 	mov	r3,r2
 800d8d0:	00801444 	movi	r2,81
 800d8d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d8d8:	00bfffc4 	movi	r2,-1
}
 800d8dc:	e037883a 	mov	sp,fp
 800d8e0:	dfc00117 	ldw	ra,4(sp)
 800d8e4:	df000017 	ldw	fp,0(sp)
 800d8e8:	dec00204 	addi	sp,sp,8
 800d8ec:	f800283a 	ret

0800d8f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d8f0:	defffe04 	addi	sp,sp,-8
 800d8f4:	df000115 	stw	fp,4(sp)
 800d8f8:	df000104 	addi	fp,sp,4
 800d8fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800d900:	e0bfff17 	ldw	r2,-4(fp)
 800d904:	108000d0 	cmplti	r2,r2,3
 800d908:	10000d1e 	bne	r2,zero,800d940 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d90c:	00820074 	movhi	r2,2049
 800d910:	10898304 	addi	r2,r2,9740
 800d914:	e0ffff17 	ldw	r3,-4(fp)
 800d918:	18c00324 	muli	r3,r3,12
 800d91c:	10c5883a 	add	r2,r2,r3
 800d920:	10800204 	addi	r2,r2,8
 800d924:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800d928:	00820074 	movhi	r2,2049
 800d92c:	10898304 	addi	r2,r2,9740
 800d930:	e0ffff17 	ldw	r3,-4(fp)
 800d934:	18c00324 	muli	r3,r3,12
 800d938:	10c5883a 	add	r2,r2,r3
 800d93c:	10000015 	stw	zero,0(r2)
  }
}
 800d940:	0001883a 	nop
 800d944:	e037883a 	mov	sp,fp
 800d948:	df000017 	ldw	fp,0(sp)
 800d94c:	dec00104 	addi	sp,sp,4
 800d950:	f800283a 	ret

0800d954 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800d954:	defff904 	addi	sp,sp,-28
 800d958:	df000615 	stw	fp,24(sp)
 800d95c:	df000604 	addi	fp,sp,24
 800d960:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d964:	0005303a 	rdctl	r2,status
 800d968:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d96c:	e0fffe17 	ldw	r3,-8(fp)
 800d970:	00bfff84 	movi	r2,-2
 800d974:	1884703a 	and	r2,r3,r2
 800d978:	1001703a 	wrctl	status,r2
  
  return context;
 800d97c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800d980:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800d984:	d0a00d17 	ldw	r2,-32716(gp)
 800d988:	10c000c4 	addi	r3,r2,3
 800d98c:	00bfff04 	movi	r2,-4
 800d990:	1884703a 	and	r2,r3,r2
 800d994:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800d998:	d0e00d17 	ldw	r3,-32716(gp)
 800d99c:	e0bfff17 	ldw	r2,-4(fp)
 800d9a0:	1887883a 	add	r3,r3,r2
 800d9a4:	00824034 	movhi	r2,2304
 800d9a8:	10800004 	addi	r2,r2,0
 800d9ac:	10c0062e 	bgeu	r2,r3,800d9c8 <sbrk+0x74>
 800d9b0:	e0bffb17 	ldw	r2,-20(fp)
 800d9b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d9b8:	e0bffa17 	ldw	r2,-24(fp)
 800d9bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800d9c0:	00bfffc4 	movi	r2,-1
 800d9c4:	00000b06 	br	800d9f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800d9c8:	d0a00d17 	ldw	r2,-32716(gp)
 800d9cc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800d9d0:	d0e00d17 	ldw	r3,-32716(gp)
 800d9d4:	e0bfff17 	ldw	r2,-4(fp)
 800d9d8:	1885883a 	add	r2,r3,r2
 800d9dc:	d0a00d15 	stw	r2,-32716(gp)
 800d9e0:	e0bffb17 	ldw	r2,-20(fp)
 800d9e4:	e0bffc15 	stw	r2,-16(fp)
 800d9e8:	e0bffc17 	ldw	r2,-16(fp)
 800d9ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800d9f0:	e0bffd17 	ldw	r2,-12(fp)
} 
 800d9f4:	e037883a 	mov	sp,fp
 800d9f8:	df000017 	ldw	fp,0(sp)
 800d9fc:	dec00104 	addi	sp,sp,4
 800da00:	f800283a 	ret

0800da04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800da04:	defffe04 	addi	sp,sp,-8
 800da08:	dfc00115 	stw	ra,4(sp)
 800da0c:	df000015 	stw	fp,0(sp)
 800da10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800da14:	d0a00b17 	ldw	r2,-32724(gp)
 800da18:	10000326 	beq	r2,zero,800da28 <alt_get_errno+0x24>
 800da1c:	d0a00b17 	ldw	r2,-32724(gp)
 800da20:	103ee83a 	callr	r2
 800da24:	00000106 	br	800da2c <alt_get_errno+0x28>
 800da28:	d0a6e404 	addi	r2,gp,-25712
}
 800da2c:	e037883a 	mov	sp,fp
 800da30:	dfc00117 	ldw	ra,4(sp)
 800da34:	df000017 	ldw	fp,0(sp)
 800da38:	dec00204 	addi	sp,sp,8
 800da3c:	f800283a 	ret

0800da40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800da40:	defff904 	addi	sp,sp,-28
 800da44:	dfc00615 	stw	ra,24(sp)
 800da48:	df000515 	stw	fp,20(sp)
 800da4c:	df000504 	addi	fp,sp,20
 800da50:	e13ffd15 	stw	r4,-12(fp)
 800da54:	e17ffe15 	stw	r5,-8(fp)
 800da58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800da5c:	e0bffd17 	ldw	r2,-12(fp)
 800da60:	10000616 	blt	r2,zero,800da7c <write+0x3c>
 800da64:	e0bffd17 	ldw	r2,-12(fp)
 800da68:	10c00324 	muli	r3,r2,12
 800da6c:	00820074 	movhi	r2,2049
 800da70:	10898304 	addi	r2,r2,9740
 800da74:	1885883a 	add	r2,r3,r2
 800da78:	00000106 	br	800da80 <write+0x40>
 800da7c:	0005883a 	mov	r2,zero
 800da80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800da84:	e0bffb17 	ldw	r2,-20(fp)
 800da88:	10002126 	beq	r2,zero,800db10 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800da8c:	e0bffb17 	ldw	r2,-20(fp)
 800da90:	10800217 	ldw	r2,8(r2)
 800da94:	108000cc 	andi	r2,r2,3
 800da98:	10001826 	beq	r2,zero,800dafc <write+0xbc>
 800da9c:	e0bffb17 	ldw	r2,-20(fp)
 800daa0:	10800017 	ldw	r2,0(r2)
 800daa4:	10800617 	ldw	r2,24(r2)
 800daa8:	10001426 	beq	r2,zero,800dafc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800daac:	e0bffb17 	ldw	r2,-20(fp)
 800dab0:	10800017 	ldw	r2,0(r2)
 800dab4:	10800617 	ldw	r2,24(r2)
 800dab8:	e0ffff17 	ldw	r3,-4(fp)
 800dabc:	180d883a 	mov	r6,r3
 800dac0:	e17ffe17 	ldw	r5,-8(fp)
 800dac4:	e13ffb17 	ldw	r4,-20(fp)
 800dac8:	103ee83a 	callr	r2
 800dacc:	e0bffc15 	stw	r2,-16(fp)
 800dad0:	e0bffc17 	ldw	r2,-16(fp)
 800dad4:	1000070e 	bge	r2,zero,800daf4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800dad8:	800da040 	call	800da04 <alt_get_errno>
 800dadc:	1007883a 	mov	r3,r2
 800dae0:	e0bffc17 	ldw	r2,-16(fp)
 800dae4:	0085c83a 	sub	r2,zero,r2
 800dae8:	18800015 	stw	r2,0(r3)
        return -1;
 800daec:	00bfffc4 	movi	r2,-1
 800daf0:	00000c06 	br	800db24 <write+0xe4>
      }
      return rval;
 800daf4:	e0bffc17 	ldw	r2,-16(fp)
 800daf8:	00000a06 	br	800db24 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800dafc:	800da040 	call	800da04 <alt_get_errno>
 800db00:	1007883a 	mov	r3,r2
 800db04:	00800344 	movi	r2,13
 800db08:	18800015 	stw	r2,0(r3)
 800db0c:	00000406 	br	800db20 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800db10:	800da040 	call	800da04 <alt_get_errno>
 800db14:	1007883a 	mov	r3,r2
 800db18:	00801444 	movi	r2,81
 800db1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800db20:	00bfffc4 	movi	r2,-1
}
 800db24:	e037883a 	mov	sp,fp
 800db28:	dfc00117 	ldw	ra,4(sp)
 800db2c:	df000017 	ldw	fp,0(sp)
 800db30:	dec00204 	addi	sp,sp,8
 800db34:	f800283a 	ret

0800db38 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800db38:	defffd04 	addi	sp,sp,-12
 800db3c:	dfc00215 	stw	ra,8(sp)
 800db40:	df000115 	stw	fp,4(sp)
 800db44:	df000104 	addi	fp,sp,4
 800db48:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800db4c:	d1600804 	addi	r5,gp,-32736
 800db50:	e13fff17 	ldw	r4,-4(fp)
 800db54:	80106780 	call	8010678 <alt_dev_llist_insert>
}
 800db58:	e037883a 	mov	sp,fp
 800db5c:	dfc00117 	ldw	ra,4(sp)
 800db60:	df000017 	ldw	fp,0(sp)
 800db64:	dec00204 	addi	sp,sp,8
 800db68:	f800283a 	ret

0800db6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800db6c:	defffd04 	addi	sp,sp,-12
 800db70:	dfc00215 	stw	ra,8(sp)
 800db74:	df000115 	stw	fp,4(sp)
 800db78:	df000104 	addi	fp,sp,4
 800db7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800db80:	80112e00 	call	80112e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800db84:	00800044 	movi	r2,1
 800db88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800db8c:	0001883a 	nop
 800db90:	e037883a 	mov	sp,fp
 800db94:	dfc00117 	ldw	ra,4(sp)
 800db98:	df000017 	ldw	fp,0(sp)
 800db9c:	dec00204 	addi	sp,sp,8
 800dba0:	f800283a 	ret

0800dba4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800dba4:	defffe04 	addi	sp,sp,-8
 800dba8:	dfc00115 	stw	ra,4(sp)
 800dbac:	df000015 	stw	fp,0(sp)
 800dbb0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800dbb4:	01c0fa04 	movi	r7,1000
 800dbb8:	01800044 	movi	r6,1
 800dbbc:	000b883a 	mov	r5,zero
 800dbc0:	01081804 	movi	r4,8288
 800dbc4:	80102f40 	call	80102f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 800dbc8:	01020074 	movhi	r4,2049
 800dbcc:	2109e304 	addi	r4,r4,10124
 800dbd0:	800de640 	call	800de64 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800dbd4:	000d883a 	mov	r6,zero
 800dbd8:	000b883a 	mov	r5,zero
 800dbdc:	01020074 	movhi	r4,2049
 800dbe0:	2109fb04 	addi	r4,r4,10220
 800dbe4:	800f9780 	call	800f978 <altera_avalon_jtag_uart_init>
 800dbe8:	01020074 	movhi	r4,2049
 800dbec:	2109f104 	addi	r4,r4,10180
 800dbf0:	800db380 	call	800db38 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 800dbf4:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800dbf8:	0001883a 	nop
}
 800dbfc:	0001883a 	nop
 800dc00:	e037883a 	mov	sp,fp
 800dc04:	dfc00117 	ldw	ra,4(sp)
 800dc08:	df000017 	ldw	fp,0(sp)
 800dc0c:	dec00204 	addi	sp,sp,8
 800dc10:	f800283a 	ret

0800dc14 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 800dc14:	defff904 	addi	sp,sp,-28
 800dc18:	dfc00615 	stw	ra,24(sp)
 800dc1c:	df000515 	stw	fp,20(sp)
 800dc20:	df000504 	addi	fp,sp,20
 800dc24:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 800dc28:	008000b4 	movhi	r2,2
 800dc2c:	10a1a804 	addi	r2,r2,-31072
 800dc30:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 800dc34:	e0bfff17 	ldw	r2,-4(fp)
 800dc38:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 800dc3c:	e0bffc17 	ldw	r2,-16(fp)
 800dc40:	10800717 	ldw	r2,28(r2)
 800dc44:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 800dc48:	e0bffd17 	ldw	r2,-12(fp)
 800dc4c:	10800217 	ldw	r2,8(r2)
 800dc50:	10800098 	cmpnei	r2,r2,2
 800dc54:	1000251e 	bne	r2,zero,800dcec <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 800dc58:	e0bffd17 	ldw	r2,-12(fp)
 800dc5c:	10c00017 	ldw	r3,0(r2)
 800dc60:	e0bffd17 	ldw	r2,-12(fp)
 800dc64:	10800117 	ldw	r2,4(r2)
 800dc68:	e13ffe04 	addi	r4,fp,-8
 800dc6c:	200f883a 	mov	r7,r4
 800dc70:	100d883a 	mov	r6,r2
 800dc74:	180b883a 	mov	r5,r3
 800dc78:	e13ffc17 	ldw	r4,-16(fp)
 800dc7c:	800e3c40 	call	800e3c4 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 800dc80:	e0bffd17 	ldw	r2,-12(fp)
 800dc84:	10c00117 	ldw	r3,4(r2)
 800dc88:	e0bffe17 	ldw	r2,-8(fp)
 800dc8c:	1887c83a 	sub	r3,r3,r2
 800dc90:	e0bffd17 	ldw	r2,-12(fp)
 800dc94:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 800dc98:	e0bffd17 	ldw	r2,-12(fp)
 800dc9c:	10c00017 	ldw	r3,0(r2)
 800dca0:	e0bffe17 	ldw	r2,-8(fp)
 800dca4:	1887883a 	add	r3,r3,r2
 800dca8:	e0bffd17 	ldw	r2,-12(fp)
 800dcac:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 800dcb0:	e0bffd17 	ldw	r2,-12(fp)
 800dcb4:	10800117 	ldw	r2,4(r2)
 800dcb8:	10000c26 	beq	r2,zero,800dcec <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800dcbc:	01400704 	movi	r5,28
 800dcc0:	e13ffc17 	ldw	r4,-16(fp)
 800dcc4:	800f5640 	call	800f564 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 800dcc8:	01400084 	movi	r5,2
 800dccc:	e13ffc17 	ldw	r4,-16(fp)
 800dcd0:	800f6080 	call	800f608 <alt_avalon_i2c_int_enable>
 800dcd4:	00000e06 	br	800dd10 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 800dcd8:	e0bffb17 	ldw	r2,-20(fp)
 800dcdc:	10bfffc4 	addi	r2,r2,-1
 800dce0:	e0bffb15 	stw	r2,-20(fp)
 800dce4:	e0bffb17 	ldw	r2,-20(fp)
 800dce8:	10000426 	beq	r2,zero,800dcfc <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 800dcec:	e13ffc17 	ldw	r4,-16(fp)
 800dcf0:	800e3800 	call	800e380 <alt_avalon_i2c_is_busy>
 800dcf4:	103ff81e 	bne	r2,zero,800dcd8 <__alt_data_end+0xff00dcd8>
 800dcf8:	00000106 	br	800dd00 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 800dcfc:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 800dd00:	e13ffc17 	ldw	r4,-16(fp)
 800dd04:	800e0280 	call	800e028 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 800dd08:	e0bffd17 	ldw	r2,-12(fp)
 800dd0c:	10000215 	stw	zero,8(r2)
}
 800dd10:	e037883a 	mov	sp,fp
 800dd14:	dfc00117 	ldw	ra,4(sp)
 800dd18:	df000017 	ldw	fp,0(sp)
 800dd1c:	dec00204 	addi	sp,sp,8
 800dd20:	f800283a 	ret

0800dd24 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 800dd24:	defffc04 	addi	sp,sp,-16
 800dd28:	dfc00315 	stw	ra,12(sp)
 800dd2c:	df000215 	stw	fp,8(sp)
 800dd30:	df000204 	addi	fp,sp,8
 800dd34:	e13ffe15 	stw	r4,-8(fp)
 800dd38:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 800dd3c:	e0bfff17 	ldw	r2,-4(fp)
 800dd40:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 800dd44:	e1ffff17 	ldw	r7,-4(fp)
 800dd48:	000d883a 	mov	r6,zero
 800dd4c:	01420074 	movhi	r5,2049
 800dd50:	29770504 	addi	r5,r5,-9196
 800dd54:	e13ffe17 	ldw	r4,-8(fp)
 800dd58:	800de100 	call	800de10 <alt_avalon_i2c_register_callback>
}
 800dd5c:	0001883a 	nop
 800dd60:	e037883a 	mov	sp,fp
 800dd64:	dfc00117 	ldw	ra,4(sp)
 800dd68:	df000017 	ldw	fp,0(sp)
 800dd6c:	dec00204 	addi	sp,sp,8
 800dd70:	f800283a 	ret

0800dd74 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 800dd74:	defff904 	addi	sp,sp,-28
 800dd78:	dfc00615 	stw	ra,24(sp)
 800dd7c:	df000515 	stw	fp,20(sp)
 800dd80:	df000504 	addi	fp,sp,20
 800dd84:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 800dd88:	e0bfff17 	ldw	r2,-4(fp)
 800dd8c:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 800dd90:	014007c4 	movi	r5,31
 800dd94:	e13ffb17 	ldw	r4,-20(fp)
 800dd98:	800f5a00 	call	800f5a0 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800dd9c:	01400704 	movi	r5,28
 800dda0:	e13ffb17 	ldw	r4,-20(fp)
 800dda4:	800f5640 	call	800f564 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 800dda8:	e0bffb17 	ldw	r2,-20(fp)
 800ddac:	10800617 	ldw	r2,24(r2)
 800ddb0:	10001126 	beq	r2,zero,800ddf8 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ddb4:	0005303a 	rdctl	r2,status
 800ddb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ddbc:	e0fffd17 	ldw	r3,-12(fp)
 800ddc0:	00bfff84 	movi	r2,-2
 800ddc4:	1884703a 	and	r2,r3,r2
 800ddc8:	1001703a 	wrctl	status,r2
  
  return context;
 800ddcc:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 800ddd0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 800ddd4:	e0bffb17 	ldw	r2,-20(fp)
 800ddd8:	10800617 	ldw	r2,24(r2)
 800dddc:	e13ffb17 	ldw	r4,-20(fp)
 800dde0:	103ee83a 	callr	r2
 800dde4:	e0bffc17 	ldw	r2,-16(fp)
 800dde8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ddec:	e0bffe17 	ldw	r2,-8(fp)
 800ddf0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 800ddf4:	0001883a 	nop
 800ddf8:	0001883a 	nop
}
 800ddfc:	e037883a 	mov	sp,fp
 800de00:	dfc00117 	ldw	ra,4(sp)
 800de04:	df000017 	ldw	fp,0(sp)
 800de08:	dec00204 	addi	sp,sp,8
 800de0c:	f800283a 	ret

0800de10 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 800de10:	defffb04 	addi	sp,sp,-20
 800de14:	df000415 	stw	fp,16(sp)
 800de18:	df000404 	addi	fp,sp,16
 800de1c:	e13ffc15 	stw	r4,-16(fp)
 800de20:	e17ffd15 	stw	r5,-12(fp)
 800de24:	e1bffe15 	stw	r6,-8(fp)
 800de28:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 800de2c:	e0bffc17 	ldw	r2,-16(fp)
 800de30:	e0fffd17 	ldw	r3,-12(fp)
 800de34:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 800de38:	e0bffc17 	ldw	r2,-16(fp)
 800de3c:	e0ffff17 	ldw	r3,-4(fp)
 800de40:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 800de44:	e0bffc17 	ldw	r2,-16(fp)
 800de48:	e0fffe17 	ldw	r3,-8(fp)
 800de4c:	10c00815 	stw	r3,32(r2)

    return ;
 800de50:	0001883a 	nop
}
 800de54:	e037883a 	mov	sp,fp
 800de58:	df000017 	ldw	fp,0(sp)
 800de5c:	dec00104 	addi	sp,sp,4
 800de60:	f800283a 	ret

0800de64 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 800de64:	defff704 	addi	sp,sp,-36
 800de68:	dfc00815 	stw	ra,32(sp)
 800de6c:	df000715 	stw	fp,28(sp)
 800de70:	df000704 	addi	fp,sp,28
 800de74:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 800de78:	e13fff17 	ldw	r4,-4(fp)
 800de7c:	800e0280 	call	800e028 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 800de80:	014007c4 	movi	r5,31
 800de84:	e13fff17 	ldw	r4,-4(fp)
 800de88:	800f5a00 	call	800f5a0 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800de8c:	01400704 	movi	r5,28
 800de90:	e13fff17 	ldw	r4,-4(fp)
 800de94:	800f5640 	call	800f564 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 800de98:	014000c4 	movi	r5,3
 800de9c:	e13fff17 	ldw	r4,-4(fp)
 800dea0:	800f7ac0 	call	800f7ac <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 800dea4:	014000c4 	movi	r5,3
 800dea8:	e13fff17 	ldw	r4,-4(fp)
 800deac:	800f6fc0 	call	800f6fc <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 800deb0:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 800deb4:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 800deb8:	e0bffb04 	addi	r2,fp,-20
 800debc:	018000b4 	movhi	r6,2
 800dec0:	31a1a804 	addi	r6,r6,-31072
 800dec4:	100b883a 	mov	r5,r2
 800dec8:	e13fff17 	ldw	r4,-4(fp)
 800decc:	800e2840 	call	800e284 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 800ded0:	e0bffb04 	addi	r2,fp,-20
 800ded4:	100b883a 	mov	r5,r2
 800ded8:	e13fff17 	ldw	r4,-4(fp)
 800dedc:	800e1240 	call	800e124 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 800dee0:	d1600e04 	addi	r5,gp,-32712
 800dee4:	e13fff17 	ldw	r4,-4(fp)
 800dee8:	80106780 	call	8010678 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 800deec:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 800def0:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 800def4:	e0bffa17 	ldw	r2,-24(fp)
 800def8:	10000c1e 	bne	r2,zero,800df2c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 800defc:	e0bfff17 	ldw	r2,-4(fp)
 800df00:	10c00417 	ldw	r3,16(r2)
 800df04:	e0bfff17 	ldw	r2,-4(fp)
 800df08:	10800517 	ldw	r2,20(r2)
 800df0c:	d8000015 	stw	zero,0(sp)
 800df10:	e1ffff17 	ldw	r7,-4(fp)
 800df14:	01820074 	movhi	r6,2049
 800df18:	31b75d04 	addi	r6,r6,-8844
 800df1c:	100b883a 	mov	r5,r2
 800df20:	1809883a 	mov	r4,r3
 800df24:	80108a00 	call	80108a0 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 800df28:	00000406 	br	800df3c <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 800df2c:	01020074 	movhi	r4,2049
 800df30:	21074804 	addi	r4,r4,7456
 800df34:	8010ed40 	call	8010ed4 <alt_printf>
    }

    return;
 800df38:	0001883a 	nop

}
 800df3c:	e037883a 	mov	sp,fp
 800df40:	dfc00117 	ldw	ra,4(sp)
 800df44:	df000017 	ldw	fp,0(sp)
 800df48:	dec00204 	addi	sp,sp,8
 800df4c:	f800283a 	ret

0800df50 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 800df50:	defffc04 	addi	sp,sp,-16
 800df54:	dfc00315 	stw	ra,12(sp)
 800df58:	df000215 	stw	fp,8(sp)
 800df5c:	df000204 	addi	fp,sp,8
 800df60:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 800df64:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 800df68:	d1600e04 	addi	r5,gp,-32712
 800df6c:	e13fff17 	ldw	r4,-4(fp)
 800df70:	80107dc0 	call	80107dc <alt_find_dev>
 800df74:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 800df78:	e0bffe17 	ldw	r2,-8(fp)
}
 800df7c:	e037883a 	mov	sp,fp
 800df80:	dfc00117 	ldw	ra,4(sp)
 800df84:	df000017 	ldw	fp,0(sp)
 800df88:	dec00204 	addi	sp,sp,8
 800df8c:	f800283a 	ret

0800df90 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 800df90:	defffc04 	addi	sp,sp,-16
 800df94:	df000315 	stw	fp,12(sp)
 800df98:	df000304 	addi	fp,sp,12
 800df9c:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 800dfa0:	e0bfff17 	ldw	r2,-4(fp)
 800dfa4:	10800717 	ldw	r2,28(r2)
 800dfa8:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 800dfac:	e0bfff17 	ldw	r2,-4(fp)
 800dfb0:	10800317 	ldw	r2,12(r2)
 800dfb4:	10800204 	addi	r2,r2,8
 800dfb8:	10800037 	ldwio	r2,0(r2)
 800dfbc:	1080004c 	andi	r2,r2,1
 800dfc0:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 800dfc4:	e0bffe17 	ldw	r2,-8(fp)
 800dfc8:	10000226 	beq	r2,zero,800dfd4 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 800dfcc:	00bffe44 	movi	r2,-7
 800dfd0:	00001106 	br	800e018 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 800dfd4:	e0bfff17 	ldw	r2,-4(fp)
 800dfd8:	10c00617 	ldw	r3,24(r2)
 800dfdc:	00820074 	movhi	r2,2049
 800dfe0:	10b70504 	addi	r2,r2,-9196
 800dfe4:	1880021e 	bne	r3,r2,800dff0 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 800dfe8:	e0bffd17 	ldw	r2,-12(fp)
 800dfec:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 800dff0:	e0bfff17 	ldw	r2,-4(fp)
 800dff4:	10800317 	ldw	r2,12(r2)
 800dff8:	10800204 	addi	r2,r2,8
 800dffc:	e0ffff17 	ldw	r3,-4(fp)
 800e000:	18c00317 	ldw	r3,12(r3)
 800e004:	18c00204 	addi	r3,r3,8
 800e008:	18c00037 	ldwio	r3,0(r3)
 800e00c:	18c00054 	ori	r3,r3,1
 800e010:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 800e014:	0005883a 	mov	r2,zero
}
 800e018:	e037883a 	mov	sp,fp
 800e01c:	df000017 	ldw	fp,0(sp)
 800e020:	dec00104 	addi	sp,sp,4
 800e024:	f800283a 	ret

0800e028 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 800e028:	defffe04 	addi	sp,sp,-8
 800e02c:	df000115 	stw	fp,4(sp)
 800e030:	df000104 	addi	fp,sp,4
 800e034:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 800e038:	e0bfff17 	ldw	r2,-4(fp)
 800e03c:	10800317 	ldw	r2,12(r2)
 800e040:	10800204 	addi	r2,r2,8
 800e044:	e0ffff17 	ldw	r3,-4(fp)
 800e048:	18c00317 	ldw	r3,12(r3)
 800e04c:	18c00204 	addi	r3,r3,8
 800e050:	19000037 	ldwio	r4,0(r3)
 800e054:	00ffff84 	movi	r3,-2
 800e058:	20c6703a 	and	r3,r4,r3
 800e05c:	10c00035 	stwio	r3,0(r2)

}
 800e060:	0001883a 	nop
 800e064:	e037883a 	mov	sp,fp
 800e068:	df000017 	ldw	fp,0(sp)
 800e06c:	dec00104 	addi	sp,sp,4
 800e070:	f800283a 	ret

0800e074 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 800e074:	defffd04 	addi	sp,sp,-12
 800e078:	df000215 	stw	fp,8(sp)
 800e07c:	df000204 	addi	fp,sp,8
 800e080:	e13ffe15 	stw	r4,-8(fp)
 800e084:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 800e088:	e0bffe17 	ldw	r2,-8(fp)
 800e08c:	10c00d17 	ldw	r3,52(r2)
 800e090:	e0bfff17 	ldw	r2,-4(fp)
 800e094:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 800e098:	e0bffe17 	ldw	r2,-8(fp)
 800e09c:	10800317 	ldw	r2,12(r2)
 800e0a0:	10800204 	addi	r2,r2,8
 800e0a4:	10800037 	ldwio	r2,0(r2)
 800e0a8:	1080008c 	andi	r2,r2,2
 800e0ac:	1005d07a 	srai	r2,r2,1
 800e0b0:	1007883a 	mov	r3,r2
 800e0b4:	e0bfff17 	ldw	r2,-4(fp)
 800e0b8:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 800e0bc:	e0bffe17 	ldw	r2,-8(fp)
 800e0c0:	10800317 	ldw	r2,12(r2)
 800e0c4:	10800904 	addi	r2,r2,36
 800e0c8:	10800037 	ldwio	r2,0(r2)
 800e0cc:	1007883a 	mov	r3,r2
 800e0d0:	e0bfff17 	ldw	r2,-4(fp)
 800e0d4:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 800e0d8:	e0bffe17 	ldw	r2,-8(fp)
 800e0dc:	10800317 	ldw	r2,12(r2)
 800e0e0:	10800804 	addi	r2,r2,32
 800e0e4:	10800037 	ldwio	r2,0(r2)
 800e0e8:	1007883a 	mov	r3,r2
 800e0ec:	e0bfff17 	ldw	r2,-4(fp)
 800e0f0:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 800e0f4:	e0bffe17 	ldw	r2,-8(fp)
 800e0f8:	10800317 	ldw	r2,12(r2)
 800e0fc:	10800a04 	addi	r2,r2,40
 800e100:	10800037 	ldwio	r2,0(r2)
 800e104:	1007883a 	mov	r3,r2
 800e108:	e0bfff17 	ldw	r2,-4(fp)
 800e10c:	10c0030d 	sth	r3,12(r2)
}
 800e110:	0001883a 	nop
 800e114:	e037883a 	mov	sp,fp
 800e118:	df000017 	ldw	fp,0(sp)
 800e11c:	dec00104 	addi	sp,sp,4
 800e120:	f800283a 	ret

0800e124 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 800e124:	defffd04 	addi	sp,sp,-12
 800e128:	df000215 	stw	fp,8(sp)
 800e12c:	df000204 	addi	fp,sp,8
 800e130:	e13ffe15 	stw	r4,-8(fp)
 800e134:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 800e138:	e0bfff17 	ldw	r2,-4(fp)
 800e13c:	10c00017 	ldw	r3,0(r2)
 800e140:	e0bffe17 	ldw	r2,-8(fp)
 800e144:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 800e148:	e0bffe17 	ldw	r2,-8(fp)
 800e14c:	10800317 	ldw	r2,12(r2)
 800e150:	10c00204 	addi	r3,r2,8
 800e154:	e0bffe17 	ldw	r2,-8(fp)
 800e158:	10800317 	ldw	r2,12(r2)
 800e15c:	10800204 	addi	r2,r2,8
 800e160:	10800037 	ldwio	r2,0(r2)
 800e164:	1009883a 	mov	r4,r2
 800e168:	00bfff44 	movi	r2,-3
 800e16c:	2088703a 	and	r4,r4,r2
 800e170:	e0bfff17 	ldw	r2,-4(fp)
 800e174:	10800117 	ldw	r2,4(r2)
 800e178:	1085883a 	add	r2,r2,r2
 800e17c:	1080008c 	andi	r2,r2,2
 800e180:	2084b03a 	or	r2,r4,r2
 800e184:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 800e188:	e0bffe17 	ldw	r2,-8(fp)
 800e18c:	10800317 	ldw	r2,12(r2)
 800e190:	10800904 	addi	r2,r2,36
 800e194:	e0ffff17 	ldw	r3,-4(fp)
 800e198:	18c0020b 	ldhu	r3,8(r3)
 800e19c:	18ffffcc 	andi	r3,r3,65535
 800e1a0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 800e1a4:	e0bffe17 	ldw	r2,-8(fp)
 800e1a8:	10800317 	ldw	r2,12(r2)
 800e1ac:	10800804 	addi	r2,r2,32
 800e1b0:	e0ffff17 	ldw	r3,-4(fp)
 800e1b4:	18c0028b 	ldhu	r3,10(r3)
 800e1b8:	18ffffcc 	andi	r3,r3,65535
 800e1bc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 800e1c0:	e0bffe17 	ldw	r2,-8(fp)
 800e1c4:	10800317 	ldw	r2,12(r2)
 800e1c8:	10800a04 	addi	r2,r2,40
 800e1cc:	e0ffff17 	ldw	r3,-4(fp)
 800e1d0:	18c0030b 	ldhu	r3,12(r3)
 800e1d4:	18ffffcc 	andi	r3,r3,65535
 800e1d8:	10c00035 	stwio	r3,0(r2)
}
 800e1dc:	0001883a 	nop
 800e1e0:	e037883a 	mov	sp,fp
 800e1e4:	df000017 	ldw	fp,0(sp)
 800e1e8:	dec00104 	addi	sp,sp,4
 800e1ec:	f800283a 	ret

0800e1f0 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 800e1f0:	defffb04 	addi	sp,sp,-20
 800e1f4:	dfc00415 	stw	ra,16(sp)
 800e1f8:	df000315 	stw	fp,12(sp)
 800e1fc:	df000304 	addi	fp,sp,12
 800e200:	e13ffd15 	stw	r4,-12(fp)
 800e204:	e17ffe15 	stw	r5,-8(fp)
 800e208:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 800e20c:	e0bffe17 	ldw	r2,-8(fp)
 800e210:	1080028b 	ldhu	r2,10(r2)
 800e214:	10bfffcc 	andi	r2,r2,65535
 800e218:	10000426 	beq	r2,zero,800e22c <alt_avalon_i2c_master_config_speed_get+0x3c>
 800e21c:	e0bffe17 	ldw	r2,-8(fp)
 800e220:	1080020b 	ldhu	r2,8(r2)
 800e224:	10bfffcc 	andi	r2,r2,65535
 800e228:	1000021e 	bne	r2,zero,800e234 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 800e22c:	00bfff44 	movi	r2,-3
 800e230:	00000f06 	br	800e270 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 800e234:	e0bffd17 	ldw	r2,-12(fp)
 800e238:	11000c17 	ldw	r4,48(r2)
 800e23c:	e0bffe17 	ldw	r2,-8(fp)
 800e240:	1080028b 	ldhu	r2,10(r2)
 800e244:	10ffffcc 	andi	r3,r2,65535
 800e248:	e0bffe17 	ldw	r2,-8(fp)
 800e24c:	1080020b 	ldhu	r2,8(r2)
 800e250:	10bfffcc 	andi	r2,r2,65535
 800e254:	1885883a 	add	r2,r3,r2
 800e258:	100b883a 	mov	r5,r2
 800e25c:	800a9500 	call	800a950 <__udivsi3>
 800e260:	1007883a 	mov	r3,r2
 800e264:	e0bfff17 	ldw	r2,-4(fp)
 800e268:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 800e26c:	0005883a 	mov	r2,zero
}
 800e270:	e037883a 	mov	sp,fp
 800e274:	dfc00117 	ldw	ra,4(sp)
 800e278:	df000017 	ldw	fp,0(sp)
 800e27c:	dec00204 	addi	sp,sp,8
 800e280:	f800283a 	ret

0800e284 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 800e284:	defff904 	addi	sp,sp,-28
 800e288:	dfc00615 	stw	ra,24(sp)
 800e28c:	df000515 	stw	fp,20(sp)
 800e290:	df000504 	addi	fp,sp,20
 800e294:	e13ffd15 	stw	r4,-12(fp)
 800e298:	e17ffe15 	stw	r5,-8(fp)
 800e29c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 800e2a0:	e0ffff17 	ldw	r3,-4(fp)
 800e2a4:	008001b4 	movhi	r2,6
 800e2a8:	1086a004 	addi	r2,r2,6784
 800e2ac:	10c00436 	bltu	r2,r3,800e2c0 <alt_avalon_i2c_master_config_speed_set+0x3c>
 800e2b0:	e0bfff17 	ldw	r2,-4(fp)
 800e2b4:	10000226 	beq	r2,zero,800e2c0 <alt_avalon_i2c_master_config_speed_set+0x3c>
 800e2b8:	e0bfff17 	ldw	r2,-4(fp)
 800e2bc:	1000021e 	bne	r2,zero,800e2c8 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 800e2c0:	00bfff04 	movi	r2,-4
 800e2c4:	00002906 	br	800e36c <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 800e2c8:	e0bffd17 	ldw	r2,-12(fp)
 800e2cc:	10c00c17 	ldw	r3,48(r2)
 800e2d0:	e0bfff17 	ldw	r2,-4(fp)
 800e2d4:	1085883a 	add	r2,r2,r2
 800e2d8:	100b883a 	mov	r5,r2
 800e2dc:	1809883a 	mov	r4,r3
 800e2e0:	800a9500 	call	800a950 <__udivsi3>
 800e2e4:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 800e2e8:	e0bffb17 	ldw	r2,-20(fp)
 800e2ec:	10800f04 	addi	r2,r2,60
 800e2f0:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 800e2f4:	e0bffb17 	ldw	r2,-20(fp)
 800e2f8:	10bff104 	addi	r2,r2,-60
 800e2fc:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 800e300:	e0ffff17 	ldw	r3,-4(fp)
 800e304:	008000b4 	movhi	r2,2
 800e308:	10a1a804 	addi	r2,r2,-31072
 800e30c:	10c0042e 	bgeu	r2,r3,800e320 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 800e310:	e0bffe17 	ldw	r2,-8(fp)
 800e314:	00c00044 	movi	r3,1
 800e318:	10c00115 	stw	r3,4(r2)
 800e31c:	00000206 	br	800e328 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 800e320:	e0bffe17 	ldw	r2,-8(fp)
 800e324:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 800e328:	e0bffb17 	ldw	r2,-20(fp)
 800e32c:	1007883a 	mov	r3,r2
 800e330:	e0bffe17 	ldw	r2,-8(fp)
 800e334:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 800e338:	e0bffc17 	ldw	r2,-16(fp)
 800e33c:	1007883a 	mov	r3,r2
 800e340:	e0bffe17 	ldw	r2,-8(fp)
 800e344:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 800e348:	e0bffb17 	ldw	r2,-20(fp)
 800e34c:	1007883a 	mov	r3,r2
 800e350:	e0bffb17 	ldw	r2,-20(fp)
 800e354:	1004d07a 	srli	r2,r2,1
 800e358:	1885c83a 	sub	r2,r3,r2
 800e35c:	1007883a 	mov	r3,r2
 800e360:	e0bffe17 	ldw	r2,-8(fp)
 800e364:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 800e368:	0005883a 	mov	r2,zero

}
 800e36c:	e037883a 	mov	sp,fp
 800e370:	dfc00117 	ldw	ra,4(sp)
 800e374:	df000017 	ldw	fp,0(sp)
 800e378:	dec00204 	addi	sp,sp,8
 800e37c:	f800283a 	ret

0800e380 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 800e380:	defffe04 	addi	sp,sp,-8
 800e384:	df000115 	stw	fp,4(sp)
 800e388:	df000104 	addi	fp,sp,4
 800e38c:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 800e390:	e0bfff17 	ldw	r2,-4(fp)
 800e394:	10800317 	ldw	r2,12(r2)
 800e398:	10800504 	addi	r2,r2,20
 800e39c:	10800037 	ldwio	r2,0(r2)
 800e3a0:	1080004c 	andi	r2,r2,1
 800e3a4:	10000226 	beq	r2,zero,800e3b0 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 800e3a8:	00800044 	movi	r2,1
 800e3ac:	00000106 	br	800e3b4 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 800e3b0:	0005883a 	mov	r2,zero
}
 800e3b4:	e037883a 	mov	sp,fp
 800e3b8:	df000017 	ldw	fp,0(sp)
 800e3bc:	dec00104 	addi	sp,sp,4
 800e3c0:	f800283a 	ret

0800e3c4 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 800e3c4:	defffb04 	addi	sp,sp,-20
 800e3c8:	df000415 	stw	fp,16(sp)
 800e3cc:	df000404 	addi	fp,sp,16
 800e3d0:	e13ffc15 	stw	r4,-16(fp)
 800e3d4:	e17ffd15 	stw	r5,-12(fp)
 800e3d8:	e1bffe15 	stw	r6,-8(fp)
 800e3dc:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 800e3e0:	e0bfff17 	ldw	r2,-4(fp)
 800e3e4:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 800e3e8:	00001406 	br	800e43c <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 800e3ec:	e0bfff17 	ldw	r2,-4(fp)
 800e3f0:	10800017 	ldw	r2,0(r2)
 800e3f4:	e0fffd17 	ldw	r3,-12(fp)
 800e3f8:	1885883a 	add	r2,r3,r2
 800e3fc:	e0fffc17 	ldw	r3,-16(fp)
 800e400:	18c00317 	ldw	r3,12(r3)
 800e404:	18c00104 	addi	r3,r3,4
 800e408:	18c00037 	ldwio	r3,0(r3)
 800e40c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 800e410:	e0bfff17 	ldw	r2,-4(fp)
 800e414:	10800017 	ldw	r2,0(r2)
 800e418:	10c00044 	addi	r3,r2,1
 800e41c:	e0bfff17 	ldw	r2,-4(fp)
 800e420:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 800e424:	e0bfff17 	ldw	r2,-4(fp)
 800e428:	10c00017 	ldw	r3,0(r2)
 800e42c:	e0bffe17 	ldw	r2,-8(fp)
 800e430:	1880021e 	bne	r3,r2,800e43c <alt_avalon_i2c_rx_read_available+0x78>
 800e434:	e0bffe17 	ldw	r2,-8(fp)
 800e438:	1000061e 	bne	r2,zero,800e454 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 800e43c:	e0bffc17 	ldw	r2,-16(fp)
 800e440:	10800317 	ldw	r2,12(r2)
 800e444:	10800704 	addi	r2,r2,28
 800e448:	10800037 	ldwio	r2,0(r2)
 800e44c:	103fe71e 	bne	r2,zero,800e3ec <__alt_data_end+0xff00e3ec>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 800e450:	00000106 	br	800e458 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 800e454:	0001883a 	nop
    }
}
 800e458:	0001883a 	nop
 800e45c:	e037883a 	mov	sp,fp
 800e460:	df000017 	ldw	fp,0(sp)
 800e464:	dec00104 	addi	sp,sp,4
 800e468:	f800283a 	ret

0800e46c <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 800e46c:	defffa04 	addi	sp,sp,-24
 800e470:	dfc00515 	stw	ra,20(sp)
 800e474:	df000415 	stw	fp,16(sp)
 800e478:	df000404 	addi	fp,sp,16
 800e47c:	e13ffe15 	stw	r4,-8(fp)
 800e480:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 800e484:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 800e488:	008000b4 	movhi	r2,2
 800e48c:	10a1a804 	addi	r2,r2,-31072
 800e490:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 800e494:	00000d06 	br	800e4cc <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 800e498:	e0bffd17 	ldw	r2,-12(fp)
 800e49c:	108002a8 	cmpgeui	r2,r2,10
 800e4a0:	1000021e 	bne	r2,zero,800e4ac <alt_avalon_i2c_rx_read+0x40>
 800e4a4:	0109c404 	movi	r4,10000
 800e4a8:	801049c0 	call	801049c <alt_busy_sleep>
      if (--timeout == 0)
 800e4ac:	e0bffd17 	ldw	r2,-12(fp)
 800e4b0:	10bfffc4 	addi	r2,r2,-1
 800e4b4:	e0bffd15 	stw	r2,-12(fp)
 800e4b8:	e0bffd17 	ldw	r2,-12(fp)
 800e4bc:	1000031e 	bne	r2,zero,800e4cc <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 800e4c0:	00bfff84 	movi	r2,-2
 800e4c4:	e0bffc15 	stw	r2,-16(fp)
        break;
 800e4c8:	00000506 	br	800e4e0 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 800e4cc:	e0bffe17 	ldw	r2,-8(fp)
 800e4d0:	10800317 	ldw	r2,12(r2)
 800e4d4:	10800704 	addi	r2,r2,28
 800e4d8:	10800037 	ldwio	r2,0(r2)
 800e4dc:	103fee26 	beq	r2,zero,800e498 <__alt_data_end+0xff00e498>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 800e4e0:	e0bffe17 	ldw	r2,-8(fp)
 800e4e4:	10800317 	ldw	r2,12(r2)
 800e4e8:	10800104 	addi	r2,r2,4
 800e4ec:	10800037 	ldwio	r2,0(r2)
 800e4f0:	1007883a 	mov	r3,r2
 800e4f4:	e0bfff17 	ldw	r2,-4(fp)
 800e4f8:	10c00005 	stb	r3,0(r2)
        
    return status;
 800e4fc:	e0bffc17 	ldw	r2,-16(fp)
}
 800e500:	e037883a 	mov	sp,fp
 800e504:	dfc00117 	ldw	ra,4(sp)
 800e508:	df000017 	ldw	fp,0(sp)
 800e50c:	dec00204 	addi	sp,sp,8
 800e510:	f800283a 	ret

0800e514 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 800e514:	defff804 	addi	sp,sp,-32
 800e518:	dfc00715 	stw	ra,28(sp)
 800e51c:	df000615 	stw	fp,24(sp)
 800e520:	df000604 	addi	fp,sp,24
 800e524:	e13ffc15 	stw	r4,-16(fp)
 800e528:	2809883a 	mov	r4,r5
 800e52c:	3007883a 	mov	r3,r6
 800e530:	3805883a 	mov	r2,r7
 800e534:	e13ffd05 	stb	r4,-12(fp)
 800e538:	e0fffe05 	stb	r3,-8(fp)
 800e53c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 800e540:	0089c404 	movi	r2,10000
 800e544:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800e548:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 800e54c:	00000c06 	br	800e580 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 800e550:	e0bffa17 	ldw	r2,-24(fp)
 800e554:	108002a8 	cmpgeui	r2,r2,10
 800e558:	1000021e 	bne	r2,zero,800e564 <alt_avalon_i2c_cmd_write+0x50>
 800e55c:	0109c404 	movi	r4,10000
 800e560:	801049c0 	call	801049c <alt_busy_sleep>
      if (--timeout == 0)
 800e564:	e0bffa17 	ldw	r2,-24(fp)
 800e568:	10bfffc4 	addi	r2,r2,-1
 800e56c:	e0bffa15 	stw	r2,-24(fp)
 800e570:	e0bffa17 	ldw	r2,-24(fp)
 800e574:	1000021e 	bne	r2,zero,800e580 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 800e578:	00bfff84 	movi	r2,-2
 800e57c:	00001906 	br	800e5e4 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 800e580:	e0bffc17 	ldw	r2,-16(fp)
 800e584:	10800317 	ldw	r2,12(r2)
 800e588:	10800404 	addi	r2,r2,16
 800e58c:	10800037 	ldwio	r2,0(r2)
 800e590:	1080004c 	andi	r2,r2,1
 800e594:	103fee26 	beq	r2,zero,800e550 <__alt_data_end+0xff00e550>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 800e598:	e0bffc17 	ldw	r2,-16(fp)
 800e59c:	10800317 	ldw	r2,12(r2)
 800e5a0:	e13ffd03 	ldbu	r4,-12(fp)
 800e5a4:	e0fffe03 	ldbu	r3,-8(fp)
 800e5a8:	1806927a 	slli	r3,r3,9
 800e5ac:	20c8b03a 	or	r4,r4,r3
 800e5b0:	e0ffff03 	ldbu	r3,-4(fp)
 800e5b4:	1806923a 	slli	r3,r3,8
 800e5b8:	20c6b03a 	or	r3,r4,r3
 800e5bc:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 800e5c0:	e0bffb04 	addi	r2,fp,-20
 800e5c4:	100b883a 	mov	r5,r2
 800e5c8:	e13ffc17 	ldw	r4,-16(fp)
 800e5cc:	800e7540 	call	800e754 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 800e5d0:	e0bffb04 	addi	r2,fp,-20
 800e5d4:	100b883a 	mov	r5,r2
 800e5d8:	e13ffc17 	ldw	r4,-16(fp)
 800e5dc:	800e7a00 	call	800e7a0 <alt_avalon_i2c_check_arblost>
    
    return status;
 800e5e0:	e0bffb17 	ldw	r2,-20(fp)
}
 800e5e4:	e037883a 	mov	sp,fp
 800e5e8:	dfc00117 	ldw	ra,4(sp)
 800e5ec:	df000017 	ldw	fp,0(sp)
 800e5f0:	dec00204 	addi	sp,sp,8
 800e5f4:	f800283a 	ret

0800e5f8 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 800e5f8:	defffa04 	addi	sp,sp,-24
 800e5fc:	dfc00515 	stw	ra,20(sp)
 800e600:	df000415 	stw	fp,16(sp)
 800e604:	df000404 	addi	fp,sp,16
 800e608:	e13ffd15 	stw	r4,-12(fp)
 800e60c:	e17ffe15 	stw	r5,-8(fp)
 800e610:	3005883a 	mov	r2,r6
 800e614:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 800e618:	e0bffd17 	ldw	r2,-12(fp)
 800e61c:	10800d17 	ldw	r2,52(r2)
 800e620:	10800058 	cmpnei	r2,r2,1
 800e624:	10001c1e 	bne	r2,zero,800e698 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 800e628:	e0bffd17 	ldw	r2,-12(fp)
 800e62c:	10800917 	ldw	r2,36(r2)
 800e630:	109e0014 	ori	r2,r2,30720
 800e634:	1004d1fa 	srli	r2,r2,7
 800e638:	1007883a 	mov	r3,r2
 800e63c:	00bfff84 	movi	r2,-2
 800e640:	1884703a 	and	r2,r3,r2
 800e644:	1007883a 	mov	r3,r2
 800e648:	e0bffe17 	ldw	r2,-8(fp)
 800e64c:	1884b03a 	or	r2,r3,r2
 800e650:	10803fcc 	andi	r2,r2,255
 800e654:	e0ffff03 	ldbu	r3,-4(fp)
 800e658:	000f883a 	mov	r7,zero
 800e65c:	180d883a 	mov	r6,r3
 800e660:	100b883a 	mov	r5,r2
 800e664:	e13ffd17 	ldw	r4,-12(fp)
 800e668:	800e5140 	call	800e514 <alt_avalon_i2c_cmd_write>
 800e66c:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 800e670:	e0bffd17 	ldw	r2,-12(fp)
 800e674:	10800917 	ldw	r2,36(r2)
 800e678:	10803fcc 	andi	r2,r2,255
 800e67c:	000f883a 	mov	r7,zero
 800e680:	000d883a 	mov	r6,zero
 800e684:	100b883a 	mov	r5,r2
 800e688:	e13ffd17 	ldw	r4,-12(fp)
 800e68c:	800e5140 	call	800e514 <alt_avalon_i2c_cmd_write>
 800e690:	e0bffc15 	stw	r2,-16(fp)
 800e694:	00000e06 	br	800e6d0 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 800e698:	e0bffd17 	ldw	r2,-12(fp)
 800e69c:	10800917 	ldw	r2,36(r2)
 800e6a0:	1085883a 	add	r2,r2,r2
 800e6a4:	1007883a 	mov	r3,r2
 800e6a8:	e0bffe17 	ldw	r2,-8(fp)
 800e6ac:	1884b03a 	or	r2,r3,r2
 800e6b0:	10803fcc 	andi	r2,r2,255
 800e6b4:	e0ffff03 	ldbu	r3,-4(fp)
 800e6b8:	000f883a 	mov	r7,zero
 800e6bc:	180d883a 	mov	r6,r3
 800e6c0:	100b883a 	mov	r5,r2
 800e6c4:	e13ffd17 	ldw	r4,-12(fp)
 800e6c8:	800e5140 	call	800e514 <alt_avalon_i2c_cmd_write>
 800e6cc:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 800e6d0:	e0bffc17 	ldw	r2,-16(fp)
}
 800e6d4:	e037883a 	mov	sp,fp
 800e6d8:	dfc00117 	ldw	ra,4(sp)
 800e6dc:	df000017 	ldw	fp,0(sp)
 800e6e0:	dec00204 	addi	sp,sp,8
 800e6e4:	f800283a 	ret

0800e6e8 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 800e6e8:	defffd04 	addi	sp,sp,-12
 800e6ec:	df000215 	stw	fp,8(sp)
 800e6f0:	df000204 	addi	fp,sp,8
 800e6f4:	e13ffe15 	stw	r4,-8(fp)
 800e6f8:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 800e6fc:	e0bffe17 	ldw	r2,-8(fp)
 800e700:	10c00917 	ldw	r3,36(r2)
 800e704:	e0bfff17 	ldw	r2,-4(fp)
 800e708:	10c00015 	stw	r3,0(r2)
}
 800e70c:	0001883a 	nop
 800e710:	e037883a 	mov	sp,fp
 800e714:	df000017 	ldw	fp,0(sp)
 800e718:	dec00104 	addi	sp,sp,4
 800e71c:	f800283a 	ret

0800e720 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 800e720:	defffd04 	addi	sp,sp,-12
 800e724:	df000215 	stw	fp,8(sp)
 800e728:	df000204 	addi	fp,sp,8
 800e72c:	e13ffe15 	stw	r4,-8(fp)
 800e730:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 800e734:	e0bffe17 	ldw	r2,-8(fp)
 800e738:	e0ffff17 	ldw	r3,-4(fp)
 800e73c:	10c00915 	stw	r3,36(r2)
}
 800e740:	0001883a 	nop
 800e744:	e037883a 	mov	sp,fp
 800e748:	df000017 	ldw	fp,0(sp)
 800e74c:	dec00104 	addi	sp,sp,4
 800e750:	f800283a 	ret

0800e754 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 800e754:	defffd04 	addi	sp,sp,-12
 800e758:	df000215 	stw	fp,8(sp)
 800e75c:	df000204 	addi	fp,sp,8
 800e760:	e13ffe15 	stw	r4,-8(fp)
 800e764:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 800e768:	e0bffe17 	ldw	r2,-8(fp)
 800e76c:	10800317 	ldw	r2,12(r2)
 800e770:	10800404 	addi	r2,r2,16
 800e774:	10800037 	ldwio	r2,0(r2)
 800e778:	1080010c 	andi	r2,r2,4
 800e77c:	10000326 	beq	r2,zero,800e78c <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 800e780:	e0bfff17 	ldw	r2,-4(fp)
 800e784:	00fffec4 	movi	r3,-5
 800e788:	10c00015 	stw	r3,0(r2)
    }
}
 800e78c:	0001883a 	nop
 800e790:	e037883a 	mov	sp,fp
 800e794:	df000017 	ldw	fp,0(sp)
 800e798:	dec00104 	addi	sp,sp,4
 800e79c:	f800283a 	ret

0800e7a0 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 800e7a0:	defffd04 	addi	sp,sp,-12
 800e7a4:	df000215 	stw	fp,8(sp)
 800e7a8:	df000204 	addi	fp,sp,8
 800e7ac:	e13ffe15 	stw	r4,-8(fp)
 800e7b0:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 800e7b4:	e0bffe17 	ldw	r2,-8(fp)
 800e7b8:	10800317 	ldw	r2,12(r2)
 800e7bc:	10800404 	addi	r2,r2,16
 800e7c0:	10800037 	ldwio	r2,0(r2)
 800e7c4:	1080020c 	andi	r2,r2,8
 800e7c8:	10000326 	beq	r2,zero,800e7d8 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 800e7cc:	e0bfff17 	ldw	r2,-4(fp)
 800e7d0:	00fffe84 	movi	r3,-6
 800e7d4:	10c00015 	stw	r3,0(r2)
    }
}
 800e7d8:	0001883a 	nop
 800e7dc:	e037883a 	mov	sp,fp
 800e7e0:	df000017 	ldw	fp,0(sp)
 800e7e4:	dec00104 	addi	sp,sp,4
 800e7e8:	f800283a 	ret

0800e7ec <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 800e7ec:	defff804 	addi	sp,sp,-32
 800e7f0:	dfc00715 	stw	ra,28(sp)
 800e7f4:	df000615 	stw	fp,24(sp)
 800e7f8:	df000604 	addi	fp,sp,24
 800e7fc:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800e800:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 800e804:	e0bfff17 	ldw	r2,-4(fp)
 800e808:	10800717 	ldw	r2,28(r2)
 800e80c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 800e810:	e0bffb17 	ldw	r2,-20(fp)
 800e814:	10800117 	ldw	r2,4(r2)
 800e818:	10800044 	addi	r2,r2,1
 800e81c:	1089c424 	muli	r2,r2,10000
 800e820:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 800e824:	e0bffd04 	addi	r2,fp,-12
 800e828:	100b883a 	mov	r5,r2
 800e82c:	e13fff17 	ldw	r4,-4(fp)
 800e830:	800f66c0 	call	800f66c <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 800e834:	e0bffd17 	ldw	r2,-12(fp)
 800e838:	100b883a 	mov	r5,r2
 800e83c:	e13fff17 	ldw	r4,-4(fp)
 800e840:	800f5a00 	call	800f5a0 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 800e844:	e0bffc04 	addi	r2,fp,-16
 800e848:	100b883a 	mov	r5,r2
 800e84c:	e13fff17 	ldw	r4,-4(fp)
 800e850:	800e7540 	call	800e754 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 800e854:	e0bffc17 	ldw	r2,-16(fp)
 800e858:	10002226 	beq	r2,zero,800e8e4 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
 800e85c:	e0bffb17 	ldw	r2,-20(fp)
 800e860:	10800217 	ldw	r2,8(r2)
 800e864:	10001d26 	beq	r2,zero,800e8dc <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800e868:	00000d06 	br	800e8a0 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
 800e86c:	e0bffa17 	ldw	r2,-24(fp)
 800e870:	108002a8 	cmpgeui	r2,r2,10
 800e874:	1000021e 	bne	r2,zero,800e880 <alt_avalon_i2c_interrupt_transaction_status+0x94>
 800e878:	0109c404 	movi	r4,10000
 800e87c:	801049c0 	call	801049c <alt_busy_sleep>
              if (--timeout == 0)
 800e880:	e0bffa17 	ldw	r2,-24(fp)
 800e884:	10bfffc4 	addi	r2,r2,-1
 800e888:	e0bffa15 	stw	r2,-24(fp)
 800e88c:	e0bffa17 	ldw	r2,-24(fp)
 800e890:	1000031e 	bne	r2,zero,800e8a0 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 800e894:	00bfff84 	movi	r2,-2
 800e898:	e0bffc15 	stw	r2,-16(fp)
                 break;
 800e89c:	00000306 	br	800e8ac <alt_avalon_i2c_interrupt_transaction_status+0xc0>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800e8a0:	e13fff17 	ldw	r4,-4(fp)
 800e8a4:	800e3800 	call	800e380 <alt_avalon_i2c_is_busy>
 800e8a8:	103ff01e 	bne	r2,zero,800e86c <__alt_data_end+0xff00e86c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 800e8ac:	e0bffb17 	ldw	r2,-20(fp)
 800e8b0:	10800017 	ldw	r2,0(r2)
 800e8b4:	e0fffe04 	addi	r3,fp,-8
 800e8b8:	180f883a 	mov	r7,r3
 800e8bc:	000d883a 	mov	r6,zero
 800e8c0:	100b883a 	mov	r5,r2
 800e8c4:	e13fff17 	ldw	r4,-4(fp)
 800e8c8:	800e3c40 	call	800e3c4 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 800e8cc:	e13fff17 	ldw	r4,-4(fp)
 800e8d0:	800e0280 	call	800e028 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 800e8d4:	e0bffb17 	ldw	r2,-20(fp)
 800e8d8:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 800e8dc:	e0bffc17 	ldw	r2,-16(fp)
 800e8e0:	00000a06 	br	800e90c <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
 800e8e4:	e0bffb17 	ldw	r2,-20(fp)
 800e8e8:	10800217 	ldw	r2,8(r2)
 800e8ec:	10000626 	beq	r2,zero,800e908 <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 800e8f0:	e0bffd17 	ldw	r2,-12(fp)
 800e8f4:	100b883a 	mov	r5,r2
 800e8f8:	e13fff17 	ldw	r4,-4(fp)
 800e8fc:	800f6080 	call	800f608 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 800e900:	00bffe44 	movi	r2,-7
 800e904:	00000106 	br	800e90c <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 800e908:	0005883a 	mov	r2,zero
}
 800e90c:	e037883a 	mov	sp,fp
 800e910:	dfc00117 	ldw	ra,4(sp)
 800e914:	df000017 	ldw	fp,0(sp)
 800e918:	dec00204 	addi	sp,sp,8
 800e91c:	f800283a 	ret

0800e920 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 800e920:	defff704 	addi	sp,sp,-36
 800e924:	dfc00815 	stw	ra,32(sp)
 800e928:	df000715 	stw	fp,28(sp)
 800e92c:	df000704 	addi	fp,sp,28
 800e930:	e13ffc15 	stw	r4,-16(fp)
 800e934:	e17ffd15 	stw	r5,-12(fp)
 800e938:	e1bffe15 	stw	r6,-8(fp)
 800e93c:	3805883a 	mov	r2,r7
 800e940:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 800e944:	0089c404 	movi	r2,10000
 800e948:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 800e94c:	00002206 	br	800e9d8 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 800e950:	e0bffb17 	ldw	r2,-20(fp)
 800e954:	108002a8 	cmpgeui	r2,r2,10
 800e958:	1000021e 	bne	r2,zero,800e964 <alt_avalon_i2c_master_tx+0x44>
 800e95c:	0109c404 	movi	r4,10000
 800e960:	801049c0 	call	801049c <alt_busy_sleep>
      if (use_interrupts)
 800e964:	e0bfff03 	ldbu	r2,-4(fp)
 800e968:	10000926 	beq	r2,zero,800e990 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 800e96c:	00800044 	movi	r2,1
 800e970:	d8800015 	stw	r2,0(sp)
 800e974:	000f883a 	mov	r7,zero
 800e978:	e1bffe17 	ldw	r6,-8(fp)
 800e97c:	e17ffd17 	ldw	r5,-12(fp)
 800e980:	e13ffc17 	ldw	r4,-16(fp)
 800e984:	800eec80 	call	800eec8 <alt_avalon_i2c_master_transmit_using_interrupts>
 800e988:	e0bffa15 	stw	r2,-24(fp)
 800e98c:	00000806 	br	800e9b0 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 800e990:	00800044 	movi	r2,1
 800e994:	d8800015 	stw	r2,0(sp)
 800e998:	000f883a 	mov	r7,zero
 800e99c:	e1bffe17 	ldw	r6,-8(fp)
 800e9a0:	e17ffd17 	ldw	r5,-12(fp)
 800e9a4:	e13ffc17 	ldw	r4,-16(fp)
 800e9a8:	800ed0c0 	call	800ed0c <alt_avalon_i2c_master_transmit>
 800e9ac:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800e9b0:	e0bffa17 	ldw	r2,-24(fp)
 800e9b4:	10bffea0 	cmpeqi	r2,r2,-6
 800e9b8:	1000061e 	bne	r2,zero,800e9d4 <alt_avalon_i2c_master_tx+0xb4>
 800e9bc:	e0bffa17 	ldw	r2,-24(fp)
 800e9c0:	10bffee0 	cmpeqi	r2,r2,-5
 800e9c4:	1000031e 	bne	r2,zero,800e9d4 <alt_avalon_i2c_master_tx+0xb4>
 800e9c8:	e0bffa17 	ldw	r2,-24(fp)
 800e9cc:	10bffe58 	cmpnei	r2,r2,-7
 800e9d0:	1000061e 	bne	r2,zero,800e9ec <alt_avalon_i2c_master_tx+0xcc>
 800e9d4:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 800e9d8:	e0bffb17 	ldw	r2,-20(fp)
 800e9dc:	10ffffc4 	addi	r3,r2,-1
 800e9e0:	e0fffb15 	stw	r3,-20(fp)
 800e9e4:	103fda1e 	bne	r2,zero,800e950 <__alt_data_end+0xff00e950>
 800e9e8:	00000106 	br	800e9f0 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 800e9ec:	0001883a 	nop
    }

    return status;
 800e9f0:	e0bffa17 	ldw	r2,-24(fp)
}        
 800e9f4:	e037883a 	mov	sp,fp
 800e9f8:	dfc00117 	ldw	ra,4(sp)
 800e9fc:	df000017 	ldw	fp,0(sp)
 800ea00:	dec00204 	addi	sp,sp,8
 800ea04:	f800283a 	ret

0800ea08 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 800ea08:	defff704 	addi	sp,sp,-36
 800ea0c:	dfc00815 	stw	ra,32(sp)
 800ea10:	df000715 	stw	fp,28(sp)
 800ea14:	df000704 	addi	fp,sp,28
 800ea18:	e13ffc15 	stw	r4,-16(fp)
 800ea1c:	e17ffd15 	stw	r5,-12(fp)
 800ea20:	e1bffe15 	stw	r6,-8(fp)
 800ea24:	3805883a 	mov	r2,r7
 800ea28:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 800ea2c:	0089c404 	movi	r2,10000
 800ea30:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 800ea34:	e0bfff03 	ldbu	r2,-4(fp)
 800ea38:	10003426 	beq	r2,zero,800eb0c <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 800ea3c:	00001706 	br	800ea9c <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 800ea40:	e0bffb17 	ldw	r2,-20(fp)
 800ea44:	108002a8 	cmpgeui	r2,r2,10
 800ea48:	1000021e 	bne	r2,zero,800ea54 <alt_avalon_i2c_master_rx+0x4c>
 800ea4c:	0109c404 	movi	r4,10000
 800ea50:	801049c0 	call	801049c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 800ea54:	00800044 	movi	r2,1
 800ea58:	d8800015 	stw	r2,0(sp)
 800ea5c:	000f883a 	mov	r7,zero
 800ea60:	e1bffe17 	ldw	r6,-8(fp)
 800ea64:	e17ffd17 	ldw	r5,-12(fp)
 800ea68:	e13ffc17 	ldw	r4,-16(fp)
 800ea6c:	800f2dc0 	call	800f2dc <alt_avalon_i2c_master_receive_using_interrupts>
 800ea70:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800ea74:	e0bffa17 	ldw	r2,-24(fp)
 800ea78:	10bffea0 	cmpeqi	r2,r2,-6
 800ea7c:	1000061e 	bne	r2,zero,800ea98 <alt_avalon_i2c_master_rx+0x90>
 800ea80:	e0bffa17 	ldw	r2,-24(fp)
 800ea84:	10bffee0 	cmpeqi	r2,r2,-5
 800ea88:	1000031e 	bne	r2,zero,800ea98 <alt_avalon_i2c_master_rx+0x90>
 800ea8c:	e0bffa17 	ldw	r2,-24(fp)
 800ea90:	10bffe58 	cmpnei	r2,r2,-7
 800ea94:	1000221e 	bne	r2,zero,800eb20 <alt_avalon_i2c_master_rx+0x118>
 800ea98:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 800ea9c:	e0bffb17 	ldw	r2,-20(fp)
 800eaa0:	10ffffc4 	addi	r3,r2,-1
 800eaa4:	e0fffb15 	stw	r3,-20(fp)
 800eaa8:	103fe51e 	bne	r2,zero,800ea40 <__alt_data_end+0xff00ea40>
 800eaac:	00001f06 	br	800eb2c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 800eab0:	e0bffb17 	ldw	r2,-20(fp)
 800eab4:	108002a8 	cmpgeui	r2,r2,10
 800eab8:	1000021e 	bne	r2,zero,800eac4 <alt_avalon_i2c_master_rx+0xbc>
 800eabc:	0109c404 	movi	r4,10000
 800eac0:	801049c0 	call	801049c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 800eac4:	00800044 	movi	r2,1
 800eac8:	d8800015 	stw	r2,0(sp)
 800eacc:	000f883a 	mov	r7,zero
 800ead0:	e1bffe17 	ldw	r6,-8(fp)
 800ead4:	e17ffd17 	ldw	r5,-12(fp)
 800ead8:	e13ffc17 	ldw	r4,-16(fp)
 800eadc:	800f0d00 	call	800f0d0 <alt_avalon_i2c_master_receive>
 800eae0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800eae4:	e0bffa17 	ldw	r2,-24(fp)
 800eae8:	10bffea0 	cmpeqi	r2,r2,-6
 800eaec:	1000061e 	bne	r2,zero,800eb08 <alt_avalon_i2c_master_rx+0x100>
 800eaf0:	e0bffa17 	ldw	r2,-24(fp)
 800eaf4:	10bffee0 	cmpeqi	r2,r2,-5
 800eaf8:	1000031e 	bne	r2,zero,800eb08 <alt_avalon_i2c_master_rx+0x100>
 800eafc:	e0bffa17 	ldw	r2,-24(fp)
 800eb00:	10bffe58 	cmpnei	r2,r2,-7
 800eb04:	1000081e 	bne	r2,zero,800eb28 <alt_avalon_i2c_master_rx+0x120>
 800eb08:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 800eb0c:	e0bffb17 	ldw	r2,-20(fp)
 800eb10:	10ffffc4 	addi	r3,r2,-1
 800eb14:	e0fffb15 	stw	r3,-20(fp)
 800eb18:	103fe51e 	bne	r2,zero,800eab0 <__alt_data_end+0xff00eab0>
 800eb1c:	00000306 	br	800eb2c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 800eb20:	0001883a 	nop
 800eb24:	00000106 	br	800eb2c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 800eb28:	0001883a 	nop
      }
    }
    
    return status;
 800eb2c:	e0bffa17 	ldw	r2,-24(fp)
}        
 800eb30:	e037883a 	mov	sp,fp
 800eb34:	dfc00117 	ldw	ra,4(sp)
 800eb38:	df000017 	ldw	fp,0(sp)
 800eb3c:	dec00204 	addi	sp,sp,8
 800eb40:	f800283a 	ret

0800eb44 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 800eb44:	defff604 	addi	sp,sp,-40
 800eb48:	dfc00915 	stw	ra,36(sp)
 800eb4c:	df000815 	stw	fp,32(sp)
 800eb50:	df000804 	addi	fp,sp,32
 800eb54:	e13ffb15 	stw	r4,-20(fp)
 800eb58:	e17ffc15 	stw	r5,-16(fp)
 800eb5c:	e1bffd15 	stw	r6,-12(fp)
 800eb60:	e1fffe15 	stw	r7,-8(fp)
 800eb64:	e0800317 	ldw	r2,12(fp)
 800eb68:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 800eb6c:	0089c404 	movi	r2,10000
 800eb70:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 800eb74:	e0bfff03 	ldbu	r2,-4(fp)
 800eb78:	10005626 	beq	r2,zero,800ecd4 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 800eb7c:	00002806 	br	800ec20 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 800eb80:	e0bffa17 	ldw	r2,-24(fp)
 800eb84:	108002a8 	cmpgeui	r2,r2,10
 800eb88:	1000021e 	bne	r2,zero,800eb94 <alt_avalon_i2c_master_tx_rx+0x50>
 800eb8c:	0109c404 	movi	r4,10000
 800eb90:	801049c0 	call	801049c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 800eb94:	d8000015 	stw	zero,0(sp)
 800eb98:	000f883a 	mov	r7,zero
 800eb9c:	e1bffd17 	ldw	r6,-12(fp)
 800eba0:	e17ffc17 	ldw	r5,-16(fp)
 800eba4:	e13ffb17 	ldw	r4,-20(fp)
 800eba8:	800eec80 	call	800eec8 <alt_avalon_i2c_master_transmit_using_interrupts>
 800ebac:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800ebb0:	e0bff917 	ldw	r2,-28(fp)
 800ebb4:	10bffea0 	cmpeqi	r2,r2,-6
 800ebb8:	1000191e 	bne	r2,zero,800ec20 <alt_avalon_i2c_master_tx_rx+0xdc>
 800ebbc:	e0bff917 	ldw	r2,-28(fp)
 800ebc0:	10bffee0 	cmpeqi	r2,r2,-5
 800ebc4:	1000161e 	bne	r2,zero,800ec20 <alt_avalon_i2c_master_tx_rx+0xdc>
 800ebc8:	e0bff917 	ldw	r2,-28(fp)
 800ebcc:	10bffe58 	cmpnei	r2,r2,-7
 800ebd0:	1000011e 	bne	r2,zero,800ebd8 <alt_avalon_i2c_master_tx_rx+0x94>
 800ebd4:	00001206 	br	800ec20 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 800ebd8:	00800044 	movi	r2,1
 800ebdc:	d8800015 	stw	r2,0(sp)
 800ebe0:	01c00044 	movi	r7,1
 800ebe4:	e1800217 	ldw	r6,8(fp)
 800ebe8:	e17ffe17 	ldw	r5,-8(fp)
 800ebec:	e13ffb17 	ldw	r4,-20(fp)
 800ebf0:	800f2dc0 	call	800f2dc <alt_avalon_i2c_master_receive_using_interrupts>
 800ebf4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800ebf8:	e0bff917 	ldw	r2,-28(fp)
 800ebfc:	10bffea0 	cmpeqi	r2,r2,-6
 800ec00:	1000061e 	bne	r2,zero,800ec1c <alt_avalon_i2c_master_tx_rx+0xd8>
 800ec04:	e0bff917 	ldw	r2,-28(fp)
 800ec08:	10bffee0 	cmpeqi	r2,r2,-5
 800ec0c:	1000031e 	bne	r2,zero,800ec1c <alt_avalon_i2c_master_tx_rx+0xd8>
 800ec10:	e0bff917 	ldw	r2,-28(fp)
 800ec14:	10bffe58 	cmpnei	r2,r2,-7
 800ec18:	1000331e 	bne	r2,zero,800ece8 <alt_avalon_i2c_master_tx_rx+0x1a4>
 800ec1c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 800ec20:	e0bffa17 	ldw	r2,-24(fp)
 800ec24:	10ffffc4 	addi	r3,r2,-1
 800ec28:	e0fffa15 	stw	r3,-24(fp)
 800ec2c:	103fd41e 	bne	r2,zero,800eb80 <__alt_data_end+0xff00eb80>
 800ec30:	00003006 	br	800ecf4 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 800ec34:	e0bffa17 	ldw	r2,-24(fp)
 800ec38:	108002a8 	cmpgeui	r2,r2,10
 800ec3c:	1000021e 	bne	r2,zero,800ec48 <alt_avalon_i2c_master_tx_rx+0x104>
 800ec40:	0109c404 	movi	r4,10000
 800ec44:	801049c0 	call	801049c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 800ec48:	d8000015 	stw	zero,0(sp)
 800ec4c:	000f883a 	mov	r7,zero
 800ec50:	e1bffd17 	ldw	r6,-12(fp)
 800ec54:	e17ffc17 	ldw	r5,-16(fp)
 800ec58:	e13ffb17 	ldw	r4,-20(fp)
 800ec5c:	800ed0c0 	call	800ed0c <alt_avalon_i2c_master_transmit>
 800ec60:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800ec64:	e0bff917 	ldw	r2,-28(fp)
 800ec68:	10bffea0 	cmpeqi	r2,r2,-6
 800ec6c:	1000191e 	bne	r2,zero,800ecd4 <alt_avalon_i2c_master_tx_rx+0x190>
 800ec70:	e0bff917 	ldw	r2,-28(fp)
 800ec74:	10bffee0 	cmpeqi	r2,r2,-5
 800ec78:	1000161e 	bne	r2,zero,800ecd4 <alt_avalon_i2c_master_tx_rx+0x190>
 800ec7c:	e0bff917 	ldw	r2,-28(fp)
 800ec80:	10bffe58 	cmpnei	r2,r2,-7
 800ec84:	1000011e 	bne	r2,zero,800ec8c <alt_avalon_i2c_master_tx_rx+0x148>
 800ec88:	00001206 	br	800ecd4 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 800ec8c:	00800044 	movi	r2,1
 800ec90:	d8800015 	stw	r2,0(sp)
 800ec94:	01c00044 	movi	r7,1
 800ec98:	e1800217 	ldw	r6,8(fp)
 800ec9c:	e17ffe17 	ldw	r5,-8(fp)
 800eca0:	e13ffb17 	ldw	r4,-20(fp)
 800eca4:	800f0d00 	call	800f0d0 <alt_avalon_i2c_master_receive>
 800eca8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800ecac:	e0bff917 	ldw	r2,-28(fp)
 800ecb0:	10bffea0 	cmpeqi	r2,r2,-6
 800ecb4:	1000061e 	bne	r2,zero,800ecd0 <alt_avalon_i2c_master_tx_rx+0x18c>
 800ecb8:	e0bff917 	ldw	r2,-28(fp)
 800ecbc:	10bffee0 	cmpeqi	r2,r2,-5
 800ecc0:	1000031e 	bne	r2,zero,800ecd0 <alt_avalon_i2c_master_tx_rx+0x18c>
 800ecc4:	e0bff917 	ldw	r2,-28(fp)
 800ecc8:	10bffe58 	cmpnei	r2,r2,-7
 800eccc:	1000081e 	bne	r2,zero,800ecf0 <alt_avalon_i2c_master_tx_rx+0x1ac>
 800ecd0:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 800ecd4:	e0bffa17 	ldw	r2,-24(fp)
 800ecd8:	10ffffc4 	addi	r3,r2,-1
 800ecdc:	e0fffa15 	stw	r3,-24(fp)
 800ece0:	103fd41e 	bne	r2,zero,800ec34 <__alt_data_end+0xff00ec34>
 800ece4:	00000306 	br	800ecf4 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 800ece8:	0001883a 	nop
 800ecec:	00000106 	br	800ecf4 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 800ecf0:	0001883a 	nop
      }
    }
    
    return status;
 800ecf4:	e0bff917 	ldw	r2,-28(fp)
}                                       
 800ecf8:	e037883a 	mov	sp,fp
 800ecfc:	dfc00117 	ldw	ra,4(sp)
 800ed00:	df000017 	ldw	fp,0(sp)
 800ed04:	dec00204 	addi	sp,sp,8
 800ed08:	f800283a 	ret

0800ed0c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 800ed0c:	defff704 	addi	sp,sp,-36
 800ed10:	dfc00815 	stw	ra,32(sp)
 800ed14:	df000715 	stw	fp,28(sp)
 800ed18:	df000704 	addi	fp,sp,28
 800ed1c:	e13ffb15 	stw	r4,-20(fp)
 800ed20:	e17ffc15 	stw	r5,-16(fp)
 800ed24:	e1bffd15 	stw	r6,-12(fp)
 800ed28:	3807883a 	mov	r3,r7
 800ed2c:	e0800217 	ldw	r2,8(fp)
 800ed30:	e0fffe05 	stb	r3,-8(fp)
 800ed34:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800ed38:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 800ed3c:	e0bffd17 	ldw	r2,-12(fp)
 800ed40:	1089c424 	muli	r2,r2,10000
 800ed44:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 800ed48:	e0bffd17 	ldw	r2,-12(fp)
 800ed4c:	1000021e 	bne	r2,zero,800ed58 <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 800ed50:	0005883a 	mov	r2,zero
 800ed54:	00005706 	br	800eeb4 <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 800ed58:	e0bffe03 	ldbu	r2,-8(fp)
 800ed5c:	10000a1e 	bne	r2,zero,800ed88 <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 800ed60:	e13ffb17 	ldw	r4,-20(fp)
 800ed64:	800df900 	call	800df90 <alt_avalon_i2c_enable>
 800ed68:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 800ed6c:	e0bffa17 	ldw	r2,-24(fp)
 800ed70:	10000226 	beq	r2,zero,800ed7c <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
 800ed74:	e0bffa17 	ldw	r2,-24(fp)
 800ed78:	00004e06 	br	800eeb4 <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800ed7c:	01400704 	movi	r5,28
 800ed80:	e13ffb17 	ldw	r4,-20(fp)
 800ed84:	800f5640 	call	800f564 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 800ed88:	e0bffe03 	ldbu	r2,-8(fp)
 800ed8c:	100d883a 	mov	r6,r2
 800ed90:	000b883a 	mov	r5,zero
 800ed94:	e13ffb17 	ldw	r4,-20(fp)
 800ed98:	800e5f80 	call	800e5f8 <alt_avalon_i2c_send_address>
 800ed9c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 800eda0:	e0bffa17 	ldw	r2,-24(fp)
 800eda4:	1000271e 	bne	r2,zero,800ee44 <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800eda8:	00000f06 	br	800ede8 <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 800edac:	e0bffc17 	ldw	r2,-16(fp)
 800edb0:	10800003 	ldbu	r2,0(r2)
 800edb4:	10803fcc 	andi	r2,r2,255
 800edb8:	000f883a 	mov	r7,zero
 800edbc:	000d883a 	mov	r6,zero
 800edc0:	100b883a 	mov	r5,r2
 800edc4:	e13ffb17 	ldw	r4,-20(fp)
 800edc8:	800e5140 	call	800e514 <alt_avalon_i2c_cmd_write>
 800edcc:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 800edd0:	e0bffc17 	ldw	r2,-16(fp)
 800edd4:	10800044 	addi	r2,r2,1
 800edd8:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800eddc:	e0bffd17 	ldw	r2,-12(fp)
 800ede0:	10bfffc4 	addi	r2,r2,-1
 800ede4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800ede8:	e0bffd17 	ldw	r2,-12(fp)
 800edec:	108000b0 	cmpltui	r2,r2,2
 800edf0:	1000021e 	bne	r2,zero,800edfc <alt_avalon_i2c_master_transmit+0xf0>
 800edf4:	e0bffa17 	ldw	r2,-24(fp)
 800edf8:	103fec26 	beq	r2,zero,800edac <__alt_data_end+0xff00edac>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 800edfc:	e0bffa17 	ldw	r2,-24(fp)
 800ee00:	1000101e 	bne	r2,zero,800ee44 <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 800ee04:	e0bffc17 	ldw	r2,-16(fp)
 800ee08:	10800003 	ldbu	r2,0(r2)
 800ee0c:	10803fcc 	andi	r2,r2,255
 800ee10:	e0ffff03 	ldbu	r3,-4(fp)
 800ee14:	180f883a 	mov	r7,r3
 800ee18:	000d883a 	mov	r6,zero
 800ee1c:	100b883a 	mov	r5,r2
 800ee20:	e13ffb17 	ldw	r4,-20(fp)
 800ee24:	800e5140 	call	800e514 <alt_avalon_i2c_cmd_write>
 800ee28:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 800ee2c:	e0bffc17 	ldw	r2,-16(fp)
 800ee30:	10800044 	addi	r2,r2,1
 800ee34:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800ee38:	e0bffd17 	ldw	r2,-12(fp)
 800ee3c:	10bfffc4 	addi	r2,r2,-1
 800ee40:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 800ee44:	e0bfff03 	ldbu	r2,-4(fp)
 800ee48:	1000101e 	bne	r2,zero,800ee8c <alt_avalon_i2c_master_transmit+0x180>
 800ee4c:	e0bffa17 	ldw	r2,-24(fp)
 800ee50:	10001726 	beq	r2,zero,800eeb0 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 800ee54:	00000d06 	br	800ee8c <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
 800ee58:	e0bff917 	ldw	r2,-28(fp)
 800ee5c:	108002a8 	cmpgeui	r2,r2,10
 800ee60:	1000021e 	bne	r2,zero,800ee6c <alt_avalon_i2c_master_transmit+0x160>
 800ee64:	0109c404 	movi	r4,10000
 800ee68:	801049c0 	call	801049c <alt_busy_sleep>
            if (--timeout == 0)
 800ee6c:	e0bff917 	ldw	r2,-28(fp)
 800ee70:	10bfffc4 	addi	r2,r2,-1
 800ee74:	e0bff915 	stw	r2,-28(fp)
 800ee78:	e0bff917 	ldw	r2,-28(fp)
 800ee7c:	1000031e 	bne	r2,zero,800ee8c <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 800ee80:	00bfff84 	movi	r2,-2
 800ee84:	e0bffa15 	stw	r2,-24(fp)
               break;
 800ee88:	00000306 	br	800ee98 <alt_avalon_i2c_master_transmit+0x18c>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 800ee8c:	e13ffb17 	ldw	r4,-20(fp)
 800ee90:	800e3800 	call	800e380 <alt_avalon_i2c_is_busy>
 800ee94:	103ff01e 	bne	r2,zero,800ee58 <__alt_data_end+0xff00ee58>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 800ee98:	e0bffa04 	addi	r2,fp,-24
 800ee9c:	100b883a 	mov	r5,r2
 800eea0:	e13ffb17 	ldw	r4,-20(fp)
 800eea4:	800e7540 	call	800e754 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 800eea8:	e13ffb17 	ldw	r4,-20(fp)
 800eeac:	800e0280 	call	800e028 <alt_avalon_i2c_disable>
    }


    return status;
 800eeb0:	e0bffa17 	ldw	r2,-24(fp)
}
 800eeb4:	e037883a 	mov	sp,fp
 800eeb8:	dfc00117 	ldw	ra,4(sp)
 800eebc:	df000017 	ldw	fp,0(sp)
 800eec0:	dec00204 	addi	sp,sp,8
 800eec4:	f800283a 	ret

0800eec8 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 800eec8:	defff604 	addi	sp,sp,-40
 800eecc:	dfc00915 	stw	ra,36(sp)
 800eed0:	df000815 	stw	fp,32(sp)
 800eed4:	df000804 	addi	fp,sp,32
 800eed8:	e13ffb15 	stw	r4,-20(fp)
 800eedc:	e17ffc15 	stw	r5,-16(fp)
 800eee0:	e1bffd15 	stw	r6,-12(fp)
 800eee4:	3807883a 	mov	r3,r7
 800eee8:	e0800217 	ldw	r2,8(fp)
 800eeec:	e0fffe05 	stb	r3,-8(fp)
 800eef0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800eef4:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 800eef8:	e0bffd17 	ldw	r2,-12(fp)
 800eefc:	1089c424 	muli	r2,r2,10000
 800ef00:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 800ef04:	e0bffb17 	ldw	r2,-20(fp)
 800ef08:	10800717 	ldw	r2,28(r2)
 800ef0c:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 800ef10:	e0bffd17 	ldw	r2,-12(fp)
 800ef14:	1000021e 	bne	r2,zero,800ef20 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
 800ef18:	0005883a 	mov	r2,zero
 800ef1c:	00006706 	br	800f0bc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 800ef20:	e0bffb17 	ldw	r2,-20(fp)
 800ef24:	10c00617 	ldw	r3,24(r2)
 800ef28:	00820074 	movhi	r2,2049
 800ef2c:	10b70504 	addi	r2,r2,-9196
 800ef30:	18800226 	beq	r3,r2,800ef3c <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 800ef34:	00bfff44 	movi	r2,-3
 800ef38:	00006006 	br	800f0bc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 800ef3c:	e0bffe03 	ldbu	r2,-8(fp)
 800ef40:	10000a1e 	bne	r2,zero,800ef6c <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 800ef44:	e13ffb17 	ldw	r4,-20(fp)
 800ef48:	800df900 	call	800df90 <alt_avalon_i2c_enable>
 800ef4c:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 800ef50:	e0bff817 	ldw	r2,-32(fp)
 800ef54:	10000226 	beq	r2,zero,800ef60 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
 800ef58:	e0bff817 	ldw	r2,-32(fp)
 800ef5c:	00005706 	br	800f0bc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800ef60:	01400704 	movi	r5,28
 800ef64:	e13ffb17 	ldw	r4,-20(fp)
 800ef68:	800f5640 	call	800f564 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 800ef6c:	e0bffe03 	ldbu	r2,-8(fp)
 800ef70:	100d883a 	mov	r6,r2
 800ef74:	000b883a 	mov	r5,zero
 800ef78:	e13ffb17 	ldw	r4,-20(fp)
 800ef7c:	800e5f80 	call	800e5f8 <alt_avalon_i2c_send_address>
 800ef80:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 800ef84:	e0bff817 	ldw	r2,-32(fp)
 800ef88:	1000271e 	bne	r2,zero,800f028 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800ef8c:	00000f06 	br	800efcc <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 800ef90:	e0bffc17 	ldw	r2,-16(fp)
 800ef94:	10800003 	ldbu	r2,0(r2)
 800ef98:	10803fcc 	andi	r2,r2,255
 800ef9c:	000f883a 	mov	r7,zero
 800efa0:	000d883a 	mov	r6,zero
 800efa4:	100b883a 	mov	r5,r2
 800efa8:	e13ffb17 	ldw	r4,-20(fp)
 800efac:	800e5140 	call	800e514 <alt_avalon_i2c_cmd_write>
 800efb0:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 800efb4:	e0bffc17 	ldw	r2,-16(fp)
 800efb8:	10800044 	addi	r2,r2,1
 800efbc:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800efc0:	e0bffd17 	ldw	r2,-12(fp)
 800efc4:	10bfffc4 	addi	r2,r2,-1
 800efc8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800efcc:	e0bffd17 	ldw	r2,-12(fp)
 800efd0:	108000b0 	cmpltui	r2,r2,2
 800efd4:	1000021e 	bne	r2,zero,800efe0 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
 800efd8:	e0bff817 	ldw	r2,-32(fp)
 800efdc:	103fec26 	beq	r2,zero,800ef90 <__alt_data_end+0xff00ef90>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 800efe0:	e0bff817 	ldw	r2,-32(fp)
 800efe4:	1000101e 	bne	r2,zero,800f028 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 800efe8:	e0bffc17 	ldw	r2,-16(fp)
 800efec:	10800003 	ldbu	r2,0(r2)
 800eff0:	10803fcc 	andi	r2,r2,255
 800eff4:	e0ffff03 	ldbu	r3,-4(fp)
 800eff8:	180f883a 	mov	r7,r3
 800effc:	000d883a 	mov	r6,zero
 800f000:	100b883a 	mov	r5,r2
 800f004:	e13ffb17 	ldw	r4,-20(fp)
 800f008:	800e5140 	call	800e514 <alt_avalon_i2c_cmd_write>
 800f00c:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 800f010:	e0bffc17 	ldw	r2,-16(fp)
 800f014:	10800044 	addi	r2,r2,1
 800f018:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800f01c:	e0bffd17 	ldw	r2,-12(fp)
 800f020:	10bfffc4 	addi	r2,r2,-1
 800f024:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 800f028:	e0bff817 	ldw	r2,-32(fp)
 800f02c:	10001426 	beq	r2,zero,800f080 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 800f030:	00000d06 	br	800f068 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 800f034:	e0bff917 	ldw	r2,-28(fp)
 800f038:	108002a8 	cmpgeui	r2,r2,10
 800f03c:	1000021e 	bne	r2,zero,800f048 <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
 800f040:	0109c404 	movi	r4,10000
 800f044:	801049c0 	call	801049c <alt_busy_sleep>
            if (--timeout == 0)
 800f048:	e0bff917 	ldw	r2,-28(fp)
 800f04c:	10bfffc4 	addi	r2,r2,-1
 800f050:	e0bff915 	stw	r2,-28(fp)
 800f054:	e0bff917 	ldw	r2,-28(fp)
 800f058:	1000031e 	bne	r2,zero,800f068 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 800f05c:	00bfff84 	movi	r2,-2
 800f060:	e0bff815 	stw	r2,-32(fp)
               break;
 800f064:	00000306 	br	800f074 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 800f068:	e13ffb17 	ldw	r4,-20(fp)
 800f06c:	800e3800 	call	800e380 <alt_avalon_i2c_is_busy>
 800f070:	103ff01e 	bne	r2,zero,800f034 <__alt_data_end+0xff00f034>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 800f074:	e13ffb17 	ldw	r4,-20(fp)
 800f078:	800e0280 	call	800e028 <alt_avalon_i2c_disable>
 800f07c:	00000e06 	br	800f0b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
 800f080:	e0bfff03 	ldbu	r2,-4(fp)
 800f084:	10000c26 	beq	r2,zero,800f0b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800f088:	01400704 	movi	r5,28
 800f08c:	e13ffb17 	ldw	r4,-20(fp)
 800f090:	800f5640 	call	800f564 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 800f094:	000b883a 	mov	r5,zero
 800f098:	e13ffb17 	ldw	r4,-20(fp)
 800f09c:	800f7ac0 	call	800f7ac <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 800f0a0:	e0bffa17 	ldw	r2,-24(fp)
 800f0a4:	00c00044 	movi	r3,1
 800f0a8:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 800f0ac:	01400044 	movi	r5,1
 800f0b0:	e13ffb17 	ldw	r4,-20(fp)
 800f0b4:	800f6080 	call	800f608 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 800f0b8:	e0bff817 	ldw	r2,-32(fp)
}
 800f0bc:	e037883a 	mov	sp,fp
 800f0c0:	dfc00117 	ldw	ra,4(sp)
 800f0c4:	df000017 	ldw	fp,0(sp)
 800f0c8:	dec00204 	addi	sp,sp,8
 800f0cc:	f800283a 	ret

0800f0d0 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 800f0d0:	defff404 	addi	sp,sp,-48
 800f0d4:	dfc00b15 	stw	ra,44(sp)
 800f0d8:	df000a15 	stw	fp,40(sp)
 800f0dc:	df000a04 	addi	fp,sp,40
 800f0e0:	e13ffb15 	stw	r4,-20(fp)
 800f0e4:	e17ffc15 	stw	r5,-16(fp)
 800f0e8:	e1bffd15 	stw	r6,-12(fp)
 800f0ec:	3807883a 	mov	r3,r7
 800f0f0:	e0800217 	ldw	r2,8(fp)
 800f0f4:	e0fffe05 	stb	r3,-8(fp)
 800f0f8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800f0fc:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 800f100:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 800f104:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 800f108:	e0bffd17 	ldw	r2,-12(fp)
 800f10c:	1000021e 	bne	r2,zero,800f118 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 800f110:	0005883a 	mov	r2,zero
 800f114:	00006c06 	br	800f2c8 <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 800f118:	e0bffe03 	ldbu	r2,-8(fp)
 800f11c:	10000a1e 	bne	r2,zero,800f148 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 800f120:	e13ffb17 	ldw	r4,-20(fp)
 800f124:	800df900 	call	800df90 <alt_avalon_i2c_enable>
 800f128:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 800f12c:	e0bff917 	ldw	r2,-28(fp)
 800f130:	10000226 	beq	r2,zero,800f13c <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 800f134:	e0bff917 	ldw	r2,-28(fp)
 800f138:	00006306 	br	800f2c8 <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800f13c:	01400704 	movi	r5,28
 800f140:	e13ffb17 	ldw	r4,-20(fp)
 800f144:	800f5640 	call	800f564 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 800f148:	e0bffe03 	ldbu	r2,-8(fp)
 800f14c:	100d883a 	mov	r6,r2
 800f150:	01400044 	movi	r5,1
 800f154:	e13ffb17 	ldw	r4,-20(fp)
 800f158:	800e5f80 	call	800e5f8 <alt_avalon_i2c_send_address>
 800f15c:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 800f160:	e0bff917 	ldw	r2,-28(fp)
 800f164:	1000341e 	bne	r2,zero,800f238 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 800f168:	00001906 	br	800f1d0 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 800f16c:	000f883a 	mov	r7,zero
 800f170:	000d883a 	mov	r6,zero
 800f174:	000b883a 	mov	r5,zero
 800f178:	e13ffb17 	ldw	r4,-20(fp)
 800f17c:	800e5140 	call	800e514 <alt_avalon_i2c_cmd_write>
 800f180:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 800f184:	e0bff817 	ldw	r2,-32(fp)
 800f188:	10800044 	addi	r2,r2,1
 800f18c:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 800f190:	e0bff917 	ldw	r2,-28(fp)
 800f194:	10000e1e 	bne	r2,zero,800f1d0 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 800f198:	e0bffa04 	addi	r2,fp,-24
 800f19c:	100f883a 	mov	r7,r2
 800f1a0:	000d883a 	mov	r6,zero
 800f1a4:	e17ffc17 	ldw	r5,-16(fp)
 800f1a8:	e13ffb17 	ldw	r4,-20(fp)
 800f1ac:	800e3c40 	call	800e3c4 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 800f1b0:	e0bffa17 	ldw	r2,-24(fp)
 800f1b4:	e0fffc17 	ldw	r3,-16(fp)
 800f1b8:	1885883a 	add	r2,r3,r2
 800f1bc:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 800f1c0:	e0bffa17 	ldw	r2,-24(fp)
 800f1c4:	e0fff717 	ldw	r3,-36(fp)
 800f1c8:	1885883a 	add	r2,r3,r2
 800f1cc:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 800f1d0:	e0bffd17 	ldw	r2,-12(fp)
 800f1d4:	10bfffc4 	addi	r2,r2,-1
 800f1d8:	e0fff817 	ldw	r3,-32(fp)
 800f1dc:	1880022e 	bgeu	r3,r2,800f1e8 <alt_avalon_i2c_master_receive+0x118>
 800f1e0:	e0bff917 	ldw	r2,-28(fp)
 800f1e4:	103fe126 	beq	r2,zero,800f16c <__alt_data_end+0xff00f16c>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 800f1e8:	e0bff917 	ldw	r2,-28(fp)
 800f1ec:	1000121e 	bne	r2,zero,800f238 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 800f1f0:	e0bfff03 	ldbu	r2,-4(fp)
 800f1f4:	100f883a 	mov	r7,r2
 800f1f8:	000d883a 	mov	r6,zero
 800f1fc:	000b883a 	mov	r5,zero
 800f200:	e13ffb17 	ldw	r4,-20(fp)
 800f204:	800e5140 	call	800e514 <alt_avalon_i2c_cmd_write>
 800f208:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 800f20c:	00000a06 	br	800f238 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 800f210:	e17ffc17 	ldw	r5,-16(fp)
 800f214:	e13ffb17 	ldw	r4,-20(fp)
 800f218:	800e46c0 	call	800e46c <alt_avalon_i2c_rx_read>
 800f21c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 800f220:	e0bffc17 	ldw	r2,-16(fp)
 800f224:	10800044 	addi	r2,r2,1
 800f228:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 800f22c:	e0bff717 	ldw	r2,-36(fp)
 800f230:	10800044 	addi	r2,r2,1
 800f234:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 800f238:	e0fff717 	ldw	r3,-36(fp)
 800f23c:	e0bffd17 	ldw	r2,-12(fp)
 800f240:	1880022e 	bgeu	r3,r2,800f24c <alt_avalon_i2c_master_receive+0x17c>
 800f244:	e0bff917 	ldw	r2,-28(fp)
 800f248:	103ff126 	beq	r2,zero,800f210 <__alt_data_end+0xff00f210>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 800f24c:	e0bfff03 	ldbu	r2,-4(fp)
 800f250:	1000021e 	bne	r2,zero,800f25c <alt_avalon_i2c_master_receive+0x18c>
 800f254:	e0bff917 	ldw	r2,-28(fp)
 800f258:	10001a26 	beq	r2,zero,800f2c4 <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
 800f25c:	e0bffd17 	ldw	r2,-12(fp)
 800f260:	1089c424 	muli	r2,r2,10000
 800f264:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800f268:	00000d06 	br	800f2a0 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
 800f26c:	e0bff617 	ldw	r2,-40(fp)
 800f270:	108002a8 	cmpgeui	r2,r2,10
 800f274:	1000021e 	bne	r2,zero,800f280 <alt_avalon_i2c_master_receive+0x1b0>
 800f278:	0109c404 	movi	r4,10000
 800f27c:	801049c0 	call	801049c <alt_busy_sleep>
            if (--timeout == 0)
 800f280:	e0bff617 	ldw	r2,-40(fp)
 800f284:	10bfffc4 	addi	r2,r2,-1
 800f288:	e0bff615 	stw	r2,-40(fp)
 800f28c:	e0bff617 	ldw	r2,-40(fp)
 800f290:	1000031e 	bne	r2,zero,800f2a0 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 800f294:	00bfff84 	movi	r2,-2
 800f298:	e0bff915 	stw	r2,-28(fp)
               break;
 800f29c:	00000306 	br	800f2ac <alt_avalon_i2c_master_receive+0x1dc>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800f2a0:	e13ffb17 	ldw	r4,-20(fp)
 800f2a4:	800e3800 	call	800e380 <alt_avalon_i2c_is_busy>
 800f2a8:	103ff01e 	bne	r2,zero,800f26c <__alt_data_end+0xff00f26c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 800f2ac:	e0bff904 	addi	r2,fp,-28
 800f2b0:	100b883a 	mov	r5,r2
 800f2b4:	e13ffb17 	ldw	r4,-20(fp)
 800f2b8:	800e7540 	call	800e754 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 800f2bc:	e13ffb17 	ldw	r4,-20(fp)
 800f2c0:	800e0280 	call	800e028 <alt_avalon_i2c_disable>
    }

    return status;
 800f2c4:	e0bff917 	ldw	r2,-28(fp)
}
 800f2c8:	e037883a 	mov	sp,fp
 800f2cc:	dfc00117 	ldw	ra,4(sp)
 800f2d0:	df000017 	ldw	fp,0(sp)
 800f2d4:	dec00204 	addi	sp,sp,8
 800f2d8:	f800283a 	ret

0800f2dc <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 800f2dc:	defff504 	addi	sp,sp,-44
 800f2e0:	dfc00a15 	stw	ra,40(sp)
 800f2e4:	df000915 	stw	fp,36(sp)
 800f2e8:	df000904 	addi	fp,sp,36
 800f2ec:	e13ffb15 	stw	r4,-20(fp)
 800f2f0:	e17ffc15 	stw	r5,-16(fp)
 800f2f4:	e1bffd15 	stw	r6,-12(fp)
 800f2f8:	3807883a 	mov	r3,r7
 800f2fc:	e0800217 	ldw	r2,8(fp)
 800f300:	e0fffe05 	stb	r3,-8(fp)
 800f304:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800f308:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 800f30c:	e0bffb17 	ldw	r2,-20(fp)
 800f310:	10800717 	ldw	r2,28(r2)
 800f314:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 800f318:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 800f31c:	e0bffd17 	ldw	r2,-12(fp)
 800f320:	1000021e 	bne	r2,zero,800f32c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 800f324:	0005883a 	mov	r2,zero
 800f328:	00006206 	br	800f4b4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 800f32c:	e0bffb17 	ldw	r2,-20(fp)
 800f330:	10c00617 	ldw	r3,24(r2)
 800f334:	00820074 	movhi	r2,2049
 800f338:	10b70504 	addi	r2,r2,-9196
 800f33c:	18800226 	beq	r3,r2,800f348 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 800f340:	00bfff44 	movi	r2,-3
 800f344:	00005b06 	br	800f4b4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 800f348:	e0bffe03 	ldbu	r2,-8(fp)
 800f34c:	10000a1e 	bne	r2,zero,800f378 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 800f350:	e13ffb17 	ldw	r4,-20(fp)
 800f354:	800df900 	call	800df90 <alt_avalon_i2c_enable>
 800f358:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 800f35c:	e0bff717 	ldw	r2,-36(fp)
 800f360:	10000226 	beq	r2,zero,800f36c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 800f364:	e0bff717 	ldw	r2,-36(fp)
 800f368:	00005206 	br	800f4b4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800f36c:	01400704 	movi	r5,28
 800f370:	e13ffb17 	ldw	r4,-20(fp)
 800f374:	800f5640 	call	800f564 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 800f378:	e0bffe03 	ldbu	r2,-8(fp)
 800f37c:	100d883a 	mov	r6,r2
 800f380:	01400044 	movi	r5,1
 800f384:	e13ffb17 	ldw	r4,-20(fp)
 800f388:	800e5f80 	call	800e5f8 <alt_avalon_i2c_send_address>
 800f38c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 800f390:	e0bff717 	ldw	r2,-36(fp)
 800f394:	1000191e 	bne	r2,zero,800f3fc <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 800f398:	00000906 	br	800f3c0 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 800f39c:	000f883a 	mov	r7,zero
 800f3a0:	000d883a 	mov	r6,zero
 800f3a4:	000b883a 	mov	r5,zero
 800f3a8:	e13ffb17 	ldw	r4,-20(fp)
 800f3ac:	800e5140 	call	800e514 <alt_avalon_i2c_cmd_write>
 800f3b0:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 800f3b4:	e0bff917 	ldw	r2,-28(fp)
 800f3b8:	10800044 	addi	r2,r2,1
 800f3bc:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 800f3c0:	e0bffd17 	ldw	r2,-12(fp)
 800f3c4:	10bfffc4 	addi	r2,r2,-1
 800f3c8:	e0fff917 	ldw	r3,-28(fp)
 800f3cc:	1880022e 	bgeu	r3,r2,800f3d8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 800f3d0:	e0bff717 	ldw	r2,-36(fp)
 800f3d4:	103ff126 	beq	r2,zero,800f39c <__alt_data_end+0xff00f39c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 800f3d8:	e0bff717 	ldw	r2,-36(fp)
 800f3dc:	1000071e 	bne	r2,zero,800f3fc <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 800f3e0:	e0bfff03 	ldbu	r2,-4(fp)
 800f3e4:	100f883a 	mov	r7,r2
 800f3e8:	000d883a 	mov	r6,zero
 800f3ec:	000b883a 	mov	r5,zero
 800f3f0:	e13ffb17 	ldw	r4,-20(fp)
 800f3f4:	800e5140 	call	800e514 <alt_avalon_i2c_cmd_write>
 800f3f8:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 800f3fc:	e0bff717 	ldw	r2,-36(fp)
 800f400:	10001726 	beq	r2,zero,800f460 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
 800f404:	e0bffd17 	ldw	r2,-12(fp)
 800f408:	1089c424 	muli	r2,r2,10000
 800f40c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800f410:	00000d06 	br	800f448 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
 800f414:	e0bff817 	ldw	r2,-32(fp)
 800f418:	108002a8 	cmpgeui	r2,r2,10
 800f41c:	1000021e 	bne	r2,zero,800f428 <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
 800f420:	0109c404 	movi	r4,10000
 800f424:	801049c0 	call	801049c <alt_busy_sleep>
            if (--timeout == 0)
 800f428:	e0bff817 	ldw	r2,-32(fp)
 800f42c:	10bfffc4 	addi	r2,r2,-1
 800f430:	e0bff815 	stw	r2,-32(fp)
 800f434:	e0bff817 	ldw	r2,-32(fp)
 800f438:	1000031e 	bne	r2,zero,800f448 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 800f43c:	00bfff84 	movi	r2,-2
 800f440:	e0bff715 	stw	r2,-36(fp)
               break;
 800f444:	00000306 	br	800f454 <alt_avalon_i2c_master_receive_using_interrupts+0x178>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800f448:	e13ffb17 	ldw	r4,-20(fp)
 800f44c:	800e3800 	call	800e380 <alt_avalon_i2c_is_busy>
 800f450:	103ff01e 	bne	r2,zero,800f414 <__alt_data_end+0xff00f414>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 800f454:	e13ffb17 	ldw	r4,-20(fp)
 800f458:	800e0280 	call	800e028 <alt_avalon_i2c_disable>
 800f45c:	00001406 	br	800f4b0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
 800f460:	e0bfff03 	ldbu	r2,-4(fp)
 800f464:	10001226 	beq	r2,zero,800f4b0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800f468:	01400704 	movi	r5,28
 800f46c:	e13ffb17 	ldw	r4,-20(fp)
 800f470:	800f5640 	call	800f564 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 800f474:	000b883a 	mov	r5,zero
 800f478:	e13ffb17 	ldw	r4,-20(fp)
 800f47c:	800f6fc0 	call	800f6fc <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 800f480:	e0bffa17 	ldw	r2,-24(fp)
 800f484:	00c00084 	movi	r3,2
 800f488:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 800f48c:	e0bffa17 	ldw	r2,-24(fp)
 800f490:	e0fffc17 	ldw	r3,-16(fp)
 800f494:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 800f498:	e0bffa17 	ldw	r2,-24(fp)
 800f49c:	e0fffd17 	ldw	r3,-12(fp)
 800f4a0:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 800f4a4:	01400084 	movi	r5,2
 800f4a8:	e13ffb17 	ldw	r4,-20(fp)
 800f4ac:	800f6080 	call	800f608 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 800f4b0:	e0bff717 	ldw	r2,-36(fp)
}
 800f4b4:	e037883a 	mov	sp,fp
 800f4b8:	dfc00117 	ldw	ra,4(sp)
 800f4bc:	df000017 	ldw	fp,0(sp)
 800f4c0:	dec00204 	addi	sp,sp,8
 800f4c4:	f800283a 	ret

0800f4c8 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 800f4c8:	defffd04 	addi	sp,sp,-12
 800f4cc:	df000215 	stw	fp,8(sp)
 800f4d0:	df000204 	addi	fp,sp,8
 800f4d4:	e13ffe15 	stw	r4,-8(fp)
 800f4d8:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 800f4dc:	e0bffe17 	ldw	r2,-8(fp)
 800f4e0:	10800317 	ldw	r2,12(r2)
 800f4e4:	10800404 	addi	r2,r2,16
 800f4e8:	10c00037 	ldwio	r3,0(r2)
 800f4ec:	e0bffe17 	ldw	r2,-8(fp)
 800f4f0:	10800317 	ldw	r2,12(r2)
 800f4f4:	10800304 	addi	r2,r2,12
 800f4f8:	10800037 	ldwio	r2,0(r2)
 800f4fc:	1884703a 	and	r2,r3,r2
 800f500:	1007883a 	mov	r3,r2
 800f504:	e0bfff17 	ldw	r2,-4(fp)
 800f508:	10c00015 	stw	r3,0(r2)
}
 800f50c:	0001883a 	nop
 800f510:	e037883a 	mov	sp,fp
 800f514:	df000017 	ldw	fp,0(sp)
 800f518:	dec00104 	addi	sp,sp,4
 800f51c:	f800283a 	ret

0800f520 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 800f520:	defffd04 	addi	sp,sp,-12
 800f524:	df000215 	stw	fp,8(sp)
 800f528:	df000204 	addi	fp,sp,8
 800f52c:	e13ffe15 	stw	r4,-8(fp)
 800f530:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 800f534:	e0bffe17 	ldw	r2,-8(fp)
 800f538:	10800317 	ldw	r2,12(r2)
 800f53c:	10800404 	addi	r2,r2,16
 800f540:	10800037 	ldwio	r2,0(r2)
 800f544:	1007883a 	mov	r3,r2
 800f548:	e0bfff17 	ldw	r2,-4(fp)
 800f54c:	10c00015 	stw	r3,0(r2)
}
 800f550:	0001883a 	nop
 800f554:	e037883a 	mov	sp,fp
 800f558:	df000017 	ldw	fp,0(sp)
 800f55c:	dec00104 	addi	sp,sp,4
 800f560:	f800283a 	ret

0800f564 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 800f564:	defffd04 	addi	sp,sp,-12
 800f568:	df000215 	stw	fp,8(sp)
 800f56c:	df000204 	addi	fp,sp,8
 800f570:	e13ffe15 	stw	r4,-8(fp)
 800f574:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 800f578:	e0bffe17 	ldw	r2,-8(fp)
 800f57c:	10800317 	ldw	r2,12(r2)
 800f580:	10800404 	addi	r2,r2,16
 800f584:	e0ffff17 	ldw	r3,-4(fp)
 800f588:	10c00035 	stwio	r3,0(r2)
}
 800f58c:	0001883a 	nop
 800f590:	e037883a 	mov	sp,fp
 800f594:	df000017 	ldw	fp,0(sp)
 800f598:	dec00104 	addi	sp,sp,4
 800f59c:	f800283a 	ret

0800f5a0 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 800f5a0:	defffb04 	addi	sp,sp,-20
 800f5a4:	dfc00415 	stw	ra,16(sp)
 800f5a8:	df000315 	stw	fp,12(sp)
 800f5ac:	df000304 	addi	fp,sp,12
 800f5b0:	e13ffe15 	stw	r4,-8(fp)
 800f5b4:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 800f5b8:	e17ffd04 	addi	r5,fp,-12
 800f5bc:	e13ffe17 	ldw	r4,-8(fp)
 800f5c0:	800f66c0 	call	800f66c <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 800f5c4:	e0bfff17 	ldw	r2,-4(fp)
 800f5c8:	0086303a 	nor	r3,zero,r2
 800f5cc:	e0bffd17 	ldw	r2,-12(fp)
 800f5d0:	1884703a 	and	r2,r3,r2
 800f5d4:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 800f5d8:	e0bffe17 	ldw	r2,-8(fp)
 800f5dc:	10800317 	ldw	r2,12(r2)
 800f5e0:	10800304 	addi	r2,r2,12
 800f5e4:	e0fffd17 	ldw	r3,-12(fp)
 800f5e8:	18c007cc 	andi	r3,r3,31
 800f5ec:	10c00035 	stwio	r3,0(r2)
}
 800f5f0:	0001883a 	nop
 800f5f4:	e037883a 	mov	sp,fp
 800f5f8:	dfc00117 	ldw	ra,4(sp)
 800f5fc:	df000017 	ldw	fp,0(sp)
 800f600:	dec00204 	addi	sp,sp,8
 800f604:	f800283a 	ret

0800f608 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 800f608:	defffb04 	addi	sp,sp,-20
 800f60c:	dfc00415 	stw	ra,16(sp)
 800f610:	df000315 	stw	fp,12(sp)
 800f614:	df000304 	addi	fp,sp,12
 800f618:	e13ffe15 	stw	r4,-8(fp)
 800f61c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 800f620:	e17ffd04 	addi	r5,fp,-12
 800f624:	e13ffe17 	ldw	r4,-8(fp)
 800f628:	800f66c0 	call	800f66c <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 800f62c:	e0fffd17 	ldw	r3,-12(fp)
 800f630:	e0bfff17 	ldw	r2,-4(fp)
 800f634:	1884b03a 	or	r2,r3,r2
 800f638:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 800f63c:	e0bffe17 	ldw	r2,-8(fp)
 800f640:	10800317 	ldw	r2,12(r2)
 800f644:	10800304 	addi	r2,r2,12
 800f648:	e0fffd17 	ldw	r3,-12(fp)
 800f64c:	18c007cc 	andi	r3,r3,31
 800f650:	10c00035 	stwio	r3,0(r2)
}
 800f654:	0001883a 	nop
 800f658:	e037883a 	mov	sp,fp
 800f65c:	dfc00117 	ldw	ra,4(sp)
 800f660:	df000017 	ldw	fp,0(sp)
 800f664:	dec00204 	addi	sp,sp,8
 800f668:	f800283a 	ret

0800f66c <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 800f66c:	defffd04 	addi	sp,sp,-12
 800f670:	df000215 	stw	fp,8(sp)
 800f674:	df000204 	addi	fp,sp,8
 800f678:	e13ffe15 	stw	r4,-8(fp)
 800f67c:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 800f680:	e0bffe17 	ldw	r2,-8(fp)
 800f684:	10800317 	ldw	r2,12(r2)
 800f688:	10800304 	addi	r2,r2,12
 800f68c:	10800037 	ldwio	r2,0(r2)
 800f690:	10c007cc 	andi	r3,r2,31
 800f694:	e0bfff17 	ldw	r2,-4(fp)
 800f698:	10c00015 	stw	r3,0(r2)
}
 800f69c:	0001883a 	nop
 800f6a0:	e037883a 	mov	sp,fp
 800f6a4:	df000017 	ldw	fp,0(sp)
 800f6a8:	dec00104 	addi	sp,sp,4
 800f6ac:	f800283a 	ret

0800f6b0 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 800f6b0:	defffd04 	addi	sp,sp,-12
 800f6b4:	df000215 	stw	fp,8(sp)
 800f6b8:	df000204 	addi	fp,sp,8
 800f6bc:	e13ffe15 	stw	r4,-8(fp)
 800f6c0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 800f6c4:	e0bffe17 	ldw	r2,-8(fp)
 800f6c8:	10800317 	ldw	r2,12(r2)
 800f6cc:	10800204 	addi	r2,r2,8
 800f6d0:	10800037 	ldwio	r2,0(r2)
 800f6d4:	10800c0c 	andi	r2,r2,48
 800f6d8:	1005d13a 	srai	r2,r2,4
 800f6dc:	1007883a 	mov	r3,r2
 800f6e0:	e0bfff17 	ldw	r2,-4(fp)
 800f6e4:	10c00015 	stw	r3,0(r2)
}
 800f6e8:	0001883a 	nop
 800f6ec:	e037883a 	mov	sp,fp
 800f6f0:	df000017 	ldw	fp,0(sp)
 800f6f4:	dec00104 	addi	sp,sp,4
 800f6f8:	f800283a 	ret

0800f6fc <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 800f6fc:	defffd04 	addi	sp,sp,-12
 800f700:	df000215 	stw	fp,8(sp)
 800f704:	df000204 	addi	fp,sp,8
 800f708:	e13ffe15 	stw	r4,-8(fp)
 800f70c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 800f710:	e0bffe17 	ldw	r2,-8(fp)
 800f714:	10800317 	ldw	r2,12(r2)
 800f718:	10800204 	addi	r2,r2,8
 800f71c:	e0fffe17 	ldw	r3,-8(fp)
 800f720:	18c00317 	ldw	r3,12(r3)
 800f724:	18c00204 	addi	r3,r3,8
 800f728:	18c00037 	ldwio	r3,0(r3)
 800f72c:	1809883a 	mov	r4,r3
 800f730:	00fff3c4 	movi	r3,-49
 800f734:	20c8703a 	and	r4,r4,r3
 800f738:	e0ffff17 	ldw	r3,-4(fp)
 800f73c:	1806913a 	slli	r3,r3,4
 800f740:	18c00c0c 	andi	r3,r3,48
 800f744:	20c6b03a 	or	r3,r4,r3
 800f748:	10c00035 	stwio	r3,0(r2)
}
 800f74c:	0001883a 	nop
 800f750:	e037883a 	mov	sp,fp
 800f754:	df000017 	ldw	fp,0(sp)
 800f758:	dec00104 	addi	sp,sp,4
 800f75c:	f800283a 	ret

0800f760 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 800f760:	defffd04 	addi	sp,sp,-12
 800f764:	df000215 	stw	fp,8(sp)
 800f768:	df000204 	addi	fp,sp,8
 800f76c:	e13ffe15 	stw	r4,-8(fp)
 800f770:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 800f774:	e0bffe17 	ldw	r2,-8(fp)
 800f778:	10800317 	ldw	r2,12(r2)
 800f77c:	10800204 	addi	r2,r2,8
 800f780:	10800037 	ldwio	r2,0(r2)
 800f784:	1080030c 	andi	r2,r2,12
 800f788:	1005d0ba 	srai	r2,r2,2
 800f78c:	1007883a 	mov	r3,r2
 800f790:	e0bfff17 	ldw	r2,-4(fp)
 800f794:	10c00015 	stw	r3,0(r2)
}
 800f798:	0001883a 	nop
 800f79c:	e037883a 	mov	sp,fp
 800f7a0:	df000017 	ldw	fp,0(sp)
 800f7a4:	dec00104 	addi	sp,sp,4
 800f7a8:	f800283a 	ret

0800f7ac <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 800f7ac:	defffd04 	addi	sp,sp,-12
 800f7b0:	df000215 	stw	fp,8(sp)
 800f7b4:	df000204 	addi	fp,sp,8
 800f7b8:	e13ffe15 	stw	r4,-8(fp)
 800f7bc:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 800f7c0:	e0bffe17 	ldw	r2,-8(fp)
 800f7c4:	10800317 	ldw	r2,12(r2)
 800f7c8:	10c00204 	addi	r3,r2,8
 800f7cc:	e0bffe17 	ldw	r2,-8(fp)
 800f7d0:	10800317 	ldw	r2,12(r2)
 800f7d4:	10800204 	addi	r2,r2,8
 800f7d8:	10800037 	ldwio	r2,0(r2)
 800f7dc:	1009883a 	mov	r4,r2
 800f7e0:	00bffcc4 	movi	r2,-13
 800f7e4:	2088703a 	and	r4,r4,r2
 800f7e8:	e0bfff17 	ldw	r2,-4(fp)
 800f7ec:	1085883a 	add	r2,r2,r2
 800f7f0:	1085883a 	add	r2,r2,r2
 800f7f4:	1080030c 	andi	r2,r2,12
 800f7f8:	2084b03a 	or	r2,r4,r2
 800f7fc:	18800035 	stwio	r2,0(r3)
}
 800f800:	0001883a 	nop
 800f804:	e037883a 	mov	sp,fp
 800f808:	df000017 	ldw	fp,0(sp)
 800f80c:	dec00104 	addi	sp,sp,4
 800f810:	f800283a 	ret

0800f814 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800f814:	defffa04 	addi	sp,sp,-24
 800f818:	dfc00515 	stw	ra,20(sp)
 800f81c:	df000415 	stw	fp,16(sp)
 800f820:	df000404 	addi	fp,sp,16
 800f824:	e13ffd15 	stw	r4,-12(fp)
 800f828:	e17ffe15 	stw	r5,-8(fp)
 800f82c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f830:	e0bffd17 	ldw	r2,-12(fp)
 800f834:	10800017 	ldw	r2,0(r2)
 800f838:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800f83c:	e0bffc17 	ldw	r2,-16(fp)
 800f840:	10c00a04 	addi	r3,r2,40
 800f844:	e0bffd17 	ldw	r2,-12(fp)
 800f848:	10800217 	ldw	r2,8(r2)
 800f84c:	100f883a 	mov	r7,r2
 800f850:	e1bfff17 	ldw	r6,-4(fp)
 800f854:	e17ffe17 	ldw	r5,-8(fp)
 800f858:	1809883a 	mov	r4,r3
 800f85c:	800fe3c0 	call	800fe3c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800f860:	e037883a 	mov	sp,fp
 800f864:	dfc00117 	ldw	ra,4(sp)
 800f868:	df000017 	ldw	fp,0(sp)
 800f86c:	dec00204 	addi	sp,sp,8
 800f870:	f800283a 	ret

0800f874 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800f874:	defffa04 	addi	sp,sp,-24
 800f878:	dfc00515 	stw	ra,20(sp)
 800f87c:	df000415 	stw	fp,16(sp)
 800f880:	df000404 	addi	fp,sp,16
 800f884:	e13ffd15 	stw	r4,-12(fp)
 800f888:	e17ffe15 	stw	r5,-8(fp)
 800f88c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f890:	e0bffd17 	ldw	r2,-12(fp)
 800f894:	10800017 	ldw	r2,0(r2)
 800f898:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800f89c:	e0bffc17 	ldw	r2,-16(fp)
 800f8a0:	10c00a04 	addi	r3,r2,40
 800f8a4:	e0bffd17 	ldw	r2,-12(fp)
 800f8a8:	10800217 	ldw	r2,8(r2)
 800f8ac:	100f883a 	mov	r7,r2
 800f8b0:	e1bfff17 	ldw	r6,-4(fp)
 800f8b4:	e17ffe17 	ldw	r5,-8(fp)
 800f8b8:	1809883a 	mov	r4,r3
 800f8bc:	80100580 	call	8010058 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800f8c0:	e037883a 	mov	sp,fp
 800f8c4:	dfc00117 	ldw	ra,4(sp)
 800f8c8:	df000017 	ldw	fp,0(sp)
 800f8cc:	dec00204 	addi	sp,sp,8
 800f8d0:	f800283a 	ret

0800f8d4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800f8d4:	defffc04 	addi	sp,sp,-16
 800f8d8:	dfc00315 	stw	ra,12(sp)
 800f8dc:	df000215 	stw	fp,8(sp)
 800f8e0:	df000204 	addi	fp,sp,8
 800f8e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f8e8:	e0bfff17 	ldw	r2,-4(fp)
 800f8ec:	10800017 	ldw	r2,0(r2)
 800f8f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800f8f4:	e0bffe17 	ldw	r2,-8(fp)
 800f8f8:	10c00a04 	addi	r3,r2,40
 800f8fc:	e0bfff17 	ldw	r2,-4(fp)
 800f900:	10800217 	ldw	r2,8(r2)
 800f904:	100b883a 	mov	r5,r2
 800f908:	1809883a 	mov	r4,r3
 800f90c:	800fce40 	call	800fce4 <altera_avalon_jtag_uart_close>
}
 800f910:	e037883a 	mov	sp,fp
 800f914:	dfc00117 	ldw	ra,4(sp)
 800f918:	df000017 	ldw	fp,0(sp)
 800f91c:	dec00204 	addi	sp,sp,8
 800f920:	f800283a 	ret

0800f924 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800f924:	defffa04 	addi	sp,sp,-24
 800f928:	dfc00515 	stw	ra,20(sp)
 800f92c:	df000415 	stw	fp,16(sp)
 800f930:	df000404 	addi	fp,sp,16
 800f934:	e13ffd15 	stw	r4,-12(fp)
 800f938:	e17ffe15 	stw	r5,-8(fp)
 800f93c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800f940:	e0bffd17 	ldw	r2,-12(fp)
 800f944:	10800017 	ldw	r2,0(r2)
 800f948:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800f94c:	e0bffc17 	ldw	r2,-16(fp)
 800f950:	10800a04 	addi	r2,r2,40
 800f954:	e1bfff17 	ldw	r6,-4(fp)
 800f958:	e17ffe17 	ldw	r5,-8(fp)
 800f95c:	1009883a 	mov	r4,r2
 800f960:	800fd4c0 	call	800fd4c <altera_avalon_jtag_uart_ioctl>
}
 800f964:	e037883a 	mov	sp,fp
 800f968:	dfc00117 	ldw	ra,4(sp)
 800f96c:	df000017 	ldw	fp,0(sp)
 800f970:	dec00204 	addi	sp,sp,8
 800f974:	f800283a 	ret

0800f978 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800f978:	defffa04 	addi	sp,sp,-24
 800f97c:	dfc00515 	stw	ra,20(sp)
 800f980:	df000415 	stw	fp,16(sp)
 800f984:	df000404 	addi	fp,sp,16
 800f988:	e13ffd15 	stw	r4,-12(fp)
 800f98c:	e17ffe15 	stw	r5,-8(fp)
 800f990:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f994:	e0bffd17 	ldw	r2,-12(fp)
 800f998:	00c00044 	movi	r3,1
 800f99c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800f9a0:	e0bffd17 	ldw	r2,-12(fp)
 800f9a4:	10800017 	ldw	r2,0(r2)
 800f9a8:	10800104 	addi	r2,r2,4
 800f9ac:	1007883a 	mov	r3,r2
 800f9b0:	e0bffd17 	ldw	r2,-12(fp)
 800f9b4:	10800817 	ldw	r2,32(r2)
 800f9b8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800f9bc:	e0bffe17 	ldw	r2,-8(fp)
 800f9c0:	e0ffff17 	ldw	r3,-4(fp)
 800f9c4:	d8000015 	stw	zero,0(sp)
 800f9c8:	e1fffd17 	ldw	r7,-12(fp)
 800f9cc:	01820074 	movhi	r6,2049
 800f9d0:	31be8e04 	addi	r6,r6,-1480
 800f9d4:	180b883a 	mov	r5,r3
 800f9d8:	1009883a 	mov	r4,r2
 800f9dc:	80108a00 	call	80108a0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800f9e0:	e0bffd17 	ldw	r2,-12(fp)
 800f9e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800f9e8:	e0bffd17 	ldw	r2,-12(fp)
 800f9ec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800f9f0:	d0e6e917 	ldw	r3,-25692(gp)
 800f9f4:	e1fffd17 	ldw	r7,-12(fp)
 800f9f8:	01820074 	movhi	r6,2049
 800f9fc:	31bf1104 	addi	r6,r6,-956
 800fa00:	180b883a 	mov	r5,r3
 800fa04:	1009883a 	mov	r4,r2
 800fa08:	80103700 	call	8010370 <alt_alarm_start>
 800fa0c:	1000040e 	bge	r2,zero,800fa20 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800fa10:	e0fffd17 	ldw	r3,-12(fp)
 800fa14:	00a00034 	movhi	r2,32768
 800fa18:	10bfffc4 	addi	r2,r2,-1
 800fa1c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800fa20:	0001883a 	nop
 800fa24:	e037883a 	mov	sp,fp
 800fa28:	dfc00117 	ldw	ra,4(sp)
 800fa2c:	df000017 	ldw	fp,0(sp)
 800fa30:	dec00204 	addi	sp,sp,8
 800fa34:	f800283a 	ret

0800fa38 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800fa38:	defff804 	addi	sp,sp,-32
 800fa3c:	df000715 	stw	fp,28(sp)
 800fa40:	df000704 	addi	fp,sp,28
 800fa44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800fa48:	e0bfff17 	ldw	r2,-4(fp)
 800fa4c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800fa50:	e0bffb17 	ldw	r2,-20(fp)
 800fa54:	10800017 	ldw	r2,0(r2)
 800fa58:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800fa5c:	e0bffc17 	ldw	r2,-16(fp)
 800fa60:	10800104 	addi	r2,r2,4
 800fa64:	10800037 	ldwio	r2,0(r2)
 800fa68:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800fa6c:	e0bffd17 	ldw	r2,-12(fp)
 800fa70:	1080c00c 	andi	r2,r2,768
 800fa74:	10006d26 	beq	r2,zero,800fc2c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800fa78:	e0bffd17 	ldw	r2,-12(fp)
 800fa7c:	1080400c 	andi	r2,r2,256
 800fa80:	10003526 	beq	r2,zero,800fb58 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800fa84:	00800074 	movhi	r2,1
 800fa88:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fa8c:	e0bffb17 	ldw	r2,-20(fp)
 800fa90:	10800a17 	ldw	r2,40(r2)
 800fa94:	10800044 	addi	r2,r2,1
 800fa98:	1081ffcc 	andi	r2,r2,2047
 800fa9c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800faa0:	e0bffb17 	ldw	r2,-20(fp)
 800faa4:	10c00b17 	ldw	r3,44(r2)
 800faa8:	e0bffe17 	ldw	r2,-8(fp)
 800faac:	18801526 	beq	r3,r2,800fb04 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800fab0:	e0bffc17 	ldw	r2,-16(fp)
 800fab4:	10800037 	ldwio	r2,0(r2)
 800fab8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800fabc:	e0bff917 	ldw	r2,-28(fp)
 800fac0:	10a0000c 	andi	r2,r2,32768
 800fac4:	10001126 	beq	r2,zero,800fb0c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800fac8:	e0bffb17 	ldw	r2,-20(fp)
 800facc:	10800a17 	ldw	r2,40(r2)
 800fad0:	e0fff917 	ldw	r3,-28(fp)
 800fad4:	1809883a 	mov	r4,r3
 800fad8:	e0fffb17 	ldw	r3,-20(fp)
 800fadc:	1885883a 	add	r2,r3,r2
 800fae0:	10800e04 	addi	r2,r2,56
 800fae4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fae8:	e0bffb17 	ldw	r2,-20(fp)
 800faec:	10800a17 	ldw	r2,40(r2)
 800faf0:	10800044 	addi	r2,r2,1
 800faf4:	10c1ffcc 	andi	r3,r2,2047
 800faf8:	e0bffb17 	ldw	r2,-20(fp)
 800fafc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800fb00:	003fe206 	br	800fa8c <__alt_data_end+0xff00fa8c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800fb04:	0001883a 	nop
 800fb08:	00000106 	br	800fb10 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800fb0c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800fb10:	e0bff917 	ldw	r2,-28(fp)
 800fb14:	10bfffec 	andhi	r2,r2,65535
 800fb18:	10000f26 	beq	r2,zero,800fb58 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800fb1c:	e0bffb17 	ldw	r2,-20(fp)
 800fb20:	10c00817 	ldw	r3,32(r2)
 800fb24:	00bfff84 	movi	r2,-2
 800fb28:	1886703a 	and	r3,r3,r2
 800fb2c:	e0bffb17 	ldw	r2,-20(fp)
 800fb30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800fb34:	e0bffc17 	ldw	r2,-16(fp)
 800fb38:	10800104 	addi	r2,r2,4
 800fb3c:	1007883a 	mov	r3,r2
 800fb40:	e0bffb17 	ldw	r2,-20(fp)
 800fb44:	10800817 	ldw	r2,32(r2)
 800fb48:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800fb4c:	e0bffc17 	ldw	r2,-16(fp)
 800fb50:	10800104 	addi	r2,r2,4
 800fb54:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800fb58:	e0bffd17 	ldw	r2,-12(fp)
 800fb5c:	1080800c 	andi	r2,r2,512
 800fb60:	103fbe26 	beq	r2,zero,800fa5c <__alt_data_end+0xff00fa5c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800fb64:	e0bffd17 	ldw	r2,-12(fp)
 800fb68:	1004d43a 	srli	r2,r2,16
 800fb6c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800fb70:	00001406 	br	800fbc4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800fb74:	e0bffc17 	ldw	r2,-16(fp)
 800fb78:	e0fffb17 	ldw	r3,-20(fp)
 800fb7c:	18c00d17 	ldw	r3,52(r3)
 800fb80:	e13ffb17 	ldw	r4,-20(fp)
 800fb84:	20c7883a 	add	r3,r4,r3
 800fb88:	18c20e04 	addi	r3,r3,2104
 800fb8c:	18c00003 	ldbu	r3,0(r3)
 800fb90:	18c03fcc 	andi	r3,r3,255
 800fb94:	18c0201c 	xori	r3,r3,128
 800fb98:	18ffe004 	addi	r3,r3,-128
 800fb9c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fba0:	e0bffb17 	ldw	r2,-20(fp)
 800fba4:	10800d17 	ldw	r2,52(r2)
 800fba8:	10800044 	addi	r2,r2,1
 800fbac:	10c1ffcc 	andi	r3,r2,2047
 800fbb0:	e0bffb17 	ldw	r2,-20(fp)
 800fbb4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800fbb8:	e0bffa17 	ldw	r2,-24(fp)
 800fbbc:	10bfffc4 	addi	r2,r2,-1
 800fbc0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800fbc4:	e0bffa17 	ldw	r2,-24(fp)
 800fbc8:	10000526 	beq	r2,zero,800fbe0 <altera_avalon_jtag_uart_irq+0x1a8>
 800fbcc:	e0bffb17 	ldw	r2,-20(fp)
 800fbd0:	10c00d17 	ldw	r3,52(r2)
 800fbd4:	e0bffb17 	ldw	r2,-20(fp)
 800fbd8:	10800c17 	ldw	r2,48(r2)
 800fbdc:	18bfe51e 	bne	r3,r2,800fb74 <__alt_data_end+0xff00fb74>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800fbe0:	e0bffa17 	ldw	r2,-24(fp)
 800fbe4:	103f9d26 	beq	r2,zero,800fa5c <__alt_data_end+0xff00fa5c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800fbe8:	e0bffb17 	ldw	r2,-20(fp)
 800fbec:	10c00817 	ldw	r3,32(r2)
 800fbf0:	00bfff44 	movi	r2,-3
 800fbf4:	1886703a 	and	r3,r3,r2
 800fbf8:	e0bffb17 	ldw	r2,-20(fp)
 800fbfc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fc00:	e0bffb17 	ldw	r2,-20(fp)
 800fc04:	10800017 	ldw	r2,0(r2)
 800fc08:	10800104 	addi	r2,r2,4
 800fc0c:	1007883a 	mov	r3,r2
 800fc10:	e0bffb17 	ldw	r2,-20(fp)
 800fc14:	10800817 	ldw	r2,32(r2)
 800fc18:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800fc1c:	e0bffc17 	ldw	r2,-16(fp)
 800fc20:	10800104 	addi	r2,r2,4
 800fc24:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800fc28:	003f8c06 	br	800fa5c <__alt_data_end+0xff00fa5c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800fc2c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800fc30:	0001883a 	nop
 800fc34:	e037883a 	mov	sp,fp
 800fc38:	df000017 	ldw	fp,0(sp)
 800fc3c:	dec00104 	addi	sp,sp,4
 800fc40:	f800283a 	ret

0800fc44 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800fc44:	defff804 	addi	sp,sp,-32
 800fc48:	df000715 	stw	fp,28(sp)
 800fc4c:	df000704 	addi	fp,sp,28
 800fc50:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800fc54:	e0bffb17 	ldw	r2,-20(fp)
 800fc58:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800fc5c:	e0bff917 	ldw	r2,-28(fp)
 800fc60:	10800017 	ldw	r2,0(r2)
 800fc64:	10800104 	addi	r2,r2,4
 800fc68:	10800037 	ldwio	r2,0(r2)
 800fc6c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800fc70:	e0bffa17 	ldw	r2,-24(fp)
 800fc74:	1081000c 	andi	r2,r2,1024
 800fc78:	10000b26 	beq	r2,zero,800fca8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800fc7c:	e0bff917 	ldw	r2,-28(fp)
 800fc80:	10800017 	ldw	r2,0(r2)
 800fc84:	10800104 	addi	r2,r2,4
 800fc88:	1007883a 	mov	r3,r2
 800fc8c:	e0bff917 	ldw	r2,-28(fp)
 800fc90:	10800817 	ldw	r2,32(r2)
 800fc94:	10810014 	ori	r2,r2,1024
 800fc98:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800fc9c:	e0bff917 	ldw	r2,-28(fp)
 800fca0:	10000915 	stw	zero,36(r2)
 800fca4:	00000a06 	br	800fcd0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800fca8:	e0bff917 	ldw	r2,-28(fp)
 800fcac:	10c00917 	ldw	r3,36(r2)
 800fcb0:	00a00034 	movhi	r2,32768
 800fcb4:	10bfff04 	addi	r2,r2,-4
 800fcb8:	10c00536 	bltu	r2,r3,800fcd0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800fcbc:	e0bff917 	ldw	r2,-28(fp)
 800fcc0:	10800917 	ldw	r2,36(r2)
 800fcc4:	10c00044 	addi	r3,r2,1
 800fcc8:	e0bff917 	ldw	r2,-28(fp)
 800fccc:	10c00915 	stw	r3,36(r2)
 800fcd0:	d0a6e917 	ldw	r2,-25692(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800fcd4:	e037883a 	mov	sp,fp
 800fcd8:	df000017 	ldw	fp,0(sp)
 800fcdc:	dec00104 	addi	sp,sp,4
 800fce0:	f800283a 	ret

0800fce4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800fce4:	defffd04 	addi	sp,sp,-12
 800fce8:	df000215 	stw	fp,8(sp)
 800fcec:	df000204 	addi	fp,sp,8
 800fcf0:	e13ffe15 	stw	r4,-8(fp)
 800fcf4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fcf8:	00000506 	br	800fd10 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800fcfc:	e0bfff17 	ldw	r2,-4(fp)
 800fd00:	1090000c 	andi	r2,r2,16384
 800fd04:	10000226 	beq	r2,zero,800fd10 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800fd08:	00bffd44 	movi	r2,-11
 800fd0c:	00000b06 	br	800fd3c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fd10:	e0bffe17 	ldw	r2,-8(fp)
 800fd14:	10c00d17 	ldw	r3,52(r2)
 800fd18:	e0bffe17 	ldw	r2,-8(fp)
 800fd1c:	10800c17 	ldw	r2,48(r2)
 800fd20:	18800526 	beq	r3,r2,800fd38 <altera_avalon_jtag_uart_close+0x54>
 800fd24:	e0bffe17 	ldw	r2,-8(fp)
 800fd28:	10c00917 	ldw	r3,36(r2)
 800fd2c:	e0bffe17 	ldw	r2,-8(fp)
 800fd30:	10800117 	ldw	r2,4(r2)
 800fd34:	18bff136 	bltu	r3,r2,800fcfc <__alt_data_end+0xff00fcfc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800fd38:	0005883a 	mov	r2,zero
}
 800fd3c:	e037883a 	mov	sp,fp
 800fd40:	df000017 	ldw	fp,0(sp)
 800fd44:	dec00104 	addi	sp,sp,4
 800fd48:	f800283a 	ret

0800fd4c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800fd4c:	defffa04 	addi	sp,sp,-24
 800fd50:	df000515 	stw	fp,20(sp)
 800fd54:	df000504 	addi	fp,sp,20
 800fd58:	e13ffd15 	stw	r4,-12(fp)
 800fd5c:	e17ffe15 	stw	r5,-8(fp)
 800fd60:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800fd64:	00bff9c4 	movi	r2,-25
 800fd68:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800fd6c:	e0bffe17 	ldw	r2,-8(fp)
 800fd70:	10da8060 	cmpeqi	r3,r2,27137
 800fd74:	1800031e 	bne	r3,zero,800fd84 <altera_avalon_jtag_uart_ioctl+0x38>
 800fd78:	109a80a0 	cmpeqi	r2,r2,27138
 800fd7c:	1000181e 	bne	r2,zero,800fde0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 800fd80:	00002906 	br	800fe28 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800fd84:	e0bffd17 	ldw	r2,-12(fp)
 800fd88:	10c00117 	ldw	r3,4(r2)
 800fd8c:	00a00034 	movhi	r2,32768
 800fd90:	10bfffc4 	addi	r2,r2,-1
 800fd94:	18802126 	beq	r3,r2,800fe1c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800fd98:	e0bfff17 	ldw	r2,-4(fp)
 800fd9c:	10800017 	ldw	r2,0(r2)
 800fda0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800fda4:	e0bffc17 	ldw	r2,-16(fp)
 800fda8:	10800090 	cmplti	r2,r2,2
 800fdac:	1000061e 	bne	r2,zero,800fdc8 <altera_avalon_jtag_uart_ioctl+0x7c>
 800fdb0:	e0fffc17 	ldw	r3,-16(fp)
 800fdb4:	00a00034 	movhi	r2,32768
 800fdb8:	10bfffc4 	addi	r2,r2,-1
 800fdbc:	18800226 	beq	r3,r2,800fdc8 <altera_avalon_jtag_uart_ioctl+0x7c>
 800fdc0:	e0bffc17 	ldw	r2,-16(fp)
 800fdc4:	00000206 	br	800fdd0 <altera_avalon_jtag_uart_ioctl+0x84>
 800fdc8:	00a00034 	movhi	r2,32768
 800fdcc:	10bfff84 	addi	r2,r2,-2
 800fdd0:	e0fffd17 	ldw	r3,-12(fp)
 800fdd4:	18800115 	stw	r2,4(r3)
      rc = 0;
 800fdd8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fddc:	00000f06 	br	800fe1c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800fde0:	e0bffd17 	ldw	r2,-12(fp)
 800fde4:	10c00117 	ldw	r3,4(r2)
 800fde8:	00a00034 	movhi	r2,32768
 800fdec:	10bfffc4 	addi	r2,r2,-1
 800fdf0:	18800c26 	beq	r3,r2,800fe24 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800fdf4:	e0bffd17 	ldw	r2,-12(fp)
 800fdf8:	10c00917 	ldw	r3,36(r2)
 800fdfc:	e0bffd17 	ldw	r2,-12(fp)
 800fe00:	10800117 	ldw	r2,4(r2)
 800fe04:	1885803a 	cmpltu	r2,r3,r2
 800fe08:	10c03fcc 	andi	r3,r2,255
 800fe0c:	e0bfff17 	ldw	r2,-4(fp)
 800fe10:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800fe14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fe18:	00000206 	br	800fe24 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800fe1c:	0001883a 	nop
 800fe20:	00000106 	br	800fe28 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800fe24:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800fe28:	e0bffb17 	ldw	r2,-20(fp)
}
 800fe2c:	e037883a 	mov	sp,fp
 800fe30:	df000017 	ldw	fp,0(sp)
 800fe34:	dec00104 	addi	sp,sp,4
 800fe38:	f800283a 	ret

0800fe3c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800fe3c:	defff304 	addi	sp,sp,-52
 800fe40:	dfc00c15 	stw	ra,48(sp)
 800fe44:	df000b15 	stw	fp,44(sp)
 800fe48:	df000b04 	addi	fp,sp,44
 800fe4c:	e13ffc15 	stw	r4,-16(fp)
 800fe50:	e17ffd15 	stw	r5,-12(fp)
 800fe54:	e1bffe15 	stw	r6,-8(fp)
 800fe58:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800fe5c:	e0bffd17 	ldw	r2,-12(fp)
 800fe60:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fe64:	00004706 	br	800ff84 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800fe68:	e0bffc17 	ldw	r2,-16(fp)
 800fe6c:	10800a17 	ldw	r2,40(r2)
 800fe70:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800fe74:	e0bffc17 	ldw	r2,-16(fp)
 800fe78:	10800b17 	ldw	r2,44(r2)
 800fe7c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800fe80:	e0fff717 	ldw	r3,-36(fp)
 800fe84:	e0bff817 	ldw	r2,-32(fp)
 800fe88:	18800536 	bltu	r3,r2,800fea0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800fe8c:	e0fff717 	ldw	r3,-36(fp)
 800fe90:	e0bff817 	ldw	r2,-32(fp)
 800fe94:	1885c83a 	sub	r2,r3,r2
 800fe98:	e0bff615 	stw	r2,-40(fp)
 800fe9c:	00000406 	br	800feb0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800fea0:	00c20004 	movi	r3,2048
 800fea4:	e0bff817 	ldw	r2,-32(fp)
 800fea8:	1885c83a 	sub	r2,r3,r2
 800feac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800feb0:	e0bff617 	ldw	r2,-40(fp)
 800feb4:	10001e26 	beq	r2,zero,800ff30 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800feb8:	e0fffe17 	ldw	r3,-8(fp)
 800febc:	e0bff617 	ldw	r2,-40(fp)
 800fec0:	1880022e 	bgeu	r3,r2,800fecc <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800fec4:	e0bffe17 	ldw	r2,-8(fp)
 800fec8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800fecc:	e0bffc17 	ldw	r2,-16(fp)
 800fed0:	10c00e04 	addi	r3,r2,56
 800fed4:	e0bff817 	ldw	r2,-32(fp)
 800fed8:	1885883a 	add	r2,r3,r2
 800fedc:	e1bff617 	ldw	r6,-40(fp)
 800fee0:	100b883a 	mov	r5,r2
 800fee4:	e13ff517 	ldw	r4,-44(fp)
 800fee8:	80060b80 	call	80060b8 <memcpy>
      ptr   += n;
 800feec:	e0fff517 	ldw	r3,-44(fp)
 800fef0:	e0bff617 	ldw	r2,-40(fp)
 800fef4:	1885883a 	add	r2,r3,r2
 800fef8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800fefc:	e0fffe17 	ldw	r3,-8(fp)
 800ff00:	e0bff617 	ldw	r2,-40(fp)
 800ff04:	1885c83a 	sub	r2,r3,r2
 800ff08:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ff0c:	e0fff817 	ldw	r3,-32(fp)
 800ff10:	e0bff617 	ldw	r2,-40(fp)
 800ff14:	1885883a 	add	r2,r3,r2
 800ff18:	10c1ffcc 	andi	r3,r2,2047
 800ff1c:	e0bffc17 	ldw	r2,-16(fp)
 800ff20:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800ff24:	e0bffe17 	ldw	r2,-8(fp)
 800ff28:	00bfcf16 	blt	zero,r2,800fe68 <__alt_data_end+0xff00fe68>
 800ff2c:	00000106 	br	800ff34 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800ff30:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800ff34:	e0fff517 	ldw	r3,-44(fp)
 800ff38:	e0bffd17 	ldw	r2,-12(fp)
 800ff3c:	1880141e 	bne	r3,r2,800ff90 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800ff40:	e0bfff17 	ldw	r2,-4(fp)
 800ff44:	1090000c 	andi	r2,r2,16384
 800ff48:	1000131e 	bne	r2,zero,800ff98 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800ff4c:	0001883a 	nop
 800ff50:	e0bffc17 	ldw	r2,-16(fp)
 800ff54:	10c00a17 	ldw	r3,40(r2)
 800ff58:	e0bff717 	ldw	r2,-36(fp)
 800ff5c:	1880051e 	bne	r3,r2,800ff74 <altera_avalon_jtag_uart_read+0x138>
 800ff60:	e0bffc17 	ldw	r2,-16(fp)
 800ff64:	10c00917 	ldw	r3,36(r2)
 800ff68:	e0bffc17 	ldw	r2,-16(fp)
 800ff6c:	10800117 	ldw	r2,4(r2)
 800ff70:	18bff736 	bltu	r3,r2,800ff50 <__alt_data_end+0xff00ff50>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800ff74:	e0bffc17 	ldw	r2,-16(fp)
 800ff78:	10c00a17 	ldw	r3,40(r2)
 800ff7c:	e0bff717 	ldw	r2,-36(fp)
 800ff80:	18800726 	beq	r3,r2,800ffa0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800ff84:	e0bffe17 	ldw	r2,-8(fp)
 800ff88:	00bfb716 	blt	zero,r2,800fe68 <__alt_data_end+0xff00fe68>
 800ff8c:	00000506 	br	800ffa4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800ff90:	0001883a 	nop
 800ff94:	00000306 	br	800ffa4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800ff98:	0001883a 	nop
 800ff9c:	00000106 	br	800ffa4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800ffa0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800ffa4:	e0fff517 	ldw	r3,-44(fp)
 800ffa8:	e0bffd17 	ldw	r2,-12(fp)
 800ffac:	18801826 	beq	r3,r2,8010010 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ffb0:	0005303a 	rdctl	r2,status
 800ffb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ffb8:	e0fffb17 	ldw	r3,-20(fp)
 800ffbc:	00bfff84 	movi	r2,-2
 800ffc0:	1884703a 	and	r2,r3,r2
 800ffc4:	1001703a 	wrctl	status,r2
  
  return context;
 800ffc8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800ffcc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800ffd0:	e0bffc17 	ldw	r2,-16(fp)
 800ffd4:	10800817 	ldw	r2,32(r2)
 800ffd8:	10c00054 	ori	r3,r2,1
 800ffdc:	e0bffc17 	ldw	r2,-16(fp)
 800ffe0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ffe4:	e0bffc17 	ldw	r2,-16(fp)
 800ffe8:	10800017 	ldw	r2,0(r2)
 800ffec:	10800104 	addi	r2,r2,4
 800fff0:	1007883a 	mov	r3,r2
 800fff4:	e0bffc17 	ldw	r2,-16(fp)
 800fff8:	10800817 	ldw	r2,32(r2)
 800fffc:	18800035 	stwio	r2,0(r3)
 8010000:	e0bffa17 	ldw	r2,-24(fp)
 8010004:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010008:	e0bff917 	ldw	r2,-28(fp)
 801000c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8010010:	e0fff517 	ldw	r3,-44(fp)
 8010014:	e0bffd17 	ldw	r2,-12(fp)
 8010018:	18800426 	beq	r3,r2,801002c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 801001c:	e0fff517 	ldw	r3,-44(fp)
 8010020:	e0bffd17 	ldw	r2,-12(fp)
 8010024:	1885c83a 	sub	r2,r3,r2
 8010028:	00000606 	br	8010044 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 801002c:	e0bfff17 	ldw	r2,-4(fp)
 8010030:	1090000c 	andi	r2,r2,16384
 8010034:	10000226 	beq	r2,zero,8010040 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8010038:	00bffd44 	movi	r2,-11
 801003c:	00000106 	br	8010044 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8010040:	00bffec4 	movi	r2,-5
}
 8010044:	e037883a 	mov	sp,fp
 8010048:	dfc00117 	ldw	ra,4(sp)
 801004c:	df000017 	ldw	fp,0(sp)
 8010050:	dec00204 	addi	sp,sp,8
 8010054:	f800283a 	ret

08010058 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8010058:	defff304 	addi	sp,sp,-52
 801005c:	dfc00c15 	stw	ra,48(sp)
 8010060:	df000b15 	stw	fp,44(sp)
 8010064:	df000b04 	addi	fp,sp,44
 8010068:	e13ffc15 	stw	r4,-16(fp)
 801006c:	e17ffd15 	stw	r5,-12(fp)
 8010070:	e1bffe15 	stw	r6,-8(fp)
 8010074:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8010078:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801007c:	e0bffd17 	ldw	r2,-12(fp)
 8010080:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8010084:	00003706 	br	8010164 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8010088:	e0bffc17 	ldw	r2,-16(fp)
 801008c:	10800c17 	ldw	r2,48(r2)
 8010090:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8010094:	e0bffc17 	ldw	r2,-16(fp)
 8010098:	10800d17 	ldw	r2,52(r2)
 801009c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 80100a0:	e0fff917 	ldw	r3,-28(fp)
 80100a4:	e0bff517 	ldw	r2,-44(fp)
 80100a8:	1880062e 	bgeu	r3,r2,80100c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80100ac:	e0fff517 	ldw	r3,-44(fp)
 80100b0:	e0bff917 	ldw	r2,-28(fp)
 80100b4:	1885c83a 	sub	r2,r3,r2
 80100b8:	10bfffc4 	addi	r2,r2,-1
 80100bc:	e0bff615 	stw	r2,-40(fp)
 80100c0:	00000b06 	br	80100f0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80100c4:	e0bff517 	ldw	r2,-44(fp)
 80100c8:	10000526 	beq	r2,zero,80100e0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80100cc:	00c20004 	movi	r3,2048
 80100d0:	e0bff917 	ldw	r2,-28(fp)
 80100d4:	1885c83a 	sub	r2,r3,r2
 80100d8:	e0bff615 	stw	r2,-40(fp)
 80100dc:	00000406 	br	80100f0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80100e0:	00c1ffc4 	movi	r3,2047
 80100e4:	e0bff917 	ldw	r2,-28(fp)
 80100e8:	1885c83a 	sub	r2,r3,r2
 80100ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80100f0:	e0bff617 	ldw	r2,-40(fp)
 80100f4:	10001e26 	beq	r2,zero,8010170 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 80100f8:	e0fffe17 	ldw	r3,-8(fp)
 80100fc:	e0bff617 	ldw	r2,-40(fp)
 8010100:	1880022e 	bgeu	r3,r2,801010c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8010104:	e0bffe17 	ldw	r2,-8(fp)
 8010108:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 801010c:	e0bffc17 	ldw	r2,-16(fp)
 8010110:	10c20e04 	addi	r3,r2,2104
 8010114:	e0bff917 	ldw	r2,-28(fp)
 8010118:	1885883a 	add	r2,r3,r2
 801011c:	e1bff617 	ldw	r6,-40(fp)
 8010120:	e17ffd17 	ldw	r5,-12(fp)
 8010124:	1009883a 	mov	r4,r2
 8010128:	80060b80 	call	80060b8 <memcpy>
      ptr   += n;
 801012c:	e0fffd17 	ldw	r3,-12(fp)
 8010130:	e0bff617 	ldw	r2,-40(fp)
 8010134:	1885883a 	add	r2,r3,r2
 8010138:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 801013c:	e0fffe17 	ldw	r3,-8(fp)
 8010140:	e0bff617 	ldw	r2,-40(fp)
 8010144:	1885c83a 	sub	r2,r3,r2
 8010148:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801014c:	e0fff917 	ldw	r3,-28(fp)
 8010150:	e0bff617 	ldw	r2,-40(fp)
 8010154:	1885883a 	add	r2,r3,r2
 8010158:	10c1ffcc 	andi	r3,r2,2047
 801015c:	e0bffc17 	ldw	r2,-16(fp)
 8010160:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8010164:	e0bffe17 	ldw	r2,-8(fp)
 8010168:	00bfc716 	blt	zero,r2,8010088 <__alt_data_end+0xff010088>
 801016c:	00000106 	br	8010174 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8010170:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010174:	0005303a 	rdctl	r2,status
 8010178:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801017c:	e0fffb17 	ldw	r3,-20(fp)
 8010180:	00bfff84 	movi	r2,-2
 8010184:	1884703a 	and	r2,r3,r2
 8010188:	1001703a 	wrctl	status,r2
  
  return context;
 801018c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8010190:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8010194:	e0bffc17 	ldw	r2,-16(fp)
 8010198:	10800817 	ldw	r2,32(r2)
 801019c:	10c00094 	ori	r3,r2,2
 80101a0:	e0bffc17 	ldw	r2,-16(fp)
 80101a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80101a8:	e0bffc17 	ldw	r2,-16(fp)
 80101ac:	10800017 	ldw	r2,0(r2)
 80101b0:	10800104 	addi	r2,r2,4
 80101b4:	1007883a 	mov	r3,r2
 80101b8:	e0bffc17 	ldw	r2,-16(fp)
 80101bc:	10800817 	ldw	r2,32(r2)
 80101c0:	18800035 	stwio	r2,0(r3)
 80101c4:	e0bffa17 	ldw	r2,-24(fp)
 80101c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80101cc:	e0bff817 	ldw	r2,-32(fp)
 80101d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 80101d4:	e0bffe17 	ldw	r2,-8(fp)
 80101d8:	0080100e 	bge	zero,r2,801021c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 80101dc:	e0bfff17 	ldw	r2,-4(fp)
 80101e0:	1090000c 	andi	r2,r2,16384
 80101e4:	1000101e 	bne	r2,zero,8010228 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80101e8:	0001883a 	nop
 80101ec:	e0bffc17 	ldw	r2,-16(fp)
 80101f0:	10c00d17 	ldw	r3,52(r2)
 80101f4:	e0bff517 	ldw	r2,-44(fp)
 80101f8:	1880051e 	bne	r3,r2,8010210 <altera_avalon_jtag_uart_write+0x1b8>
 80101fc:	e0bffc17 	ldw	r2,-16(fp)
 8010200:	10c00917 	ldw	r3,36(r2)
 8010204:	e0bffc17 	ldw	r2,-16(fp)
 8010208:	10800117 	ldw	r2,4(r2)
 801020c:	18bff736 	bltu	r3,r2,80101ec <__alt_data_end+0xff0101ec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8010210:	e0bffc17 	ldw	r2,-16(fp)
 8010214:	10800917 	ldw	r2,36(r2)
 8010218:	1000051e 	bne	r2,zero,8010230 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 801021c:	e0bffe17 	ldw	r2,-8(fp)
 8010220:	00bfd016 	blt	zero,r2,8010164 <__alt_data_end+0xff010164>
 8010224:	00000306 	br	8010234 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8010228:	0001883a 	nop
 801022c:	00000106 	br	8010234 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8010230:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8010234:	e0fffd17 	ldw	r3,-12(fp)
 8010238:	e0bff717 	ldw	r2,-36(fp)
 801023c:	18800426 	beq	r3,r2,8010250 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8010240:	e0fffd17 	ldw	r3,-12(fp)
 8010244:	e0bff717 	ldw	r2,-36(fp)
 8010248:	1885c83a 	sub	r2,r3,r2
 801024c:	00000606 	br	8010268 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8010250:	e0bfff17 	ldw	r2,-4(fp)
 8010254:	1090000c 	andi	r2,r2,16384
 8010258:	10000226 	beq	r2,zero,8010264 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 801025c:	00bffd44 	movi	r2,-11
 8010260:	00000106 	br	8010268 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8010264:	00bffec4 	movi	r2,-5
}
 8010268:	e037883a 	mov	sp,fp
 801026c:	dfc00117 	ldw	ra,4(sp)
 8010270:	df000017 	ldw	fp,0(sp)
 8010274:	dec00204 	addi	sp,sp,8
 8010278:	f800283a 	ret

0801027c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 801027c:	defffa04 	addi	sp,sp,-24
 8010280:	dfc00515 	stw	ra,20(sp)
 8010284:	df000415 	stw	fp,16(sp)
 8010288:	df000404 	addi	fp,sp,16
 801028c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8010290:	0007883a 	mov	r3,zero
 8010294:	e0bfff17 	ldw	r2,-4(fp)
 8010298:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 801029c:	e0bfff17 	ldw	r2,-4(fp)
 80102a0:	10800104 	addi	r2,r2,4
 80102a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80102a8:	0005303a 	rdctl	r2,status
 80102ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80102b0:	e0fffd17 	ldw	r3,-12(fp)
 80102b4:	00bfff84 	movi	r2,-2
 80102b8:	1884703a 	and	r2,r3,r2
 80102bc:	1001703a 	wrctl	status,r2
  
  return context;
 80102c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 80102c4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 80102c8:	80111d80 	call	80111d8 <alt_tick>
 80102cc:	e0bffc17 	ldw	r2,-16(fp)
 80102d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80102d4:	e0bffe17 	ldw	r2,-8(fp)
 80102d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80102dc:	0001883a 	nop
 80102e0:	e037883a 	mov	sp,fp
 80102e4:	dfc00117 	ldw	ra,4(sp)
 80102e8:	df000017 	ldw	fp,0(sp)
 80102ec:	dec00204 	addi	sp,sp,8
 80102f0:	f800283a 	ret

080102f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80102f4:	defff804 	addi	sp,sp,-32
 80102f8:	dfc00715 	stw	ra,28(sp)
 80102fc:	df000615 	stw	fp,24(sp)
 8010300:	df000604 	addi	fp,sp,24
 8010304:	e13ffc15 	stw	r4,-16(fp)
 8010308:	e17ffd15 	stw	r5,-12(fp)
 801030c:	e1bffe15 	stw	r6,-8(fp)
 8010310:	e1ffff15 	stw	r7,-4(fp)
 8010314:	e0bfff17 	ldw	r2,-4(fp)
 8010318:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801031c:	d0a6e917 	ldw	r2,-25692(gp)
 8010320:	1000021e 	bne	r2,zero,801032c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8010324:	e0bffb17 	ldw	r2,-20(fp)
 8010328:	d0a6e915 	stw	r2,-25692(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801032c:	e0bffc17 	ldw	r2,-16(fp)
 8010330:	10800104 	addi	r2,r2,4
 8010334:	00c001c4 	movi	r3,7
 8010338:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801033c:	d8000015 	stw	zero,0(sp)
 8010340:	e1fffc17 	ldw	r7,-16(fp)
 8010344:	01820074 	movhi	r6,2049
 8010348:	31809f04 	addi	r6,r6,636
 801034c:	e17ffe17 	ldw	r5,-8(fp)
 8010350:	e13ffd17 	ldw	r4,-12(fp)
 8010354:	80108a00 	call	80108a0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8010358:	0001883a 	nop
 801035c:	e037883a 	mov	sp,fp
 8010360:	dfc00117 	ldw	ra,4(sp)
 8010364:	df000017 	ldw	fp,0(sp)
 8010368:	dec00204 	addi	sp,sp,8
 801036c:	f800283a 	ret

08010370 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010370:	defff504 	addi	sp,sp,-44
 8010374:	df000a15 	stw	fp,40(sp)
 8010378:	df000a04 	addi	fp,sp,40
 801037c:	e13ffc15 	stw	r4,-16(fp)
 8010380:	e17ffd15 	stw	r5,-12(fp)
 8010384:	e1bffe15 	stw	r6,-8(fp)
 8010388:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801038c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8010390:	d0a6e917 	ldw	r2,-25692(gp)
  
  if (alt_ticks_per_second ())
 8010394:	10003c26 	beq	r2,zero,8010488 <alt_alarm_start+0x118>
  {
    if (alarm)
 8010398:	e0bffc17 	ldw	r2,-16(fp)
 801039c:	10003826 	beq	r2,zero,8010480 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80103a0:	e0bffc17 	ldw	r2,-16(fp)
 80103a4:	e0fffe17 	ldw	r3,-8(fp)
 80103a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80103ac:	e0bffc17 	ldw	r2,-16(fp)
 80103b0:	e0ffff17 	ldw	r3,-4(fp)
 80103b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80103b8:	0005303a 	rdctl	r2,status
 80103bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80103c0:	e0fff917 	ldw	r3,-28(fp)
 80103c4:	00bfff84 	movi	r2,-2
 80103c8:	1884703a 	and	r2,r3,r2
 80103cc:	1001703a 	wrctl	status,r2
  
  return context;
 80103d0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80103d4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80103d8:	d0a6ea17 	ldw	r2,-25688(gp)
      
      current_nticks = alt_nticks();
 80103dc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80103e0:	e0fffd17 	ldw	r3,-12(fp)
 80103e4:	e0bff617 	ldw	r2,-40(fp)
 80103e8:	1885883a 	add	r2,r3,r2
 80103ec:	10c00044 	addi	r3,r2,1
 80103f0:	e0bffc17 	ldw	r2,-16(fp)
 80103f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80103f8:	e0bffc17 	ldw	r2,-16(fp)
 80103fc:	10c00217 	ldw	r3,8(r2)
 8010400:	e0bff617 	ldw	r2,-40(fp)
 8010404:	1880042e 	bgeu	r3,r2,8010418 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8010408:	e0bffc17 	ldw	r2,-16(fp)
 801040c:	00c00044 	movi	r3,1
 8010410:	10c00405 	stb	r3,16(r2)
 8010414:	00000206 	br	8010420 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8010418:	e0bffc17 	ldw	r2,-16(fp)
 801041c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8010420:	e0bffc17 	ldw	r2,-16(fp)
 8010424:	d0e01004 	addi	r3,gp,-32704
 8010428:	e0fffa15 	stw	r3,-24(fp)
 801042c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010430:	e0bffb17 	ldw	r2,-20(fp)
 8010434:	e0fffa17 	ldw	r3,-24(fp)
 8010438:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801043c:	e0bffa17 	ldw	r2,-24(fp)
 8010440:	10c00017 	ldw	r3,0(r2)
 8010444:	e0bffb17 	ldw	r2,-20(fp)
 8010448:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801044c:	e0bffa17 	ldw	r2,-24(fp)
 8010450:	10800017 	ldw	r2,0(r2)
 8010454:	e0fffb17 	ldw	r3,-20(fp)
 8010458:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801045c:	e0bffa17 	ldw	r2,-24(fp)
 8010460:	e0fffb17 	ldw	r3,-20(fp)
 8010464:	10c00015 	stw	r3,0(r2)
 8010468:	e0bff817 	ldw	r2,-32(fp)
 801046c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010470:	e0bff717 	ldw	r2,-36(fp)
 8010474:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8010478:	0005883a 	mov	r2,zero
 801047c:	00000306 	br	801048c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8010480:	00bffa84 	movi	r2,-22
 8010484:	00000106 	br	801048c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8010488:	00bfde84 	movi	r2,-134
  }
}
 801048c:	e037883a 	mov	sp,fp
 8010490:	df000017 	ldw	fp,0(sp)
 8010494:	dec00104 	addi	sp,sp,4
 8010498:	f800283a 	ret

0801049c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 801049c:	defffa04 	addi	sp,sp,-24
 80104a0:	dfc00515 	stw	ra,20(sp)
 80104a4:	df000415 	stw	fp,16(sp)
 80104a8:	df000404 	addi	fp,sp,16
 80104ac:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 80104b0:	008000c4 	movi	r2,3
 80104b4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80104b8:	e0fffd17 	ldw	r3,-12(fp)
 80104bc:	008003f4 	movhi	r2,15
 80104c0:	10909004 	addi	r2,r2,16960
 80104c4:	1885383a 	mul	r2,r3,r2
 80104c8:	100b883a 	mov	r5,r2
 80104cc:	0100bef4 	movhi	r4,763
 80104d0:	213c2004 	addi	r4,r4,-3968
 80104d4:	800a9500 	call	800a950 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 80104d8:	100b883a 	mov	r5,r2
 80104dc:	01200034 	movhi	r4,32768
 80104e0:	213fffc4 	addi	r4,r4,-1
 80104e4:	800a9500 	call	800a950 <__udivsi3>
 80104e8:	100b883a 	mov	r5,r2
 80104ec:	e13fff17 	ldw	r4,-4(fp)
 80104f0:	800a9500 	call	800a950 <__udivsi3>
 80104f4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 80104f8:	e0bffe17 	ldw	r2,-8(fp)
 80104fc:	10002a26 	beq	r2,zero,80105a8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8010500:	e03ffc15 	stw	zero,-16(fp)
 8010504:	00001706 	br	8010564 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8010508:	00a00034 	movhi	r2,32768
 801050c:	10bfffc4 	addi	r2,r2,-1
 8010510:	10bfffc4 	addi	r2,r2,-1
 8010514:	103ffe1e 	bne	r2,zero,8010510 <__alt_data_end+0xff010510>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8010518:	e0fffd17 	ldw	r3,-12(fp)
 801051c:	008003f4 	movhi	r2,15
 8010520:	10909004 	addi	r2,r2,16960
 8010524:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8010528:	100b883a 	mov	r5,r2
 801052c:	0100bef4 	movhi	r4,763
 8010530:	213c2004 	addi	r4,r4,-3968
 8010534:	800a9500 	call	800a950 <__udivsi3>
 8010538:	100b883a 	mov	r5,r2
 801053c:	01200034 	movhi	r4,32768
 8010540:	213fffc4 	addi	r4,r4,-1
 8010544:	800a9500 	call	800a950 <__udivsi3>
 8010548:	1007883a 	mov	r3,r2
 801054c:	e0bfff17 	ldw	r2,-4(fp)
 8010550:	10c5c83a 	sub	r2,r2,r3
 8010554:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8010558:	e0bffc17 	ldw	r2,-16(fp)
 801055c:	10800044 	addi	r2,r2,1
 8010560:	e0bffc15 	stw	r2,-16(fp)
 8010564:	e0fffc17 	ldw	r3,-16(fp)
 8010568:	e0bffe17 	ldw	r2,-8(fp)
 801056c:	18bfe616 	blt	r3,r2,8010508 <__alt_data_end+0xff010508>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010570:	e0fffd17 	ldw	r3,-12(fp)
 8010574:	008003f4 	movhi	r2,15
 8010578:	10909004 	addi	r2,r2,16960
 801057c:	1885383a 	mul	r2,r3,r2
 8010580:	100b883a 	mov	r5,r2
 8010584:	0100bef4 	movhi	r4,763
 8010588:	213c2004 	addi	r4,r4,-3968
 801058c:	800a9500 	call	800a950 <__udivsi3>
 8010590:	1007883a 	mov	r3,r2
 8010594:	e0bfff17 	ldw	r2,-4(fp)
 8010598:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 801059c:	10bfffc4 	addi	r2,r2,-1
 80105a0:	103ffe1e 	bne	r2,zero,801059c <__alt_data_end+0xff01059c>
 80105a4:	00000d06 	br	80105dc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80105a8:	e0fffd17 	ldw	r3,-12(fp)
 80105ac:	008003f4 	movhi	r2,15
 80105b0:	10909004 	addi	r2,r2,16960
 80105b4:	1885383a 	mul	r2,r3,r2
 80105b8:	100b883a 	mov	r5,r2
 80105bc:	0100bef4 	movhi	r4,763
 80105c0:	213c2004 	addi	r4,r4,-3968
 80105c4:	800a9500 	call	800a950 <__udivsi3>
 80105c8:	1007883a 	mov	r3,r2
 80105cc:	e0bfff17 	ldw	r2,-4(fp)
 80105d0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80105d4:	10bfffc4 	addi	r2,r2,-1
 80105d8:	00bffe16 	blt	zero,r2,80105d4 <__alt_data_end+0xff0105d4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 80105dc:	0005883a 	mov	r2,zero
}
 80105e0:	e037883a 	mov	sp,fp
 80105e4:	dfc00117 	ldw	ra,4(sp)
 80105e8:	df000017 	ldw	fp,0(sp)
 80105ec:	dec00204 	addi	sp,sp,8
 80105f0:	f800283a 	ret

080105f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80105f4:	defffe04 	addi	sp,sp,-8
 80105f8:	df000115 	stw	fp,4(sp)
 80105fc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8010600:	e03fff15 	stw	zero,-4(fp)
 8010604:	00000506 	br	801061c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8010608:	e0bfff17 	ldw	r2,-4(fp)
 801060c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8010610:	e0bfff17 	ldw	r2,-4(fp)
 8010614:	10800804 	addi	r2,r2,32
 8010618:	e0bfff15 	stw	r2,-4(fp)
 801061c:	e0bfff17 	ldw	r2,-4(fp)
 8010620:	10820030 	cmpltui	r2,r2,2048
 8010624:	103ff81e 	bne	r2,zero,8010608 <__alt_data_end+0xff010608>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010628:	0001883a 	nop
 801062c:	e037883a 	mov	sp,fp
 8010630:	df000017 	ldw	fp,0(sp)
 8010634:	dec00104 	addi	sp,sp,4
 8010638:	f800283a 	ret

0801063c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801063c:	defffe04 	addi	sp,sp,-8
 8010640:	dfc00115 	stw	ra,4(sp)
 8010644:	df000015 	stw	fp,0(sp)
 8010648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801064c:	d0a00b17 	ldw	r2,-32724(gp)
 8010650:	10000326 	beq	r2,zero,8010660 <alt_get_errno+0x24>
 8010654:	d0a00b17 	ldw	r2,-32724(gp)
 8010658:	103ee83a 	callr	r2
 801065c:	00000106 	br	8010664 <alt_get_errno+0x28>
 8010660:	d0a6e404 	addi	r2,gp,-25712
}
 8010664:	e037883a 	mov	sp,fp
 8010668:	dfc00117 	ldw	ra,4(sp)
 801066c:	df000017 	ldw	fp,0(sp)
 8010670:	dec00204 	addi	sp,sp,8
 8010674:	f800283a 	ret

08010678 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010678:	defffa04 	addi	sp,sp,-24
 801067c:	dfc00515 	stw	ra,20(sp)
 8010680:	df000415 	stw	fp,16(sp)
 8010684:	df000404 	addi	fp,sp,16
 8010688:	e13ffe15 	stw	r4,-8(fp)
 801068c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8010690:	e0bffe17 	ldw	r2,-8(fp)
 8010694:	10000326 	beq	r2,zero,80106a4 <alt_dev_llist_insert+0x2c>
 8010698:	e0bffe17 	ldw	r2,-8(fp)
 801069c:	10800217 	ldw	r2,8(r2)
 80106a0:	1000061e 	bne	r2,zero,80106bc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80106a4:	801063c0 	call	801063c <alt_get_errno>
 80106a8:	1007883a 	mov	r3,r2
 80106ac:	00800584 	movi	r2,22
 80106b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80106b4:	00bffa84 	movi	r2,-22
 80106b8:	00001306 	br	8010708 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80106bc:	e0bffe17 	ldw	r2,-8(fp)
 80106c0:	e0ffff17 	ldw	r3,-4(fp)
 80106c4:	e0fffc15 	stw	r3,-16(fp)
 80106c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80106cc:	e0bffd17 	ldw	r2,-12(fp)
 80106d0:	e0fffc17 	ldw	r3,-16(fp)
 80106d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80106d8:	e0bffc17 	ldw	r2,-16(fp)
 80106dc:	10c00017 	ldw	r3,0(r2)
 80106e0:	e0bffd17 	ldw	r2,-12(fp)
 80106e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80106e8:	e0bffc17 	ldw	r2,-16(fp)
 80106ec:	10800017 	ldw	r2,0(r2)
 80106f0:	e0fffd17 	ldw	r3,-12(fp)
 80106f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80106f8:	e0bffc17 	ldw	r2,-16(fp)
 80106fc:	e0fffd17 	ldw	r3,-12(fp)
 8010700:	10c00015 	stw	r3,0(r2)

  return 0;  
 8010704:	0005883a 	mov	r2,zero
}
 8010708:	e037883a 	mov	sp,fp
 801070c:	dfc00117 	ldw	ra,4(sp)
 8010710:	df000017 	ldw	fp,0(sp)
 8010714:	dec00204 	addi	sp,sp,8
 8010718:	f800283a 	ret

0801071c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 801071c:	defffd04 	addi	sp,sp,-12
 8010720:	dfc00215 	stw	ra,8(sp)
 8010724:	df000115 	stw	fp,4(sp)
 8010728:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801072c:	00820074 	movhi	r2,2049
 8010730:	10865b04 	addi	r2,r2,6508
 8010734:	e0bfff15 	stw	r2,-4(fp)
 8010738:	00000606 	br	8010754 <_do_ctors+0x38>
        (*ctor) (); 
 801073c:	e0bfff17 	ldw	r2,-4(fp)
 8010740:	10800017 	ldw	r2,0(r2)
 8010744:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010748:	e0bfff17 	ldw	r2,-4(fp)
 801074c:	10bfff04 	addi	r2,r2,-4
 8010750:	e0bfff15 	stw	r2,-4(fp)
 8010754:	e0ffff17 	ldw	r3,-4(fp)
 8010758:	00820074 	movhi	r2,2049
 801075c:	10865c04 	addi	r2,r2,6512
 8010760:	18bff62e 	bgeu	r3,r2,801073c <__alt_data_end+0xff01073c>
        (*ctor) (); 
}
 8010764:	0001883a 	nop
 8010768:	e037883a 	mov	sp,fp
 801076c:	dfc00117 	ldw	ra,4(sp)
 8010770:	df000017 	ldw	fp,0(sp)
 8010774:	dec00204 	addi	sp,sp,8
 8010778:	f800283a 	ret

0801077c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 801077c:	defffd04 	addi	sp,sp,-12
 8010780:	dfc00215 	stw	ra,8(sp)
 8010784:	df000115 	stw	fp,4(sp)
 8010788:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801078c:	00820074 	movhi	r2,2049
 8010790:	10865b04 	addi	r2,r2,6508
 8010794:	e0bfff15 	stw	r2,-4(fp)
 8010798:	00000606 	br	80107b4 <_do_dtors+0x38>
        (*dtor) (); 
 801079c:	e0bfff17 	ldw	r2,-4(fp)
 80107a0:	10800017 	ldw	r2,0(r2)
 80107a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80107a8:	e0bfff17 	ldw	r2,-4(fp)
 80107ac:	10bfff04 	addi	r2,r2,-4
 80107b0:	e0bfff15 	stw	r2,-4(fp)
 80107b4:	e0ffff17 	ldw	r3,-4(fp)
 80107b8:	00820074 	movhi	r2,2049
 80107bc:	10865c04 	addi	r2,r2,6512
 80107c0:	18bff62e 	bgeu	r3,r2,801079c <__alt_data_end+0xff01079c>
        (*dtor) (); 
}
 80107c4:	0001883a 	nop
 80107c8:	e037883a 	mov	sp,fp
 80107cc:	dfc00117 	ldw	ra,4(sp)
 80107d0:	df000017 	ldw	fp,0(sp)
 80107d4:	dec00204 	addi	sp,sp,8
 80107d8:	f800283a 	ret

080107dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80107dc:	defffa04 	addi	sp,sp,-24
 80107e0:	dfc00515 	stw	ra,20(sp)
 80107e4:	df000415 	stw	fp,16(sp)
 80107e8:	df000404 	addi	fp,sp,16
 80107ec:	e13ffe15 	stw	r4,-8(fp)
 80107f0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80107f4:	e0bfff17 	ldw	r2,-4(fp)
 80107f8:	10800017 	ldw	r2,0(r2)
 80107fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8010800:	e13ffe17 	ldw	r4,-8(fp)
 8010804:	800072c0 	call	800072c <strlen>
 8010808:	10800044 	addi	r2,r2,1
 801080c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010810:	00000d06 	br	8010848 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010814:	e0bffc17 	ldw	r2,-16(fp)
 8010818:	10800217 	ldw	r2,8(r2)
 801081c:	e0fffd17 	ldw	r3,-12(fp)
 8010820:	180d883a 	mov	r6,r3
 8010824:	e17ffe17 	ldw	r5,-8(fp)
 8010828:	1009883a 	mov	r4,r2
 801082c:	80116280 	call	8011628 <memcmp>
 8010830:	1000021e 	bne	r2,zero,801083c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010834:	e0bffc17 	ldw	r2,-16(fp)
 8010838:	00000706 	br	8010858 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 801083c:	e0bffc17 	ldw	r2,-16(fp)
 8010840:	10800017 	ldw	r2,0(r2)
 8010844:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010848:	e0fffc17 	ldw	r3,-16(fp)
 801084c:	e0bfff17 	ldw	r2,-4(fp)
 8010850:	18bff01e 	bne	r3,r2,8010814 <__alt_data_end+0xff010814>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8010854:	0005883a 	mov	r2,zero
}
 8010858:	e037883a 	mov	sp,fp
 801085c:	dfc00117 	ldw	ra,4(sp)
 8010860:	df000017 	ldw	fp,0(sp)
 8010864:	dec00204 	addi	sp,sp,8
 8010868:	f800283a 	ret

0801086c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 801086c:	defffe04 	addi	sp,sp,-8
 8010870:	dfc00115 	stw	ra,4(sp)
 8010874:	df000015 	stw	fp,0(sp)
 8010878:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 801087c:	01440004 	movi	r5,4096
 8010880:	0009883a 	mov	r4,zero
 8010884:	80114b00 	call	80114b0 <alt_icache_flush>
#endif
}
 8010888:	0001883a 	nop
 801088c:	e037883a 	mov	sp,fp
 8010890:	dfc00117 	ldw	ra,4(sp)
 8010894:	df000017 	ldw	fp,0(sp)
 8010898:	dec00204 	addi	sp,sp,8
 801089c:	f800283a 	ret

080108a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80108a0:	defff904 	addi	sp,sp,-28
 80108a4:	dfc00615 	stw	ra,24(sp)
 80108a8:	df000515 	stw	fp,20(sp)
 80108ac:	df000504 	addi	fp,sp,20
 80108b0:	e13ffc15 	stw	r4,-16(fp)
 80108b4:	e17ffd15 	stw	r5,-12(fp)
 80108b8:	e1bffe15 	stw	r6,-8(fp)
 80108bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80108c0:	e0800217 	ldw	r2,8(fp)
 80108c4:	d8800015 	stw	r2,0(sp)
 80108c8:	e1ffff17 	ldw	r7,-4(fp)
 80108cc:	e1bffe17 	ldw	r6,-8(fp)
 80108d0:	e17ffd17 	ldw	r5,-12(fp)
 80108d4:	e13ffc17 	ldw	r4,-16(fp)
 80108d8:	8010a500 	call	8010a50 <alt_iic_isr_register>
}  
 80108dc:	e037883a 	mov	sp,fp
 80108e0:	dfc00117 	ldw	ra,4(sp)
 80108e4:	df000017 	ldw	fp,0(sp)
 80108e8:	dec00204 	addi	sp,sp,8
 80108ec:	f800283a 	ret

080108f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80108f0:	defff904 	addi	sp,sp,-28
 80108f4:	df000615 	stw	fp,24(sp)
 80108f8:	df000604 	addi	fp,sp,24
 80108fc:	e13ffe15 	stw	r4,-8(fp)
 8010900:	e17fff15 	stw	r5,-4(fp)
 8010904:	e0bfff17 	ldw	r2,-4(fp)
 8010908:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801090c:	0005303a 	rdctl	r2,status
 8010910:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010914:	e0fffb17 	ldw	r3,-20(fp)
 8010918:	00bfff84 	movi	r2,-2
 801091c:	1884703a 	and	r2,r3,r2
 8010920:	1001703a 	wrctl	status,r2
  
  return context;
 8010924:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010928:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 801092c:	00c00044 	movi	r3,1
 8010930:	e0bffa17 	ldw	r2,-24(fp)
 8010934:	1884983a 	sll	r2,r3,r2
 8010938:	1007883a 	mov	r3,r2
 801093c:	d0a6e517 	ldw	r2,-25708(gp)
 8010940:	1884b03a 	or	r2,r3,r2
 8010944:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010948:	d0a6e517 	ldw	r2,-25708(gp)
 801094c:	100170fa 	wrctl	ienable,r2
 8010950:	e0bffc17 	ldw	r2,-16(fp)
 8010954:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010958:	e0bffd17 	ldw	r2,-12(fp)
 801095c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010960:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8010964:	0001883a 	nop
}
 8010968:	e037883a 	mov	sp,fp
 801096c:	df000017 	ldw	fp,0(sp)
 8010970:	dec00104 	addi	sp,sp,4
 8010974:	f800283a 	ret

08010978 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8010978:	defff904 	addi	sp,sp,-28
 801097c:	df000615 	stw	fp,24(sp)
 8010980:	df000604 	addi	fp,sp,24
 8010984:	e13ffe15 	stw	r4,-8(fp)
 8010988:	e17fff15 	stw	r5,-4(fp)
 801098c:	e0bfff17 	ldw	r2,-4(fp)
 8010990:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010994:	0005303a 	rdctl	r2,status
 8010998:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801099c:	e0fffb17 	ldw	r3,-20(fp)
 80109a0:	00bfff84 	movi	r2,-2
 80109a4:	1884703a 	and	r2,r3,r2
 80109a8:	1001703a 	wrctl	status,r2
  
  return context;
 80109ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80109b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80109b4:	00c00044 	movi	r3,1
 80109b8:	e0bffa17 	ldw	r2,-24(fp)
 80109bc:	1884983a 	sll	r2,r3,r2
 80109c0:	0084303a 	nor	r2,zero,r2
 80109c4:	1007883a 	mov	r3,r2
 80109c8:	d0a6e517 	ldw	r2,-25708(gp)
 80109cc:	1884703a 	and	r2,r3,r2
 80109d0:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80109d4:	d0a6e517 	ldw	r2,-25708(gp)
 80109d8:	100170fa 	wrctl	ienable,r2
 80109dc:	e0bffc17 	ldw	r2,-16(fp)
 80109e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80109e4:	e0bffd17 	ldw	r2,-12(fp)
 80109e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80109ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80109f0:	0001883a 	nop
}
 80109f4:	e037883a 	mov	sp,fp
 80109f8:	df000017 	ldw	fp,0(sp)
 80109fc:	dec00104 	addi	sp,sp,4
 8010a00:	f800283a 	ret

08010a04 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8010a04:	defffc04 	addi	sp,sp,-16
 8010a08:	df000315 	stw	fp,12(sp)
 8010a0c:	df000304 	addi	fp,sp,12
 8010a10:	e13ffe15 	stw	r4,-8(fp)
 8010a14:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010a18:	000530fa 	rdctl	r2,ienable
 8010a1c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8010a20:	00c00044 	movi	r3,1
 8010a24:	e0bfff17 	ldw	r2,-4(fp)
 8010a28:	1884983a 	sll	r2,r3,r2
 8010a2c:	1007883a 	mov	r3,r2
 8010a30:	e0bffd17 	ldw	r2,-12(fp)
 8010a34:	1884703a 	and	r2,r3,r2
 8010a38:	1004c03a 	cmpne	r2,r2,zero
 8010a3c:	10803fcc 	andi	r2,r2,255
}
 8010a40:	e037883a 	mov	sp,fp
 8010a44:	df000017 	ldw	fp,0(sp)
 8010a48:	dec00104 	addi	sp,sp,4
 8010a4c:	f800283a 	ret

08010a50 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010a50:	defff504 	addi	sp,sp,-44
 8010a54:	dfc00a15 	stw	ra,40(sp)
 8010a58:	df000915 	stw	fp,36(sp)
 8010a5c:	df000904 	addi	fp,sp,36
 8010a60:	e13ffc15 	stw	r4,-16(fp)
 8010a64:	e17ffd15 	stw	r5,-12(fp)
 8010a68:	e1bffe15 	stw	r6,-8(fp)
 8010a6c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8010a70:	00bffa84 	movi	r2,-22
 8010a74:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010a78:	e0bffd17 	ldw	r2,-12(fp)
 8010a7c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8010a80:	e0bff817 	ldw	r2,-32(fp)
 8010a84:	10800808 	cmpgei	r2,r2,32
 8010a88:	1000271e 	bne	r2,zero,8010b28 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010a8c:	0005303a 	rdctl	r2,status
 8010a90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010a94:	e0fffb17 	ldw	r3,-20(fp)
 8010a98:	00bfff84 	movi	r2,-2
 8010a9c:	1884703a 	and	r2,r3,r2
 8010aa0:	1001703a 	wrctl	status,r2
  
  return context;
 8010aa4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8010aa8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8010aac:	00820074 	movhi	r2,2049
 8010ab0:	1094ff04 	addi	r2,r2,21500
 8010ab4:	e0fff817 	ldw	r3,-32(fp)
 8010ab8:	180690fa 	slli	r3,r3,3
 8010abc:	10c5883a 	add	r2,r2,r3
 8010ac0:	e0fffe17 	ldw	r3,-8(fp)
 8010ac4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8010ac8:	00820074 	movhi	r2,2049
 8010acc:	1094ff04 	addi	r2,r2,21500
 8010ad0:	e0fff817 	ldw	r3,-32(fp)
 8010ad4:	180690fa 	slli	r3,r3,3
 8010ad8:	10c5883a 	add	r2,r2,r3
 8010adc:	10800104 	addi	r2,r2,4
 8010ae0:	e0ffff17 	ldw	r3,-4(fp)
 8010ae4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010ae8:	e0bffe17 	ldw	r2,-8(fp)
 8010aec:	10000526 	beq	r2,zero,8010b04 <alt_iic_isr_register+0xb4>
 8010af0:	e0bff817 	ldw	r2,-32(fp)
 8010af4:	100b883a 	mov	r5,r2
 8010af8:	e13ffc17 	ldw	r4,-16(fp)
 8010afc:	80108f00 	call	80108f0 <alt_ic_irq_enable>
 8010b00:	00000406 	br	8010b14 <alt_iic_isr_register+0xc4>
 8010b04:	e0bff817 	ldw	r2,-32(fp)
 8010b08:	100b883a 	mov	r5,r2
 8010b0c:	e13ffc17 	ldw	r4,-16(fp)
 8010b10:	80109780 	call	8010978 <alt_ic_irq_disable>
 8010b14:	e0bff715 	stw	r2,-36(fp)
 8010b18:	e0bffa17 	ldw	r2,-24(fp)
 8010b1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010b20:	e0bff917 	ldw	r2,-28(fp)
 8010b24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8010b28:	e0bff717 	ldw	r2,-36(fp)
}
 8010b2c:	e037883a 	mov	sp,fp
 8010b30:	dfc00117 	ldw	ra,4(sp)
 8010b34:	df000017 	ldw	fp,0(sp)
 8010b38:	dec00204 	addi	sp,sp,8
 8010b3c:	f800283a 	ret

08010b40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8010b40:	defff904 	addi	sp,sp,-28
 8010b44:	dfc00615 	stw	ra,24(sp)
 8010b48:	df000515 	stw	fp,20(sp)
 8010b4c:	df000504 	addi	fp,sp,20
 8010b50:	e13ffc15 	stw	r4,-16(fp)
 8010b54:	e17ffd15 	stw	r5,-12(fp)
 8010b58:	e1bffe15 	stw	r6,-8(fp)
 8010b5c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8010b60:	e1bfff17 	ldw	r6,-4(fp)
 8010b64:	e17ffe17 	ldw	r5,-8(fp)
 8010b68:	e13ffd17 	ldw	r4,-12(fp)
 8010b6c:	8010d800 	call	8010d80 <open>
 8010b70:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8010b74:	e0bffb17 	ldw	r2,-20(fp)
 8010b78:	10001c16 	blt	r2,zero,8010bec <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8010b7c:	00820074 	movhi	r2,2049
 8010b80:	10898304 	addi	r2,r2,9740
 8010b84:	e0fffb17 	ldw	r3,-20(fp)
 8010b88:	18c00324 	muli	r3,r3,12
 8010b8c:	10c5883a 	add	r2,r2,r3
 8010b90:	10c00017 	ldw	r3,0(r2)
 8010b94:	e0bffc17 	ldw	r2,-16(fp)
 8010b98:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8010b9c:	00820074 	movhi	r2,2049
 8010ba0:	10898304 	addi	r2,r2,9740
 8010ba4:	e0fffb17 	ldw	r3,-20(fp)
 8010ba8:	18c00324 	muli	r3,r3,12
 8010bac:	10c5883a 	add	r2,r2,r3
 8010bb0:	10800104 	addi	r2,r2,4
 8010bb4:	10c00017 	ldw	r3,0(r2)
 8010bb8:	e0bffc17 	ldw	r2,-16(fp)
 8010bbc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8010bc0:	00820074 	movhi	r2,2049
 8010bc4:	10898304 	addi	r2,r2,9740
 8010bc8:	e0fffb17 	ldw	r3,-20(fp)
 8010bcc:	18c00324 	muli	r3,r3,12
 8010bd0:	10c5883a 	add	r2,r2,r3
 8010bd4:	10800204 	addi	r2,r2,8
 8010bd8:	10c00017 	ldw	r3,0(r2)
 8010bdc:	e0bffc17 	ldw	r2,-16(fp)
 8010be0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8010be4:	e13ffb17 	ldw	r4,-20(fp)
 8010be8:	800d8f00 	call	800d8f0 <alt_release_fd>
  }
} 
 8010bec:	0001883a 	nop
 8010bf0:	e037883a 	mov	sp,fp
 8010bf4:	dfc00117 	ldw	ra,4(sp)
 8010bf8:	df000017 	ldw	fp,0(sp)
 8010bfc:	dec00204 	addi	sp,sp,8
 8010c00:	f800283a 	ret

08010c04 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8010c04:	defffb04 	addi	sp,sp,-20
 8010c08:	dfc00415 	stw	ra,16(sp)
 8010c0c:	df000315 	stw	fp,12(sp)
 8010c10:	df000304 	addi	fp,sp,12
 8010c14:	e13ffd15 	stw	r4,-12(fp)
 8010c18:	e17ffe15 	stw	r5,-8(fp)
 8010c1c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8010c20:	01c07fc4 	movi	r7,511
 8010c24:	01800044 	movi	r6,1
 8010c28:	e17ffd17 	ldw	r5,-12(fp)
 8010c2c:	01020074 	movhi	r4,2049
 8010c30:	21098604 	addi	r4,r4,9752
 8010c34:	8010b400 	call	8010b40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8010c38:	01c07fc4 	movi	r7,511
 8010c3c:	000d883a 	mov	r6,zero
 8010c40:	e17ffe17 	ldw	r5,-8(fp)
 8010c44:	01020074 	movhi	r4,2049
 8010c48:	21098304 	addi	r4,r4,9740
 8010c4c:	8010b400 	call	8010b40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8010c50:	01c07fc4 	movi	r7,511
 8010c54:	01800044 	movi	r6,1
 8010c58:	e17fff17 	ldw	r5,-4(fp)
 8010c5c:	01020074 	movhi	r4,2049
 8010c60:	21098904 	addi	r4,r4,9764
 8010c64:	8010b400 	call	8010b40 <alt_open_fd>
}  
 8010c68:	0001883a 	nop
 8010c6c:	e037883a 	mov	sp,fp
 8010c70:	dfc00117 	ldw	ra,4(sp)
 8010c74:	df000017 	ldw	fp,0(sp)
 8010c78:	dec00204 	addi	sp,sp,8
 8010c7c:	f800283a 	ret

08010c80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010c80:	defffe04 	addi	sp,sp,-8
 8010c84:	dfc00115 	stw	ra,4(sp)
 8010c88:	df000015 	stw	fp,0(sp)
 8010c8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010c90:	d0a00b17 	ldw	r2,-32724(gp)
 8010c94:	10000326 	beq	r2,zero,8010ca4 <alt_get_errno+0x24>
 8010c98:	d0a00b17 	ldw	r2,-32724(gp)
 8010c9c:	103ee83a 	callr	r2
 8010ca0:	00000106 	br	8010ca8 <alt_get_errno+0x28>
 8010ca4:	d0a6e404 	addi	r2,gp,-25712
}
 8010ca8:	e037883a 	mov	sp,fp
 8010cac:	dfc00117 	ldw	ra,4(sp)
 8010cb0:	df000017 	ldw	fp,0(sp)
 8010cb4:	dec00204 	addi	sp,sp,8
 8010cb8:	f800283a 	ret

08010cbc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8010cbc:	defffd04 	addi	sp,sp,-12
 8010cc0:	df000215 	stw	fp,8(sp)
 8010cc4:	df000204 	addi	fp,sp,8
 8010cc8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8010ccc:	e0bfff17 	ldw	r2,-4(fp)
 8010cd0:	10800217 	ldw	r2,8(r2)
 8010cd4:	10d00034 	orhi	r3,r2,16384
 8010cd8:	e0bfff17 	ldw	r2,-4(fp)
 8010cdc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010ce0:	e03ffe15 	stw	zero,-8(fp)
 8010ce4:	00001d06 	br	8010d5c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010ce8:	00820074 	movhi	r2,2049
 8010cec:	10898304 	addi	r2,r2,9740
 8010cf0:	e0fffe17 	ldw	r3,-8(fp)
 8010cf4:	18c00324 	muli	r3,r3,12
 8010cf8:	10c5883a 	add	r2,r2,r3
 8010cfc:	10c00017 	ldw	r3,0(r2)
 8010d00:	e0bfff17 	ldw	r2,-4(fp)
 8010d04:	10800017 	ldw	r2,0(r2)
 8010d08:	1880111e 	bne	r3,r2,8010d50 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010d0c:	00820074 	movhi	r2,2049
 8010d10:	10898304 	addi	r2,r2,9740
 8010d14:	e0fffe17 	ldw	r3,-8(fp)
 8010d18:	18c00324 	muli	r3,r3,12
 8010d1c:	10c5883a 	add	r2,r2,r3
 8010d20:	10800204 	addi	r2,r2,8
 8010d24:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010d28:	1000090e 	bge	r2,zero,8010d50 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8010d2c:	e0bffe17 	ldw	r2,-8(fp)
 8010d30:	10c00324 	muli	r3,r2,12
 8010d34:	00820074 	movhi	r2,2049
 8010d38:	10898304 	addi	r2,r2,9740
 8010d3c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010d40:	e0bfff17 	ldw	r2,-4(fp)
 8010d44:	18800226 	beq	r3,r2,8010d50 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8010d48:	00bffcc4 	movi	r2,-13
 8010d4c:	00000806 	br	8010d70 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010d50:	e0bffe17 	ldw	r2,-8(fp)
 8010d54:	10800044 	addi	r2,r2,1
 8010d58:	e0bffe15 	stw	r2,-8(fp)
 8010d5c:	d0a00a17 	ldw	r2,-32728(gp)
 8010d60:	1007883a 	mov	r3,r2
 8010d64:	e0bffe17 	ldw	r2,-8(fp)
 8010d68:	18bfdf2e 	bgeu	r3,r2,8010ce8 <__alt_data_end+0xff010ce8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8010d6c:	0005883a 	mov	r2,zero
}
 8010d70:	e037883a 	mov	sp,fp
 8010d74:	df000017 	ldw	fp,0(sp)
 8010d78:	dec00104 	addi	sp,sp,4
 8010d7c:	f800283a 	ret

08010d80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8010d80:	defff604 	addi	sp,sp,-40
 8010d84:	dfc00915 	stw	ra,36(sp)
 8010d88:	df000815 	stw	fp,32(sp)
 8010d8c:	df000804 	addi	fp,sp,32
 8010d90:	e13ffd15 	stw	r4,-12(fp)
 8010d94:	e17ffe15 	stw	r5,-8(fp)
 8010d98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8010d9c:	00bfffc4 	movi	r2,-1
 8010da0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8010da4:	00bffb44 	movi	r2,-19
 8010da8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8010dac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8010db0:	d1600804 	addi	r5,gp,-32736
 8010db4:	e13ffd17 	ldw	r4,-12(fp)
 8010db8:	80107dc0 	call	80107dc <alt_find_dev>
 8010dbc:	e0bff815 	stw	r2,-32(fp)
 8010dc0:	e0bff817 	ldw	r2,-32(fp)
 8010dc4:	1000051e 	bne	r2,zero,8010ddc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8010dc8:	e13ffd17 	ldw	r4,-12(fp)
 8010dcc:	80113040 	call	8011304 <alt_find_file>
 8010dd0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8010dd4:	00800044 	movi	r2,1
 8010dd8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8010ddc:	e0bff817 	ldw	r2,-32(fp)
 8010de0:	10002926 	beq	r2,zero,8010e88 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8010de4:	e13ff817 	ldw	r4,-32(fp)
 8010de8:	801140c0 	call	801140c <alt_get_fd>
 8010dec:	e0bff915 	stw	r2,-28(fp)
 8010df0:	e0bff917 	ldw	r2,-28(fp)
 8010df4:	1000030e 	bge	r2,zero,8010e04 <open+0x84>
    {
      status = index;
 8010df8:	e0bff917 	ldw	r2,-28(fp)
 8010dfc:	e0bffa15 	stw	r2,-24(fp)
 8010e00:	00002306 	br	8010e90 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 8010e04:	e0bff917 	ldw	r2,-28(fp)
 8010e08:	10c00324 	muli	r3,r2,12
 8010e0c:	00820074 	movhi	r2,2049
 8010e10:	10898304 	addi	r2,r2,9740
 8010e14:	1885883a 	add	r2,r3,r2
 8010e18:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8010e1c:	e0fffe17 	ldw	r3,-8(fp)
 8010e20:	00900034 	movhi	r2,16384
 8010e24:	10bfffc4 	addi	r2,r2,-1
 8010e28:	1886703a 	and	r3,r3,r2
 8010e2c:	e0bffc17 	ldw	r2,-16(fp)
 8010e30:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8010e34:	e0bffb17 	ldw	r2,-20(fp)
 8010e38:	1000051e 	bne	r2,zero,8010e50 <open+0xd0>
 8010e3c:	e13ffc17 	ldw	r4,-16(fp)
 8010e40:	8010cbc0 	call	8010cbc <alt_file_locked>
 8010e44:	e0bffa15 	stw	r2,-24(fp)
 8010e48:	e0bffa17 	ldw	r2,-24(fp)
 8010e4c:	10001016 	blt	r2,zero,8010e90 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8010e50:	e0bff817 	ldw	r2,-32(fp)
 8010e54:	10800317 	ldw	r2,12(r2)
 8010e58:	10000826 	beq	r2,zero,8010e7c <open+0xfc>
 8010e5c:	e0bff817 	ldw	r2,-32(fp)
 8010e60:	10800317 	ldw	r2,12(r2)
 8010e64:	e1ffff17 	ldw	r7,-4(fp)
 8010e68:	e1bffe17 	ldw	r6,-8(fp)
 8010e6c:	e17ffd17 	ldw	r5,-12(fp)
 8010e70:	e13ffc17 	ldw	r4,-16(fp)
 8010e74:	103ee83a 	callr	r2
 8010e78:	00000106 	br	8010e80 <open+0x100>
 8010e7c:	0005883a 	mov	r2,zero
 8010e80:	e0bffa15 	stw	r2,-24(fp)
 8010e84:	00000206 	br	8010e90 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8010e88:	00bffb44 	movi	r2,-19
 8010e8c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8010e90:	e0bffa17 	ldw	r2,-24(fp)
 8010e94:	1000090e 	bge	r2,zero,8010ebc <open+0x13c>
  {
    alt_release_fd (index);  
 8010e98:	e13ff917 	ldw	r4,-28(fp)
 8010e9c:	800d8f00 	call	800d8f0 <alt_release_fd>
    ALT_ERRNO = -status;
 8010ea0:	8010c800 	call	8010c80 <alt_get_errno>
 8010ea4:	1007883a 	mov	r3,r2
 8010ea8:	e0bffa17 	ldw	r2,-24(fp)
 8010eac:	0085c83a 	sub	r2,zero,r2
 8010eb0:	18800015 	stw	r2,0(r3)
    return -1;
 8010eb4:	00bfffc4 	movi	r2,-1
 8010eb8:	00000106 	br	8010ec0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 8010ebc:	e0bff917 	ldw	r2,-28(fp)
}
 8010ec0:	e037883a 	mov	sp,fp
 8010ec4:	dfc00117 	ldw	ra,4(sp)
 8010ec8:	df000017 	ldw	fp,0(sp)
 8010ecc:	dec00204 	addi	sp,sp,8
 8010ed0:	f800283a 	ret

08010ed4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8010ed4:	defff204 	addi	sp,sp,-56
 8010ed8:	dfc00a15 	stw	ra,40(sp)
 8010edc:	df000915 	stw	fp,36(sp)
 8010ee0:	df000904 	addi	fp,sp,36
 8010ee4:	e13fff15 	stw	r4,-4(fp)
 8010ee8:	e1400215 	stw	r5,8(fp)
 8010eec:	e1800315 	stw	r6,12(fp)
 8010ef0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 8010ef4:	e0800204 	addi	r2,fp,8
 8010ef8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8010efc:	e0bfff17 	ldw	r2,-4(fp)
 8010f00:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 8010f04:	00006f06 	br	80110c4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8010f08:	e0bff807 	ldb	r2,-32(fp)
 8010f0c:	10800960 	cmpeqi	r2,r2,37
 8010f10:	1000041e 	bne	r2,zero,8010f24 <alt_printf+0x50>
        {
            alt_putchar(c);
 8010f14:	e0bff807 	ldb	r2,-32(fp)
 8010f18:	1009883a 	mov	r4,r2
 8010f1c:	80111000 	call	8011100 <alt_putchar>
 8010f20:	00006806 	br	80110c4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8010f24:	e0bff717 	ldw	r2,-36(fp)
 8010f28:	10c00044 	addi	r3,r2,1
 8010f2c:	e0fff715 	stw	r3,-36(fp)
 8010f30:	10800003 	ldbu	r2,0(r2)
 8010f34:	e0bff805 	stb	r2,-32(fp)
 8010f38:	e0bff807 	ldb	r2,-32(fp)
 8010f3c:	10006926 	beq	r2,zero,80110e4 <alt_printf+0x210>
            {
                if (c == '%')
 8010f40:	e0bff807 	ldb	r2,-32(fp)
 8010f44:	10800958 	cmpnei	r2,r2,37
 8010f48:	1000041e 	bne	r2,zero,8010f5c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8010f4c:	e0bff807 	ldb	r2,-32(fp)
 8010f50:	1009883a 	mov	r4,r2
 8010f54:	80111000 	call	8011100 <alt_putchar>
 8010f58:	00005a06 	br	80110c4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 8010f5c:	e0bff807 	ldb	r2,-32(fp)
 8010f60:	108018d8 	cmpnei	r2,r2,99
 8010f64:	1000081e 	bne	r2,zero,8010f88 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 8010f68:	e0bffe17 	ldw	r2,-8(fp)
 8010f6c:	10c00104 	addi	r3,r2,4
 8010f70:	e0fffe15 	stw	r3,-8(fp)
 8010f74:	10800017 	ldw	r2,0(r2)
 8010f78:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 8010f7c:	e13ffd17 	ldw	r4,-12(fp)
 8010f80:	80111000 	call	8011100 <alt_putchar>
 8010f84:	00004f06 	br	80110c4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 8010f88:	e0bff807 	ldb	r2,-32(fp)
 8010f8c:	10801e18 	cmpnei	r2,r2,120
 8010f90:	1000341e 	bne	r2,zero,8011064 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 8010f94:	e0bffe17 	ldw	r2,-8(fp)
 8010f98:	10c00104 	addi	r3,r2,4
 8010f9c:	e0fffe15 	stw	r3,-8(fp)
 8010fa0:	10800017 	ldw	r2,0(r2)
 8010fa4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 8010fa8:	e0bffb17 	ldw	r2,-20(fp)
 8010fac:	1000031e 	bne	r2,zero,8010fbc <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 8010fb0:	01000c04 	movi	r4,48
 8010fb4:	80111000 	call	8011100 <alt_putchar>
                        continue;
 8010fb8:	00004206 	br	80110c4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 8010fbc:	00800704 	movi	r2,28
 8010fc0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 8010fc4:	00000306 	br	8010fd4 <alt_printf+0x100>
                        digit_shift -= 4;
 8010fc8:	e0bff917 	ldw	r2,-28(fp)
 8010fcc:	10bfff04 	addi	r2,r2,-4
 8010fd0:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8010fd4:	00c003c4 	movi	r3,15
 8010fd8:	e0bff917 	ldw	r2,-28(fp)
 8010fdc:	1884983a 	sll	r2,r3,r2
 8010fe0:	1007883a 	mov	r3,r2
 8010fe4:	e0bffb17 	ldw	r2,-20(fp)
 8010fe8:	1884703a 	and	r2,r3,r2
 8010fec:	103ff626 	beq	r2,zero,8010fc8 <__alt_data_end+0xff010fc8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8010ff0:	00001906 	br	8011058 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8010ff4:	00c003c4 	movi	r3,15
 8010ff8:	e0bff917 	ldw	r2,-28(fp)
 8010ffc:	1884983a 	sll	r2,r3,r2
 8011000:	1007883a 	mov	r3,r2
 8011004:	e0bffb17 	ldw	r2,-20(fp)
 8011008:	1886703a 	and	r3,r3,r2
 801100c:	e0bff917 	ldw	r2,-28(fp)
 8011010:	1884d83a 	srl	r2,r3,r2
 8011014:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 8011018:	e0bffc17 	ldw	r2,-16(fp)
 801101c:	108002a8 	cmpgeui	r2,r2,10
 8011020:	1000041e 	bne	r2,zero,8011034 <alt_printf+0x160>
                            c = '0' + digit;
 8011024:	e0bffc17 	ldw	r2,-16(fp)
 8011028:	10800c04 	addi	r2,r2,48
 801102c:	e0bff805 	stb	r2,-32(fp)
 8011030:	00000306 	br	8011040 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 8011034:	e0bffc17 	ldw	r2,-16(fp)
 8011038:	108015c4 	addi	r2,r2,87
 801103c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 8011040:	e0bff807 	ldb	r2,-32(fp)
 8011044:	1009883a 	mov	r4,r2
 8011048:	80111000 	call	8011100 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 801104c:	e0bff917 	ldw	r2,-28(fp)
 8011050:	10bfff04 	addi	r2,r2,-4
 8011054:	e0bff915 	stw	r2,-28(fp)
 8011058:	e0bff917 	ldw	r2,-28(fp)
 801105c:	103fe50e 	bge	r2,zero,8010ff4 <__alt_data_end+0xff010ff4>
 8011060:	00001806 	br	80110c4 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8011064:	e0bff807 	ldb	r2,-32(fp)
 8011068:	10801cd8 	cmpnei	r2,r2,115
 801106c:	1000151e 	bne	r2,zero,80110c4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 8011070:	e0bffe17 	ldw	r2,-8(fp)
 8011074:	10c00104 	addi	r3,r2,4
 8011078:	e0fffe15 	stw	r3,-8(fp)
 801107c:	10800017 	ldw	r2,0(r2)
 8011080:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 8011084:	00000906 	br	80110ac <alt_printf+0x1d8>
                      alt_putchar(*s++);
 8011088:	e0bffa17 	ldw	r2,-24(fp)
 801108c:	10c00044 	addi	r3,r2,1
 8011090:	e0fffa15 	stw	r3,-24(fp)
 8011094:	10800003 	ldbu	r2,0(r2)
 8011098:	10803fcc 	andi	r2,r2,255
 801109c:	1080201c 	xori	r2,r2,128
 80110a0:	10bfe004 	addi	r2,r2,-128
 80110a4:	1009883a 	mov	r4,r2
 80110a8:	80111000 	call	8011100 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 80110ac:	e0bffa17 	ldw	r2,-24(fp)
 80110b0:	10800003 	ldbu	r2,0(r2)
 80110b4:	10803fcc 	andi	r2,r2,255
 80110b8:	1080201c 	xori	r2,r2,128
 80110bc:	10bfe004 	addi	r2,r2,-128
 80110c0:	103ff11e 	bne	r2,zero,8011088 <__alt_data_end+0xff011088>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 80110c4:	e0bff717 	ldw	r2,-36(fp)
 80110c8:	10c00044 	addi	r3,r2,1
 80110cc:	e0fff715 	stw	r3,-36(fp)
 80110d0:	10800003 	ldbu	r2,0(r2)
 80110d4:	e0bff805 	stb	r2,-32(fp)
 80110d8:	e0bff807 	ldb	r2,-32(fp)
 80110dc:	103f8a1e 	bne	r2,zero,8010f08 <__alt_data_end+0xff010f08>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 80110e0:	00000106 	br	80110e8 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 80110e4:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 80110e8:	0001883a 	nop
 80110ec:	e037883a 	mov	sp,fp
 80110f0:	dfc00117 	ldw	ra,4(sp)
 80110f4:	df000017 	ldw	fp,0(sp)
 80110f8:	dec00504 	addi	sp,sp,20
 80110fc:	f800283a 	ret

08011100 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8011100:	defffd04 	addi	sp,sp,-12
 8011104:	dfc00215 	stw	ra,8(sp)
 8011108:	df000115 	stw	fp,4(sp)
 801110c:	df000104 	addi	fp,sp,4
 8011110:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 8011114:	d0a00117 	ldw	r2,-32764(gp)
 8011118:	10800217 	ldw	r2,8(r2)
 801111c:	100b883a 	mov	r5,r2
 8011120:	e13fff17 	ldw	r4,-4(fp)
 8011124:	80075200 	call	8007520 <putc>
#endif
#endif
}
 8011128:	e037883a 	mov	sp,fp
 801112c:	dfc00117 	ldw	ra,4(sp)
 8011130:	df000017 	ldw	fp,0(sp)
 8011134:	dec00204 	addi	sp,sp,8
 8011138:	f800283a 	ret

0801113c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 801113c:	defffa04 	addi	sp,sp,-24
 8011140:	df000515 	stw	fp,20(sp)
 8011144:	df000504 	addi	fp,sp,20
 8011148:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801114c:	0005303a 	rdctl	r2,status
 8011150:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011154:	e0fffc17 	ldw	r3,-16(fp)
 8011158:	00bfff84 	movi	r2,-2
 801115c:	1884703a 	and	r2,r3,r2
 8011160:	1001703a 	wrctl	status,r2
  
  return context;
 8011164:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8011168:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 801116c:	e0bfff17 	ldw	r2,-4(fp)
 8011170:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8011174:	e0bffd17 	ldw	r2,-12(fp)
 8011178:	10800017 	ldw	r2,0(r2)
 801117c:	e0fffd17 	ldw	r3,-12(fp)
 8011180:	18c00117 	ldw	r3,4(r3)
 8011184:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8011188:	e0bffd17 	ldw	r2,-12(fp)
 801118c:	10800117 	ldw	r2,4(r2)
 8011190:	e0fffd17 	ldw	r3,-12(fp)
 8011194:	18c00017 	ldw	r3,0(r3)
 8011198:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 801119c:	e0bffd17 	ldw	r2,-12(fp)
 80111a0:	e0fffd17 	ldw	r3,-12(fp)
 80111a4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80111a8:	e0bffd17 	ldw	r2,-12(fp)
 80111ac:	e0fffd17 	ldw	r3,-12(fp)
 80111b0:	10c00015 	stw	r3,0(r2)
 80111b4:	e0bffb17 	ldw	r2,-20(fp)
 80111b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80111bc:	e0bffe17 	ldw	r2,-8(fp)
 80111c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80111c4:	0001883a 	nop
 80111c8:	e037883a 	mov	sp,fp
 80111cc:	df000017 	ldw	fp,0(sp)
 80111d0:	dec00104 	addi	sp,sp,4
 80111d4:	f800283a 	ret

080111d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80111d8:	defffb04 	addi	sp,sp,-20
 80111dc:	dfc00415 	stw	ra,16(sp)
 80111e0:	df000315 	stw	fp,12(sp)
 80111e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80111e8:	d0a01017 	ldw	r2,-32704(gp)
 80111ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80111f0:	d0a6ea17 	ldw	r2,-25688(gp)
 80111f4:	10800044 	addi	r2,r2,1
 80111f8:	d0a6ea15 	stw	r2,-25688(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80111fc:	00002e06 	br	80112b8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8011200:	e0bffd17 	ldw	r2,-12(fp)
 8011204:	10800017 	ldw	r2,0(r2)
 8011208:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801120c:	e0bffd17 	ldw	r2,-12(fp)
 8011210:	10800403 	ldbu	r2,16(r2)
 8011214:	10803fcc 	andi	r2,r2,255
 8011218:	10000426 	beq	r2,zero,801122c <alt_tick+0x54>
 801121c:	d0a6ea17 	ldw	r2,-25688(gp)
 8011220:	1000021e 	bne	r2,zero,801122c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8011224:	e0bffd17 	ldw	r2,-12(fp)
 8011228:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801122c:	e0bffd17 	ldw	r2,-12(fp)
 8011230:	10800217 	ldw	r2,8(r2)
 8011234:	d0e6ea17 	ldw	r3,-25688(gp)
 8011238:	18801d36 	bltu	r3,r2,80112b0 <alt_tick+0xd8>
 801123c:	e0bffd17 	ldw	r2,-12(fp)
 8011240:	10800403 	ldbu	r2,16(r2)
 8011244:	10803fcc 	andi	r2,r2,255
 8011248:	1000191e 	bne	r2,zero,80112b0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801124c:	e0bffd17 	ldw	r2,-12(fp)
 8011250:	10800317 	ldw	r2,12(r2)
 8011254:	e0fffd17 	ldw	r3,-12(fp)
 8011258:	18c00517 	ldw	r3,20(r3)
 801125c:	1809883a 	mov	r4,r3
 8011260:	103ee83a 	callr	r2
 8011264:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8011268:	e0bfff17 	ldw	r2,-4(fp)
 801126c:	1000031e 	bne	r2,zero,801127c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8011270:	e13ffd17 	ldw	r4,-12(fp)
 8011274:	801113c0 	call	801113c <alt_alarm_stop>
 8011278:	00000d06 	br	80112b0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801127c:	e0bffd17 	ldw	r2,-12(fp)
 8011280:	10c00217 	ldw	r3,8(r2)
 8011284:	e0bfff17 	ldw	r2,-4(fp)
 8011288:	1887883a 	add	r3,r3,r2
 801128c:	e0bffd17 	ldw	r2,-12(fp)
 8011290:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8011294:	e0bffd17 	ldw	r2,-12(fp)
 8011298:	10c00217 	ldw	r3,8(r2)
 801129c:	d0a6ea17 	ldw	r2,-25688(gp)
 80112a0:	1880032e 	bgeu	r3,r2,80112b0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80112a4:	e0bffd17 	ldw	r2,-12(fp)
 80112a8:	00c00044 	movi	r3,1
 80112ac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80112b0:	e0bffe17 	ldw	r2,-8(fp)
 80112b4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80112b8:	e0fffd17 	ldw	r3,-12(fp)
 80112bc:	d0a01004 	addi	r2,gp,-32704
 80112c0:	18bfcf1e 	bne	r3,r2,8011200 <__alt_data_end+0xff011200>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80112c4:	0001883a 	nop
}
 80112c8:	0001883a 	nop
 80112cc:	e037883a 	mov	sp,fp
 80112d0:	dfc00117 	ldw	ra,4(sp)
 80112d4:	df000017 	ldw	fp,0(sp)
 80112d8:	dec00204 	addi	sp,sp,8
 80112dc:	f800283a 	ret

080112e0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80112e0:	deffff04 	addi	sp,sp,-4
 80112e4:	df000015 	stw	fp,0(sp)
 80112e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80112ec:	000170fa 	wrctl	ienable,zero
}
 80112f0:	0001883a 	nop
 80112f4:	e037883a 	mov	sp,fp
 80112f8:	df000017 	ldw	fp,0(sp)
 80112fc:	dec00104 	addi	sp,sp,4
 8011300:	f800283a 	ret

08011304 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8011304:	defffb04 	addi	sp,sp,-20
 8011308:	dfc00415 	stw	ra,16(sp)
 801130c:	df000315 	stw	fp,12(sp)
 8011310:	df000304 	addi	fp,sp,12
 8011314:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8011318:	d0a00617 	ldw	r2,-32744(gp)
 801131c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011320:	00003106 	br	80113e8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8011324:	e0bffd17 	ldw	r2,-12(fp)
 8011328:	10800217 	ldw	r2,8(r2)
 801132c:	1009883a 	mov	r4,r2
 8011330:	800072c0 	call	800072c <strlen>
 8011334:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8011338:	e0bffd17 	ldw	r2,-12(fp)
 801133c:	10c00217 	ldw	r3,8(r2)
 8011340:	e0bffe17 	ldw	r2,-8(fp)
 8011344:	10bfffc4 	addi	r2,r2,-1
 8011348:	1885883a 	add	r2,r3,r2
 801134c:	10800003 	ldbu	r2,0(r2)
 8011350:	10803fcc 	andi	r2,r2,255
 8011354:	1080201c 	xori	r2,r2,128
 8011358:	10bfe004 	addi	r2,r2,-128
 801135c:	10800bd8 	cmpnei	r2,r2,47
 8011360:	1000031e 	bne	r2,zero,8011370 <alt_find_file+0x6c>
    {
      len -= 1;
 8011364:	e0bffe17 	ldw	r2,-8(fp)
 8011368:	10bfffc4 	addi	r2,r2,-1
 801136c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011370:	e0bffe17 	ldw	r2,-8(fp)
 8011374:	e0ffff17 	ldw	r3,-4(fp)
 8011378:	1885883a 	add	r2,r3,r2
 801137c:	10800003 	ldbu	r2,0(r2)
 8011380:	10803fcc 	andi	r2,r2,255
 8011384:	1080201c 	xori	r2,r2,128
 8011388:	10bfe004 	addi	r2,r2,-128
 801138c:	10800be0 	cmpeqi	r2,r2,47
 8011390:	1000081e 	bne	r2,zero,80113b4 <alt_find_file+0xb0>
 8011394:	e0bffe17 	ldw	r2,-8(fp)
 8011398:	e0ffff17 	ldw	r3,-4(fp)
 801139c:	1885883a 	add	r2,r3,r2
 80113a0:	10800003 	ldbu	r2,0(r2)
 80113a4:	10803fcc 	andi	r2,r2,255
 80113a8:	1080201c 	xori	r2,r2,128
 80113ac:	10bfe004 	addi	r2,r2,-128
 80113b0:	10000a1e 	bne	r2,zero,80113dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80113b4:	e0bffd17 	ldw	r2,-12(fp)
 80113b8:	10800217 	ldw	r2,8(r2)
 80113bc:	e0fffe17 	ldw	r3,-8(fp)
 80113c0:	180d883a 	mov	r6,r3
 80113c4:	e17fff17 	ldw	r5,-4(fp)
 80113c8:	1009883a 	mov	r4,r2
 80113cc:	80116280 	call	8011628 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80113d0:	1000021e 	bne	r2,zero,80113dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80113d4:	e0bffd17 	ldw	r2,-12(fp)
 80113d8:	00000706 	br	80113f8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 80113dc:	e0bffd17 	ldw	r2,-12(fp)
 80113e0:	10800017 	ldw	r2,0(r2)
 80113e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80113e8:	e0fffd17 	ldw	r3,-12(fp)
 80113ec:	d0a00604 	addi	r2,gp,-32744
 80113f0:	18bfcc1e 	bne	r3,r2,8011324 <__alt_data_end+0xff011324>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80113f4:	0005883a 	mov	r2,zero
}
 80113f8:	e037883a 	mov	sp,fp
 80113fc:	dfc00117 	ldw	ra,4(sp)
 8011400:	df000017 	ldw	fp,0(sp)
 8011404:	dec00204 	addi	sp,sp,8
 8011408:	f800283a 	ret

0801140c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801140c:	defffc04 	addi	sp,sp,-16
 8011410:	df000315 	stw	fp,12(sp)
 8011414:	df000304 	addi	fp,sp,12
 8011418:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 801141c:	00bffa04 	movi	r2,-24
 8011420:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8011424:	e03ffd15 	stw	zero,-12(fp)
 8011428:	00001906 	br	8011490 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 801142c:	00820074 	movhi	r2,2049
 8011430:	10898304 	addi	r2,r2,9740
 8011434:	e0fffd17 	ldw	r3,-12(fp)
 8011438:	18c00324 	muli	r3,r3,12
 801143c:	10c5883a 	add	r2,r2,r3
 8011440:	10800017 	ldw	r2,0(r2)
 8011444:	10000f1e 	bne	r2,zero,8011484 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 8011448:	00820074 	movhi	r2,2049
 801144c:	10898304 	addi	r2,r2,9740
 8011450:	e0fffd17 	ldw	r3,-12(fp)
 8011454:	18c00324 	muli	r3,r3,12
 8011458:	10c5883a 	add	r2,r2,r3
 801145c:	e0ffff17 	ldw	r3,-4(fp)
 8011460:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8011464:	d0e00a17 	ldw	r3,-32728(gp)
 8011468:	e0bffd17 	ldw	r2,-12(fp)
 801146c:	1880020e 	bge	r3,r2,8011478 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8011470:	e0bffd17 	ldw	r2,-12(fp)
 8011474:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 8011478:	e0bffd17 	ldw	r2,-12(fp)
 801147c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8011480:	00000606 	br	801149c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8011484:	e0bffd17 	ldw	r2,-12(fp)
 8011488:	10800044 	addi	r2,r2,1
 801148c:	e0bffd15 	stw	r2,-12(fp)
 8011490:	e0bffd17 	ldw	r2,-12(fp)
 8011494:	10800810 	cmplti	r2,r2,32
 8011498:	103fe41e 	bne	r2,zero,801142c <__alt_data_end+0xff01142c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 801149c:	e0bffe17 	ldw	r2,-8(fp)
}
 80114a0:	e037883a 	mov	sp,fp
 80114a4:	df000017 	ldw	fp,0(sp)
 80114a8:	dec00104 	addi	sp,sp,4
 80114ac:	f800283a 	ret

080114b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 80114b0:	defffb04 	addi	sp,sp,-20
 80114b4:	df000415 	stw	fp,16(sp)
 80114b8:	df000404 	addi	fp,sp,16
 80114bc:	e13ffe15 	stw	r4,-8(fp)
 80114c0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 80114c4:	e0bfff17 	ldw	r2,-4(fp)
 80114c8:	10840070 	cmpltui	r2,r2,4097
 80114cc:	1000021e 	bne	r2,zero,80114d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 80114d0:	00840004 	movi	r2,4096
 80114d4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 80114d8:	e0fffe17 	ldw	r3,-8(fp)
 80114dc:	e0bfff17 	ldw	r2,-4(fp)
 80114e0:	1885883a 	add	r2,r3,r2
 80114e4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80114e8:	e0bffe17 	ldw	r2,-8(fp)
 80114ec:	e0bffc15 	stw	r2,-16(fp)
 80114f0:	00000506 	br	8011508 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 80114f4:	e0bffc17 	ldw	r2,-16(fp)
 80114f8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80114fc:	e0bffc17 	ldw	r2,-16(fp)
 8011500:	10800804 	addi	r2,r2,32
 8011504:	e0bffc15 	stw	r2,-16(fp)
 8011508:	e0fffc17 	ldw	r3,-16(fp)
 801150c:	e0bffd17 	ldw	r2,-12(fp)
 8011510:	18bff836 	bltu	r3,r2,80114f4 <__alt_data_end+0xff0114f4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8011514:	e0bffe17 	ldw	r2,-8(fp)
 8011518:	108007cc 	andi	r2,r2,31
 801151c:	10000226 	beq	r2,zero,8011528 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8011520:	e0bffc17 	ldw	r2,-16(fp)
 8011524:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8011528:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 801152c:	0001883a 	nop
 8011530:	e037883a 	mov	sp,fp
 8011534:	df000017 	ldw	fp,0(sp)
 8011538:	dec00104 	addi	sp,sp,4
 801153c:	f800283a 	ret

08011540 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8011540:	defffe04 	addi	sp,sp,-8
 8011544:	df000115 	stw	fp,4(sp)
 8011548:	df000104 	addi	fp,sp,4
 801154c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8011550:	e0bfff17 	ldw	r2,-4(fp)
 8011554:	10bffe84 	addi	r2,r2,-6
 8011558:	10c00428 	cmpgeui	r3,r2,16
 801155c:	18001a1e 	bne	r3,zero,80115c8 <alt_exception_cause_generated_bad_addr+0x88>
 8011560:	100690ba 	slli	r3,r2,2
 8011564:	00820074 	movhi	r2,2049
 8011568:	10855e04 	addi	r2,r2,5496
 801156c:	1885883a 	add	r2,r3,r2
 8011570:	10800017 	ldw	r2,0(r2)
 8011574:	1000683a 	jmp	r2
 8011578:	080115b8 	rdprs	zero,at,1110
 801157c:	080115b8 	rdprs	zero,at,1110
 8011580:	080115c8 	cmpgei	zero,at,1111
 8011584:	080115c8 	cmpgei	zero,at,1111
 8011588:	080115c8 	cmpgei	zero,at,1111
 801158c:	080115b8 	rdprs	zero,at,1110
 8011590:	080115c0 	call	80115c <__alt_mem_onchip_memory2_0+0x80115c>
 8011594:	080115c8 	cmpgei	zero,at,1111
 8011598:	080115b8 	rdprs	zero,at,1110
 801159c:	080115b8 	rdprs	zero,at,1110
 80115a0:	080115c8 	cmpgei	zero,at,1111
 80115a4:	080115b8 	rdprs	zero,at,1110
 80115a8:	080115c0 	call	80115c <__alt_mem_onchip_memory2_0+0x80115c>
 80115ac:	080115c8 	cmpgei	zero,at,1111
 80115b0:	080115c8 	cmpgei	zero,at,1111
 80115b4:	080115b8 	rdprs	zero,at,1110
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80115b8:	00800044 	movi	r2,1
 80115bc:	00000306 	br	80115cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80115c0:	0005883a 	mov	r2,zero
 80115c4:	00000106 	br	80115cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80115c8:	0005883a 	mov	r2,zero
  }
}
 80115cc:	e037883a 	mov	sp,fp
 80115d0:	df000017 	ldw	fp,0(sp)
 80115d4:	dec00104 	addi	sp,sp,4
 80115d8:	f800283a 	ret

080115dc <atexit>:
 80115dc:	200b883a 	mov	r5,r4
 80115e0:	000f883a 	mov	r7,zero
 80115e4:	000d883a 	mov	r6,zero
 80115e8:	0009883a 	mov	r4,zero
 80115ec:	80116a41 	jmpi	80116a4 <__register_exitproc>

080115f0 <exit>:
 80115f0:	defffe04 	addi	sp,sp,-8
 80115f4:	000b883a 	mov	r5,zero
 80115f8:	dc000015 	stw	r16,0(sp)
 80115fc:	dfc00115 	stw	ra,4(sp)
 8011600:	2021883a 	mov	r16,r4
 8011604:	80117bc0 	call	80117bc <__call_exitprocs>
 8011608:	00820074 	movhi	r2,2049
 801160c:	108e0904 	addi	r2,r2,14372
 8011610:	11000017 	ldw	r4,0(r2)
 8011614:	20800f17 	ldw	r2,60(r4)
 8011618:	10000126 	beq	r2,zero,8011620 <exit+0x30>
 801161c:	103ee83a 	callr	r2
 8011620:	8009883a 	mov	r4,r16
 8011624:	801193c0 	call	801193c <_exit>

08011628 <memcmp>:
 8011628:	01c000c4 	movi	r7,3
 801162c:	3980192e 	bgeu	r7,r6,8011694 <memcmp+0x6c>
 8011630:	2144b03a 	or	r2,r4,r5
 8011634:	11c4703a 	and	r2,r2,r7
 8011638:	10000f26 	beq	r2,zero,8011678 <memcmp+0x50>
 801163c:	20800003 	ldbu	r2,0(r4)
 8011640:	28c00003 	ldbu	r3,0(r5)
 8011644:	10c0151e 	bne	r2,r3,801169c <memcmp+0x74>
 8011648:	31bfff84 	addi	r6,r6,-2
 801164c:	01ffffc4 	movi	r7,-1
 8011650:	00000406 	br	8011664 <memcmp+0x3c>
 8011654:	20800003 	ldbu	r2,0(r4)
 8011658:	28c00003 	ldbu	r3,0(r5)
 801165c:	31bfffc4 	addi	r6,r6,-1
 8011660:	10c00e1e 	bne	r2,r3,801169c <memcmp+0x74>
 8011664:	21000044 	addi	r4,r4,1
 8011668:	29400044 	addi	r5,r5,1
 801166c:	31fff91e 	bne	r6,r7,8011654 <__alt_data_end+0xff011654>
 8011670:	0005883a 	mov	r2,zero
 8011674:	f800283a 	ret
 8011678:	20c00017 	ldw	r3,0(r4)
 801167c:	28800017 	ldw	r2,0(r5)
 8011680:	18bfee1e 	bne	r3,r2,801163c <__alt_data_end+0xff01163c>
 8011684:	31bfff04 	addi	r6,r6,-4
 8011688:	21000104 	addi	r4,r4,4
 801168c:	29400104 	addi	r5,r5,4
 8011690:	39bff936 	bltu	r7,r6,8011678 <__alt_data_end+0xff011678>
 8011694:	303fe91e 	bne	r6,zero,801163c <__alt_data_end+0xff01163c>
 8011698:	003ff506 	br	8011670 <__alt_data_end+0xff011670>
 801169c:	10c5c83a 	sub	r2,r2,r3
 80116a0:	f800283a 	ret

080116a4 <__register_exitproc>:
 80116a4:	defffa04 	addi	sp,sp,-24
 80116a8:	dc000315 	stw	r16,12(sp)
 80116ac:	04020074 	movhi	r16,2049
 80116b0:	840e0904 	addi	r16,r16,14372
 80116b4:	80c00017 	ldw	r3,0(r16)
 80116b8:	dc400415 	stw	r17,16(sp)
 80116bc:	dfc00515 	stw	ra,20(sp)
 80116c0:	18805217 	ldw	r2,328(r3)
 80116c4:	2023883a 	mov	r17,r4
 80116c8:	10003726 	beq	r2,zero,80117a8 <__register_exitproc+0x104>
 80116cc:	10c00117 	ldw	r3,4(r2)
 80116d0:	010007c4 	movi	r4,31
 80116d4:	20c00e16 	blt	r4,r3,8011710 <__register_exitproc+0x6c>
 80116d8:	1a000044 	addi	r8,r3,1
 80116dc:	8800221e 	bne	r17,zero,8011768 <__register_exitproc+0xc4>
 80116e0:	18c00084 	addi	r3,r3,2
 80116e4:	18c7883a 	add	r3,r3,r3
 80116e8:	18c7883a 	add	r3,r3,r3
 80116ec:	12000115 	stw	r8,4(r2)
 80116f0:	10c7883a 	add	r3,r2,r3
 80116f4:	19400015 	stw	r5,0(r3)
 80116f8:	0005883a 	mov	r2,zero
 80116fc:	dfc00517 	ldw	ra,20(sp)
 8011700:	dc400417 	ldw	r17,16(sp)
 8011704:	dc000317 	ldw	r16,12(sp)
 8011708:	dec00604 	addi	sp,sp,24
 801170c:	f800283a 	ret
 8011710:	00800034 	movhi	r2,0
 8011714:	10800004 	addi	r2,r2,0
 8011718:	10002626 	beq	r2,zero,80117b4 <__register_exitproc+0x110>
 801171c:	01006404 	movi	r4,400
 8011720:	d9400015 	stw	r5,0(sp)
 8011724:	d9800115 	stw	r6,4(sp)
 8011728:	d9c00215 	stw	r7,8(sp)
 801172c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011730:	d9400017 	ldw	r5,0(sp)
 8011734:	d9800117 	ldw	r6,4(sp)
 8011738:	d9c00217 	ldw	r7,8(sp)
 801173c:	10001d26 	beq	r2,zero,80117b4 <__register_exitproc+0x110>
 8011740:	81000017 	ldw	r4,0(r16)
 8011744:	10000115 	stw	zero,4(r2)
 8011748:	02000044 	movi	r8,1
 801174c:	22405217 	ldw	r9,328(r4)
 8011750:	0007883a 	mov	r3,zero
 8011754:	12400015 	stw	r9,0(r2)
 8011758:	20805215 	stw	r2,328(r4)
 801175c:	10006215 	stw	zero,392(r2)
 8011760:	10006315 	stw	zero,396(r2)
 8011764:	883fde26 	beq	r17,zero,80116e0 <__alt_data_end+0xff0116e0>
 8011768:	18c9883a 	add	r4,r3,r3
 801176c:	2109883a 	add	r4,r4,r4
 8011770:	1109883a 	add	r4,r2,r4
 8011774:	21802215 	stw	r6,136(r4)
 8011778:	01800044 	movi	r6,1
 801177c:	12406217 	ldw	r9,392(r2)
 8011780:	30cc983a 	sll	r6,r6,r3
 8011784:	4992b03a 	or	r9,r9,r6
 8011788:	12406215 	stw	r9,392(r2)
 801178c:	21c04215 	stw	r7,264(r4)
 8011790:	01000084 	movi	r4,2
 8011794:	893fd21e 	bne	r17,r4,80116e0 <__alt_data_end+0xff0116e0>
 8011798:	11006317 	ldw	r4,396(r2)
 801179c:	218cb03a 	or	r6,r4,r6
 80117a0:	11806315 	stw	r6,396(r2)
 80117a4:	003fce06 	br	80116e0 <__alt_data_end+0xff0116e0>
 80117a8:	18805304 	addi	r2,r3,332
 80117ac:	18805215 	stw	r2,328(r3)
 80117b0:	003fc606 	br	80116cc <__alt_data_end+0xff0116cc>
 80117b4:	00bfffc4 	movi	r2,-1
 80117b8:	003fd006 	br	80116fc <__alt_data_end+0xff0116fc>

080117bc <__call_exitprocs>:
 80117bc:	defff504 	addi	sp,sp,-44
 80117c0:	df000915 	stw	fp,36(sp)
 80117c4:	dd400615 	stw	r21,24(sp)
 80117c8:	dc800315 	stw	r18,12(sp)
 80117cc:	dfc00a15 	stw	ra,40(sp)
 80117d0:	ddc00815 	stw	r23,32(sp)
 80117d4:	dd800715 	stw	r22,28(sp)
 80117d8:	dd000515 	stw	r20,20(sp)
 80117dc:	dcc00415 	stw	r19,16(sp)
 80117e0:	dc400215 	stw	r17,8(sp)
 80117e4:	dc000115 	stw	r16,4(sp)
 80117e8:	d9000015 	stw	r4,0(sp)
 80117ec:	2839883a 	mov	fp,r5
 80117f0:	04800044 	movi	r18,1
 80117f4:	057fffc4 	movi	r21,-1
 80117f8:	00820074 	movhi	r2,2049
 80117fc:	108e0904 	addi	r2,r2,14372
 8011800:	12000017 	ldw	r8,0(r2)
 8011804:	45005217 	ldw	r20,328(r8)
 8011808:	44c05204 	addi	r19,r8,328
 801180c:	a0001c26 	beq	r20,zero,8011880 <__call_exitprocs+0xc4>
 8011810:	a0800117 	ldw	r2,4(r20)
 8011814:	15ffffc4 	addi	r23,r2,-1
 8011818:	b8000d16 	blt	r23,zero,8011850 <__call_exitprocs+0x94>
 801181c:	14000044 	addi	r16,r2,1
 8011820:	8421883a 	add	r16,r16,r16
 8011824:	8421883a 	add	r16,r16,r16
 8011828:	84402004 	addi	r17,r16,128
 801182c:	a463883a 	add	r17,r20,r17
 8011830:	a421883a 	add	r16,r20,r16
 8011834:	e0001e26 	beq	fp,zero,80118b0 <__call_exitprocs+0xf4>
 8011838:	80804017 	ldw	r2,256(r16)
 801183c:	e0801c26 	beq	fp,r2,80118b0 <__call_exitprocs+0xf4>
 8011840:	bdffffc4 	addi	r23,r23,-1
 8011844:	843fff04 	addi	r16,r16,-4
 8011848:	8c7fff04 	addi	r17,r17,-4
 801184c:	bd7ff91e 	bne	r23,r21,8011834 <__alt_data_end+0xff011834>
 8011850:	00800034 	movhi	r2,0
 8011854:	10800004 	addi	r2,r2,0
 8011858:	10000926 	beq	r2,zero,8011880 <__call_exitprocs+0xc4>
 801185c:	a0800117 	ldw	r2,4(r20)
 8011860:	1000301e 	bne	r2,zero,8011924 <__call_exitprocs+0x168>
 8011864:	a0800017 	ldw	r2,0(r20)
 8011868:	10003226 	beq	r2,zero,8011934 <__call_exitprocs+0x178>
 801186c:	a009883a 	mov	r4,r20
 8011870:	98800015 	stw	r2,0(r19)
 8011874:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011878:	9d000017 	ldw	r20,0(r19)
 801187c:	a03fe41e 	bne	r20,zero,8011810 <__alt_data_end+0xff011810>
 8011880:	dfc00a17 	ldw	ra,40(sp)
 8011884:	df000917 	ldw	fp,36(sp)
 8011888:	ddc00817 	ldw	r23,32(sp)
 801188c:	dd800717 	ldw	r22,28(sp)
 8011890:	dd400617 	ldw	r21,24(sp)
 8011894:	dd000517 	ldw	r20,20(sp)
 8011898:	dcc00417 	ldw	r19,16(sp)
 801189c:	dc800317 	ldw	r18,12(sp)
 80118a0:	dc400217 	ldw	r17,8(sp)
 80118a4:	dc000117 	ldw	r16,4(sp)
 80118a8:	dec00b04 	addi	sp,sp,44
 80118ac:	f800283a 	ret
 80118b0:	a0800117 	ldw	r2,4(r20)
 80118b4:	80c00017 	ldw	r3,0(r16)
 80118b8:	10bfffc4 	addi	r2,r2,-1
 80118bc:	15c01426 	beq	r2,r23,8011910 <__call_exitprocs+0x154>
 80118c0:	80000015 	stw	zero,0(r16)
 80118c4:	183fde26 	beq	r3,zero,8011840 <__alt_data_end+0xff011840>
 80118c8:	95c8983a 	sll	r4,r18,r23
 80118cc:	a0806217 	ldw	r2,392(r20)
 80118d0:	a5800117 	ldw	r22,4(r20)
 80118d4:	2084703a 	and	r2,r4,r2
 80118d8:	10000b26 	beq	r2,zero,8011908 <__call_exitprocs+0x14c>
 80118dc:	a0806317 	ldw	r2,396(r20)
 80118e0:	2088703a 	and	r4,r4,r2
 80118e4:	20000c1e 	bne	r4,zero,8011918 <__call_exitprocs+0x15c>
 80118e8:	89400017 	ldw	r5,0(r17)
 80118ec:	d9000017 	ldw	r4,0(sp)
 80118f0:	183ee83a 	callr	r3
 80118f4:	a0800117 	ldw	r2,4(r20)
 80118f8:	15bfbf1e 	bne	r2,r22,80117f8 <__alt_data_end+0xff0117f8>
 80118fc:	98800017 	ldw	r2,0(r19)
 8011900:	153fcf26 	beq	r2,r20,8011840 <__alt_data_end+0xff011840>
 8011904:	003fbc06 	br	80117f8 <__alt_data_end+0xff0117f8>
 8011908:	183ee83a 	callr	r3
 801190c:	003ff906 	br	80118f4 <__alt_data_end+0xff0118f4>
 8011910:	a5c00115 	stw	r23,4(r20)
 8011914:	003feb06 	br	80118c4 <__alt_data_end+0xff0118c4>
 8011918:	89000017 	ldw	r4,0(r17)
 801191c:	183ee83a 	callr	r3
 8011920:	003ff406 	br	80118f4 <__alt_data_end+0xff0118f4>
 8011924:	a0800017 	ldw	r2,0(r20)
 8011928:	a027883a 	mov	r19,r20
 801192c:	1029883a 	mov	r20,r2
 8011930:	003fb606 	br	801180c <__alt_data_end+0xff01180c>
 8011934:	0005883a 	mov	r2,zero
 8011938:	003ffb06 	br	8011928 <__alt_data_end+0xff011928>

0801193c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 801193c:	defffd04 	addi	sp,sp,-12
 8011940:	df000215 	stw	fp,8(sp)
 8011944:	df000204 	addi	fp,sp,8
 8011948:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 801194c:	0001883a 	nop
 8011950:	e0bfff17 	ldw	r2,-4(fp)
 8011954:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8011958:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801195c:	10000226 	beq	r2,zero,8011968 <_exit+0x2c>
    ALT_SIM_FAIL();
 8011960:	002af070 	cmpltui	zero,zero,43969
 8011964:	00000106 	br	801196c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8011968:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 801196c:	003fff06 	br	801196c <__alt_data_end+0xff01196c>
