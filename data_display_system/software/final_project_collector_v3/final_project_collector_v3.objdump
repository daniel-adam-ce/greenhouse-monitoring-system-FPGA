
final_project_collector_v3.elf:     file format elf32-littlenios2
final_project_collector_v3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011a9c memsz 0x00011a9c flags r-x
    LOAD off    0x00012abc vaddr 0x08011abc paddr 0x080135e8 align 2**12
         filesz 0x00001b2c memsz 0x00001b2c flags rw-
    LOAD off    0x00015114 vaddr 0x08015114 paddr 0x08015114 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000114ac  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003cc  080116f0  080116f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b2c  08011abc  080135e8  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  08015114  08015114  00015114  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000145e8  2**0
                  CONTENTS
  7 .new_sdram_controller_0 00000000  08015274  08015274  000145e8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000145e8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f60  00000000  00000000  00014610  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025b34  00000000  00000000  00015570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009871  00000000  00000000  0003b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bec0  00000000  00000000  00044915  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000027b8  00000000  00000000  000507d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000042dc  00000000  00000000  00052f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017a8c  00000000  00000000  0005726c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0006ecf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001908  00000000  00000000  0006ed58  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007407e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00074081  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007408d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007408e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007408f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00074093  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00074097  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007409b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000740a6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000740b1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000740bc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000024  00000000  00000000  000740c7  2**0
                  CONTENTS, READONLY
 30 .jdi          00004c25  00000000  00000000  000740eb  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007d5b9  00000000  00000000  00078d10  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
080116f0 l    d  .rodata	00000000 .rodata
08011abc l    d  .rwdata	00000000 .rwdata
08015114 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08015274 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_collector_v3_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080117d6 l     O .rodata	00000010 zeroes.4404
080028d8 l     F .text	000000bc __sbprintf
080117e6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08002ae8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004618 l     F .text	00000008 __fp_unlock
0800462c l     F .text	0000019c __sinit.part.1
080047c8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08011abc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08011f00 l     O .rwdata	00000020 lc_ctype_charset
08011ee0 l     O .rwdata	00000020 lc_message_charset
08011f20 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08011818 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08007bc4 l     F .text	000000fc __sprint_r.part.0
0801194c l     O .rodata	00000010 blanks.4348
0801193c l     O .rodata	00000010 zeroes.4349
08009150 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800ce0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800cf18 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800cf44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800d030 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800d110 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d1fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800d3d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080135d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800d61c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800d750 l     F .text	00000034 alt_dev_reg
08012508 l     O .rwdata	00000038 i2c_0
08012540 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0800d82c l     F .text	00000110 optional_irq_callback
0800d98c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800f650 l     F .text	0000020c altera_avalon_jtag_uart_irq
0800f85c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800fe94 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08010254 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08010758 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08010898 l     F .text	0000003c alt_get_errno
080108d4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08015148 g     O .bss	00000004 alt_instruction_exception_handler
08007208 g     F .text	00000074 _mprec_log10
080072f4 g     F .text	0000008c __any_on
080096ec g     F .text	00000054 _isatty_r
08011824 g     O .rodata	00000028 __mprec_tinytens
0800d30c g     F .text	0000007c alt_main
08000558 g     F .text	000000c0 _puts_r
08015174 g     O .bss	00000100 alt_irq
08009740 g     F .text	00000060 _lseek_r
080135e8 g       *ABS*	00000000 __flash_rwdata_start
0800b938 g     F .text	00000088 .hidden __eqdf2
08015274 g       *ABS*	00000000 __alt_heap_start
0800051c g     F .text	0000003c printf
08009958 g     F .text	0000009c _wcrtomb_r
08007a84 g     F .text	0000005c __sseek
08004968 g     F .text	00000010 __sinit
08009800 g     F .text	00000140 __swbuf_r
08005430 g     F .text	0000007c _setlocale_r
080047d0 g     F .text	00000068 __sfmoreglue
0800e084 g     F .text	000000a8 alt_avalon_i2c_rx_read
0800d3ac g     F .text	00000024 __malloc_unlock
0800f284 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0800de08 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
08006100 g     F .text	0000015c memmove
08004950 g     F .text	00000018 _cleanup
080003b4 g     F .text	000000c0 readTransReg
0800eae0 g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
08006384 g     F .text	000000a8 _Balloc
0800b9c0 g     F .text	000000dc .hidden __gtdf2
08010ef8 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08009690 g     F .text	0000005c _fstat_r
0801512c g     O .bss	00000004 errno
08007a00 g     F .text	00000008 __seofread
08015134 g     O .bss	00000004 alt_argv
0801b5a0 g       *ABS*	00000000 _gp
0800f2c8 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0800df98 g     F .text	00000044 alt_avalon_i2c_is_busy
08012388 g     O .rwdata	00000180 alt_fd_list
0800dd3c g     F .text	000000cc alt_avalon_i2c_master_config_set
080103f4 g     F .text	00000090 alt_find_dev
08005fb8 g     F .text	00000148 memcpy
08004620 g     F .text	0000000c _cleanup_r
0800cc24 g     F .text	000000dc .hidden __floatsidf
0801081c g     F .text	0000007c alt_io_redirect
0800ba9c g     F .text	000000f4 .hidden __ltdf2
080116f0 g       *ABS*	00000000 __DTOR_END__
0800e924 g     F .text	000001bc alt_avalon_i2c_master_transmit
08000618 g     F .text	00000014 puts
08011158 g     F .text	0000009c alt_exception_cause_generated_bad_addr
080078e4 g     F .text	00000074 __fpclassifyd
08007164 g     F .text	000000a4 __ratio
08009134 g     F .text	0000001c __vfiprintf_internal
0800fa54 g     F .text	0000021c altera_avalon_jtag_uart_read
080004ec g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800a6e8 g     F .text	00000064 .hidden __udivsi3
0800d06c g     F .text	000000a4 isatty
08011874 g     O .rodata	000000c8 __mprec_tens
080054ac g     F .text	0000000c __locale_charset
080110c8 g     F .text	00000090 alt_icache_flush
0800dba8 g     F .text	00000098 alt_avalon_i2c_enable
08015128 g     O .bss	00000004 __malloc_top_pad
0800f1b8 g     F .text	00000068 alt_avalon_i2c_int_disable
080135a8 g     O .rwdata	00000004 __mb_cur_max
080054dc g     F .text	0000000c _localeconv_r
08006790 g     F .text	0000003c __i2b
08004dec g     F .text	000004bc __sfvwrite_r
08007958 g     F .text	00000054 _sbrk_r
080097a0 g     F .text	00000060 _read_r
080135c8 g     O .rwdata	00000004 alt_max_fd
08009384 g     F .text	000000f0 _fclose_r
080045e8 g     F .text	00000030 fflush
08015124 g     O .bss	00000004 __malloc_max_sbrked_mem
0800ece8 g     F .text	0000020c alt_avalon_i2c_master_receive
0800a7a4 g     F .text	000008ac .hidden __adddf3
08000290 g     F .text	00000124 printSPIStatus
08006f0c g     F .text	0000010c __b2d
0800a0b8 g     F .text	00000538 .hidden __umoddi3
0800d238 g     F .text	000000d4 lseek
0800f220 g     F .text	00000064 alt_avalon_i2c_int_enable
080135a0 g     O .rwdata	00000004 _global_impure_ptr
08007380 g     F .text	00000564 _realloc_r
08015274 g       *ABS*	00000000 __bss_end
08010668 g     F .text	000000f0 alt_iic_isr_register
08010df0 g     F .text	00000108 alt_tick
08009b40 g     F .text	00000578 .hidden __udivdi3
0800f0e0 g     F .text	00000058 alt_avalon_i2c_int_status_get
080095ec g     F .text	00000024 _fputwc_r
0801184c g     O .rodata	00000028 __mprec_bigtens
08006574 g     F .text	00000104 __s2b
0800cd00 g     F .text	000000a8 .hidden __floatunsidf
08006c4c g     F .text	00000060 __mcmp
08004988 g     F .text	00000018 __fp_lock_all
0801061c g     F .text	0000004c alt_ic_irq_enabled
08010d54 g     F .text	0000009c alt_alarm_stop
0800da28 g     F .text	00000054 alt_avalon_i2c_register_callback
0801513c g     O .bss	00000004 alt_irq_active
0800da7c g     F .text	000000ec alt_avalon_i2c_init
080000fc g     F .exceptions	000000d4 alt_irq_handler
08012360 g     O .rwdata	00000028 alt_dev_null
0801020c g     F .text	00000048 alt_dcache_flush_all
08006678 g     F .text	00000068 __hi0bits
0800cba4 g     F .text	00000080 .hidden __fixdfsi
080135e8 g       *ABS*	00000000 __ram_rwdata_end
080135c0 g     O .rwdata	00000008 alt_dev_list
0800d658 g     F .text	000000f8 write
080112bc g     F .text	000000a0 _putc_r
0800e3b8 g     F .text	0000004c alt_avalon_i2c_check_arblost
0800f17c g     F .text	0000003c alt_avalon_i2c_int_clear
08011abc g       *ABS*	00000000 __ram_rodata_end
0800cf80 g     F .text	000000b0 fstat
0800ba9c g     F .text	000000f4 .hidden __ledf2
080135d4 g     O .rwdata	00000008 alt_avalon_i2c_list
080069c4 g     F .text	00000140 __pow5mult
08007cd8 g     F .text	0000145c ___vfiprintf_internal_r
0801511c g     O .bss	00000004 __nlocale_changed
0800a74c g     F .text	00000058 .hidden __umodsi3
08015274 g       *ABS*	00000000 end
0800f590 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0800db68 g     F .text	00000040 alt_avalon_i2c_open
080116f0 g       *ABS*	00000000 __CTOR_LIST__
09000000 g       *ABS*	00000000 __alt_stack_pointer
0800e538 g     F .text	000000e8 alt_avalon_i2c_master_tx
0800ff0c g     F .text	0000007c alt_avalon_timer_sc_init
0800cda8 g     F .text	00000064 .hidden __clzsi2
0800fc70 g     F .text	00000224 altera_avalon_jtag_uart_write
08004978 g     F .text	00000004 __sfp_lock_acquire
08005ed4 g     F .text	000000e4 memchr
080006c4 g     F .text	000021f8 ___vfprintf_internal_r
08004adc g     F .text	00000310 _free_r
08010aec g     F .text	0000022c alt_printf
080054b8 g     F .text	00000010 __locale_mb_cur_max
0801153c g     F .text	00000180 __call_exitprocs
08015118 g     O .bss	00000004 __mlocale_changed
0800d93c g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
080135ac g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
08015140 g     O .bss	00000004 _alt_tick_rate
0800eef4 g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
0800f314 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
08006b04 g     F .text	00000148 __lshift
08015144 g     O .bss	00000004 _alt_nticks
0800d40c g     F .text	000000fc read
0800d7bc g     F .text	00000070 alt_sys_init
08011424 g     F .text	00000118 __register_exitproc
0800e75c g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
080067cc g     F .text	000001f8 __multiply
0800f8fc g     F .text	00000068 altera_avalon_jtag_uart_close
08011abc g       *ABS*	00000000 __ram_rwdata_start
080116f0 g       *ABS*	00000000 __ram_rodata_start
0801514c g     O .bss	00000028 __malloc_current_mallinfo
08007018 g     F .text	0000014c __d2b
0800f42c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08011024 g     F .text	000000a4 alt_get_fd
080100b4 g     F .text	00000158 alt_busy_sleep
0800926c g     F .text	00000054 _close_r
08011240 g     F .text	0000007c memcmp
0800dfdc g     F .text	000000a8 alt_avalon_i2c_rx_read_available
0800f4ec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08015274 g       *ABS*	00000000 __alt_stack_base
0800f53c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002994 g     F .text	00000154 __swsetup_r
0800b050 g     F .text	000008e8 .hidden __divdf3
08004838 g     F .text	00000118 __sfp
0800727c g     F .text	00000078 __copybits
08011f58 g     O .rwdata	00000408 __malloc_av_
08004984 g     F .text	00000004 __sinit_lock_release
0800bb90 g     F .text	00000718 .hidden __muldf3
080079ac g     F .text	00000054 __sread
08010f1c g     F .text	00000108 alt_find_file
08010290 g     F .text	000000a4 alt_dev_llist_insert
0800d388 g     F .text	00000024 __malloc_lock
0800d56c g     F .text	000000b0 sbrk
0800e404 g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
0800e36c g     F .text	0000004c alt_avalon_i2c_check_nack
0800458c g     F .text	0000005c _fflush_r
080092c0 g     F .text	000000c4 _calloc_r
08015114 g       *ABS*	00000000 __bss_start
0800625c g     F .text	00000128 memset
08000474 g     F .text	00000078 main
0800e338 g     F .text	00000034 alt_avalon_i2c_master_target_set
08015138 g     O .bss	00000004 alt_envp
08015120 g     O .bss	00000004 __malloc_max_total_mem
0800f48c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08009940 g     F .text	00000018 __swbuf
0800f138 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
08007ae0 g     F .text	00000008 __sclose
09000000 g       *ABS*	00000000 __alt_heap_limit
08009474 g     F .text	00000014 fclose
08002ce8 g     F .text	00001688 _dtoa_r
080056c8 g     F .text	0000080c _malloc_r
08009ab4 g     F .text	00000030 __ascii_wctomb
080135cc g     O .rwdata	00000004 alt_errno
080052a8 g     F .text	000000c4 _fwalk
0801135c g     F .text	000000c8 putc
0800a5f0 g     F .text	00000084 .hidden __divsi3
080049b8 g     F .text	00000124 _malloc_trim_r
080116f0 g       *ABS*	00000000 __CTOR_END__
08007ae8 g     F .text	000000dc strcmp
080116f0 g       *ABS*	00000000 __flash_rodata_start
080116f0 g       *ABS*	00000000 __DTOR_LIST__
0800b938 g     F .text	00000088 .hidden __nedf2
0800d784 g     F .text	00000038 alt_irq_init
0800d508 g     F .text	00000064 alt_release_fd
0801195c g     O .rodata	00000100 .hidden __clz_tab
08015114 g     O .bss	00000004 _PathLocale
080111f4 g     F .text	00000014 atexit
0800920c g     F .text	00000060 _write_r
080054e8 g     F .text	00000018 setlocale
080135a4 g     O .rwdata	00000004 _impure_ptr
08015130 g     O .bss	00000004 alt_argc
08004370 g     F .text	0000021c __sflush_r
08010394 g     F .text	00000060 _do_dtors
080054d4 g     F .text	00000008 __locale_cjk_lang
0800e300 g     F .text	00000038 alt_avalon_i2c_master_target_get
0800e210 g     F .text	000000f0 alt_avalon_i2c_send_address
08000020 g       .exceptions	00000000 alt_irq_entry
08006ea8 g     F .text	00000064 __ulp
080049a0 g     F .text	00000018 __fp_unlock_all
080135b8 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08005500 g     F .text	0000000c localeconv
08000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0800f3c4 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
080104b8 g     F .text	00000050 alt_ic_isr_register
0800dc40 g     F .text	0000004c alt_avalon_i2c_disable
080135e8 g       *ABS*	00000000 _edata
08015274 g       *ABS*	00000000 _end
08009488 g     F .text	00000164 __fputwc
08000244 g       *ABS*	00000000 __ram_exceptions_end
0800f964 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0800dc8c g     F .text	000000b0 alt_avalon_i2c_master_config_get
08010590 g     F .text	0000008c alt_ic_irq_disable
08007a08 g     F .text	0000007c __swrite
080135b0 g     O .rwdata	00000004 __malloc_trim_threshold
080054c8 g     F .text	0000000c __locale_msgcharset
08011208 g     F .text	00000038 exit
0800536c g     F .text	000000c4 _fwalk_reent
08006cac g     F .text	000001fc __mdiff
0800a674 g     F .text	00000074 .hidden __modsi3
09000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800497c g     F .text	00000004 __sfp_lock_release
0800de9c g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0800e12c g     F .text	000000e4 alt_avalon_i2c_cmd_write
080116bc g     F .text	00000034 _exit
0800ff88 g     F .text	0000012c alt_alarm_start
0800550c g     F .text	000001bc __smakebuf_r
0800062c g     F .text	00000098 strlen
08010998 g     F .text	00000154 open
0800b9c0 g     F .text	000000dc .hidden __gedf2
08010d18 g     F .text	0000003c alt_putchar
080135b4 g     O .rwdata	00000004 __wctomb
08007cc0 g     F .text	00000018 __sprint_r
08010484 g     F .text	00000034 alt_icache_flush_all
080135dc g     O .rwdata	00000004 alt_priority_mask
08010508 g     F .text	00000088 alt_ic_irq_enable
080028bc g     F .text	0000001c __vfprintf_internal
08009ae4 g     F .text	0000005c _wctomb_r
0800c2a8 g     F .text	000008fc .hidden __subdf3
080066e0 g     F .text	000000b0 __lo0bits
080135e0 g     O .rwdata	00000008 alt_alarm_list
08010334 g     F .text	00000060 _do_ctors
080099f4 g     F .text	000000c0 wcrtomb
0800ce48 g     F .text	000000d0 close
0800f378 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0800d178 g     F .text	00000084 alt_load
0800e620 g     F .text	0000013c alt_avalon_i2c_master_rx
08009610 g     F .text	00000080 fputwc
08004980 g     F .text	00000004 __sinit_lock_acquire
08006454 g     F .text	00000120 __multadd
0800642c g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10945d04 	addi	r2,r2,20852
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10945d04 	addi	r2,r2,20852
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a6ea17 	ldw	r2,-25688(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a6ea17 	ldw	r2,-25688(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c24034 	movhi	sp,2304
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000260:	d6ad6814 	ori	gp,gp,46496
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000268:	10944514 	ori	r2,r2,20756

    movhi r3, %hi(__bss_end)
 800026c:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000270:	18d49d14 	ori	r3,r3,21108

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	800d1780 	call	800d178 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	800d30c0 	call	800d30c <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <__alt_data_end+0xff00028c>

08000290 <printSPIStatus>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"

void printSPIStatus (int mask)
{
 8000290:	defffc04 	addi	sp,sp,-16
 8000294:	dfc00315 	stw	ra,12(sp)
 8000298:	df000215 	stw	fp,8(sp)
 800029c:	df000204 	addi	fp,sp,8
 80002a0:	e13fff15 	stw	r4,-4(fp)
	int status = IORD(SPI_0_BASE, 0x2);
 80002a4:	00881204 	movi	r2,8264
 80002a8:	10800037 	ldwio	r2,0(r2)
 80002ac:	e0bffe15 	stw	r2,-8(fp)
	printf("Status:\n");
 80002b0:	01020074 	movhi	r4,2049
 80002b4:	2105bc04 	addi	r4,r4,5872
 80002b8:	80006180 	call	8000618 <puts>
	if(status & mask & (1 << 3))
 80002bc:	e0fffe17 	ldw	r3,-8(fp)
 80002c0:	e0bfff17 	ldw	r2,-4(fp)
 80002c4:	1884703a 	and	r2,r3,r2
 80002c8:	1080020c 	andi	r2,r2,8
 80002cc:	10000326 	beq	r2,zero,80002dc <printSPIStatus+0x4c>
		printf("\tReceive-overrun error\n");
 80002d0:	01020074 	movhi	r4,2049
 80002d4:	2105be04 	addi	r4,r4,5880
 80002d8:	80006180 	call	8000618 <puts>
	if(status & mask & (1 << 4))
 80002dc:	e0fffe17 	ldw	r3,-8(fp)
 80002e0:	e0bfff17 	ldw	r2,-4(fp)
 80002e4:	1884703a 	and	r2,r3,r2
 80002e8:	1080040c 	andi	r2,r2,16
 80002ec:	10000326 	beq	r2,zero,80002fc <printSPIStatus+0x6c>
		printf("\tTransmitter-overrun error\n");
 80002f0:	01020074 	movhi	r4,2049
 80002f4:	2105c404 	addi	r4,r4,5904
 80002f8:	80006180 	call	8000618 <puts>
	if(status & mask & (1 << 5))
 80002fc:	e0fffe17 	ldw	r3,-8(fp)
 8000300:	e0bfff17 	ldw	r2,-4(fp)
 8000304:	1884703a 	and	r2,r3,r2
 8000308:	1080080c 	andi	r2,r2,32
 800030c:	10000326 	beq	r2,zero,800031c <printSPIStatus+0x8c>
		printf("\tTransmitter shift-register empty\n");
 8000310:	01020074 	movhi	r4,2049
 8000314:	2105cb04 	addi	r4,r4,5932
 8000318:	80006180 	call	8000618 <puts>
	if(status & mask & (1 << 6))
 800031c:	e0fffe17 	ldw	r3,-8(fp)
 8000320:	e0bfff17 	ldw	r2,-4(fp)
 8000324:	1884703a 	and	r2,r3,r2
 8000328:	1080100c 	andi	r2,r2,64
 800032c:	10000326 	beq	r2,zero,800033c <printSPIStatus+0xac>
		printf("\tTransmitter ready\n");
 8000330:	01020074 	movhi	r4,2049
 8000334:	2105d404 	addi	r4,r4,5968
 8000338:	80006180 	call	8000618 <puts>
	if(status & mask & (1 << 7))
 800033c:	e0fffe17 	ldw	r3,-8(fp)
 8000340:	e0bfff17 	ldw	r2,-4(fp)
 8000344:	1884703a 	and	r2,r3,r2
 8000348:	1080200c 	andi	r2,r2,128
 800034c:	10000326 	beq	r2,zero,800035c <printSPIStatus+0xcc>
		printf("\tReceiver ready\n");
 8000350:	01020074 	movhi	r4,2049
 8000354:	2105d904 	addi	r4,r4,5988
 8000358:	80006180 	call	8000618 <puts>
	if(status & mask & (1 << 8))
 800035c:	e0fffe17 	ldw	r3,-8(fp)
 8000360:	e0bfff17 	ldw	r2,-4(fp)
 8000364:	1884703a 	and	r2,r3,r2
 8000368:	1080400c 	andi	r2,r2,256
 800036c:	10000326 	beq	r2,zero,800037c <printSPIStatus+0xec>
		printf("\tError\n");
 8000370:	01020074 	movhi	r4,2049
 8000374:	2105dd04 	addi	r4,r4,6004
 8000378:	80006180 	call	8000618 <puts>
	if(status & mask & (1 << 9))
 800037c:	e0fffe17 	ldw	r3,-8(fp)
 8000380:	e0bfff17 	ldw	r2,-4(fp)
 8000384:	1884703a 	and	r2,r3,r2
 8000388:	1080800c 	andi	r2,r2,512
 800038c:	10000326 	beq	r2,zero,800039c <printSPIStatus+0x10c>
		printf("\tEnd of packet\n");
 8000390:	01020074 	movhi	r4,2049
 8000394:	2105df04 	addi	r4,r4,6012
 8000398:	80006180 	call	8000618 <puts>
}
 800039c:	0001883a 	nop
 80003a0:	e037883a 	mov	sp,fp
 80003a4:	dfc00117 	ldw	ra,4(sp)
 80003a8:	df000017 	ldw	fp,0(sp)
 80003ac:	dec00204 	addi	sp,sp,8
 80003b0:	f800283a 	ret

080003b4 <readTransReg>:

int8_t readTransReg (int8_t reg)
{
 80003b4:	defffb04 	addi	sp,sp,-20
 80003b8:	dfc00415 	stw	ra,16(sp)
 80003bc:	df000315 	stw	fp,12(sp)
 80003c0:	df000304 	addi	fp,sp,12
 80003c4:	2005883a 	mov	r2,r4
 80003c8:	e0bfff05 	stb	r2,-4(fp)
	int8_t temp;
	printSPIStatus(0b1111111000);
 80003cc:	0100fe04 	movi	r4,1016
 80003d0:	80002900 	call	8000290 <printSPIStatus>
	IOWR(SPI_0_BASE, 0x1, reg);
 80003d4:	e0ffff07 	ldb	r3,-4(fp)
 80003d8:	00881104 	movi	r2,8260
 80003dc:	10c00035 	stwio	r3,0(r2)
	for(int j = 0; j < 1000000; j++) {}
 80003e0:	e03ffd15 	stw	zero,-12(fp)
 80003e4:	00000306 	br	80003f4 <readTransReg+0x40>
 80003e8:	e0bffd17 	ldw	r2,-12(fp)
 80003ec:	10800044 	addi	r2,r2,1
 80003f0:	e0bffd15 	stw	r2,-12(fp)
 80003f4:	e0fffd17 	ldw	r3,-12(fp)
 80003f8:	008003f4 	movhi	r2,15
 80003fc:	10908fc4 	addi	r2,r2,16959
 8000400:	10fff90e 	bge	r2,r3,80003e8 <__alt_data_end+0xff0003e8>
	while(1)
	{
		if(IORD(SPI_0_BASE, 0x2) & 0b10000000)
 8000404:	00881204 	movi	r2,8264
 8000408:	10800037 	ldwio	r2,0(r2)
 800040c:	1080200c 	andi	r2,r2,128
 8000410:	103ffc26 	beq	r2,zero,8000404 <__alt_data_end+0xff000404>
		{
			printSPIStatus(0b1111111000);
 8000414:	0100fe04 	movi	r4,1016
 8000418:	80002900 	call	8000290 <printSPIStatus>
			temp = (int8_t)IORD(SPI_0_BASE, 0x0);
 800041c:	00881004 	movi	r2,8256
 8000420:	10800037 	ldwio	r2,0(r2)
 8000424:	e0bffe05 	stb	r2,-8(fp)
			printf("%x\n", temp);
 8000428:	e0bffe07 	ldb	r2,-8(fp)
 800042c:	100b883a 	mov	r5,r2
 8000430:	01020074 	movhi	r4,2049
 8000434:	2105e304 	addi	r4,r4,6028
 8000438:	800051c0 	call	800051c <printf>
			printSPIStatus(0b1111111000);
 800043c:	0100fe04 	movi	r4,1016
 8000440:	80002900 	call	8000290 <printSPIStatus>
			if(!(IORD(SPI_0_BASE, 0x2) & 0b10000000))
 8000444:	00881204 	movi	r2,8264
 8000448:	10800037 	ldwio	r2,0(r2)
 800044c:	1080200c 	andi	r2,r2,128
 8000450:	10000126 	beq	r2,zero,8000458 <readTransReg+0xa4>
				break;
		}
	}
 8000454:	003feb06 	br	8000404 <__alt_data_end+0xff000404>
			printSPIStatus(0b1111111000);
			temp = (int8_t)IORD(SPI_0_BASE, 0x0);
			printf("%x\n", temp);
			printSPIStatus(0b1111111000);
			if(!(IORD(SPI_0_BASE, 0x2) & 0b10000000))
				break;
 8000458:	0001883a 	nop
		}
	}
	return temp;
 800045c:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000460:	e037883a 	mov	sp,fp
 8000464:	dfc00117 	ldw	ra,4(sp)
 8000468:	df000017 	ldw	fp,0(sp)
 800046c:	dec00204 	addi	sp,sp,8
 8000470:	f800283a 	ret

08000474 <main>:

int main ()
{
 8000474:	defffd04 	addi	sp,sp,-12
 8000478:	dfc00215 	stw	ra,8(sp)
 800047c:	df000115 	stw	fp,4(sp)
 8000480:	df000104 	addi	fp,sp,4
	IOWR(SPI_0_BASE, 0x3, 0b10000000000);
 8000484:	00c10004 	movi	r3,1024
 8000488:	00881304 	movi	r2,8268
 800048c:	10c00035 	stwio	r3,0(r2)
	//IOWR(SPI_0_BASE, 0x3, 0b00000000000);
	IOWR(SPI_0_BASE, 0x5, 1);
 8000490:	00c00044 	movi	r3,1
 8000494:	00881504 	movi	r2,8276
 8000498:	10c00035 	stwio	r3,0(r2)
	IOWR(SPI_CE_BASE, 0x0, 0);
 800049c:	0007883a 	mov	r3,zero
 80004a0:	00882404 	movi	r2,8336
 80004a4:	10c00035 	stwio	r3,0(r2)
	for(int j = 0; j < 10000000; j++) {}
 80004a8:	e03fff15 	stw	zero,-4(fp)
 80004ac:	00000306 	br	80004bc <main+0x48>
 80004b0:	e0bfff17 	ldw	r2,-4(fp)
 80004b4:	10800044 	addi	r2,r2,1
 80004b8:	e0bfff15 	stw	r2,-4(fp)
 80004bc:	e0ffff17 	ldw	r3,-4(fp)
 80004c0:	00802674 	movhi	r2,153
 80004c4:	10a59fc4 	addi	r2,r2,-27009
 80004c8:	10fff90e 	bge	r2,r3,80004b0 <__alt_data_end+0xff0004b0>

	readTransReg((int8_t)(0x5));
 80004cc:	01000144 	movi	r4,5
 80004d0:	80003b40 	call	80003b4 <readTransReg>
 80004d4:	0005883a 	mov	r2,zero
}
 80004d8:	e037883a 	mov	sp,fp
 80004dc:	dfc00117 	ldw	ra,4(sp)
 80004e0:	df000017 	ldw	fp,0(sp)
 80004e4:	dec00204 	addi	sp,sp,8
 80004e8:	f800283a 	ret

080004ec <_printf_r>:
 80004ec:	defffd04 	addi	sp,sp,-12
 80004f0:	2805883a 	mov	r2,r5
 80004f4:	dfc00015 	stw	ra,0(sp)
 80004f8:	d9800115 	stw	r6,4(sp)
 80004fc:	d9c00215 	stw	r7,8(sp)
 8000500:	21400217 	ldw	r5,8(r4)
 8000504:	d9c00104 	addi	r7,sp,4
 8000508:	100d883a 	mov	r6,r2
 800050c:	80006c40 	call	80006c4 <___vfprintf_internal_r>
 8000510:	dfc00017 	ldw	ra,0(sp)
 8000514:	dec00304 	addi	sp,sp,12
 8000518:	f800283a 	ret

0800051c <printf>:
 800051c:	defffc04 	addi	sp,sp,-16
 8000520:	dfc00015 	stw	ra,0(sp)
 8000524:	d9400115 	stw	r5,4(sp)
 8000528:	d9800215 	stw	r6,8(sp)
 800052c:	d9c00315 	stw	r7,12(sp)
 8000530:	00820074 	movhi	r2,2049
 8000534:	108d6904 	addi	r2,r2,13732
 8000538:	10800017 	ldw	r2,0(r2)
 800053c:	200b883a 	mov	r5,r4
 8000540:	d9800104 	addi	r6,sp,4
 8000544:	11000217 	ldw	r4,8(r2)
 8000548:	80028bc0 	call	80028bc <__vfprintf_internal>
 800054c:	dfc00017 	ldw	ra,0(sp)
 8000550:	dec00404 	addi	sp,sp,16
 8000554:	f800283a 	ret

08000558 <_puts_r>:
 8000558:	defff604 	addi	sp,sp,-40
 800055c:	dc000715 	stw	r16,28(sp)
 8000560:	2021883a 	mov	r16,r4
 8000564:	2809883a 	mov	r4,r5
 8000568:	dc400815 	stw	r17,32(sp)
 800056c:	dfc00915 	stw	ra,36(sp)
 8000570:	2823883a 	mov	r17,r5
 8000574:	800062c0 	call	800062c <strlen>
 8000578:	10c00044 	addi	r3,r2,1
 800057c:	d8800115 	stw	r2,4(sp)
 8000580:	00820074 	movhi	r2,2049
 8000584:	1085e404 	addi	r2,r2,6032
 8000588:	d8800215 	stw	r2,8(sp)
 800058c:	00800044 	movi	r2,1
 8000590:	d8800315 	stw	r2,12(sp)
 8000594:	00800084 	movi	r2,2
 8000598:	dc400015 	stw	r17,0(sp)
 800059c:	d8c00615 	stw	r3,24(sp)
 80005a0:	dec00415 	stw	sp,16(sp)
 80005a4:	d8800515 	stw	r2,20(sp)
 80005a8:	80000226 	beq	r16,zero,80005b4 <_puts_r+0x5c>
 80005ac:	80800e17 	ldw	r2,56(r16)
 80005b0:	10001426 	beq	r2,zero,8000604 <_puts_r+0xac>
 80005b4:	81400217 	ldw	r5,8(r16)
 80005b8:	2880030b 	ldhu	r2,12(r5)
 80005bc:	10c8000c 	andi	r3,r2,8192
 80005c0:	1800061e 	bne	r3,zero,80005dc <_puts_r+0x84>
 80005c4:	29001917 	ldw	r4,100(r5)
 80005c8:	00f7ffc4 	movi	r3,-8193
 80005cc:	10880014 	ori	r2,r2,8192
 80005d0:	20c6703a 	and	r3,r4,r3
 80005d4:	2880030d 	sth	r2,12(r5)
 80005d8:	28c01915 	stw	r3,100(r5)
 80005dc:	d9800404 	addi	r6,sp,16
 80005e0:	8009883a 	mov	r4,r16
 80005e4:	8004dec0 	call	8004dec <__sfvwrite_r>
 80005e8:	1000091e 	bne	r2,zero,8000610 <_puts_r+0xb8>
 80005ec:	00800284 	movi	r2,10
 80005f0:	dfc00917 	ldw	ra,36(sp)
 80005f4:	dc400817 	ldw	r17,32(sp)
 80005f8:	dc000717 	ldw	r16,28(sp)
 80005fc:	dec00a04 	addi	sp,sp,40
 8000600:	f800283a 	ret
 8000604:	8009883a 	mov	r4,r16
 8000608:	80049680 	call	8004968 <__sinit>
 800060c:	003fe906 	br	80005b4 <__alt_data_end+0xff0005b4>
 8000610:	00bfffc4 	movi	r2,-1
 8000614:	003ff606 	br	80005f0 <__alt_data_end+0xff0005f0>

08000618 <puts>:
 8000618:	00820074 	movhi	r2,2049
 800061c:	108d6904 	addi	r2,r2,13732
 8000620:	200b883a 	mov	r5,r4
 8000624:	11000017 	ldw	r4,0(r2)
 8000628:	80005581 	jmpi	8000558 <_puts_r>

0800062c <strlen>:
 800062c:	208000cc 	andi	r2,r4,3
 8000630:	10002026 	beq	r2,zero,80006b4 <strlen+0x88>
 8000634:	20800007 	ldb	r2,0(r4)
 8000638:	10002026 	beq	r2,zero,80006bc <strlen+0x90>
 800063c:	2005883a 	mov	r2,r4
 8000640:	00000206 	br	800064c <strlen+0x20>
 8000644:	10c00007 	ldb	r3,0(r2)
 8000648:	18001826 	beq	r3,zero,80006ac <strlen+0x80>
 800064c:	10800044 	addi	r2,r2,1
 8000650:	10c000cc 	andi	r3,r2,3
 8000654:	183ffb1e 	bne	r3,zero,8000644 <__alt_data_end+0xff000644>
 8000658:	10c00017 	ldw	r3,0(r2)
 800065c:	01ffbff4 	movhi	r7,65279
 8000660:	39ffbfc4 	addi	r7,r7,-257
 8000664:	00ca303a 	nor	r5,zero,r3
 8000668:	01a02074 	movhi	r6,32897
 800066c:	19c7883a 	add	r3,r3,r7
 8000670:	31a02004 	addi	r6,r6,-32640
 8000674:	1946703a 	and	r3,r3,r5
 8000678:	1986703a 	and	r3,r3,r6
 800067c:	1800091e 	bne	r3,zero,80006a4 <strlen+0x78>
 8000680:	10800104 	addi	r2,r2,4
 8000684:	10c00017 	ldw	r3,0(r2)
 8000688:	19cb883a 	add	r5,r3,r7
 800068c:	00c6303a 	nor	r3,zero,r3
 8000690:	28c6703a 	and	r3,r5,r3
 8000694:	1986703a 	and	r3,r3,r6
 8000698:	183ff926 	beq	r3,zero,8000680 <__alt_data_end+0xff000680>
 800069c:	00000106 	br	80006a4 <strlen+0x78>
 80006a0:	10800044 	addi	r2,r2,1
 80006a4:	10c00007 	ldb	r3,0(r2)
 80006a8:	183ffd1e 	bne	r3,zero,80006a0 <__alt_data_end+0xff0006a0>
 80006ac:	1105c83a 	sub	r2,r2,r4
 80006b0:	f800283a 	ret
 80006b4:	2005883a 	mov	r2,r4
 80006b8:	003fe706 	br	8000658 <__alt_data_end+0xff000658>
 80006bc:	0005883a 	mov	r2,zero
 80006c0:	f800283a 	ret

080006c4 <___vfprintf_internal_r>:
 80006c4:	deffb804 	addi	sp,sp,-288
 80006c8:	dfc04715 	stw	ra,284(sp)
 80006cc:	ddc04515 	stw	r23,276(sp)
 80006d0:	dd404315 	stw	r21,268(sp)
 80006d4:	d9002c15 	stw	r4,176(sp)
 80006d8:	282f883a 	mov	r23,r5
 80006dc:	302b883a 	mov	r21,r6
 80006e0:	d9c02d15 	stw	r7,180(sp)
 80006e4:	df004615 	stw	fp,280(sp)
 80006e8:	dd804415 	stw	r22,272(sp)
 80006ec:	dd004215 	stw	r20,264(sp)
 80006f0:	dcc04115 	stw	r19,260(sp)
 80006f4:	dc804015 	stw	r18,256(sp)
 80006f8:	dc403f15 	stw	r17,252(sp)
 80006fc:	dc003e15 	stw	r16,248(sp)
 8000700:	80054dc0 	call	80054dc <_localeconv_r>
 8000704:	10800017 	ldw	r2,0(r2)
 8000708:	1009883a 	mov	r4,r2
 800070c:	d8803415 	stw	r2,208(sp)
 8000710:	800062c0 	call	800062c <strlen>
 8000714:	d8803715 	stw	r2,220(sp)
 8000718:	d8802c17 	ldw	r2,176(sp)
 800071c:	10000226 	beq	r2,zero,8000728 <___vfprintf_internal_r+0x64>
 8000720:	10800e17 	ldw	r2,56(r2)
 8000724:	1000f926 	beq	r2,zero,8000b0c <___vfprintf_internal_r+0x448>
 8000728:	b880030b 	ldhu	r2,12(r23)
 800072c:	10c8000c 	andi	r3,r2,8192
 8000730:	1800061e 	bne	r3,zero,800074c <___vfprintf_internal_r+0x88>
 8000734:	b9001917 	ldw	r4,100(r23)
 8000738:	00f7ffc4 	movi	r3,-8193
 800073c:	10880014 	ori	r2,r2,8192
 8000740:	20c6703a 	and	r3,r4,r3
 8000744:	b880030d 	sth	r2,12(r23)
 8000748:	b8c01915 	stw	r3,100(r23)
 800074c:	10c0020c 	andi	r3,r2,8
 8000750:	1800c126 	beq	r3,zero,8000a58 <___vfprintf_internal_r+0x394>
 8000754:	b8c00417 	ldw	r3,16(r23)
 8000758:	1800bf26 	beq	r3,zero,8000a58 <___vfprintf_internal_r+0x394>
 800075c:	1080068c 	andi	r2,r2,26
 8000760:	00c00284 	movi	r3,10
 8000764:	10c0c426 	beq	r2,r3,8000a78 <___vfprintf_internal_r+0x3b4>
 8000768:	d8c00404 	addi	r3,sp,16
 800076c:	05020074 	movhi	r20,2049
 8000770:	d9001e04 	addi	r4,sp,120
 8000774:	a505f584 	addi	r20,r20,6102
 8000778:	d8c01e15 	stw	r3,120(sp)
 800077c:	d8002015 	stw	zero,128(sp)
 8000780:	d8001f15 	stw	zero,124(sp)
 8000784:	d8003315 	stw	zero,204(sp)
 8000788:	d8003615 	stw	zero,216(sp)
 800078c:	d8003815 	stw	zero,224(sp)
 8000790:	1811883a 	mov	r8,r3
 8000794:	d8003915 	stw	zero,228(sp)
 8000798:	d8003a15 	stw	zero,232(sp)
 800079c:	d8002f15 	stw	zero,188(sp)
 80007a0:	d9002815 	stw	r4,160(sp)
 80007a4:	a8800007 	ldb	r2,0(r21)
 80007a8:	10027b26 	beq	r2,zero,8001198 <___vfprintf_internal_r+0xad4>
 80007ac:	00c00944 	movi	r3,37
 80007b0:	a821883a 	mov	r16,r21
 80007b4:	10c0021e 	bne	r2,r3,80007c0 <___vfprintf_internal_r+0xfc>
 80007b8:	00001406 	br	800080c <___vfprintf_internal_r+0x148>
 80007bc:	10c00326 	beq	r2,r3,80007cc <___vfprintf_internal_r+0x108>
 80007c0:	84000044 	addi	r16,r16,1
 80007c4:	80800007 	ldb	r2,0(r16)
 80007c8:	103ffc1e 	bne	r2,zero,80007bc <__alt_data_end+0xff0007bc>
 80007cc:	8563c83a 	sub	r17,r16,r21
 80007d0:	88000e26 	beq	r17,zero,800080c <___vfprintf_internal_r+0x148>
 80007d4:	d8c02017 	ldw	r3,128(sp)
 80007d8:	d8801f17 	ldw	r2,124(sp)
 80007dc:	45400015 	stw	r21,0(r8)
 80007e0:	1c47883a 	add	r3,r3,r17
 80007e4:	10800044 	addi	r2,r2,1
 80007e8:	d8c02015 	stw	r3,128(sp)
 80007ec:	44400115 	stw	r17,4(r8)
 80007f0:	d8801f15 	stw	r2,124(sp)
 80007f4:	00c001c4 	movi	r3,7
 80007f8:	1880a716 	blt	r3,r2,8000a98 <___vfprintf_internal_r+0x3d4>
 80007fc:	42000204 	addi	r8,r8,8
 8000800:	d9402f17 	ldw	r5,188(sp)
 8000804:	2c4b883a 	add	r5,r5,r17
 8000808:	d9402f15 	stw	r5,188(sp)
 800080c:	80800007 	ldb	r2,0(r16)
 8000810:	1000a826 	beq	r2,zero,8000ab4 <___vfprintf_internal_r+0x3f0>
 8000814:	84400047 	ldb	r17,1(r16)
 8000818:	00bfffc4 	movi	r2,-1
 800081c:	85400044 	addi	r21,r16,1
 8000820:	d8002785 	stb	zero,158(sp)
 8000824:	0007883a 	mov	r3,zero
 8000828:	000f883a 	mov	r7,zero
 800082c:	d8802915 	stw	r2,164(sp)
 8000830:	d8003115 	stw	zero,196(sp)
 8000834:	0025883a 	mov	r18,zero
 8000838:	01401604 	movi	r5,88
 800083c:	01800244 	movi	r6,9
 8000840:	02800a84 	movi	r10,42
 8000844:	02401b04 	movi	r9,108
 8000848:	ad400044 	addi	r21,r21,1
 800084c:	88bff804 	addi	r2,r17,-32
 8000850:	28830436 	bltu	r5,r2,8001464 <___vfprintf_internal_r+0xda0>
 8000854:	100490ba 	slli	r2,r2,2
 8000858:	01020034 	movhi	r4,2048
 800085c:	21021b04 	addi	r4,r4,2156
 8000860:	1105883a 	add	r2,r2,r4
 8000864:	10800017 	ldw	r2,0(r2)
 8000868:	1000683a 	jmp	r2
 800086c:	08001384 	addi	zero,at,78
 8000870:	08001464 	muli	zero,at,81
 8000874:	08001464 	muli	zero,at,81
 8000878:	080013a4 	muli	zero,at,78
 800087c:	08001464 	muli	zero,at,81
 8000880:	08001464 	muli	zero,at,81
 8000884:	08001464 	muli	zero,at,81
 8000888:	08001464 	muli	zero,at,81
 800088c:	08001464 	muli	zero,at,81
 8000890:	08001464 	muli	zero,at,81
 8000894:	08000b18 	cmpnei	zero,at,44
 8000898:	080012c0 	call	80012c <__alt_mem_onchip_memory2_0+0x80012c>
 800089c:	08001464 	muli	zero,at,81
 80008a0:	080009e0 	cmpeqi	zero,at,39
 80008a4:	08000b40 	call	8000b4 <__alt_mem_onchip_memory2_0+0x8000b4>
 80008a8:	08001464 	muli	zero,at,81
 80008ac:	08000b80 	call	8000b8 <__alt_mem_onchip_memory2_0+0x8000b8>
 80008b0:	08000b8c 	andi	zero,at,46
 80008b4:	08000b8c 	andi	zero,at,46
 80008b8:	08000b8c 	andi	zero,at,46
 80008bc:	08000b8c 	andi	zero,at,46
 80008c0:	08000b8c 	andi	zero,at,46
 80008c4:	08000b8c 	andi	zero,at,46
 80008c8:	08000b8c 	andi	zero,at,46
 80008cc:	08000b8c 	andi	zero,at,46
 80008d0:	08000b8c 	andi	zero,at,46
 80008d4:	08001464 	muli	zero,at,81
 80008d8:	08001464 	muli	zero,at,81
 80008dc:	08001464 	muli	zero,at,81
 80008e0:	08001464 	muli	zero,at,81
 80008e4:	08001464 	muli	zero,at,81
 80008e8:	08001464 	muli	zero,at,81
 80008ec:	08001464 	muli	zero,at,81
 80008f0:	08001464 	muli	zero,at,81
 80008f4:	08001464 	muli	zero,at,81
 80008f8:	08001464 	muli	zero,at,81
 80008fc:	08000bc0 	call	8000bc <__alt_mem_onchip_memory2_0+0x8000bc>
 8000900:	08000c7c 	xorhi	zero,at,49
 8000904:	08001464 	muli	zero,at,81
 8000908:	08000c7c 	xorhi	zero,at,49
 800090c:	08001464 	muli	zero,at,81
 8000910:	08001464 	muli	zero,at,81
 8000914:	08001464 	muli	zero,at,81
 8000918:	08001464 	muli	zero,at,81
 800091c:	08000d1c 	xori	zero,at,52
 8000920:	08001464 	muli	zero,at,81
 8000924:	08001464 	muli	zero,at,81
 8000928:	08000d28 	cmpgeui	zero,at,52
 800092c:	08001464 	muli	zero,at,81
 8000930:	08001464 	muli	zero,at,81
 8000934:	08001464 	muli	zero,at,81
 8000938:	08001464 	muli	zero,at,81
 800093c:	08001464 	muli	zero,at,81
 8000940:	080011a0 	cmpeqi	zero,at,70
 8000944:	08001464 	muli	zero,at,81
 8000948:	08001464 	muli	zero,at,81
 800094c:	08001200 	call	800120 <__alt_mem_onchip_memory2_0+0x800120>
 8000950:	08001464 	muli	zero,at,81
 8000954:	08001464 	muli	zero,at,81
 8000958:	08001464 	muli	zero,at,81
 800095c:	08001464 	muli	zero,at,81
 8000960:	08001464 	muli	zero,at,81
 8000964:	08001464 	muli	zero,at,81
 8000968:	08001464 	muli	zero,at,81
 800096c:	08001464 	muli	zero,at,81
 8000970:	08001464 	muli	zero,at,81
 8000974:	08001464 	muli	zero,at,81
 8000978:	08001410 	cmplti	zero,at,80
 800097c:	080013b0 	cmpltui	zero,at,78
 8000980:	08000c7c 	xorhi	zero,at,49
 8000984:	08000c7c 	xorhi	zero,at,49
 8000988:	08000c7c 	xorhi	zero,at,49
 800098c:	080013c0 	call	80013c <__alt_mem_onchip_memory2_0+0x80013c>
 8000990:	080013b0 	cmpltui	zero,at,78
 8000994:	08001464 	muli	zero,at,81
 8000998:	08001464 	muli	zero,at,81
 800099c:	080013cc 	andi	zero,at,79
 80009a0:	08001464 	muli	zero,at,81
 80009a4:	080013dc 	xori	zero,at,79
 80009a8:	080012b0 	cmpltui	zero,at,74
 80009ac:	080009ec 	andhi	zero,at,39
 80009b0:	080012d0 	cmplti	zero,at,75
 80009b4:	08001464 	muli	zero,at,81
 80009b8:	080012dc 	xori	zero,at,75
 80009bc:	08001464 	muli	zero,at,81
 80009c0:	08001338 	rdprs	zero,at,76
 80009c4:	08001464 	muli	zero,at,81
 80009c8:	08001464 	muli	zero,at,81
 80009cc:	08001348 	cmpgei	zero,at,77
 80009d0:	d9003117 	ldw	r4,196(sp)
 80009d4:	d8802d15 	stw	r2,180(sp)
 80009d8:	0109c83a 	sub	r4,zero,r4
 80009dc:	d9003115 	stw	r4,196(sp)
 80009e0:	94800114 	ori	r18,r18,4
 80009e4:	ac400007 	ldb	r17,0(r21)
 80009e8:	003f9706 	br	8000848 <__alt_data_end+0xff000848>
 80009ec:	00800c04 	movi	r2,48
 80009f0:	d9002d17 	ldw	r4,180(sp)
 80009f4:	d9402917 	ldw	r5,164(sp)
 80009f8:	d8802705 	stb	r2,156(sp)
 80009fc:	00801e04 	movi	r2,120
 8000a00:	d8802745 	stb	r2,157(sp)
 8000a04:	d8002785 	stb	zero,158(sp)
 8000a08:	20c00104 	addi	r3,r4,4
 8000a0c:	24c00017 	ldw	r19,0(r4)
 8000a10:	002d883a 	mov	r22,zero
 8000a14:	90800094 	ori	r2,r18,2
 8000a18:	28029a16 	blt	r5,zero,8001484 <___vfprintf_internal_r+0xdc0>
 8000a1c:	00bfdfc4 	movi	r2,-129
 8000a20:	90a4703a 	and	r18,r18,r2
 8000a24:	d8c02d15 	stw	r3,180(sp)
 8000a28:	94800094 	ori	r18,r18,2
 8000a2c:	9802871e 	bne	r19,zero,800144c <___vfprintf_internal_r+0xd88>
 8000a30:	00820074 	movhi	r2,2049
 8000a34:	1085ee04 	addi	r2,r2,6072
 8000a38:	d8803915 	stw	r2,228(sp)
 8000a3c:	04401e04 	movi	r17,120
 8000a40:	d8802917 	ldw	r2,164(sp)
 8000a44:	0039883a 	mov	fp,zero
 8000a48:	1001e926 	beq	r2,zero,80011f0 <___vfprintf_internal_r+0xb2c>
 8000a4c:	0027883a 	mov	r19,zero
 8000a50:	002d883a 	mov	r22,zero
 8000a54:	00020506 	br	800126c <___vfprintf_internal_r+0xba8>
 8000a58:	d9002c17 	ldw	r4,176(sp)
 8000a5c:	b80b883a 	mov	r5,r23
 8000a60:	80029940 	call	8002994 <__swsetup_r>
 8000a64:	1005ac1e 	bne	r2,zero,8002118 <___vfprintf_internal_r+0x1a54>
 8000a68:	b880030b 	ldhu	r2,12(r23)
 8000a6c:	00c00284 	movi	r3,10
 8000a70:	1080068c 	andi	r2,r2,26
 8000a74:	10ff3c1e 	bne	r2,r3,8000768 <__alt_data_end+0xff000768>
 8000a78:	b880038f 	ldh	r2,14(r23)
 8000a7c:	103f3a16 	blt	r2,zero,8000768 <__alt_data_end+0xff000768>
 8000a80:	d9c02d17 	ldw	r7,180(sp)
 8000a84:	d9002c17 	ldw	r4,176(sp)
 8000a88:	a80d883a 	mov	r6,r21
 8000a8c:	b80b883a 	mov	r5,r23
 8000a90:	80028d80 	call	80028d8 <__sbprintf>
 8000a94:	00001106 	br	8000adc <___vfprintf_internal_r+0x418>
 8000a98:	d9002c17 	ldw	r4,176(sp)
 8000a9c:	d9801e04 	addi	r6,sp,120
 8000aa0:	b80b883a 	mov	r5,r23
 8000aa4:	8007cc00 	call	8007cc0 <__sprint_r>
 8000aa8:	1000081e 	bne	r2,zero,8000acc <___vfprintf_internal_r+0x408>
 8000aac:	da000404 	addi	r8,sp,16
 8000ab0:	003f5306 	br	8000800 <__alt_data_end+0xff000800>
 8000ab4:	d8802017 	ldw	r2,128(sp)
 8000ab8:	10000426 	beq	r2,zero,8000acc <___vfprintf_internal_r+0x408>
 8000abc:	d9002c17 	ldw	r4,176(sp)
 8000ac0:	d9801e04 	addi	r6,sp,120
 8000ac4:	b80b883a 	mov	r5,r23
 8000ac8:	8007cc00 	call	8007cc0 <__sprint_r>
 8000acc:	b880030b 	ldhu	r2,12(r23)
 8000ad0:	1080100c 	andi	r2,r2,64
 8000ad4:	1005901e 	bne	r2,zero,8002118 <___vfprintf_internal_r+0x1a54>
 8000ad8:	d8802f17 	ldw	r2,188(sp)
 8000adc:	dfc04717 	ldw	ra,284(sp)
 8000ae0:	df004617 	ldw	fp,280(sp)
 8000ae4:	ddc04517 	ldw	r23,276(sp)
 8000ae8:	dd804417 	ldw	r22,272(sp)
 8000aec:	dd404317 	ldw	r21,268(sp)
 8000af0:	dd004217 	ldw	r20,264(sp)
 8000af4:	dcc04117 	ldw	r19,260(sp)
 8000af8:	dc804017 	ldw	r18,256(sp)
 8000afc:	dc403f17 	ldw	r17,252(sp)
 8000b00:	dc003e17 	ldw	r16,248(sp)
 8000b04:	dec04804 	addi	sp,sp,288
 8000b08:	f800283a 	ret
 8000b0c:	d9002c17 	ldw	r4,176(sp)
 8000b10:	80049680 	call	8004968 <__sinit>
 8000b14:	003f0406 	br	8000728 <__alt_data_end+0xff000728>
 8000b18:	d8802d17 	ldw	r2,180(sp)
 8000b1c:	d9002d17 	ldw	r4,180(sp)
 8000b20:	10800017 	ldw	r2,0(r2)
 8000b24:	d8803115 	stw	r2,196(sp)
 8000b28:	20800104 	addi	r2,r4,4
 8000b2c:	d9003117 	ldw	r4,196(sp)
 8000b30:	203fa716 	blt	r4,zero,80009d0 <__alt_data_end+0xff0009d0>
 8000b34:	d8802d15 	stw	r2,180(sp)
 8000b38:	ac400007 	ldb	r17,0(r21)
 8000b3c:	003f4206 	br	8000848 <__alt_data_end+0xff000848>
 8000b40:	ac400007 	ldb	r17,0(r21)
 8000b44:	aac00044 	addi	r11,r21,1
 8000b48:	8a872826 	beq	r17,r10,80027ec <___vfprintf_internal_r+0x2128>
 8000b4c:	88bff404 	addi	r2,r17,-48
 8000b50:	0009883a 	mov	r4,zero
 8000b54:	30867d36 	bltu	r6,r2,800254c <___vfprintf_internal_r+0x1e88>
 8000b58:	5c400007 	ldb	r17,0(r11)
 8000b5c:	210002a4 	muli	r4,r4,10
 8000b60:	5d400044 	addi	r21,r11,1
 8000b64:	a817883a 	mov	r11,r21
 8000b68:	2089883a 	add	r4,r4,r2
 8000b6c:	88bff404 	addi	r2,r17,-48
 8000b70:	30bff92e 	bgeu	r6,r2,8000b58 <__alt_data_end+0xff000b58>
 8000b74:	2005c916 	blt	r4,zero,800229c <___vfprintf_internal_r+0x1bd8>
 8000b78:	d9002915 	stw	r4,164(sp)
 8000b7c:	003f3306 	br	800084c <__alt_data_end+0xff00084c>
 8000b80:	94802014 	ori	r18,r18,128
 8000b84:	ac400007 	ldb	r17,0(r21)
 8000b88:	003f2f06 	br	8000848 <__alt_data_end+0xff000848>
 8000b8c:	a809883a 	mov	r4,r21
 8000b90:	d8003115 	stw	zero,196(sp)
 8000b94:	88bff404 	addi	r2,r17,-48
 8000b98:	0017883a 	mov	r11,zero
 8000b9c:	24400007 	ldb	r17,0(r4)
 8000ba0:	5ac002a4 	muli	r11,r11,10
 8000ba4:	ad400044 	addi	r21,r21,1
 8000ba8:	a809883a 	mov	r4,r21
 8000bac:	12d7883a 	add	r11,r2,r11
 8000bb0:	88bff404 	addi	r2,r17,-48
 8000bb4:	30bff92e 	bgeu	r6,r2,8000b9c <__alt_data_end+0xff000b9c>
 8000bb8:	dac03115 	stw	r11,196(sp)
 8000bbc:	003f2306 	br	800084c <__alt_data_end+0xff00084c>
 8000bc0:	18c03fcc 	andi	r3,r3,255
 8000bc4:	18072b1e 	bne	r3,zero,8002874 <___vfprintf_internal_r+0x21b0>
 8000bc8:	94800414 	ori	r18,r18,16
 8000bcc:	9080080c 	andi	r2,r18,32
 8000bd0:	10037b26 	beq	r2,zero,80019c0 <___vfprintf_internal_r+0x12fc>
 8000bd4:	d9402d17 	ldw	r5,180(sp)
 8000bd8:	28800117 	ldw	r2,4(r5)
 8000bdc:	2cc00017 	ldw	r19,0(r5)
 8000be0:	29400204 	addi	r5,r5,8
 8000be4:	d9402d15 	stw	r5,180(sp)
 8000be8:	102d883a 	mov	r22,r2
 8000bec:	10044b16 	blt	r2,zero,8001d1c <___vfprintf_internal_r+0x1658>
 8000bf0:	d9402917 	ldw	r5,164(sp)
 8000bf4:	df002783 	ldbu	fp,158(sp)
 8000bf8:	2803bc16 	blt	r5,zero,8001aec <___vfprintf_internal_r+0x1428>
 8000bfc:	00ffdfc4 	movi	r3,-129
 8000c00:	9d84b03a 	or	r2,r19,r22
 8000c04:	90e4703a 	and	r18,r18,r3
 8000c08:	10017726 	beq	r2,zero,80011e8 <___vfprintf_internal_r+0xb24>
 8000c0c:	b0038326 	beq	r22,zero,8001a1c <___vfprintf_internal_r+0x1358>
 8000c10:	dc402a15 	stw	r17,168(sp)
 8000c14:	dc001e04 	addi	r16,sp,120
 8000c18:	b023883a 	mov	r17,r22
 8000c1c:	402d883a 	mov	r22,r8
 8000c20:	9809883a 	mov	r4,r19
 8000c24:	880b883a 	mov	r5,r17
 8000c28:	01800284 	movi	r6,10
 8000c2c:	000f883a 	mov	r7,zero
 8000c30:	800a0b80 	call	800a0b8 <__umoddi3>
 8000c34:	10800c04 	addi	r2,r2,48
 8000c38:	843fffc4 	addi	r16,r16,-1
 8000c3c:	9809883a 	mov	r4,r19
 8000c40:	880b883a 	mov	r5,r17
 8000c44:	80800005 	stb	r2,0(r16)
 8000c48:	01800284 	movi	r6,10
 8000c4c:	000f883a 	mov	r7,zero
 8000c50:	8009b400 	call	8009b40 <__udivdi3>
 8000c54:	1027883a 	mov	r19,r2
 8000c58:	10c4b03a 	or	r2,r2,r3
 8000c5c:	1823883a 	mov	r17,r3
 8000c60:	103fef1e 	bne	r2,zero,8000c20 <__alt_data_end+0xff000c20>
 8000c64:	d8c02817 	ldw	r3,160(sp)
 8000c68:	dc402a17 	ldw	r17,168(sp)
 8000c6c:	b011883a 	mov	r8,r22
 8000c70:	1c07c83a 	sub	r3,r3,r16
 8000c74:	d8c02e15 	stw	r3,184(sp)
 8000c78:	00005906 	br	8000de0 <___vfprintf_internal_r+0x71c>
 8000c7c:	18c03fcc 	andi	r3,r3,255
 8000c80:	1806fa1e 	bne	r3,zero,800286c <___vfprintf_internal_r+0x21a8>
 8000c84:	9080020c 	andi	r2,r18,8
 8000c88:	10048a26 	beq	r2,zero,8001eb4 <___vfprintf_internal_r+0x17f0>
 8000c8c:	d8c02d17 	ldw	r3,180(sp)
 8000c90:	d9002d17 	ldw	r4,180(sp)
 8000c94:	d9402d17 	ldw	r5,180(sp)
 8000c98:	18c00017 	ldw	r3,0(r3)
 8000c9c:	21000117 	ldw	r4,4(r4)
 8000ca0:	29400204 	addi	r5,r5,8
 8000ca4:	d8c03615 	stw	r3,216(sp)
 8000ca8:	d9003815 	stw	r4,224(sp)
 8000cac:	d9402d15 	stw	r5,180(sp)
 8000cb0:	d9003617 	ldw	r4,216(sp)
 8000cb4:	d9403817 	ldw	r5,224(sp)
 8000cb8:	da003d15 	stw	r8,244(sp)
 8000cbc:	04000044 	movi	r16,1
 8000cc0:	80078e40 	call	80078e4 <__fpclassifyd>
 8000cc4:	da003d17 	ldw	r8,244(sp)
 8000cc8:	14041f1e 	bne	r2,r16,8001d48 <___vfprintf_internal_r+0x1684>
 8000ccc:	d9003617 	ldw	r4,216(sp)
 8000cd0:	d9403817 	ldw	r5,224(sp)
 8000cd4:	000d883a 	mov	r6,zero
 8000cd8:	000f883a 	mov	r7,zero
 8000cdc:	800ba9c0 	call	800ba9c <__ledf2>
 8000ce0:	da003d17 	ldw	r8,244(sp)
 8000ce4:	1005be16 	blt	r2,zero,80023e0 <___vfprintf_internal_r+0x1d1c>
 8000ce8:	df002783 	ldbu	fp,158(sp)
 8000cec:	008011c4 	movi	r2,71
 8000cf0:	1445330e 	bge	r2,r17,80021c0 <___vfprintf_internal_r+0x1afc>
 8000cf4:	04020074 	movhi	r16,2049
 8000cf8:	8405e604 	addi	r16,r16,6040
 8000cfc:	00c000c4 	movi	r3,3
 8000d00:	00bfdfc4 	movi	r2,-129
 8000d04:	d8c02a15 	stw	r3,168(sp)
 8000d08:	90a4703a 	and	r18,r18,r2
 8000d0c:	d8c02e15 	stw	r3,184(sp)
 8000d10:	d8002915 	stw	zero,164(sp)
 8000d14:	d8003215 	stw	zero,200(sp)
 8000d18:	00003706 	br	8000df8 <___vfprintf_internal_r+0x734>
 8000d1c:	94800214 	ori	r18,r18,8
 8000d20:	ac400007 	ldb	r17,0(r21)
 8000d24:	003ec806 	br	8000848 <__alt_data_end+0xff000848>
 8000d28:	18c03fcc 	andi	r3,r3,255
 8000d2c:	1806db1e 	bne	r3,zero,800289c <___vfprintf_internal_r+0x21d8>
 8000d30:	94800414 	ori	r18,r18,16
 8000d34:	9080080c 	andi	r2,r18,32
 8000d38:	1002d826 	beq	r2,zero,800189c <___vfprintf_internal_r+0x11d8>
 8000d3c:	d9402d17 	ldw	r5,180(sp)
 8000d40:	d8c02917 	ldw	r3,164(sp)
 8000d44:	d8002785 	stb	zero,158(sp)
 8000d48:	28800204 	addi	r2,r5,8
 8000d4c:	2cc00017 	ldw	r19,0(r5)
 8000d50:	2d800117 	ldw	r22,4(r5)
 8000d54:	18048f16 	blt	r3,zero,8001f94 <___vfprintf_internal_r+0x18d0>
 8000d58:	013fdfc4 	movi	r4,-129
 8000d5c:	9d86b03a 	or	r3,r19,r22
 8000d60:	d8802d15 	stw	r2,180(sp)
 8000d64:	9124703a 	and	r18,r18,r4
 8000d68:	1802d91e 	bne	r3,zero,80018d0 <___vfprintf_internal_r+0x120c>
 8000d6c:	d8c02917 	ldw	r3,164(sp)
 8000d70:	0039883a 	mov	fp,zero
 8000d74:	1805c326 	beq	r3,zero,8002484 <___vfprintf_internal_r+0x1dc0>
 8000d78:	0027883a 	mov	r19,zero
 8000d7c:	002d883a 	mov	r22,zero
 8000d80:	dc001e04 	addi	r16,sp,120
 8000d84:	9806d0fa 	srli	r3,r19,3
 8000d88:	b008977a 	slli	r4,r22,29
 8000d8c:	b02cd0fa 	srli	r22,r22,3
 8000d90:	9cc001cc 	andi	r19,r19,7
 8000d94:	98800c04 	addi	r2,r19,48
 8000d98:	843fffc4 	addi	r16,r16,-1
 8000d9c:	20e6b03a 	or	r19,r4,r3
 8000da0:	80800005 	stb	r2,0(r16)
 8000da4:	9d86b03a 	or	r3,r19,r22
 8000da8:	183ff61e 	bne	r3,zero,8000d84 <__alt_data_end+0xff000d84>
 8000dac:	90c0004c 	andi	r3,r18,1
 8000db0:	18013b26 	beq	r3,zero,80012a0 <___vfprintf_internal_r+0xbdc>
 8000db4:	10803fcc 	andi	r2,r2,255
 8000db8:	1080201c 	xori	r2,r2,128
 8000dbc:	10bfe004 	addi	r2,r2,-128
 8000dc0:	00c00c04 	movi	r3,48
 8000dc4:	10c13626 	beq	r2,r3,80012a0 <___vfprintf_internal_r+0xbdc>
 8000dc8:	80ffffc5 	stb	r3,-1(r16)
 8000dcc:	d8c02817 	ldw	r3,160(sp)
 8000dd0:	80bfffc4 	addi	r2,r16,-1
 8000dd4:	1021883a 	mov	r16,r2
 8000dd8:	1887c83a 	sub	r3,r3,r2
 8000ddc:	d8c02e15 	stw	r3,184(sp)
 8000de0:	d8802e17 	ldw	r2,184(sp)
 8000de4:	d9002917 	ldw	r4,164(sp)
 8000de8:	1100010e 	bge	r2,r4,8000df0 <___vfprintf_internal_r+0x72c>
 8000dec:	2005883a 	mov	r2,r4
 8000df0:	d8802a15 	stw	r2,168(sp)
 8000df4:	d8003215 	stw	zero,200(sp)
 8000df8:	e7003fcc 	andi	fp,fp,255
 8000dfc:	e700201c 	xori	fp,fp,128
 8000e00:	e73fe004 	addi	fp,fp,-128
 8000e04:	e0000326 	beq	fp,zero,8000e14 <___vfprintf_internal_r+0x750>
 8000e08:	d8c02a17 	ldw	r3,168(sp)
 8000e0c:	18c00044 	addi	r3,r3,1
 8000e10:	d8c02a15 	stw	r3,168(sp)
 8000e14:	90c0008c 	andi	r3,r18,2
 8000e18:	d8c02b15 	stw	r3,172(sp)
 8000e1c:	18000326 	beq	r3,zero,8000e2c <___vfprintf_internal_r+0x768>
 8000e20:	d8c02a17 	ldw	r3,168(sp)
 8000e24:	18c00084 	addi	r3,r3,2
 8000e28:	d8c02a15 	stw	r3,168(sp)
 8000e2c:	90c0210c 	andi	r3,r18,132
 8000e30:	d8c03015 	stw	r3,192(sp)
 8000e34:	1801a31e 	bne	r3,zero,80014c4 <___vfprintf_internal_r+0xe00>
 8000e38:	d9003117 	ldw	r4,196(sp)
 8000e3c:	d8c02a17 	ldw	r3,168(sp)
 8000e40:	20e7c83a 	sub	r19,r4,r3
 8000e44:	04c19f0e 	bge	zero,r19,80014c4 <___vfprintf_internal_r+0xe00>
 8000e48:	02400404 	movi	r9,16
 8000e4c:	d8c02017 	ldw	r3,128(sp)
 8000e50:	d8801f17 	ldw	r2,124(sp)
 8000e54:	4cc50d0e 	bge	r9,r19,800228c <___vfprintf_internal_r+0x1bc8>
 8000e58:	01420074 	movhi	r5,2049
 8000e5c:	2945f984 	addi	r5,r5,6118
 8000e60:	dc403b15 	stw	r17,236(sp)
 8000e64:	d9403515 	stw	r5,212(sp)
 8000e68:	9823883a 	mov	r17,r19
 8000e6c:	482d883a 	mov	r22,r9
 8000e70:	9027883a 	mov	r19,r18
 8000e74:	070001c4 	movi	fp,7
 8000e78:	8025883a 	mov	r18,r16
 8000e7c:	dc002c17 	ldw	r16,176(sp)
 8000e80:	00000306 	br	8000e90 <___vfprintf_internal_r+0x7cc>
 8000e84:	8c7ffc04 	addi	r17,r17,-16
 8000e88:	42000204 	addi	r8,r8,8
 8000e8c:	b440130e 	bge	r22,r17,8000edc <___vfprintf_internal_r+0x818>
 8000e90:	01020074 	movhi	r4,2049
 8000e94:	18c00404 	addi	r3,r3,16
 8000e98:	10800044 	addi	r2,r2,1
 8000e9c:	2105f984 	addi	r4,r4,6118
 8000ea0:	41000015 	stw	r4,0(r8)
 8000ea4:	45800115 	stw	r22,4(r8)
 8000ea8:	d8c02015 	stw	r3,128(sp)
 8000eac:	d8801f15 	stw	r2,124(sp)
 8000eb0:	e0bff40e 	bge	fp,r2,8000e84 <__alt_data_end+0xff000e84>
 8000eb4:	d9801e04 	addi	r6,sp,120
 8000eb8:	b80b883a 	mov	r5,r23
 8000ebc:	8009883a 	mov	r4,r16
 8000ec0:	8007cc00 	call	8007cc0 <__sprint_r>
 8000ec4:	103f011e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8000ec8:	8c7ffc04 	addi	r17,r17,-16
 8000ecc:	d8c02017 	ldw	r3,128(sp)
 8000ed0:	d8801f17 	ldw	r2,124(sp)
 8000ed4:	da000404 	addi	r8,sp,16
 8000ed8:	b47fed16 	blt	r22,r17,8000e90 <__alt_data_end+0xff000e90>
 8000edc:	9021883a 	mov	r16,r18
 8000ee0:	9825883a 	mov	r18,r19
 8000ee4:	8827883a 	mov	r19,r17
 8000ee8:	dc403b17 	ldw	r17,236(sp)
 8000eec:	d9403517 	ldw	r5,212(sp)
 8000ef0:	98c7883a 	add	r3,r19,r3
 8000ef4:	10800044 	addi	r2,r2,1
 8000ef8:	41400015 	stw	r5,0(r8)
 8000efc:	44c00115 	stw	r19,4(r8)
 8000f00:	d8c02015 	stw	r3,128(sp)
 8000f04:	d8801f15 	stw	r2,124(sp)
 8000f08:	010001c4 	movi	r4,7
 8000f0c:	2082a316 	blt	r4,r2,800199c <___vfprintf_internal_r+0x12d8>
 8000f10:	df002787 	ldb	fp,158(sp)
 8000f14:	42000204 	addi	r8,r8,8
 8000f18:	e0000c26 	beq	fp,zero,8000f4c <___vfprintf_internal_r+0x888>
 8000f1c:	d8801f17 	ldw	r2,124(sp)
 8000f20:	d9002784 	addi	r4,sp,158
 8000f24:	18c00044 	addi	r3,r3,1
 8000f28:	10800044 	addi	r2,r2,1
 8000f2c:	41000015 	stw	r4,0(r8)
 8000f30:	01000044 	movi	r4,1
 8000f34:	41000115 	stw	r4,4(r8)
 8000f38:	d8c02015 	stw	r3,128(sp)
 8000f3c:	d8801f15 	stw	r2,124(sp)
 8000f40:	010001c4 	movi	r4,7
 8000f44:	20823c16 	blt	r4,r2,8001838 <___vfprintf_internal_r+0x1174>
 8000f48:	42000204 	addi	r8,r8,8
 8000f4c:	d8802b17 	ldw	r2,172(sp)
 8000f50:	10000c26 	beq	r2,zero,8000f84 <___vfprintf_internal_r+0x8c0>
 8000f54:	d8801f17 	ldw	r2,124(sp)
 8000f58:	d9002704 	addi	r4,sp,156
 8000f5c:	18c00084 	addi	r3,r3,2
 8000f60:	10800044 	addi	r2,r2,1
 8000f64:	41000015 	stw	r4,0(r8)
 8000f68:	01000084 	movi	r4,2
 8000f6c:	41000115 	stw	r4,4(r8)
 8000f70:	d8c02015 	stw	r3,128(sp)
 8000f74:	d8801f15 	stw	r2,124(sp)
 8000f78:	010001c4 	movi	r4,7
 8000f7c:	20823616 	blt	r4,r2,8001858 <___vfprintf_internal_r+0x1194>
 8000f80:	42000204 	addi	r8,r8,8
 8000f84:	d9003017 	ldw	r4,192(sp)
 8000f88:	00802004 	movi	r2,128
 8000f8c:	20819926 	beq	r4,r2,80015f4 <___vfprintf_internal_r+0xf30>
 8000f90:	d9402917 	ldw	r5,164(sp)
 8000f94:	d8802e17 	ldw	r2,184(sp)
 8000f98:	28adc83a 	sub	r22,r5,r2
 8000f9c:	0580310e 	bge	zero,r22,8001064 <___vfprintf_internal_r+0x9a0>
 8000fa0:	07000404 	movi	fp,16
 8000fa4:	d8801f17 	ldw	r2,124(sp)
 8000fa8:	e584140e 	bge	fp,r22,8001ffc <___vfprintf_internal_r+0x1938>
 8000fac:	01420074 	movhi	r5,2049
 8000fb0:	2945f584 	addi	r5,r5,6102
 8000fb4:	dc402915 	stw	r17,164(sp)
 8000fb8:	d9402b15 	stw	r5,172(sp)
 8000fbc:	b023883a 	mov	r17,r22
 8000fc0:	04c001c4 	movi	r19,7
 8000fc4:	a82d883a 	mov	r22,r21
 8000fc8:	902b883a 	mov	r21,r18
 8000fcc:	8025883a 	mov	r18,r16
 8000fd0:	dc002c17 	ldw	r16,176(sp)
 8000fd4:	00000306 	br	8000fe4 <___vfprintf_internal_r+0x920>
 8000fd8:	8c7ffc04 	addi	r17,r17,-16
 8000fdc:	42000204 	addi	r8,r8,8
 8000fe0:	e440110e 	bge	fp,r17,8001028 <___vfprintf_internal_r+0x964>
 8000fe4:	18c00404 	addi	r3,r3,16
 8000fe8:	10800044 	addi	r2,r2,1
 8000fec:	45000015 	stw	r20,0(r8)
 8000ff0:	47000115 	stw	fp,4(r8)
 8000ff4:	d8c02015 	stw	r3,128(sp)
 8000ff8:	d8801f15 	stw	r2,124(sp)
 8000ffc:	98bff60e 	bge	r19,r2,8000fd8 <__alt_data_end+0xff000fd8>
 8001000:	d9801e04 	addi	r6,sp,120
 8001004:	b80b883a 	mov	r5,r23
 8001008:	8009883a 	mov	r4,r16
 800100c:	8007cc00 	call	8007cc0 <__sprint_r>
 8001010:	103eae1e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8001014:	8c7ffc04 	addi	r17,r17,-16
 8001018:	d8c02017 	ldw	r3,128(sp)
 800101c:	d8801f17 	ldw	r2,124(sp)
 8001020:	da000404 	addi	r8,sp,16
 8001024:	e47fef16 	blt	fp,r17,8000fe4 <__alt_data_end+0xff000fe4>
 8001028:	9021883a 	mov	r16,r18
 800102c:	a825883a 	mov	r18,r21
 8001030:	b02b883a 	mov	r21,r22
 8001034:	882d883a 	mov	r22,r17
 8001038:	dc402917 	ldw	r17,164(sp)
 800103c:	d9002b17 	ldw	r4,172(sp)
 8001040:	1d87883a 	add	r3,r3,r22
 8001044:	10800044 	addi	r2,r2,1
 8001048:	41000015 	stw	r4,0(r8)
 800104c:	45800115 	stw	r22,4(r8)
 8001050:	d8c02015 	stw	r3,128(sp)
 8001054:	d8801f15 	stw	r2,124(sp)
 8001058:	010001c4 	movi	r4,7
 800105c:	2081ee16 	blt	r4,r2,8001818 <___vfprintf_internal_r+0x1154>
 8001060:	42000204 	addi	r8,r8,8
 8001064:	9080400c 	andi	r2,r18,256
 8001068:	1001181e 	bne	r2,zero,80014cc <___vfprintf_internal_r+0xe08>
 800106c:	d9402e17 	ldw	r5,184(sp)
 8001070:	d8801f17 	ldw	r2,124(sp)
 8001074:	44000015 	stw	r16,0(r8)
 8001078:	1947883a 	add	r3,r3,r5
 800107c:	10800044 	addi	r2,r2,1
 8001080:	41400115 	stw	r5,4(r8)
 8001084:	d8c02015 	stw	r3,128(sp)
 8001088:	d8801f15 	stw	r2,124(sp)
 800108c:	010001c4 	movi	r4,7
 8001090:	2081d316 	blt	r4,r2,80017e0 <___vfprintf_internal_r+0x111c>
 8001094:	42000204 	addi	r8,r8,8
 8001098:	9480010c 	andi	r18,r18,4
 800109c:	90003226 	beq	r18,zero,8001168 <___vfprintf_internal_r+0xaa4>
 80010a0:	d9403117 	ldw	r5,196(sp)
 80010a4:	d8802a17 	ldw	r2,168(sp)
 80010a8:	28a1c83a 	sub	r16,r5,r2
 80010ac:	04002e0e 	bge	zero,r16,8001168 <___vfprintf_internal_r+0xaa4>
 80010b0:	04400404 	movi	r17,16
 80010b4:	d8801f17 	ldw	r2,124(sp)
 80010b8:	8c04a20e 	bge	r17,r16,8002344 <___vfprintf_internal_r+0x1c80>
 80010bc:	01420074 	movhi	r5,2049
 80010c0:	2945f984 	addi	r5,r5,6118
 80010c4:	d9403515 	stw	r5,212(sp)
 80010c8:	048001c4 	movi	r18,7
 80010cc:	dcc02c17 	ldw	r19,176(sp)
 80010d0:	00000306 	br	80010e0 <___vfprintf_internal_r+0xa1c>
 80010d4:	843ffc04 	addi	r16,r16,-16
 80010d8:	42000204 	addi	r8,r8,8
 80010dc:	8c00130e 	bge	r17,r16,800112c <___vfprintf_internal_r+0xa68>
 80010e0:	01020074 	movhi	r4,2049
 80010e4:	18c00404 	addi	r3,r3,16
 80010e8:	10800044 	addi	r2,r2,1
 80010ec:	2105f984 	addi	r4,r4,6118
 80010f0:	41000015 	stw	r4,0(r8)
 80010f4:	44400115 	stw	r17,4(r8)
 80010f8:	d8c02015 	stw	r3,128(sp)
 80010fc:	d8801f15 	stw	r2,124(sp)
 8001100:	90bff40e 	bge	r18,r2,80010d4 <__alt_data_end+0xff0010d4>
 8001104:	d9801e04 	addi	r6,sp,120
 8001108:	b80b883a 	mov	r5,r23
 800110c:	9809883a 	mov	r4,r19
 8001110:	8007cc00 	call	8007cc0 <__sprint_r>
 8001114:	103e6d1e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8001118:	843ffc04 	addi	r16,r16,-16
 800111c:	d8c02017 	ldw	r3,128(sp)
 8001120:	d8801f17 	ldw	r2,124(sp)
 8001124:	da000404 	addi	r8,sp,16
 8001128:	8c3fed16 	blt	r17,r16,80010e0 <__alt_data_end+0xff0010e0>
 800112c:	d9403517 	ldw	r5,212(sp)
 8001130:	1c07883a 	add	r3,r3,r16
 8001134:	10800044 	addi	r2,r2,1
 8001138:	41400015 	stw	r5,0(r8)
 800113c:	44000115 	stw	r16,4(r8)
 8001140:	d8c02015 	stw	r3,128(sp)
 8001144:	d8801f15 	stw	r2,124(sp)
 8001148:	010001c4 	movi	r4,7
 800114c:	2080060e 	bge	r4,r2,8001168 <___vfprintf_internal_r+0xaa4>
 8001150:	d9002c17 	ldw	r4,176(sp)
 8001154:	d9801e04 	addi	r6,sp,120
 8001158:	b80b883a 	mov	r5,r23
 800115c:	8007cc00 	call	8007cc0 <__sprint_r>
 8001160:	103e5a1e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8001164:	d8c02017 	ldw	r3,128(sp)
 8001168:	d8803117 	ldw	r2,196(sp)
 800116c:	d9002a17 	ldw	r4,168(sp)
 8001170:	1100010e 	bge	r2,r4,8001178 <___vfprintf_internal_r+0xab4>
 8001174:	2005883a 	mov	r2,r4
 8001178:	d9402f17 	ldw	r5,188(sp)
 800117c:	288b883a 	add	r5,r5,r2
 8001180:	d9402f15 	stw	r5,188(sp)
 8001184:	18019e1e 	bne	r3,zero,8001800 <___vfprintf_internal_r+0x113c>
 8001188:	a8800007 	ldb	r2,0(r21)
 800118c:	d8001f15 	stw	zero,124(sp)
 8001190:	da000404 	addi	r8,sp,16
 8001194:	103d851e 	bne	r2,zero,80007ac <__alt_data_end+0xff0007ac>
 8001198:	a821883a 	mov	r16,r21
 800119c:	003d9b06 	br	800080c <__alt_data_end+0xff00080c>
 80011a0:	18c03fcc 	andi	r3,r3,255
 80011a4:	1805c11e 	bne	r3,zero,80028ac <___vfprintf_internal_r+0x21e8>
 80011a8:	94800414 	ori	r18,r18,16
 80011ac:	9080080c 	andi	r2,r18,32
 80011b0:	10020c26 	beq	r2,zero,80019e4 <___vfprintf_internal_r+0x1320>
 80011b4:	d8802d17 	ldw	r2,180(sp)
 80011b8:	d9002917 	ldw	r4,164(sp)
 80011bc:	d8002785 	stb	zero,158(sp)
 80011c0:	10c00204 	addi	r3,r2,8
 80011c4:	14c00017 	ldw	r19,0(r2)
 80011c8:	15800117 	ldw	r22,4(r2)
 80011cc:	20040f16 	blt	r4,zero,800220c <___vfprintf_internal_r+0x1b48>
 80011d0:	013fdfc4 	movi	r4,-129
 80011d4:	9d84b03a 	or	r2,r19,r22
 80011d8:	d8c02d15 	stw	r3,180(sp)
 80011dc:	9124703a 	and	r18,r18,r4
 80011e0:	0039883a 	mov	fp,zero
 80011e4:	103e891e 	bne	r2,zero,8000c0c <__alt_data_end+0xff000c0c>
 80011e8:	d9002917 	ldw	r4,164(sp)
 80011ec:	2002c11e 	bne	r4,zero,8001cf4 <___vfprintf_internal_r+0x1630>
 80011f0:	d8002915 	stw	zero,164(sp)
 80011f4:	d8002e15 	stw	zero,184(sp)
 80011f8:	dc001e04 	addi	r16,sp,120
 80011fc:	003ef806 	br	8000de0 <__alt_data_end+0xff000de0>
 8001200:	18c03fcc 	andi	r3,r3,255
 8001204:	18059d1e 	bne	r3,zero,800287c <___vfprintf_internal_r+0x21b8>
 8001208:	01420074 	movhi	r5,2049
 800120c:	2945e904 	addi	r5,r5,6052
 8001210:	d9403915 	stw	r5,228(sp)
 8001214:	9080080c 	andi	r2,r18,32
 8001218:	10005226 	beq	r2,zero,8001364 <___vfprintf_internal_r+0xca0>
 800121c:	d8802d17 	ldw	r2,180(sp)
 8001220:	14c00017 	ldw	r19,0(r2)
 8001224:	15800117 	ldw	r22,4(r2)
 8001228:	10800204 	addi	r2,r2,8
 800122c:	d8802d15 	stw	r2,180(sp)
 8001230:	9080004c 	andi	r2,r18,1
 8001234:	10019026 	beq	r2,zero,8001878 <___vfprintf_internal_r+0x11b4>
 8001238:	9d84b03a 	or	r2,r19,r22
 800123c:	10036926 	beq	r2,zero,8001fe4 <___vfprintf_internal_r+0x1920>
 8001240:	d8c02917 	ldw	r3,164(sp)
 8001244:	00800c04 	movi	r2,48
 8001248:	d8802705 	stb	r2,156(sp)
 800124c:	dc402745 	stb	r17,157(sp)
 8001250:	d8002785 	stb	zero,158(sp)
 8001254:	90800094 	ori	r2,r18,2
 8001258:	18045d16 	blt	r3,zero,80023d0 <___vfprintf_internal_r+0x1d0c>
 800125c:	00bfdfc4 	movi	r2,-129
 8001260:	90a4703a 	and	r18,r18,r2
 8001264:	94800094 	ori	r18,r18,2
 8001268:	0039883a 	mov	fp,zero
 800126c:	d9003917 	ldw	r4,228(sp)
 8001270:	dc001e04 	addi	r16,sp,120
 8001274:	988003cc 	andi	r2,r19,15
 8001278:	b006973a 	slli	r3,r22,28
 800127c:	2085883a 	add	r2,r4,r2
 8001280:	9826d13a 	srli	r19,r19,4
 8001284:	10800003 	ldbu	r2,0(r2)
 8001288:	b02cd13a 	srli	r22,r22,4
 800128c:	843fffc4 	addi	r16,r16,-1
 8001290:	1ce6b03a 	or	r19,r3,r19
 8001294:	80800005 	stb	r2,0(r16)
 8001298:	9d84b03a 	or	r2,r19,r22
 800129c:	103ff51e 	bne	r2,zero,8001274 <__alt_data_end+0xff001274>
 80012a0:	d8c02817 	ldw	r3,160(sp)
 80012a4:	1c07c83a 	sub	r3,r3,r16
 80012a8:	d8c02e15 	stw	r3,184(sp)
 80012ac:	003ecc06 	br	8000de0 <__alt_data_end+0xff000de0>
 80012b0:	18c03fcc 	andi	r3,r3,255
 80012b4:	183e9f26 	beq	r3,zero,8000d34 <__alt_data_end+0xff000d34>
 80012b8:	d9c02785 	stb	r7,158(sp)
 80012bc:	003e9d06 	br	8000d34 <__alt_data_end+0xff000d34>
 80012c0:	00c00044 	movi	r3,1
 80012c4:	01c00ac4 	movi	r7,43
 80012c8:	ac400007 	ldb	r17,0(r21)
 80012cc:	003d5e06 	br	8000848 <__alt_data_end+0xff000848>
 80012d0:	94800814 	ori	r18,r18,32
 80012d4:	ac400007 	ldb	r17,0(r21)
 80012d8:	003d5b06 	br	8000848 <__alt_data_end+0xff000848>
 80012dc:	d8c02d17 	ldw	r3,180(sp)
 80012e0:	d8002785 	stb	zero,158(sp)
 80012e4:	1c000017 	ldw	r16,0(r3)
 80012e8:	1cc00104 	addi	r19,r3,4
 80012ec:	80041926 	beq	r16,zero,8002354 <___vfprintf_internal_r+0x1c90>
 80012f0:	d9002917 	ldw	r4,164(sp)
 80012f4:	2003d016 	blt	r4,zero,8002238 <___vfprintf_internal_r+0x1b74>
 80012f8:	200d883a 	mov	r6,r4
 80012fc:	000b883a 	mov	r5,zero
 8001300:	8009883a 	mov	r4,r16
 8001304:	da003d15 	stw	r8,244(sp)
 8001308:	8005ed40 	call	8005ed4 <memchr>
 800130c:	da003d17 	ldw	r8,244(sp)
 8001310:	10045426 	beq	r2,zero,8002464 <___vfprintf_internal_r+0x1da0>
 8001314:	1405c83a 	sub	r2,r2,r16
 8001318:	d8802e15 	stw	r2,184(sp)
 800131c:	1003cc16 	blt	r2,zero,8002250 <___vfprintf_internal_r+0x1b8c>
 8001320:	df002783 	ldbu	fp,158(sp)
 8001324:	d8802a15 	stw	r2,168(sp)
 8001328:	dcc02d15 	stw	r19,180(sp)
 800132c:	d8002915 	stw	zero,164(sp)
 8001330:	d8003215 	stw	zero,200(sp)
 8001334:	003eb006 	br	8000df8 <__alt_data_end+0xff000df8>
 8001338:	18c03fcc 	andi	r3,r3,255
 800133c:	183f9b26 	beq	r3,zero,80011ac <__alt_data_end+0xff0011ac>
 8001340:	d9c02785 	stb	r7,158(sp)
 8001344:	003f9906 	br	80011ac <__alt_data_end+0xff0011ac>
 8001348:	18c03fcc 	andi	r3,r3,255
 800134c:	1805551e 	bne	r3,zero,80028a4 <___vfprintf_internal_r+0x21e0>
 8001350:	01420074 	movhi	r5,2049
 8001354:	2945ee04 	addi	r5,r5,6072
 8001358:	d9403915 	stw	r5,228(sp)
 800135c:	9080080c 	andi	r2,r18,32
 8001360:	103fae1e 	bne	r2,zero,800121c <__alt_data_end+0xff00121c>
 8001364:	9080040c 	andi	r2,r18,16
 8001368:	1002de26 	beq	r2,zero,8001ee4 <___vfprintf_internal_r+0x1820>
 800136c:	d8c02d17 	ldw	r3,180(sp)
 8001370:	002d883a 	mov	r22,zero
 8001374:	1cc00017 	ldw	r19,0(r3)
 8001378:	18c00104 	addi	r3,r3,4
 800137c:	d8c02d15 	stw	r3,180(sp)
 8001380:	003fab06 	br	8001230 <__alt_data_end+0xff001230>
 8001384:	38803fcc 	andi	r2,r7,255
 8001388:	1080201c 	xori	r2,r2,128
 800138c:	10bfe004 	addi	r2,r2,-128
 8001390:	1002d21e 	bne	r2,zero,8001edc <___vfprintf_internal_r+0x1818>
 8001394:	00c00044 	movi	r3,1
 8001398:	01c00804 	movi	r7,32
 800139c:	ac400007 	ldb	r17,0(r21)
 80013a0:	003d2906 	br	8000848 <__alt_data_end+0xff000848>
 80013a4:	94800054 	ori	r18,r18,1
 80013a8:	ac400007 	ldb	r17,0(r21)
 80013ac:	003d2606 	br	8000848 <__alt_data_end+0xff000848>
 80013b0:	18c03fcc 	andi	r3,r3,255
 80013b4:	183e0526 	beq	r3,zero,8000bcc <__alt_data_end+0xff000bcc>
 80013b8:	d9c02785 	stb	r7,158(sp)
 80013bc:	003e0306 	br	8000bcc <__alt_data_end+0xff000bcc>
 80013c0:	94801014 	ori	r18,r18,64
 80013c4:	ac400007 	ldb	r17,0(r21)
 80013c8:	003d1f06 	br	8000848 <__alt_data_end+0xff000848>
 80013cc:	ac400007 	ldb	r17,0(r21)
 80013d0:	8a438726 	beq	r17,r9,80021f0 <___vfprintf_internal_r+0x1b2c>
 80013d4:	94800414 	ori	r18,r18,16
 80013d8:	003d1b06 	br	8000848 <__alt_data_end+0xff000848>
 80013dc:	18c03fcc 	andi	r3,r3,255
 80013e0:	1805341e 	bne	r3,zero,80028b4 <___vfprintf_internal_r+0x21f0>
 80013e4:	9080080c 	andi	r2,r18,32
 80013e8:	1002cd26 	beq	r2,zero,8001f20 <___vfprintf_internal_r+0x185c>
 80013ec:	d9402d17 	ldw	r5,180(sp)
 80013f0:	d9002f17 	ldw	r4,188(sp)
 80013f4:	28800017 	ldw	r2,0(r5)
 80013f8:	2007d7fa 	srai	r3,r4,31
 80013fc:	29400104 	addi	r5,r5,4
 8001400:	d9402d15 	stw	r5,180(sp)
 8001404:	11000015 	stw	r4,0(r2)
 8001408:	10c00115 	stw	r3,4(r2)
 800140c:	003ce506 	br	80007a4 <__alt_data_end+0xff0007a4>
 8001410:	d8c02d17 	ldw	r3,180(sp)
 8001414:	d9002d17 	ldw	r4,180(sp)
 8001418:	d8002785 	stb	zero,158(sp)
 800141c:	18800017 	ldw	r2,0(r3)
 8001420:	21000104 	addi	r4,r4,4
 8001424:	00c00044 	movi	r3,1
 8001428:	d8c02a15 	stw	r3,168(sp)
 800142c:	d8801405 	stb	r2,80(sp)
 8001430:	d9002d15 	stw	r4,180(sp)
 8001434:	d8c02e15 	stw	r3,184(sp)
 8001438:	d8002915 	stw	zero,164(sp)
 800143c:	d8003215 	stw	zero,200(sp)
 8001440:	dc001404 	addi	r16,sp,80
 8001444:	0039883a 	mov	fp,zero
 8001448:	003e7206 	br	8000e14 <__alt_data_end+0xff000e14>
 800144c:	01020074 	movhi	r4,2049
 8001450:	2105ee04 	addi	r4,r4,6072
 8001454:	0039883a 	mov	fp,zero
 8001458:	d9003915 	stw	r4,228(sp)
 800145c:	04401e04 	movi	r17,120
 8001460:	003f8206 	br	800126c <__alt_data_end+0xff00126c>
 8001464:	18c03fcc 	andi	r3,r3,255
 8001468:	1805061e 	bne	r3,zero,8002884 <___vfprintf_internal_r+0x21c0>
 800146c:	883d9126 	beq	r17,zero,8000ab4 <__alt_data_end+0xff000ab4>
 8001470:	00c00044 	movi	r3,1
 8001474:	d8c02a15 	stw	r3,168(sp)
 8001478:	dc401405 	stb	r17,80(sp)
 800147c:	d8002785 	stb	zero,158(sp)
 8001480:	003fec06 	br	8001434 <__alt_data_end+0xff001434>
 8001484:	01420074 	movhi	r5,2049
 8001488:	2945ee04 	addi	r5,r5,6072
 800148c:	d9403915 	stw	r5,228(sp)
 8001490:	d8c02d15 	stw	r3,180(sp)
 8001494:	1025883a 	mov	r18,r2
 8001498:	04401e04 	movi	r17,120
 800149c:	9d84b03a 	or	r2,r19,r22
 80014a0:	1000fc1e 	bne	r2,zero,8001894 <___vfprintf_internal_r+0x11d0>
 80014a4:	0039883a 	mov	fp,zero
 80014a8:	00800084 	movi	r2,2
 80014ac:	10803fcc 	andi	r2,r2,255
 80014b0:	00c00044 	movi	r3,1
 80014b4:	10c20f26 	beq	r2,r3,8001cf4 <___vfprintf_internal_r+0x1630>
 80014b8:	00c00084 	movi	r3,2
 80014bc:	10fd6326 	beq	r2,r3,8000a4c <__alt_data_end+0xff000a4c>
 80014c0:	003e2d06 	br	8000d78 <__alt_data_end+0xff000d78>
 80014c4:	d8c02017 	ldw	r3,128(sp)
 80014c8:	003e9306 	br	8000f18 <__alt_data_end+0xff000f18>
 80014cc:	00801944 	movi	r2,101
 80014d0:	14407e0e 	bge	r2,r17,80016cc <___vfprintf_internal_r+0x1008>
 80014d4:	d9003617 	ldw	r4,216(sp)
 80014d8:	d9403817 	ldw	r5,224(sp)
 80014dc:	000d883a 	mov	r6,zero
 80014e0:	000f883a 	mov	r7,zero
 80014e4:	d8c03c15 	stw	r3,240(sp)
 80014e8:	da003d15 	stw	r8,244(sp)
 80014ec:	800b9380 	call	800b938 <__eqdf2>
 80014f0:	d8c03c17 	ldw	r3,240(sp)
 80014f4:	da003d17 	ldw	r8,244(sp)
 80014f8:	1000f71e 	bne	r2,zero,80018d8 <___vfprintf_internal_r+0x1214>
 80014fc:	d8801f17 	ldw	r2,124(sp)
 8001500:	01020074 	movhi	r4,2049
 8001504:	2105f504 	addi	r4,r4,6100
 8001508:	18c00044 	addi	r3,r3,1
 800150c:	10800044 	addi	r2,r2,1
 8001510:	41000015 	stw	r4,0(r8)
 8001514:	01000044 	movi	r4,1
 8001518:	41000115 	stw	r4,4(r8)
 800151c:	d8c02015 	stw	r3,128(sp)
 8001520:	d8801f15 	stw	r2,124(sp)
 8001524:	010001c4 	movi	r4,7
 8001528:	2082b816 	blt	r4,r2,800200c <___vfprintf_internal_r+0x1948>
 800152c:	42000204 	addi	r8,r8,8
 8001530:	d8802617 	ldw	r2,152(sp)
 8001534:	d9403317 	ldw	r5,204(sp)
 8001538:	11400216 	blt	r2,r5,8001544 <___vfprintf_internal_r+0xe80>
 800153c:	9080004c 	andi	r2,r18,1
 8001540:	103ed526 	beq	r2,zero,8001098 <__alt_data_end+0xff001098>
 8001544:	d8803717 	ldw	r2,220(sp)
 8001548:	d9003417 	ldw	r4,208(sp)
 800154c:	d9403717 	ldw	r5,220(sp)
 8001550:	1887883a 	add	r3,r3,r2
 8001554:	d8801f17 	ldw	r2,124(sp)
 8001558:	41000015 	stw	r4,0(r8)
 800155c:	41400115 	stw	r5,4(r8)
 8001560:	10800044 	addi	r2,r2,1
 8001564:	d8c02015 	stw	r3,128(sp)
 8001568:	d8801f15 	stw	r2,124(sp)
 800156c:	010001c4 	movi	r4,7
 8001570:	20832916 	blt	r4,r2,8002218 <___vfprintf_internal_r+0x1b54>
 8001574:	42000204 	addi	r8,r8,8
 8001578:	d8803317 	ldw	r2,204(sp)
 800157c:	143fffc4 	addi	r16,r2,-1
 8001580:	043ec50e 	bge	zero,r16,8001098 <__alt_data_end+0xff001098>
 8001584:	04400404 	movi	r17,16
 8001588:	d8801f17 	ldw	r2,124(sp)
 800158c:	8c00880e 	bge	r17,r16,80017b0 <___vfprintf_internal_r+0x10ec>
 8001590:	01420074 	movhi	r5,2049
 8001594:	2945f584 	addi	r5,r5,6102
 8001598:	d9402b15 	stw	r5,172(sp)
 800159c:	058001c4 	movi	r22,7
 80015a0:	dcc02c17 	ldw	r19,176(sp)
 80015a4:	00000306 	br	80015b4 <___vfprintf_internal_r+0xef0>
 80015a8:	42000204 	addi	r8,r8,8
 80015ac:	843ffc04 	addi	r16,r16,-16
 80015b0:	8c00820e 	bge	r17,r16,80017bc <___vfprintf_internal_r+0x10f8>
 80015b4:	18c00404 	addi	r3,r3,16
 80015b8:	10800044 	addi	r2,r2,1
 80015bc:	45000015 	stw	r20,0(r8)
 80015c0:	44400115 	stw	r17,4(r8)
 80015c4:	d8c02015 	stw	r3,128(sp)
 80015c8:	d8801f15 	stw	r2,124(sp)
 80015cc:	b0bff60e 	bge	r22,r2,80015a8 <__alt_data_end+0xff0015a8>
 80015d0:	d9801e04 	addi	r6,sp,120
 80015d4:	b80b883a 	mov	r5,r23
 80015d8:	9809883a 	mov	r4,r19
 80015dc:	8007cc00 	call	8007cc0 <__sprint_r>
 80015e0:	103d3a1e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 80015e4:	d8c02017 	ldw	r3,128(sp)
 80015e8:	d8801f17 	ldw	r2,124(sp)
 80015ec:	da000404 	addi	r8,sp,16
 80015f0:	003fee06 	br	80015ac <__alt_data_end+0xff0015ac>
 80015f4:	d9403117 	ldw	r5,196(sp)
 80015f8:	d8802a17 	ldw	r2,168(sp)
 80015fc:	28adc83a 	sub	r22,r5,r2
 8001600:	05be630e 	bge	zero,r22,8000f90 <__alt_data_end+0xff000f90>
 8001604:	07000404 	movi	fp,16
 8001608:	d8801f17 	ldw	r2,124(sp)
 800160c:	e5838f0e 	bge	fp,r22,800244c <___vfprintf_internal_r+0x1d88>
 8001610:	01420074 	movhi	r5,2049
 8001614:	2945f584 	addi	r5,r5,6102
 8001618:	dc403015 	stw	r17,192(sp)
 800161c:	d9402b15 	stw	r5,172(sp)
 8001620:	b023883a 	mov	r17,r22
 8001624:	04c001c4 	movi	r19,7
 8001628:	a82d883a 	mov	r22,r21
 800162c:	902b883a 	mov	r21,r18
 8001630:	8025883a 	mov	r18,r16
 8001634:	dc002c17 	ldw	r16,176(sp)
 8001638:	00000306 	br	8001648 <___vfprintf_internal_r+0xf84>
 800163c:	8c7ffc04 	addi	r17,r17,-16
 8001640:	42000204 	addi	r8,r8,8
 8001644:	e440110e 	bge	fp,r17,800168c <___vfprintf_internal_r+0xfc8>
 8001648:	18c00404 	addi	r3,r3,16
 800164c:	10800044 	addi	r2,r2,1
 8001650:	45000015 	stw	r20,0(r8)
 8001654:	47000115 	stw	fp,4(r8)
 8001658:	d8c02015 	stw	r3,128(sp)
 800165c:	d8801f15 	stw	r2,124(sp)
 8001660:	98bff60e 	bge	r19,r2,800163c <__alt_data_end+0xff00163c>
 8001664:	d9801e04 	addi	r6,sp,120
 8001668:	b80b883a 	mov	r5,r23
 800166c:	8009883a 	mov	r4,r16
 8001670:	8007cc00 	call	8007cc0 <__sprint_r>
 8001674:	103d151e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8001678:	8c7ffc04 	addi	r17,r17,-16
 800167c:	d8c02017 	ldw	r3,128(sp)
 8001680:	d8801f17 	ldw	r2,124(sp)
 8001684:	da000404 	addi	r8,sp,16
 8001688:	e47fef16 	blt	fp,r17,8001648 <__alt_data_end+0xff001648>
 800168c:	9021883a 	mov	r16,r18
 8001690:	a825883a 	mov	r18,r21
 8001694:	b02b883a 	mov	r21,r22
 8001698:	882d883a 	mov	r22,r17
 800169c:	dc403017 	ldw	r17,192(sp)
 80016a0:	d9002b17 	ldw	r4,172(sp)
 80016a4:	1d87883a 	add	r3,r3,r22
 80016a8:	10800044 	addi	r2,r2,1
 80016ac:	41000015 	stw	r4,0(r8)
 80016b0:	45800115 	stw	r22,4(r8)
 80016b4:	d8c02015 	stw	r3,128(sp)
 80016b8:	d8801f15 	stw	r2,124(sp)
 80016bc:	010001c4 	movi	r4,7
 80016c0:	20818e16 	blt	r4,r2,8001cfc <___vfprintf_internal_r+0x1638>
 80016c4:	42000204 	addi	r8,r8,8
 80016c8:	003e3106 	br	8000f90 <__alt_data_end+0xff000f90>
 80016cc:	d9403317 	ldw	r5,204(sp)
 80016d0:	00800044 	movi	r2,1
 80016d4:	18c00044 	addi	r3,r3,1
 80016d8:	1141530e 	bge	r2,r5,8001c28 <___vfprintf_internal_r+0x1564>
 80016dc:	dc401f17 	ldw	r17,124(sp)
 80016e0:	00800044 	movi	r2,1
 80016e4:	40800115 	stw	r2,4(r8)
 80016e8:	8c400044 	addi	r17,r17,1
 80016ec:	44000015 	stw	r16,0(r8)
 80016f0:	d8c02015 	stw	r3,128(sp)
 80016f4:	dc401f15 	stw	r17,124(sp)
 80016f8:	008001c4 	movi	r2,7
 80016fc:	14416b16 	blt	r2,r17,8001cac <___vfprintf_internal_r+0x15e8>
 8001700:	42000204 	addi	r8,r8,8
 8001704:	d8803717 	ldw	r2,220(sp)
 8001708:	d9003417 	ldw	r4,208(sp)
 800170c:	8c400044 	addi	r17,r17,1
 8001710:	10c7883a 	add	r3,r2,r3
 8001714:	40800115 	stw	r2,4(r8)
 8001718:	41000015 	stw	r4,0(r8)
 800171c:	d8c02015 	stw	r3,128(sp)
 8001720:	dc401f15 	stw	r17,124(sp)
 8001724:	008001c4 	movi	r2,7
 8001728:	14416916 	blt	r2,r17,8001cd0 <___vfprintf_internal_r+0x160c>
 800172c:	45800204 	addi	r22,r8,8
 8001730:	d9003617 	ldw	r4,216(sp)
 8001734:	d9403817 	ldw	r5,224(sp)
 8001738:	000d883a 	mov	r6,zero
 800173c:	000f883a 	mov	r7,zero
 8001740:	d8c03c15 	stw	r3,240(sp)
 8001744:	800b9380 	call	800b938 <__eqdf2>
 8001748:	d8c03c17 	ldw	r3,240(sp)
 800174c:	1000bc26 	beq	r2,zero,8001a40 <___vfprintf_internal_r+0x137c>
 8001750:	d9403317 	ldw	r5,204(sp)
 8001754:	84000044 	addi	r16,r16,1
 8001758:	8c400044 	addi	r17,r17,1
 800175c:	28bfffc4 	addi	r2,r5,-1
 8001760:	1887883a 	add	r3,r3,r2
 8001764:	b0800115 	stw	r2,4(r22)
 8001768:	b4000015 	stw	r16,0(r22)
 800176c:	d8c02015 	stw	r3,128(sp)
 8001770:	dc401f15 	stw	r17,124(sp)
 8001774:	008001c4 	movi	r2,7
 8001778:	14414316 	blt	r2,r17,8001c88 <___vfprintf_internal_r+0x15c4>
 800177c:	b5800204 	addi	r22,r22,8
 8001780:	d9003a17 	ldw	r4,232(sp)
 8001784:	df0022c4 	addi	fp,sp,139
 8001788:	8c400044 	addi	r17,r17,1
 800178c:	20c7883a 	add	r3,r4,r3
 8001790:	b7000015 	stw	fp,0(r22)
 8001794:	b1000115 	stw	r4,4(r22)
 8001798:	d8c02015 	stw	r3,128(sp)
 800179c:	dc401f15 	stw	r17,124(sp)
 80017a0:	008001c4 	movi	r2,7
 80017a4:	14400e16 	blt	r2,r17,80017e0 <___vfprintf_internal_r+0x111c>
 80017a8:	b2000204 	addi	r8,r22,8
 80017ac:	003e3a06 	br	8001098 <__alt_data_end+0xff001098>
 80017b0:	01020074 	movhi	r4,2049
 80017b4:	2105f584 	addi	r4,r4,6102
 80017b8:	d9002b15 	stw	r4,172(sp)
 80017bc:	d9002b17 	ldw	r4,172(sp)
 80017c0:	1c07883a 	add	r3,r3,r16
 80017c4:	44000115 	stw	r16,4(r8)
 80017c8:	41000015 	stw	r4,0(r8)
 80017cc:	10800044 	addi	r2,r2,1
 80017d0:	d8c02015 	stw	r3,128(sp)
 80017d4:	d8801f15 	stw	r2,124(sp)
 80017d8:	010001c4 	movi	r4,7
 80017dc:	20be2d0e 	bge	r4,r2,8001094 <__alt_data_end+0xff001094>
 80017e0:	d9002c17 	ldw	r4,176(sp)
 80017e4:	d9801e04 	addi	r6,sp,120
 80017e8:	b80b883a 	mov	r5,r23
 80017ec:	8007cc00 	call	8007cc0 <__sprint_r>
 80017f0:	103cb61e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 80017f4:	d8c02017 	ldw	r3,128(sp)
 80017f8:	da000404 	addi	r8,sp,16
 80017fc:	003e2606 	br	8001098 <__alt_data_end+0xff001098>
 8001800:	d9002c17 	ldw	r4,176(sp)
 8001804:	d9801e04 	addi	r6,sp,120
 8001808:	b80b883a 	mov	r5,r23
 800180c:	8007cc00 	call	8007cc0 <__sprint_r>
 8001810:	103e5d26 	beq	r2,zero,8001188 <__alt_data_end+0xff001188>
 8001814:	003cad06 	br	8000acc <__alt_data_end+0xff000acc>
 8001818:	d9002c17 	ldw	r4,176(sp)
 800181c:	d9801e04 	addi	r6,sp,120
 8001820:	b80b883a 	mov	r5,r23
 8001824:	8007cc00 	call	8007cc0 <__sprint_r>
 8001828:	103ca81e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 800182c:	d8c02017 	ldw	r3,128(sp)
 8001830:	da000404 	addi	r8,sp,16
 8001834:	003e0b06 	br	8001064 <__alt_data_end+0xff001064>
 8001838:	d9002c17 	ldw	r4,176(sp)
 800183c:	d9801e04 	addi	r6,sp,120
 8001840:	b80b883a 	mov	r5,r23
 8001844:	8007cc00 	call	8007cc0 <__sprint_r>
 8001848:	103ca01e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 800184c:	d8c02017 	ldw	r3,128(sp)
 8001850:	da000404 	addi	r8,sp,16
 8001854:	003dbd06 	br	8000f4c <__alt_data_end+0xff000f4c>
 8001858:	d9002c17 	ldw	r4,176(sp)
 800185c:	d9801e04 	addi	r6,sp,120
 8001860:	b80b883a 	mov	r5,r23
 8001864:	8007cc00 	call	8007cc0 <__sprint_r>
 8001868:	103c981e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 800186c:	d8c02017 	ldw	r3,128(sp)
 8001870:	da000404 	addi	r8,sp,16
 8001874:	003dc306 	br	8000f84 <__alt_data_end+0xff000f84>
 8001878:	d8802917 	ldw	r2,164(sp)
 800187c:	d8002785 	stb	zero,158(sp)
 8001880:	103f0616 	blt	r2,zero,800149c <__alt_data_end+0xff00149c>
 8001884:	00ffdfc4 	movi	r3,-129
 8001888:	9d84b03a 	or	r2,r19,r22
 800188c:	90e4703a 	and	r18,r18,r3
 8001890:	103c6b26 	beq	r2,zero,8000a40 <__alt_data_end+0xff000a40>
 8001894:	0039883a 	mov	fp,zero
 8001898:	003e7406 	br	800126c <__alt_data_end+0xff00126c>
 800189c:	9080040c 	andi	r2,r18,16
 80018a0:	1001b326 	beq	r2,zero,8001f70 <___vfprintf_internal_r+0x18ac>
 80018a4:	d9002d17 	ldw	r4,180(sp)
 80018a8:	d9402917 	ldw	r5,164(sp)
 80018ac:	d8002785 	stb	zero,158(sp)
 80018b0:	20800104 	addi	r2,r4,4
 80018b4:	24c00017 	ldw	r19,0(r4)
 80018b8:	002d883a 	mov	r22,zero
 80018bc:	2801b516 	blt	r5,zero,8001f94 <___vfprintf_internal_r+0x18d0>
 80018c0:	00ffdfc4 	movi	r3,-129
 80018c4:	d8802d15 	stw	r2,180(sp)
 80018c8:	90e4703a 	and	r18,r18,r3
 80018cc:	983d2726 	beq	r19,zero,8000d6c <__alt_data_end+0xff000d6c>
 80018d0:	0039883a 	mov	fp,zero
 80018d4:	003d2a06 	br	8000d80 <__alt_data_end+0xff000d80>
 80018d8:	dc402617 	ldw	r17,152(sp)
 80018dc:	0441d30e 	bge	zero,r17,800202c <___vfprintf_internal_r+0x1968>
 80018e0:	dc403217 	ldw	r17,200(sp)
 80018e4:	d8803317 	ldw	r2,204(sp)
 80018e8:	1440010e 	bge	r2,r17,80018f0 <___vfprintf_internal_r+0x122c>
 80018ec:	1023883a 	mov	r17,r2
 80018f0:	04400a0e 	bge	zero,r17,800191c <___vfprintf_internal_r+0x1258>
 80018f4:	d8801f17 	ldw	r2,124(sp)
 80018f8:	1c47883a 	add	r3,r3,r17
 80018fc:	44000015 	stw	r16,0(r8)
 8001900:	10800044 	addi	r2,r2,1
 8001904:	44400115 	stw	r17,4(r8)
 8001908:	d8c02015 	stw	r3,128(sp)
 800190c:	d8801f15 	stw	r2,124(sp)
 8001910:	010001c4 	movi	r4,7
 8001914:	20826516 	blt	r4,r2,80022ac <___vfprintf_internal_r+0x1be8>
 8001918:	42000204 	addi	r8,r8,8
 800191c:	88026116 	blt	r17,zero,80022a4 <___vfprintf_internal_r+0x1be0>
 8001920:	d9003217 	ldw	r4,200(sp)
 8001924:	2463c83a 	sub	r17,r4,r17
 8001928:	04407b0e 	bge	zero,r17,8001b18 <___vfprintf_internal_r+0x1454>
 800192c:	05800404 	movi	r22,16
 8001930:	d8801f17 	ldw	r2,124(sp)
 8001934:	b4419d0e 	bge	r22,r17,8001fac <___vfprintf_internal_r+0x18e8>
 8001938:	01020074 	movhi	r4,2049
 800193c:	2105f584 	addi	r4,r4,6102
 8001940:	d9002b15 	stw	r4,172(sp)
 8001944:	070001c4 	movi	fp,7
 8001948:	dcc02c17 	ldw	r19,176(sp)
 800194c:	00000306 	br	800195c <___vfprintf_internal_r+0x1298>
 8001950:	42000204 	addi	r8,r8,8
 8001954:	8c7ffc04 	addi	r17,r17,-16
 8001958:	b441970e 	bge	r22,r17,8001fb8 <___vfprintf_internal_r+0x18f4>
 800195c:	18c00404 	addi	r3,r3,16
 8001960:	10800044 	addi	r2,r2,1
 8001964:	45000015 	stw	r20,0(r8)
 8001968:	45800115 	stw	r22,4(r8)
 800196c:	d8c02015 	stw	r3,128(sp)
 8001970:	d8801f15 	stw	r2,124(sp)
 8001974:	e0bff60e 	bge	fp,r2,8001950 <__alt_data_end+0xff001950>
 8001978:	d9801e04 	addi	r6,sp,120
 800197c:	b80b883a 	mov	r5,r23
 8001980:	9809883a 	mov	r4,r19
 8001984:	8007cc00 	call	8007cc0 <__sprint_r>
 8001988:	103c501e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 800198c:	d8c02017 	ldw	r3,128(sp)
 8001990:	d8801f17 	ldw	r2,124(sp)
 8001994:	da000404 	addi	r8,sp,16
 8001998:	003fee06 	br	8001954 <__alt_data_end+0xff001954>
 800199c:	d9002c17 	ldw	r4,176(sp)
 80019a0:	d9801e04 	addi	r6,sp,120
 80019a4:	b80b883a 	mov	r5,r23
 80019a8:	8007cc00 	call	8007cc0 <__sprint_r>
 80019ac:	103c471e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 80019b0:	d8c02017 	ldw	r3,128(sp)
 80019b4:	df002787 	ldb	fp,158(sp)
 80019b8:	da000404 	addi	r8,sp,16
 80019bc:	003d5606 	br	8000f18 <__alt_data_end+0xff000f18>
 80019c0:	9080040c 	andi	r2,r18,16
 80019c4:	10016126 	beq	r2,zero,8001f4c <___vfprintf_internal_r+0x1888>
 80019c8:	d8802d17 	ldw	r2,180(sp)
 80019cc:	14c00017 	ldw	r19,0(r2)
 80019d0:	10800104 	addi	r2,r2,4
 80019d4:	d8802d15 	stw	r2,180(sp)
 80019d8:	982dd7fa 	srai	r22,r19,31
 80019dc:	b005883a 	mov	r2,r22
 80019e0:	003c8206 	br	8000bec <__alt_data_end+0xff000bec>
 80019e4:	9080040c 	andi	r2,r18,16
 80019e8:	10003526 	beq	r2,zero,8001ac0 <___vfprintf_internal_r+0x13fc>
 80019ec:	d9402d17 	ldw	r5,180(sp)
 80019f0:	d8c02917 	ldw	r3,164(sp)
 80019f4:	d8002785 	stb	zero,158(sp)
 80019f8:	28800104 	addi	r2,r5,4
 80019fc:	2cc00017 	ldw	r19,0(r5)
 8001a00:	002d883a 	mov	r22,zero
 8001a04:	18003716 	blt	r3,zero,8001ae4 <___vfprintf_internal_r+0x1420>
 8001a08:	00ffdfc4 	movi	r3,-129
 8001a0c:	d8802d15 	stw	r2,180(sp)
 8001a10:	90e4703a 	and	r18,r18,r3
 8001a14:	0039883a 	mov	fp,zero
 8001a18:	983df326 	beq	r19,zero,80011e8 <__alt_data_end+0xff0011e8>
 8001a1c:	00800244 	movi	r2,9
 8001a20:	14fc7b36 	bltu	r2,r19,8000c10 <__alt_data_end+0xff000c10>
 8001a24:	d8c02817 	ldw	r3,160(sp)
 8001a28:	dc001dc4 	addi	r16,sp,119
 8001a2c:	9cc00c04 	addi	r19,r19,48
 8001a30:	1c07c83a 	sub	r3,r3,r16
 8001a34:	dcc01dc5 	stb	r19,119(sp)
 8001a38:	d8c02e15 	stw	r3,184(sp)
 8001a3c:	003ce806 	br	8000de0 <__alt_data_end+0xff000de0>
 8001a40:	d8803317 	ldw	r2,204(sp)
 8001a44:	143fffc4 	addi	r16,r2,-1
 8001a48:	043f4d0e 	bge	zero,r16,8001780 <__alt_data_end+0xff001780>
 8001a4c:	07000404 	movi	fp,16
 8001a50:	e400810e 	bge	fp,r16,8001c58 <___vfprintf_internal_r+0x1594>
 8001a54:	01420074 	movhi	r5,2049
 8001a58:	2945f584 	addi	r5,r5,6102
 8001a5c:	d9402b15 	stw	r5,172(sp)
 8001a60:	01c001c4 	movi	r7,7
 8001a64:	dcc02c17 	ldw	r19,176(sp)
 8001a68:	00000306 	br	8001a78 <___vfprintf_internal_r+0x13b4>
 8001a6c:	b5800204 	addi	r22,r22,8
 8001a70:	843ffc04 	addi	r16,r16,-16
 8001a74:	e4007b0e 	bge	fp,r16,8001c64 <___vfprintf_internal_r+0x15a0>
 8001a78:	18c00404 	addi	r3,r3,16
 8001a7c:	8c400044 	addi	r17,r17,1
 8001a80:	b5000015 	stw	r20,0(r22)
 8001a84:	b7000115 	stw	fp,4(r22)
 8001a88:	d8c02015 	stw	r3,128(sp)
 8001a8c:	dc401f15 	stw	r17,124(sp)
 8001a90:	3c7ff60e 	bge	r7,r17,8001a6c <__alt_data_end+0xff001a6c>
 8001a94:	d9801e04 	addi	r6,sp,120
 8001a98:	b80b883a 	mov	r5,r23
 8001a9c:	9809883a 	mov	r4,r19
 8001aa0:	d9c03c15 	stw	r7,240(sp)
 8001aa4:	8007cc00 	call	8007cc0 <__sprint_r>
 8001aa8:	d9c03c17 	ldw	r7,240(sp)
 8001aac:	103c071e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8001ab0:	d8c02017 	ldw	r3,128(sp)
 8001ab4:	dc401f17 	ldw	r17,124(sp)
 8001ab8:	dd800404 	addi	r22,sp,16
 8001abc:	003fec06 	br	8001a70 <__alt_data_end+0xff001a70>
 8001ac0:	9080100c 	andi	r2,r18,64
 8001ac4:	d8002785 	stb	zero,158(sp)
 8001ac8:	10010e26 	beq	r2,zero,8001f04 <___vfprintf_internal_r+0x1840>
 8001acc:	d9002d17 	ldw	r4,180(sp)
 8001ad0:	d9402917 	ldw	r5,164(sp)
 8001ad4:	002d883a 	mov	r22,zero
 8001ad8:	20800104 	addi	r2,r4,4
 8001adc:	24c0000b 	ldhu	r19,0(r4)
 8001ae0:	283fc90e 	bge	r5,zero,8001a08 <__alt_data_end+0xff001a08>
 8001ae4:	d8802d15 	stw	r2,180(sp)
 8001ae8:	0039883a 	mov	fp,zero
 8001aec:	9d84b03a 	or	r2,r19,r22
 8001af0:	103c461e 	bne	r2,zero,8000c0c <__alt_data_end+0xff000c0c>
 8001af4:	00800044 	movi	r2,1
 8001af8:	003e6c06 	br	80014ac <__alt_data_end+0xff0014ac>
 8001afc:	d9002c17 	ldw	r4,176(sp)
 8001b00:	d9801e04 	addi	r6,sp,120
 8001b04:	b80b883a 	mov	r5,r23
 8001b08:	8007cc00 	call	8007cc0 <__sprint_r>
 8001b0c:	103bef1e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8001b10:	d8c02017 	ldw	r3,128(sp)
 8001b14:	da000404 	addi	r8,sp,16
 8001b18:	d9003217 	ldw	r4,200(sp)
 8001b1c:	d8802617 	ldw	r2,152(sp)
 8001b20:	d9403317 	ldw	r5,204(sp)
 8001b24:	8123883a 	add	r17,r16,r4
 8001b28:	11400216 	blt	r2,r5,8001b34 <___vfprintf_internal_r+0x1470>
 8001b2c:	9100004c 	andi	r4,r18,1
 8001b30:	20000d26 	beq	r4,zero,8001b68 <___vfprintf_internal_r+0x14a4>
 8001b34:	d9003717 	ldw	r4,220(sp)
 8001b38:	d9403417 	ldw	r5,208(sp)
 8001b3c:	1907883a 	add	r3,r3,r4
 8001b40:	d9001f17 	ldw	r4,124(sp)
 8001b44:	41400015 	stw	r5,0(r8)
 8001b48:	d9403717 	ldw	r5,220(sp)
 8001b4c:	21000044 	addi	r4,r4,1
 8001b50:	d8c02015 	stw	r3,128(sp)
 8001b54:	41400115 	stw	r5,4(r8)
 8001b58:	d9001f15 	stw	r4,124(sp)
 8001b5c:	014001c4 	movi	r5,7
 8001b60:	2901e816 	blt	r5,r4,8002304 <___vfprintf_internal_r+0x1c40>
 8001b64:	42000204 	addi	r8,r8,8
 8001b68:	d9003317 	ldw	r4,204(sp)
 8001b6c:	8121883a 	add	r16,r16,r4
 8001b70:	2085c83a 	sub	r2,r4,r2
 8001b74:	8461c83a 	sub	r16,r16,r17
 8001b78:	1400010e 	bge	r2,r16,8001b80 <___vfprintf_internal_r+0x14bc>
 8001b7c:	1021883a 	mov	r16,r2
 8001b80:	04000a0e 	bge	zero,r16,8001bac <___vfprintf_internal_r+0x14e8>
 8001b84:	d9001f17 	ldw	r4,124(sp)
 8001b88:	1c07883a 	add	r3,r3,r16
 8001b8c:	44400015 	stw	r17,0(r8)
 8001b90:	21000044 	addi	r4,r4,1
 8001b94:	44000115 	stw	r16,4(r8)
 8001b98:	d8c02015 	stw	r3,128(sp)
 8001b9c:	d9001f15 	stw	r4,124(sp)
 8001ba0:	014001c4 	movi	r5,7
 8001ba4:	2901fb16 	blt	r5,r4,8002394 <___vfprintf_internal_r+0x1cd0>
 8001ba8:	42000204 	addi	r8,r8,8
 8001bac:	8001f716 	blt	r16,zero,800238c <___vfprintf_internal_r+0x1cc8>
 8001bb0:	1421c83a 	sub	r16,r2,r16
 8001bb4:	043d380e 	bge	zero,r16,8001098 <__alt_data_end+0xff001098>
 8001bb8:	04400404 	movi	r17,16
 8001bbc:	d8801f17 	ldw	r2,124(sp)
 8001bc0:	8c3efb0e 	bge	r17,r16,80017b0 <__alt_data_end+0xff0017b0>
 8001bc4:	01420074 	movhi	r5,2049
 8001bc8:	2945f584 	addi	r5,r5,6102
 8001bcc:	d9402b15 	stw	r5,172(sp)
 8001bd0:	058001c4 	movi	r22,7
 8001bd4:	dcc02c17 	ldw	r19,176(sp)
 8001bd8:	00000306 	br	8001be8 <___vfprintf_internal_r+0x1524>
 8001bdc:	42000204 	addi	r8,r8,8
 8001be0:	843ffc04 	addi	r16,r16,-16
 8001be4:	8c3ef50e 	bge	r17,r16,80017bc <__alt_data_end+0xff0017bc>
 8001be8:	18c00404 	addi	r3,r3,16
 8001bec:	10800044 	addi	r2,r2,1
 8001bf0:	45000015 	stw	r20,0(r8)
 8001bf4:	44400115 	stw	r17,4(r8)
 8001bf8:	d8c02015 	stw	r3,128(sp)
 8001bfc:	d8801f15 	stw	r2,124(sp)
 8001c00:	b0bff60e 	bge	r22,r2,8001bdc <__alt_data_end+0xff001bdc>
 8001c04:	d9801e04 	addi	r6,sp,120
 8001c08:	b80b883a 	mov	r5,r23
 8001c0c:	9809883a 	mov	r4,r19
 8001c10:	8007cc00 	call	8007cc0 <__sprint_r>
 8001c14:	103bad1e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8001c18:	d8c02017 	ldw	r3,128(sp)
 8001c1c:	d8801f17 	ldw	r2,124(sp)
 8001c20:	da000404 	addi	r8,sp,16
 8001c24:	003fee06 	br	8001be0 <__alt_data_end+0xff001be0>
 8001c28:	9088703a 	and	r4,r18,r2
 8001c2c:	203eab1e 	bne	r4,zero,80016dc <__alt_data_end+0xff0016dc>
 8001c30:	dc401f17 	ldw	r17,124(sp)
 8001c34:	40800115 	stw	r2,4(r8)
 8001c38:	44000015 	stw	r16,0(r8)
 8001c3c:	8c400044 	addi	r17,r17,1
 8001c40:	d8c02015 	stw	r3,128(sp)
 8001c44:	dc401f15 	stw	r17,124(sp)
 8001c48:	008001c4 	movi	r2,7
 8001c4c:	14400e16 	blt	r2,r17,8001c88 <___vfprintf_internal_r+0x15c4>
 8001c50:	45800204 	addi	r22,r8,8
 8001c54:	003eca06 	br	8001780 <__alt_data_end+0xff001780>
 8001c58:	01020074 	movhi	r4,2049
 8001c5c:	2105f584 	addi	r4,r4,6102
 8001c60:	d9002b15 	stw	r4,172(sp)
 8001c64:	d8802b17 	ldw	r2,172(sp)
 8001c68:	1c07883a 	add	r3,r3,r16
 8001c6c:	8c400044 	addi	r17,r17,1
 8001c70:	b0800015 	stw	r2,0(r22)
 8001c74:	b4000115 	stw	r16,4(r22)
 8001c78:	d8c02015 	stw	r3,128(sp)
 8001c7c:	dc401f15 	stw	r17,124(sp)
 8001c80:	008001c4 	movi	r2,7
 8001c84:	147ebd0e 	bge	r2,r17,800177c <__alt_data_end+0xff00177c>
 8001c88:	d9002c17 	ldw	r4,176(sp)
 8001c8c:	d9801e04 	addi	r6,sp,120
 8001c90:	b80b883a 	mov	r5,r23
 8001c94:	8007cc00 	call	8007cc0 <__sprint_r>
 8001c98:	103b8c1e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8001c9c:	d8c02017 	ldw	r3,128(sp)
 8001ca0:	dc401f17 	ldw	r17,124(sp)
 8001ca4:	dd800404 	addi	r22,sp,16
 8001ca8:	003eb506 	br	8001780 <__alt_data_end+0xff001780>
 8001cac:	d9002c17 	ldw	r4,176(sp)
 8001cb0:	d9801e04 	addi	r6,sp,120
 8001cb4:	b80b883a 	mov	r5,r23
 8001cb8:	8007cc00 	call	8007cc0 <__sprint_r>
 8001cbc:	103b831e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8001cc0:	d8c02017 	ldw	r3,128(sp)
 8001cc4:	dc401f17 	ldw	r17,124(sp)
 8001cc8:	da000404 	addi	r8,sp,16
 8001ccc:	003e8d06 	br	8001704 <__alt_data_end+0xff001704>
 8001cd0:	d9002c17 	ldw	r4,176(sp)
 8001cd4:	d9801e04 	addi	r6,sp,120
 8001cd8:	b80b883a 	mov	r5,r23
 8001cdc:	8007cc00 	call	8007cc0 <__sprint_r>
 8001ce0:	103b7a1e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8001ce4:	d8c02017 	ldw	r3,128(sp)
 8001ce8:	dc401f17 	ldw	r17,124(sp)
 8001cec:	dd800404 	addi	r22,sp,16
 8001cf0:	003e8f06 	br	8001730 <__alt_data_end+0xff001730>
 8001cf4:	0027883a 	mov	r19,zero
 8001cf8:	003f4a06 	br	8001a24 <__alt_data_end+0xff001a24>
 8001cfc:	d9002c17 	ldw	r4,176(sp)
 8001d00:	d9801e04 	addi	r6,sp,120
 8001d04:	b80b883a 	mov	r5,r23
 8001d08:	8007cc00 	call	8007cc0 <__sprint_r>
 8001d0c:	103b6f1e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8001d10:	d8c02017 	ldw	r3,128(sp)
 8001d14:	da000404 	addi	r8,sp,16
 8001d18:	003c9d06 	br	8000f90 <__alt_data_end+0xff000f90>
 8001d1c:	04e7c83a 	sub	r19,zero,r19
 8001d20:	9804c03a 	cmpne	r2,r19,zero
 8001d24:	05adc83a 	sub	r22,zero,r22
 8001d28:	b0adc83a 	sub	r22,r22,r2
 8001d2c:	d8802917 	ldw	r2,164(sp)
 8001d30:	07000b44 	movi	fp,45
 8001d34:	df002785 	stb	fp,158(sp)
 8001d38:	10017b16 	blt	r2,zero,8002328 <___vfprintf_internal_r+0x1c64>
 8001d3c:	00bfdfc4 	movi	r2,-129
 8001d40:	90a4703a 	and	r18,r18,r2
 8001d44:	003bb106 	br	8000c0c <__alt_data_end+0xff000c0c>
 8001d48:	d9003617 	ldw	r4,216(sp)
 8001d4c:	d9403817 	ldw	r5,224(sp)
 8001d50:	da003d15 	stw	r8,244(sp)
 8001d54:	80078e40 	call	80078e4 <__fpclassifyd>
 8001d58:	da003d17 	ldw	r8,244(sp)
 8001d5c:	1000f026 	beq	r2,zero,8002120 <___vfprintf_internal_r+0x1a5c>
 8001d60:	d9002917 	ldw	r4,164(sp)
 8001d64:	05bff7c4 	movi	r22,-33
 8001d68:	00bfffc4 	movi	r2,-1
 8001d6c:	8dac703a 	and	r22,r17,r22
 8001d70:	20820026 	beq	r4,r2,8002574 <___vfprintf_internal_r+0x1eb0>
 8001d74:	008011c4 	movi	r2,71
 8001d78:	b081f726 	beq	r22,r2,8002558 <___vfprintf_internal_r+0x1e94>
 8001d7c:	d9003817 	ldw	r4,224(sp)
 8001d80:	90c04014 	ori	r3,r18,256
 8001d84:	d8c02b15 	stw	r3,172(sp)
 8001d88:	20021516 	blt	r4,zero,80025e0 <___vfprintf_internal_r+0x1f1c>
 8001d8c:	dcc03817 	ldw	r19,224(sp)
 8001d90:	d8002a05 	stb	zero,168(sp)
 8001d94:	00801984 	movi	r2,102
 8001d98:	8881f926 	beq	r17,r2,8002580 <___vfprintf_internal_r+0x1ebc>
 8001d9c:	00801184 	movi	r2,70
 8001da0:	88821c26 	beq	r17,r2,8002614 <___vfprintf_internal_r+0x1f50>
 8001da4:	00801144 	movi	r2,69
 8001da8:	b081ef26 	beq	r22,r2,8002568 <___vfprintf_internal_r+0x1ea4>
 8001dac:	d8c02917 	ldw	r3,164(sp)
 8001db0:	d8802104 	addi	r2,sp,132
 8001db4:	d8800315 	stw	r2,12(sp)
 8001db8:	d9403617 	ldw	r5,216(sp)
 8001dbc:	d8802504 	addi	r2,sp,148
 8001dc0:	d9002c17 	ldw	r4,176(sp)
 8001dc4:	d8800215 	stw	r2,8(sp)
 8001dc8:	d8802604 	addi	r2,sp,152
 8001dcc:	d8c00015 	stw	r3,0(sp)
 8001dd0:	d8800115 	stw	r2,4(sp)
 8001dd4:	01c00084 	movi	r7,2
 8001dd8:	980d883a 	mov	r6,r19
 8001ddc:	d8c03c15 	stw	r3,240(sp)
 8001de0:	da003d15 	stw	r8,244(sp)
 8001de4:	8002ce80 	call	8002ce8 <_dtoa_r>
 8001de8:	1021883a 	mov	r16,r2
 8001dec:	008019c4 	movi	r2,103
 8001df0:	d8c03c17 	ldw	r3,240(sp)
 8001df4:	da003d17 	ldw	r8,244(sp)
 8001df8:	88817126 	beq	r17,r2,80023c0 <___vfprintf_internal_r+0x1cfc>
 8001dfc:	008011c4 	movi	r2,71
 8001e00:	88829226 	beq	r17,r2,800284c <___vfprintf_internal_r+0x2188>
 8001e04:	80f9883a 	add	fp,r16,r3
 8001e08:	d9003617 	ldw	r4,216(sp)
 8001e0c:	000d883a 	mov	r6,zero
 8001e10:	000f883a 	mov	r7,zero
 8001e14:	980b883a 	mov	r5,r19
 8001e18:	da003d15 	stw	r8,244(sp)
 8001e1c:	800b9380 	call	800b938 <__eqdf2>
 8001e20:	da003d17 	ldw	r8,244(sp)
 8001e24:	10018d26 	beq	r2,zero,800245c <___vfprintf_internal_r+0x1d98>
 8001e28:	d8802117 	ldw	r2,132(sp)
 8001e2c:	1700062e 	bgeu	r2,fp,8001e48 <___vfprintf_internal_r+0x1784>
 8001e30:	01000c04 	movi	r4,48
 8001e34:	10c00044 	addi	r3,r2,1
 8001e38:	d8c02115 	stw	r3,132(sp)
 8001e3c:	11000005 	stb	r4,0(r2)
 8001e40:	d8802117 	ldw	r2,132(sp)
 8001e44:	173ffb36 	bltu	r2,fp,8001e34 <__alt_data_end+0xff001e34>
 8001e48:	1405c83a 	sub	r2,r2,r16
 8001e4c:	d8803315 	stw	r2,204(sp)
 8001e50:	008011c4 	movi	r2,71
 8001e54:	b0817626 	beq	r22,r2,8002430 <___vfprintf_internal_r+0x1d6c>
 8001e58:	00801944 	movi	r2,101
 8001e5c:	1442810e 	bge	r2,r17,8002864 <___vfprintf_internal_r+0x21a0>
 8001e60:	d8c02617 	ldw	r3,152(sp)
 8001e64:	00801984 	movi	r2,102
 8001e68:	d8c03215 	stw	r3,200(sp)
 8001e6c:	8881fe26 	beq	r17,r2,8002668 <___vfprintf_internal_r+0x1fa4>
 8001e70:	d8c03217 	ldw	r3,200(sp)
 8001e74:	d9003317 	ldw	r4,204(sp)
 8001e78:	1901dd16 	blt	r3,r4,80025f0 <___vfprintf_internal_r+0x1f2c>
 8001e7c:	9480004c 	andi	r18,r18,1
 8001e80:	90022b1e 	bne	r18,zero,8002730 <___vfprintf_internal_r+0x206c>
 8001e84:	1805883a 	mov	r2,r3
 8001e88:	18028016 	blt	r3,zero,800288c <___vfprintf_internal_r+0x21c8>
 8001e8c:	d8c03217 	ldw	r3,200(sp)
 8001e90:	044019c4 	movi	r17,103
 8001e94:	d8c02e15 	stw	r3,184(sp)
 8001e98:	df002a07 	ldb	fp,168(sp)
 8001e9c:	e001531e 	bne	fp,zero,80023ec <___vfprintf_internal_r+0x1d28>
 8001ea0:	df002783 	ldbu	fp,158(sp)
 8001ea4:	d8802a15 	stw	r2,168(sp)
 8001ea8:	dc802b17 	ldw	r18,172(sp)
 8001eac:	d8002915 	stw	zero,164(sp)
 8001eb0:	003bd106 	br	8000df8 <__alt_data_end+0xff000df8>
 8001eb4:	d8802d17 	ldw	r2,180(sp)
 8001eb8:	d8c02d17 	ldw	r3,180(sp)
 8001ebc:	d9002d17 	ldw	r4,180(sp)
 8001ec0:	10800017 	ldw	r2,0(r2)
 8001ec4:	18c00117 	ldw	r3,4(r3)
 8001ec8:	21000204 	addi	r4,r4,8
 8001ecc:	d8803615 	stw	r2,216(sp)
 8001ed0:	d8c03815 	stw	r3,224(sp)
 8001ed4:	d9002d15 	stw	r4,180(sp)
 8001ed8:	003b7506 	br	8000cb0 <__alt_data_end+0xff000cb0>
 8001edc:	ac400007 	ldb	r17,0(r21)
 8001ee0:	003a5906 	br	8000848 <__alt_data_end+0xff000848>
 8001ee4:	9080100c 	andi	r2,r18,64
 8001ee8:	1000a826 	beq	r2,zero,800218c <___vfprintf_internal_r+0x1ac8>
 8001eec:	d9002d17 	ldw	r4,180(sp)
 8001ef0:	002d883a 	mov	r22,zero
 8001ef4:	24c0000b 	ldhu	r19,0(r4)
 8001ef8:	21000104 	addi	r4,r4,4
 8001efc:	d9002d15 	stw	r4,180(sp)
 8001f00:	003ccb06 	br	8001230 <__alt_data_end+0xff001230>
 8001f04:	d8c02d17 	ldw	r3,180(sp)
 8001f08:	d9002917 	ldw	r4,164(sp)
 8001f0c:	002d883a 	mov	r22,zero
 8001f10:	18800104 	addi	r2,r3,4
 8001f14:	1cc00017 	ldw	r19,0(r3)
 8001f18:	203ebb0e 	bge	r4,zero,8001a08 <__alt_data_end+0xff001a08>
 8001f1c:	003ef106 	br	8001ae4 <__alt_data_end+0xff001ae4>
 8001f20:	9080040c 	andi	r2,r18,16
 8001f24:	1000921e 	bne	r2,zero,8002170 <___vfprintf_internal_r+0x1aac>
 8001f28:	9480100c 	andi	r18,r18,64
 8001f2c:	90013926 	beq	r18,zero,8002414 <___vfprintf_internal_r+0x1d50>
 8001f30:	d9002d17 	ldw	r4,180(sp)
 8001f34:	d9402f17 	ldw	r5,188(sp)
 8001f38:	20800017 	ldw	r2,0(r4)
 8001f3c:	21000104 	addi	r4,r4,4
 8001f40:	d9002d15 	stw	r4,180(sp)
 8001f44:	1140000d 	sth	r5,0(r2)
 8001f48:	003a1606 	br	80007a4 <__alt_data_end+0xff0007a4>
 8001f4c:	9080100c 	andi	r2,r18,64
 8001f50:	10008026 	beq	r2,zero,8002154 <___vfprintf_internal_r+0x1a90>
 8001f54:	d8c02d17 	ldw	r3,180(sp)
 8001f58:	1cc0000f 	ldh	r19,0(r3)
 8001f5c:	18c00104 	addi	r3,r3,4
 8001f60:	d8c02d15 	stw	r3,180(sp)
 8001f64:	982dd7fa 	srai	r22,r19,31
 8001f68:	b005883a 	mov	r2,r22
 8001f6c:	003b1f06 	br	8000bec <__alt_data_end+0xff000bec>
 8001f70:	9080100c 	andi	r2,r18,64
 8001f74:	d8002785 	stb	zero,158(sp)
 8001f78:	10008a1e 	bne	r2,zero,80021a4 <___vfprintf_internal_r+0x1ae0>
 8001f7c:	d9402d17 	ldw	r5,180(sp)
 8001f80:	d8c02917 	ldw	r3,164(sp)
 8001f84:	002d883a 	mov	r22,zero
 8001f88:	28800104 	addi	r2,r5,4
 8001f8c:	2cc00017 	ldw	r19,0(r5)
 8001f90:	183e4b0e 	bge	r3,zero,80018c0 <__alt_data_end+0xff0018c0>
 8001f94:	9d86b03a 	or	r3,r19,r22
 8001f98:	d8802d15 	stw	r2,180(sp)
 8001f9c:	183e4c1e 	bne	r3,zero,80018d0 <__alt_data_end+0xff0018d0>
 8001fa0:	0039883a 	mov	fp,zero
 8001fa4:	0005883a 	mov	r2,zero
 8001fa8:	003d4006 	br	80014ac <__alt_data_end+0xff0014ac>
 8001fac:	01420074 	movhi	r5,2049
 8001fb0:	2945f584 	addi	r5,r5,6102
 8001fb4:	d9402b15 	stw	r5,172(sp)
 8001fb8:	d9402b17 	ldw	r5,172(sp)
 8001fbc:	1c47883a 	add	r3,r3,r17
 8001fc0:	10800044 	addi	r2,r2,1
 8001fc4:	41400015 	stw	r5,0(r8)
 8001fc8:	44400115 	stw	r17,4(r8)
 8001fcc:	d8c02015 	stw	r3,128(sp)
 8001fd0:	d8801f15 	stw	r2,124(sp)
 8001fd4:	010001c4 	movi	r4,7
 8001fd8:	20bec816 	blt	r4,r2,8001afc <__alt_data_end+0xff001afc>
 8001fdc:	42000204 	addi	r8,r8,8
 8001fe0:	003ecd06 	br	8001b18 <__alt_data_end+0xff001b18>
 8001fe4:	d9002917 	ldw	r4,164(sp)
 8001fe8:	d8002785 	stb	zero,158(sp)
 8001fec:	203d2d16 	blt	r4,zero,80014a4 <__alt_data_end+0xff0014a4>
 8001ff0:	00bfdfc4 	movi	r2,-129
 8001ff4:	90a4703a 	and	r18,r18,r2
 8001ff8:	003a9106 	br	8000a40 <__alt_data_end+0xff000a40>
 8001ffc:	01020074 	movhi	r4,2049
 8002000:	2105f584 	addi	r4,r4,6102
 8002004:	d9002b15 	stw	r4,172(sp)
 8002008:	003c0c06 	br	800103c <__alt_data_end+0xff00103c>
 800200c:	d9002c17 	ldw	r4,176(sp)
 8002010:	d9801e04 	addi	r6,sp,120
 8002014:	b80b883a 	mov	r5,r23
 8002018:	8007cc00 	call	8007cc0 <__sprint_r>
 800201c:	103aab1e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8002020:	d8c02017 	ldw	r3,128(sp)
 8002024:	da000404 	addi	r8,sp,16
 8002028:	003d4106 	br	8001530 <__alt_data_end+0xff001530>
 800202c:	d8801f17 	ldw	r2,124(sp)
 8002030:	01420074 	movhi	r5,2049
 8002034:	01000044 	movi	r4,1
 8002038:	18c00044 	addi	r3,r3,1
 800203c:	10800044 	addi	r2,r2,1
 8002040:	2945f504 	addi	r5,r5,6100
 8002044:	41000115 	stw	r4,4(r8)
 8002048:	41400015 	stw	r5,0(r8)
 800204c:	d8c02015 	stw	r3,128(sp)
 8002050:	d8801f15 	stw	r2,124(sp)
 8002054:	010001c4 	movi	r4,7
 8002058:	20805c16 	blt	r4,r2,80021cc <___vfprintf_internal_r+0x1b08>
 800205c:	42000204 	addi	r8,r8,8
 8002060:	8800041e 	bne	r17,zero,8002074 <___vfprintf_internal_r+0x19b0>
 8002064:	d8803317 	ldw	r2,204(sp)
 8002068:	1000021e 	bne	r2,zero,8002074 <___vfprintf_internal_r+0x19b0>
 800206c:	9080004c 	andi	r2,r18,1
 8002070:	103c0926 	beq	r2,zero,8001098 <__alt_data_end+0xff001098>
 8002074:	d9003717 	ldw	r4,220(sp)
 8002078:	d8801f17 	ldw	r2,124(sp)
 800207c:	d9403417 	ldw	r5,208(sp)
 8002080:	20c7883a 	add	r3,r4,r3
 8002084:	10800044 	addi	r2,r2,1
 8002088:	41000115 	stw	r4,4(r8)
 800208c:	41400015 	stw	r5,0(r8)
 8002090:	d8c02015 	stw	r3,128(sp)
 8002094:	d8801f15 	stw	r2,124(sp)
 8002098:	010001c4 	movi	r4,7
 800209c:	20812116 	blt	r4,r2,8002524 <___vfprintf_internal_r+0x1e60>
 80020a0:	42000204 	addi	r8,r8,8
 80020a4:	0463c83a 	sub	r17,zero,r17
 80020a8:	0440730e 	bge	zero,r17,8002278 <___vfprintf_internal_r+0x1bb4>
 80020ac:	05800404 	movi	r22,16
 80020b0:	b440860e 	bge	r22,r17,80022cc <___vfprintf_internal_r+0x1c08>
 80020b4:	01420074 	movhi	r5,2049
 80020b8:	2945f584 	addi	r5,r5,6102
 80020bc:	d9402b15 	stw	r5,172(sp)
 80020c0:	070001c4 	movi	fp,7
 80020c4:	dcc02c17 	ldw	r19,176(sp)
 80020c8:	00000306 	br	80020d8 <___vfprintf_internal_r+0x1a14>
 80020cc:	42000204 	addi	r8,r8,8
 80020d0:	8c7ffc04 	addi	r17,r17,-16
 80020d4:	b440800e 	bge	r22,r17,80022d8 <___vfprintf_internal_r+0x1c14>
 80020d8:	18c00404 	addi	r3,r3,16
 80020dc:	10800044 	addi	r2,r2,1
 80020e0:	45000015 	stw	r20,0(r8)
 80020e4:	45800115 	stw	r22,4(r8)
 80020e8:	d8c02015 	stw	r3,128(sp)
 80020ec:	d8801f15 	stw	r2,124(sp)
 80020f0:	e0bff60e 	bge	fp,r2,80020cc <__alt_data_end+0xff0020cc>
 80020f4:	d9801e04 	addi	r6,sp,120
 80020f8:	b80b883a 	mov	r5,r23
 80020fc:	9809883a 	mov	r4,r19
 8002100:	8007cc00 	call	8007cc0 <__sprint_r>
 8002104:	103a711e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8002108:	d8c02017 	ldw	r3,128(sp)
 800210c:	d8801f17 	ldw	r2,124(sp)
 8002110:	da000404 	addi	r8,sp,16
 8002114:	003fee06 	br	80020d0 <__alt_data_end+0xff0020d0>
 8002118:	00bfffc4 	movi	r2,-1
 800211c:	003a6f06 	br	8000adc <__alt_data_end+0xff000adc>
 8002120:	008011c4 	movi	r2,71
 8002124:	1440b816 	blt	r2,r17,8002408 <___vfprintf_internal_r+0x1d44>
 8002128:	04020074 	movhi	r16,2049
 800212c:	8405e704 	addi	r16,r16,6044
 8002130:	00c000c4 	movi	r3,3
 8002134:	00bfdfc4 	movi	r2,-129
 8002138:	d8c02a15 	stw	r3,168(sp)
 800213c:	90a4703a 	and	r18,r18,r2
 8002140:	df002783 	ldbu	fp,158(sp)
 8002144:	d8c02e15 	stw	r3,184(sp)
 8002148:	d8002915 	stw	zero,164(sp)
 800214c:	d8003215 	stw	zero,200(sp)
 8002150:	003b2906 	br	8000df8 <__alt_data_end+0xff000df8>
 8002154:	d9002d17 	ldw	r4,180(sp)
 8002158:	24c00017 	ldw	r19,0(r4)
 800215c:	21000104 	addi	r4,r4,4
 8002160:	d9002d15 	stw	r4,180(sp)
 8002164:	982dd7fa 	srai	r22,r19,31
 8002168:	b005883a 	mov	r2,r22
 800216c:	003a9f06 	br	8000bec <__alt_data_end+0xff000bec>
 8002170:	d9402d17 	ldw	r5,180(sp)
 8002174:	d8c02f17 	ldw	r3,188(sp)
 8002178:	28800017 	ldw	r2,0(r5)
 800217c:	29400104 	addi	r5,r5,4
 8002180:	d9402d15 	stw	r5,180(sp)
 8002184:	10c00015 	stw	r3,0(r2)
 8002188:	00398606 	br	80007a4 <__alt_data_end+0xff0007a4>
 800218c:	d9402d17 	ldw	r5,180(sp)
 8002190:	002d883a 	mov	r22,zero
 8002194:	2cc00017 	ldw	r19,0(r5)
 8002198:	29400104 	addi	r5,r5,4
 800219c:	d9402d15 	stw	r5,180(sp)
 80021a0:	003c2306 	br	8001230 <__alt_data_end+0xff001230>
 80021a4:	d8c02d17 	ldw	r3,180(sp)
 80021a8:	d9002917 	ldw	r4,164(sp)
 80021ac:	002d883a 	mov	r22,zero
 80021b0:	18800104 	addi	r2,r3,4
 80021b4:	1cc0000b 	ldhu	r19,0(r3)
 80021b8:	203dc10e 	bge	r4,zero,80018c0 <__alt_data_end+0xff0018c0>
 80021bc:	003f7506 	br	8001f94 <__alt_data_end+0xff001f94>
 80021c0:	04020074 	movhi	r16,2049
 80021c4:	8405e504 	addi	r16,r16,6036
 80021c8:	003acc06 	br	8000cfc <__alt_data_end+0xff000cfc>
 80021cc:	d9002c17 	ldw	r4,176(sp)
 80021d0:	d9801e04 	addi	r6,sp,120
 80021d4:	b80b883a 	mov	r5,r23
 80021d8:	8007cc00 	call	8007cc0 <__sprint_r>
 80021dc:	103a3b1e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 80021e0:	dc402617 	ldw	r17,152(sp)
 80021e4:	d8c02017 	ldw	r3,128(sp)
 80021e8:	da000404 	addi	r8,sp,16
 80021ec:	003f9c06 	br	8002060 <__alt_data_end+0xff002060>
 80021f0:	ac400043 	ldbu	r17,1(r21)
 80021f4:	94800814 	ori	r18,r18,32
 80021f8:	ad400044 	addi	r21,r21,1
 80021fc:	8c403fcc 	andi	r17,r17,255
 8002200:	8c40201c 	xori	r17,r17,128
 8002204:	8c7fe004 	addi	r17,r17,-128
 8002208:	00398f06 	br	8000848 <__alt_data_end+0xff000848>
 800220c:	d8c02d15 	stw	r3,180(sp)
 8002210:	0039883a 	mov	fp,zero
 8002214:	003e3506 	br	8001aec <__alt_data_end+0xff001aec>
 8002218:	d9002c17 	ldw	r4,176(sp)
 800221c:	d9801e04 	addi	r6,sp,120
 8002220:	b80b883a 	mov	r5,r23
 8002224:	8007cc00 	call	8007cc0 <__sprint_r>
 8002228:	103a281e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 800222c:	d8c02017 	ldw	r3,128(sp)
 8002230:	da000404 	addi	r8,sp,16
 8002234:	003cd006 	br	8001578 <__alt_data_end+0xff001578>
 8002238:	8009883a 	mov	r4,r16
 800223c:	da003d15 	stw	r8,244(sp)
 8002240:	800062c0 	call	800062c <strlen>
 8002244:	d8802e15 	stw	r2,184(sp)
 8002248:	da003d17 	ldw	r8,244(sp)
 800224c:	103c340e 	bge	r2,zero,8001320 <__alt_data_end+0xff001320>
 8002250:	0005883a 	mov	r2,zero
 8002254:	003c3206 	br	8001320 <__alt_data_end+0xff001320>
 8002258:	d9002c17 	ldw	r4,176(sp)
 800225c:	d9801e04 	addi	r6,sp,120
 8002260:	b80b883a 	mov	r5,r23
 8002264:	8007cc00 	call	8007cc0 <__sprint_r>
 8002268:	103a181e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 800226c:	d8c02017 	ldw	r3,128(sp)
 8002270:	d8801f17 	ldw	r2,124(sp)
 8002274:	da000404 	addi	r8,sp,16
 8002278:	d9403317 	ldw	r5,204(sp)
 800227c:	10800044 	addi	r2,r2,1
 8002280:	44000015 	stw	r16,0(r8)
 8002284:	28c7883a 	add	r3,r5,r3
 8002288:	003b7d06 	br	8001080 <__alt_data_end+0xff001080>
 800228c:	01020074 	movhi	r4,2049
 8002290:	2105f984 	addi	r4,r4,6118
 8002294:	d9003515 	stw	r4,212(sp)
 8002298:	003b1406 	br	8000eec <__alt_data_end+0xff000eec>
 800229c:	013fffc4 	movi	r4,-1
 80022a0:	003a3506 	br	8000b78 <__alt_data_end+0xff000b78>
 80022a4:	0023883a 	mov	r17,zero
 80022a8:	003d9d06 	br	8001920 <__alt_data_end+0xff001920>
 80022ac:	d9002c17 	ldw	r4,176(sp)
 80022b0:	d9801e04 	addi	r6,sp,120
 80022b4:	b80b883a 	mov	r5,r23
 80022b8:	8007cc00 	call	8007cc0 <__sprint_r>
 80022bc:	103a031e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 80022c0:	d8c02017 	ldw	r3,128(sp)
 80022c4:	da000404 	addi	r8,sp,16
 80022c8:	003d9406 	br	800191c <__alt_data_end+0xff00191c>
 80022cc:	01020074 	movhi	r4,2049
 80022d0:	2105f584 	addi	r4,r4,6102
 80022d4:	d9002b15 	stw	r4,172(sp)
 80022d8:	d9002b17 	ldw	r4,172(sp)
 80022dc:	1c47883a 	add	r3,r3,r17
 80022e0:	10800044 	addi	r2,r2,1
 80022e4:	41000015 	stw	r4,0(r8)
 80022e8:	44400115 	stw	r17,4(r8)
 80022ec:	d8c02015 	stw	r3,128(sp)
 80022f0:	d8801f15 	stw	r2,124(sp)
 80022f4:	010001c4 	movi	r4,7
 80022f8:	20bfd716 	blt	r4,r2,8002258 <__alt_data_end+0xff002258>
 80022fc:	42000204 	addi	r8,r8,8
 8002300:	003fdd06 	br	8002278 <__alt_data_end+0xff002278>
 8002304:	d9002c17 	ldw	r4,176(sp)
 8002308:	d9801e04 	addi	r6,sp,120
 800230c:	b80b883a 	mov	r5,r23
 8002310:	8007cc00 	call	8007cc0 <__sprint_r>
 8002314:	1039ed1e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8002318:	d8802617 	ldw	r2,152(sp)
 800231c:	d8c02017 	ldw	r3,128(sp)
 8002320:	da000404 	addi	r8,sp,16
 8002324:	003e1006 	br	8001b68 <__alt_data_end+0xff001b68>
 8002328:	00800044 	movi	r2,1
 800232c:	10803fcc 	andi	r2,r2,255
 8002330:	00c00044 	movi	r3,1
 8002334:	10fa3526 	beq	r2,r3,8000c0c <__alt_data_end+0xff000c0c>
 8002338:	00c00084 	movi	r3,2
 800233c:	10fbcb26 	beq	r2,r3,800126c <__alt_data_end+0xff00126c>
 8002340:	003a8f06 	br	8000d80 <__alt_data_end+0xff000d80>
 8002344:	01020074 	movhi	r4,2049
 8002348:	2105f984 	addi	r4,r4,6118
 800234c:	d9003515 	stw	r4,212(sp)
 8002350:	003b7606 	br	800112c <__alt_data_end+0xff00112c>
 8002354:	d8802917 	ldw	r2,164(sp)
 8002358:	00c00184 	movi	r3,6
 800235c:	1880012e 	bgeu	r3,r2,8002364 <___vfprintf_internal_r+0x1ca0>
 8002360:	1805883a 	mov	r2,r3
 8002364:	d8802e15 	stw	r2,184(sp)
 8002368:	1000ef16 	blt	r2,zero,8002728 <___vfprintf_internal_r+0x2064>
 800236c:	04020074 	movhi	r16,2049
 8002370:	d8802a15 	stw	r2,168(sp)
 8002374:	dcc02d15 	stw	r19,180(sp)
 8002378:	d8002915 	stw	zero,164(sp)
 800237c:	d8003215 	stw	zero,200(sp)
 8002380:	8405f304 	addi	r16,r16,6092
 8002384:	0039883a 	mov	fp,zero
 8002388:	003aa206 	br	8000e14 <__alt_data_end+0xff000e14>
 800238c:	0021883a 	mov	r16,zero
 8002390:	003e0706 	br	8001bb0 <__alt_data_end+0xff001bb0>
 8002394:	d9002c17 	ldw	r4,176(sp)
 8002398:	d9801e04 	addi	r6,sp,120
 800239c:	b80b883a 	mov	r5,r23
 80023a0:	8007cc00 	call	8007cc0 <__sprint_r>
 80023a4:	1039c91e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 80023a8:	d8802617 	ldw	r2,152(sp)
 80023ac:	d9403317 	ldw	r5,204(sp)
 80023b0:	d8c02017 	ldw	r3,128(sp)
 80023b4:	da000404 	addi	r8,sp,16
 80023b8:	2885c83a 	sub	r2,r5,r2
 80023bc:	003dfb06 	br	8001bac <__alt_data_end+0xff001bac>
 80023c0:	9080004c 	andi	r2,r18,1
 80023c4:	103e8f1e 	bne	r2,zero,8001e04 <__alt_data_end+0xff001e04>
 80023c8:	d8802117 	ldw	r2,132(sp)
 80023cc:	003e9e06 	br	8001e48 <__alt_data_end+0xff001e48>
 80023d0:	1025883a 	mov	r18,r2
 80023d4:	0039883a 	mov	fp,zero
 80023d8:	00800084 	movi	r2,2
 80023dc:	003fd306 	br	800232c <__alt_data_end+0xff00232c>
 80023e0:	07000b44 	movi	fp,45
 80023e4:	df002785 	stb	fp,158(sp)
 80023e8:	003a4006 	br	8000cec <__alt_data_end+0xff000cec>
 80023ec:	00c00b44 	movi	r3,45
 80023f0:	d8c02785 	stb	r3,158(sp)
 80023f4:	d8802a15 	stw	r2,168(sp)
 80023f8:	dc802b17 	ldw	r18,172(sp)
 80023fc:	d8002915 	stw	zero,164(sp)
 8002400:	07000b44 	movi	fp,45
 8002404:	003a8006 	br	8000e08 <__alt_data_end+0xff000e08>
 8002408:	04020074 	movhi	r16,2049
 800240c:	8405e804 	addi	r16,r16,6048
 8002410:	003f4706 	br	8002130 <__alt_data_end+0xff002130>
 8002414:	d8c02d17 	ldw	r3,180(sp)
 8002418:	d9002f17 	ldw	r4,188(sp)
 800241c:	18800017 	ldw	r2,0(r3)
 8002420:	18c00104 	addi	r3,r3,4
 8002424:	d8c02d15 	stw	r3,180(sp)
 8002428:	11000015 	stw	r4,0(r2)
 800242c:	0038dd06 	br	80007a4 <__alt_data_end+0xff0007a4>
 8002430:	dd802617 	ldw	r22,152(sp)
 8002434:	00bfff44 	movi	r2,-3
 8002438:	b0801c16 	blt	r22,r2,80024ac <___vfprintf_internal_r+0x1de8>
 800243c:	d9402917 	ldw	r5,164(sp)
 8002440:	2d801a16 	blt	r5,r22,80024ac <___vfprintf_internal_r+0x1de8>
 8002444:	dd803215 	stw	r22,200(sp)
 8002448:	003e8906 	br	8001e70 <__alt_data_end+0xff001e70>
 800244c:	01020074 	movhi	r4,2049
 8002450:	2105f584 	addi	r4,r4,6102
 8002454:	d9002b15 	stw	r4,172(sp)
 8002458:	003c9106 	br	80016a0 <__alt_data_end+0xff0016a0>
 800245c:	e005883a 	mov	r2,fp
 8002460:	003e7906 	br	8001e48 <__alt_data_end+0xff001e48>
 8002464:	d9402917 	ldw	r5,164(sp)
 8002468:	df002783 	ldbu	fp,158(sp)
 800246c:	dcc02d15 	stw	r19,180(sp)
 8002470:	d9402a15 	stw	r5,168(sp)
 8002474:	d9402e15 	stw	r5,184(sp)
 8002478:	d8002915 	stw	zero,164(sp)
 800247c:	d8003215 	stw	zero,200(sp)
 8002480:	003a5d06 	br	8000df8 <__alt_data_end+0xff000df8>
 8002484:	9080004c 	andi	r2,r18,1
 8002488:	0039883a 	mov	fp,zero
 800248c:	10000426 	beq	r2,zero,80024a0 <___vfprintf_internal_r+0x1ddc>
 8002490:	00800c04 	movi	r2,48
 8002494:	dc001dc4 	addi	r16,sp,119
 8002498:	d8801dc5 	stb	r2,119(sp)
 800249c:	003b8006 	br	80012a0 <__alt_data_end+0xff0012a0>
 80024a0:	d8002e15 	stw	zero,184(sp)
 80024a4:	dc001e04 	addi	r16,sp,120
 80024a8:	003a4d06 	br	8000de0 <__alt_data_end+0xff000de0>
 80024ac:	8c7fff84 	addi	r17,r17,-2
 80024b0:	b5bfffc4 	addi	r22,r22,-1
 80024b4:	dd802615 	stw	r22,152(sp)
 80024b8:	dc4022c5 	stb	r17,139(sp)
 80024bc:	b000bf16 	blt	r22,zero,80027bc <___vfprintf_internal_r+0x20f8>
 80024c0:	00800ac4 	movi	r2,43
 80024c4:	d8802305 	stb	r2,140(sp)
 80024c8:	00800244 	movi	r2,9
 80024cc:	15807016 	blt	r2,r22,8002690 <___vfprintf_internal_r+0x1fcc>
 80024d0:	00800c04 	movi	r2,48
 80024d4:	b5800c04 	addi	r22,r22,48
 80024d8:	d8802345 	stb	r2,141(sp)
 80024dc:	dd802385 	stb	r22,142(sp)
 80024e0:	d88023c4 	addi	r2,sp,143
 80024e4:	df0022c4 	addi	fp,sp,139
 80024e8:	d8c03317 	ldw	r3,204(sp)
 80024ec:	1739c83a 	sub	fp,r2,fp
 80024f0:	d9003317 	ldw	r4,204(sp)
 80024f4:	e0c7883a 	add	r3,fp,r3
 80024f8:	df003a15 	stw	fp,232(sp)
 80024fc:	d8c02e15 	stw	r3,184(sp)
 8002500:	00800044 	movi	r2,1
 8002504:	1100b30e 	bge	r2,r4,80027d4 <___vfprintf_internal_r+0x2110>
 8002508:	d8c02e17 	ldw	r3,184(sp)
 800250c:	18c00044 	addi	r3,r3,1
 8002510:	d8c02e15 	stw	r3,184(sp)
 8002514:	1805883a 	mov	r2,r3
 8002518:	1800ac16 	blt	r3,zero,80027cc <___vfprintf_internal_r+0x2108>
 800251c:	d8003215 	stw	zero,200(sp)
 8002520:	003e5d06 	br	8001e98 <__alt_data_end+0xff001e98>
 8002524:	d9002c17 	ldw	r4,176(sp)
 8002528:	d9801e04 	addi	r6,sp,120
 800252c:	b80b883a 	mov	r5,r23
 8002530:	8007cc00 	call	8007cc0 <__sprint_r>
 8002534:	1039651e 	bne	r2,zero,8000acc <__alt_data_end+0xff000acc>
 8002538:	dc402617 	ldw	r17,152(sp)
 800253c:	d8c02017 	ldw	r3,128(sp)
 8002540:	d8801f17 	ldw	r2,124(sp)
 8002544:	da000404 	addi	r8,sp,16
 8002548:	003ed606 	br	80020a4 <__alt_data_end+0xff0020a4>
 800254c:	582b883a 	mov	r21,r11
 8002550:	d8002915 	stw	zero,164(sp)
 8002554:	0038bd06 	br	800084c <__alt_data_end+0xff00084c>
 8002558:	d8802917 	ldw	r2,164(sp)
 800255c:	103e071e 	bne	r2,zero,8001d7c <__alt_data_end+0xff001d7c>
 8002560:	dc002915 	stw	r16,164(sp)
 8002564:	003e0506 	br	8001d7c <__alt_data_end+0xff001d7c>
 8002568:	d9002917 	ldw	r4,164(sp)
 800256c:	20c00044 	addi	r3,r4,1
 8002570:	003e0f06 	br	8001db0 <__alt_data_end+0xff001db0>
 8002574:	01400184 	movi	r5,6
 8002578:	d9402915 	stw	r5,164(sp)
 800257c:	003dff06 	br	8001d7c <__alt_data_end+0xff001d7c>
 8002580:	d8802104 	addi	r2,sp,132
 8002584:	d8800315 	stw	r2,12(sp)
 8002588:	d8802504 	addi	r2,sp,148
 800258c:	d8800215 	stw	r2,8(sp)
 8002590:	d8802604 	addi	r2,sp,152
 8002594:	d8800115 	stw	r2,4(sp)
 8002598:	d8802917 	ldw	r2,164(sp)
 800259c:	d9403617 	ldw	r5,216(sp)
 80025a0:	d9002c17 	ldw	r4,176(sp)
 80025a4:	d8800015 	stw	r2,0(sp)
 80025a8:	01c000c4 	movi	r7,3
 80025ac:	980d883a 	mov	r6,r19
 80025b0:	da003d15 	stw	r8,244(sp)
 80025b4:	8002ce80 	call	8002ce8 <_dtoa_r>
 80025b8:	d8c02917 	ldw	r3,164(sp)
 80025bc:	da003d17 	ldw	r8,244(sp)
 80025c0:	1021883a 	mov	r16,r2
 80025c4:	10f9883a 	add	fp,r2,r3
 80025c8:	81000007 	ldb	r4,0(r16)
 80025cc:	00800c04 	movi	r2,48
 80025d0:	20805e26 	beq	r4,r2,800274c <___vfprintf_internal_r+0x2088>
 80025d4:	d8c02617 	ldw	r3,152(sp)
 80025d8:	e0f9883a 	add	fp,fp,r3
 80025dc:	003e0a06 	br	8001e08 <__alt_data_end+0xff001e08>
 80025e0:	00c00b44 	movi	r3,45
 80025e4:	24e0003c 	xorhi	r19,r4,32768
 80025e8:	d8c02a05 	stb	r3,168(sp)
 80025ec:	003de906 	br	8001d94 <__alt_data_end+0xff001d94>
 80025f0:	d8c03217 	ldw	r3,200(sp)
 80025f4:	00c07a0e 	bge	zero,r3,80027e0 <___vfprintf_internal_r+0x211c>
 80025f8:	00800044 	movi	r2,1
 80025fc:	d9003317 	ldw	r4,204(sp)
 8002600:	1105883a 	add	r2,r2,r4
 8002604:	d8802e15 	stw	r2,184(sp)
 8002608:	10004e16 	blt	r2,zero,8002744 <___vfprintf_internal_r+0x2080>
 800260c:	044019c4 	movi	r17,103
 8002610:	003e2106 	br	8001e98 <__alt_data_end+0xff001e98>
 8002614:	d9002917 	ldw	r4,164(sp)
 8002618:	d8802104 	addi	r2,sp,132
 800261c:	d8800315 	stw	r2,12(sp)
 8002620:	d9000015 	stw	r4,0(sp)
 8002624:	d8802504 	addi	r2,sp,148
 8002628:	d9403617 	ldw	r5,216(sp)
 800262c:	d9002c17 	ldw	r4,176(sp)
 8002630:	d8800215 	stw	r2,8(sp)
 8002634:	d8802604 	addi	r2,sp,152
 8002638:	d8800115 	stw	r2,4(sp)
 800263c:	01c000c4 	movi	r7,3
 8002640:	980d883a 	mov	r6,r19
 8002644:	da003d15 	stw	r8,244(sp)
 8002648:	8002ce80 	call	8002ce8 <_dtoa_r>
 800264c:	d8c02917 	ldw	r3,164(sp)
 8002650:	da003d17 	ldw	r8,244(sp)
 8002654:	1021883a 	mov	r16,r2
 8002658:	00801184 	movi	r2,70
 800265c:	80f9883a 	add	fp,r16,r3
 8002660:	88bfd926 	beq	r17,r2,80025c8 <__alt_data_end+0xff0025c8>
 8002664:	003de806 	br	8001e08 <__alt_data_end+0xff001e08>
 8002668:	d9002917 	ldw	r4,164(sp)
 800266c:	00c04d0e 	bge	zero,r3,80027a4 <___vfprintf_internal_r+0x20e0>
 8002670:	2000441e 	bne	r4,zero,8002784 <___vfprintf_internal_r+0x20c0>
 8002674:	9480004c 	andi	r18,r18,1
 8002678:	9000421e 	bne	r18,zero,8002784 <___vfprintf_internal_r+0x20c0>
 800267c:	1805883a 	mov	r2,r3
 8002680:	18007016 	blt	r3,zero,8002844 <___vfprintf_internal_r+0x2180>
 8002684:	d8c03217 	ldw	r3,200(sp)
 8002688:	d8c02e15 	stw	r3,184(sp)
 800268c:	003e0206 	br	8001e98 <__alt_data_end+0xff001e98>
 8002690:	df0022c4 	addi	fp,sp,139
 8002694:	dc002915 	stw	r16,164(sp)
 8002698:	4027883a 	mov	r19,r8
 800269c:	e021883a 	mov	r16,fp
 80026a0:	b009883a 	mov	r4,r22
 80026a4:	01400284 	movi	r5,10
 80026a8:	800a6740 	call	800a674 <__modsi3>
 80026ac:	10800c04 	addi	r2,r2,48
 80026b0:	843fffc4 	addi	r16,r16,-1
 80026b4:	b009883a 	mov	r4,r22
 80026b8:	01400284 	movi	r5,10
 80026bc:	80800005 	stb	r2,0(r16)
 80026c0:	800a5f00 	call	800a5f0 <__divsi3>
 80026c4:	102d883a 	mov	r22,r2
 80026c8:	00800244 	movi	r2,9
 80026cc:	15bff416 	blt	r2,r22,80026a0 <__alt_data_end+0xff0026a0>
 80026d0:	9811883a 	mov	r8,r19
 80026d4:	b0800c04 	addi	r2,r22,48
 80026d8:	8027883a 	mov	r19,r16
 80026dc:	997fffc4 	addi	r5,r19,-1
 80026e0:	98bfffc5 	stb	r2,-1(r19)
 80026e4:	dc002917 	ldw	r16,164(sp)
 80026e8:	2f006a2e 	bgeu	r5,fp,8002894 <___vfprintf_internal_r+0x21d0>
 80026ec:	d9c02384 	addi	r7,sp,142
 80026f0:	3ccfc83a 	sub	r7,r7,r19
 80026f4:	d9002344 	addi	r4,sp,141
 80026f8:	e1cf883a 	add	r7,fp,r7
 80026fc:	00000106 	br	8002704 <___vfprintf_internal_r+0x2040>
 8002700:	28800003 	ldbu	r2,0(r5)
 8002704:	20800005 	stb	r2,0(r4)
 8002708:	21000044 	addi	r4,r4,1
 800270c:	29400044 	addi	r5,r5,1
 8002710:	393ffb1e 	bne	r7,r4,8002700 <__alt_data_end+0xff002700>
 8002714:	d8802304 	addi	r2,sp,140
 8002718:	14c5c83a 	sub	r2,r2,r19
 800271c:	d8c02344 	addi	r3,sp,141
 8002720:	1885883a 	add	r2,r3,r2
 8002724:	003f7006 	br	80024e8 <__alt_data_end+0xff0024e8>
 8002728:	0005883a 	mov	r2,zero
 800272c:	003f0f06 	br	800236c <__alt_data_end+0xff00236c>
 8002730:	d8c03217 	ldw	r3,200(sp)
 8002734:	18c00044 	addi	r3,r3,1
 8002738:	d8c02e15 	stw	r3,184(sp)
 800273c:	1805883a 	mov	r2,r3
 8002740:	183fb20e 	bge	r3,zero,800260c <__alt_data_end+0xff00260c>
 8002744:	0005883a 	mov	r2,zero
 8002748:	003fb006 	br	800260c <__alt_data_end+0xff00260c>
 800274c:	d9003617 	ldw	r4,216(sp)
 8002750:	000d883a 	mov	r6,zero
 8002754:	000f883a 	mov	r7,zero
 8002758:	980b883a 	mov	r5,r19
 800275c:	d8c03c15 	stw	r3,240(sp)
 8002760:	da003d15 	stw	r8,244(sp)
 8002764:	800b9380 	call	800b938 <__eqdf2>
 8002768:	d8c03c17 	ldw	r3,240(sp)
 800276c:	da003d17 	ldw	r8,244(sp)
 8002770:	103f9826 	beq	r2,zero,80025d4 <__alt_data_end+0xff0025d4>
 8002774:	00800044 	movi	r2,1
 8002778:	10c7c83a 	sub	r3,r2,r3
 800277c:	d8c02615 	stw	r3,152(sp)
 8002780:	003f9506 	br	80025d8 <__alt_data_end+0xff0025d8>
 8002784:	d9002917 	ldw	r4,164(sp)
 8002788:	d8c03217 	ldw	r3,200(sp)
 800278c:	20800044 	addi	r2,r4,1
 8002790:	1885883a 	add	r2,r3,r2
 8002794:	d8802e15 	stw	r2,184(sp)
 8002798:	103dbf0e 	bge	r2,zero,8001e98 <__alt_data_end+0xff001e98>
 800279c:	0005883a 	mov	r2,zero
 80027a0:	003dbd06 	br	8001e98 <__alt_data_end+0xff001e98>
 80027a4:	2000211e 	bne	r4,zero,800282c <___vfprintf_internal_r+0x2168>
 80027a8:	9480004c 	andi	r18,r18,1
 80027ac:	90001f1e 	bne	r18,zero,800282c <___vfprintf_internal_r+0x2168>
 80027b0:	00800044 	movi	r2,1
 80027b4:	d8802e15 	stw	r2,184(sp)
 80027b8:	003db706 	br	8001e98 <__alt_data_end+0xff001e98>
 80027bc:	00800b44 	movi	r2,45
 80027c0:	05adc83a 	sub	r22,zero,r22
 80027c4:	d8802305 	stb	r2,140(sp)
 80027c8:	003f3f06 	br	80024c8 <__alt_data_end+0xff0024c8>
 80027cc:	0005883a 	mov	r2,zero
 80027d0:	003f5206 	br	800251c <__alt_data_end+0xff00251c>
 80027d4:	90a4703a 	and	r18,r18,r2
 80027d8:	903f4e26 	beq	r18,zero,8002514 <__alt_data_end+0xff002514>
 80027dc:	003f4a06 	br	8002508 <__alt_data_end+0xff002508>
 80027e0:	00800084 	movi	r2,2
 80027e4:	10c5c83a 	sub	r2,r2,r3
 80027e8:	003f8406 	br	80025fc <__alt_data_end+0xff0025fc>
 80027ec:	d8802d17 	ldw	r2,180(sp)
 80027f0:	d9002d17 	ldw	r4,180(sp)
 80027f4:	ac400043 	ldbu	r17,1(r21)
 80027f8:	10800017 	ldw	r2,0(r2)
 80027fc:	582b883a 	mov	r21,r11
 8002800:	d8802915 	stw	r2,164(sp)
 8002804:	20800104 	addi	r2,r4,4
 8002808:	d9002917 	ldw	r4,164(sp)
 800280c:	d8802d15 	stw	r2,180(sp)
 8002810:	203e7a0e 	bge	r4,zero,80021fc <__alt_data_end+0xff0021fc>
 8002814:	8c403fcc 	andi	r17,r17,255
 8002818:	00bfffc4 	movi	r2,-1
 800281c:	8c40201c 	xori	r17,r17,128
 8002820:	d8802915 	stw	r2,164(sp)
 8002824:	8c7fe004 	addi	r17,r17,-128
 8002828:	00380706 	br	8000848 <__alt_data_end+0xff000848>
 800282c:	d8c02917 	ldw	r3,164(sp)
 8002830:	18c00084 	addi	r3,r3,2
 8002834:	d8c02e15 	stw	r3,184(sp)
 8002838:	1805883a 	mov	r2,r3
 800283c:	183d960e 	bge	r3,zero,8001e98 <__alt_data_end+0xff001e98>
 8002840:	003fd606 	br	800279c <__alt_data_end+0xff00279c>
 8002844:	0005883a 	mov	r2,zero
 8002848:	003f8e06 	br	8002684 <__alt_data_end+0xff002684>
 800284c:	9080004c 	andi	r2,r18,1
 8002850:	103f811e 	bne	r2,zero,8002658 <__alt_data_end+0xff002658>
 8002854:	d8802117 	ldw	r2,132(sp)
 8002858:	1405c83a 	sub	r2,r2,r16
 800285c:	d8803315 	stw	r2,204(sp)
 8002860:	b47ef326 	beq	r22,r17,8002430 <__alt_data_end+0xff002430>
 8002864:	dd802617 	ldw	r22,152(sp)
 8002868:	003f1106 	br	80024b0 <__alt_data_end+0xff0024b0>
 800286c:	d9c02785 	stb	r7,158(sp)
 8002870:	00390406 	br	8000c84 <__alt_data_end+0xff000c84>
 8002874:	d9c02785 	stb	r7,158(sp)
 8002878:	0038d306 	br	8000bc8 <__alt_data_end+0xff000bc8>
 800287c:	d9c02785 	stb	r7,158(sp)
 8002880:	003a6106 	br	8001208 <__alt_data_end+0xff001208>
 8002884:	d9c02785 	stb	r7,158(sp)
 8002888:	003af806 	br	800146c <__alt_data_end+0xff00146c>
 800288c:	0005883a 	mov	r2,zero
 8002890:	003d7e06 	br	8001e8c <__alt_data_end+0xff001e8c>
 8002894:	d8802344 	addi	r2,sp,141
 8002898:	003f1306 	br	80024e8 <__alt_data_end+0xff0024e8>
 800289c:	d9c02785 	stb	r7,158(sp)
 80028a0:	00392306 	br	8000d30 <__alt_data_end+0xff000d30>
 80028a4:	d9c02785 	stb	r7,158(sp)
 80028a8:	003aa906 	br	8001350 <__alt_data_end+0xff001350>
 80028ac:	d9c02785 	stb	r7,158(sp)
 80028b0:	003a3d06 	br	80011a8 <__alt_data_end+0xff0011a8>
 80028b4:	d9c02785 	stb	r7,158(sp)
 80028b8:	003aca06 	br	80013e4 <__alt_data_end+0xff0013e4>

080028bc <__vfprintf_internal>:
 80028bc:	00820074 	movhi	r2,2049
 80028c0:	108d6904 	addi	r2,r2,13732
 80028c4:	300f883a 	mov	r7,r6
 80028c8:	280d883a 	mov	r6,r5
 80028cc:	200b883a 	mov	r5,r4
 80028d0:	11000017 	ldw	r4,0(r2)
 80028d4:	80006c41 	jmpi	80006c4 <___vfprintf_internal_r>

080028d8 <__sbprintf>:
 80028d8:	2880030b 	ldhu	r2,12(r5)
 80028dc:	2ac01917 	ldw	r11,100(r5)
 80028e0:	2a80038b 	ldhu	r10,14(r5)
 80028e4:	2a400717 	ldw	r9,28(r5)
 80028e8:	2a000917 	ldw	r8,36(r5)
 80028ec:	defee204 	addi	sp,sp,-1144
 80028f0:	00c10004 	movi	r3,1024
 80028f4:	dc011a15 	stw	r16,1128(sp)
 80028f8:	10bfff4c 	andi	r2,r2,65533
 80028fc:	2821883a 	mov	r16,r5
 8002900:	d8cb883a 	add	r5,sp,r3
 8002904:	dc811c15 	stw	r18,1136(sp)
 8002908:	dc411b15 	stw	r17,1132(sp)
 800290c:	dfc11d15 	stw	ra,1140(sp)
 8002910:	2025883a 	mov	r18,r4
 8002914:	d881030d 	sth	r2,1036(sp)
 8002918:	dac11915 	stw	r11,1124(sp)
 800291c:	da81038d 	sth	r10,1038(sp)
 8002920:	da410715 	stw	r9,1052(sp)
 8002924:	da010915 	stw	r8,1060(sp)
 8002928:	dec10015 	stw	sp,1024(sp)
 800292c:	dec10415 	stw	sp,1040(sp)
 8002930:	d8c10215 	stw	r3,1032(sp)
 8002934:	d8c10515 	stw	r3,1044(sp)
 8002938:	d8010615 	stw	zero,1048(sp)
 800293c:	80006c40 	call	80006c4 <___vfprintf_internal_r>
 8002940:	1023883a 	mov	r17,r2
 8002944:	10000416 	blt	r2,zero,8002958 <__sbprintf+0x80>
 8002948:	d9410004 	addi	r5,sp,1024
 800294c:	9009883a 	mov	r4,r18
 8002950:	800458c0 	call	800458c <_fflush_r>
 8002954:	10000d1e 	bne	r2,zero,800298c <__sbprintf+0xb4>
 8002958:	d881030b 	ldhu	r2,1036(sp)
 800295c:	1080100c 	andi	r2,r2,64
 8002960:	10000326 	beq	r2,zero,8002970 <__sbprintf+0x98>
 8002964:	8080030b 	ldhu	r2,12(r16)
 8002968:	10801014 	ori	r2,r2,64
 800296c:	8080030d 	sth	r2,12(r16)
 8002970:	8805883a 	mov	r2,r17
 8002974:	dfc11d17 	ldw	ra,1140(sp)
 8002978:	dc811c17 	ldw	r18,1136(sp)
 800297c:	dc411b17 	ldw	r17,1132(sp)
 8002980:	dc011a17 	ldw	r16,1128(sp)
 8002984:	dec11e04 	addi	sp,sp,1144
 8002988:	f800283a 	ret
 800298c:	047fffc4 	movi	r17,-1
 8002990:	003ff106 	br	8002958 <__alt_data_end+0xff002958>

08002994 <__swsetup_r>:
 8002994:	00820074 	movhi	r2,2049
 8002998:	defffd04 	addi	sp,sp,-12
 800299c:	108d6904 	addi	r2,r2,13732
 80029a0:	dc400115 	stw	r17,4(sp)
 80029a4:	2023883a 	mov	r17,r4
 80029a8:	11000017 	ldw	r4,0(r2)
 80029ac:	dc000015 	stw	r16,0(sp)
 80029b0:	dfc00215 	stw	ra,8(sp)
 80029b4:	2821883a 	mov	r16,r5
 80029b8:	20000226 	beq	r4,zero,80029c4 <__swsetup_r+0x30>
 80029bc:	20800e17 	ldw	r2,56(r4)
 80029c0:	10003126 	beq	r2,zero,8002a88 <__swsetup_r+0xf4>
 80029c4:	8080030b 	ldhu	r2,12(r16)
 80029c8:	10c0020c 	andi	r3,r2,8
 80029cc:	1009883a 	mov	r4,r2
 80029d0:	18000f26 	beq	r3,zero,8002a10 <__swsetup_r+0x7c>
 80029d4:	80c00417 	ldw	r3,16(r16)
 80029d8:	18001526 	beq	r3,zero,8002a30 <__swsetup_r+0x9c>
 80029dc:	1100004c 	andi	r4,r2,1
 80029e0:	20001c1e 	bne	r4,zero,8002a54 <__swsetup_r+0xc0>
 80029e4:	1080008c 	andi	r2,r2,2
 80029e8:	1000291e 	bne	r2,zero,8002a90 <__swsetup_r+0xfc>
 80029ec:	80800517 	ldw	r2,20(r16)
 80029f0:	80800215 	stw	r2,8(r16)
 80029f4:	18001c26 	beq	r3,zero,8002a68 <__swsetup_r+0xd4>
 80029f8:	0005883a 	mov	r2,zero
 80029fc:	dfc00217 	ldw	ra,8(sp)
 8002a00:	dc400117 	ldw	r17,4(sp)
 8002a04:	dc000017 	ldw	r16,0(sp)
 8002a08:	dec00304 	addi	sp,sp,12
 8002a0c:	f800283a 	ret
 8002a10:	2080040c 	andi	r2,r4,16
 8002a14:	10002e26 	beq	r2,zero,8002ad0 <__swsetup_r+0x13c>
 8002a18:	2080010c 	andi	r2,r4,4
 8002a1c:	10001e1e 	bne	r2,zero,8002a98 <__swsetup_r+0x104>
 8002a20:	80c00417 	ldw	r3,16(r16)
 8002a24:	20800214 	ori	r2,r4,8
 8002a28:	8080030d 	sth	r2,12(r16)
 8002a2c:	183feb1e 	bne	r3,zero,80029dc <__alt_data_end+0xff0029dc>
 8002a30:	1100a00c 	andi	r4,r2,640
 8002a34:	01408004 	movi	r5,512
 8002a38:	217fe826 	beq	r4,r5,80029dc <__alt_data_end+0xff0029dc>
 8002a3c:	800b883a 	mov	r5,r16
 8002a40:	8809883a 	mov	r4,r17
 8002a44:	800550c0 	call	800550c <__smakebuf_r>
 8002a48:	8080030b 	ldhu	r2,12(r16)
 8002a4c:	80c00417 	ldw	r3,16(r16)
 8002a50:	003fe206 	br	80029dc <__alt_data_end+0xff0029dc>
 8002a54:	80800517 	ldw	r2,20(r16)
 8002a58:	80000215 	stw	zero,8(r16)
 8002a5c:	0085c83a 	sub	r2,zero,r2
 8002a60:	80800615 	stw	r2,24(r16)
 8002a64:	183fe41e 	bne	r3,zero,80029f8 <__alt_data_end+0xff0029f8>
 8002a68:	80c0030b 	ldhu	r3,12(r16)
 8002a6c:	0005883a 	mov	r2,zero
 8002a70:	1900200c 	andi	r4,r3,128
 8002a74:	203fe126 	beq	r4,zero,80029fc <__alt_data_end+0xff0029fc>
 8002a78:	18c01014 	ori	r3,r3,64
 8002a7c:	80c0030d 	sth	r3,12(r16)
 8002a80:	00bfffc4 	movi	r2,-1
 8002a84:	003fdd06 	br	80029fc <__alt_data_end+0xff0029fc>
 8002a88:	80049680 	call	8004968 <__sinit>
 8002a8c:	003fcd06 	br	80029c4 <__alt_data_end+0xff0029c4>
 8002a90:	0005883a 	mov	r2,zero
 8002a94:	003fd606 	br	80029f0 <__alt_data_end+0xff0029f0>
 8002a98:	81400c17 	ldw	r5,48(r16)
 8002a9c:	28000626 	beq	r5,zero,8002ab8 <__swsetup_r+0x124>
 8002aa0:	80801004 	addi	r2,r16,64
 8002aa4:	28800326 	beq	r5,r2,8002ab4 <__swsetup_r+0x120>
 8002aa8:	8809883a 	mov	r4,r17
 8002aac:	8004adc0 	call	8004adc <_free_r>
 8002ab0:	8100030b 	ldhu	r4,12(r16)
 8002ab4:	80000c15 	stw	zero,48(r16)
 8002ab8:	80c00417 	ldw	r3,16(r16)
 8002abc:	00bff6c4 	movi	r2,-37
 8002ac0:	1108703a 	and	r4,r2,r4
 8002ac4:	80000115 	stw	zero,4(r16)
 8002ac8:	80c00015 	stw	r3,0(r16)
 8002acc:	003fd506 	br	8002a24 <__alt_data_end+0xff002a24>
 8002ad0:	00800244 	movi	r2,9
 8002ad4:	88800015 	stw	r2,0(r17)
 8002ad8:	20801014 	ori	r2,r4,64
 8002adc:	8080030d 	sth	r2,12(r16)
 8002ae0:	00bfffc4 	movi	r2,-1
 8002ae4:	003fc506 	br	80029fc <__alt_data_end+0xff0029fc>

08002ae8 <quorem>:
 8002ae8:	defff704 	addi	sp,sp,-36
 8002aec:	dc800215 	stw	r18,8(sp)
 8002af0:	20800417 	ldw	r2,16(r4)
 8002af4:	2c800417 	ldw	r18,16(r5)
 8002af8:	dfc00815 	stw	ra,32(sp)
 8002afc:	ddc00715 	stw	r23,28(sp)
 8002b00:	dd800615 	stw	r22,24(sp)
 8002b04:	dd400515 	stw	r21,20(sp)
 8002b08:	dd000415 	stw	r20,16(sp)
 8002b0c:	dcc00315 	stw	r19,12(sp)
 8002b10:	dc400115 	stw	r17,4(sp)
 8002b14:	dc000015 	stw	r16,0(sp)
 8002b18:	14807116 	blt	r2,r18,8002ce0 <quorem+0x1f8>
 8002b1c:	94bfffc4 	addi	r18,r18,-1
 8002b20:	94ad883a 	add	r22,r18,r18
 8002b24:	b5ad883a 	add	r22,r22,r22
 8002b28:	2c400504 	addi	r17,r5,20
 8002b2c:	8da9883a 	add	r20,r17,r22
 8002b30:	25400504 	addi	r21,r4,20
 8002b34:	282f883a 	mov	r23,r5
 8002b38:	adad883a 	add	r22,r21,r22
 8002b3c:	a1400017 	ldw	r5,0(r20)
 8002b40:	2021883a 	mov	r16,r4
 8002b44:	b1000017 	ldw	r4,0(r22)
 8002b48:	29400044 	addi	r5,r5,1
 8002b4c:	800a6e80 	call	800a6e8 <__udivsi3>
 8002b50:	1027883a 	mov	r19,r2
 8002b54:	10002c26 	beq	r2,zero,8002c08 <quorem+0x120>
 8002b58:	a813883a 	mov	r9,r21
 8002b5c:	880b883a 	mov	r5,r17
 8002b60:	0009883a 	mov	r4,zero
 8002b64:	000d883a 	mov	r6,zero
 8002b68:	2a000017 	ldw	r8,0(r5)
 8002b6c:	49c00017 	ldw	r7,0(r9)
 8002b70:	29400104 	addi	r5,r5,4
 8002b74:	40bfffcc 	andi	r2,r8,65535
 8002b78:	14c5383a 	mul	r2,r2,r19
 8002b7c:	4010d43a 	srli	r8,r8,16
 8002b80:	38ffffcc 	andi	r3,r7,65535
 8002b84:	1105883a 	add	r2,r2,r4
 8002b88:	1008d43a 	srli	r4,r2,16
 8002b8c:	44d1383a 	mul	r8,r8,r19
 8002b90:	198d883a 	add	r6,r3,r6
 8002b94:	10ffffcc 	andi	r3,r2,65535
 8002b98:	30c7c83a 	sub	r3,r6,r3
 8002b9c:	380ed43a 	srli	r7,r7,16
 8002ba0:	4105883a 	add	r2,r8,r4
 8002ba4:	180dd43a 	srai	r6,r3,16
 8002ba8:	113fffcc 	andi	r4,r2,65535
 8002bac:	390fc83a 	sub	r7,r7,r4
 8002bb0:	398d883a 	add	r6,r7,r6
 8002bb4:	300e943a 	slli	r7,r6,16
 8002bb8:	18ffffcc 	andi	r3,r3,65535
 8002bbc:	1008d43a 	srli	r4,r2,16
 8002bc0:	38ceb03a 	or	r7,r7,r3
 8002bc4:	49c00015 	stw	r7,0(r9)
 8002bc8:	300dd43a 	srai	r6,r6,16
 8002bcc:	4a400104 	addi	r9,r9,4
 8002bd0:	a17fe52e 	bgeu	r20,r5,8002b68 <__alt_data_end+0xff002b68>
 8002bd4:	b0800017 	ldw	r2,0(r22)
 8002bd8:	10000b1e 	bne	r2,zero,8002c08 <quorem+0x120>
 8002bdc:	b0bfff04 	addi	r2,r22,-4
 8002be0:	a880082e 	bgeu	r21,r2,8002c04 <quorem+0x11c>
 8002be4:	b0ffff17 	ldw	r3,-4(r22)
 8002be8:	18000326 	beq	r3,zero,8002bf8 <quorem+0x110>
 8002bec:	00000506 	br	8002c04 <quorem+0x11c>
 8002bf0:	10c00017 	ldw	r3,0(r2)
 8002bf4:	1800031e 	bne	r3,zero,8002c04 <quorem+0x11c>
 8002bf8:	10bfff04 	addi	r2,r2,-4
 8002bfc:	94bfffc4 	addi	r18,r18,-1
 8002c00:	a8bffb36 	bltu	r21,r2,8002bf0 <__alt_data_end+0xff002bf0>
 8002c04:	84800415 	stw	r18,16(r16)
 8002c08:	b80b883a 	mov	r5,r23
 8002c0c:	8009883a 	mov	r4,r16
 8002c10:	8006c4c0 	call	8006c4c <__mcmp>
 8002c14:	10002616 	blt	r2,zero,8002cb0 <quorem+0x1c8>
 8002c18:	9cc00044 	addi	r19,r19,1
 8002c1c:	a805883a 	mov	r2,r21
 8002c20:	000b883a 	mov	r5,zero
 8002c24:	11000017 	ldw	r4,0(r2)
 8002c28:	89800017 	ldw	r6,0(r17)
 8002c2c:	10800104 	addi	r2,r2,4
 8002c30:	20ffffcc 	andi	r3,r4,65535
 8002c34:	194b883a 	add	r5,r3,r5
 8002c38:	30ffffcc 	andi	r3,r6,65535
 8002c3c:	28c7c83a 	sub	r3,r5,r3
 8002c40:	300cd43a 	srli	r6,r6,16
 8002c44:	2008d43a 	srli	r4,r4,16
 8002c48:	180bd43a 	srai	r5,r3,16
 8002c4c:	18ffffcc 	andi	r3,r3,65535
 8002c50:	2189c83a 	sub	r4,r4,r6
 8002c54:	2149883a 	add	r4,r4,r5
 8002c58:	200c943a 	slli	r6,r4,16
 8002c5c:	8c400104 	addi	r17,r17,4
 8002c60:	200bd43a 	srai	r5,r4,16
 8002c64:	30c6b03a 	or	r3,r6,r3
 8002c68:	10ffff15 	stw	r3,-4(r2)
 8002c6c:	a47fed2e 	bgeu	r20,r17,8002c24 <__alt_data_end+0xff002c24>
 8002c70:	9485883a 	add	r2,r18,r18
 8002c74:	1085883a 	add	r2,r2,r2
 8002c78:	a887883a 	add	r3,r21,r2
 8002c7c:	18800017 	ldw	r2,0(r3)
 8002c80:	10000b1e 	bne	r2,zero,8002cb0 <quorem+0x1c8>
 8002c84:	18bfff04 	addi	r2,r3,-4
 8002c88:	a880082e 	bgeu	r21,r2,8002cac <quorem+0x1c4>
 8002c8c:	18ffff17 	ldw	r3,-4(r3)
 8002c90:	18000326 	beq	r3,zero,8002ca0 <quorem+0x1b8>
 8002c94:	00000506 	br	8002cac <quorem+0x1c4>
 8002c98:	10c00017 	ldw	r3,0(r2)
 8002c9c:	1800031e 	bne	r3,zero,8002cac <quorem+0x1c4>
 8002ca0:	10bfff04 	addi	r2,r2,-4
 8002ca4:	94bfffc4 	addi	r18,r18,-1
 8002ca8:	a8bffb36 	bltu	r21,r2,8002c98 <__alt_data_end+0xff002c98>
 8002cac:	84800415 	stw	r18,16(r16)
 8002cb0:	9805883a 	mov	r2,r19
 8002cb4:	dfc00817 	ldw	ra,32(sp)
 8002cb8:	ddc00717 	ldw	r23,28(sp)
 8002cbc:	dd800617 	ldw	r22,24(sp)
 8002cc0:	dd400517 	ldw	r21,20(sp)
 8002cc4:	dd000417 	ldw	r20,16(sp)
 8002cc8:	dcc00317 	ldw	r19,12(sp)
 8002ccc:	dc800217 	ldw	r18,8(sp)
 8002cd0:	dc400117 	ldw	r17,4(sp)
 8002cd4:	dc000017 	ldw	r16,0(sp)
 8002cd8:	dec00904 	addi	sp,sp,36
 8002cdc:	f800283a 	ret
 8002ce0:	0005883a 	mov	r2,zero
 8002ce4:	003ff306 	br	8002cb4 <__alt_data_end+0xff002cb4>

08002ce8 <_dtoa_r>:
 8002ce8:	20801017 	ldw	r2,64(r4)
 8002cec:	deffde04 	addi	sp,sp,-136
 8002cf0:	df002015 	stw	fp,128(sp)
 8002cf4:	dcc01b15 	stw	r19,108(sp)
 8002cf8:	dc801a15 	stw	r18,104(sp)
 8002cfc:	dc401915 	stw	r17,100(sp)
 8002d00:	dc001815 	stw	r16,96(sp)
 8002d04:	dfc02115 	stw	ra,132(sp)
 8002d08:	ddc01f15 	stw	r23,124(sp)
 8002d0c:	dd801e15 	stw	r22,120(sp)
 8002d10:	dd401d15 	stw	r21,116(sp)
 8002d14:	dd001c15 	stw	r20,112(sp)
 8002d18:	d9c00315 	stw	r7,12(sp)
 8002d1c:	2039883a 	mov	fp,r4
 8002d20:	3023883a 	mov	r17,r6
 8002d24:	2825883a 	mov	r18,r5
 8002d28:	dc002417 	ldw	r16,144(sp)
 8002d2c:	3027883a 	mov	r19,r6
 8002d30:	10000826 	beq	r2,zero,8002d54 <_dtoa_r+0x6c>
 8002d34:	21801117 	ldw	r6,68(r4)
 8002d38:	00c00044 	movi	r3,1
 8002d3c:	100b883a 	mov	r5,r2
 8002d40:	1986983a 	sll	r3,r3,r6
 8002d44:	11800115 	stw	r6,4(r2)
 8002d48:	10c00215 	stw	r3,8(r2)
 8002d4c:	800642c0 	call	800642c <_Bfree>
 8002d50:	e0001015 	stw	zero,64(fp)
 8002d54:	88002e16 	blt	r17,zero,8002e10 <_dtoa_r+0x128>
 8002d58:	80000015 	stw	zero,0(r16)
 8002d5c:	889ffc2c 	andhi	r2,r17,32752
 8002d60:	00dffc34 	movhi	r3,32752
 8002d64:	10c01c26 	beq	r2,r3,8002dd8 <_dtoa_r+0xf0>
 8002d68:	000d883a 	mov	r6,zero
 8002d6c:	000f883a 	mov	r7,zero
 8002d70:	9009883a 	mov	r4,r18
 8002d74:	980b883a 	mov	r5,r19
 8002d78:	800b9380 	call	800b938 <__eqdf2>
 8002d7c:	10002b1e 	bne	r2,zero,8002e2c <_dtoa_r+0x144>
 8002d80:	d9c02317 	ldw	r7,140(sp)
 8002d84:	00800044 	movi	r2,1
 8002d88:	38800015 	stw	r2,0(r7)
 8002d8c:	d8802517 	ldw	r2,148(sp)
 8002d90:	10019e26 	beq	r2,zero,800340c <_dtoa_r+0x724>
 8002d94:	d8c02517 	ldw	r3,148(sp)
 8002d98:	00820074 	movhi	r2,2049
 8002d9c:	1085f544 	addi	r2,r2,6101
 8002da0:	18800015 	stw	r2,0(r3)
 8002da4:	10bfffc4 	addi	r2,r2,-1
 8002da8:	dfc02117 	ldw	ra,132(sp)
 8002dac:	df002017 	ldw	fp,128(sp)
 8002db0:	ddc01f17 	ldw	r23,124(sp)
 8002db4:	dd801e17 	ldw	r22,120(sp)
 8002db8:	dd401d17 	ldw	r21,116(sp)
 8002dbc:	dd001c17 	ldw	r20,112(sp)
 8002dc0:	dcc01b17 	ldw	r19,108(sp)
 8002dc4:	dc801a17 	ldw	r18,104(sp)
 8002dc8:	dc401917 	ldw	r17,100(sp)
 8002dcc:	dc001817 	ldw	r16,96(sp)
 8002dd0:	dec02204 	addi	sp,sp,136
 8002dd4:	f800283a 	ret
 8002dd8:	d8c02317 	ldw	r3,140(sp)
 8002ddc:	0089c3c4 	movi	r2,9999
 8002de0:	18800015 	stw	r2,0(r3)
 8002de4:	90017726 	beq	r18,zero,80033c4 <_dtoa_r+0x6dc>
 8002de8:	00820074 	movhi	r2,2049
 8002dec:	10860104 	addi	r2,r2,6148
 8002df0:	d9002517 	ldw	r4,148(sp)
 8002df4:	203fec26 	beq	r4,zero,8002da8 <__alt_data_end+0xff002da8>
 8002df8:	10c000c7 	ldb	r3,3(r2)
 8002dfc:	1801781e 	bne	r3,zero,80033e0 <_dtoa_r+0x6f8>
 8002e00:	10c000c4 	addi	r3,r2,3
 8002e04:	d9802517 	ldw	r6,148(sp)
 8002e08:	30c00015 	stw	r3,0(r6)
 8002e0c:	003fe606 	br	8002da8 <__alt_data_end+0xff002da8>
 8002e10:	04e00034 	movhi	r19,32768
 8002e14:	9cffffc4 	addi	r19,r19,-1
 8002e18:	00800044 	movi	r2,1
 8002e1c:	8ce6703a 	and	r19,r17,r19
 8002e20:	80800015 	stw	r2,0(r16)
 8002e24:	9823883a 	mov	r17,r19
 8002e28:	003fcc06 	br	8002d5c <__alt_data_end+0xff002d5c>
 8002e2c:	d8800204 	addi	r2,sp,8
 8002e30:	d8800015 	stw	r2,0(sp)
 8002e34:	d9c00104 	addi	r7,sp,4
 8002e38:	900b883a 	mov	r5,r18
 8002e3c:	980d883a 	mov	r6,r19
 8002e40:	e009883a 	mov	r4,fp
 8002e44:	8820d53a 	srli	r16,r17,20
 8002e48:	80070180 	call	8007018 <__d2b>
 8002e4c:	d8800915 	stw	r2,36(sp)
 8002e50:	8001651e 	bne	r16,zero,80033e8 <_dtoa_r+0x700>
 8002e54:	dd800217 	ldw	r22,8(sp)
 8002e58:	dc000117 	ldw	r16,4(sp)
 8002e5c:	00800804 	movi	r2,32
 8002e60:	b421883a 	add	r16,r22,r16
 8002e64:	80c10c84 	addi	r3,r16,1074
 8002e68:	10c2d10e 	bge	r2,r3,80039b0 <_dtoa_r+0xcc8>
 8002e6c:	00801004 	movi	r2,64
 8002e70:	81010484 	addi	r4,r16,1042
 8002e74:	10c7c83a 	sub	r3,r2,r3
 8002e78:	9108d83a 	srl	r4,r18,r4
 8002e7c:	88e2983a 	sll	r17,r17,r3
 8002e80:	2448b03a 	or	r4,r4,r17
 8002e84:	800cd000 	call	800cd00 <__floatunsidf>
 8002e88:	017f8434 	movhi	r5,65040
 8002e8c:	01800044 	movi	r6,1
 8002e90:	1009883a 	mov	r4,r2
 8002e94:	194b883a 	add	r5,r3,r5
 8002e98:	843fffc4 	addi	r16,r16,-1
 8002e9c:	d9801115 	stw	r6,68(sp)
 8002ea0:	000d883a 	mov	r6,zero
 8002ea4:	01cffe34 	movhi	r7,16376
 8002ea8:	800c2a80 	call	800c2a8 <__subdf3>
 8002eac:	0198dbf4 	movhi	r6,25455
 8002eb0:	01cff4f4 	movhi	r7,16339
 8002eb4:	3190d844 	addi	r6,r6,17249
 8002eb8:	39e1e9c4 	addi	r7,r7,-30809
 8002ebc:	1009883a 	mov	r4,r2
 8002ec0:	180b883a 	mov	r5,r3
 8002ec4:	800bb900 	call	800bb90 <__muldf3>
 8002ec8:	01a2d874 	movhi	r6,35681
 8002ecc:	01cff1f4 	movhi	r7,16327
 8002ed0:	31b22cc4 	addi	r6,r6,-14157
 8002ed4:	39e28a04 	addi	r7,r7,-30168
 8002ed8:	180b883a 	mov	r5,r3
 8002edc:	1009883a 	mov	r4,r2
 8002ee0:	800a7a40 	call	800a7a4 <__adddf3>
 8002ee4:	8009883a 	mov	r4,r16
 8002ee8:	1029883a 	mov	r20,r2
 8002eec:	1823883a 	mov	r17,r3
 8002ef0:	800cc240 	call	800cc24 <__floatsidf>
 8002ef4:	019427f4 	movhi	r6,20639
 8002ef8:	01cff4f4 	movhi	r7,16339
 8002efc:	319e7ec4 	addi	r6,r6,31227
 8002f00:	39d104c4 	addi	r7,r7,17427
 8002f04:	1009883a 	mov	r4,r2
 8002f08:	180b883a 	mov	r5,r3
 8002f0c:	800bb900 	call	800bb90 <__muldf3>
 8002f10:	100d883a 	mov	r6,r2
 8002f14:	180f883a 	mov	r7,r3
 8002f18:	a009883a 	mov	r4,r20
 8002f1c:	880b883a 	mov	r5,r17
 8002f20:	800a7a40 	call	800a7a4 <__adddf3>
 8002f24:	1009883a 	mov	r4,r2
 8002f28:	180b883a 	mov	r5,r3
 8002f2c:	1029883a 	mov	r20,r2
 8002f30:	1823883a 	mov	r17,r3
 8002f34:	800cba40 	call	800cba4 <__fixdfsi>
 8002f38:	000d883a 	mov	r6,zero
 8002f3c:	000f883a 	mov	r7,zero
 8002f40:	a009883a 	mov	r4,r20
 8002f44:	880b883a 	mov	r5,r17
 8002f48:	d8800515 	stw	r2,20(sp)
 8002f4c:	800ba9c0 	call	800ba9c <__ledf2>
 8002f50:	10028716 	blt	r2,zero,8003970 <_dtoa_r+0xc88>
 8002f54:	d8c00517 	ldw	r3,20(sp)
 8002f58:	00800584 	movi	r2,22
 8002f5c:	10c27536 	bltu	r2,r3,8003934 <_dtoa_r+0xc4c>
 8002f60:	180490fa 	slli	r2,r3,3
 8002f64:	00c20074 	movhi	r3,2049
 8002f68:	18c61d04 	addi	r3,r3,6260
 8002f6c:	1885883a 	add	r2,r3,r2
 8002f70:	11000017 	ldw	r4,0(r2)
 8002f74:	11400117 	ldw	r5,4(r2)
 8002f78:	900d883a 	mov	r6,r18
 8002f7c:	980f883a 	mov	r7,r19
 8002f80:	800b9c00 	call	800b9c0 <__gedf2>
 8002f84:	00828d0e 	bge	zero,r2,80039bc <_dtoa_r+0xcd4>
 8002f88:	d9000517 	ldw	r4,20(sp)
 8002f8c:	d8000e15 	stw	zero,56(sp)
 8002f90:	213fffc4 	addi	r4,r4,-1
 8002f94:	d9000515 	stw	r4,20(sp)
 8002f98:	b42dc83a 	sub	r22,r22,r16
 8002f9c:	b5bfffc4 	addi	r22,r22,-1
 8002fa0:	b0026f16 	blt	r22,zero,8003960 <_dtoa_r+0xc78>
 8002fa4:	d8000815 	stw	zero,32(sp)
 8002fa8:	d9c00517 	ldw	r7,20(sp)
 8002fac:	38026416 	blt	r7,zero,8003940 <_dtoa_r+0xc58>
 8002fb0:	b1ed883a 	add	r22,r22,r7
 8002fb4:	d9c00d15 	stw	r7,52(sp)
 8002fb8:	d8000a15 	stw	zero,40(sp)
 8002fbc:	d9800317 	ldw	r6,12(sp)
 8002fc0:	00800244 	movi	r2,9
 8002fc4:	11811436 	bltu	r2,r6,8003418 <_dtoa_r+0x730>
 8002fc8:	00800144 	movi	r2,5
 8002fcc:	1184e10e 	bge	r2,r6,8004354 <_dtoa_r+0x166c>
 8002fd0:	31bfff04 	addi	r6,r6,-4
 8002fd4:	d9800315 	stw	r6,12(sp)
 8002fd8:	0023883a 	mov	r17,zero
 8002fdc:	d9800317 	ldw	r6,12(sp)
 8002fe0:	008000c4 	movi	r2,3
 8002fe4:	30836726 	beq	r6,r2,8003d84 <_dtoa_r+0x109c>
 8002fe8:	1183410e 	bge	r2,r6,8003cf0 <_dtoa_r+0x1008>
 8002fec:	d9c00317 	ldw	r7,12(sp)
 8002ff0:	00800104 	movi	r2,4
 8002ff4:	38827c26 	beq	r7,r2,80039e8 <_dtoa_r+0xd00>
 8002ff8:	00800144 	movi	r2,5
 8002ffc:	3884c41e 	bne	r7,r2,8004310 <_dtoa_r+0x1628>
 8003000:	00800044 	movi	r2,1
 8003004:	d8800b15 	stw	r2,44(sp)
 8003008:	d8c00517 	ldw	r3,20(sp)
 800300c:	d9002217 	ldw	r4,136(sp)
 8003010:	1907883a 	add	r3,r3,r4
 8003014:	19800044 	addi	r6,r3,1
 8003018:	d8c00c15 	stw	r3,48(sp)
 800301c:	d9800615 	stw	r6,24(sp)
 8003020:	0183a40e 	bge	zero,r6,8003eb4 <_dtoa_r+0x11cc>
 8003024:	d9800617 	ldw	r6,24(sp)
 8003028:	3021883a 	mov	r16,r6
 800302c:	e0001115 	stw	zero,68(fp)
 8003030:	008005c4 	movi	r2,23
 8003034:	1184c92e 	bgeu	r2,r6,800435c <_dtoa_r+0x1674>
 8003038:	00c00044 	movi	r3,1
 800303c:	00800104 	movi	r2,4
 8003040:	1085883a 	add	r2,r2,r2
 8003044:	11000504 	addi	r4,r2,20
 8003048:	180b883a 	mov	r5,r3
 800304c:	18c00044 	addi	r3,r3,1
 8003050:	313ffb2e 	bgeu	r6,r4,8003040 <__alt_data_end+0xff003040>
 8003054:	e1401115 	stw	r5,68(fp)
 8003058:	e009883a 	mov	r4,fp
 800305c:	80063840 	call	8006384 <_Balloc>
 8003060:	d8800715 	stw	r2,28(sp)
 8003064:	e0801015 	stw	r2,64(fp)
 8003068:	00800384 	movi	r2,14
 800306c:	1400f736 	bltu	r2,r16,800344c <_dtoa_r+0x764>
 8003070:	8800f626 	beq	r17,zero,800344c <_dtoa_r+0x764>
 8003074:	d9c00517 	ldw	r7,20(sp)
 8003078:	01c39a0e 	bge	zero,r7,8003ee4 <_dtoa_r+0x11fc>
 800307c:	388003cc 	andi	r2,r7,15
 8003080:	100490fa 	slli	r2,r2,3
 8003084:	382bd13a 	srai	r21,r7,4
 8003088:	00c20074 	movhi	r3,2049
 800308c:	18c61d04 	addi	r3,r3,6260
 8003090:	1885883a 	add	r2,r3,r2
 8003094:	a8c0040c 	andi	r3,r21,16
 8003098:	12400017 	ldw	r9,0(r2)
 800309c:	12000117 	ldw	r8,4(r2)
 80030a0:	18037926 	beq	r3,zero,8003e88 <_dtoa_r+0x11a0>
 80030a4:	00820074 	movhi	r2,2049
 80030a8:	10861304 	addi	r2,r2,6220
 80030ac:	11800817 	ldw	r6,32(r2)
 80030b0:	11c00917 	ldw	r7,36(r2)
 80030b4:	9009883a 	mov	r4,r18
 80030b8:	980b883a 	mov	r5,r19
 80030bc:	da001715 	stw	r8,92(sp)
 80030c0:	da401615 	stw	r9,88(sp)
 80030c4:	800b0500 	call	800b050 <__divdf3>
 80030c8:	da001717 	ldw	r8,92(sp)
 80030cc:	da401617 	ldw	r9,88(sp)
 80030d0:	ad4003cc 	andi	r21,r21,15
 80030d4:	040000c4 	movi	r16,3
 80030d8:	1023883a 	mov	r17,r2
 80030dc:	1829883a 	mov	r20,r3
 80030e0:	a8001126 	beq	r21,zero,8003128 <_dtoa_r+0x440>
 80030e4:	05c20074 	movhi	r23,2049
 80030e8:	bdc61304 	addi	r23,r23,6220
 80030ec:	4805883a 	mov	r2,r9
 80030f0:	4007883a 	mov	r3,r8
 80030f4:	a980004c 	andi	r6,r21,1
 80030f8:	1009883a 	mov	r4,r2
 80030fc:	a82bd07a 	srai	r21,r21,1
 8003100:	180b883a 	mov	r5,r3
 8003104:	30000426 	beq	r6,zero,8003118 <_dtoa_r+0x430>
 8003108:	b9800017 	ldw	r6,0(r23)
 800310c:	b9c00117 	ldw	r7,4(r23)
 8003110:	84000044 	addi	r16,r16,1
 8003114:	800bb900 	call	800bb90 <__muldf3>
 8003118:	bdc00204 	addi	r23,r23,8
 800311c:	a83ff51e 	bne	r21,zero,80030f4 <__alt_data_end+0xff0030f4>
 8003120:	1013883a 	mov	r9,r2
 8003124:	1811883a 	mov	r8,r3
 8003128:	480d883a 	mov	r6,r9
 800312c:	400f883a 	mov	r7,r8
 8003130:	8809883a 	mov	r4,r17
 8003134:	a00b883a 	mov	r5,r20
 8003138:	800b0500 	call	800b050 <__divdf3>
 800313c:	d8800f15 	stw	r2,60(sp)
 8003140:	d8c01015 	stw	r3,64(sp)
 8003144:	d8c00e17 	ldw	r3,56(sp)
 8003148:	18000626 	beq	r3,zero,8003164 <_dtoa_r+0x47c>
 800314c:	d9000f17 	ldw	r4,60(sp)
 8003150:	d9401017 	ldw	r5,64(sp)
 8003154:	000d883a 	mov	r6,zero
 8003158:	01cffc34 	movhi	r7,16368
 800315c:	800ba9c0 	call	800ba9c <__ledf2>
 8003160:	10040b16 	blt	r2,zero,8004190 <_dtoa_r+0x14a8>
 8003164:	8009883a 	mov	r4,r16
 8003168:	800cc240 	call	800cc24 <__floatsidf>
 800316c:	d9800f17 	ldw	r6,60(sp)
 8003170:	d9c01017 	ldw	r7,64(sp)
 8003174:	1009883a 	mov	r4,r2
 8003178:	180b883a 	mov	r5,r3
 800317c:	800bb900 	call	800bb90 <__muldf3>
 8003180:	000d883a 	mov	r6,zero
 8003184:	01d00734 	movhi	r7,16412
 8003188:	1009883a 	mov	r4,r2
 800318c:	180b883a 	mov	r5,r3
 8003190:	800a7a40 	call	800a7a4 <__adddf3>
 8003194:	1021883a 	mov	r16,r2
 8003198:	d8800617 	ldw	r2,24(sp)
 800319c:	047f3034 	movhi	r17,64704
 80031a0:	1c63883a 	add	r17,r3,r17
 80031a4:	10031826 	beq	r2,zero,8003e08 <_dtoa_r+0x1120>
 80031a8:	d8c00517 	ldw	r3,20(sp)
 80031ac:	db000617 	ldw	r12,24(sp)
 80031b0:	d8c01315 	stw	r3,76(sp)
 80031b4:	d9000b17 	ldw	r4,44(sp)
 80031b8:	20038f26 	beq	r4,zero,8003ff8 <_dtoa_r+0x1310>
 80031bc:	60bfffc4 	addi	r2,r12,-1
 80031c0:	100490fa 	slli	r2,r2,3
 80031c4:	00c20074 	movhi	r3,2049
 80031c8:	18c61d04 	addi	r3,r3,6260
 80031cc:	1885883a 	add	r2,r3,r2
 80031d0:	11800017 	ldw	r6,0(r2)
 80031d4:	11c00117 	ldw	r7,4(r2)
 80031d8:	d8800717 	ldw	r2,28(sp)
 80031dc:	0009883a 	mov	r4,zero
 80031e0:	014ff834 	movhi	r5,16352
 80031e4:	db001615 	stw	r12,88(sp)
 80031e8:	15c00044 	addi	r23,r2,1
 80031ec:	800b0500 	call	800b050 <__divdf3>
 80031f0:	800d883a 	mov	r6,r16
 80031f4:	880f883a 	mov	r7,r17
 80031f8:	1009883a 	mov	r4,r2
 80031fc:	180b883a 	mov	r5,r3
 8003200:	800c2a80 	call	800c2a8 <__subdf3>
 8003204:	d9401017 	ldw	r5,64(sp)
 8003208:	d9000f17 	ldw	r4,60(sp)
 800320c:	102b883a 	mov	r21,r2
 8003210:	d8c01215 	stw	r3,72(sp)
 8003214:	800cba40 	call	800cba4 <__fixdfsi>
 8003218:	1009883a 	mov	r4,r2
 800321c:	1029883a 	mov	r20,r2
 8003220:	800cc240 	call	800cc24 <__floatsidf>
 8003224:	d9000f17 	ldw	r4,60(sp)
 8003228:	d9401017 	ldw	r5,64(sp)
 800322c:	100d883a 	mov	r6,r2
 8003230:	180f883a 	mov	r7,r3
 8003234:	800c2a80 	call	800c2a8 <__subdf3>
 8003238:	1823883a 	mov	r17,r3
 800323c:	d8c00717 	ldw	r3,28(sp)
 8003240:	d9401217 	ldw	r5,72(sp)
 8003244:	a2000c04 	addi	r8,r20,48
 8003248:	1021883a 	mov	r16,r2
 800324c:	1a000005 	stb	r8,0(r3)
 8003250:	800d883a 	mov	r6,r16
 8003254:	880f883a 	mov	r7,r17
 8003258:	a809883a 	mov	r4,r21
 800325c:	4029883a 	mov	r20,r8
 8003260:	800b9c00 	call	800b9c0 <__gedf2>
 8003264:	00841d16 	blt	zero,r2,80042dc <_dtoa_r+0x15f4>
 8003268:	800d883a 	mov	r6,r16
 800326c:	880f883a 	mov	r7,r17
 8003270:	0009883a 	mov	r4,zero
 8003274:	014ffc34 	movhi	r5,16368
 8003278:	800c2a80 	call	800c2a8 <__subdf3>
 800327c:	d9401217 	ldw	r5,72(sp)
 8003280:	100d883a 	mov	r6,r2
 8003284:	180f883a 	mov	r7,r3
 8003288:	a809883a 	mov	r4,r21
 800328c:	800b9c00 	call	800b9c0 <__gedf2>
 8003290:	db001617 	ldw	r12,88(sp)
 8003294:	00840e16 	blt	zero,r2,80042d0 <_dtoa_r+0x15e8>
 8003298:	00800044 	movi	r2,1
 800329c:	13006b0e 	bge	r2,r12,800344c <_dtoa_r+0x764>
 80032a0:	d9000717 	ldw	r4,28(sp)
 80032a4:	dd800f15 	stw	r22,60(sp)
 80032a8:	dcc01015 	stw	r19,64(sp)
 80032ac:	2319883a 	add	r12,r4,r12
 80032b0:	dcc01217 	ldw	r19,72(sp)
 80032b4:	602d883a 	mov	r22,r12
 80032b8:	dc801215 	stw	r18,72(sp)
 80032bc:	b825883a 	mov	r18,r23
 80032c0:	00000906 	br	80032e8 <_dtoa_r+0x600>
 80032c4:	800c2a80 	call	800c2a8 <__subdf3>
 80032c8:	a80d883a 	mov	r6,r21
 80032cc:	980f883a 	mov	r7,r19
 80032d0:	1009883a 	mov	r4,r2
 80032d4:	180b883a 	mov	r5,r3
 80032d8:	800ba9c0 	call	800ba9c <__ledf2>
 80032dc:	1003e816 	blt	r2,zero,8004280 <_dtoa_r+0x1598>
 80032e0:	b825883a 	mov	r18,r23
 80032e4:	bd83e926 	beq	r23,r22,800428c <_dtoa_r+0x15a4>
 80032e8:	a809883a 	mov	r4,r21
 80032ec:	980b883a 	mov	r5,r19
 80032f0:	000d883a 	mov	r6,zero
 80032f4:	01d00934 	movhi	r7,16420
 80032f8:	800bb900 	call	800bb90 <__muldf3>
 80032fc:	000d883a 	mov	r6,zero
 8003300:	01d00934 	movhi	r7,16420
 8003304:	8009883a 	mov	r4,r16
 8003308:	880b883a 	mov	r5,r17
 800330c:	102b883a 	mov	r21,r2
 8003310:	1827883a 	mov	r19,r3
 8003314:	800bb900 	call	800bb90 <__muldf3>
 8003318:	180b883a 	mov	r5,r3
 800331c:	1009883a 	mov	r4,r2
 8003320:	1821883a 	mov	r16,r3
 8003324:	1023883a 	mov	r17,r2
 8003328:	800cba40 	call	800cba4 <__fixdfsi>
 800332c:	1009883a 	mov	r4,r2
 8003330:	1029883a 	mov	r20,r2
 8003334:	800cc240 	call	800cc24 <__floatsidf>
 8003338:	8809883a 	mov	r4,r17
 800333c:	800b883a 	mov	r5,r16
 8003340:	100d883a 	mov	r6,r2
 8003344:	180f883a 	mov	r7,r3
 8003348:	800c2a80 	call	800c2a8 <__subdf3>
 800334c:	a5000c04 	addi	r20,r20,48
 8003350:	a80d883a 	mov	r6,r21
 8003354:	980f883a 	mov	r7,r19
 8003358:	1009883a 	mov	r4,r2
 800335c:	180b883a 	mov	r5,r3
 8003360:	95000005 	stb	r20,0(r18)
 8003364:	1021883a 	mov	r16,r2
 8003368:	1823883a 	mov	r17,r3
 800336c:	800ba9c0 	call	800ba9c <__ledf2>
 8003370:	bdc00044 	addi	r23,r23,1
 8003374:	800d883a 	mov	r6,r16
 8003378:	880f883a 	mov	r7,r17
 800337c:	0009883a 	mov	r4,zero
 8003380:	014ffc34 	movhi	r5,16368
 8003384:	103fcf0e 	bge	r2,zero,80032c4 <__alt_data_end+0xff0032c4>
 8003388:	d8c01317 	ldw	r3,76(sp)
 800338c:	d8c00515 	stw	r3,20(sp)
 8003390:	d9400917 	ldw	r5,36(sp)
 8003394:	e009883a 	mov	r4,fp
 8003398:	800642c0 	call	800642c <_Bfree>
 800339c:	d9000517 	ldw	r4,20(sp)
 80033a0:	d9802317 	ldw	r6,140(sp)
 80033a4:	d9c02517 	ldw	r7,148(sp)
 80033a8:	b8000005 	stb	zero,0(r23)
 80033ac:	20800044 	addi	r2,r4,1
 80033b0:	30800015 	stw	r2,0(r6)
 80033b4:	3802aa26 	beq	r7,zero,8003e60 <_dtoa_r+0x1178>
 80033b8:	3dc00015 	stw	r23,0(r7)
 80033bc:	d8800717 	ldw	r2,28(sp)
 80033c0:	003e7906 	br	8002da8 <__alt_data_end+0xff002da8>
 80033c4:	00800434 	movhi	r2,16
 80033c8:	10bfffc4 	addi	r2,r2,-1
 80033cc:	88a2703a 	and	r17,r17,r2
 80033d0:	883e851e 	bne	r17,zero,8002de8 <__alt_data_end+0xff002de8>
 80033d4:	00820074 	movhi	r2,2049
 80033d8:	1085fe04 	addi	r2,r2,6136
 80033dc:	003e8406 	br	8002df0 <__alt_data_end+0xff002df0>
 80033e0:	10c00204 	addi	r3,r2,8
 80033e4:	003e8706 	br	8002e04 <__alt_data_end+0xff002e04>
 80033e8:	01400434 	movhi	r5,16
 80033ec:	297fffc4 	addi	r5,r5,-1
 80033f0:	994a703a 	and	r5,r19,r5
 80033f4:	9009883a 	mov	r4,r18
 80033f8:	843f0044 	addi	r16,r16,-1023
 80033fc:	294ffc34 	orhi	r5,r5,16368
 8003400:	dd800217 	ldw	r22,8(sp)
 8003404:	d8001115 	stw	zero,68(sp)
 8003408:	003ea506 	br	8002ea0 <__alt_data_end+0xff002ea0>
 800340c:	00820074 	movhi	r2,2049
 8003410:	1085f504 	addi	r2,r2,6100
 8003414:	003e6406 	br	8002da8 <__alt_data_end+0xff002da8>
 8003418:	e0001115 	stw	zero,68(fp)
 800341c:	000b883a 	mov	r5,zero
 8003420:	e009883a 	mov	r4,fp
 8003424:	80063840 	call	8006384 <_Balloc>
 8003428:	01bfffc4 	movi	r6,-1
 800342c:	01c00044 	movi	r7,1
 8003430:	d8800715 	stw	r2,28(sp)
 8003434:	d9800c15 	stw	r6,48(sp)
 8003438:	e0801015 	stw	r2,64(fp)
 800343c:	d8000315 	stw	zero,12(sp)
 8003440:	d9c00b15 	stw	r7,44(sp)
 8003444:	d9800615 	stw	r6,24(sp)
 8003448:	d8002215 	stw	zero,136(sp)
 800344c:	d8800117 	ldw	r2,4(sp)
 8003450:	10008916 	blt	r2,zero,8003678 <_dtoa_r+0x990>
 8003454:	d9000517 	ldw	r4,20(sp)
 8003458:	00c00384 	movi	r3,14
 800345c:	19008616 	blt	r3,r4,8003678 <_dtoa_r+0x990>
 8003460:	200490fa 	slli	r2,r4,3
 8003464:	00c20074 	movhi	r3,2049
 8003468:	d9802217 	ldw	r6,136(sp)
 800346c:	18c61d04 	addi	r3,r3,6260
 8003470:	1885883a 	add	r2,r3,r2
 8003474:	14000017 	ldw	r16,0(r2)
 8003478:	14400117 	ldw	r17,4(r2)
 800347c:	30016316 	blt	r6,zero,8003a0c <_dtoa_r+0xd24>
 8003480:	800d883a 	mov	r6,r16
 8003484:	880f883a 	mov	r7,r17
 8003488:	9009883a 	mov	r4,r18
 800348c:	980b883a 	mov	r5,r19
 8003490:	800b0500 	call	800b050 <__divdf3>
 8003494:	180b883a 	mov	r5,r3
 8003498:	1009883a 	mov	r4,r2
 800349c:	800cba40 	call	800cba4 <__fixdfsi>
 80034a0:	1009883a 	mov	r4,r2
 80034a4:	102b883a 	mov	r21,r2
 80034a8:	800cc240 	call	800cc24 <__floatsidf>
 80034ac:	800d883a 	mov	r6,r16
 80034b0:	880f883a 	mov	r7,r17
 80034b4:	1009883a 	mov	r4,r2
 80034b8:	180b883a 	mov	r5,r3
 80034bc:	800bb900 	call	800bb90 <__muldf3>
 80034c0:	100d883a 	mov	r6,r2
 80034c4:	180f883a 	mov	r7,r3
 80034c8:	9009883a 	mov	r4,r18
 80034cc:	980b883a 	mov	r5,r19
 80034d0:	800c2a80 	call	800c2a8 <__subdf3>
 80034d4:	d9c00717 	ldw	r7,28(sp)
 80034d8:	1009883a 	mov	r4,r2
 80034dc:	a8800c04 	addi	r2,r21,48
 80034e0:	38800005 	stb	r2,0(r7)
 80034e4:	3dc00044 	addi	r23,r7,1
 80034e8:	d9c00617 	ldw	r7,24(sp)
 80034ec:	01800044 	movi	r6,1
 80034f0:	180b883a 	mov	r5,r3
 80034f4:	2005883a 	mov	r2,r4
 80034f8:	39803826 	beq	r7,r6,80035dc <_dtoa_r+0x8f4>
 80034fc:	000d883a 	mov	r6,zero
 8003500:	01d00934 	movhi	r7,16420
 8003504:	800bb900 	call	800bb90 <__muldf3>
 8003508:	000d883a 	mov	r6,zero
 800350c:	000f883a 	mov	r7,zero
 8003510:	1009883a 	mov	r4,r2
 8003514:	180b883a 	mov	r5,r3
 8003518:	1025883a 	mov	r18,r2
 800351c:	1827883a 	mov	r19,r3
 8003520:	800b9380 	call	800b938 <__eqdf2>
 8003524:	103f9a26 	beq	r2,zero,8003390 <__alt_data_end+0xff003390>
 8003528:	d9c00617 	ldw	r7,24(sp)
 800352c:	d8c00717 	ldw	r3,28(sp)
 8003530:	b829883a 	mov	r20,r23
 8003534:	38bfffc4 	addi	r2,r7,-1
 8003538:	18ad883a 	add	r22,r3,r2
 800353c:	00000a06 	br	8003568 <_dtoa_r+0x880>
 8003540:	800bb900 	call	800bb90 <__muldf3>
 8003544:	000d883a 	mov	r6,zero
 8003548:	000f883a 	mov	r7,zero
 800354c:	1009883a 	mov	r4,r2
 8003550:	180b883a 	mov	r5,r3
 8003554:	1025883a 	mov	r18,r2
 8003558:	1827883a 	mov	r19,r3
 800355c:	b829883a 	mov	r20,r23
 8003560:	800b9380 	call	800b938 <__eqdf2>
 8003564:	103f8a26 	beq	r2,zero,8003390 <__alt_data_end+0xff003390>
 8003568:	800d883a 	mov	r6,r16
 800356c:	880f883a 	mov	r7,r17
 8003570:	9009883a 	mov	r4,r18
 8003574:	980b883a 	mov	r5,r19
 8003578:	800b0500 	call	800b050 <__divdf3>
 800357c:	180b883a 	mov	r5,r3
 8003580:	1009883a 	mov	r4,r2
 8003584:	800cba40 	call	800cba4 <__fixdfsi>
 8003588:	1009883a 	mov	r4,r2
 800358c:	102b883a 	mov	r21,r2
 8003590:	800cc240 	call	800cc24 <__floatsidf>
 8003594:	800d883a 	mov	r6,r16
 8003598:	880f883a 	mov	r7,r17
 800359c:	1009883a 	mov	r4,r2
 80035a0:	180b883a 	mov	r5,r3
 80035a4:	800bb900 	call	800bb90 <__muldf3>
 80035a8:	100d883a 	mov	r6,r2
 80035ac:	180f883a 	mov	r7,r3
 80035b0:	9009883a 	mov	r4,r18
 80035b4:	980b883a 	mov	r5,r19
 80035b8:	800c2a80 	call	800c2a8 <__subdf3>
 80035bc:	aa000c04 	addi	r8,r21,48
 80035c0:	a2000005 	stb	r8,0(r20)
 80035c4:	000d883a 	mov	r6,zero
 80035c8:	01d00934 	movhi	r7,16420
 80035cc:	1009883a 	mov	r4,r2
 80035d0:	180b883a 	mov	r5,r3
 80035d4:	a5c00044 	addi	r23,r20,1
 80035d8:	b53fd91e 	bne	r22,r20,8003540 <__alt_data_end+0xff003540>
 80035dc:	100d883a 	mov	r6,r2
 80035e0:	180f883a 	mov	r7,r3
 80035e4:	1009883a 	mov	r4,r2
 80035e8:	180b883a 	mov	r5,r3
 80035ec:	800a7a40 	call	800a7a4 <__adddf3>
 80035f0:	100d883a 	mov	r6,r2
 80035f4:	180f883a 	mov	r7,r3
 80035f8:	8009883a 	mov	r4,r16
 80035fc:	880b883a 	mov	r5,r17
 8003600:	1027883a 	mov	r19,r2
 8003604:	1825883a 	mov	r18,r3
 8003608:	800ba9c0 	call	800ba9c <__ledf2>
 800360c:	10000816 	blt	r2,zero,8003630 <_dtoa_r+0x948>
 8003610:	980d883a 	mov	r6,r19
 8003614:	900f883a 	mov	r7,r18
 8003618:	8009883a 	mov	r4,r16
 800361c:	880b883a 	mov	r5,r17
 8003620:	800b9380 	call	800b938 <__eqdf2>
 8003624:	103f5a1e 	bne	r2,zero,8003390 <__alt_data_end+0xff003390>
 8003628:	ad40004c 	andi	r21,r21,1
 800362c:	a83f5826 	beq	r21,zero,8003390 <__alt_data_end+0xff003390>
 8003630:	bd3fffc3 	ldbu	r20,-1(r23)
 8003634:	b8bfffc4 	addi	r2,r23,-1
 8003638:	1007883a 	mov	r3,r2
 800363c:	01400e44 	movi	r5,57
 8003640:	d9800717 	ldw	r6,28(sp)
 8003644:	00000506 	br	800365c <_dtoa_r+0x974>
 8003648:	18ffffc4 	addi	r3,r3,-1
 800364c:	11824726 	beq	r2,r6,8003f6c <_dtoa_r+0x1284>
 8003650:	1d000003 	ldbu	r20,0(r3)
 8003654:	102f883a 	mov	r23,r2
 8003658:	10bfffc4 	addi	r2,r2,-1
 800365c:	a1003fcc 	andi	r4,r20,255
 8003660:	2100201c 	xori	r4,r4,128
 8003664:	213fe004 	addi	r4,r4,-128
 8003668:	217ff726 	beq	r4,r5,8003648 <__alt_data_end+0xff003648>
 800366c:	a2000044 	addi	r8,r20,1
 8003670:	12000005 	stb	r8,0(r2)
 8003674:	003f4606 	br	8003390 <__alt_data_end+0xff003390>
 8003678:	d9000b17 	ldw	r4,44(sp)
 800367c:	2000c826 	beq	r4,zero,80039a0 <_dtoa_r+0xcb8>
 8003680:	d9800317 	ldw	r6,12(sp)
 8003684:	00c00044 	movi	r3,1
 8003688:	1980f90e 	bge	r3,r6,8003a70 <_dtoa_r+0xd88>
 800368c:	d8800617 	ldw	r2,24(sp)
 8003690:	d8c00a17 	ldw	r3,40(sp)
 8003694:	157fffc4 	addi	r21,r2,-1
 8003698:	1d41f316 	blt	r3,r21,8003e68 <_dtoa_r+0x1180>
 800369c:	1d6bc83a 	sub	r21,r3,r21
 80036a0:	d9c00617 	ldw	r7,24(sp)
 80036a4:	3802aa16 	blt	r7,zero,8004150 <_dtoa_r+0x1468>
 80036a8:	dd000817 	ldw	r20,32(sp)
 80036ac:	d8800617 	ldw	r2,24(sp)
 80036b0:	d8c00817 	ldw	r3,32(sp)
 80036b4:	01400044 	movi	r5,1
 80036b8:	e009883a 	mov	r4,fp
 80036bc:	1887883a 	add	r3,r3,r2
 80036c0:	d8c00815 	stw	r3,32(sp)
 80036c4:	b0ad883a 	add	r22,r22,r2
 80036c8:	80067900 	call	8006790 <__i2b>
 80036cc:	1023883a 	mov	r17,r2
 80036d0:	a0000826 	beq	r20,zero,80036f4 <_dtoa_r+0xa0c>
 80036d4:	0580070e 	bge	zero,r22,80036f4 <_dtoa_r+0xa0c>
 80036d8:	a005883a 	mov	r2,r20
 80036dc:	b500b916 	blt	r22,r20,80039c4 <_dtoa_r+0xcdc>
 80036e0:	d9000817 	ldw	r4,32(sp)
 80036e4:	a0a9c83a 	sub	r20,r20,r2
 80036e8:	b0adc83a 	sub	r22,r22,r2
 80036ec:	2089c83a 	sub	r4,r4,r2
 80036f0:	d9000815 	stw	r4,32(sp)
 80036f4:	d9800a17 	ldw	r6,40(sp)
 80036f8:	0181810e 	bge	zero,r6,8003d00 <_dtoa_r+0x1018>
 80036fc:	d9c00b17 	ldw	r7,44(sp)
 8003700:	3800b326 	beq	r7,zero,80039d0 <_dtoa_r+0xce8>
 8003704:	a800b226 	beq	r21,zero,80039d0 <_dtoa_r+0xce8>
 8003708:	880b883a 	mov	r5,r17
 800370c:	a80d883a 	mov	r6,r21
 8003710:	e009883a 	mov	r4,fp
 8003714:	80069c40 	call	80069c4 <__pow5mult>
 8003718:	d9800917 	ldw	r6,36(sp)
 800371c:	100b883a 	mov	r5,r2
 8003720:	e009883a 	mov	r4,fp
 8003724:	1023883a 	mov	r17,r2
 8003728:	80067cc0 	call	80067cc <__multiply>
 800372c:	1021883a 	mov	r16,r2
 8003730:	d8800a17 	ldw	r2,40(sp)
 8003734:	d9400917 	ldw	r5,36(sp)
 8003738:	e009883a 	mov	r4,fp
 800373c:	1545c83a 	sub	r2,r2,r21
 8003740:	d8800a15 	stw	r2,40(sp)
 8003744:	800642c0 	call	800642c <_Bfree>
 8003748:	d8c00a17 	ldw	r3,40(sp)
 800374c:	18009f1e 	bne	r3,zero,80039cc <_dtoa_r+0xce4>
 8003750:	05c00044 	movi	r23,1
 8003754:	e009883a 	mov	r4,fp
 8003758:	b80b883a 	mov	r5,r23
 800375c:	80067900 	call	8006790 <__i2b>
 8003760:	d9000d17 	ldw	r4,52(sp)
 8003764:	102b883a 	mov	r21,r2
 8003768:	2000ce26 	beq	r4,zero,8003aa4 <_dtoa_r+0xdbc>
 800376c:	200d883a 	mov	r6,r4
 8003770:	100b883a 	mov	r5,r2
 8003774:	e009883a 	mov	r4,fp
 8003778:	80069c40 	call	80069c4 <__pow5mult>
 800377c:	d9800317 	ldw	r6,12(sp)
 8003780:	102b883a 	mov	r21,r2
 8003784:	b981810e 	bge	r23,r6,8003d8c <_dtoa_r+0x10a4>
 8003788:	0027883a 	mov	r19,zero
 800378c:	a8800417 	ldw	r2,16(r21)
 8003790:	05c00804 	movi	r23,32
 8003794:	10800104 	addi	r2,r2,4
 8003798:	1085883a 	add	r2,r2,r2
 800379c:	1085883a 	add	r2,r2,r2
 80037a0:	a885883a 	add	r2,r21,r2
 80037a4:	11000017 	ldw	r4,0(r2)
 80037a8:	80066780 	call	8006678 <__hi0bits>
 80037ac:	b885c83a 	sub	r2,r23,r2
 80037b0:	1585883a 	add	r2,r2,r22
 80037b4:	108007cc 	andi	r2,r2,31
 80037b8:	1000b326 	beq	r2,zero,8003a88 <_dtoa_r+0xda0>
 80037bc:	00c00804 	movi	r3,32
 80037c0:	1887c83a 	sub	r3,r3,r2
 80037c4:	01000104 	movi	r4,4
 80037c8:	20c2cd0e 	bge	r4,r3,8004300 <_dtoa_r+0x1618>
 80037cc:	00c00704 	movi	r3,28
 80037d0:	1885c83a 	sub	r2,r3,r2
 80037d4:	d8c00817 	ldw	r3,32(sp)
 80037d8:	a0a9883a 	add	r20,r20,r2
 80037dc:	b0ad883a 	add	r22,r22,r2
 80037e0:	1887883a 	add	r3,r3,r2
 80037e4:	d8c00815 	stw	r3,32(sp)
 80037e8:	d9800817 	ldw	r6,32(sp)
 80037ec:	0180040e 	bge	zero,r6,8003800 <_dtoa_r+0xb18>
 80037f0:	800b883a 	mov	r5,r16
 80037f4:	e009883a 	mov	r4,fp
 80037f8:	8006b040 	call	8006b04 <__lshift>
 80037fc:	1021883a 	mov	r16,r2
 8003800:	0580050e 	bge	zero,r22,8003818 <_dtoa_r+0xb30>
 8003804:	a80b883a 	mov	r5,r21
 8003808:	b00d883a 	mov	r6,r22
 800380c:	e009883a 	mov	r4,fp
 8003810:	8006b040 	call	8006b04 <__lshift>
 8003814:	102b883a 	mov	r21,r2
 8003818:	d9c00e17 	ldw	r7,56(sp)
 800381c:	3801211e 	bne	r7,zero,8003ca4 <_dtoa_r+0xfbc>
 8003820:	d9800617 	ldw	r6,24(sp)
 8003824:	0181380e 	bge	zero,r6,8003d08 <_dtoa_r+0x1020>
 8003828:	d8c00b17 	ldw	r3,44(sp)
 800382c:	1800ab1e 	bne	r3,zero,8003adc <_dtoa_r+0xdf4>
 8003830:	dc800717 	ldw	r18,28(sp)
 8003834:	dcc00617 	ldw	r19,24(sp)
 8003838:	9029883a 	mov	r20,r18
 800383c:	00000206 	br	8003848 <_dtoa_r+0xb60>
 8003840:	80064540 	call	8006454 <__multadd>
 8003844:	1021883a 	mov	r16,r2
 8003848:	a80b883a 	mov	r5,r21
 800384c:	8009883a 	mov	r4,r16
 8003850:	8002ae80 	call	8002ae8 <quorem>
 8003854:	10800c04 	addi	r2,r2,48
 8003858:	90800005 	stb	r2,0(r18)
 800385c:	94800044 	addi	r18,r18,1
 8003860:	9507c83a 	sub	r3,r18,r20
 8003864:	000f883a 	mov	r7,zero
 8003868:	01800284 	movi	r6,10
 800386c:	800b883a 	mov	r5,r16
 8003870:	e009883a 	mov	r4,fp
 8003874:	1cfff216 	blt	r3,r19,8003840 <__alt_data_end+0xff003840>
 8003878:	1011883a 	mov	r8,r2
 800387c:	d8800617 	ldw	r2,24(sp)
 8003880:	0082370e 	bge	zero,r2,8004160 <_dtoa_r+0x1478>
 8003884:	d9000717 	ldw	r4,28(sp)
 8003888:	0025883a 	mov	r18,zero
 800388c:	20af883a 	add	r23,r4,r2
 8003890:	01800044 	movi	r6,1
 8003894:	800b883a 	mov	r5,r16
 8003898:	e009883a 	mov	r4,fp
 800389c:	da001715 	stw	r8,92(sp)
 80038a0:	8006b040 	call	8006b04 <__lshift>
 80038a4:	a80b883a 	mov	r5,r21
 80038a8:	1009883a 	mov	r4,r2
 80038ac:	d8800915 	stw	r2,36(sp)
 80038b0:	8006c4c0 	call	8006c4c <__mcmp>
 80038b4:	da001717 	ldw	r8,92(sp)
 80038b8:	0081800e 	bge	zero,r2,8003ebc <_dtoa_r+0x11d4>
 80038bc:	b93fffc3 	ldbu	r4,-1(r23)
 80038c0:	b8bfffc4 	addi	r2,r23,-1
 80038c4:	1007883a 	mov	r3,r2
 80038c8:	01800e44 	movi	r6,57
 80038cc:	d9c00717 	ldw	r7,28(sp)
 80038d0:	00000506 	br	80038e8 <_dtoa_r+0xc00>
 80038d4:	18ffffc4 	addi	r3,r3,-1
 80038d8:	11c12326 	beq	r2,r7,8003d68 <_dtoa_r+0x1080>
 80038dc:	19000003 	ldbu	r4,0(r3)
 80038e0:	102f883a 	mov	r23,r2
 80038e4:	10bfffc4 	addi	r2,r2,-1
 80038e8:	21403fcc 	andi	r5,r4,255
 80038ec:	2940201c 	xori	r5,r5,128
 80038f0:	297fe004 	addi	r5,r5,-128
 80038f4:	29bff726 	beq	r5,r6,80038d4 <__alt_data_end+0xff0038d4>
 80038f8:	21000044 	addi	r4,r4,1
 80038fc:	11000005 	stb	r4,0(r2)
 8003900:	a80b883a 	mov	r5,r21
 8003904:	e009883a 	mov	r4,fp
 8003908:	800642c0 	call	800642c <_Bfree>
 800390c:	883ea026 	beq	r17,zero,8003390 <__alt_data_end+0xff003390>
 8003910:	90000426 	beq	r18,zero,8003924 <_dtoa_r+0xc3c>
 8003914:	94400326 	beq	r18,r17,8003924 <_dtoa_r+0xc3c>
 8003918:	900b883a 	mov	r5,r18
 800391c:	e009883a 	mov	r4,fp
 8003920:	800642c0 	call	800642c <_Bfree>
 8003924:	880b883a 	mov	r5,r17
 8003928:	e009883a 	mov	r4,fp
 800392c:	800642c0 	call	800642c <_Bfree>
 8003930:	003e9706 	br	8003390 <__alt_data_end+0xff003390>
 8003934:	01800044 	movi	r6,1
 8003938:	d9800e15 	stw	r6,56(sp)
 800393c:	003d9606 	br	8002f98 <__alt_data_end+0xff002f98>
 8003940:	d8800817 	ldw	r2,32(sp)
 8003944:	d8c00517 	ldw	r3,20(sp)
 8003948:	d8000d15 	stw	zero,52(sp)
 800394c:	10c5c83a 	sub	r2,r2,r3
 8003950:	00c9c83a 	sub	r4,zero,r3
 8003954:	d8800815 	stw	r2,32(sp)
 8003958:	d9000a15 	stw	r4,40(sp)
 800395c:	003d9706 	br	8002fbc <__alt_data_end+0xff002fbc>
 8003960:	05adc83a 	sub	r22,zero,r22
 8003964:	dd800815 	stw	r22,32(sp)
 8003968:	002d883a 	mov	r22,zero
 800396c:	003d8e06 	br	8002fa8 <__alt_data_end+0xff002fa8>
 8003970:	d9000517 	ldw	r4,20(sp)
 8003974:	800cc240 	call	800cc24 <__floatsidf>
 8003978:	100d883a 	mov	r6,r2
 800397c:	180f883a 	mov	r7,r3
 8003980:	a009883a 	mov	r4,r20
 8003984:	880b883a 	mov	r5,r17
 8003988:	800b9380 	call	800b938 <__eqdf2>
 800398c:	103d7126 	beq	r2,zero,8002f54 <__alt_data_end+0xff002f54>
 8003990:	d9c00517 	ldw	r7,20(sp)
 8003994:	39ffffc4 	addi	r7,r7,-1
 8003998:	d9c00515 	stw	r7,20(sp)
 800399c:	003d6d06 	br	8002f54 <__alt_data_end+0xff002f54>
 80039a0:	dd400a17 	ldw	r21,40(sp)
 80039a4:	dd000817 	ldw	r20,32(sp)
 80039a8:	0023883a 	mov	r17,zero
 80039ac:	003f4806 	br	80036d0 <__alt_data_end+0xff0036d0>
 80039b0:	10e3c83a 	sub	r17,r2,r3
 80039b4:	9448983a 	sll	r4,r18,r17
 80039b8:	003d3206 	br	8002e84 <__alt_data_end+0xff002e84>
 80039bc:	d8000e15 	stw	zero,56(sp)
 80039c0:	003d7506 	br	8002f98 <__alt_data_end+0xff002f98>
 80039c4:	b005883a 	mov	r2,r22
 80039c8:	003f4506 	br	80036e0 <__alt_data_end+0xff0036e0>
 80039cc:	dc000915 	stw	r16,36(sp)
 80039d0:	d9800a17 	ldw	r6,40(sp)
 80039d4:	d9400917 	ldw	r5,36(sp)
 80039d8:	e009883a 	mov	r4,fp
 80039dc:	80069c40 	call	80069c4 <__pow5mult>
 80039e0:	1021883a 	mov	r16,r2
 80039e4:	003f5a06 	br	8003750 <__alt_data_end+0xff003750>
 80039e8:	01c00044 	movi	r7,1
 80039ec:	d9c00b15 	stw	r7,44(sp)
 80039f0:	d8802217 	ldw	r2,136(sp)
 80039f4:	0081280e 	bge	zero,r2,8003e98 <_dtoa_r+0x11b0>
 80039f8:	100d883a 	mov	r6,r2
 80039fc:	1021883a 	mov	r16,r2
 8003a00:	d8800c15 	stw	r2,48(sp)
 8003a04:	d8800615 	stw	r2,24(sp)
 8003a08:	003d8806 	br	800302c <__alt_data_end+0xff00302c>
 8003a0c:	d8800617 	ldw	r2,24(sp)
 8003a10:	00be9b16 	blt	zero,r2,8003480 <__alt_data_end+0xff003480>
 8003a14:	10010f1e 	bne	r2,zero,8003e54 <_dtoa_r+0x116c>
 8003a18:	880b883a 	mov	r5,r17
 8003a1c:	000d883a 	mov	r6,zero
 8003a20:	01d00534 	movhi	r7,16404
 8003a24:	8009883a 	mov	r4,r16
 8003a28:	800bb900 	call	800bb90 <__muldf3>
 8003a2c:	900d883a 	mov	r6,r18
 8003a30:	980f883a 	mov	r7,r19
 8003a34:	1009883a 	mov	r4,r2
 8003a38:	180b883a 	mov	r5,r3
 8003a3c:	800b9c00 	call	800b9c0 <__gedf2>
 8003a40:	002b883a 	mov	r21,zero
 8003a44:	0023883a 	mov	r17,zero
 8003a48:	1000bf16 	blt	r2,zero,8003d48 <_dtoa_r+0x1060>
 8003a4c:	d9802217 	ldw	r6,136(sp)
 8003a50:	ddc00717 	ldw	r23,28(sp)
 8003a54:	018c303a 	nor	r6,zero,r6
 8003a58:	d9800515 	stw	r6,20(sp)
 8003a5c:	a80b883a 	mov	r5,r21
 8003a60:	e009883a 	mov	r4,fp
 8003a64:	800642c0 	call	800642c <_Bfree>
 8003a68:	883e4926 	beq	r17,zero,8003390 <__alt_data_end+0xff003390>
 8003a6c:	003fad06 	br	8003924 <__alt_data_end+0xff003924>
 8003a70:	d9c01117 	ldw	r7,68(sp)
 8003a74:	3801bc26 	beq	r7,zero,8004168 <_dtoa_r+0x1480>
 8003a78:	10810cc4 	addi	r2,r2,1075
 8003a7c:	dd400a17 	ldw	r21,40(sp)
 8003a80:	dd000817 	ldw	r20,32(sp)
 8003a84:	003f0a06 	br	80036b0 <__alt_data_end+0xff0036b0>
 8003a88:	00800704 	movi	r2,28
 8003a8c:	d9000817 	ldw	r4,32(sp)
 8003a90:	a0a9883a 	add	r20,r20,r2
 8003a94:	b0ad883a 	add	r22,r22,r2
 8003a98:	2089883a 	add	r4,r4,r2
 8003a9c:	d9000815 	stw	r4,32(sp)
 8003aa0:	003f5106 	br	80037e8 <__alt_data_end+0xff0037e8>
 8003aa4:	d8c00317 	ldw	r3,12(sp)
 8003aa8:	b8c1fc0e 	bge	r23,r3,800429c <_dtoa_r+0x15b4>
 8003aac:	0027883a 	mov	r19,zero
 8003ab0:	b805883a 	mov	r2,r23
 8003ab4:	003f3e06 	br	80037b0 <__alt_data_end+0xff0037b0>
 8003ab8:	880b883a 	mov	r5,r17
 8003abc:	e009883a 	mov	r4,fp
 8003ac0:	000f883a 	mov	r7,zero
 8003ac4:	01800284 	movi	r6,10
 8003ac8:	80064540 	call	8006454 <__multadd>
 8003acc:	d9000c17 	ldw	r4,48(sp)
 8003ad0:	1023883a 	mov	r17,r2
 8003ad4:	0102040e 	bge	zero,r4,80042e8 <_dtoa_r+0x1600>
 8003ad8:	d9000615 	stw	r4,24(sp)
 8003adc:	0500050e 	bge	zero,r20,8003af4 <_dtoa_r+0xe0c>
 8003ae0:	880b883a 	mov	r5,r17
 8003ae4:	a00d883a 	mov	r6,r20
 8003ae8:	e009883a 	mov	r4,fp
 8003aec:	8006b040 	call	8006b04 <__lshift>
 8003af0:	1023883a 	mov	r17,r2
 8003af4:	9801241e 	bne	r19,zero,8003f88 <_dtoa_r+0x12a0>
 8003af8:	8829883a 	mov	r20,r17
 8003afc:	d9000617 	ldw	r4,24(sp)
 8003b00:	dcc00717 	ldw	r19,28(sp)
 8003b04:	9480004c 	andi	r18,r18,1
 8003b08:	20bfffc4 	addi	r2,r4,-1
 8003b0c:	9885883a 	add	r2,r19,r2
 8003b10:	d8800415 	stw	r2,16(sp)
 8003b14:	dc800615 	stw	r18,24(sp)
 8003b18:	a80b883a 	mov	r5,r21
 8003b1c:	8009883a 	mov	r4,r16
 8003b20:	8002ae80 	call	8002ae8 <quorem>
 8003b24:	880b883a 	mov	r5,r17
 8003b28:	8009883a 	mov	r4,r16
 8003b2c:	102f883a 	mov	r23,r2
 8003b30:	8006c4c0 	call	8006c4c <__mcmp>
 8003b34:	a80b883a 	mov	r5,r21
 8003b38:	a00d883a 	mov	r6,r20
 8003b3c:	e009883a 	mov	r4,fp
 8003b40:	102d883a 	mov	r22,r2
 8003b44:	8006cac0 	call	8006cac <__mdiff>
 8003b48:	1007883a 	mov	r3,r2
 8003b4c:	10800317 	ldw	r2,12(r2)
 8003b50:	bc800c04 	addi	r18,r23,48
 8003b54:	180b883a 	mov	r5,r3
 8003b58:	10004e1e 	bne	r2,zero,8003c94 <_dtoa_r+0xfac>
 8003b5c:	8009883a 	mov	r4,r16
 8003b60:	d8c01615 	stw	r3,88(sp)
 8003b64:	8006c4c0 	call	8006c4c <__mcmp>
 8003b68:	d8c01617 	ldw	r3,88(sp)
 8003b6c:	e009883a 	mov	r4,fp
 8003b70:	d8801615 	stw	r2,88(sp)
 8003b74:	180b883a 	mov	r5,r3
 8003b78:	800642c0 	call	800642c <_Bfree>
 8003b7c:	d8801617 	ldw	r2,88(sp)
 8003b80:	1000041e 	bne	r2,zero,8003b94 <_dtoa_r+0xeac>
 8003b84:	d9800317 	ldw	r6,12(sp)
 8003b88:	3000021e 	bne	r6,zero,8003b94 <_dtoa_r+0xeac>
 8003b8c:	d8c00617 	ldw	r3,24(sp)
 8003b90:	18003726 	beq	r3,zero,8003c70 <_dtoa_r+0xf88>
 8003b94:	b0002016 	blt	r22,zero,8003c18 <_dtoa_r+0xf30>
 8003b98:	b000041e 	bne	r22,zero,8003bac <_dtoa_r+0xec4>
 8003b9c:	d9000317 	ldw	r4,12(sp)
 8003ba0:	2000021e 	bne	r4,zero,8003bac <_dtoa_r+0xec4>
 8003ba4:	d8c00617 	ldw	r3,24(sp)
 8003ba8:	18001b26 	beq	r3,zero,8003c18 <_dtoa_r+0xf30>
 8003bac:	00810716 	blt	zero,r2,8003fcc <_dtoa_r+0x12e4>
 8003bb0:	d8c00417 	ldw	r3,16(sp)
 8003bb4:	9d800044 	addi	r22,r19,1
 8003bb8:	9c800005 	stb	r18,0(r19)
 8003bbc:	b02f883a 	mov	r23,r22
 8003bc0:	98c10626 	beq	r19,r3,8003fdc <_dtoa_r+0x12f4>
 8003bc4:	800b883a 	mov	r5,r16
 8003bc8:	000f883a 	mov	r7,zero
 8003bcc:	01800284 	movi	r6,10
 8003bd0:	e009883a 	mov	r4,fp
 8003bd4:	80064540 	call	8006454 <__multadd>
 8003bd8:	1021883a 	mov	r16,r2
 8003bdc:	000f883a 	mov	r7,zero
 8003be0:	01800284 	movi	r6,10
 8003be4:	880b883a 	mov	r5,r17
 8003be8:	e009883a 	mov	r4,fp
 8003bec:	8d002526 	beq	r17,r20,8003c84 <_dtoa_r+0xf9c>
 8003bf0:	80064540 	call	8006454 <__multadd>
 8003bf4:	a00b883a 	mov	r5,r20
 8003bf8:	000f883a 	mov	r7,zero
 8003bfc:	01800284 	movi	r6,10
 8003c00:	e009883a 	mov	r4,fp
 8003c04:	1023883a 	mov	r17,r2
 8003c08:	80064540 	call	8006454 <__multadd>
 8003c0c:	1029883a 	mov	r20,r2
 8003c10:	b027883a 	mov	r19,r22
 8003c14:	003fc006 	br	8003b18 <__alt_data_end+0xff003b18>
 8003c18:	9011883a 	mov	r8,r18
 8003c1c:	00800e0e 	bge	zero,r2,8003c58 <_dtoa_r+0xf70>
 8003c20:	800b883a 	mov	r5,r16
 8003c24:	01800044 	movi	r6,1
 8003c28:	e009883a 	mov	r4,fp
 8003c2c:	da001715 	stw	r8,92(sp)
 8003c30:	8006b040 	call	8006b04 <__lshift>
 8003c34:	a80b883a 	mov	r5,r21
 8003c38:	1009883a 	mov	r4,r2
 8003c3c:	1021883a 	mov	r16,r2
 8003c40:	8006c4c0 	call	8006c4c <__mcmp>
 8003c44:	da001717 	ldw	r8,92(sp)
 8003c48:	0081960e 	bge	zero,r2,80042a4 <_dtoa_r+0x15bc>
 8003c4c:	00800e44 	movi	r2,57
 8003c50:	40817026 	beq	r8,r2,8004214 <_dtoa_r+0x152c>
 8003c54:	ba000c44 	addi	r8,r23,49
 8003c58:	8825883a 	mov	r18,r17
 8003c5c:	9dc00044 	addi	r23,r19,1
 8003c60:	9a000005 	stb	r8,0(r19)
 8003c64:	a023883a 	mov	r17,r20
 8003c68:	dc000915 	stw	r16,36(sp)
 8003c6c:	003f2406 	br	8003900 <__alt_data_end+0xff003900>
 8003c70:	00800e44 	movi	r2,57
 8003c74:	9011883a 	mov	r8,r18
 8003c78:	90816626 	beq	r18,r2,8004214 <_dtoa_r+0x152c>
 8003c7c:	05bff516 	blt	zero,r22,8003c54 <__alt_data_end+0xff003c54>
 8003c80:	003ff506 	br	8003c58 <__alt_data_end+0xff003c58>
 8003c84:	80064540 	call	8006454 <__multadd>
 8003c88:	1023883a 	mov	r17,r2
 8003c8c:	1029883a 	mov	r20,r2
 8003c90:	003fdf06 	br	8003c10 <__alt_data_end+0xff003c10>
 8003c94:	e009883a 	mov	r4,fp
 8003c98:	800642c0 	call	800642c <_Bfree>
 8003c9c:	00800044 	movi	r2,1
 8003ca0:	003fbc06 	br	8003b94 <__alt_data_end+0xff003b94>
 8003ca4:	a80b883a 	mov	r5,r21
 8003ca8:	8009883a 	mov	r4,r16
 8003cac:	8006c4c0 	call	8006c4c <__mcmp>
 8003cb0:	103edb0e 	bge	r2,zero,8003820 <__alt_data_end+0xff003820>
 8003cb4:	800b883a 	mov	r5,r16
 8003cb8:	000f883a 	mov	r7,zero
 8003cbc:	01800284 	movi	r6,10
 8003cc0:	e009883a 	mov	r4,fp
 8003cc4:	80064540 	call	8006454 <__multadd>
 8003cc8:	1021883a 	mov	r16,r2
 8003ccc:	d8800517 	ldw	r2,20(sp)
 8003cd0:	d8c00b17 	ldw	r3,44(sp)
 8003cd4:	10bfffc4 	addi	r2,r2,-1
 8003cd8:	d8800515 	stw	r2,20(sp)
 8003cdc:	183f761e 	bne	r3,zero,8003ab8 <__alt_data_end+0xff003ab8>
 8003ce0:	d9000c17 	ldw	r4,48(sp)
 8003ce4:	0101730e 	bge	zero,r4,80042b4 <_dtoa_r+0x15cc>
 8003ce8:	d9000615 	stw	r4,24(sp)
 8003cec:	003ed006 	br	8003830 <__alt_data_end+0xff003830>
 8003cf0:	00800084 	movi	r2,2
 8003cf4:	3081861e 	bne	r6,r2,8004310 <_dtoa_r+0x1628>
 8003cf8:	d8000b15 	stw	zero,44(sp)
 8003cfc:	003f3c06 	br	80039f0 <__alt_data_end+0xff0039f0>
 8003d00:	dc000917 	ldw	r16,36(sp)
 8003d04:	003e9206 	br	8003750 <__alt_data_end+0xff003750>
 8003d08:	d9c00317 	ldw	r7,12(sp)
 8003d0c:	00800084 	movi	r2,2
 8003d10:	11fec50e 	bge	r2,r7,8003828 <__alt_data_end+0xff003828>
 8003d14:	d9000617 	ldw	r4,24(sp)
 8003d18:	20013c1e 	bne	r4,zero,800420c <_dtoa_r+0x1524>
 8003d1c:	a80b883a 	mov	r5,r21
 8003d20:	000f883a 	mov	r7,zero
 8003d24:	01800144 	movi	r6,5
 8003d28:	e009883a 	mov	r4,fp
 8003d2c:	80064540 	call	8006454 <__multadd>
 8003d30:	100b883a 	mov	r5,r2
 8003d34:	8009883a 	mov	r4,r16
 8003d38:	102b883a 	mov	r21,r2
 8003d3c:	8006c4c0 	call	8006c4c <__mcmp>
 8003d40:	dc000915 	stw	r16,36(sp)
 8003d44:	00bf410e 	bge	zero,r2,8003a4c <__alt_data_end+0xff003a4c>
 8003d48:	d9c00717 	ldw	r7,28(sp)
 8003d4c:	00800c44 	movi	r2,49
 8003d50:	38800005 	stb	r2,0(r7)
 8003d54:	d8800517 	ldw	r2,20(sp)
 8003d58:	3dc00044 	addi	r23,r7,1
 8003d5c:	10800044 	addi	r2,r2,1
 8003d60:	d8800515 	stw	r2,20(sp)
 8003d64:	003f3d06 	br	8003a5c <__alt_data_end+0xff003a5c>
 8003d68:	d9800517 	ldw	r6,20(sp)
 8003d6c:	d9c00717 	ldw	r7,28(sp)
 8003d70:	00800c44 	movi	r2,49
 8003d74:	31800044 	addi	r6,r6,1
 8003d78:	d9800515 	stw	r6,20(sp)
 8003d7c:	38800005 	stb	r2,0(r7)
 8003d80:	003edf06 	br	8003900 <__alt_data_end+0xff003900>
 8003d84:	d8000b15 	stw	zero,44(sp)
 8003d88:	003c9f06 	br	8003008 <__alt_data_end+0xff003008>
 8003d8c:	903e7e1e 	bne	r18,zero,8003788 <__alt_data_end+0xff003788>
 8003d90:	00800434 	movhi	r2,16
 8003d94:	10bfffc4 	addi	r2,r2,-1
 8003d98:	9884703a 	and	r2,r19,r2
 8003d9c:	1000ea1e 	bne	r2,zero,8004148 <_dtoa_r+0x1460>
 8003da0:	9cdffc2c 	andhi	r19,r19,32752
 8003da4:	9800e826 	beq	r19,zero,8004148 <_dtoa_r+0x1460>
 8003da8:	d9c00817 	ldw	r7,32(sp)
 8003dac:	b5800044 	addi	r22,r22,1
 8003db0:	04c00044 	movi	r19,1
 8003db4:	39c00044 	addi	r7,r7,1
 8003db8:	d9c00815 	stw	r7,32(sp)
 8003dbc:	d8800d17 	ldw	r2,52(sp)
 8003dc0:	103e721e 	bne	r2,zero,800378c <__alt_data_end+0xff00378c>
 8003dc4:	00800044 	movi	r2,1
 8003dc8:	003e7906 	br	80037b0 <__alt_data_end+0xff0037b0>
 8003dcc:	8009883a 	mov	r4,r16
 8003dd0:	800cc240 	call	800cc24 <__floatsidf>
 8003dd4:	d9800f17 	ldw	r6,60(sp)
 8003dd8:	d9c01017 	ldw	r7,64(sp)
 8003ddc:	1009883a 	mov	r4,r2
 8003de0:	180b883a 	mov	r5,r3
 8003de4:	800bb900 	call	800bb90 <__muldf3>
 8003de8:	000d883a 	mov	r6,zero
 8003dec:	01d00734 	movhi	r7,16412
 8003df0:	1009883a 	mov	r4,r2
 8003df4:	180b883a 	mov	r5,r3
 8003df8:	800a7a40 	call	800a7a4 <__adddf3>
 8003dfc:	047f3034 	movhi	r17,64704
 8003e00:	1021883a 	mov	r16,r2
 8003e04:	1c63883a 	add	r17,r3,r17
 8003e08:	d9000f17 	ldw	r4,60(sp)
 8003e0c:	d9401017 	ldw	r5,64(sp)
 8003e10:	000d883a 	mov	r6,zero
 8003e14:	01d00534 	movhi	r7,16404
 8003e18:	800c2a80 	call	800c2a8 <__subdf3>
 8003e1c:	800d883a 	mov	r6,r16
 8003e20:	880f883a 	mov	r7,r17
 8003e24:	1009883a 	mov	r4,r2
 8003e28:	180b883a 	mov	r5,r3
 8003e2c:	102b883a 	mov	r21,r2
 8003e30:	1829883a 	mov	r20,r3
 8003e34:	800b9c00 	call	800b9c0 <__gedf2>
 8003e38:	00806c16 	blt	zero,r2,8003fec <_dtoa_r+0x1304>
 8003e3c:	89e0003c 	xorhi	r7,r17,32768
 8003e40:	800d883a 	mov	r6,r16
 8003e44:	a809883a 	mov	r4,r21
 8003e48:	a00b883a 	mov	r5,r20
 8003e4c:	800ba9c0 	call	800ba9c <__ledf2>
 8003e50:	103d7e0e 	bge	r2,zero,800344c <__alt_data_end+0xff00344c>
 8003e54:	002b883a 	mov	r21,zero
 8003e58:	0023883a 	mov	r17,zero
 8003e5c:	003efb06 	br	8003a4c <__alt_data_end+0xff003a4c>
 8003e60:	d8800717 	ldw	r2,28(sp)
 8003e64:	003bd006 	br	8002da8 <__alt_data_end+0xff002da8>
 8003e68:	d9000a17 	ldw	r4,40(sp)
 8003e6c:	d9800d17 	ldw	r6,52(sp)
 8003e70:	dd400a15 	stw	r21,40(sp)
 8003e74:	a905c83a 	sub	r2,r21,r4
 8003e78:	308d883a 	add	r6,r6,r2
 8003e7c:	d9800d15 	stw	r6,52(sp)
 8003e80:	002b883a 	mov	r21,zero
 8003e84:	003e0606 	br	80036a0 <__alt_data_end+0xff0036a0>
 8003e88:	9023883a 	mov	r17,r18
 8003e8c:	9829883a 	mov	r20,r19
 8003e90:	04000084 	movi	r16,2
 8003e94:	003c9206 	br	80030e0 <__alt_data_end+0xff0030e0>
 8003e98:	04000044 	movi	r16,1
 8003e9c:	dc000c15 	stw	r16,48(sp)
 8003ea0:	dc000615 	stw	r16,24(sp)
 8003ea4:	dc002215 	stw	r16,136(sp)
 8003ea8:	e0001115 	stw	zero,68(fp)
 8003eac:	000b883a 	mov	r5,zero
 8003eb0:	003c6906 	br	8003058 <__alt_data_end+0xff003058>
 8003eb4:	3021883a 	mov	r16,r6
 8003eb8:	003ffb06 	br	8003ea8 <__alt_data_end+0xff003ea8>
 8003ebc:	1000021e 	bne	r2,zero,8003ec8 <_dtoa_r+0x11e0>
 8003ec0:	4200004c 	andi	r8,r8,1
 8003ec4:	403e7d1e 	bne	r8,zero,80038bc <__alt_data_end+0xff0038bc>
 8003ec8:	01000c04 	movi	r4,48
 8003ecc:	00000106 	br	8003ed4 <_dtoa_r+0x11ec>
 8003ed0:	102f883a 	mov	r23,r2
 8003ed4:	b8bfffc4 	addi	r2,r23,-1
 8003ed8:	10c00007 	ldb	r3,0(r2)
 8003edc:	193ffc26 	beq	r3,r4,8003ed0 <__alt_data_end+0xff003ed0>
 8003ee0:	003e8706 	br	8003900 <__alt_data_end+0xff003900>
 8003ee4:	d8800517 	ldw	r2,20(sp)
 8003ee8:	00a3c83a 	sub	r17,zero,r2
 8003eec:	8800a426 	beq	r17,zero,8004180 <_dtoa_r+0x1498>
 8003ef0:	888003cc 	andi	r2,r17,15
 8003ef4:	100490fa 	slli	r2,r2,3
 8003ef8:	00c20074 	movhi	r3,2049
 8003efc:	18c61d04 	addi	r3,r3,6260
 8003f00:	1885883a 	add	r2,r3,r2
 8003f04:	11800017 	ldw	r6,0(r2)
 8003f08:	11c00117 	ldw	r7,4(r2)
 8003f0c:	9009883a 	mov	r4,r18
 8003f10:	980b883a 	mov	r5,r19
 8003f14:	8823d13a 	srai	r17,r17,4
 8003f18:	800bb900 	call	800bb90 <__muldf3>
 8003f1c:	d8800f15 	stw	r2,60(sp)
 8003f20:	d8c01015 	stw	r3,64(sp)
 8003f24:	8800e826 	beq	r17,zero,80042c8 <_dtoa_r+0x15e0>
 8003f28:	05020074 	movhi	r20,2049
 8003f2c:	a5061304 	addi	r20,r20,6220
 8003f30:	04000084 	movi	r16,2
 8003f34:	8980004c 	andi	r6,r17,1
 8003f38:	1009883a 	mov	r4,r2
 8003f3c:	8823d07a 	srai	r17,r17,1
 8003f40:	180b883a 	mov	r5,r3
 8003f44:	30000426 	beq	r6,zero,8003f58 <_dtoa_r+0x1270>
 8003f48:	a1800017 	ldw	r6,0(r20)
 8003f4c:	a1c00117 	ldw	r7,4(r20)
 8003f50:	84000044 	addi	r16,r16,1
 8003f54:	800bb900 	call	800bb90 <__muldf3>
 8003f58:	a5000204 	addi	r20,r20,8
 8003f5c:	883ff51e 	bne	r17,zero,8003f34 <__alt_data_end+0xff003f34>
 8003f60:	d8800f15 	stw	r2,60(sp)
 8003f64:	d8c01015 	stw	r3,64(sp)
 8003f68:	003c7606 	br	8003144 <__alt_data_end+0xff003144>
 8003f6c:	00c00c04 	movi	r3,48
 8003f70:	10c00005 	stb	r3,0(r2)
 8003f74:	d8c00517 	ldw	r3,20(sp)
 8003f78:	bd3fffc3 	ldbu	r20,-1(r23)
 8003f7c:	18c00044 	addi	r3,r3,1
 8003f80:	d8c00515 	stw	r3,20(sp)
 8003f84:	003db906 	br	800366c <__alt_data_end+0xff00366c>
 8003f88:	89400117 	ldw	r5,4(r17)
 8003f8c:	e009883a 	mov	r4,fp
 8003f90:	80063840 	call	8006384 <_Balloc>
 8003f94:	89800417 	ldw	r6,16(r17)
 8003f98:	89400304 	addi	r5,r17,12
 8003f9c:	11000304 	addi	r4,r2,12
 8003fa0:	31800084 	addi	r6,r6,2
 8003fa4:	318d883a 	add	r6,r6,r6
 8003fa8:	318d883a 	add	r6,r6,r6
 8003fac:	1027883a 	mov	r19,r2
 8003fb0:	8005fb80 	call	8005fb8 <memcpy>
 8003fb4:	01800044 	movi	r6,1
 8003fb8:	980b883a 	mov	r5,r19
 8003fbc:	e009883a 	mov	r4,fp
 8003fc0:	8006b040 	call	8006b04 <__lshift>
 8003fc4:	1029883a 	mov	r20,r2
 8003fc8:	003ecc06 	br	8003afc <__alt_data_end+0xff003afc>
 8003fcc:	00800e44 	movi	r2,57
 8003fd0:	90809026 	beq	r18,r2,8004214 <_dtoa_r+0x152c>
 8003fd4:	92000044 	addi	r8,r18,1
 8003fd8:	003f1f06 	br	8003c58 <__alt_data_end+0xff003c58>
 8003fdc:	9011883a 	mov	r8,r18
 8003fe0:	8825883a 	mov	r18,r17
 8003fe4:	a023883a 	mov	r17,r20
 8003fe8:	003e2906 	br	8003890 <__alt_data_end+0xff003890>
 8003fec:	002b883a 	mov	r21,zero
 8003ff0:	0023883a 	mov	r17,zero
 8003ff4:	003f5406 	br	8003d48 <__alt_data_end+0xff003d48>
 8003ff8:	61bfffc4 	addi	r6,r12,-1
 8003ffc:	300490fa 	slli	r2,r6,3
 8004000:	00c20074 	movhi	r3,2049
 8004004:	18c61d04 	addi	r3,r3,6260
 8004008:	1885883a 	add	r2,r3,r2
 800400c:	11000017 	ldw	r4,0(r2)
 8004010:	11400117 	ldw	r5,4(r2)
 8004014:	d8800717 	ldw	r2,28(sp)
 8004018:	880f883a 	mov	r7,r17
 800401c:	d9801215 	stw	r6,72(sp)
 8004020:	800d883a 	mov	r6,r16
 8004024:	db001615 	stw	r12,88(sp)
 8004028:	15c00044 	addi	r23,r2,1
 800402c:	800bb900 	call	800bb90 <__muldf3>
 8004030:	d9401017 	ldw	r5,64(sp)
 8004034:	d9000f17 	ldw	r4,60(sp)
 8004038:	d8c01515 	stw	r3,84(sp)
 800403c:	d8801415 	stw	r2,80(sp)
 8004040:	800cba40 	call	800cba4 <__fixdfsi>
 8004044:	1009883a 	mov	r4,r2
 8004048:	1021883a 	mov	r16,r2
 800404c:	800cc240 	call	800cc24 <__floatsidf>
 8004050:	d9000f17 	ldw	r4,60(sp)
 8004054:	d9401017 	ldw	r5,64(sp)
 8004058:	100d883a 	mov	r6,r2
 800405c:	180f883a 	mov	r7,r3
 8004060:	800c2a80 	call	800c2a8 <__subdf3>
 8004064:	1829883a 	mov	r20,r3
 8004068:	d8c00717 	ldw	r3,28(sp)
 800406c:	84000c04 	addi	r16,r16,48
 8004070:	1023883a 	mov	r17,r2
 8004074:	1c000005 	stb	r16,0(r3)
 8004078:	db001617 	ldw	r12,88(sp)
 800407c:	00800044 	movi	r2,1
 8004080:	60802226 	beq	r12,r2,800410c <_dtoa_r+0x1424>
 8004084:	d9c00717 	ldw	r7,28(sp)
 8004088:	8805883a 	mov	r2,r17
 800408c:	b82b883a 	mov	r21,r23
 8004090:	3b19883a 	add	r12,r7,r12
 8004094:	6023883a 	mov	r17,r12
 8004098:	a007883a 	mov	r3,r20
 800409c:	dc800f15 	stw	r18,60(sp)
 80040a0:	000d883a 	mov	r6,zero
 80040a4:	01d00934 	movhi	r7,16420
 80040a8:	1009883a 	mov	r4,r2
 80040ac:	180b883a 	mov	r5,r3
 80040b0:	800bb900 	call	800bb90 <__muldf3>
 80040b4:	180b883a 	mov	r5,r3
 80040b8:	1009883a 	mov	r4,r2
 80040bc:	1829883a 	mov	r20,r3
 80040c0:	1025883a 	mov	r18,r2
 80040c4:	800cba40 	call	800cba4 <__fixdfsi>
 80040c8:	1009883a 	mov	r4,r2
 80040cc:	1021883a 	mov	r16,r2
 80040d0:	800cc240 	call	800cc24 <__floatsidf>
 80040d4:	100d883a 	mov	r6,r2
 80040d8:	180f883a 	mov	r7,r3
 80040dc:	9009883a 	mov	r4,r18
 80040e0:	a00b883a 	mov	r5,r20
 80040e4:	84000c04 	addi	r16,r16,48
 80040e8:	800c2a80 	call	800c2a8 <__subdf3>
 80040ec:	ad400044 	addi	r21,r21,1
 80040f0:	ac3fffc5 	stb	r16,-1(r21)
 80040f4:	ac7fea1e 	bne	r21,r17,80040a0 <__alt_data_end+0xff0040a0>
 80040f8:	1023883a 	mov	r17,r2
 80040fc:	d8801217 	ldw	r2,72(sp)
 8004100:	dc800f17 	ldw	r18,60(sp)
 8004104:	1829883a 	mov	r20,r3
 8004108:	b8af883a 	add	r23,r23,r2
 800410c:	d9001417 	ldw	r4,80(sp)
 8004110:	d9401517 	ldw	r5,84(sp)
 8004114:	000d883a 	mov	r6,zero
 8004118:	01cff834 	movhi	r7,16352
 800411c:	800a7a40 	call	800a7a4 <__adddf3>
 8004120:	880d883a 	mov	r6,r17
 8004124:	a00f883a 	mov	r7,r20
 8004128:	1009883a 	mov	r4,r2
 800412c:	180b883a 	mov	r5,r3
 8004130:	800ba9c0 	call	800ba9c <__ledf2>
 8004134:	10003e0e 	bge	r2,zero,8004230 <_dtoa_r+0x1548>
 8004138:	d9001317 	ldw	r4,76(sp)
 800413c:	bd3fffc3 	ldbu	r20,-1(r23)
 8004140:	d9000515 	stw	r4,20(sp)
 8004144:	003d3b06 	br	8003634 <__alt_data_end+0xff003634>
 8004148:	0027883a 	mov	r19,zero
 800414c:	003f1b06 	br	8003dbc <__alt_data_end+0xff003dbc>
 8004150:	d8800817 	ldw	r2,32(sp)
 8004154:	11e9c83a 	sub	r20,r2,r7
 8004158:	0005883a 	mov	r2,zero
 800415c:	003d5406 	br	80036b0 <__alt_data_end+0xff0036b0>
 8004160:	00800044 	movi	r2,1
 8004164:	003dc706 	br	8003884 <__alt_data_end+0xff003884>
 8004168:	d8c00217 	ldw	r3,8(sp)
 800416c:	00800d84 	movi	r2,54
 8004170:	dd400a17 	ldw	r21,40(sp)
 8004174:	10c5c83a 	sub	r2,r2,r3
 8004178:	dd000817 	ldw	r20,32(sp)
 800417c:	003d4c06 	br	80036b0 <__alt_data_end+0xff0036b0>
 8004180:	dc800f15 	stw	r18,60(sp)
 8004184:	dcc01015 	stw	r19,64(sp)
 8004188:	04000084 	movi	r16,2
 800418c:	003bed06 	br	8003144 <__alt_data_end+0xff003144>
 8004190:	d9000617 	ldw	r4,24(sp)
 8004194:	203f0d26 	beq	r4,zero,8003dcc <__alt_data_end+0xff003dcc>
 8004198:	d9800c17 	ldw	r6,48(sp)
 800419c:	01bcab0e 	bge	zero,r6,800344c <__alt_data_end+0xff00344c>
 80041a0:	d9401017 	ldw	r5,64(sp)
 80041a4:	d9000f17 	ldw	r4,60(sp)
 80041a8:	000d883a 	mov	r6,zero
 80041ac:	01d00934 	movhi	r7,16420
 80041b0:	800bb900 	call	800bb90 <__muldf3>
 80041b4:	81000044 	addi	r4,r16,1
 80041b8:	d8800f15 	stw	r2,60(sp)
 80041bc:	d8c01015 	stw	r3,64(sp)
 80041c0:	800cc240 	call	800cc24 <__floatsidf>
 80041c4:	d9800f17 	ldw	r6,60(sp)
 80041c8:	d9c01017 	ldw	r7,64(sp)
 80041cc:	1009883a 	mov	r4,r2
 80041d0:	180b883a 	mov	r5,r3
 80041d4:	800bb900 	call	800bb90 <__muldf3>
 80041d8:	01d00734 	movhi	r7,16412
 80041dc:	000d883a 	mov	r6,zero
 80041e0:	1009883a 	mov	r4,r2
 80041e4:	180b883a 	mov	r5,r3
 80041e8:	800a7a40 	call	800a7a4 <__adddf3>
 80041ec:	d9c00517 	ldw	r7,20(sp)
 80041f0:	047f3034 	movhi	r17,64704
 80041f4:	1021883a 	mov	r16,r2
 80041f8:	39ffffc4 	addi	r7,r7,-1
 80041fc:	d9c01315 	stw	r7,76(sp)
 8004200:	1c63883a 	add	r17,r3,r17
 8004204:	db000c17 	ldw	r12,48(sp)
 8004208:	003bea06 	br	80031b4 <__alt_data_end+0xff0031b4>
 800420c:	dc000915 	stw	r16,36(sp)
 8004210:	003e0e06 	br	8003a4c <__alt_data_end+0xff003a4c>
 8004214:	01000e44 	movi	r4,57
 8004218:	8825883a 	mov	r18,r17
 800421c:	9dc00044 	addi	r23,r19,1
 8004220:	99000005 	stb	r4,0(r19)
 8004224:	a023883a 	mov	r17,r20
 8004228:	dc000915 	stw	r16,36(sp)
 800422c:	003da406 	br	80038c0 <__alt_data_end+0xff0038c0>
 8004230:	d9801417 	ldw	r6,80(sp)
 8004234:	d9c01517 	ldw	r7,84(sp)
 8004238:	0009883a 	mov	r4,zero
 800423c:	014ff834 	movhi	r5,16352
 8004240:	800c2a80 	call	800c2a8 <__subdf3>
 8004244:	880d883a 	mov	r6,r17
 8004248:	a00f883a 	mov	r7,r20
 800424c:	1009883a 	mov	r4,r2
 8004250:	180b883a 	mov	r5,r3
 8004254:	800b9c00 	call	800b9c0 <__gedf2>
 8004258:	00bc7c0e 	bge	zero,r2,800344c <__alt_data_end+0xff00344c>
 800425c:	01000c04 	movi	r4,48
 8004260:	00000106 	br	8004268 <_dtoa_r+0x1580>
 8004264:	102f883a 	mov	r23,r2
 8004268:	b8bfffc4 	addi	r2,r23,-1
 800426c:	10c00007 	ldb	r3,0(r2)
 8004270:	193ffc26 	beq	r3,r4,8004264 <__alt_data_end+0xff004264>
 8004274:	d9801317 	ldw	r6,76(sp)
 8004278:	d9800515 	stw	r6,20(sp)
 800427c:	003c4406 	br	8003390 <__alt_data_end+0xff003390>
 8004280:	d9801317 	ldw	r6,76(sp)
 8004284:	d9800515 	stw	r6,20(sp)
 8004288:	003cea06 	br	8003634 <__alt_data_end+0xff003634>
 800428c:	dd800f17 	ldw	r22,60(sp)
 8004290:	dcc01017 	ldw	r19,64(sp)
 8004294:	dc801217 	ldw	r18,72(sp)
 8004298:	003c6c06 	br	800344c <__alt_data_end+0xff00344c>
 800429c:	903e031e 	bne	r18,zero,8003aac <__alt_data_end+0xff003aac>
 80042a0:	003ebb06 	br	8003d90 <__alt_data_end+0xff003d90>
 80042a4:	103e6c1e 	bne	r2,zero,8003c58 <__alt_data_end+0xff003c58>
 80042a8:	4080004c 	andi	r2,r8,1
 80042ac:	103e6a26 	beq	r2,zero,8003c58 <__alt_data_end+0xff003c58>
 80042b0:	003e6606 	br	8003c4c <__alt_data_end+0xff003c4c>
 80042b4:	d8c00317 	ldw	r3,12(sp)
 80042b8:	00800084 	movi	r2,2
 80042bc:	10c02916 	blt	r2,r3,8004364 <_dtoa_r+0x167c>
 80042c0:	d9000c17 	ldw	r4,48(sp)
 80042c4:	003e8806 	br	8003ce8 <__alt_data_end+0xff003ce8>
 80042c8:	04000084 	movi	r16,2
 80042cc:	003b9d06 	br	8003144 <__alt_data_end+0xff003144>
 80042d0:	d9001317 	ldw	r4,76(sp)
 80042d4:	d9000515 	stw	r4,20(sp)
 80042d8:	003cd606 	br	8003634 <__alt_data_end+0xff003634>
 80042dc:	d8801317 	ldw	r2,76(sp)
 80042e0:	d8800515 	stw	r2,20(sp)
 80042e4:	003c2a06 	br	8003390 <__alt_data_end+0xff003390>
 80042e8:	d9800317 	ldw	r6,12(sp)
 80042ec:	00800084 	movi	r2,2
 80042f0:	11801516 	blt	r2,r6,8004348 <_dtoa_r+0x1660>
 80042f4:	d9c00c17 	ldw	r7,48(sp)
 80042f8:	d9c00615 	stw	r7,24(sp)
 80042fc:	003df706 	br	8003adc <__alt_data_end+0xff003adc>
 8004300:	193d3926 	beq	r3,r4,80037e8 <__alt_data_end+0xff0037e8>
 8004304:	00c00f04 	movi	r3,60
 8004308:	1885c83a 	sub	r2,r3,r2
 800430c:	003ddf06 	br	8003a8c <__alt_data_end+0xff003a8c>
 8004310:	e009883a 	mov	r4,fp
 8004314:	e0001115 	stw	zero,68(fp)
 8004318:	000b883a 	mov	r5,zero
 800431c:	80063840 	call	8006384 <_Balloc>
 8004320:	d8800715 	stw	r2,28(sp)
 8004324:	d8c00717 	ldw	r3,28(sp)
 8004328:	00bfffc4 	movi	r2,-1
 800432c:	01000044 	movi	r4,1
 8004330:	d8800c15 	stw	r2,48(sp)
 8004334:	e0c01015 	stw	r3,64(fp)
 8004338:	d9000b15 	stw	r4,44(sp)
 800433c:	d8800615 	stw	r2,24(sp)
 8004340:	d8002215 	stw	zero,136(sp)
 8004344:	003c4106 	br	800344c <__alt_data_end+0xff00344c>
 8004348:	d8c00c17 	ldw	r3,48(sp)
 800434c:	d8c00615 	stw	r3,24(sp)
 8004350:	003e7006 	br	8003d14 <__alt_data_end+0xff003d14>
 8004354:	04400044 	movi	r17,1
 8004358:	003b2006 	br	8002fdc <__alt_data_end+0xff002fdc>
 800435c:	000b883a 	mov	r5,zero
 8004360:	003b3d06 	br	8003058 <__alt_data_end+0xff003058>
 8004364:	d8800c17 	ldw	r2,48(sp)
 8004368:	d8800615 	stw	r2,24(sp)
 800436c:	003e6906 	br	8003d14 <__alt_data_end+0xff003d14>

08004370 <__sflush_r>:
 8004370:	2880030b 	ldhu	r2,12(r5)
 8004374:	defffb04 	addi	sp,sp,-20
 8004378:	dcc00315 	stw	r19,12(sp)
 800437c:	dc400115 	stw	r17,4(sp)
 8004380:	dfc00415 	stw	ra,16(sp)
 8004384:	dc800215 	stw	r18,8(sp)
 8004388:	dc000015 	stw	r16,0(sp)
 800438c:	10c0020c 	andi	r3,r2,8
 8004390:	2823883a 	mov	r17,r5
 8004394:	2027883a 	mov	r19,r4
 8004398:	1800311e 	bne	r3,zero,8004460 <__sflush_r+0xf0>
 800439c:	28c00117 	ldw	r3,4(r5)
 80043a0:	10820014 	ori	r2,r2,2048
 80043a4:	2880030d 	sth	r2,12(r5)
 80043a8:	00c04b0e 	bge	zero,r3,80044d8 <__sflush_r+0x168>
 80043ac:	8a000a17 	ldw	r8,40(r17)
 80043b0:	40002326 	beq	r8,zero,8004440 <__sflush_r+0xd0>
 80043b4:	9c000017 	ldw	r16,0(r19)
 80043b8:	10c4000c 	andi	r3,r2,4096
 80043bc:	98000015 	stw	zero,0(r19)
 80043c0:	18004826 	beq	r3,zero,80044e4 <__sflush_r+0x174>
 80043c4:	89801417 	ldw	r6,80(r17)
 80043c8:	10c0010c 	andi	r3,r2,4
 80043cc:	18000626 	beq	r3,zero,80043e8 <__sflush_r+0x78>
 80043d0:	88c00117 	ldw	r3,4(r17)
 80043d4:	88800c17 	ldw	r2,48(r17)
 80043d8:	30cdc83a 	sub	r6,r6,r3
 80043dc:	10000226 	beq	r2,zero,80043e8 <__sflush_r+0x78>
 80043e0:	88800f17 	ldw	r2,60(r17)
 80043e4:	308dc83a 	sub	r6,r6,r2
 80043e8:	89400717 	ldw	r5,28(r17)
 80043ec:	000f883a 	mov	r7,zero
 80043f0:	9809883a 	mov	r4,r19
 80043f4:	403ee83a 	callr	r8
 80043f8:	00ffffc4 	movi	r3,-1
 80043fc:	10c04426 	beq	r2,r3,8004510 <__sflush_r+0x1a0>
 8004400:	88c0030b 	ldhu	r3,12(r17)
 8004404:	89000417 	ldw	r4,16(r17)
 8004408:	88000115 	stw	zero,4(r17)
 800440c:	197dffcc 	andi	r5,r3,63487
 8004410:	8940030d 	sth	r5,12(r17)
 8004414:	89000015 	stw	r4,0(r17)
 8004418:	18c4000c 	andi	r3,r3,4096
 800441c:	18002c1e 	bne	r3,zero,80044d0 <__sflush_r+0x160>
 8004420:	89400c17 	ldw	r5,48(r17)
 8004424:	9c000015 	stw	r16,0(r19)
 8004428:	28000526 	beq	r5,zero,8004440 <__sflush_r+0xd0>
 800442c:	88801004 	addi	r2,r17,64
 8004430:	28800226 	beq	r5,r2,800443c <__sflush_r+0xcc>
 8004434:	9809883a 	mov	r4,r19
 8004438:	8004adc0 	call	8004adc <_free_r>
 800443c:	88000c15 	stw	zero,48(r17)
 8004440:	0005883a 	mov	r2,zero
 8004444:	dfc00417 	ldw	ra,16(sp)
 8004448:	dcc00317 	ldw	r19,12(sp)
 800444c:	dc800217 	ldw	r18,8(sp)
 8004450:	dc400117 	ldw	r17,4(sp)
 8004454:	dc000017 	ldw	r16,0(sp)
 8004458:	dec00504 	addi	sp,sp,20
 800445c:	f800283a 	ret
 8004460:	2c800417 	ldw	r18,16(r5)
 8004464:	903ff626 	beq	r18,zero,8004440 <__alt_data_end+0xff004440>
 8004468:	2c000017 	ldw	r16,0(r5)
 800446c:	108000cc 	andi	r2,r2,3
 8004470:	2c800015 	stw	r18,0(r5)
 8004474:	84a1c83a 	sub	r16,r16,r18
 8004478:	1000131e 	bne	r2,zero,80044c8 <__sflush_r+0x158>
 800447c:	28800517 	ldw	r2,20(r5)
 8004480:	88800215 	stw	r2,8(r17)
 8004484:	04000316 	blt	zero,r16,8004494 <__sflush_r+0x124>
 8004488:	003fed06 	br	8004440 <__alt_data_end+0xff004440>
 800448c:	90a5883a 	add	r18,r18,r2
 8004490:	043feb0e 	bge	zero,r16,8004440 <__alt_data_end+0xff004440>
 8004494:	88800917 	ldw	r2,36(r17)
 8004498:	89400717 	ldw	r5,28(r17)
 800449c:	800f883a 	mov	r7,r16
 80044a0:	900d883a 	mov	r6,r18
 80044a4:	9809883a 	mov	r4,r19
 80044a8:	103ee83a 	callr	r2
 80044ac:	80a1c83a 	sub	r16,r16,r2
 80044b0:	00bff616 	blt	zero,r2,800448c <__alt_data_end+0xff00448c>
 80044b4:	88c0030b 	ldhu	r3,12(r17)
 80044b8:	00bfffc4 	movi	r2,-1
 80044bc:	18c01014 	ori	r3,r3,64
 80044c0:	88c0030d 	sth	r3,12(r17)
 80044c4:	003fdf06 	br	8004444 <__alt_data_end+0xff004444>
 80044c8:	0005883a 	mov	r2,zero
 80044cc:	003fec06 	br	8004480 <__alt_data_end+0xff004480>
 80044d0:	88801415 	stw	r2,80(r17)
 80044d4:	003fd206 	br	8004420 <__alt_data_end+0xff004420>
 80044d8:	28c00f17 	ldw	r3,60(r5)
 80044dc:	00ffb316 	blt	zero,r3,80043ac <__alt_data_end+0xff0043ac>
 80044e0:	003fd706 	br	8004440 <__alt_data_end+0xff004440>
 80044e4:	89400717 	ldw	r5,28(r17)
 80044e8:	000d883a 	mov	r6,zero
 80044ec:	01c00044 	movi	r7,1
 80044f0:	9809883a 	mov	r4,r19
 80044f4:	403ee83a 	callr	r8
 80044f8:	100d883a 	mov	r6,r2
 80044fc:	00bfffc4 	movi	r2,-1
 8004500:	30801426 	beq	r6,r2,8004554 <__sflush_r+0x1e4>
 8004504:	8880030b 	ldhu	r2,12(r17)
 8004508:	8a000a17 	ldw	r8,40(r17)
 800450c:	003fae06 	br	80043c8 <__alt_data_end+0xff0043c8>
 8004510:	98c00017 	ldw	r3,0(r19)
 8004514:	183fba26 	beq	r3,zero,8004400 <__alt_data_end+0xff004400>
 8004518:	01000744 	movi	r4,29
 800451c:	19000626 	beq	r3,r4,8004538 <__sflush_r+0x1c8>
 8004520:	01000584 	movi	r4,22
 8004524:	19000426 	beq	r3,r4,8004538 <__sflush_r+0x1c8>
 8004528:	88c0030b 	ldhu	r3,12(r17)
 800452c:	18c01014 	ori	r3,r3,64
 8004530:	88c0030d 	sth	r3,12(r17)
 8004534:	003fc306 	br	8004444 <__alt_data_end+0xff004444>
 8004538:	8880030b 	ldhu	r2,12(r17)
 800453c:	88c00417 	ldw	r3,16(r17)
 8004540:	88000115 	stw	zero,4(r17)
 8004544:	10bdffcc 	andi	r2,r2,63487
 8004548:	8880030d 	sth	r2,12(r17)
 800454c:	88c00015 	stw	r3,0(r17)
 8004550:	003fb306 	br	8004420 <__alt_data_end+0xff004420>
 8004554:	98800017 	ldw	r2,0(r19)
 8004558:	103fea26 	beq	r2,zero,8004504 <__alt_data_end+0xff004504>
 800455c:	00c00744 	movi	r3,29
 8004560:	10c00226 	beq	r2,r3,800456c <__sflush_r+0x1fc>
 8004564:	00c00584 	movi	r3,22
 8004568:	10c0031e 	bne	r2,r3,8004578 <__sflush_r+0x208>
 800456c:	9c000015 	stw	r16,0(r19)
 8004570:	0005883a 	mov	r2,zero
 8004574:	003fb306 	br	8004444 <__alt_data_end+0xff004444>
 8004578:	88c0030b 	ldhu	r3,12(r17)
 800457c:	3005883a 	mov	r2,r6
 8004580:	18c01014 	ori	r3,r3,64
 8004584:	88c0030d 	sth	r3,12(r17)
 8004588:	003fae06 	br	8004444 <__alt_data_end+0xff004444>

0800458c <_fflush_r>:
 800458c:	defffd04 	addi	sp,sp,-12
 8004590:	dc000115 	stw	r16,4(sp)
 8004594:	dfc00215 	stw	ra,8(sp)
 8004598:	2021883a 	mov	r16,r4
 800459c:	20000226 	beq	r4,zero,80045a8 <_fflush_r+0x1c>
 80045a0:	20800e17 	ldw	r2,56(r4)
 80045a4:	10000c26 	beq	r2,zero,80045d8 <_fflush_r+0x4c>
 80045a8:	2880030f 	ldh	r2,12(r5)
 80045ac:	1000051e 	bne	r2,zero,80045c4 <_fflush_r+0x38>
 80045b0:	0005883a 	mov	r2,zero
 80045b4:	dfc00217 	ldw	ra,8(sp)
 80045b8:	dc000117 	ldw	r16,4(sp)
 80045bc:	dec00304 	addi	sp,sp,12
 80045c0:	f800283a 	ret
 80045c4:	8009883a 	mov	r4,r16
 80045c8:	dfc00217 	ldw	ra,8(sp)
 80045cc:	dc000117 	ldw	r16,4(sp)
 80045d0:	dec00304 	addi	sp,sp,12
 80045d4:	80043701 	jmpi	8004370 <__sflush_r>
 80045d8:	d9400015 	stw	r5,0(sp)
 80045dc:	80049680 	call	8004968 <__sinit>
 80045e0:	d9400017 	ldw	r5,0(sp)
 80045e4:	003ff006 	br	80045a8 <__alt_data_end+0xff0045a8>

080045e8 <fflush>:
 80045e8:	20000526 	beq	r4,zero,8004600 <fflush+0x18>
 80045ec:	00820074 	movhi	r2,2049
 80045f0:	108d6904 	addi	r2,r2,13732
 80045f4:	200b883a 	mov	r5,r4
 80045f8:	11000017 	ldw	r4,0(r2)
 80045fc:	800458c1 	jmpi	800458c <_fflush_r>
 8004600:	00820074 	movhi	r2,2049
 8004604:	108d6804 	addi	r2,r2,13728
 8004608:	11000017 	ldw	r4,0(r2)
 800460c:	01420034 	movhi	r5,2048
 8004610:	29516304 	addi	r5,r5,17804
 8004614:	800536c1 	jmpi	800536c <_fwalk_reent>

08004618 <__fp_unlock>:
 8004618:	0005883a 	mov	r2,zero
 800461c:	f800283a 	ret

08004620 <_cleanup_r>:
 8004620:	01420074 	movhi	r5,2049
 8004624:	2964e104 	addi	r5,r5,-27772
 8004628:	800536c1 	jmpi	800536c <_fwalk_reent>

0800462c <__sinit.part.1>:
 800462c:	defff704 	addi	sp,sp,-36
 8004630:	00c20034 	movhi	r3,2048
 8004634:	dfc00815 	stw	ra,32(sp)
 8004638:	ddc00715 	stw	r23,28(sp)
 800463c:	dd800615 	stw	r22,24(sp)
 8004640:	dd400515 	stw	r21,20(sp)
 8004644:	dd000415 	stw	r20,16(sp)
 8004648:	dcc00315 	stw	r19,12(sp)
 800464c:	dc800215 	stw	r18,8(sp)
 8004650:	dc400115 	stw	r17,4(sp)
 8004654:	dc000015 	stw	r16,0(sp)
 8004658:	18d18804 	addi	r3,r3,17952
 800465c:	24000117 	ldw	r16,4(r4)
 8004660:	20c00f15 	stw	r3,60(r4)
 8004664:	2080bb04 	addi	r2,r4,748
 8004668:	00c000c4 	movi	r3,3
 800466c:	20c0b915 	stw	r3,740(r4)
 8004670:	2080ba15 	stw	r2,744(r4)
 8004674:	2000b815 	stw	zero,736(r4)
 8004678:	05c00204 	movi	r23,8
 800467c:	00800104 	movi	r2,4
 8004680:	2025883a 	mov	r18,r4
 8004684:	b80d883a 	mov	r6,r23
 8004688:	81001704 	addi	r4,r16,92
 800468c:	000b883a 	mov	r5,zero
 8004690:	80000015 	stw	zero,0(r16)
 8004694:	80000115 	stw	zero,4(r16)
 8004698:	80000215 	stw	zero,8(r16)
 800469c:	8080030d 	sth	r2,12(r16)
 80046a0:	80001915 	stw	zero,100(r16)
 80046a4:	8000038d 	sth	zero,14(r16)
 80046a8:	80000415 	stw	zero,16(r16)
 80046ac:	80000515 	stw	zero,20(r16)
 80046b0:	80000615 	stw	zero,24(r16)
 80046b4:	800625c0 	call	800625c <memset>
 80046b8:	05820034 	movhi	r22,2048
 80046bc:	94400217 	ldw	r17,8(r18)
 80046c0:	05420034 	movhi	r21,2048
 80046c4:	05020034 	movhi	r20,2048
 80046c8:	04c20034 	movhi	r19,2048
 80046cc:	b59e6b04 	addi	r22,r22,31148
 80046d0:	ad5e8204 	addi	r21,r21,31240
 80046d4:	a51ea104 	addi	r20,r20,31364
 80046d8:	9cdeb804 	addi	r19,r19,31456
 80046dc:	85800815 	stw	r22,32(r16)
 80046e0:	85400915 	stw	r21,36(r16)
 80046e4:	85000a15 	stw	r20,40(r16)
 80046e8:	84c00b15 	stw	r19,44(r16)
 80046ec:	84000715 	stw	r16,28(r16)
 80046f0:	00800284 	movi	r2,10
 80046f4:	8880030d 	sth	r2,12(r17)
 80046f8:	00800044 	movi	r2,1
 80046fc:	b80d883a 	mov	r6,r23
 8004700:	89001704 	addi	r4,r17,92
 8004704:	000b883a 	mov	r5,zero
 8004708:	88000015 	stw	zero,0(r17)
 800470c:	88000115 	stw	zero,4(r17)
 8004710:	88000215 	stw	zero,8(r17)
 8004714:	88001915 	stw	zero,100(r17)
 8004718:	8880038d 	sth	r2,14(r17)
 800471c:	88000415 	stw	zero,16(r17)
 8004720:	88000515 	stw	zero,20(r17)
 8004724:	88000615 	stw	zero,24(r17)
 8004728:	800625c0 	call	800625c <memset>
 800472c:	94000317 	ldw	r16,12(r18)
 8004730:	00800484 	movi	r2,18
 8004734:	8c400715 	stw	r17,28(r17)
 8004738:	8d800815 	stw	r22,32(r17)
 800473c:	8d400915 	stw	r21,36(r17)
 8004740:	8d000a15 	stw	r20,40(r17)
 8004744:	8cc00b15 	stw	r19,44(r17)
 8004748:	8080030d 	sth	r2,12(r16)
 800474c:	00800084 	movi	r2,2
 8004750:	80000015 	stw	zero,0(r16)
 8004754:	80000115 	stw	zero,4(r16)
 8004758:	80000215 	stw	zero,8(r16)
 800475c:	80001915 	stw	zero,100(r16)
 8004760:	8080038d 	sth	r2,14(r16)
 8004764:	80000415 	stw	zero,16(r16)
 8004768:	80000515 	stw	zero,20(r16)
 800476c:	80000615 	stw	zero,24(r16)
 8004770:	b80d883a 	mov	r6,r23
 8004774:	000b883a 	mov	r5,zero
 8004778:	81001704 	addi	r4,r16,92
 800477c:	800625c0 	call	800625c <memset>
 8004780:	00800044 	movi	r2,1
 8004784:	84000715 	stw	r16,28(r16)
 8004788:	85800815 	stw	r22,32(r16)
 800478c:	85400915 	stw	r21,36(r16)
 8004790:	85000a15 	stw	r20,40(r16)
 8004794:	84c00b15 	stw	r19,44(r16)
 8004798:	90800e15 	stw	r2,56(r18)
 800479c:	dfc00817 	ldw	ra,32(sp)
 80047a0:	ddc00717 	ldw	r23,28(sp)
 80047a4:	dd800617 	ldw	r22,24(sp)
 80047a8:	dd400517 	ldw	r21,20(sp)
 80047ac:	dd000417 	ldw	r20,16(sp)
 80047b0:	dcc00317 	ldw	r19,12(sp)
 80047b4:	dc800217 	ldw	r18,8(sp)
 80047b8:	dc400117 	ldw	r17,4(sp)
 80047bc:	dc000017 	ldw	r16,0(sp)
 80047c0:	dec00904 	addi	sp,sp,36
 80047c4:	f800283a 	ret

080047c8 <__fp_lock>:
 80047c8:	0005883a 	mov	r2,zero
 80047cc:	f800283a 	ret

080047d0 <__sfmoreglue>:
 80047d0:	defffc04 	addi	sp,sp,-16
 80047d4:	dc400115 	stw	r17,4(sp)
 80047d8:	2c7fffc4 	addi	r17,r5,-1
 80047dc:	8c401a24 	muli	r17,r17,104
 80047e0:	dc800215 	stw	r18,8(sp)
 80047e4:	2825883a 	mov	r18,r5
 80047e8:	89401d04 	addi	r5,r17,116
 80047ec:	dc000015 	stw	r16,0(sp)
 80047f0:	dfc00315 	stw	ra,12(sp)
 80047f4:	80056c80 	call	80056c8 <_malloc_r>
 80047f8:	1021883a 	mov	r16,r2
 80047fc:	10000726 	beq	r2,zero,800481c <__sfmoreglue+0x4c>
 8004800:	11000304 	addi	r4,r2,12
 8004804:	10000015 	stw	zero,0(r2)
 8004808:	14800115 	stw	r18,4(r2)
 800480c:	11000215 	stw	r4,8(r2)
 8004810:	89801a04 	addi	r6,r17,104
 8004814:	000b883a 	mov	r5,zero
 8004818:	800625c0 	call	800625c <memset>
 800481c:	8005883a 	mov	r2,r16
 8004820:	dfc00317 	ldw	ra,12(sp)
 8004824:	dc800217 	ldw	r18,8(sp)
 8004828:	dc400117 	ldw	r17,4(sp)
 800482c:	dc000017 	ldw	r16,0(sp)
 8004830:	dec00404 	addi	sp,sp,16
 8004834:	f800283a 	ret

08004838 <__sfp>:
 8004838:	defffb04 	addi	sp,sp,-20
 800483c:	dc000015 	stw	r16,0(sp)
 8004840:	04020074 	movhi	r16,2049
 8004844:	840d6804 	addi	r16,r16,13728
 8004848:	dcc00315 	stw	r19,12(sp)
 800484c:	2027883a 	mov	r19,r4
 8004850:	81000017 	ldw	r4,0(r16)
 8004854:	dfc00415 	stw	ra,16(sp)
 8004858:	dc800215 	stw	r18,8(sp)
 800485c:	20800e17 	ldw	r2,56(r4)
 8004860:	dc400115 	stw	r17,4(sp)
 8004864:	1000021e 	bne	r2,zero,8004870 <__sfp+0x38>
 8004868:	800462c0 	call	800462c <__sinit.part.1>
 800486c:	81000017 	ldw	r4,0(r16)
 8004870:	2480b804 	addi	r18,r4,736
 8004874:	047fffc4 	movi	r17,-1
 8004878:	91000117 	ldw	r4,4(r18)
 800487c:	94000217 	ldw	r16,8(r18)
 8004880:	213fffc4 	addi	r4,r4,-1
 8004884:	20000a16 	blt	r4,zero,80048b0 <__sfp+0x78>
 8004888:	8080030f 	ldh	r2,12(r16)
 800488c:	10000c26 	beq	r2,zero,80048c0 <__sfp+0x88>
 8004890:	80c01d04 	addi	r3,r16,116
 8004894:	00000206 	br	80048a0 <__sfp+0x68>
 8004898:	18bfe60f 	ldh	r2,-104(r3)
 800489c:	10000826 	beq	r2,zero,80048c0 <__sfp+0x88>
 80048a0:	213fffc4 	addi	r4,r4,-1
 80048a4:	1c3ffd04 	addi	r16,r3,-12
 80048a8:	18c01a04 	addi	r3,r3,104
 80048ac:	247ffa1e 	bne	r4,r17,8004898 <__alt_data_end+0xff004898>
 80048b0:	90800017 	ldw	r2,0(r18)
 80048b4:	10001d26 	beq	r2,zero,800492c <__sfp+0xf4>
 80048b8:	1025883a 	mov	r18,r2
 80048bc:	003fee06 	br	8004878 <__alt_data_end+0xff004878>
 80048c0:	00bfffc4 	movi	r2,-1
 80048c4:	8080038d 	sth	r2,14(r16)
 80048c8:	00800044 	movi	r2,1
 80048cc:	8080030d 	sth	r2,12(r16)
 80048d0:	80001915 	stw	zero,100(r16)
 80048d4:	80000015 	stw	zero,0(r16)
 80048d8:	80000215 	stw	zero,8(r16)
 80048dc:	80000115 	stw	zero,4(r16)
 80048e0:	80000415 	stw	zero,16(r16)
 80048e4:	80000515 	stw	zero,20(r16)
 80048e8:	80000615 	stw	zero,24(r16)
 80048ec:	01800204 	movi	r6,8
 80048f0:	000b883a 	mov	r5,zero
 80048f4:	81001704 	addi	r4,r16,92
 80048f8:	800625c0 	call	800625c <memset>
 80048fc:	8005883a 	mov	r2,r16
 8004900:	80000c15 	stw	zero,48(r16)
 8004904:	80000d15 	stw	zero,52(r16)
 8004908:	80001115 	stw	zero,68(r16)
 800490c:	80001215 	stw	zero,72(r16)
 8004910:	dfc00417 	ldw	ra,16(sp)
 8004914:	dcc00317 	ldw	r19,12(sp)
 8004918:	dc800217 	ldw	r18,8(sp)
 800491c:	dc400117 	ldw	r17,4(sp)
 8004920:	dc000017 	ldw	r16,0(sp)
 8004924:	dec00504 	addi	sp,sp,20
 8004928:	f800283a 	ret
 800492c:	01400104 	movi	r5,4
 8004930:	9809883a 	mov	r4,r19
 8004934:	80047d00 	call	80047d0 <__sfmoreglue>
 8004938:	90800015 	stw	r2,0(r18)
 800493c:	103fde1e 	bne	r2,zero,80048b8 <__alt_data_end+0xff0048b8>
 8004940:	00800304 	movi	r2,12
 8004944:	98800015 	stw	r2,0(r19)
 8004948:	0005883a 	mov	r2,zero
 800494c:	003ff006 	br	8004910 <__alt_data_end+0xff004910>

08004950 <_cleanup>:
 8004950:	00820074 	movhi	r2,2049
 8004954:	108d6804 	addi	r2,r2,13728
 8004958:	11000017 	ldw	r4,0(r2)
 800495c:	01420074 	movhi	r5,2049
 8004960:	2964e104 	addi	r5,r5,-27772
 8004964:	800536c1 	jmpi	800536c <_fwalk_reent>

08004968 <__sinit>:
 8004968:	20800e17 	ldw	r2,56(r4)
 800496c:	10000126 	beq	r2,zero,8004974 <__sinit+0xc>
 8004970:	f800283a 	ret
 8004974:	800462c1 	jmpi	800462c <__sinit.part.1>

08004978 <__sfp_lock_acquire>:
 8004978:	f800283a 	ret

0800497c <__sfp_lock_release>:
 800497c:	f800283a 	ret

08004980 <__sinit_lock_acquire>:
 8004980:	f800283a 	ret

08004984 <__sinit_lock_release>:
 8004984:	f800283a 	ret

08004988 <__fp_lock_all>:
 8004988:	00820074 	movhi	r2,2049
 800498c:	108d6904 	addi	r2,r2,13732
 8004990:	11000017 	ldw	r4,0(r2)
 8004994:	01420034 	movhi	r5,2048
 8004998:	2951f204 	addi	r5,r5,18376
 800499c:	80052a81 	jmpi	80052a8 <_fwalk>

080049a0 <__fp_unlock_all>:
 80049a0:	00820074 	movhi	r2,2049
 80049a4:	108d6904 	addi	r2,r2,13732
 80049a8:	11000017 	ldw	r4,0(r2)
 80049ac:	01420034 	movhi	r5,2048
 80049b0:	29518604 	addi	r5,r5,17944
 80049b4:	80052a81 	jmpi	80052a8 <_fwalk>

080049b8 <_malloc_trim_r>:
 80049b8:	defffb04 	addi	sp,sp,-20
 80049bc:	dcc00315 	stw	r19,12(sp)
 80049c0:	04c20074 	movhi	r19,2049
 80049c4:	dc800215 	stw	r18,8(sp)
 80049c8:	dc400115 	stw	r17,4(sp)
 80049cc:	dc000015 	stw	r16,0(sp)
 80049d0:	dfc00415 	stw	ra,16(sp)
 80049d4:	2821883a 	mov	r16,r5
 80049d8:	9cc7d604 	addi	r19,r19,8024
 80049dc:	2025883a 	mov	r18,r4
 80049e0:	800d3880 	call	800d388 <__malloc_lock>
 80049e4:	98800217 	ldw	r2,8(r19)
 80049e8:	14400117 	ldw	r17,4(r2)
 80049ec:	00bfff04 	movi	r2,-4
 80049f0:	88a2703a 	and	r17,r17,r2
 80049f4:	8c21c83a 	sub	r16,r17,r16
 80049f8:	8403fbc4 	addi	r16,r16,4079
 80049fc:	8020d33a 	srli	r16,r16,12
 8004a00:	0083ffc4 	movi	r2,4095
 8004a04:	843fffc4 	addi	r16,r16,-1
 8004a08:	8020933a 	slli	r16,r16,12
 8004a0c:	1400060e 	bge	r2,r16,8004a28 <_malloc_trim_r+0x70>
 8004a10:	000b883a 	mov	r5,zero
 8004a14:	9009883a 	mov	r4,r18
 8004a18:	80079580 	call	8007958 <_sbrk_r>
 8004a1c:	98c00217 	ldw	r3,8(r19)
 8004a20:	1c47883a 	add	r3,r3,r17
 8004a24:	10c00a26 	beq	r2,r3,8004a50 <_malloc_trim_r+0x98>
 8004a28:	9009883a 	mov	r4,r18
 8004a2c:	800d3ac0 	call	800d3ac <__malloc_unlock>
 8004a30:	0005883a 	mov	r2,zero
 8004a34:	dfc00417 	ldw	ra,16(sp)
 8004a38:	dcc00317 	ldw	r19,12(sp)
 8004a3c:	dc800217 	ldw	r18,8(sp)
 8004a40:	dc400117 	ldw	r17,4(sp)
 8004a44:	dc000017 	ldw	r16,0(sp)
 8004a48:	dec00504 	addi	sp,sp,20
 8004a4c:	f800283a 	ret
 8004a50:	040bc83a 	sub	r5,zero,r16
 8004a54:	9009883a 	mov	r4,r18
 8004a58:	80079580 	call	8007958 <_sbrk_r>
 8004a5c:	00ffffc4 	movi	r3,-1
 8004a60:	10c00d26 	beq	r2,r3,8004a98 <_malloc_trim_r+0xe0>
 8004a64:	00c20074 	movhi	r3,2049
 8004a68:	18d45304 	addi	r3,r3,20812
 8004a6c:	18800017 	ldw	r2,0(r3)
 8004a70:	99000217 	ldw	r4,8(r19)
 8004a74:	8c23c83a 	sub	r17,r17,r16
 8004a78:	8c400054 	ori	r17,r17,1
 8004a7c:	1421c83a 	sub	r16,r2,r16
 8004a80:	24400115 	stw	r17,4(r4)
 8004a84:	9009883a 	mov	r4,r18
 8004a88:	1c000015 	stw	r16,0(r3)
 8004a8c:	800d3ac0 	call	800d3ac <__malloc_unlock>
 8004a90:	00800044 	movi	r2,1
 8004a94:	003fe706 	br	8004a34 <__alt_data_end+0xff004a34>
 8004a98:	000b883a 	mov	r5,zero
 8004a9c:	9009883a 	mov	r4,r18
 8004aa0:	80079580 	call	8007958 <_sbrk_r>
 8004aa4:	99000217 	ldw	r4,8(r19)
 8004aa8:	014003c4 	movi	r5,15
 8004aac:	1107c83a 	sub	r3,r2,r4
 8004ab0:	28ffdd0e 	bge	r5,r3,8004a28 <__alt_data_end+0xff004a28>
 8004ab4:	01420074 	movhi	r5,2049
 8004ab8:	294d6b04 	addi	r5,r5,13740
 8004abc:	29400017 	ldw	r5,0(r5)
 8004ac0:	18c00054 	ori	r3,r3,1
 8004ac4:	20c00115 	stw	r3,4(r4)
 8004ac8:	00c20074 	movhi	r3,2049
 8004acc:	1145c83a 	sub	r2,r2,r5
 8004ad0:	18d45304 	addi	r3,r3,20812
 8004ad4:	18800015 	stw	r2,0(r3)
 8004ad8:	003fd306 	br	8004a28 <__alt_data_end+0xff004a28>

08004adc <_free_r>:
 8004adc:	28004126 	beq	r5,zero,8004be4 <_free_r+0x108>
 8004ae0:	defffd04 	addi	sp,sp,-12
 8004ae4:	dc400115 	stw	r17,4(sp)
 8004ae8:	dc000015 	stw	r16,0(sp)
 8004aec:	2023883a 	mov	r17,r4
 8004af0:	2821883a 	mov	r16,r5
 8004af4:	dfc00215 	stw	ra,8(sp)
 8004af8:	800d3880 	call	800d388 <__malloc_lock>
 8004afc:	81ffff17 	ldw	r7,-4(r16)
 8004b00:	00bfff84 	movi	r2,-2
 8004b04:	01020074 	movhi	r4,2049
 8004b08:	81bffe04 	addi	r6,r16,-8
 8004b0c:	3884703a 	and	r2,r7,r2
 8004b10:	2107d604 	addi	r4,r4,8024
 8004b14:	308b883a 	add	r5,r6,r2
 8004b18:	2a400117 	ldw	r9,4(r5)
 8004b1c:	22000217 	ldw	r8,8(r4)
 8004b20:	00ffff04 	movi	r3,-4
 8004b24:	48c6703a 	and	r3,r9,r3
 8004b28:	2a005726 	beq	r5,r8,8004c88 <_free_r+0x1ac>
 8004b2c:	28c00115 	stw	r3,4(r5)
 8004b30:	39c0004c 	andi	r7,r7,1
 8004b34:	3800091e 	bne	r7,zero,8004b5c <_free_r+0x80>
 8004b38:	823ffe17 	ldw	r8,-8(r16)
 8004b3c:	22400204 	addi	r9,r4,8
 8004b40:	320dc83a 	sub	r6,r6,r8
 8004b44:	31c00217 	ldw	r7,8(r6)
 8004b48:	1205883a 	add	r2,r2,r8
 8004b4c:	3a406526 	beq	r7,r9,8004ce4 <_free_r+0x208>
 8004b50:	32000317 	ldw	r8,12(r6)
 8004b54:	3a000315 	stw	r8,12(r7)
 8004b58:	41c00215 	stw	r7,8(r8)
 8004b5c:	28cf883a 	add	r7,r5,r3
 8004b60:	39c00117 	ldw	r7,4(r7)
 8004b64:	39c0004c 	andi	r7,r7,1
 8004b68:	38003a26 	beq	r7,zero,8004c54 <_free_r+0x178>
 8004b6c:	10c00054 	ori	r3,r2,1
 8004b70:	30c00115 	stw	r3,4(r6)
 8004b74:	3087883a 	add	r3,r6,r2
 8004b78:	18800015 	stw	r2,0(r3)
 8004b7c:	00c07fc4 	movi	r3,511
 8004b80:	18801936 	bltu	r3,r2,8004be8 <_free_r+0x10c>
 8004b84:	1004d0fa 	srli	r2,r2,3
 8004b88:	01c00044 	movi	r7,1
 8004b8c:	21400117 	ldw	r5,4(r4)
 8004b90:	10c00044 	addi	r3,r2,1
 8004b94:	18c7883a 	add	r3,r3,r3
 8004b98:	1005d0ba 	srai	r2,r2,2
 8004b9c:	18c7883a 	add	r3,r3,r3
 8004ba0:	18c7883a 	add	r3,r3,r3
 8004ba4:	1907883a 	add	r3,r3,r4
 8004ba8:	3884983a 	sll	r2,r7,r2
 8004bac:	19c00017 	ldw	r7,0(r3)
 8004bb0:	1a3ffe04 	addi	r8,r3,-8
 8004bb4:	1144b03a 	or	r2,r2,r5
 8004bb8:	32000315 	stw	r8,12(r6)
 8004bbc:	31c00215 	stw	r7,8(r6)
 8004bc0:	20800115 	stw	r2,4(r4)
 8004bc4:	19800015 	stw	r6,0(r3)
 8004bc8:	39800315 	stw	r6,12(r7)
 8004bcc:	8809883a 	mov	r4,r17
 8004bd0:	dfc00217 	ldw	ra,8(sp)
 8004bd4:	dc400117 	ldw	r17,4(sp)
 8004bd8:	dc000017 	ldw	r16,0(sp)
 8004bdc:	dec00304 	addi	sp,sp,12
 8004be0:	800d3ac1 	jmpi	800d3ac <__malloc_unlock>
 8004be4:	f800283a 	ret
 8004be8:	100ad27a 	srli	r5,r2,9
 8004bec:	00c00104 	movi	r3,4
 8004bf0:	19404a36 	bltu	r3,r5,8004d1c <_free_r+0x240>
 8004bf4:	100ad1ba 	srli	r5,r2,6
 8004bf8:	28c00e44 	addi	r3,r5,57
 8004bfc:	18c7883a 	add	r3,r3,r3
 8004c00:	29400e04 	addi	r5,r5,56
 8004c04:	18c7883a 	add	r3,r3,r3
 8004c08:	18c7883a 	add	r3,r3,r3
 8004c0c:	1909883a 	add	r4,r3,r4
 8004c10:	20c00017 	ldw	r3,0(r4)
 8004c14:	01c20074 	movhi	r7,2049
 8004c18:	213ffe04 	addi	r4,r4,-8
 8004c1c:	39c7d604 	addi	r7,r7,8024
 8004c20:	20c04426 	beq	r4,r3,8004d34 <_free_r+0x258>
 8004c24:	01ffff04 	movi	r7,-4
 8004c28:	19400117 	ldw	r5,4(r3)
 8004c2c:	29ca703a 	and	r5,r5,r7
 8004c30:	1140022e 	bgeu	r2,r5,8004c3c <_free_r+0x160>
 8004c34:	18c00217 	ldw	r3,8(r3)
 8004c38:	20fffb1e 	bne	r4,r3,8004c28 <__alt_data_end+0xff004c28>
 8004c3c:	19000317 	ldw	r4,12(r3)
 8004c40:	31000315 	stw	r4,12(r6)
 8004c44:	30c00215 	stw	r3,8(r6)
 8004c48:	21800215 	stw	r6,8(r4)
 8004c4c:	19800315 	stw	r6,12(r3)
 8004c50:	003fde06 	br	8004bcc <__alt_data_end+0xff004bcc>
 8004c54:	29c00217 	ldw	r7,8(r5)
 8004c58:	10c5883a 	add	r2,r2,r3
 8004c5c:	00c20074 	movhi	r3,2049
 8004c60:	18c7d804 	addi	r3,r3,8032
 8004c64:	38c03b26 	beq	r7,r3,8004d54 <_free_r+0x278>
 8004c68:	2a000317 	ldw	r8,12(r5)
 8004c6c:	11400054 	ori	r5,r2,1
 8004c70:	3087883a 	add	r3,r6,r2
 8004c74:	3a000315 	stw	r8,12(r7)
 8004c78:	41c00215 	stw	r7,8(r8)
 8004c7c:	31400115 	stw	r5,4(r6)
 8004c80:	18800015 	stw	r2,0(r3)
 8004c84:	003fbd06 	br	8004b7c <__alt_data_end+0xff004b7c>
 8004c88:	39c0004c 	andi	r7,r7,1
 8004c8c:	10c5883a 	add	r2,r2,r3
 8004c90:	3800071e 	bne	r7,zero,8004cb0 <_free_r+0x1d4>
 8004c94:	81fffe17 	ldw	r7,-8(r16)
 8004c98:	31cdc83a 	sub	r6,r6,r7
 8004c9c:	30c00317 	ldw	r3,12(r6)
 8004ca0:	31400217 	ldw	r5,8(r6)
 8004ca4:	11c5883a 	add	r2,r2,r7
 8004ca8:	28c00315 	stw	r3,12(r5)
 8004cac:	19400215 	stw	r5,8(r3)
 8004cb0:	10c00054 	ori	r3,r2,1
 8004cb4:	30c00115 	stw	r3,4(r6)
 8004cb8:	00c20074 	movhi	r3,2049
 8004cbc:	18cd6c04 	addi	r3,r3,13744
 8004cc0:	18c00017 	ldw	r3,0(r3)
 8004cc4:	21800215 	stw	r6,8(r4)
 8004cc8:	10ffc036 	bltu	r2,r3,8004bcc <__alt_data_end+0xff004bcc>
 8004ccc:	00820074 	movhi	r2,2049
 8004cd0:	10944a04 	addi	r2,r2,20776
 8004cd4:	11400017 	ldw	r5,0(r2)
 8004cd8:	8809883a 	mov	r4,r17
 8004cdc:	80049b80 	call	80049b8 <_malloc_trim_r>
 8004ce0:	003fba06 	br	8004bcc <__alt_data_end+0xff004bcc>
 8004ce4:	28c9883a 	add	r4,r5,r3
 8004ce8:	21000117 	ldw	r4,4(r4)
 8004cec:	2100004c 	andi	r4,r4,1
 8004cf0:	2000391e 	bne	r4,zero,8004dd8 <_free_r+0x2fc>
 8004cf4:	29c00217 	ldw	r7,8(r5)
 8004cf8:	29000317 	ldw	r4,12(r5)
 8004cfc:	1885883a 	add	r2,r3,r2
 8004d00:	10c00054 	ori	r3,r2,1
 8004d04:	39000315 	stw	r4,12(r7)
 8004d08:	21c00215 	stw	r7,8(r4)
 8004d0c:	30c00115 	stw	r3,4(r6)
 8004d10:	308d883a 	add	r6,r6,r2
 8004d14:	30800015 	stw	r2,0(r6)
 8004d18:	003fac06 	br	8004bcc <__alt_data_end+0xff004bcc>
 8004d1c:	00c00504 	movi	r3,20
 8004d20:	19401536 	bltu	r3,r5,8004d78 <_free_r+0x29c>
 8004d24:	28c01704 	addi	r3,r5,92
 8004d28:	18c7883a 	add	r3,r3,r3
 8004d2c:	294016c4 	addi	r5,r5,91
 8004d30:	003fb406 	br	8004c04 <__alt_data_end+0xff004c04>
 8004d34:	280bd0ba 	srai	r5,r5,2
 8004d38:	00c00044 	movi	r3,1
 8004d3c:	38800117 	ldw	r2,4(r7)
 8004d40:	194a983a 	sll	r5,r3,r5
 8004d44:	2007883a 	mov	r3,r4
 8004d48:	2884b03a 	or	r2,r5,r2
 8004d4c:	38800115 	stw	r2,4(r7)
 8004d50:	003fbb06 	br	8004c40 <__alt_data_end+0xff004c40>
 8004d54:	21800515 	stw	r6,20(r4)
 8004d58:	21800415 	stw	r6,16(r4)
 8004d5c:	10c00054 	ori	r3,r2,1
 8004d60:	31c00315 	stw	r7,12(r6)
 8004d64:	31c00215 	stw	r7,8(r6)
 8004d68:	30c00115 	stw	r3,4(r6)
 8004d6c:	308d883a 	add	r6,r6,r2
 8004d70:	30800015 	stw	r2,0(r6)
 8004d74:	003f9506 	br	8004bcc <__alt_data_end+0xff004bcc>
 8004d78:	00c01504 	movi	r3,84
 8004d7c:	19400536 	bltu	r3,r5,8004d94 <_free_r+0x2b8>
 8004d80:	100ad33a 	srli	r5,r2,12
 8004d84:	28c01bc4 	addi	r3,r5,111
 8004d88:	18c7883a 	add	r3,r3,r3
 8004d8c:	29401b84 	addi	r5,r5,110
 8004d90:	003f9c06 	br	8004c04 <__alt_data_end+0xff004c04>
 8004d94:	00c05504 	movi	r3,340
 8004d98:	19400536 	bltu	r3,r5,8004db0 <_free_r+0x2d4>
 8004d9c:	100ad3fa 	srli	r5,r2,15
 8004da0:	28c01e04 	addi	r3,r5,120
 8004da4:	18c7883a 	add	r3,r3,r3
 8004da8:	29401dc4 	addi	r5,r5,119
 8004dac:	003f9506 	br	8004c04 <__alt_data_end+0xff004c04>
 8004db0:	00c15504 	movi	r3,1364
 8004db4:	19400536 	bltu	r3,r5,8004dcc <_free_r+0x2f0>
 8004db8:	100ad4ba 	srli	r5,r2,18
 8004dbc:	28c01f44 	addi	r3,r5,125
 8004dc0:	18c7883a 	add	r3,r3,r3
 8004dc4:	29401f04 	addi	r5,r5,124
 8004dc8:	003f8e06 	br	8004c04 <__alt_data_end+0xff004c04>
 8004dcc:	00c03f84 	movi	r3,254
 8004dd0:	01401f84 	movi	r5,126
 8004dd4:	003f8b06 	br	8004c04 <__alt_data_end+0xff004c04>
 8004dd8:	10c00054 	ori	r3,r2,1
 8004ddc:	30c00115 	stw	r3,4(r6)
 8004de0:	308d883a 	add	r6,r6,r2
 8004de4:	30800015 	stw	r2,0(r6)
 8004de8:	003f7806 	br	8004bcc <__alt_data_end+0xff004bcc>

08004dec <__sfvwrite_r>:
 8004dec:	30800217 	ldw	r2,8(r6)
 8004df0:	10006726 	beq	r2,zero,8004f90 <__sfvwrite_r+0x1a4>
 8004df4:	28c0030b 	ldhu	r3,12(r5)
 8004df8:	defff404 	addi	sp,sp,-48
 8004dfc:	dd400715 	stw	r21,28(sp)
 8004e00:	dd000615 	stw	r20,24(sp)
 8004e04:	dc000215 	stw	r16,8(sp)
 8004e08:	dfc00b15 	stw	ra,44(sp)
 8004e0c:	df000a15 	stw	fp,40(sp)
 8004e10:	ddc00915 	stw	r23,36(sp)
 8004e14:	dd800815 	stw	r22,32(sp)
 8004e18:	dcc00515 	stw	r19,20(sp)
 8004e1c:	dc800415 	stw	r18,16(sp)
 8004e20:	dc400315 	stw	r17,12(sp)
 8004e24:	1880020c 	andi	r2,r3,8
 8004e28:	2821883a 	mov	r16,r5
 8004e2c:	202b883a 	mov	r21,r4
 8004e30:	3029883a 	mov	r20,r6
 8004e34:	10002726 	beq	r2,zero,8004ed4 <__sfvwrite_r+0xe8>
 8004e38:	28800417 	ldw	r2,16(r5)
 8004e3c:	10002526 	beq	r2,zero,8004ed4 <__sfvwrite_r+0xe8>
 8004e40:	1880008c 	andi	r2,r3,2
 8004e44:	a4400017 	ldw	r17,0(r20)
 8004e48:	10002a26 	beq	r2,zero,8004ef4 <__sfvwrite_r+0x108>
 8004e4c:	05a00034 	movhi	r22,32768
 8004e50:	0027883a 	mov	r19,zero
 8004e54:	0025883a 	mov	r18,zero
 8004e58:	b5bf0004 	addi	r22,r22,-1024
 8004e5c:	980d883a 	mov	r6,r19
 8004e60:	a809883a 	mov	r4,r21
 8004e64:	90004626 	beq	r18,zero,8004f80 <__sfvwrite_r+0x194>
 8004e68:	900f883a 	mov	r7,r18
 8004e6c:	b480022e 	bgeu	r22,r18,8004e78 <__sfvwrite_r+0x8c>
 8004e70:	01e00034 	movhi	r7,32768
 8004e74:	39ff0004 	addi	r7,r7,-1024
 8004e78:	80800917 	ldw	r2,36(r16)
 8004e7c:	81400717 	ldw	r5,28(r16)
 8004e80:	103ee83a 	callr	r2
 8004e84:	0080570e 	bge	zero,r2,8004fe4 <__sfvwrite_r+0x1f8>
 8004e88:	a0c00217 	ldw	r3,8(r20)
 8004e8c:	98a7883a 	add	r19,r19,r2
 8004e90:	90a5c83a 	sub	r18,r18,r2
 8004e94:	1885c83a 	sub	r2,r3,r2
 8004e98:	a0800215 	stw	r2,8(r20)
 8004e9c:	103fef1e 	bne	r2,zero,8004e5c <__alt_data_end+0xff004e5c>
 8004ea0:	0005883a 	mov	r2,zero
 8004ea4:	dfc00b17 	ldw	ra,44(sp)
 8004ea8:	df000a17 	ldw	fp,40(sp)
 8004eac:	ddc00917 	ldw	r23,36(sp)
 8004eb0:	dd800817 	ldw	r22,32(sp)
 8004eb4:	dd400717 	ldw	r21,28(sp)
 8004eb8:	dd000617 	ldw	r20,24(sp)
 8004ebc:	dcc00517 	ldw	r19,20(sp)
 8004ec0:	dc800417 	ldw	r18,16(sp)
 8004ec4:	dc400317 	ldw	r17,12(sp)
 8004ec8:	dc000217 	ldw	r16,8(sp)
 8004ecc:	dec00c04 	addi	sp,sp,48
 8004ed0:	f800283a 	ret
 8004ed4:	800b883a 	mov	r5,r16
 8004ed8:	a809883a 	mov	r4,r21
 8004edc:	80029940 	call	8002994 <__swsetup_r>
 8004ee0:	1000eb1e 	bne	r2,zero,8005290 <__sfvwrite_r+0x4a4>
 8004ee4:	80c0030b 	ldhu	r3,12(r16)
 8004ee8:	a4400017 	ldw	r17,0(r20)
 8004eec:	1880008c 	andi	r2,r3,2
 8004ef0:	103fd61e 	bne	r2,zero,8004e4c <__alt_data_end+0xff004e4c>
 8004ef4:	1880004c 	andi	r2,r3,1
 8004ef8:	10003f1e 	bne	r2,zero,8004ff8 <__sfvwrite_r+0x20c>
 8004efc:	0039883a 	mov	fp,zero
 8004f00:	0025883a 	mov	r18,zero
 8004f04:	90001a26 	beq	r18,zero,8004f70 <__sfvwrite_r+0x184>
 8004f08:	1880800c 	andi	r2,r3,512
 8004f0c:	84c00217 	ldw	r19,8(r16)
 8004f10:	10002126 	beq	r2,zero,8004f98 <__sfvwrite_r+0x1ac>
 8004f14:	982f883a 	mov	r23,r19
 8004f18:	94c09336 	bltu	r18,r19,8005168 <__sfvwrite_r+0x37c>
 8004f1c:	1881200c 	andi	r2,r3,1152
 8004f20:	10009e1e 	bne	r2,zero,800519c <__sfvwrite_r+0x3b0>
 8004f24:	81000017 	ldw	r4,0(r16)
 8004f28:	b80d883a 	mov	r6,r23
 8004f2c:	e00b883a 	mov	r5,fp
 8004f30:	80061000 	call	8006100 <memmove>
 8004f34:	80c00217 	ldw	r3,8(r16)
 8004f38:	81000017 	ldw	r4,0(r16)
 8004f3c:	9005883a 	mov	r2,r18
 8004f40:	1ce7c83a 	sub	r19,r3,r19
 8004f44:	25cf883a 	add	r7,r4,r23
 8004f48:	84c00215 	stw	r19,8(r16)
 8004f4c:	81c00015 	stw	r7,0(r16)
 8004f50:	a0c00217 	ldw	r3,8(r20)
 8004f54:	e0b9883a 	add	fp,fp,r2
 8004f58:	90a5c83a 	sub	r18,r18,r2
 8004f5c:	18a7c83a 	sub	r19,r3,r2
 8004f60:	a4c00215 	stw	r19,8(r20)
 8004f64:	983fce26 	beq	r19,zero,8004ea0 <__alt_data_end+0xff004ea0>
 8004f68:	80c0030b 	ldhu	r3,12(r16)
 8004f6c:	903fe61e 	bne	r18,zero,8004f08 <__alt_data_end+0xff004f08>
 8004f70:	8f000017 	ldw	fp,0(r17)
 8004f74:	8c800117 	ldw	r18,4(r17)
 8004f78:	8c400204 	addi	r17,r17,8
 8004f7c:	003fe106 	br	8004f04 <__alt_data_end+0xff004f04>
 8004f80:	8cc00017 	ldw	r19,0(r17)
 8004f84:	8c800117 	ldw	r18,4(r17)
 8004f88:	8c400204 	addi	r17,r17,8
 8004f8c:	003fb306 	br	8004e5c <__alt_data_end+0xff004e5c>
 8004f90:	0005883a 	mov	r2,zero
 8004f94:	f800283a 	ret
 8004f98:	81000017 	ldw	r4,0(r16)
 8004f9c:	80800417 	ldw	r2,16(r16)
 8004fa0:	11005736 	bltu	r2,r4,8005100 <__sfvwrite_r+0x314>
 8004fa4:	85c00517 	ldw	r23,20(r16)
 8004fa8:	95c05536 	bltu	r18,r23,8005100 <__sfvwrite_r+0x314>
 8004fac:	00a00034 	movhi	r2,32768
 8004fb0:	10bfffc4 	addi	r2,r2,-1
 8004fb4:	9009883a 	mov	r4,r18
 8004fb8:	1480012e 	bgeu	r2,r18,8004fc0 <__sfvwrite_r+0x1d4>
 8004fbc:	1009883a 	mov	r4,r2
 8004fc0:	b80b883a 	mov	r5,r23
 8004fc4:	800a5f00 	call	800a5f0 <__divsi3>
 8004fc8:	15cf383a 	mul	r7,r2,r23
 8004fcc:	81400717 	ldw	r5,28(r16)
 8004fd0:	80800917 	ldw	r2,36(r16)
 8004fd4:	e00d883a 	mov	r6,fp
 8004fd8:	a809883a 	mov	r4,r21
 8004fdc:	103ee83a 	callr	r2
 8004fe0:	00bfdb16 	blt	zero,r2,8004f50 <__alt_data_end+0xff004f50>
 8004fe4:	8080030b 	ldhu	r2,12(r16)
 8004fe8:	10801014 	ori	r2,r2,64
 8004fec:	8080030d 	sth	r2,12(r16)
 8004ff0:	00bfffc4 	movi	r2,-1
 8004ff4:	003fab06 	br	8004ea4 <__alt_data_end+0xff004ea4>
 8004ff8:	0027883a 	mov	r19,zero
 8004ffc:	0011883a 	mov	r8,zero
 8005000:	0039883a 	mov	fp,zero
 8005004:	0025883a 	mov	r18,zero
 8005008:	90001f26 	beq	r18,zero,8005088 <__sfvwrite_r+0x29c>
 800500c:	40005a26 	beq	r8,zero,8005178 <__sfvwrite_r+0x38c>
 8005010:	982d883a 	mov	r22,r19
 8005014:	94c0012e 	bgeu	r18,r19,800501c <__sfvwrite_r+0x230>
 8005018:	902d883a 	mov	r22,r18
 800501c:	81000017 	ldw	r4,0(r16)
 8005020:	80800417 	ldw	r2,16(r16)
 8005024:	b02f883a 	mov	r23,r22
 8005028:	81c00517 	ldw	r7,20(r16)
 800502c:	1100032e 	bgeu	r2,r4,800503c <__sfvwrite_r+0x250>
 8005030:	80c00217 	ldw	r3,8(r16)
 8005034:	38c7883a 	add	r3,r7,r3
 8005038:	1d801816 	blt	r3,r22,800509c <__sfvwrite_r+0x2b0>
 800503c:	b1c03e16 	blt	r22,r7,8005138 <__sfvwrite_r+0x34c>
 8005040:	80800917 	ldw	r2,36(r16)
 8005044:	81400717 	ldw	r5,28(r16)
 8005048:	e00d883a 	mov	r6,fp
 800504c:	da000115 	stw	r8,4(sp)
 8005050:	a809883a 	mov	r4,r21
 8005054:	103ee83a 	callr	r2
 8005058:	102f883a 	mov	r23,r2
 800505c:	da000117 	ldw	r8,4(sp)
 8005060:	00bfe00e 	bge	zero,r2,8004fe4 <__alt_data_end+0xff004fe4>
 8005064:	9de7c83a 	sub	r19,r19,r23
 8005068:	98001f26 	beq	r19,zero,80050e8 <__sfvwrite_r+0x2fc>
 800506c:	a0800217 	ldw	r2,8(r20)
 8005070:	e5f9883a 	add	fp,fp,r23
 8005074:	95e5c83a 	sub	r18,r18,r23
 8005078:	15efc83a 	sub	r23,r2,r23
 800507c:	a5c00215 	stw	r23,8(r20)
 8005080:	b83f8726 	beq	r23,zero,8004ea0 <__alt_data_end+0xff004ea0>
 8005084:	903fe11e 	bne	r18,zero,800500c <__alt_data_end+0xff00500c>
 8005088:	8f000017 	ldw	fp,0(r17)
 800508c:	8c800117 	ldw	r18,4(r17)
 8005090:	0011883a 	mov	r8,zero
 8005094:	8c400204 	addi	r17,r17,8
 8005098:	003fdb06 	br	8005008 <__alt_data_end+0xff005008>
 800509c:	180d883a 	mov	r6,r3
 80050a0:	e00b883a 	mov	r5,fp
 80050a4:	da000115 	stw	r8,4(sp)
 80050a8:	d8c00015 	stw	r3,0(sp)
 80050ac:	80061000 	call	8006100 <memmove>
 80050b0:	d8c00017 	ldw	r3,0(sp)
 80050b4:	80800017 	ldw	r2,0(r16)
 80050b8:	800b883a 	mov	r5,r16
 80050bc:	a809883a 	mov	r4,r21
 80050c0:	10c5883a 	add	r2,r2,r3
 80050c4:	80800015 	stw	r2,0(r16)
 80050c8:	d8c00015 	stw	r3,0(sp)
 80050cc:	800458c0 	call	800458c <_fflush_r>
 80050d0:	d8c00017 	ldw	r3,0(sp)
 80050d4:	da000117 	ldw	r8,4(sp)
 80050d8:	103fc21e 	bne	r2,zero,8004fe4 <__alt_data_end+0xff004fe4>
 80050dc:	182f883a 	mov	r23,r3
 80050e0:	9de7c83a 	sub	r19,r19,r23
 80050e4:	983fe11e 	bne	r19,zero,800506c <__alt_data_end+0xff00506c>
 80050e8:	800b883a 	mov	r5,r16
 80050ec:	a809883a 	mov	r4,r21
 80050f0:	800458c0 	call	800458c <_fflush_r>
 80050f4:	103fbb1e 	bne	r2,zero,8004fe4 <__alt_data_end+0xff004fe4>
 80050f8:	0011883a 	mov	r8,zero
 80050fc:	003fdb06 	br	800506c <__alt_data_end+0xff00506c>
 8005100:	94c0012e 	bgeu	r18,r19,8005108 <__sfvwrite_r+0x31c>
 8005104:	9027883a 	mov	r19,r18
 8005108:	980d883a 	mov	r6,r19
 800510c:	e00b883a 	mov	r5,fp
 8005110:	80061000 	call	8006100 <memmove>
 8005114:	80800217 	ldw	r2,8(r16)
 8005118:	80c00017 	ldw	r3,0(r16)
 800511c:	14c5c83a 	sub	r2,r2,r19
 8005120:	1cc7883a 	add	r3,r3,r19
 8005124:	80800215 	stw	r2,8(r16)
 8005128:	80c00015 	stw	r3,0(r16)
 800512c:	10004326 	beq	r2,zero,800523c <__sfvwrite_r+0x450>
 8005130:	9805883a 	mov	r2,r19
 8005134:	003f8606 	br	8004f50 <__alt_data_end+0xff004f50>
 8005138:	b00d883a 	mov	r6,r22
 800513c:	e00b883a 	mov	r5,fp
 8005140:	da000115 	stw	r8,4(sp)
 8005144:	80061000 	call	8006100 <memmove>
 8005148:	80800217 	ldw	r2,8(r16)
 800514c:	80c00017 	ldw	r3,0(r16)
 8005150:	da000117 	ldw	r8,4(sp)
 8005154:	1585c83a 	sub	r2,r2,r22
 8005158:	1dad883a 	add	r22,r3,r22
 800515c:	80800215 	stw	r2,8(r16)
 8005160:	85800015 	stw	r22,0(r16)
 8005164:	003fbf06 	br	8005064 <__alt_data_end+0xff005064>
 8005168:	81000017 	ldw	r4,0(r16)
 800516c:	9027883a 	mov	r19,r18
 8005170:	902f883a 	mov	r23,r18
 8005174:	003f6c06 	br	8004f28 <__alt_data_end+0xff004f28>
 8005178:	900d883a 	mov	r6,r18
 800517c:	01400284 	movi	r5,10
 8005180:	e009883a 	mov	r4,fp
 8005184:	8005ed40 	call	8005ed4 <memchr>
 8005188:	10003e26 	beq	r2,zero,8005284 <__sfvwrite_r+0x498>
 800518c:	10800044 	addi	r2,r2,1
 8005190:	1727c83a 	sub	r19,r2,fp
 8005194:	02000044 	movi	r8,1
 8005198:	003f9d06 	br	8005010 <__alt_data_end+0xff005010>
 800519c:	80800517 	ldw	r2,20(r16)
 80051a0:	81400417 	ldw	r5,16(r16)
 80051a4:	81c00017 	ldw	r7,0(r16)
 80051a8:	10a7883a 	add	r19,r2,r2
 80051ac:	9885883a 	add	r2,r19,r2
 80051b0:	1026d7fa 	srli	r19,r2,31
 80051b4:	396dc83a 	sub	r22,r7,r5
 80051b8:	b1000044 	addi	r4,r22,1
 80051bc:	9885883a 	add	r2,r19,r2
 80051c0:	1027d07a 	srai	r19,r2,1
 80051c4:	2485883a 	add	r2,r4,r18
 80051c8:	980d883a 	mov	r6,r19
 80051cc:	9880022e 	bgeu	r19,r2,80051d8 <__sfvwrite_r+0x3ec>
 80051d0:	1027883a 	mov	r19,r2
 80051d4:	100d883a 	mov	r6,r2
 80051d8:	18c1000c 	andi	r3,r3,1024
 80051dc:	18001c26 	beq	r3,zero,8005250 <__sfvwrite_r+0x464>
 80051e0:	300b883a 	mov	r5,r6
 80051e4:	a809883a 	mov	r4,r21
 80051e8:	80056c80 	call	80056c8 <_malloc_r>
 80051ec:	102f883a 	mov	r23,r2
 80051f0:	10002926 	beq	r2,zero,8005298 <__sfvwrite_r+0x4ac>
 80051f4:	81400417 	ldw	r5,16(r16)
 80051f8:	b00d883a 	mov	r6,r22
 80051fc:	1009883a 	mov	r4,r2
 8005200:	8005fb80 	call	8005fb8 <memcpy>
 8005204:	8080030b 	ldhu	r2,12(r16)
 8005208:	00fedfc4 	movi	r3,-1153
 800520c:	10c4703a 	and	r2,r2,r3
 8005210:	10802014 	ori	r2,r2,128
 8005214:	8080030d 	sth	r2,12(r16)
 8005218:	bd89883a 	add	r4,r23,r22
 800521c:	9d8fc83a 	sub	r7,r19,r22
 8005220:	85c00415 	stw	r23,16(r16)
 8005224:	84c00515 	stw	r19,20(r16)
 8005228:	81000015 	stw	r4,0(r16)
 800522c:	9027883a 	mov	r19,r18
 8005230:	81c00215 	stw	r7,8(r16)
 8005234:	902f883a 	mov	r23,r18
 8005238:	003f3b06 	br	8004f28 <__alt_data_end+0xff004f28>
 800523c:	800b883a 	mov	r5,r16
 8005240:	a809883a 	mov	r4,r21
 8005244:	800458c0 	call	800458c <_fflush_r>
 8005248:	103fb926 	beq	r2,zero,8005130 <__alt_data_end+0xff005130>
 800524c:	003f6506 	br	8004fe4 <__alt_data_end+0xff004fe4>
 8005250:	a809883a 	mov	r4,r21
 8005254:	80073800 	call	8007380 <_realloc_r>
 8005258:	102f883a 	mov	r23,r2
 800525c:	103fee1e 	bne	r2,zero,8005218 <__alt_data_end+0xff005218>
 8005260:	81400417 	ldw	r5,16(r16)
 8005264:	a809883a 	mov	r4,r21
 8005268:	8004adc0 	call	8004adc <_free_r>
 800526c:	8080030b 	ldhu	r2,12(r16)
 8005270:	00ffdfc4 	movi	r3,-129
 8005274:	1884703a 	and	r2,r3,r2
 8005278:	00c00304 	movi	r3,12
 800527c:	a8c00015 	stw	r3,0(r21)
 8005280:	003f5906 	br	8004fe8 <__alt_data_end+0xff004fe8>
 8005284:	94c00044 	addi	r19,r18,1
 8005288:	02000044 	movi	r8,1
 800528c:	003f6006 	br	8005010 <__alt_data_end+0xff005010>
 8005290:	00bfffc4 	movi	r2,-1
 8005294:	003f0306 	br	8004ea4 <__alt_data_end+0xff004ea4>
 8005298:	00800304 	movi	r2,12
 800529c:	a8800015 	stw	r2,0(r21)
 80052a0:	8080030b 	ldhu	r2,12(r16)
 80052a4:	003f5006 	br	8004fe8 <__alt_data_end+0xff004fe8>

080052a8 <_fwalk>:
 80052a8:	defff704 	addi	sp,sp,-36
 80052ac:	dd000415 	stw	r20,16(sp)
 80052b0:	dfc00815 	stw	ra,32(sp)
 80052b4:	ddc00715 	stw	r23,28(sp)
 80052b8:	dd800615 	stw	r22,24(sp)
 80052bc:	dd400515 	stw	r21,20(sp)
 80052c0:	dcc00315 	stw	r19,12(sp)
 80052c4:	dc800215 	stw	r18,8(sp)
 80052c8:	dc400115 	stw	r17,4(sp)
 80052cc:	dc000015 	stw	r16,0(sp)
 80052d0:	2500b804 	addi	r20,r4,736
 80052d4:	a0002326 	beq	r20,zero,8005364 <_fwalk+0xbc>
 80052d8:	282b883a 	mov	r21,r5
 80052dc:	002f883a 	mov	r23,zero
 80052e0:	05800044 	movi	r22,1
 80052e4:	04ffffc4 	movi	r19,-1
 80052e8:	a4400117 	ldw	r17,4(r20)
 80052ec:	a4800217 	ldw	r18,8(r20)
 80052f0:	8c7fffc4 	addi	r17,r17,-1
 80052f4:	88000d16 	blt	r17,zero,800532c <_fwalk+0x84>
 80052f8:	94000304 	addi	r16,r18,12
 80052fc:	94800384 	addi	r18,r18,14
 8005300:	8080000b 	ldhu	r2,0(r16)
 8005304:	8c7fffc4 	addi	r17,r17,-1
 8005308:	813ffd04 	addi	r4,r16,-12
 800530c:	b080042e 	bgeu	r22,r2,8005320 <_fwalk+0x78>
 8005310:	9080000f 	ldh	r2,0(r18)
 8005314:	14c00226 	beq	r2,r19,8005320 <_fwalk+0x78>
 8005318:	a83ee83a 	callr	r21
 800531c:	b8aeb03a 	or	r23,r23,r2
 8005320:	84001a04 	addi	r16,r16,104
 8005324:	94801a04 	addi	r18,r18,104
 8005328:	8cfff51e 	bne	r17,r19,8005300 <__alt_data_end+0xff005300>
 800532c:	a5000017 	ldw	r20,0(r20)
 8005330:	a03fed1e 	bne	r20,zero,80052e8 <__alt_data_end+0xff0052e8>
 8005334:	b805883a 	mov	r2,r23
 8005338:	dfc00817 	ldw	ra,32(sp)
 800533c:	ddc00717 	ldw	r23,28(sp)
 8005340:	dd800617 	ldw	r22,24(sp)
 8005344:	dd400517 	ldw	r21,20(sp)
 8005348:	dd000417 	ldw	r20,16(sp)
 800534c:	dcc00317 	ldw	r19,12(sp)
 8005350:	dc800217 	ldw	r18,8(sp)
 8005354:	dc400117 	ldw	r17,4(sp)
 8005358:	dc000017 	ldw	r16,0(sp)
 800535c:	dec00904 	addi	sp,sp,36
 8005360:	f800283a 	ret
 8005364:	002f883a 	mov	r23,zero
 8005368:	003ff206 	br	8005334 <__alt_data_end+0xff005334>

0800536c <_fwalk_reent>:
 800536c:	defff704 	addi	sp,sp,-36
 8005370:	dd000415 	stw	r20,16(sp)
 8005374:	dfc00815 	stw	ra,32(sp)
 8005378:	ddc00715 	stw	r23,28(sp)
 800537c:	dd800615 	stw	r22,24(sp)
 8005380:	dd400515 	stw	r21,20(sp)
 8005384:	dcc00315 	stw	r19,12(sp)
 8005388:	dc800215 	stw	r18,8(sp)
 800538c:	dc400115 	stw	r17,4(sp)
 8005390:	dc000015 	stw	r16,0(sp)
 8005394:	2500b804 	addi	r20,r4,736
 8005398:	a0002326 	beq	r20,zero,8005428 <_fwalk_reent+0xbc>
 800539c:	282b883a 	mov	r21,r5
 80053a0:	2027883a 	mov	r19,r4
 80053a4:	002f883a 	mov	r23,zero
 80053a8:	05800044 	movi	r22,1
 80053ac:	04bfffc4 	movi	r18,-1
 80053b0:	a4400117 	ldw	r17,4(r20)
 80053b4:	a4000217 	ldw	r16,8(r20)
 80053b8:	8c7fffc4 	addi	r17,r17,-1
 80053bc:	88000c16 	blt	r17,zero,80053f0 <_fwalk_reent+0x84>
 80053c0:	84000304 	addi	r16,r16,12
 80053c4:	8080000b 	ldhu	r2,0(r16)
 80053c8:	8c7fffc4 	addi	r17,r17,-1
 80053cc:	817ffd04 	addi	r5,r16,-12
 80053d0:	b080052e 	bgeu	r22,r2,80053e8 <_fwalk_reent+0x7c>
 80053d4:	8080008f 	ldh	r2,2(r16)
 80053d8:	9809883a 	mov	r4,r19
 80053dc:	14800226 	beq	r2,r18,80053e8 <_fwalk_reent+0x7c>
 80053e0:	a83ee83a 	callr	r21
 80053e4:	b8aeb03a 	or	r23,r23,r2
 80053e8:	84001a04 	addi	r16,r16,104
 80053ec:	8cbff51e 	bne	r17,r18,80053c4 <__alt_data_end+0xff0053c4>
 80053f0:	a5000017 	ldw	r20,0(r20)
 80053f4:	a03fee1e 	bne	r20,zero,80053b0 <__alt_data_end+0xff0053b0>
 80053f8:	b805883a 	mov	r2,r23
 80053fc:	dfc00817 	ldw	ra,32(sp)
 8005400:	ddc00717 	ldw	r23,28(sp)
 8005404:	dd800617 	ldw	r22,24(sp)
 8005408:	dd400517 	ldw	r21,20(sp)
 800540c:	dd000417 	ldw	r20,16(sp)
 8005410:	dcc00317 	ldw	r19,12(sp)
 8005414:	dc800217 	ldw	r18,8(sp)
 8005418:	dc400117 	ldw	r17,4(sp)
 800541c:	dc000017 	ldw	r16,0(sp)
 8005420:	dec00904 	addi	sp,sp,36
 8005424:	f800283a 	ret
 8005428:	002f883a 	mov	r23,zero
 800542c:	003ff206 	br	80053f8 <__alt_data_end+0xff0053f8>

08005430 <_setlocale_r>:
 8005430:	30001b26 	beq	r6,zero,80054a0 <_setlocale_r+0x70>
 8005434:	01420074 	movhi	r5,2049
 8005438:	defffe04 	addi	sp,sp,-8
 800543c:	29460304 	addi	r5,r5,6156
 8005440:	3009883a 	mov	r4,r6
 8005444:	dc000015 	stw	r16,0(sp)
 8005448:	dfc00115 	stw	ra,4(sp)
 800544c:	3021883a 	mov	r16,r6
 8005450:	8007ae80 	call	8007ae8 <strcmp>
 8005454:	1000061e 	bne	r2,zero,8005470 <_setlocale_r+0x40>
 8005458:	00820074 	movhi	r2,2049
 800545c:	10860204 	addi	r2,r2,6152
 8005460:	dfc00117 	ldw	ra,4(sp)
 8005464:	dc000017 	ldw	r16,0(sp)
 8005468:	dec00204 	addi	sp,sp,8
 800546c:	f800283a 	ret
 8005470:	01420074 	movhi	r5,2049
 8005474:	29460204 	addi	r5,r5,6152
 8005478:	8009883a 	mov	r4,r16
 800547c:	8007ae80 	call	8007ae8 <strcmp>
 8005480:	103ff526 	beq	r2,zero,8005458 <__alt_data_end+0xff005458>
 8005484:	01420074 	movhi	r5,2049
 8005488:	2945ed04 	addi	r5,r5,6068
 800548c:	8009883a 	mov	r4,r16
 8005490:	8007ae80 	call	8007ae8 <strcmp>
 8005494:	103ff026 	beq	r2,zero,8005458 <__alt_data_end+0xff005458>
 8005498:	0005883a 	mov	r2,zero
 800549c:	003ff006 	br	8005460 <__alt_data_end+0xff005460>
 80054a0:	00820074 	movhi	r2,2049
 80054a4:	10860204 	addi	r2,r2,6152
 80054a8:	f800283a 	ret

080054ac <__locale_charset>:
 80054ac:	00820074 	movhi	r2,2049
 80054b0:	1087c004 	addi	r2,r2,7936
 80054b4:	f800283a 	ret

080054b8 <__locale_mb_cur_max>:
 80054b8:	00820074 	movhi	r2,2049
 80054bc:	108d6a04 	addi	r2,r2,13736
 80054c0:	10800017 	ldw	r2,0(r2)
 80054c4:	f800283a 	ret

080054c8 <__locale_msgcharset>:
 80054c8:	00820074 	movhi	r2,2049
 80054cc:	1087b804 	addi	r2,r2,7904
 80054d0:	f800283a 	ret

080054d4 <__locale_cjk_lang>:
 80054d4:	0005883a 	mov	r2,zero
 80054d8:	f800283a 	ret

080054dc <_localeconv_r>:
 80054dc:	00820074 	movhi	r2,2049
 80054e0:	1087c804 	addi	r2,r2,7968
 80054e4:	f800283a 	ret

080054e8 <setlocale>:
 80054e8:	00820074 	movhi	r2,2049
 80054ec:	108d6904 	addi	r2,r2,13732
 80054f0:	280d883a 	mov	r6,r5
 80054f4:	200b883a 	mov	r5,r4
 80054f8:	11000017 	ldw	r4,0(r2)
 80054fc:	80054301 	jmpi	8005430 <_setlocale_r>

08005500 <localeconv>:
 8005500:	00820074 	movhi	r2,2049
 8005504:	1087c804 	addi	r2,r2,7968
 8005508:	f800283a 	ret

0800550c <__smakebuf_r>:
 800550c:	2880030b 	ldhu	r2,12(r5)
 8005510:	10c0008c 	andi	r3,r2,2
 8005514:	1800411e 	bne	r3,zero,800561c <__smakebuf_r+0x110>
 8005518:	deffec04 	addi	sp,sp,-80
 800551c:	dc000f15 	stw	r16,60(sp)
 8005520:	2821883a 	mov	r16,r5
 8005524:	2940038f 	ldh	r5,14(r5)
 8005528:	dc401015 	stw	r17,64(sp)
 800552c:	dfc01315 	stw	ra,76(sp)
 8005530:	dcc01215 	stw	r19,72(sp)
 8005534:	dc801115 	stw	r18,68(sp)
 8005538:	2023883a 	mov	r17,r4
 800553c:	28001c16 	blt	r5,zero,80055b0 <__smakebuf_r+0xa4>
 8005540:	d80d883a 	mov	r6,sp
 8005544:	80096900 	call	8009690 <_fstat_r>
 8005548:	10001816 	blt	r2,zero,80055ac <__smakebuf_r+0xa0>
 800554c:	d8800117 	ldw	r2,4(sp)
 8005550:	00e00014 	movui	r3,32768
 8005554:	10bc000c 	andi	r2,r2,61440
 8005558:	14c80020 	cmpeqi	r19,r2,8192
 800555c:	10c03726 	beq	r2,r3,800563c <__smakebuf_r+0x130>
 8005560:	80c0030b 	ldhu	r3,12(r16)
 8005564:	18c20014 	ori	r3,r3,2048
 8005568:	80c0030d 	sth	r3,12(r16)
 800556c:	00c80004 	movi	r3,8192
 8005570:	10c0521e 	bne	r2,r3,80056bc <__smakebuf_r+0x1b0>
 8005574:	8140038f 	ldh	r5,14(r16)
 8005578:	8809883a 	mov	r4,r17
 800557c:	80096ec0 	call	80096ec <_isatty_r>
 8005580:	10004c26 	beq	r2,zero,80056b4 <__smakebuf_r+0x1a8>
 8005584:	8080030b 	ldhu	r2,12(r16)
 8005588:	80c010c4 	addi	r3,r16,67
 800558c:	80c00015 	stw	r3,0(r16)
 8005590:	10800054 	ori	r2,r2,1
 8005594:	8080030d 	sth	r2,12(r16)
 8005598:	00800044 	movi	r2,1
 800559c:	80c00415 	stw	r3,16(r16)
 80055a0:	80800515 	stw	r2,20(r16)
 80055a4:	04810004 	movi	r18,1024
 80055a8:	00000706 	br	80055c8 <__smakebuf_r+0xbc>
 80055ac:	8080030b 	ldhu	r2,12(r16)
 80055b0:	10c0200c 	andi	r3,r2,128
 80055b4:	18001f1e 	bne	r3,zero,8005634 <__smakebuf_r+0x128>
 80055b8:	04810004 	movi	r18,1024
 80055bc:	10820014 	ori	r2,r2,2048
 80055c0:	8080030d 	sth	r2,12(r16)
 80055c4:	0027883a 	mov	r19,zero
 80055c8:	900b883a 	mov	r5,r18
 80055cc:	8809883a 	mov	r4,r17
 80055d0:	80056c80 	call	80056c8 <_malloc_r>
 80055d4:	10002c26 	beq	r2,zero,8005688 <__smakebuf_r+0x17c>
 80055d8:	80c0030b 	ldhu	r3,12(r16)
 80055dc:	01020034 	movhi	r4,2048
 80055e0:	21118804 	addi	r4,r4,17952
 80055e4:	89000f15 	stw	r4,60(r17)
 80055e8:	18c02014 	ori	r3,r3,128
 80055ec:	80c0030d 	sth	r3,12(r16)
 80055f0:	80800015 	stw	r2,0(r16)
 80055f4:	80800415 	stw	r2,16(r16)
 80055f8:	84800515 	stw	r18,20(r16)
 80055fc:	98001a1e 	bne	r19,zero,8005668 <__smakebuf_r+0x15c>
 8005600:	dfc01317 	ldw	ra,76(sp)
 8005604:	dcc01217 	ldw	r19,72(sp)
 8005608:	dc801117 	ldw	r18,68(sp)
 800560c:	dc401017 	ldw	r17,64(sp)
 8005610:	dc000f17 	ldw	r16,60(sp)
 8005614:	dec01404 	addi	sp,sp,80
 8005618:	f800283a 	ret
 800561c:	288010c4 	addi	r2,r5,67
 8005620:	28800015 	stw	r2,0(r5)
 8005624:	28800415 	stw	r2,16(r5)
 8005628:	00800044 	movi	r2,1
 800562c:	28800515 	stw	r2,20(r5)
 8005630:	f800283a 	ret
 8005634:	04801004 	movi	r18,64
 8005638:	003fe006 	br	80055bc <__alt_data_end+0xff0055bc>
 800563c:	81000a17 	ldw	r4,40(r16)
 8005640:	00c20034 	movhi	r3,2048
 8005644:	18dea104 	addi	r3,r3,31364
 8005648:	20ffc51e 	bne	r4,r3,8005560 <__alt_data_end+0xff005560>
 800564c:	8080030b 	ldhu	r2,12(r16)
 8005650:	04810004 	movi	r18,1024
 8005654:	84801315 	stw	r18,76(r16)
 8005658:	1484b03a 	or	r2,r2,r18
 800565c:	8080030d 	sth	r2,12(r16)
 8005660:	0027883a 	mov	r19,zero
 8005664:	003fd806 	br	80055c8 <__alt_data_end+0xff0055c8>
 8005668:	8140038f 	ldh	r5,14(r16)
 800566c:	8809883a 	mov	r4,r17
 8005670:	80096ec0 	call	80096ec <_isatty_r>
 8005674:	103fe226 	beq	r2,zero,8005600 <__alt_data_end+0xff005600>
 8005678:	8080030b 	ldhu	r2,12(r16)
 800567c:	10800054 	ori	r2,r2,1
 8005680:	8080030d 	sth	r2,12(r16)
 8005684:	003fde06 	br	8005600 <__alt_data_end+0xff005600>
 8005688:	8080030b 	ldhu	r2,12(r16)
 800568c:	10c0800c 	andi	r3,r2,512
 8005690:	183fdb1e 	bne	r3,zero,8005600 <__alt_data_end+0xff005600>
 8005694:	10800094 	ori	r2,r2,2
 8005698:	80c010c4 	addi	r3,r16,67
 800569c:	8080030d 	sth	r2,12(r16)
 80056a0:	00800044 	movi	r2,1
 80056a4:	80c00015 	stw	r3,0(r16)
 80056a8:	80c00415 	stw	r3,16(r16)
 80056ac:	80800515 	stw	r2,20(r16)
 80056b0:	003fd306 	br	8005600 <__alt_data_end+0xff005600>
 80056b4:	04810004 	movi	r18,1024
 80056b8:	003fc306 	br	80055c8 <__alt_data_end+0xff0055c8>
 80056bc:	0027883a 	mov	r19,zero
 80056c0:	04810004 	movi	r18,1024
 80056c4:	003fc006 	br	80055c8 <__alt_data_end+0xff0055c8>

080056c8 <_malloc_r>:
 80056c8:	defff504 	addi	sp,sp,-44
 80056cc:	dc800315 	stw	r18,12(sp)
 80056d0:	dfc00a15 	stw	ra,40(sp)
 80056d4:	df000915 	stw	fp,36(sp)
 80056d8:	ddc00815 	stw	r23,32(sp)
 80056dc:	dd800715 	stw	r22,28(sp)
 80056e0:	dd400615 	stw	r21,24(sp)
 80056e4:	dd000515 	stw	r20,20(sp)
 80056e8:	dcc00415 	stw	r19,16(sp)
 80056ec:	dc400215 	stw	r17,8(sp)
 80056f0:	dc000115 	stw	r16,4(sp)
 80056f4:	288002c4 	addi	r2,r5,11
 80056f8:	00c00584 	movi	r3,22
 80056fc:	2025883a 	mov	r18,r4
 8005700:	18807f2e 	bgeu	r3,r2,8005900 <_malloc_r+0x238>
 8005704:	047ffe04 	movi	r17,-8
 8005708:	1462703a 	and	r17,r2,r17
 800570c:	8800a316 	blt	r17,zero,800599c <_malloc_r+0x2d4>
 8005710:	8940a236 	bltu	r17,r5,800599c <_malloc_r+0x2d4>
 8005714:	800d3880 	call	800d388 <__malloc_lock>
 8005718:	00807dc4 	movi	r2,503
 800571c:	1441e92e 	bgeu	r2,r17,8005ec4 <_malloc_r+0x7fc>
 8005720:	8804d27a 	srli	r2,r17,9
 8005724:	1000a126 	beq	r2,zero,80059ac <_malloc_r+0x2e4>
 8005728:	00c00104 	movi	r3,4
 800572c:	18811e36 	bltu	r3,r2,8005ba8 <_malloc_r+0x4e0>
 8005730:	8804d1ba 	srli	r2,r17,6
 8005734:	12000e44 	addi	r8,r2,57
 8005738:	11c00e04 	addi	r7,r2,56
 800573c:	4209883a 	add	r4,r8,r8
 8005740:	04c20074 	movhi	r19,2049
 8005744:	2109883a 	add	r4,r4,r4
 8005748:	9cc7d604 	addi	r19,r19,8024
 800574c:	2109883a 	add	r4,r4,r4
 8005750:	9909883a 	add	r4,r19,r4
 8005754:	24000117 	ldw	r16,4(r4)
 8005758:	213ffe04 	addi	r4,r4,-8
 800575c:	24009726 	beq	r4,r16,80059bc <_malloc_r+0x2f4>
 8005760:	80800117 	ldw	r2,4(r16)
 8005764:	01bfff04 	movi	r6,-4
 8005768:	014003c4 	movi	r5,15
 800576c:	1184703a 	and	r2,r2,r6
 8005770:	1447c83a 	sub	r3,r2,r17
 8005774:	28c00716 	blt	r5,r3,8005794 <_malloc_r+0xcc>
 8005778:	1800920e 	bge	r3,zero,80059c4 <_malloc_r+0x2fc>
 800577c:	84000317 	ldw	r16,12(r16)
 8005780:	24008e26 	beq	r4,r16,80059bc <_malloc_r+0x2f4>
 8005784:	80800117 	ldw	r2,4(r16)
 8005788:	1184703a 	and	r2,r2,r6
 800578c:	1447c83a 	sub	r3,r2,r17
 8005790:	28fff90e 	bge	r5,r3,8005778 <__alt_data_end+0xff005778>
 8005794:	3809883a 	mov	r4,r7
 8005798:	01820074 	movhi	r6,2049
 800579c:	9c000417 	ldw	r16,16(r19)
 80057a0:	3187d604 	addi	r6,r6,8024
 80057a4:	32000204 	addi	r8,r6,8
 80057a8:	82013426 	beq	r16,r8,8005c7c <_malloc_r+0x5b4>
 80057ac:	80c00117 	ldw	r3,4(r16)
 80057b0:	00bfff04 	movi	r2,-4
 80057b4:	188e703a 	and	r7,r3,r2
 80057b8:	3c45c83a 	sub	r2,r7,r17
 80057bc:	00c003c4 	movi	r3,15
 80057c0:	18811f16 	blt	r3,r2,8005c40 <_malloc_r+0x578>
 80057c4:	32000515 	stw	r8,20(r6)
 80057c8:	32000415 	stw	r8,16(r6)
 80057cc:	10007f0e 	bge	r2,zero,80059cc <_malloc_r+0x304>
 80057d0:	00807fc4 	movi	r2,511
 80057d4:	11c0fd36 	bltu	r2,r7,8005bcc <_malloc_r+0x504>
 80057d8:	3806d0fa 	srli	r3,r7,3
 80057dc:	01c00044 	movi	r7,1
 80057e0:	30800117 	ldw	r2,4(r6)
 80057e4:	19400044 	addi	r5,r3,1
 80057e8:	294b883a 	add	r5,r5,r5
 80057ec:	1807d0ba 	srai	r3,r3,2
 80057f0:	294b883a 	add	r5,r5,r5
 80057f4:	294b883a 	add	r5,r5,r5
 80057f8:	298b883a 	add	r5,r5,r6
 80057fc:	38c6983a 	sll	r3,r7,r3
 8005800:	29c00017 	ldw	r7,0(r5)
 8005804:	2a7ffe04 	addi	r9,r5,-8
 8005808:	1886b03a 	or	r3,r3,r2
 800580c:	82400315 	stw	r9,12(r16)
 8005810:	81c00215 	stw	r7,8(r16)
 8005814:	30c00115 	stw	r3,4(r6)
 8005818:	2c000015 	stw	r16,0(r5)
 800581c:	3c000315 	stw	r16,12(r7)
 8005820:	2005d0ba 	srai	r2,r4,2
 8005824:	01400044 	movi	r5,1
 8005828:	288a983a 	sll	r5,r5,r2
 800582c:	19406f36 	bltu	r3,r5,80059ec <_malloc_r+0x324>
 8005830:	28c4703a 	and	r2,r5,r3
 8005834:	10000a1e 	bne	r2,zero,8005860 <_malloc_r+0x198>
 8005838:	00bfff04 	movi	r2,-4
 800583c:	294b883a 	add	r5,r5,r5
 8005840:	2088703a 	and	r4,r4,r2
 8005844:	28c4703a 	and	r2,r5,r3
 8005848:	21000104 	addi	r4,r4,4
 800584c:	1000041e 	bne	r2,zero,8005860 <_malloc_r+0x198>
 8005850:	294b883a 	add	r5,r5,r5
 8005854:	28c4703a 	and	r2,r5,r3
 8005858:	21000104 	addi	r4,r4,4
 800585c:	103ffc26 	beq	r2,zero,8005850 <__alt_data_end+0xff005850>
 8005860:	02bfff04 	movi	r10,-4
 8005864:	024003c4 	movi	r9,15
 8005868:	21800044 	addi	r6,r4,1
 800586c:	318d883a 	add	r6,r6,r6
 8005870:	318d883a 	add	r6,r6,r6
 8005874:	318d883a 	add	r6,r6,r6
 8005878:	998d883a 	add	r6,r19,r6
 800587c:	333ffe04 	addi	r12,r6,-8
 8005880:	2017883a 	mov	r11,r4
 8005884:	31800104 	addi	r6,r6,4
 8005888:	34000017 	ldw	r16,0(r6)
 800588c:	31fffd04 	addi	r7,r6,-12
 8005890:	81c0041e 	bne	r16,r7,80058a4 <_malloc_r+0x1dc>
 8005894:	0000fb06 	br	8005c84 <_malloc_r+0x5bc>
 8005898:	1801030e 	bge	r3,zero,8005ca8 <_malloc_r+0x5e0>
 800589c:	84000317 	ldw	r16,12(r16)
 80058a0:	81c0f826 	beq	r16,r7,8005c84 <_malloc_r+0x5bc>
 80058a4:	80800117 	ldw	r2,4(r16)
 80058a8:	1284703a 	and	r2,r2,r10
 80058ac:	1447c83a 	sub	r3,r2,r17
 80058b0:	48fff90e 	bge	r9,r3,8005898 <__alt_data_end+0xff005898>
 80058b4:	80800317 	ldw	r2,12(r16)
 80058b8:	81000217 	ldw	r4,8(r16)
 80058bc:	89400054 	ori	r5,r17,1
 80058c0:	81400115 	stw	r5,4(r16)
 80058c4:	20800315 	stw	r2,12(r4)
 80058c8:	11000215 	stw	r4,8(r2)
 80058cc:	8463883a 	add	r17,r16,r17
 80058d0:	9c400515 	stw	r17,20(r19)
 80058d4:	9c400415 	stw	r17,16(r19)
 80058d8:	18800054 	ori	r2,r3,1
 80058dc:	88800115 	stw	r2,4(r17)
 80058e0:	8a000315 	stw	r8,12(r17)
 80058e4:	8a000215 	stw	r8,8(r17)
 80058e8:	88e3883a 	add	r17,r17,r3
 80058ec:	88c00015 	stw	r3,0(r17)
 80058f0:	9009883a 	mov	r4,r18
 80058f4:	800d3ac0 	call	800d3ac <__malloc_unlock>
 80058f8:	80800204 	addi	r2,r16,8
 80058fc:	00001b06 	br	800596c <_malloc_r+0x2a4>
 8005900:	04400404 	movi	r17,16
 8005904:	89402536 	bltu	r17,r5,800599c <_malloc_r+0x2d4>
 8005908:	800d3880 	call	800d388 <__malloc_lock>
 800590c:	00800184 	movi	r2,6
 8005910:	01000084 	movi	r4,2
 8005914:	04c20074 	movhi	r19,2049
 8005918:	1085883a 	add	r2,r2,r2
 800591c:	9cc7d604 	addi	r19,r19,8024
 8005920:	1085883a 	add	r2,r2,r2
 8005924:	9885883a 	add	r2,r19,r2
 8005928:	14000117 	ldw	r16,4(r2)
 800592c:	10fffe04 	addi	r3,r2,-8
 8005930:	80c0d926 	beq	r16,r3,8005c98 <_malloc_r+0x5d0>
 8005934:	80c00117 	ldw	r3,4(r16)
 8005938:	81000317 	ldw	r4,12(r16)
 800593c:	00bfff04 	movi	r2,-4
 8005940:	1884703a 	and	r2,r3,r2
 8005944:	81400217 	ldw	r5,8(r16)
 8005948:	8085883a 	add	r2,r16,r2
 800594c:	10c00117 	ldw	r3,4(r2)
 8005950:	29000315 	stw	r4,12(r5)
 8005954:	21400215 	stw	r5,8(r4)
 8005958:	18c00054 	ori	r3,r3,1
 800595c:	10c00115 	stw	r3,4(r2)
 8005960:	9009883a 	mov	r4,r18
 8005964:	800d3ac0 	call	800d3ac <__malloc_unlock>
 8005968:	80800204 	addi	r2,r16,8
 800596c:	dfc00a17 	ldw	ra,40(sp)
 8005970:	df000917 	ldw	fp,36(sp)
 8005974:	ddc00817 	ldw	r23,32(sp)
 8005978:	dd800717 	ldw	r22,28(sp)
 800597c:	dd400617 	ldw	r21,24(sp)
 8005980:	dd000517 	ldw	r20,20(sp)
 8005984:	dcc00417 	ldw	r19,16(sp)
 8005988:	dc800317 	ldw	r18,12(sp)
 800598c:	dc400217 	ldw	r17,8(sp)
 8005990:	dc000117 	ldw	r16,4(sp)
 8005994:	dec00b04 	addi	sp,sp,44
 8005998:	f800283a 	ret
 800599c:	00800304 	movi	r2,12
 80059a0:	90800015 	stw	r2,0(r18)
 80059a4:	0005883a 	mov	r2,zero
 80059a8:	003ff006 	br	800596c <__alt_data_end+0xff00596c>
 80059ac:	01002004 	movi	r4,128
 80059b0:	02001004 	movi	r8,64
 80059b4:	01c00fc4 	movi	r7,63
 80059b8:	003f6106 	br	8005740 <__alt_data_end+0xff005740>
 80059bc:	4009883a 	mov	r4,r8
 80059c0:	003f7506 	br	8005798 <__alt_data_end+0xff005798>
 80059c4:	81000317 	ldw	r4,12(r16)
 80059c8:	003fde06 	br	8005944 <__alt_data_end+0xff005944>
 80059cc:	81c5883a 	add	r2,r16,r7
 80059d0:	11400117 	ldw	r5,4(r2)
 80059d4:	9009883a 	mov	r4,r18
 80059d8:	29400054 	ori	r5,r5,1
 80059dc:	11400115 	stw	r5,4(r2)
 80059e0:	800d3ac0 	call	800d3ac <__malloc_unlock>
 80059e4:	80800204 	addi	r2,r16,8
 80059e8:	003fe006 	br	800596c <__alt_data_end+0xff00596c>
 80059ec:	9c000217 	ldw	r16,8(r19)
 80059f0:	00bfff04 	movi	r2,-4
 80059f4:	85800117 	ldw	r22,4(r16)
 80059f8:	b0ac703a 	and	r22,r22,r2
 80059fc:	b4400336 	bltu	r22,r17,8005a0c <_malloc_r+0x344>
 8005a00:	b445c83a 	sub	r2,r22,r17
 8005a04:	00c003c4 	movi	r3,15
 8005a08:	18805d16 	blt	r3,r2,8005b80 <_malloc_r+0x4b8>
 8005a0c:	05c20074 	movhi	r23,2049
 8005a10:	00820074 	movhi	r2,2049
 8005a14:	10944a04 	addi	r2,r2,20776
 8005a18:	bdcd6b04 	addi	r23,r23,13740
 8005a1c:	15400017 	ldw	r21,0(r2)
 8005a20:	b8c00017 	ldw	r3,0(r23)
 8005a24:	00bfffc4 	movi	r2,-1
 8005a28:	858d883a 	add	r6,r16,r22
 8005a2c:	8d6b883a 	add	r21,r17,r21
 8005a30:	1880ea26 	beq	r3,r2,8005ddc <_malloc_r+0x714>
 8005a34:	ad4403c4 	addi	r21,r21,4111
 8005a38:	00bc0004 	movi	r2,-4096
 8005a3c:	a8aa703a 	and	r21,r21,r2
 8005a40:	a80b883a 	mov	r5,r21
 8005a44:	9009883a 	mov	r4,r18
 8005a48:	d9800015 	stw	r6,0(sp)
 8005a4c:	80079580 	call	8007958 <_sbrk_r>
 8005a50:	1029883a 	mov	r20,r2
 8005a54:	00bfffc4 	movi	r2,-1
 8005a58:	d9800017 	ldw	r6,0(sp)
 8005a5c:	a080e826 	beq	r20,r2,8005e00 <_malloc_r+0x738>
 8005a60:	a180a636 	bltu	r20,r6,8005cfc <_malloc_r+0x634>
 8005a64:	07020074 	movhi	fp,2049
 8005a68:	e7145304 	addi	fp,fp,20812
 8005a6c:	e0800017 	ldw	r2,0(fp)
 8005a70:	a887883a 	add	r3,r21,r2
 8005a74:	e0c00015 	stw	r3,0(fp)
 8005a78:	3500e626 	beq	r6,r20,8005e14 <_malloc_r+0x74c>
 8005a7c:	b9000017 	ldw	r4,0(r23)
 8005a80:	00bfffc4 	movi	r2,-1
 8005a84:	2080ee26 	beq	r4,r2,8005e40 <_malloc_r+0x778>
 8005a88:	a185c83a 	sub	r2,r20,r6
 8005a8c:	10c5883a 	add	r2,r2,r3
 8005a90:	e0800015 	stw	r2,0(fp)
 8005a94:	a0c001cc 	andi	r3,r20,7
 8005a98:	1800bc26 	beq	r3,zero,8005d8c <_malloc_r+0x6c4>
 8005a9c:	a0e9c83a 	sub	r20,r20,r3
 8005aa0:	00840204 	movi	r2,4104
 8005aa4:	a5000204 	addi	r20,r20,8
 8005aa8:	10c7c83a 	sub	r3,r2,r3
 8005aac:	a545883a 	add	r2,r20,r21
 8005ab0:	1083ffcc 	andi	r2,r2,4095
 8005ab4:	18abc83a 	sub	r21,r3,r2
 8005ab8:	a80b883a 	mov	r5,r21
 8005abc:	9009883a 	mov	r4,r18
 8005ac0:	80079580 	call	8007958 <_sbrk_r>
 8005ac4:	00ffffc4 	movi	r3,-1
 8005ac8:	10c0e126 	beq	r2,r3,8005e50 <_malloc_r+0x788>
 8005acc:	1505c83a 	sub	r2,r2,r20
 8005ad0:	1545883a 	add	r2,r2,r21
 8005ad4:	10800054 	ori	r2,r2,1
 8005ad8:	e0c00017 	ldw	r3,0(fp)
 8005adc:	9d000215 	stw	r20,8(r19)
 8005ae0:	a0800115 	stw	r2,4(r20)
 8005ae4:	a8c7883a 	add	r3,r21,r3
 8005ae8:	e0c00015 	stw	r3,0(fp)
 8005aec:	84c00e26 	beq	r16,r19,8005b28 <_malloc_r+0x460>
 8005af0:	018003c4 	movi	r6,15
 8005af4:	3580a72e 	bgeu	r6,r22,8005d94 <_malloc_r+0x6cc>
 8005af8:	81400117 	ldw	r5,4(r16)
 8005afc:	013ffe04 	movi	r4,-8
 8005b00:	b0bffd04 	addi	r2,r22,-12
 8005b04:	1104703a 	and	r2,r2,r4
 8005b08:	2900004c 	andi	r4,r5,1
 8005b0c:	2088b03a 	or	r4,r4,r2
 8005b10:	81000115 	stw	r4,4(r16)
 8005b14:	01400144 	movi	r5,5
 8005b18:	8089883a 	add	r4,r16,r2
 8005b1c:	21400115 	stw	r5,4(r4)
 8005b20:	21400215 	stw	r5,8(r4)
 8005b24:	3080cd36 	bltu	r6,r2,8005e5c <_malloc_r+0x794>
 8005b28:	00820074 	movhi	r2,2049
 8005b2c:	10944904 	addi	r2,r2,20772
 8005b30:	11000017 	ldw	r4,0(r2)
 8005b34:	20c0012e 	bgeu	r4,r3,8005b3c <_malloc_r+0x474>
 8005b38:	10c00015 	stw	r3,0(r2)
 8005b3c:	00820074 	movhi	r2,2049
 8005b40:	10944804 	addi	r2,r2,20768
 8005b44:	11000017 	ldw	r4,0(r2)
 8005b48:	9c000217 	ldw	r16,8(r19)
 8005b4c:	20c0012e 	bgeu	r4,r3,8005b54 <_malloc_r+0x48c>
 8005b50:	10c00015 	stw	r3,0(r2)
 8005b54:	80c00117 	ldw	r3,4(r16)
 8005b58:	00bfff04 	movi	r2,-4
 8005b5c:	1886703a 	and	r3,r3,r2
 8005b60:	1c45c83a 	sub	r2,r3,r17
 8005b64:	1c400236 	bltu	r3,r17,8005b70 <_malloc_r+0x4a8>
 8005b68:	00c003c4 	movi	r3,15
 8005b6c:	18800416 	blt	r3,r2,8005b80 <_malloc_r+0x4b8>
 8005b70:	9009883a 	mov	r4,r18
 8005b74:	800d3ac0 	call	800d3ac <__malloc_unlock>
 8005b78:	0005883a 	mov	r2,zero
 8005b7c:	003f7b06 	br	800596c <__alt_data_end+0xff00596c>
 8005b80:	88c00054 	ori	r3,r17,1
 8005b84:	80c00115 	stw	r3,4(r16)
 8005b88:	8463883a 	add	r17,r16,r17
 8005b8c:	10800054 	ori	r2,r2,1
 8005b90:	9c400215 	stw	r17,8(r19)
 8005b94:	88800115 	stw	r2,4(r17)
 8005b98:	9009883a 	mov	r4,r18
 8005b9c:	800d3ac0 	call	800d3ac <__malloc_unlock>
 8005ba0:	80800204 	addi	r2,r16,8
 8005ba4:	003f7106 	br	800596c <__alt_data_end+0xff00596c>
 8005ba8:	00c00504 	movi	r3,20
 8005bac:	18804a2e 	bgeu	r3,r2,8005cd8 <_malloc_r+0x610>
 8005bb0:	00c01504 	movi	r3,84
 8005bb4:	18806e36 	bltu	r3,r2,8005d70 <_malloc_r+0x6a8>
 8005bb8:	8804d33a 	srli	r2,r17,12
 8005bbc:	12001bc4 	addi	r8,r2,111
 8005bc0:	11c01b84 	addi	r7,r2,110
 8005bc4:	4209883a 	add	r4,r8,r8
 8005bc8:	003edd06 	br	8005740 <__alt_data_end+0xff005740>
 8005bcc:	3804d27a 	srli	r2,r7,9
 8005bd0:	00c00104 	movi	r3,4
 8005bd4:	1880442e 	bgeu	r3,r2,8005ce8 <_malloc_r+0x620>
 8005bd8:	00c00504 	movi	r3,20
 8005bdc:	18808136 	bltu	r3,r2,8005de4 <_malloc_r+0x71c>
 8005be0:	11401704 	addi	r5,r2,92
 8005be4:	10c016c4 	addi	r3,r2,91
 8005be8:	294b883a 	add	r5,r5,r5
 8005bec:	294b883a 	add	r5,r5,r5
 8005bf0:	294b883a 	add	r5,r5,r5
 8005bf4:	994b883a 	add	r5,r19,r5
 8005bf8:	28800017 	ldw	r2,0(r5)
 8005bfc:	01820074 	movhi	r6,2049
 8005c00:	297ffe04 	addi	r5,r5,-8
 8005c04:	3187d604 	addi	r6,r6,8024
 8005c08:	28806526 	beq	r5,r2,8005da0 <_malloc_r+0x6d8>
 8005c0c:	01bfff04 	movi	r6,-4
 8005c10:	10c00117 	ldw	r3,4(r2)
 8005c14:	1986703a 	and	r3,r3,r6
 8005c18:	38c0022e 	bgeu	r7,r3,8005c24 <_malloc_r+0x55c>
 8005c1c:	10800217 	ldw	r2,8(r2)
 8005c20:	28bffb1e 	bne	r5,r2,8005c10 <__alt_data_end+0xff005c10>
 8005c24:	11400317 	ldw	r5,12(r2)
 8005c28:	98c00117 	ldw	r3,4(r19)
 8005c2c:	81400315 	stw	r5,12(r16)
 8005c30:	80800215 	stw	r2,8(r16)
 8005c34:	2c000215 	stw	r16,8(r5)
 8005c38:	14000315 	stw	r16,12(r2)
 8005c3c:	003ef806 	br	8005820 <__alt_data_end+0xff005820>
 8005c40:	88c00054 	ori	r3,r17,1
 8005c44:	80c00115 	stw	r3,4(r16)
 8005c48:	8463883a 	add	r17,r16,r17
 8005c4c:	34400515 	stw	r17,20(r6)
 8005c50:	34400415 	stw	r17,16(r6)
 8005c54:	10c00054 	ori	r3,r2,1
 8005c58:	8a000315 	stw	r8,12(r17)
 8005c5c:	8a000215 	stw	r8,8(r17)
 8005c60:	88c00115 	stw	r3,4(r17)
 8005c64:	88a3883a 	add	r17,r17,r2
 8005c68:	88800015 	stw	r2,0(r17)
 8005c6c:	9009883a 	mov	r4,r18
 8005c70:	800d3ac0 	call	800d3ac <__malloc_unlock>
 8005c74:	80800204 	addi	r2,r16,8
 8005c78:	003f3c06 	br	800596c <__alt_data_end+0xff00596c>
 8005c7c:	30c00117 	ldw	r3,4(r6)
 8005c80:	003ee706 	br	8005820 <__alt_data_end+0xff005820>
 8005c84:	5ac00044 	addi	r11,r11,1
 8005c88:	588000cc 	andi	r2,r11,3
 8005c8c:	31800204 	addi	r6,r6,8
 8005c90:	103efd1e 	bne	r2,zero,8005888 <__alt_data_end+0xff005888>
 8005c94:	00002406 	br	8005d28 <_malloc_r+0x660>
 8005c98:	14000317 	ldw	r16,12(r2)
 8005c9c:	143f251e 	bne	r2,r16,8005934 <__alt_data_end+0xff005934>
 8005ca0:	21000084 	addi	r4,r4,2
 8005ca4:	003ebc06 	br	8005798 <__alt_data_end+0xff005798>
 8005ca8:	8085883a 	add	r2,r16,r2
 8005cac:	10c00117 	ldw	r3,4(r2)
 8005cb0:	81000317 	ldw	r4,12(r16)
 8005cb4:	81400217 	ldw	r5,8(r16)
 8005cb8:	18c00054 	ori	r3,r3,1
 8005cbc:	10c00115 	stw	r3,4(r2)
 8005cc0:	29000315 	stw	r4,12(r5)
 8005cc4:	21400215 	stw	r5,8(r4)
 8005cc8:	9009883a 	mov	r4,r18
 8005ccc:	800d3ac0 	call	800d3ac <__malloc_unlock>
 8005cd0:	80800204 	addi	r2,r16,8
 8005cd4:	003f2506 	br	800596c <__alt_data_end+0xff00596c>
 8005cd8:	12001704 	addi	r8,r2,92
 8005cdc:	11c016c4 	addi	r7,r2,91
 8005ce0:	4209883a 	add	r4,r8,r8
 8005ce4:	003e9606 	br	8005740 <__alt_data_end+0xff005740>
 8005ce8:	3804d1ba 	srli	r2,r7,6
 8005cec:	11400e44 	addi	r5,r2,57
 8005cf0:	10c00e04 	addi	r3,r2,56
 8005cf4:	294b883a 	add	r5,r5,r5
 8005cf8:	003fbc06 	br	8005bec <__alt_data_end+0xff005bec>
 8005cfc:	84ff5926 	beq	r16,r19,8005a64 <__alt_data_end+0xff005a64>
 8005d00:	00820074 	movhi	r2,2049
 8005d04:	1087d604 	addi	r2,r2,8024
 8005d08:	14000217 	ldw	r16,8(r2)
 8005d0c:	00bfff04 	movi	r2,-4
 8005d10:	80c00117 	ldw	r3,4(r16)
 8005d14:	1886703a 	and	r3,r3,r2
 8005d18:	003f9106 	br	8005b60 <__alt_data_end+0xff005b60>
 8005d1c:	60800217 	ldw	r2,8(r12)
 8005d20:	213fffc4 	addi	r4,r4,-1
 8005d24:	1300651e 	bne	r2,r12,8005ebc <_malloc_r+0x7f4>
 8005d28:	208000cc 	andi	r2,r4,3
 8005d2c:	633ffe04 	addi	r12,r12,-8
 8005d30:	103ffa1e 	bne	r2,zero,8005d1c <__alt_data_end+0xff005d1c>
 8005d34:	98800117 	ldw	r2,4(r19)
 8005d38:	0146303a 	nor	r3,zero,r5
 8005d3c:	1884703a 	and	r2,r3,r2
 8005d40:	98800115 	stw	r2,4(r19)
 8005d44:	294b883a 	add	r5,r5,r5
 8005d48:	117f2836 	bltu	r2,r5,80059ec <__alt_data_end+0xff0059ec>
 8005d4c:	283f2726 	beq	r5,zero,80059ec <__alt_data_end+0xff0059ec>
 8005d50:	2886703a 	and	r3,r5,r2
 8005d54:	5809883a 	mov	r4,r11
 8005d58:	183ec31e 	bne	r3,zero,8005868 <__alt_data_end+0xff005868>
 8005d5c:	294b883a 	add	r5,r5,r5
 8005d60:	2886703a 	and	r3,r5,r2
 8005d64:	21000104 	addi	r4,r4,4
 8005d68:	183ffc26 	beq	r3,zero,8005d5c <__alt_data_end+0xff005d5c>
 8005d6c:	003ebe06 	br	8005868 <__alt_data_end+0xff005868>
 8005d70:	00c05504 	movi	r3,340
 8005d74:	18801236 	bltu	r3,r2,8005dc0 <_malloc_r+0x6f8>
 8005d78:	8804d3fa 	srli	r2,r17,15
 8005d7c:	12001e04 	addi	r8,r2,120
 8005d80:	11c01dc4 	addi	r7,r2,119
 8005d84:	4209883a 	add	r4,r8,r8
 8005d88:	003e6d06 	br	8005740 <__alt_data_end+0xff005740>
 8005d8c:	00c40004 	movi	r3,4096
 8005d90:	003f4606 	br	8005aac <__alt_data_end+0xff005aac>
 8005d94:	00800044 	movi	r2,1
 8005d98:	a0800115 	stw	r2,4(r20)
 8005d9c:	003f7406 	br	8005b70 <__alt_data_end+0xff005b70>
 8005da0:	1805d0ba 	srai	r2,r3,2
 8005da4:	01c00044 	movi	r7,1
 8005da8:	30c00117 	ldw	r3,4(r6)
 8005dac:	388e983a 	sll	r7,r7,r2
 8005db0:	2805883a 	mov	r2,r5
 8005db4:	38c6b03a 	or	r3,r7,r3
 8005db8:	30c00115 	stw	r3,4(r6)
 8005dbc:	003f9b06 	br	8005c2c <__alt_data_end+0xff005c2c>
 8005dc0:	00c15504 	movi	r3,1364
 8005dc4:	18801a36 	bltu	r3,r2,8005e30 <_malloc_r+0x768>
 8005dc8:	8804d4ba 	srli	r2,r17,18
 8005dcc:	12001f44 	addi	r8,r2,125
 8005dd0:	11c01f04 	addi	r7,r2,124
 8005dd4:	4209883a 	add	r4,r8,r8
 8005dd8:	003e5906 	br	8005740 <__alt_data_end+0xff005740>
 8005ddc:	ad400404 	addi	r21,r21,16
 8005de0:	003f1706 	br	8005a40 <__alt_data_end+0xff005a40>
 8005de4:	00c01504 	movi	r3,84
 8005de8:	18802336 	bltu	r3,r2,8005e78 <_malloc_r+0x7b0>
 8005dec:	3804d33a 	srli	r2,r7,12
 8005df0:	11401bc4 	addi	r5,r2,111
 8005df4:	10c01b84 	addi	r3,r2,110
 8005df8:	294b883a 	add	r5,r5,r5
 8005dfc:	003f7b06 	br	8005bec <__alt_data_end+0xff005bec>
 8005e00:	9c000217 	ldw	r16,8(r19)
 8005e04:	00bfff04 	movi	r2,-4
 8005e08:	80c00117 	ldw	r3,4(r16)
 8005e0c:	1886703a 	and	r3,r3,r2
 8005e10:	003f5306 	br	8005b60 <__alt_data_end+0xff005b60>
 8005e14:	3083ffcc 	andi	r2,r6,4095
 8005e18:	103f181e 	bne	r2,zero,8005a7c <__alt_data_end+0xff005a7c>
 8005e1c:	99000217 	ldw	r4,8(r19)
 8005e20:	b545883a 	add	r2,r22,r21
 8005e24:	10800054 	ori	r2,r2,1
 8005e28:	20800115 	stw	r2,4(r4)
 8005e2c:	003f3e06 	br	8005b28 <__alt_data_end+0xff005b28>
 8005e30:	01003f84 	movi	r4,254
 8005e34:	02001fc4 	movi	r8,127
 8005e38:	01c01f84 	movi	r7,126
 8005e3c:	003e4006 	br	8005740 <__alt_data_end+0xff005740>
 8005e40:	00820074 	movhi	r2,2049
 8005e44:	108d6b04 	addi	r2,r2,13740
 8005e48:	15000015 	stw	r20,0(r2)
 8005e4c:	003f1106 	br	8005a94 <__alt_data_end+0xff005a94>
 8005e50:	00800044 	movi	r2,1
 8005e54:	002b883a 	mov	r21,zero
 8005e58:	003f1f06 	br	8005ad8 <__alt_data_end+0xff005ad8>
 8005e5c:	81400204 	addi	r5,r16,8
 8005e60:	9009883a 	mov	r4,r18
 8005e64:	8004adc0 	call	8004adc <_free_r>
 8005e68:	00820074 	movhi	r2,2049
 8005e6c:	10945304 	addi	r2,r2,20812
 8005e70:	10c00017 	ldw	r3,0(r2)
 8005e74:	003f2c06 	br	8005b28 <__alt_data_end+0xff005b28>
 8005e78:	00c05504 	movi	r3,340
 8005e7c:	18800536 	bltu	r3,r2,8005e94 <_malloc_r+0x7cc>
 8005e80:	3804d3fa 	srli	r2,r7,15
 8005e84:	11401e04 	addi	r5,r2,120
 8005e88:	10c01dc4 	addi	r3,r2,119
 8005e8c:	294b883a 	add	r5,r5,r5
 8005e90:	003f5606 	br	8005bec <__alt_data_end+0xff005bec>
 8005e94:	00c15504 	movi	r3,1364
 8005e98:	18800536 	bltu	r3,r2,8005eb0 <_malloc_r+0x7e8>
 8005e9c:	3804d4ba 	srli	r2,r7,18
 8005ea0:	11401f44 	addi	r5,r2,125
 8005ea4:	10c01f04 	addi	r3,r2,124
 8005ea8:	294b883a 	add	r5,r5,r5
 8005eac:	003f4f06 	br	8005bec <__alt_data_end+0xff005bec>
 8005eb0:	01403f84 	movi	r5,254
 8005eb4:	00c01f84 	movi	r3,126
 8005eb8:	003f4c06 	br	8005bec <__alt_data_end+0xff005bec>
 8005ebc:	98800117 	ldw	r2,4(r19)
 8005ec0:	003fa006 	br	8005d44 <__alt_data_end+0xff005d44>
 8005ec4:	8808d0fa 	srli	r4,r17,3
 8005ec8:	20800044 	addi	r2,r4,1
 8005ecc:	1085883a 	add	r2,r2,r2
 8005ed0:	003e9006 	br	8005914 <__alt_data_end+0xff005914>

08005ed4 <memchr>:
 8005ed4:	208000cc 	andi	r2,r4,3
 8005ed8:	280f883a 	mov	r7,r5
 8005edc:	10003426 	beq	r2,zero,8005fb0 <memchr+0xdc>
 8005ee0:	30bfffc4 	addi	r2,r6,-1
 8005ee4:	30001a26 	beq	r6,zero,8005f50 <memchr+0x7c>
 8005ee8:	20c00003 	ldbu	r3,0(r4)
 8005eec:	29803fcc 	andi	r6,r5,255
 8005ef0:	30c0051e 	bne	r6,r3,8005f08 <memchr+0x34>
 8005ef4:	00001806 	br	8005f58 <memchr+0x84>
 8005ef8:	10001526 	beq	r2,zero,8005f50 <memchr+0x7c>
 8005efc:	20c00003 	ldbu	r3,0(r4)
 8005f00:	10bfffc4 	addi	r2,r2,-1
 8005f04:	30c01426 	beq	r6,r3,8005f58 <memchr+0x84>
 8005f08:	21000044 	addi	r4,r4,1
 8005f0c:	20c000cc 	andi	r3,r4,3
 8005f10:	183ff91e 	bne	r3,zero,8005ef8 <__alt_data_end+0xff005ef8>
 8005f14:	020000c4 	movi	r8,3
 8005f18:	40801136 	bltu	r8,r2,8005f60 <memchr+0x8c>
 8005f1c:	10000c26 	beq	r2,zero,8005f50 <memchr+0x7c>
 8005f20:	20c00003 	ldbu	r3,0(r4)
 8005f24:	29403fcc 	andi	r5,r5,255
 8005f28:	28c00b26 	beq	r5,r3,8005f58 <memchr+0x84>
 8005f2c:	20c00044 	addi	r3,r4,1
 8005f30:	39803fcc 	andi	r6,r7,255
 8005f34:	2089883a 	add	r4,r4,r2
 8005f38:	00000306 	br	8005f48 <memchr+0x74>
 8005f3c:	18c00044 	addi	r3,r3,1
 8005f40:	197fffc3 	ldbu	r5,-1(r3)
 8005f44:	31400526 	beq	r6,r5,8005f5c <memchr+0x88>
 8005f48:	1805883a 	mov	r2,r3
 8005f4c:	20fffb1e 	bne	r4,r3,8005f3c <__alt_data_end+0xff005f3c>
 8005f50:	0005883a 	mov	r2,zero
 8005f54:	f800283a 	ret
 8005f58:	2005883a 	mov	r2,r4
 8005f5c:	f800283a 	ret
 8005f60:	28c03fcc 	andi	r3,r5,255
 8005f64:	1812923a 	slli	r9,r3,8
 8005f68:	02ffbff4 	movhi	r11,65279
 8005f6c:	02a02074 	movhi	r10,32897
 8005f70:	48d2b03a 	or	r9,r9,r3
 8005f74:	4806943a 	slli	r3,r9,16
 8005f78:	5affbfc4 	addi	r11,r11,-257
 8005f7c:	52a02004 	addi	r10,r10,-32640
 8005f80:	48d2b03a 	or	r9,r9,r3
 8005f84:	20c00017 	ldw	r3,0(r4)
 8005f88:	48c6f03a 	xor	r3,r9,r3
 8005f8c:	1acd883a 	add	r6,r3,r11
 8005f90:	00c6303a 	nor	r3,zero,r3
 8005f94:	30c6703a 	and	r3,r6,r3
 8005f98:	1a86703a 	and	r3,r3,r10
 8005f9c:	183fe01e 	bne	r3,zero,8005f20 <__alt_data_end+0xff005f20>
 8005fa0:	10bfff04 	addi	r2,r2,-4
 8005fa4:	21000104 	addi	r4,r4,4
 8005fa8:	40bff636 	bltu	r8,r2,8005f84 <__alt_data_end+0xff005f84>
 8005fac:	003fdb06 	br	8005f1c <__alt_data_end+0xff005f1c>
 8005fb0:	3005883a 	mov	r2,r6
 8005fb4:	003fd706 	br	8005f14 <__alt_data_end+0xff005f14>

08005fb8 <memcpy>:
 8005fb8:	defffd04 	addi	sp,sp,-12
 8005fbc:	dfc00215 	stw	ra,8(sp)
 8005fc0:	dc400115 	stw	r17,4(sp)
 8005fc4:	dc000015 	stw	r16,0(sp)
 8005fc8:	00c003c4 	movi	r3,15
 8005fcc:	2005883a 	mov	r2,r4
 8005fd0:	1980452e 	bgeu	r3,r6,80060e8 <memcpy+0x130>
 8005fd4:	2906b03a 	or	r3,r5,r4
 8005fd8:	18c000cc 	andi	r3,r3,3
 8005fdc:	1800441e 	bne	r3,zero,80060f0 <memcpy+0x138>
 8005fe0:	347ffc04 	addi	r17,r6,-16
 8005fe4:	8822d13a 	srli	r17,r17,4
 8005fe8:	28c00104 	addi	r3,r5,4
 8005fec:	23400104 	addi	r13,r4,4
 8005ff0:	8820913a 	slli	r16,r17,4
 8005ff4:	2b000204 	addi	r12,r5,8
 8005ff8:	22c00204 	addi	r11,r4,8
 8005ffc:	84000504 	addi	r16,r16,20
 8006000:	2a800304 	addi	r10,r5,12
 8006004:	22400304 	addi	r9,r4,12
 8006008:	2c21883a 	add	r16,r5,r16
 800600c:	2811883a 	mov	r8,r5
 8006010:	200f883a 	mov	r7,r4
 8006014:	41000017 	ldw	r4,0(r8)
 8006018:	1fc00017 	ldw	ra,0(r3)
 800601c:	63c00017 	ldw	r15,0(r12)
 8006020:	39000015 	stw	r4,0(r7)
 8006024:	53800017 	ldw	r14,0(r10)
 8006028:	6fc00015 	stw	ra,0(r13)
 800602c:	5bc00015 	stw	r15,0(r11)
 8006030:	4b800015 	stw	r14,0(r9)
 8006034:	18c00404 	addi	r3,r3,16
 8006038:	39c00404 	addi	r7,r7,16
 800603c:	42000404 	addi	r8,r8,16
 8006040:	6b400404 	addi	r13,r13,16
 8006044:	63000404 	addi	r12,r12,16
 8006048:	5ac00404 	addi	r11,r11,16
 800604c:	52800404 	addi	r10,r10,16
 8006050:	4a400404 	addi	r9,r9,16
 8006054:	1c3fef1e 	bne	r3,r16,8006014 <__alt_data_end+0xff006014>
 8006058:	89c00044 	addi	r7,r17,1
 800605c:	380e913a 	slli	r7,r7,4
 8006060:	310003cc 	andi	r4,r6,15
 8006064:	02c000c4 	movi	r11,3
 8006068:	11c7883a 	add	r3,r2,r7
 800606c:	29cb883a 	add	r5,r5,r7
 8006070:	5900212e 	bgeu	r11,r4,80060f8 <memcpy+0x140>
 8006074:	1813883a 	mov	r9,r3
 8006078:	2811883a 	mov	r8,r5
 800607c:	200f883a 	mov	r7,r4
 8006080:	42800017 	ldw	r10,0(r8)
 8006084:	4a400104 	addi	r9,r9,4
 8006088:	39ffff04 	addi	r7,r7,-4
 800608c:	4abfff15 	stw	r10,-4(r9)
 8006090:	42000104 	addi	r8,r8,4
 8006094:	59fffa36 	bltu	r11,r7,8006080 <__alt_data_end+0xff006080>
 8006098:	213fff04 	addi	r4,r4,-4
 800609c:	2008d0ba 	srli	r4,r4,2
 80060a0:	318000cc 	andi	r6,r6,3
 80060a4:	21000044 	addi	r4,r4,1
 80060a8:	2109883a 	add	r4,r4,r4
 80060ac:	2109883a 	add	r4,r4,r4
 80060b0:	1907883a 	add	r3,r3,r4
 80060b4:	290b883a 	add	r5,r5,r4
 80060b8:	30000626 	beq	r6,zero,80060d4 <memcpy+0x11c>
 80060bc:	198d883a 	add	r6,r3,r6
 80060c0:	29c00003 	ldbu	r7,0(r5)
 80060c4:	18c00044 	addi	r3,r3,1
 80060c8:	29400044 	addi	r5,r5,1
 80060cc:	19ffffc5 	stb	r7,-1(r3)
 80060d0:	19bffb1e 	bne	r3,r6,80060c0 <__alt_data_end+0xff0060c0>
 80060d4:	dfc00217 	ldw	ra,8(sp)
 80060d8:	dc400117 	ldw	r17,4(sp)
 80060dc:	dc000017 	ldw	r16,0(sp)
 80060e0:	dec00304 	addi	sp,sp,12
 80060e4:	f800283a 	ret
 80060e8:	2007883a 	mov	r3,r4
 80060ec:	003ff206 	br	80060b8 <__alt_data_end+0xff0060b8>
 80060f0:	2007883a 	mov	r3,r4
 80060f4:	003ff106 	br	80060bc <__alt_data_end+0xff0060bc>
 80060f8:	200d883a 	mov	r6,r4
 80060fc:	003fee06 	br	80060b8 <__alt_data_end+0xff0060b8>

08006100 <memmove>:
 8006100:	2005883a 	mov	r2,r4
 8006104:	29000b2e 	bgeu	r5,r4,8006134 <memmove+0x34>
 8006108:	298f883a 	add	r7,r5,r6
 800610c:	21c0092e 	bgeu	r4,r7,8006134 <memmove+0x34>
 8006110:	2187883a 	add	r3,r4,r6
 8006114:	198bc83a 	sub	r5,r3,r6
 8006118:	30004826 	beq	r6,zero,800623c <memmove+0x13c>
 800611c:	39ffffc4 	addi	r7,r7,-1
 8006120:	39000003 	ldbu	r4,0(r7)
 8006124:	18ffffc4 	addi	r3,r3,-1
 8006128:	19000005 	stb	r4,0(r3)
 800612c:	28fffb1e 	bne	r5,r3,800611c <__alt_data_end+0xff00611c>
 8006130:	f800283a 	ret
 8006134:	00c003c4 	movi	r3,15
 8006138:	1980412e 	bgeu	r3,r6,8006240 <memmove+0x140>
 800613c:	2886b03a 	or	r3,r5,r2
 8006140:	18c000cc 	andi	r3,r3,3
 8006144:	1800401e 	bne	r3,zero,8006248 <memmove+0x148>
 8006148:	33fffc04 	addi	r15,r6,-16
 800614c:	781ed13a 	srli	r15,r15,4
 8006150:	28c00104 	addi	r3,r5,4
 8006154:	13400104 	addi	r13,r2,4
 8006158:	781c913a 	slli	r14,r15,4
 800615c:	2b000204 	addi	r12,r5,8
 8006160:	12c00204 	addi	r11,r2,8
 8006164:	73800504 	addi	r14,r14,20
 8006168:	2a800304 	addi	r10,r5,12
 800616c:	12400304 	addi	r9,r2,12
 8006170:	2b9d883a 	add	r14,r5,r14
 8006174:	2811883a 	mov	r8,r5
 8006178:	100f883a 	mov	r7,r2
 800617c:	41000017 	ldw	r4,0(r8)
 8006180:	39c00404 	addi	r7,r7,16
 8006184:	18c00404 	addi	r3,r3,16
 8006188:	393ffc15 	stw	r4,-16(r7)
 800618c:	193ffc17 	ldw	r4,-16(r3)
 8006190:	6b400404 	addi	r13,r13,16
 8006194:	5ac00404 	addi	r11,r11,16
 8006198:	693ffc15 	stw	r4,-16(r13)
 800619c:	61000017 	ldw	r4,0(r12)
 80061a0:	4a400404 	addi	r9,r9,16
 80061a4:	42000404 	addi	r8,r8,16
 80061a8:	593ffc15 	stw	r4,-16(r11)
 80061ac:	51000017 	ldw	r4,0(r10)
 80061b0:	63000404 	addi	r12,r12,16
 80061b4:	52800404 	addi	r10,r10,16
 80061b8:	493ffc15 	stw	r4,-16(r9)
 80061bc:	1bbfef1e 	bne	r3,r14,800617c <__alt_data_end+0xff00617c>
 80061c0:	79000044 	addi	r4,r15,1
 80061c4:	2008913a 	slli	r4,r4,4
 80061c8:	328003cc 	andi	r10,r6,15
 80061cc:	02c000c4 	movi	r11,3
 80061d0:	1107883a 	add	r3,r2,r4
 80061d4:	290b883a 	add	r5,r5,r4
 80061d8:	5a801e2e 	bgeu	r11,r10,8006254 <memmove+0x154>
 80061dc:	1813883a 	mov	r9,r3
 80061e0:	2811883a 	mov	r8,r5
 80061e4:	500f883a 	mov	r7,r10
 80061e8:	41000017 	ldw	r4,0(r8)
 80061ec:	4a400104 	addi	r9,r9,4
 80061f0:	39ffff04 	addi	r7,r7,-4
 80061f4:	493fff15 	stw	r4,-4(r9)
 80061f8:	42000104 	addi	r8,r8,4
 80061fc:	59fffa36 	bltu	r11,r7,80061e8 <__alt_data_end+0xff0061e8>
 8006200:	513fff04 	addi	r4,r10,-4
 8006204:	2008d0ba 	srli	r4,r4,2
 8006208:	318000cc 	andi	r6,r6,3
 800620c:	21000044 	addi	r4,r4,1
 8006210:	2109883a 	add	r4,r4,r4
 8006214:	2109883a 	add	r4,r4,r4
 8006218:	1907883a 	add	r3,r3,r4
 800621c:	290b883a 	add	r5,r5,r4
 8006220:	30000b26 	beq	r6,zero,8006250 <memmove+0x150>
 8006224:	198d883a 	add	r6,r3,r6
 8006228:	29c00003 	ldbu	r7,0(r5)
 800622c:	18c00044 	addi	r3,r3,1
 8006230:	29400044 	addi	r5,r5,1
 8006234:	19ffffc5 	stb	r7,-1(r3)
 8006238:	19bffb1e 	bne	r3,r6,8006228 <__alt_data_end+0xff006228>
 800623c:	f800283a 	ret
 8006240:	1007883a 	mov	r3,r2
 8006244:	003ff606 	br	8006220 <__alt_data_end+0xff006220>
 8006248:	1007883a 	mov	r3,r2
 800624c:	003ff506 	br	8006224 <__alt_data_end+0xff006224>
 8006250:	f800283a 	ret
 8006254:	500d883a 	mov	r6,r10
 8006258:	003ff106 	br	8006220 <__alt_data_end+0xff006220>

0800625c <memset>:
 800625c:	20c000cc 	andi	r3,r4,3
 8006260:	2005883a 	mov	r2,r4
 8006264:	18004426 	beq	r3,zero,8006378 <memset+0x11c>
 8006268:	31ffffc4 	addi	r7,r6,-1
 800626c:	30004026 	beq	r6,zero,8006370 <memset+0x114>
 8006270:	2813883a 	mov	r9,r5
 8006274:	200d883a 	mov	r6,r4
 8006278:	2007883a 	mov	r3,r4
 800627c:	00000406 	br	8006290 <memset+0x34>
 8006280:	3a3fffc4 	addi	r8,r7,-1
 8006284:	31800044 	addi	r6,r6,1
 8006288:	38003926 	beq	r7,zero,8006370 <memset+0x114>
 800628c:	400f883a 	mov	r7,r8
 8006290:	18c00044 	addi	r3,r3,1
 8006294:	32400005 	stb	r9,0(r6)
 8006298:	1a0000cc 	andi	r8,r3,3
 800629c:	403ff81e 	bne	r8,zero,8006280 <__alt_data_end+0xff006280>
 80062a0:	010000c4 	movi	r4,3
 80062a4:	21c02d2e 	bgeu	r4,r7,800635c <memset+0x100>
 80062a8:	29003fcc 	andi	r4,r5,255
 80062ac:	200c923a 	slli	r6,r4,8
 80062b0:	3108b03a 	or	r4,r6,r4
 80062b4:	200c943a 	slli	r6,r4,16
 80062b8:	218cb03a 	or	r6,r4,r6
 80062bc:	010003c4 	movi	r4,15
 80062c0:	21c0182e 	bgeu	r4,r7,8006324 <memset+0xc8>
 80062c4:	3b3ffc04 	addi	r12,r7,-16
 80062c8:	6018d13a 	srli	r12,r12,4
 80062cc:	1a000104 	addi	r8,r3,4
 80062d0:	1ac00204 	addi	r11,r3,8
 80062d4:	6008913a 	slli	r4,r12,4
 80062d8:	1a800304 	addi	r10,r3,12
 80062dc:	1813883a 	mov	r9,r3
 80062e0:	21000504 	addi	r4,r4,20
 80062e4:	1909883a 	add	r4,r3,r4
 80062e8:	49800015 	stw	r6,0(r9)
 80062ec:	41800015 	stw	r6,0(r8)
 80062f0:	59800015 	stw	r6,0(r11)
 80062f4:	51800015 	stw	r6,0(r10)
 80062f8:	42000404 	addi	r8,r8,16
 80062fc:	4a400404 	addi	r9,r9,16
 8006300:	5ac00404 	addi	r11,r11,16
 8006304:	52800404 	addi	r10,r10,16
 8006308:	413ff71e 	bne	r8,r4,80062e8 <__alt_data_end+0xff0062e8>
 800630c:	63000044 	addi	r12,r12,1
 8006310:	6018913a 	slli	r12,r12,4
 8006314:	39c003cc 	andi	r7,r7,15
 8006318:	010000c4 	movi	r4,3
 800631c:	1b07883a 	add	r3,r3,r12
 8006320:	21c00e2e 	bgeu	r4,r7,800635c <memset+0x100>
 8006324:	1813883a 	mov	r9,r3
 8006328:	3811883a 	mov	r8,r7
 800632c:	010000c4 	movi	r4,3
 8006330:	49800015 	stw	r6,0(r9)
 8006334:	423fff04 	addi	r8,r8,-4
 8006338:	4a400104 	addi	r9,r9,4
 800633c:	223ffc36 	bltu	r4,r8,8006330 <__alt_data_end+0xff006330>
 8006340:	393fff04 	addi	r4,r7,-4
 8006344:	2008d0ba 	srli	r4,r4,2
 8006348:	39c000cc 	andi	r7,r7,3
 800634c:	21000044 	addi	r4,r4,1
 8006350:	2109883a 	add	r4,r4,r4
 8006354:	2109883a 	add	r4,r4,r4
 8006358:	1907883a 	add	r3,r3,r4
 800635c:	38000526 	beq	r7,zero,8006374 <memset+0x118>
 8006360:	19cf883a 	add	r7,r3,r7
 8006364:	19400005 	stb	r5,0(r3)
 8006368:	18c00044 	addi	r3,r3,1
 800636c:	38fffd1e 	bne	r7,r3,8006364 <__alt_data_end+0xff006364>
 8006370:	f800283a 	ret
 8006374:	f800283a 	ret
 8006378:	2007883a 	mov	r3,r4
 800637c:	300f883a 	mov	r7,r6
 8006380:	003fc706 	br	80062a0 <__alt_data_end+0xff0062a0>

08006384 <_Balloc>:
 8006384:	20801317 	ldw	r2,76(r4)
 8006388:	defffc04 	addi	sp,sp,-16
 800638c:	dc400115 	stw	r17,4(sp)
 8006390:	dc000015 	stw	r16,0(sp)
 8006394:	dfc00315 	stw	ra,12(sp)
 8006398:	dc800215 	stw	r18,8(sp)
 800639c:	2023883a 	mov	r17,r4
 80063a0:	2821883a 	mov	r16,r5
 80063a4:	10000f26 	beq	r2,zero,80063e4 <_Balloc+0x60>
 80063a8:	8407883a 	add	r3,r16,r16
 80063ac:	18c7883a 	add	r3,r3,r3
 80063b0:	10c7883a 	add	r3,r2,r3
 80063b4:	18800017 	ldw	r2,0(r3)
 80063b8:	10001126 	beq	r2,zero,8006400 <_Balloc+0x7c>
 80063bc:	11000017 	ldw	r4,0(r2)
 80063c0:	19000015 	stw	r4,0(r3)
 80063c4:	10000415 	stw	zero,16(r2)
 80063c8:	10000315 	stw	zero,12(r2)
 80063cc:	dfc00317 	ldw	ra,12(sp)
 80063d0:	dc800217 	ldw	r18,8(sp)
 80063d4:	dc400117 	ldw	r17,4(sp)
 80063d8:	dc000017 	ldw	r16,0(sp)
 80063dc:	dec00404 	addi	sp,sp,16
 80063e0:	f800283a 	ret
 80063e4:	01800844 	movi	r6,33
 80063e8:	01400104 	movi	r5,4
 80063ec:	80092c00 	call	80092c0 <_calloc_r>
 80063f0:	88801315 	stw	r2,76(r17)
 80063f4:	103fec1e 	bne	r2,zero,80063a8 <__alt_data_end+0xff0063a8>
 80063f8:	0005883a 	mov	r2,zero
 80063fc:	003ff306 	br	80063cc <__alt_data_end+0xff0063cc>
 8006400:	01400044 	movi	r5,1
 8006404:	2c24983a 	sll	r18,r5,r16
 8006408:	8809883a 	mov	r4,r17
 800640c:	91800144 	addi	r6,r18,5
 8006410:	318d883a 	add	r6,r6,r6
 8006414:	318d883a 	add	r6,r6,r6
 8006418:	80092c00 	call	80092c0 <_calloc_r>
 800641c:	103ff626 	beq	r2,zero,80063f8 <__alt_data_end+0xff0063f8>
 8006420:	14000115 	stw	r16,4(r2)
 8006424:	14800215 	stw	r18,8(r2)
 8006428:	003fe606 	br	80063c4 <__alt_data_end+0xff0063c4>

0800642c <_Bfree>:
 800642c:	28000826 	beq	r5,zero,8006450 <_Bfree+0x24>
 8006430:	28c00117 	ldw	r3,4(r5)
 8006434:	20801317 	ldw	r2,76(r4)
 8006438:	18c7883a 	add	r3,r3,r3
 800643c:	18c7883a 	add	r3,r3,r3
 8006440:	10c5883a 	add	r2,r2,r3
 8006444:	10c00017 	ldw	r3,0(r2)
 8006448:	28c00015 	stw	r3,0(r5)
 800644c:	11400015 	stw	r5,0(r2)
 8006450:	f800283a 	ret

08006454 <__multadd>:
 8006454:	defffa04 	addi	sp,sp,-24
 8006458:	dc800315 	stw	r18,12(sp)
 800645c:	dc400215 	stw	r17,8(sp)
 8006460:	dc000115 	stw	r16,4(sp)
 8006464:	2823883a 	mov	r17,r5
 8006468:	2c000417 	ldw	r16,16(r5)
 800646c:	dfc00515 	stw	ra,20(sp)
 8006470:	dcc00415 	stw	r19,16(sp)
 8006474:	2025883a 	mov	r18,r4
 8006478:	29400504 	addi	r5,r5,20
 800647c:	0011883a 	mov	r8,zero
 8006480:	28c00017 	ldw	r3,0(r5)
 8006484:	29400104 	addi	r5,r5,4
 8006488:	42000044 	addi	r8,r8,1
 800648c:	18bfffcc 	andi	r2,r3,65535
 8006490:	1185383a 	mul	r2,r2,r6
 8006494:	1806d43a 	srli	r3,r3,16
 8006498:	11cf883a 	add	r7,r2,r7
 800649c:	3808d43a 	srli	r4,r7,16
 80064a0:	1987383a 	mul	r3,r3,r6
 80064a4:	38bfffcc 	andi	r2,r7,65535
 80064a8:	1907883a 	add	r3,r3,r4
 80064ac:	1808943a 	slli	r4,r3,16
 80064b0:	180ed43a 	srli	r7,r3,16
 80064b4:	2085883a 	add	r2,r4,r2
 80064b8:	28bfff15 	stw	r2,-4(r5)
 80064bc:	443ff016 	blt	r8,r16,8006480 <__alt_data_end+0xff006480>
 80064c0:	38000926 	beq	r7,zero,80064e8 <__multadd+0x94>
 80064c4:	88800217 	ldw	r2,8(r17)
 80064c8:	80800f0e 	bge	r16,r2,8006508 <__multadd+0xb4>
 80064cc:	80800144 	addi	r2,r16,5
 80064d0:	1085883a 	add	r2,r2,r2
 80064d4:	1085883a 	add	r2,r2,r2
 80064d8:	8885883a 	add	r2,r17,r2
 80064dc:	11c00015 	stw	r7,0(r2)
 80064e0:	84000044 	addi	r16,r16,1
 80064e4:	8c000415 	stw	r16,16(r17)
 80064e8:	8805883a 	mov	r2,r17
 80064ec:	dfc00517 	ldw	ra,20(sp)
 80064f0:	dcc00417 	ldw	r19,16(sp)
 80064f4:	dc800317 	ldw	r18,12(sp)
 80064f8:	dc400217 	ldw	r17,8(sp)
 80064fc:	dc000117 	ldw	r16,4(sp)
 8006500:	dec00604 	addi	sp,sp,24
 8006504:	f800283a 	ret
 8006508:	89400117 	ldw	r5,4(r17)
 800650c:	9009883a 	mov	r4,r18
 8006510:	d9c00015 	stw	r7,0(sp)
 8006514:	29400044 	addi	r5,r5,1
 8006518:	80063840 	call	8006384 <_Balloc>
 800651c:	89800417 	ldw	r6,16(r17)
 8006520:	89400304 	addi	r5,r17,12
 8006524:	11000304 	addi	r4,r2,12
 8006528:	31800084 	addi	r6,r6,2
 800652c:	318d883a 	add	r6,r6,r6
 8006530:	318d883a 	add	r6,r6,r6
 8006534:	1027883a 	mov	r19,r2
 8006538:	8005fb80 	call	8005fb8 <memcpy>
 800653c:	d9c00017 	ldw	r7,0(sp)
 8006540:	88000a26 	beq	r17,zero,800656c <__multadd+0x118>
 8006544:	88c00117 	ldw	r3,4(r17)
 8006548:	90801317 	ldw	r2,76(r18)
 800654c:	18c7883a 	add	r3,r3,r3
 8006550:	18c7883a 	add	r3,r3,r3
 8006554:	10c5883a 	add	r2,r2,r3
 8006558:	10c00017 	ldw	r3,0(r2)
 800655c:	88c00015 	stw	r3,0(r17)
 8006560:	14400015 	stw	r17,0(r2)
 8006564:	9823883a 	mov	r17,r19
 8006568:	003fd806 	br	80064cc <__alt_data_end+0xff0064cc>
 800656c:	9823883a 	mov	r17,r19
 8006570:	003fd606 	br	80064cc <__alt_data_end+0xff0064cc>

08006574 <__s2b>:
 8006574:	defff904 	addi	sp,sp,-28
 8006578:	dc400115 	stw	r17,4(sp)
 800657c:	dc000015 	stw	r16,0(sp)
 8006580:	2023883a 	mov	r17,r4
 8006584:	2821883a 	mov	r16,r5
 8006588:	39000204 	addi	r4,r7,8
 800658c:	01400244 	movi	r5,9
 8006590:	dcc00315 	stw	r19,12(sp)
 8006594:	dc800215 	stw	r18,8(sp)
 8006598:	dfc00615 	stw	ra,24(sp)
 800659c:	dd400515 	stw	r21,20(sp)
 80065a0:	dd000415 	stw	r20,16(sp)
 80065a4:	3825883a 	mov	r18,r7
 80065a8:	3027883a 	mov	r19,r6
 80065ac:	800a5f00 	call	800a5f0 <__divsi3>
 80065b0:	00c00044 	movi	r3,1
 80065b4:	000b883a 	mov	r5,zero
 80065b8:	1880030e 	bge	r3,r2,80065c8 <__s2b+0x54>
 80065bc:	18c7883a 	add	r3,r3,r3
 80065c0:	29400044 	addi	r5,r5,1
 80065c4:	18bffd16 	blt	r3,r2,80065bc <__alt_data_end+0xff0065bc>
 80065c8:	8809883a 	mov	r4,r17
 80065cc:	80063840 	call	8006384 <_Balloc>
 80065d0:	d8c00717 	ldw	r3,28(sp)
 80065d4:	10c00515 	stw	r3,20(r2)
 80065d8:	00c00044 	movi	r3,1
 80065dc:	10c00415 	stw	r3,16(r2)
 80065e0:	00c00244 	movi	r3,9
 80065e4:	1cc0210e 	bge	r3,r19,800666c <__s2b+0xf8>
 80065e8:	80eb883a 	add	r21,r16,r3
 80065ec:	a829883a 	mov	r20,r21
 80065f0:	84e1883a 	add	r16,r16,r19
 80065f4:	a1c00007 	ldb	r7,0(r20)
 80065f8:	01800284 	movi	r6,10
 80065fc:	a5000044 	addi	r20,r20,1
 8006600:	100b883a 	mov	r5,r2
 8006604:	39fff404 	addi	r7,r7,-48
 8006608:	8809883a 	mov	r4,r17
 800660c:	80064540 	call	8006454 <__multadd>
 8006610:	a43ff81e 	bne	r20,r16,80065f4 <__alt_data_end+0xff0065f4>
 8006614:	ace1883a 	add	r16,r21,r19
 8006618:	843ffe04 	addi	r16,r16,-8
 800661c:	9c800a0e 	bge	r19,r18,8006648 <__s2b+0xd4>
 8006620:	94e5c83a 	sub	r18,r18,r19
 8006624:	84a5883a 	add	r18,r16,r18
 8006628:	81c00007 	ldb	r7,0(r16)
 800662c:	01800284 	movi	r6,10
 8006630:	84000044 	addi	r16,r16,1
 8006634:	100b883a 	mov	r5,r2
 8006638:	39fff404 	addi	r7,r7,-48
 800663c:	8809883a 	mov	r4,r17
 8006640:	80064540 	call	8006454 <__multadd>
 8006644:	84bff81e 	bne	r16,r18,8006628 <__alt_data_end+0xff006628>
 8006648:	dfc00617 	ldw	ra,24(sp)
 800664c:	dd400517 	ldw	r21,20(sp)
 8006650:	dd000417 	ldw	r20,16(sp)
 8006654:	dcc00317 	ldw	r19,12(sp)
 8006658:	dc800217 	ldw	r18,8(sp)
 800665c:	dc400117 	ldw	r17,4(sp)
 8006660:	dc000017 	ldw	r16,0(sp)
 8006664:	dec00704 	addi	sp,sp,28
 8006668:	f800283a 	ret
 800666c:	84000284 	addi	r16,r16,10
 8006670:	1827883a 	mov	r19,r3
 8006674:	003fe906 	br	800661c <__alt_data_end+0xff00661c>

08006678 <__hi0bits>:
 8006678:	20bfffec 	andhi	r2,r4,65535
 800667c:	1000141e 	bne	r2,zero,80066d0 <__hi0bits+0x58>
 8006680:	2008943a 	slli	r4,r4,16
 8006684:	00800404 	movi	r2,16
 8006688:	20ffc02c 	andhi	r3,r4,65280
 800668c:	1800021e 	bne	r3,zero,8006698 <__hi0bits+0x20>
 8006690:	2008923a 	slli	r4,r4,8
 8006694:	10800204 	addi	r2,r2,8
 8006698:	20fc002c 	andhi	r3,r4,61440
 800669c:	1800021e 	bne	r3,zero,80066a8 <__hi0bits+0x30>
 80066a0:	2008913a 	slli	r4,r4,4
 80066a4:	10800104 	addi	r2,r2,4
 80066a8:	20f0002c 	andhi	r3,r4,49152
 80066ac:	1800031e 	bne	r3,zero,80066bc <__hi0bits+0x44>
 80066b0:	2109883a 	add	r4,r4,r4
 80066b4:	10800084 	addi	r2,r2,2
 80066b8:	2109883a 	add	r4,r4,r4
 80066bc:	20000316 	blt	r4,zero,80066cc <__hi0bits+0x54>
 80066c0:	2110002c 	andhi	r4,r4,16384
 80066c4:	2000041e 	bne	r4,zero,80066d8 <__hi0bits+0x60>
 80066c8:	00800804 	movi	r2,32
 80066cc:	f800283a 	ret
 80066d0:	0005883a 	mov	r2,zero
 80066d4:	003fec06 	br	8006688 <__alt_data_end+0xff006688>
 80066d8:	10800044 	addi	r2,r2,1
 80066dc:	f800283a 	ret

080066e0 <__lo0bits>:
 80066e0:	20c00017 	ldw	r3,0(r4)
 80066e4:	188001cc 	andi	r2,r3,7
 80066e8:	10000826 	beq	r2,zero,800670c <__lo0bits+0x2c>
 80066ec:	1880004c 	andi	r2,r3,1
 80066f0:	1000211e 	bne	r2,zero,8006778 <__lo0bits+0x98>
 80066f4:	1880008c 	andi	r2,r3,2
 80066f8:	1000211e 	bne	r2,zero,8006780 <__lo0bits+0xa0>
 80066fc:	1806d0ba 	srli	r3,r3,2
 8006700:	00800084 	movi	r2,2
 8006704:	20c00015 	stw	r3,0(r4)
 8006708:	f800283a 	ret
 800670c:	18bfffcc 	andi	r2,r3,65535
 8006710:	10001326 	beq	r2,zero,8006760 <__lo0bits+0x80>
 8006714:	0005883a 	mov	r2,zero
 8006718:	19403fcc 	andi	r5,r3,255
 800671c:	2800021e 	bne	r5,zero,8006728 <__lo0bits+0x48>
 8006720:	1806d23a 	srli	r3,r3,8
 8006724:	10800204 	addi	r2,r2,8
 8006728:	194003cc 	andi	r5,r3,15
 800672c:	2800021e 	bne	r5,zero,8006738 <__lo0bits+0x58>
 8006730:	1806d13a 	srli	r3,r3,4
 8006734:	10800104 	addi	r2,r2,4
 8006738:	194000cc 	andi	r5,r3,3
 800673c:	2800021e 	bne	r5,zero,8006748 <__lo0bits+0x68>
 8006740:	1806d0ba 	srli	r3,r3,2
 8006744:	10800084 	addi	r2,r2,2
 8006748:	1940004c 	andi	r5,r3,1
 800674c:	2800081e 	bne	r5,zero,8006770 <__lo0bits+0x90>
 8006750:	1806d07a 	srli	r3,r3,1
 8006754:	1800051e 	bne	r3,zero,800676c <__lo0bits+0x8c>
 8006758:	00800804 	movi	r2,32
 800675c:	f800283a 	ret
 8006760:	1806d43a 	srli	r3,r3,16
 8006764:	00800404 	movi	r2,16
 8006768:	003feb06 	br	8006718 <__alt_data_end+0xff006718>
 800676c:	10800044 	addi	r2,r2,1
 8006770:	20c00015 	stw	r3,0(r4)
 8006774:	f800283a 	ret
 8006778:	0005883a 	mov	r2,zero
 800677c:	f800283a 	ret
 8006780:	1806d07a 	srli	r3,r3,1
 8006784:	00800044 	movi	r2,1
 8006788:	20c00015 	stw	r3,0(r4)
 800678c:	f800283a 	ret

08006790 <__i2b>:
 8006790:	defffd04 	addi	sp,sp,-12
 8006794:	dc000015 	stw	r16,0(sp)
 8006798:	04000044 	movi	r16,1
 800679c:	dc400115 	stw	r17,4(sp)
 80067a0:	2823883a 	mov	r17,r5
 80067a4:	800b883a 	mov	r5,r16
 80067a8:	dfc00215 	stw	ra,8(sp)
 80067ac:	80063840 	call	8006384 <_Balloc>
 80067b0:	14400515 	stw	r17,20(r2)
 80067b4:	14000415 	stw	r16,16(r2)
 80067b8:	dfc00217 	ldw	ra,8(sp)
 80067bc:	dc400117 	ldw	r17,4(sp)
 80067c0:	dc000017 	ldw	r16,0(sp)
 80067c4:	dec00304 	addi	sp,sp,12
 80067c8:	f800283a 	ret

080067cc <__multiply>:
 80067cc:	defffa04 	addi	sp,sp,-24
 80067d0:	dcc00315 	stw	r19,12(sp)
 80067d4:	dc800215 	stw	r18,8(sp)
 80067d8:	34c00417 	ldw	r19,16(r6)
 80067dc:	2c800417 	ldw	r18,16(r5)
 80067e0:	dd000415 	stw	r20,16(sp)
 80067e4:	dc400115 	stw	r17,4(sp)
 80067e8:	dfc00515 	stw	ra,20(sp)
 80067ec:	dc000015 	stw	r16,0(sp)
 80067f0:	2829883a 	mov	r20,r5
 80067f4:	3023883a 	mov	r17,r6
 80067f8:	94c0050e 	bge	r18,r19,8006810 <__multiply+0x44>
 80067fc:	9007883a 	mov	r3,r18
 8006800:	3029883a 	mov	r20,r6
 8006804:	9825883a 	mov	r18,r19
 8006808:	2823883a 	mov	r17,r5
 800680c:	1827883a 	mov	r19,r3
 8006810:	a0800217 	ldw	r2,8(r20)
 8006814:	94e1883a 	add	r16,r18,r19
 8006818:	a1400117 	ldw	r5,4(r20)
 800681c:	1400010e 	bge	r2,r16,8006824 <__multiply+0x58>
 8006820:	29400044 	addi	r5,r5,1
 8006824:	80063840 	call	8006384 <_Balloc>
 8006828:	8415883a 	add	r10,r16,r16
 800682c:	12c00504 	addi	r11,r2,20
 8006830:	5295883a 	add	r10,r10,r10
 8006834:	5a95883a 	add	r10,r11,r10
 8006838:	5807883a 	mov	r3,r11
 800683c:	5a80032e 	bgeu	r11,r10,800684c <__multiply+0x80>
 8006840:	18000015 	stw	zero,0(r3)
 8006844:	18c00104 	addi	r3,r3,4
 8006848:	1abffd36 	bltu	r3,r10,8006840 <__alt_data_end+0xff006840>
 800684c:	9ce7883a 	add	r19,r19,r19
 8006850:	94a5883a 	add	r18,r18,r18
 8006854:	89800504 	addi	r6,r17,20
 8006858:	9ce7883a 	add	r19,r19,r19
 800685c:	a3400504 	addi	r13,r20,20
 8006860:	94a5883a 	add	r18,r18,r18
 8006864:	34d9883a 	add	r12,r6,r19
 8006868:	6c93883a 	add	r9,r13,r18
 800686c:	3300422e 	bgeu	r6,r12,8006978 <__multiply+0x1ac>
 8006870:	37c00017 	ldw	ra,0(r6)
 8006874:	fbffffcc 	andi	r15,ra,65535
 8006878:	78001b26 	beq	r15,zero,80068e8 <__multiply+0x11c>
 800687c:	5811883a 	mov	r8,r11
 8006880:	681d883a 	mov	r14,r13
 8006884:	000f883a 	mov	r7,zero
 8006888:	71000017 	ldw	r4,0(r14)
 800688c:	40c00017 	ldw	r3,0(r8)
 8006890:	73800104 	addi	r14,r14,4
 8006894:	217fffcc 	andi	r5,r4,65535
 8006898:	2bcb383a 	mul	r5,r5,r15
 800689c:	2008d43a 	srli	r4,r4,16
 80068a0:	1c7fffcc 	andi	r17,r3,65535
 80068a4:	2c4b883a 	add	r5,r5,r17
 80068a8:	29cb883a 	add	r5,r5,r7
 80068ac:	23c9383a 	mul	r4,r4,r15
 80068b0:	1806d43a 	srli	r3,r3,16
 80068b4:	280ed43a 	srli	r7,r5,16
 80068b8:	297fffcc 	andi	r5,r5,65535
 80068bc:	20c7883a 	add	r3,r4,r3
 80068c0:	19c7883a 	add	r3,r3,r7
 80068c4:	1808943a 	slli	r4,r3,16
 80068c8:	4023883a 	mov	r17,r8
 80068cc:	180ed43a 	srli	r7,r3,16
 80068d0:	214ab03a 	or	r5,r4,r5
 80068d4:	41400015 	stw	r5,0(r8)
 80068d8:	42000104 	addi	r8,r8,4
 80068dc:	727fea36 	bltu	r14,r9,8006888 <__alt_data_end+0xff006888>
 80068e0:	89c00115 	stw	r7,4(r17)
 80068e4:	37c00017 	ldw	ra,0(r6)
 80068e8:	f83ed43a 	srli	ra,ra,16
 80068ec:	f8001f26 	beq	ra,zero,800696c <__multiply+0x1a0>
 80068f0:	58c00017 	ldw	r3,0(r11)
 80068f4:	681d883a 	mov	r14,r13
 80068f8:	581f883a 	mov	r15,r11
 80068fc:	1811883a 	mov	r8,r3
 8006900:	5825883a 	mov	r18,r11
 8006904:	000f883a 	mov	r7,zero
 8006908:	00000106 	br	8006910 <__multiply+0x144>
 800690c:	8825883a 	mov	r18,r17
 8006910:	7140000b 	ldhu	r5,0(r14)
 8006914:	4010d43a 	srli	r8,r8,16
 8006918:	193fffcc 	andi	r4,r3,65535
 800691c:	2fcb383a 	mul	r5,r5,ra
 8006920:	7bc00104 	addi	r15,r15,4
 8006924:	73800104 	addi	r14,r14,4
 8006928:	2a0b883a 	add	r5,r5,r8
 800692c:	29cb883a 	add	r5,r5,r7
 8006930:	2806943a 	slli	r3,r5,16
 8006934:	94400104 	addi	r17,r18,4
 8006938:	280ad43a 	srli	r5,r5,16
 800693c:	1908b03a 	or	r4,r3,r4
 8006940:	793fff15 	stw	r4,-4(r15)
 8006944:	70ffff17 	ldw	r3,-4(r14)
 8006948:	8a000017 	ldw	r8,0(r17)
 800694c:	1806d43a 	srli	r3,r3,16
 8006950:	413fffcc 	andi	r4,r8,65535
 8006954:	1fc7383a 	mul	r3,r3,ra
 8006958:	1907883a 	add	r3,r3,r4
 800695c:	1947883a 	add	r3,r3,r5
 8006960:	180ed43a 	srli	r7,r3,16
 8006964:	727fe936 	bltu	r14,r9,800690c <__alt_data_end+0xff00690c>
 8006968:	90c00115 	stw	r3,4(r18)
 800696c:	31800104 	addi	r6,r6,4
 8006970:	5ac00104 	addi	r11,r11,4
 8006974:	333fbe36 	bltu	r6,r12,8006870 <__alt_data_end+0xff006870>
 8006978:	0400090e 	bge	zero,r16,80069a0 <__multiply+0x1d4>
 800697c:	50ffff17 	ldw	r3,-4(r10)
 8006980:	52bfff04 	addi	r10,r10,-4
 8006984:	18000326 	beq	r3,zero,8006994 <__multiply+0x1c8>
 8006988:	00000506 	br	80069a0 <__multiply+0x1d4>
 800698c:	50c00017 	ldw	r3,0(r10)
 8006990:	1800031e 	bne	r3,zero,80069a0 <__multiply+0x1d4>
 8006994:	843fffc4 	addi	r16,r16,-1
 8006998:	52bfff04 	addi	r10,r10,-4
 800699c:	803ffb1e 	bne	r16,zero,800698c <__alt_data_end+0xff00698c>
 80069a0:	14000415 	stw	r16,16(r2)
 80069a4:	dfc00517 	ldw	ra,20(sp)
 80069a8:	dd000417 	ldw	r20,16(sp)
 80069ac:	dcc00317 	ldw	r19,12(sp)
 80069b0:	dc800217 	ldw	r18,8(sp)
 80069b4:	dc400117 	ldw	r17,4(sp)
 80069b8:	dc000017 	ldw	r16,0(sp)
 80069bc:	dec00604 	addi	sp,sp,24
 80069c0:	f800283a 	ret

080069c4 <__pow5mult>:
 80069c4:	defffa04 	addi	sp,sp,-24
 80069c8:	dcc00315 	stw	r19,12(sp)
 80069cc:	dc000015 	stw	r16,0(sp)
 80069d0:	dfc00515 	stw	ra,20(sp)
 80069d4:	dd000415 	stw	r20,16(sp)
 80069d8:	dc800215 	stw	r18,8(sp)
 80069dc:	dc400115 	stw	r17,4(sp)
 80069e0:	308000cc 	andi	r2,r6,3
 80069e4:	3021883a 	mov	r16,r6
 80069e8:	2027883a 	mov	r19,r4
 80069ec:	10002f1e 	bne	r2,zero,8006aac <__pow5mult+0xe8>
 80069f0:	2825883a 	mov	r18,r5
 80069f4:	8021d0ba 	srai	r16,r16,2
 80069f8:	80001a26 	beq	r16,zero,8006a64 <__pow5mult+0xa0>
 80069fc:	9c401217 	ldw	r17,72(r19)
 8006a00:	8800061e 	bne	r17,zero,8006a1c <__pow5mult+0x58>
 8006a04:	00003406 	br	8006ad8 <__pow5mult+0x114>
 8006a08:	8021d07a 	srai	r16,r16,1
 8006a0c:	80001526 	beq	r16,zero,8006a64 <__pow5mult+0xa0>
 8006a10:	88800017 	ldw	r2,0(r17)
 8006a14:	10001c26 	beq	r2,zero,8006a88 <__pow5mult+0xc4>
 8006a18:	1023883a 	mov	r17,r2
 8006a1c:	8080004c 	andi	r2,r16,1
 8006a20:	103ff926 	beq	r2,zero,8006a08 <__alt_data_end+0xff006a08>
 8006a24:	880d883a 	mov	r6,r17
 8006a28:	900b883a 	mov	r5,r18
 8006a2c:	9809883a 	mov	r4,r19
 8006a30:	80067cc0 	call	80067cc <__multiply>
 8006a34:	90001b26 	beq	r18,zero,8006aa4 <__pow5mult+0xe0>
 8006a38:	91000117 	ldw	r4,4(r18)
 8006a3c:	98c01317 	ldw	r3,76(r19)
 8006a40:	8021d07a 	srai	r16,r16,1
 8006a44:	2109883a 	add	r4,r4,r4
 8006a48:	2109883a 	add	r4,r4,r4
 8006a4c:	1907883a 	add	r3,r3,r4
 8006a50:	19000017 	ldw	r4,0(r3)
 8006a54:	91000015 	stw	r4,0(r18)
 8006a58:	1c800015 	stw	r18,0(r3)
 8006a5c:	1025883a 	mov	r18,r2
 8006a60:	803feb1e 	bne	r16,zero,8006a10 <__alt_data_end+0xff006a10>
 8006a64:	9005883a 	mov	r2,r18
 8006a68:	dfc00517 	ldw	ra,20(sp)
 8006a6c:	dd000417 	ldw	r20,16(sp)
 8006a70:	dcc00317 	ldw	r19,12(sp)
 8006a74:	dc800217 	ldw	r18,8(sp)
 8006a78:	dc400117 	ldw	r17,4(sp)
 8006a7c:	dc000017 	ldw	r16,0(sp)
 8006a80:	dec00604 	addi	sp,sp,24
 8006a84:	f800283a 	ret
 8006a88:	880d883a 	mov	r6,r17
 8006a8c:	880b883a 	mov	r5,r17
 8006a90:	9809883a 	mov	r4,r19
 8006a94:	80067cc0 	call	80067cc <__multiply>
 8006a98:	88800015 	stw	r2,0(r17)
 8006a9c:	10000015 	stw	zero,0(r2)
 8006aa0:	003fdd06 	br	8006a18 <__alt_data_end+0xff006a18>
 8006aa4:	1025883a 	mov	r18,r2
 8006aa8:	003fd706 	br	8006a08 <__alt_data_end+0xff006a08>
 8006aac:	10bfffc4 	addi	r2,r2,-1
 8006ab0:	1085883a 	add	r2,r2,r2
 8006ab4:	00c20074 	movhi	r3,2049
 8006ab8:	18c60604 	addi	r3,r3,6168
 8006abc:	1085883a 	add	r2,r2,r2
 8006ac0:	1885883a 	add	r2,r3,r2
 8006ac4:	11800017 	ldw	r6,0(r2)
 8006ac8:	000f883a 	mov	r7,zero
 8006acc:	80064540 	call	8006454 <__multadd>
 8006ad0:	1025883a 	mov	r18,r2
 8006ad4:	003fc706 	br	80069f4 <__alt_data_end+0xff0069f4>
 8006ad8:	05000044 	movi	r20,1
 8006adc:	a00b883a 	mov	r5,r20
 8006ae0:	9809883a 	mov	r4,r19
 8006ae4:	80063840 	call	8006384 <_Balloc>
 8006ae8:	1023883a 	mov	r17,r2
 8006aec:	00809c44 	movi	r2,625
 8006af0:	88800515 	stw	r2,20(r17)
 8006af4:	8d000415 	stw	r20,16(r17)
 8006af8:	9c401215 	stw	r17,72(r19)
 8006afc:	88000015 	stw	zero,0(r17)
 8006b00:	003fc606 	br	8006a1c <__alt_data_end+0xff006a1c>

08006b04 <__lshift>:
 8006b04:	defff904 	addi	sp,sp,-28
 8006b08:	dd400515 	stw	r21,20(sp)
 8006b0c:	dcc00315 	stw	r19,12(sp)
 8006b10:	302bd17a 	srai	r21,r6,5
 8006b14:	2cc00417 	ldw	r19,16(r5)
 8006b18:	28800217 	ldw	r2,8(r5)
 8006b1c:	dd000415 	stw	r20,16(sp)
 8006b20:	ace7883a 	add	r19,r21,r19
 8006b24:	dc800215 	stw	r18,8(sp)
 8006b28:	dc400115 	stw	r17,4(sp)
 8006b2c:	dc000015 	stw	r16,0(sp)
 8006b30:	dfc00615 	stw	ra,24(sp)
 8006b34:	9c000044 	addi	r16,r19,1
 8006b38:	2823883a 	mov	r17,r5
 8006b3c:	3029883a 	mov	r20,r6
 8006b40:	2025883a 	mov	r18,r4
 8006b44:	29400117 	ldw	r5,4(r5)
 8006b48:	1400030e 	bge	r2,r16,8006b58 <__lshift+0x54>
 8006b4c:	1085883a 	add	r2,r2,r2
 8006b50:	29400044 	addi	r5,r5,1
 8006b54:	143ffd16 	blt	r2,r16,8006b4c <__alt_data_end+0xff006b4c>
 8006b58:	9009883a 	mov	r4,r18
 8006b5c:	80063840 	call	8006384 <_Balloc>
 8006b60:	10c00504 	addi	r3,r2,20
 8006b64:	0540070e 	bge	zero,r21,8006b84 <__lshift+0x80>
 8006b68:	ad6b883a 	add	r21,r21,r21
 8006b6c:	ad6b883a 	add	r21,r21,r21
 8006b70:	1809883a 	mov	r4,r3
 8006b74:	1d47883a 	add	r3,r3,r21
 8006b78:	20000015 	stw	zero,0(r4)
 8006b7c:	21000104 	addi	r4,r4,4
 8006b80:	193ffd1e 	bne	r3,r4,8006b78 <__alt_data_end+0xff006b78>
 8006b84:	8a000417 	ldw	r8,16(r17)
 8006b88:	89000504 	addi	r4,r17,20
 8006b8c:	a18007cc 	andi	r6,r20,31
 8006b90:	4211883a 	add	r8,r8,r8
 8006b94:	4211883a 	add	r8,r8,r8
 8006b98:	2211883a 	add	r8,r4,r8
 8006b9c:	30002326 	beq	r6,zero,8006c2c <__lshift+0x128>
 8006ba0:	02400804 	movi	r9,32
 8006ba4:	4993c83a 	sub	r9,r9,r6
 8006ba8:	000b883a 	mov	r5,zero
 8006bac:	21c00017 	ldw	r7,0(r4)
 8006bb0:	1815883a 	mov	r10,r3
 8006bb4:	18c00104 	addi	r3,r3,4
 8006bb8:	398e983a 	sll	r7,r7,r6
 8006bbc:	21000104 	addi	r4,r4,4
 8006bc0:	394ab03a 	or	r5,r7,r5
 8006bc4:	197fff15 	stw	r5,-4(r3)
 8006bc8:	217fff17 	ldw	r5,-4(r4)
 8006bcc:	2a4ad83a 	srl	r5,r5,r9
 8006bd0:	223ff636 	bltu	r4,r8,8006bac <__alt_data_end+0xff006bac>
 8006bd4:	51400115 	stw	r5,4(r10)
 8006bd8:	28001a1e 	bne	r5,zero,8006c44 <__lshift+0x140>
 8006bdc:	843fffc4 	addi	r16,r16,-1
 8006be0:	14000415 	stw	r16,16(r2)
 8006be4:	88000826 	beq	r17,zero,8006c08 <__lshift+0x104>
 8006be8:	89000117 	ldw	r4,4(r17)
 8006bec:	90c01317 	ldw	r3,76(r18)
 8006bf0:	2109883a 	add	r4,r4,r4
 8006bf4:	2109883a 	add	r4,r4,r4
 8006bf8:	1907883a 	add	r3,r3,r4
 8006bfc:	19000017 	ldw	r4,0(r3)
 8006c00:	89000015 	stw	r4,0(r17)
 8006c04:	1c400015 	stw	r17,0(r3)
 8006c08:	dfc00617 	ldw	ra,24(sp)
 8006c0c:	dd400517 	ldw	r21,20(sp)
 8006c10:	dd000417 	ldw	r20,16(sp)
 8006c14:	dcc00317 	ldw	r19,12(sp)
 8006c18:	dc800217 	ldw	r18,8(sp)
 8006c1c:	dc400117 	ldw	r17,4(sp)
 8006c20:	dc000017 	ldw	r16,0(sp)
 8006c24:	dec00704 	addi	sp,sp,28
 8006c28:	f800283a 	ret
 8006c2c:	21400017 	ldw	r5,0(r4)
 8006c30:	18c00104 	addi	r3,r3,4
 8006c34:	21000104 	addi	r4,r4,4
 8006c38:	197fff15 	stw	r5,-4(r3)
 8006c3c:	223ffb36 	bltu	r4,r8,8006c2c <__alt_data_end+0xff006c2c>
 8006c40:	003fe606 	br	8006bdc <__alt_data_end+0xff006bdc>
 8006c44:	9c000084 	addi	r16,r19,2
 8006c48:	003fe406 	br	8006bdc <__alt_data_end+0xff006bdc>

08006c4c <__mcmp>:
 8006c4c:	20800417 	ldw	r2,16(r4)
 8006c50:	28c00417 	ldw	r3,16(r5)
 8006c54:	10c5c83a 	sub	r2,r2,r3
 8006c58:	1000111e 	bne	r2,zero,8006ca0 <__mcmp+0x54>
 8006c5c:	18c7883a 	add	r3,r3,r3
 8006c60:	18c7883a 	add	r3,r3,r3
 8006c64:	21000504 	addi	r4,r4,20
 8006c68:	29400504 	addi	r5,r5,20
 8006c6c:	20c5883a 	add	r2,r4,r3
 8006c70:	28cb883a 	add	r5,r5,r3
 8006c74:	00000106 	br	8006c7c <__mcmp+0x30>
 8006c78:	20800a2e 	bgeu	r4,r2,8006ca4 <__mcmp+0x58>
 8006c7c:	10bfff04 	addi	r2,r2,-4
 8006c80:	297fff04 	addi	r5,r5,-4
 8006c84:	11800017 	ldw	r6,0(r2)
 8006c88:	28c00017 	ldw	r3,0(r5)
 8006c8c:	30fffa26 	beq	r6,r3,8006c78 <__alt_data_end+0xff006c78>
 8006c90:	30c00236 	bltu	r6,r3,8006c9c <__mcmp+0x50>
 8006c94:	00800044 	movi	r2,1
 8006c98:	f800283a 	ret
 8006c9c:	00bfffc4 	movi	r2,-1
 8006ca0:	f800283a 	ret
 8006ca4:	0005883a 	mov	r2,zero
 8006ca8:	f800283a 	ret

08006cac <__mdiff>:
 8006cac:	28c00417 	ldw	r3,16(r5)
 8006cb0:	30800417 	ldw	r2,16(r6)
 8006cb4:	defffa04 	addi	sp,sp,-24
 8006cb8:	dcc00315 	stw	r19,12(sp)
 8006cbc:	dc800215 	stw	r18,8(sp)
 8006cc0:	dfc00515 	stw	ra,20(sp)
 8006cc4:	dd000415 	stw	r20,16(sp)
 8006cc8:	dc400115 	stw	r17,4(sp)
 8006ccc:	dc000015 	stw	r16,0(sp)
 8006cd0:	1887c83a 	sub	r3,r3,r2
 8006cd4:	2825883a 	mov	r18,r5
 8006cd8:	3027883a 	mov	r19,r6
 8006cdc:	1800141e 	bne	r3,zero,8006d30 <__mdiff+0x84>
 8006ce0:	1085883a 	add	r2,r2,r2
 8006ce4:	1085883a 	add	r2,r2,r2
 8006ce8:	2a000504 	addi	r8,r5,20
 8006cec:	34000504 	addi	r16,r6,20
 8006cf0:	4087883a 	add	r3,r8,r2
 8006cf4:	8085883a 	add	r2,r16,r2
 8006cf8:	00000106 	br	8006d00 <__mdiff+0x54>
 8006cfc:	40c0592e 	bgeu	r8,r3,8006e64 <__mdiff+0x1b8>
 8006d00:	18ffff04 	addi	r3,r3,-4
 8006d04:	10bfff04 	addi	r2,r2,-4
 8006d08:	19c00017 	ldw	r7,0(r3)
 8006d0c:	11400017 	ldw	r5,0(r2)
 8006d10:	397ffa26 	beq	r7,r5,8006cfc <__alt_data_end+0xff006cfc>
 8006d14:	3940592e 	bgeu	r7,r5,8006e7c <__mdiff+0x1d0>
 8006d18:	9005883a 	mov	r2,r18
 8006d1c:	4023883a 	mov	r17,r8
 8006d20:	9825883a 	mov	r18,r19
 8006d24:	05000044 	movi	r20,1
 8006d28:	1027883a 	mov	r19,r2
 8006d2c:	00000406 	br	8006d40 <__mdiff+0x94>
 8006d30:	18005616 	blt	r3,zero,8006e8c <__mdiff+0x1e0>
 8006d34:	34400504 	addi	r17,r6,20
 8006d38:	2c000504 	addi	r16,r5,20
 8006d3c:	0029883a 	mov	r20,zero
 8006d40:	91400117 	ldw	r5,4(r18)
 8006d44:	80063840 	call	8006384 <_Balloc>
 8006d48:	92400417 	ldw	r9,16(r18)
 8006d4c:	9b000417 	ldw	r12,16(r19)
 8006d50:	12c00504 	addi	r11,r2,20
 8006d54:	4a51883a 	add	r8,r9,r9
 8006d58:	6319883a 	add	r12,r12,r12
 8006d5c:	4211883a 	add	r8,r8,r8
 8006d60:	6319883a 	add	r12,r12,r12
 8006d64:	15000315 	stw	r20,12(r2)
 8006d68:	8211883a 	add	r8,r16,r8
 8006d6c:	8b19883a 	add	r12,r17,r12
 8006d70:	0007883a 	mov	r3,zero
 8006d74:	81400017 	ldw	r5,0(r16)
 8006d78:	89c00017 	ldw	r7,0(r17)
 8006d7c:	59800104 	addi	r6,r11,4
 8006d80:	293fffcc 	andi	r4,r5,65535
 8006d84:	20c7883a 	add	r3,r4,r3
 8006d88:	393fffcc 	andi	r4,r7,65535
 8006d8c:	1909c83a 	sub	r4,r3,r4
 8006d90:	280ad43a 	srli	r5,r5,16
 8006d94:	380ed43a 	srli	r7,r7,16
 8006d98:	2007d43a 	srai	r3,r4,16
 8006d9c:	213fffcc 	andi	r4,r4,65535
 8006da0:	29cbc83a 	sub	r5,r5,r7
 8006da4:	28c7883a 	add	r3,r5,r3
 8006da8:	180a943a 	slli	r5,r3,16
 8006dac:	8c400104 	addi	r17,r17,4
 8006db0:	84000104 	addi	r16,r16,4
 8006db4:	2908b03a 	or	r4,r5,r4
 8006db8:	59000015 	stw	r4,0(r11)
 8006dbc:	1807d43a 	srai	r3,r3,16
 8006dc0:	3015883a 	mov	r10,r6
 8006dc4:	3017883a 	mov	r11,r6
 8006dc8:	8b3fea36 	bltu	r17,r12,8006d74 <__alt_data_end+0xff006d74>
 8006dcc:	8200162e 	bgeu	r16,r8,8006e28 <__mdiff+0x17c>
 8006dd0:	8017883a 	mov	r11,r16
 8006dd4:	59400017 	ldw	r5,0(r11)
 8006dd8:	31800104 	addi	r6,r6,4
 8006ddc:	5ac00104 	addi	r11,r11,4
 8006de0:	293fffcc 	andi	r4,r5,65535
 8006de4:	20c7883a 	add	r3,r4,r3
 8006de8:	280ed43a 	srli	r7,r5,16
 8006dec:	180bd43a 	srai	r5,r3,16
 8006df0:	193fffcc 	andi	r4,r3,65535
 8006df4:	3947883a 	add	r3,r7,r5
 8006df8:	180a943a 	slli	r5,r3,16
 8006dfc:	1807d43a 	srai	r3,r3,16
 8006e00:	2908b03a 	or	r4,r5,r4
 8006e04:	313fff15 	stw	r4,-4(r6)
 8006e08:	5a3ff236 	bltu	r11,r8,8006dd4 <__alt_data_end+0xff006dd4>
 8006e0c:	0406303a 	nor	r3,zero,r16
 8006e10:	1a07883a 	add	r3,r3,r8
 8006e14:	1806d0ba 	srli	r3,r3,2
 8006e18:	18c00044 	addi	r3,r3,1
 8006e1c:	18c7883a 	add	r3,r3,r3
 8006e20:	18c7883a 	add	r3,r3,r3
 8006e24:	50d5883a 	add	r10,r10,r3
 8006e28:	50ffff04 	addi	r3,r10,-4
 8006e2c:	2000041e 	bne	r4,zero,8006e40 <__mdiff+0x194>
 8006e30:	18ffff04 	addi	r3,r3,-4
 8006e34:	19000017 	ldw	r4,0(r3)
 8006e38:	4a7fffc4 	addi	r9,r9,-1
 8006e3c:	203ffc26 	beq	r4,zero,8006e30 <__alt_data_end+0xff006e30>
 8006e40:	12400415 	stw	r9,16(r2)
 8006e44:	dfc00517 	ldw	ra,20(sp)
 8006e48:	dd000417 	ldw	r20,16(sp)
 8006e4c:	dcc00317 	ldw	r19,12(sp)
 8006e50:	dc800217 	ldw	r18,8(sp)
 8006e54:	dc400117 	ldw	r17,4(sp)
 8006e58:	dc000017 	ldw	r16,0(sp)
 8006e5c:	dec00604 	addi	sp,sp,24
 8006e60:	f800283a 	ret
 8006e64:	000b883a 	mov	r5,zero
 8006e68:	80063840 	call	8006384 <_Balloc>
 8006e6c:	00c00044 	movi	r3,1
 8006e70:	10c00415 	stw	r3,16(r2)
 8006e74:	10000515 	stw	zero,20(r2)
 8006e78:	003ff206 	br	8006e44 <__alt_data_end+0xff006e44>
 8006e7c:	8023883a 	mov	r17,r16
 8006e80:	0029883a 	mov	r20,zero
 8006e84:	4021883a 	mov	r16,r8
 8006e88:	003fad06 	br	8006d40 <__alt_data_end+0xff006d40>
 8006e8c:	9005883a 	mov	r2,r18
 8006e90:	94400504 	addi	r17,r18,20
 8006e94:	9c000504 	addi	r16,r19,20
 8006e98:	9825883a 	mov	r18,r19
 8006e9c:	05000044 	movi	r20,1
 8006ea0:	1027883a 	mov	r19,r2
 8006ea4:	003fa606 	br	8006d40 <__alt_data_end+0xff006d40>

08006ea8 <__ulp>:
 8006ea8:	295ffc2c 	andhi	r5,r5,32752
 8006eac:	00bf3034 	movhi	r2,64704
 8006eb0:	2887883a 	add	r3,r5,r2
 8006eb4:	00c0020e 	bge	zero,r3,8006ec0 <__ulp+0x18>
 8006eb8:	0005883a 	mov	r2,zero
 8006ebc:	f800283a 	ret
 8006ec0:	00c7c83a 	sub	r3,zero,r3
 8006ec4:	1807d53a 	srai	r3,r3,20
 8006ec8:	008004c4 	movi	r2,19
 8006ecc:	10c00b0e 	bge	r2,r3,8006efc <__ulp+0x54>
 8006ed0:	18bffb04 	addi	r2,r3,-20
 8006ed4:	01000784 	movi	r4,30
 8006ed8:	0007883a 	mov	r3,zero
 8006edc:	20800516 	blt	r4,r2,8006ef4 <__ulp+0x4c>
 8006ee0:	010007c4 	movi	r4,31
 8006ee4:	2089c83a 	sub	r4,r4,r2
 8006ee8:	00800044 	movi	r2,1
 8006eec:	1104983a 	sll	r2,r2,r4
 8006ef0:	f800283a 	ret
 8006ef4:	00800044 	movi	r2,1
 8006ef8:	f800283a 	ret
 8006efc:	01400234 	movhi	r5,8
 8006f00:	28c7d83a 	sra	r3,r5,r3
 8006f04:	0005883a 	mov	r2,zero
 8006f08:	f800283a 	ret

08006f0c <__b2d>:
 8006f0c:	defffa04 	addi	sp,sp,-24
 8006f10:	dc000015 	stw	r16,0(sp)
 8006f14:	24000417 	ldw	r16,16(r4)
 8006f18:	dc400115 	stw	r17,4(sp)
 8006f1c:	24400504 	addi	r17,r4,20
 8006f20:	8421883a 	add	r16,r16,r16
 8006f24:	8421883a 	add	r16,r16,r16
 8006f28:	8c21883a 	add	r16,r17,r16
 8006f2c:	dc800215 	stw	r18,8(sp)
 8006f30:	84bfff17 	ldw	r18,-4(r16)
 8006f34:	dd000415 	stw	r20,16(sp)
 8006f38:	dcc00315 	stw	r19,12(sp)
 8006f3c:	9009883a 	mov	r4,r18
 8006f40:	2829883a 	mov	r20,r5
 8006f44:	dfc00515 	stw	ra,20(sp)
 8006f48:	80066780 	call	8006678 <__hi0bits>
 8006f4c:	00c00804 	movi	r3,32
 8006f50:	1889c83a 	sub	r4,r3,r2
 8006f54:	a1000015 	stw	r4,0(r20)
 8006f58:	01000284 	movi	r4,10
 8006f5c:	84ffff04 	addi	r19,r16,-4
 8006f60:	20801216 	blt	r4,r2,8006fac <__b2d+0xa0>
 8006f64:	018002c4 	movi	r6,11
 8006f68:	308dc83a 	sub	r6,r6,r2
 8006f6c:	9186d83a 	srl	r3,r18,r6
 8006f70:	18cffc34 	orhi	r3,r3,16368
 8006f74:	8cc0212e 	bgeu	r17,r19,8006ffc <__b2d+0xf0>
 8006f78:	813ffe17 	ldw	r4,-8(r16)
 8006f7c:	218cd83a 	srl	r6,r4,r6
 8006f80:	10800544 	addi	r2,r2,21
 8006f84:	9084983a 	sll	r2,r18,r2
 8006f88:	1184b03a 	or	r2,r2,r6
 8006f8c:	dfc00517 	ldw	ra,20(sp)
 8006f90:	dd000417 	ldw	r20,16(sp)
 8006f94:	dcc00317 	ldw	r19,12(sp)
 8006f98:	dc800217 	ldw	r18,8(sp)
 8006f9c:	dc400117 	ldw	r17,4(sp)
 8006fa0:	dc000017 	ldw	r16,0(sp)
 8006fa4:	dec00604 	addi	sp,sp,24
 8006fa8:	f800283a 	ret
 8006fac:	8cc00f2e 	bgeu	r17,r19,8006fec <__b2d+0xe0>
 8006fb0:	117ffd44 	addi	r5,r2,-11
 8006fb4:	80bffe17 	ldw	r2,-8(r16)
 8006fb8:	28000e26 	beq	r5,zero,8006ff4 <__b2d+0xe8>
 8006fbc:	1949c83a 	sub	r4,r3,r5
 8006fc0:	9164983a 	sll	r18,r18,r5
 8006fc4:	1106d83a 	srl	r3,r2,r4
 8006fc8:	81bffe04 	addi	r6,r16,-8
 8006fcc:	948ffc34 	orhi	r18,r18,16368
 8006fd0:	90c6b03a 	or	r3,r18,r3
 8006fd4:	89800e2e 	bgeu	r17,r6,8007010 <__b2d+0x104>
 8006fd8:	81bffd17 	ldw	r6,-12(r16)
 8006fdc:	1144983a 	sll	r2,r2,r5
 8006fe0:	310ad83a 	srl	r5,r6,r4
 8006fe4:	2884b03a 	or	r2,r5,r2
 8006fe8:	003fe806 	br	8006f8c <__alt_data_end+0xff006f8c>
 8006fec:	10bffd44 	addi	r2,r2,-11
 8006ff0:	1000041e 	bne	r2,zero,8007004 <__b2d+0xf8>
 8006ff4:	90cffc34 	orhi	r3,r18,16368
 8006ff8:	003fe406 	br	8006f8c <__alt_data_end+0xff006f8c>
 8006ffc:	000d883a 	mov	r6,zero
 8007000:	003fdf06 	br	8006f80 <__alt_data_end+0xff006f80>
 8007004:	90a4983a 	sll	r18,r18,r2
 8007008:	0005883a 	mov	r2,zero
 800700c:	003ff906 	br	8006ff4 <__alt_data_end+0xff006ff4>
 8007010:	1144983a 	sll	r2,r2,r5
 8007014:	003fdd06 	br	8006f8c <__alt_data_end+0xff006f8c>

08007018 <__d2b>:
 8007018:	defff804 	addi	sp,sp,-32
 800701c:	dc000215 	stw	r16,8(sp)
 8007020:	3021883a 	mov	r16,r6
 8007024:	dc400315 	stw	r17,12(sp)
 8007028:	8022907a 	slli	r17,r16,1
 800702c:	dd000615 	stw	r20,24(sp)
 8007030:	2829883a 	mov	r20,r5
 8007034:	01400044 	movi	r5,1
 8007038:	dcc00515 	stw	r19,20(sp)
 800703c:	dc800415 	stw	r18,16(sp)
 8007040:	dfc00715 	stw	ra,28(sp)
 8007044:	3825883a 	mov	r18,r7
 8007048:	8822d57a 	srli	r17,r17,21
 800704c:	80063840 	call	8006384 <_Balloc>
 8007050:	1027883a 	mov	r19,r2
 8007054:	00800434 	movhi	r2,16
 8007058:	10bfffc4 	addi	r2,r2,-1
 800705c:	808c703a 	and	r6,r16,r2
 8007060:	88000126 	beq	r17,zero,8007068 <__d2b+0x50>
 8007064:	31800434 	orhi	r6,r6,16
 8007068:	d9800015 	stw	r6,0(sp)
 800706c:	a0002426 	beq	r20,zero,8007100 <__d2b+0xe8>
 8007070:	d9000104 	addi	r4,sp,4
 8007074:	dd000115 	stw	r20,4(sp)
 8007078:	80066e00 	call	80066e0 <__lo0bits>
 800707c:	d8c00017 	ldw	r3,0(sp)
 8007080:	10002f1e 	bne	r2,zero,8007140 <__d2b+0x128>
 8007084:	d9000117 	ldw	r4,4(sp)
 8007088:	99000515 	stw	r4,20(r19)
 800708c:	1821003a 	cmpeq	r16,r3,zero
 8007090:	01000084 	movi	r4,2
 8007094:	2421c83a 	sub	r16,r4,r16
 8007098:	98c00615 	stw	r3,24(r19)
 800709c:	9c000415 	stw	r16,16(r19)
 80070a0:	88001f1e 	bne	r17,zero,8007120 <__d2b+0x108>
 80070a4:	10bef384 	addi	r2,r2,-1074
 80070a8:	90800015 	stw	r2,0(r18)
 80070ac:	00900034 	movhi	r2,16384
 80070b0:	10bfffc4 	addi	r2,r2,-1
 80070b4:	8085883a 	add	r2,r16,r2
 80070b8:	1085883a 	add	r2,r2,r2
 80070bc:	1085883a 	add	r2,r2,r2
 80070c0:	9885883a 	add	r2,r19,r2
 80070c4:	11000517 	ldw	r4,20(r2)
 80070c8:	8020917a 	slli	r16,r16,5
 80070cc:	80066780 	call	8006678 <__hi0bits>
 80070d0:	d8c00817 	ldw	r3,32(sp)
 80070d4:	8085c83a 	sub	r2,r16,r2
 80070d8:	18800015 	stw	r2,0(r3)
 80070dc:	9805883a 	mov	r2,r19
 80070e0:	dfc00717 	ldw	ra,28(sp)
 80070e4:	dd000617 	ldw	r20,24(sp)
 80070e8:	dcc00517 	ldw	r19,20(sp)
 80070ec:	dc800417 	ldw	r18,16(sp)
 80070f0:	dc400317 	ldw	r17,12(sp)
 80070f4:	dc000217 	ldw	r16,8(sp)
 80070f8:	dec00804 	addi	sp,sp,32
 80070fc:	f800283a 	ret
 8007100:	d809883a 	mov	r4,sp
 8007104:	80066e00 	call	80066e0 <__lo0bits>
 8007108:	d8c00017 	ldw	r3,0(sp)
 800710c:	04000044 	movi	r16,1
 8007110:	9c000415 	stw	r16,16(r19)
 8007114:	98c00515 	stw	r3,20(r19)
 8007118:	10800804 	addi	r2,r2,32
 800711c:	883fe126 	beq	r17,zero,80070a4 <__alt_data_end+0xff0070a4>
 8007120:	00c00d44 	movi	r3,53
 8007124:	8c7ef344 	addi	r17,r17,-1075
 8007128:	88a3883a 	add	r17,r17,r2
 800712c:	1885c83a 	sub	r2,r3,r2
 8007130:	d8c00817 	ldw	r3,32(sp)
 8007134:	94400015 	stw	r17,0(r18)
 8007138:	18800015 	stw	r2,0(r3)
 800713c:	003fe706 	br	80070dc <__alt_data_end+0xff0070dc>
 8007140:	01000804 	movi	r4,32
 8007144:	2089c83a 	sub	r4,r4,r2
 8007148:	1908983a 	sll	r4,r3,r4
 800714c:	d9400117 	ldw	r5,4(sp)
 8007150:	1886d83a 	srl	r3,r3,r2
 8007154:	2148b03a 	or	r4,r4,r5
 8007158:	99000515 	stw	r4,20(r19)
 800715c:	d8c00015 	stw	r3,0(sp)
 8007160:	003fca06 	br	800708c <__alt_data_end+0xff00708c>

08007164 <__ratio>:
 8007164:	defff904 	addi	sp,sp,-28
 8007168:	dc400315 	stw	r17,12(sp)
 800716c:	2823883a 	mov	r17,r5
 8007170:	d9400104 	addi	r5,sp,4
 8007174:	dfc00615 	stw	ra,24(sp)
 8007178:	dcc00515 	stw	r19,20(sp)
 800717c:	dc800415 	stw	r18,16(sp)
 8007180:	2027883a 	mov	r19,r4
 8007184:	dc000215 	stw	r16,8(sp)
 8007188:	8006f0c0 	call	8006f0c <__b2d>
 800718c:	d80b883a 	mov	r5,sp
 8007190:	8809883a 	mov	r4,r17
 8007194:	1025883a 	mov	r18,r2
 8007198:	1821883a 	mov	r16,r3
 800719c:	8006f0c0 	call	8006f0c <__b2d>
 80071a0:	8a000417 	ldw	r8,16(r17)
 80071a4:	99000417 	ldw	r4,16(r19)
 80071a8:	d9400117 	ldw	r5,4(sp)
 80071ac:	2209c83a 	sub	r4,r4,r8
 80071b0:	2010917a 	slli	r8,r4,5
 80071b4:	d9000017 	ldw	r4,0(sp)
 80071b8:	2909c83a 	sub	r4,r5,r4
 80071bc:	4109883a 	add	r4,r8,r4
 80071c0:	01000e0e 	bge	zero,r4,80071fc <__ratio+0x98>
 80071c4:	2008953a 	slli	r4,r4,20
 80071c8:	2421883a 	add	r16,r4,r16
 80071cc:	100d883a 	mov	r6,r2
 80071d0:	180f883a 	mov	r7,r3
 80071d4:	9009883a 	mov	r4,r18
 80071d8:	800b883a 	mov	r5,r16
 80071dc:	800b0500 	call	800b050 <__divdf3>
 80071e0:	dfc00617 	ldw	ra,24(sp)
 80071e4:	dcc00517 	ldw	r19,20(sp)
 80071e8:	dc800417 	ldw	r18,16(sp)
 80071ec:	dc400317 	ldw	r17,12(sp)
 80071f0:	dc000217 	ldw	r16,8(sp)
 80071f4:	dec00704 	addi	sp,sp,28
 80071f8:	f800283a 	ret
 80071fc:	2008953a 	slli	r4,r4,20
 8007200:	1907c83a 	sub	r3,r3,r4
 8007204:	003ff106 	br	80071cc <__alt_data_end+0xff0071cc>

08007208 <_mprec_log10>:
 8007208:	defffe04 	addi	sp,sp,-8
 800720c:	dc000015 	stw	r16,0(sp)
 8007210:	dfc00115 	stw	ra,4(sp)
 8007214:	008005c4 	movi	r2,23
 8007218:	2021883a 	mov	r16,r4
 800721c:	11000d0e 	bge	r2,r4,8007254 <_mprec_log10+0x4c>
 8007220:	0005883a 	mov	r2,zero
 8007224:	00cffc34 	movhi	r3,16368
 8007228:	843fffc4 	addi	r16,r16,-1
 800722c:	000d883a 	mov	r6,zero
 8007230:	01d00934 	movhi	r7,16420
 8007234:	1009883a 	mov	r4,r2
 8007238:	180b883a 	mov	r5,r3
 800723c:	800bb900 	call	800bb90 <__muldf3>
 8007240:	803ff91e 	bne	r16,zero,8007228 <__alt_data_end+0xff007228>
 8007244:	dfc00117 	ldw	ra,4(sp)
 8007248:	dc000017 	ldw	r16,0(sp)
 800724c:	dec00204 	addi	sp,sp,8
 8007250:	f800283a 	ret
 8007254:	202090fa 	slli	r16,r4,3
 8007258:	00820074 	movhi	r2,2049
 800725c:	10861d04 	addi	r2,r2,6260
 8007260:	1421883a 	add	r16,r2,r16
 8007264:	80800017 	ldw	r2,0(r16)
 8007268:	80c00117 	ldw	r3,4(r16)
 800726c:	dfc00117 	ldw	ra,4(sp)
 8007270:	dc000017 	ldw	r16,0(sp)
 8007274:	dec00204 	addi	sp,sp,8
 8007278:	f800283a 	ret

0800727c <__copybits>:
 800727c:	297fffc4 	addi	r5,r5,-1
 8007280:	280fd17a 	srai	r7,r5,5
 8007284:	30c00417 	ldw	r3,16(r6)
 8007288:	30800504 	addi	r2,r6,20
 800728c:	39c00044 	addi	r7,r7,1
 8007290:	18c7883a 	add	r3,r3,r3
 8007294:	39cf883a 	add	r7,r7,r7
 8007298:	18c7883a 	add	r3,r3,r3
 800729c:	39cf883a 	add	r7,r7,r7
 80072a0:	10c7883a 	add	r3,r2,r3
 80072a4:	21cf883a 	add	r7,r4,r7
 80072a8:	10c00d2e 	bgeu	r2,r3,80072e0 <__copybits+0x64>
 80072ac:	200b883a 	mov	r5,r4
 80072b0:	12000017 	ldw	r8,0(r2)
 80072b4:	29400104 	addi	r5,r5,4
 80072b8:	10800104 	addi	r2,r2,4
 80072bc:	2a3fff15 	stw	r8,-4(r5)
 80072c0:	10fffb36 	bltu	r2,r3,80072b0 <__alt_data_end+0xff0072b0>
 80072c4:	1985c83a 	sub	r2,r3,r6
 80072c8:	10bffac4 	addi	r2,r2,-21
 80072cc:	1004d0ba 	srli	r2,r2,2
 80072d0:	10800044 	addi	r2,r2,1
 80072d4:	1085883a 	add	r2,r2,r2
 80072d8:	1085883a 	add	r2,r2,r2
 80072dc:	2089883a 	add	r4,r4,r2
 80072e0:	21c0032e 	bgeu	r4,r7,80072f0 <__copybits+0x74>
 80072e4:	20000015 	stw	zero,0(r4)
 80072e8:	21000104 	addi	r4,r4,4
 80072ec:	21fffd36 	bltu	r4,r7,80072e4 <__alt_data_end+0xff0072e4>
 80072f0:	f800283a 	ret

080072f4 <__any_on>:
 80072f4:	20c00417 	ldw	r3,16(r4)
 80072f8:	2805d17a 	srai	r2,r5,5
 80072fc:	21000504 	addi	r4,r4,20
 8007300:	18800d0e 	bge	r3,r2,8007338 <__any_on+0x44>
 8007304:	18c7883a 	add	r3,r3,r3
 8007308:	18c7883a 	add	r3,r3,r3
 800730c:	20c7883a 	add	r3,r4,r3
 8007310:	20c0192e 	bgeu	r4,r3,8007378 <__any_on+0x84>
 8007314:	18bfff17 	ldw	r2,-4(r3)
 8007318:	18ffff04 	addi	r3,r3,-4
 800731c:	1000041e 	bne	r2,zero,8007330 <__any_on+0x3c>
 8007320:	20c0142e 	bgeu	r4,r3,8007374 <__any_on+0x80>
 8007324:	18ffff04 	addi	r3,r3,-4
 8007328:	19400017 	ldw	r5,0(r3)
 800732c:	283ffc26 	beq	r5,zero,8007320 <__alt_data_end+0xff007320>
 8007330:	00800044 	movi	r2,1
 8007334:	f800283a 	ret
 8007338:	10c00a0e 	bge	r2,r3,8007364 <__any_on+0x70>
 800733c:	1085883a 	add	r2,r2,r2
 8007340:	1085883a 	add	r2,r2,r2
 8007344:	294007cc 	andi	r5,r5,31
 8007348:	2087883a 	add	r3,r4,r2
 800734c:	283ff026 	beq	r5,zero,8007310 <__alt_data_end+0xff007310>
 8007350:	19800017 	ldw	r6,0(r3)
 8007354:	3144d83a 	srl	r2,r6,r5
 8007358:	114a983a 	sll	r5,r2,r5
 800735c:	317ff41e 	bne	r6,r5,8007330 <__alt_data_end+0xff007330>
 8007360:	003feb06 	br	8007310 <__alt_data_end+0xff007310>
 8007364:	1085883a 	add	r2,r2,r2
 8007368:	1085883a 	add	r2,r2,r2
 800736c:	2087883a 	add	r3,r4,r2
 8007370:	003fe706 	br	8007310 <__alt_data_end+0xff007310>
 8007374:	f800283a 	ret
 8007378:	0005883a 	mov	r2,zero
 800737c:	f800283a 	ret

08007380 <_realloc_r>:
 8007380:	defff604 	addi	sp,sp,-40
 8007384:	dc800215 	stw	r18,8(sp)
 8007388:	dfc00915 	stw	ra,36(sp)
 800738c:	df000815 	stw	fp,32(sp)
 8007390:	ddc00715 	stw	r23,28(sp)
 8007394:	dd800615 	stw	r22,24(sp)
 8007398:	dd400515 	stw	r21,20(sp)
 800739c:	dd000415 	stw	r20,16(sp)
 80073a0:	dcc00315 	stw	r19,12(sp)
 80073a4:	dc400115 	stw	r17,4(sp)
 80073a8:	dc000015 	stw	r16,0(sp)
 80073ac:	3025883a 	mov	r18,r6
 80073b0:	2800b726 	beq	r5,zero,8007690 <_realloc_r+0x310>
 80073b4:	282b883a 	mov	r21,r5
 80073b8:	2029883a 	mov	r20,r4
 80073bc:	800d3880 	call	800d388 <__malloc_lock>
 80073c0:	a8bfff17 	ldw	r2,-4(r21)
 80073c4:	043fff04 	movi	r16,-4
 80073c8:	90c002c4 	addi	r3,r18,11
 80073cc:	01000584 	movi	r4,22
 80073d0:	acfffe04 	addi	r19,r21,-8
 80073d4:	1420703a 	and	r16,r2,r16
 80073d8:	20c0332e 	bgeu	r4,r3,80074a8 <_realloc_r+0x128>
 80073dc:	047ffe04 	movi	r17,-8
 80073e0:	1c62703a 	and	r17,r3,r17
 80073e4:	8807883a 	mov	r3,r17
 80073e8:	88005816 	blt	r17,zero,800754c <_realloc_r+0x1cc>
 80073ec:	8c805736 	bltu	r17,r18,800754c <_realloc_r+0x1cc>
 80073f0:	80c0300e 	bge	r16,r3,80074b4 <_realloc_r+0x134>
 80073f4:	07020074 	movhi	fp,2049
 80073f8:	e707d604 	addi	fp,fp,8024
 80073fc:	e1c00217 	ldw	r7,8(fp)
 8007400:	9c09883a 	add	r4,r19,r16
 8007404:	22000117 	ldw	r8,4(r4)
 8007408:	21c06326 	beq	r4,r7,8007598 <_realloc_r+0x218>
 800740c:	017fff84 	movi	r5,-2
 8007410:	414a703a 	and	r5,r8,r5
 8007414:	214b883a 	add	r5,r4,r5
 8007418:	29800117 	ldw	r6,4(r5)
 800741c:	3180004c 	andi	r6,r6,1
 8007420:	30003f26 	beq	r6,zero,8007520 <_realloc_r+0x1a0>
 8007424:	1080004c 	andi	r2,r2,1
 8007428:	10008326 	beq	r2,zero,8007638 <_realloc_r+0x2b8>
 800742c:	900b883a 	mov	r5,r18
 8007430:	a009883a 	mov	r4,r20
 8007434:	80056c80 	call	80056c8 <_malloc_r>
 8007438:	1025883a 	mov	r18,r2
 800743c:	10011e26 	beq	r2,zero,80078b8 <_realloc_r+0x538>
 8007440:	a93fff17 	ldw	r4,-4(r21)
 8007444:	10fffe04 	addi	r3,r2,-8
 8007448:	00bfff84 	movi	r2,-2
 800744c:	2084703a 	and	r2,r4,r2
 8007450:	9885883a 	add	r2,r19,r2
 8007454:	1880ee26 	beq	r3,r2,8007810 <_realloc_r+0x490>
 8007458:	81bfff04 	addi	r6,r16,-4
 800745c:	00800904 	movi	r2,36
 8007460:	1180b836 	bltu	r2,r6,8007744 <_realloc_r+0x3c4>
 8007464:	00c004c4 	movi	r3,19
 8007468:	19809636 	bltu	r3,r6,80076c4 <_realloc_r+0x344>
 800746c:	9005883a 	mov	r2,r18
 8007470:	a807883a 	mov	r3,r21
 8007474:	19000017 	ldw	r4,0(r3)
 8007478:	11000015 	stw	r4,0(r2)
 800747c:	19000117 	ldw	r4,4(r3)
 8007480:	11000115 	stw	r4,4(r2)
 8007484:	18c00217 	ldw	r3,8(r3)
 8007488:	10c00215 	stw	r3,8(r2)
 800748c:	a80b883a 	mov	r5,r21
 8007490:	a009883a 	mov	r4,r20
 8007494:	8004adc0 	call	8004adc <_free_r>
 8007498:	a009883a 	mov	r4,r20
 800749c:	800d3ac0 	call	800d3ac <__malloc_unlock>
 80074a0:	9005883a 	mov	r2,r18
 80074a4:	00001206 	br	80074f0 <_realloc_r+0x170>
 80074a8:	00c00404 	movi	r3,16
 80074ac:	1823883a 	mov	r17,r3
 80074b0:	003fce06 	br	80073ec <__alt_data_end+0xff0073ec>
 80074b4:	a825883a 	mov	r18,r21
 80074b8:	8445c83a 	sub	r2,r16,r17
 80074bc:	00c003c4 	movi	r3,15
 80074c0:	18802636 	bltu	r3,r2,800755c <_realloc_r+0x1dc>
 80074c4:	99800117 	ldw	r6,4(r19)
 80074c8:	9c07883a 	add	r3,r19,r16
 80074cc:	3180004c 	andi	r6,r6,1
 80074d0:	3420b03a 	or	r16,r6,r16
 80074d4:	9c000115 	stw	r16,4(r19)
 80074d8:	18800117 	ldw	r2,4(r3)
 80074dc:	10800054 	ori	r2,r2,1
 80074e0:	18800115 	stw	r2,4(r3)
 80074e4:	a009883a 	mov	r4,r20
 80074e8:	800d3ac0 	call	800d3ac <__malloc_unlock>
 80074ec:	9005883a 	mov	r2,r18
 80074f0:	dfc00917 	ldw	ra,36(sp)
 80074f4:	df000817 	ldw	fp,32(sp)
 80074f8:	ddc00717 	ldw	r23,28(sp)
 80074fc:	dd800617 	ldw	r22,24(sp)
 8007500:	dd400517 	ldw	r21,20(sp)
 8007504:	dd000417 	ldw	r20,16(sp)
 8007508:	dcc00317 	ldw	r19,12(sp)
 800750c:	dc800217 	ldw	r18,8(sp)
 8007510:	dc400117 	ldw	r17,4(sp)
 8007514:	dc000017 	ldw	r16,0(sp)
 8007518:	dec00a04 	addi	sp,sp,40
 800751c:	f800283a 	ret
 8007520:	017fff04 	movi	r5,-4
 8007524:	414a703a 	and	r5,r8,r5
 8007528:	814d883a 	add	r6,r16,r5
 800752c:	30c01f16 	blt	r6,r3,80075ac <_realloc_r+0x22c>
 8007530:	20800317 	ldw	r2,12(r4)
 8007534:	20c00217 	ldw	r3,8(r4)
 8007538:	a825883a 	mov	r18,r21
 800753c:	3021883a 	mov	r16,r6
 8007540:	18800315 	stw	r2,12(r3)
 8007544:	10c00215 	stw	r3,8(r2)
 8007548:	003fdb06 	br	80074b8 <__alt_data_end+0xff0074b8>
 800754c:	00800304 	movi	r2,12
 8007550:	a0800015 	stw	r2,0(r20)
 8007554:	0005883a 	mov	r2,zero
 8007558:	003fe506 	br	80074f0 <__alt_data_end+0xff0074f0>
 800755c:	98c00117 	ldw	r3,4(r19)
 8007560:	9c4b883a 	add	r5,r19,r17
 8007564:	11000054 	ori	r4,r2,1
 8007568:	18c0004c 	andi	r3,r3,1
 800756c:	1c62b03a 	or	r17,r3,r17
 8007570:	9c400115 	stw	r17,4(r19)
 8007574:	29000115 	stw	r4,4(r5)
 8007578:	2885883a 	add	r2,r5,r2
 800757c:	10c00117 	ldw	r3,4(r2)
 8007580:	29400204 	addi	r5,r5,8
 8007584:	a009883a 	mov	r4,r20
 8007588:	18c00054 	ori	r3,r3,1
 800758c:	10c00115 	stw	r3,4(r2)
 8007590:	8004adc0 	call	8004adc <_free_r>
 8007594:	003fd306 	br	80074e4 <__alt_data_end+0xff0074e4>
 8007598:	017fff04 	movi	r5,-4
 800759c:	414a703a 	and	r5,r8,r5
 80075a0:	89800404 	addi	r6,r17,16
 80075a4:	8151883a 	add	r8,r16,r5
 80075a8:	4180590e 	bge	r8,r6,8007710 <_realloc_r+0x390>
 80075ac:	1080004c 	andi	r2,r2,1
 80075b0:	103f9e1e 	bne	r2,zero,800742c <__alt_data_end+0xff00742c>
 80075b4:	adbffe17 	ldw	r22,-8(r21)
 80075b8:	00bfff04 	movi	r2,-4
 80075bc:	9dadc83a 	sub	r22,r19,r22
 80075c0:	b1800117 	ldw	r6,4(r22)
 80075c4:	3084703a 	and	r2,r6,r2
 80075c8:	20002026 	beq	r4,zero,800764c <_realloc_r+0x2cc>
 80075cc:	80af883a 	add	r23,r16,r2
 80075d0:	b96f883a 	add	r23,r23,r5
 80075d4:	21c05f26 	beq	r4,r7,8007754 <_realloc_r+0x3d4>
 80075d8:	b8c01c16 	blt	r23,r3,800764c <_realloc_r+0x2cc>
 80075dc:	20800317 	ldw	r2,12(r4)
 80075e0:	20c00217 	ldw	r3,8(r4)
 80075e4:	81bfff04 	addi	r6,r16,-4
 80075e8:	01000904 	movi	r4,36
 80075ec:	18800315 	stw	r2,12(r3)
 80075f0:	10c00215 	stw	r3,8(r2)
 80075f4:	b0c00217 	ldw	r3,8(r22)
 80075f8:	b0800317 	ldw	r2,12(r22)
 80075fc:	b4800204 	addi	r18,r22,8
 8007600:	18800315 	stw	r2,12(r3)
 8007604:	10c00215 	stw	r3,8(r2)
 8007608:	21801b36 	bltu	r4,r6,8007678 <_realloc_r+0x2f8>
 800760c:	008004c4 	movi	r2,19
 8007610:	1180352e 	bgeu	r2,r6,80076e8 <_realloc_r+0x368>
 8007614:	a8800017 	ldw	r2,0(r21)
 8007618:	b0800215 	stw	r2,8(r22)
 800761c:	a8800117 	ldw	r2,4(r21)
 8007620:	b0800315 	stw	r2,12(r22)
 8007624:	008006c4 	movi	r2,27
 8007628:	11807f36 	bltu	r2,r6,8007828 <_realloc_r+0x4a8>
 800762c:	b0800404 	addi	r2,r22,16
 8007630:	ad400204 	addi	r21,r21,8
 8007634:	00002d06 	br	80076ec <_realloc_r+0x36c>
 8007638:	adbffe17 	ldw	r22,-8(r21)
 800763c:	00bfff04 	movi	r2,-4
 8007640:	9dadc83a 	sub	r22,r19,r22
 8007644:	b1000117 	ldw	r4,4(r22)
 8007648:	2084703a 	and	r2,r4,r2
 800764c:	b03f7726 	beq	r22,zero,800742c <__alt_data_end+0xff00742c>
 8007650:	80af883a 	add	r23,r16,r2
 8007654:	b8ff7516 	blt	r23,r3,800742c <__alt_data_end+0xff00742c>
 8007658:	b0800317 	ldw	r2,12(r22)
 800765c:	b0c00217 	ldw	r3,8(r22)
 8007660:	81bfff04 	addi	r6,r16,-4
 8007664:	01000904 	movi	r4,36
 8007668:	18800315 	stw	r2,12(r3)
 800766c:	10c00215 	stw	r3,8(r2)
 8007670:	b4800204 	addi	r18,r22,8
 8007674:	21bfe52e 	bgeu	r4,r6,800760c <__alt_data_end+0xff00760c>
 8007678:	a80b883a 	mov	r5,r21
 800767c:	9009883a 	mov	r4,r18
 8007680:	80061000 	call	8006100 <memmove>
 8007684:	b821883a 	mov	r16,r23
 8007688:	b027883a 	mov	r19,r22
 800768c:	003f8a06 	br	80074b8 <__alt_data_end+0xff0074b8>
 8007690:	300b883a 	mov	r5,r6
 8007694:	dfc00917 	ldw	ra,36(sp)
 8007698:	df000817 	ldw	fp,32(sp)
 800769c:	ddc00717 	ldw	r23,28(sp)
 80076a0:	dd800617 	ldw	r22,24(sp)
 80076a4:	dd400517 	ldw	r21,20(sp)
 80076a8:	dd000417 	ldw	r20,16(sp)
 80076ac:	dcc00317 	ldw	r19,12(sp)
 80076b0:	dc800217 	ldw	r18,8(sp)
 80076b4:	dc400117 	ldw	r17,4(sp)
 80076b8:	dc000017 	ldw	r16,0(sp)
 80076bc:	dec00a04 	addi	sp,sp,40
 80076c0:	80056c81 	jmpi	80056c8 <_malloc_r>
 80076c4:	a8c00017 	ldw	r3,0(r21)
 80076c8:	90c00015 	stw	r3,0(r18)
 80076cc:	a8c00117 	ldw	r3,4(r21)
 80076d0:	90c00115 	stw	r3,4(r18)
 80076d4:	00c006c4 	movi	r3,27
 80076d8:	19804536 	bltu	r3,r6,80077f0 <_realloc_r+0x470>
 80076dc:	90800204 	addi	r2,r18,8
 80076e0:	a8c00204 	addi	r3,r21,8
 80076e4:	003f6306 	br	8007474 <__alt_data_end+0xff007474>
 80076e8:	9005883a 	mov	r2,r18
 80076ec:	a8c00017 	ldw	r3,0(r21)
 80076f0:	b821883a 	mov	r16,r23
 80076f4:	b027883a 	mov	r19,r22
 80076f8:	10c00015 	stw	r3,0(r2)
 80076fc:	a8c00117 	ldw	r3,4(r21)
 8007700:	10c00115 	stw	r3,4(r2)
 8007704:	a8c00217 	ldw	r3,8(r21)
 8007708:	10c00215 	stw	r3,8(r2)
 800770c:	003f6a06 	br	80074b8 <__alt_data_end+0xff0074b8>
 8007710:	9c67883a 	add	r19,r19,r17
 8007714:	4445c83a 	sub	r2,r8,r17
 8007718:	e4c00215 	stw	r19,8(fp)
 800771c:	10800054 	ori	r2,r2,1
 8007720:	98800115 	stw	r2,4(r19)
 8007724:	a8bfff17 	ldw	r2,-4(r21)
 8007728:	a009883a 	mov	r4,r20
 800772c:	1080004c 	andi	r2,r2,1
 8007730:	1462b03a 	or	r17,r2,r17
 8007734:	ac7fff15 	stw	r17,-4(r21)
 8007738:	800d3ac0 	call	800d3ac <__malloc_unlock>
 800773c:	a805883a 	mov	r2,r21
 8007740:	003f6b06 	br	80074f0 <__alt_data_end+0xff0074f0>
 8007744:	a80b883a 	mov	r5,r21
 8007748:	9009883a 	mov	r4,r18
 800774c:	80061000 	call	8006100 <memmove>
 8007750:	003f4e06 	br	800748c <__alt_data_end+0xff00748c>
 8007754:	89000404 	addi	r4,r17,16
 8007758:	b93fbc16 	blt	r23,r4,800764c <__alt_data_end+0xff00764c>
 800775c:	b0800317 	ldw	r2,12(r22)
 8007760:	b0c00217 	ldw	r3,8(r22)
 8007764:	81bfff04 	addi	r6,r16,-4
 8007768:	01000904 	movi	r4,36
 800776c:	18800315 	stw	r2,12(r3)
 8007770:	10c00215 	stw	r3,8(r2)
 8007774:	b4800204 	addi	r18,r22,8
 8007778:	21804336 	bltu	r4,r6,8007888 <_realloc_r+0x508>
 800777c:	008004c4 	movi	r2,19
 8007780:	11803f2e 	bgeu	r2,r6,8007880 <_realloc_r+0x500>
 8007784:	a8800017 	ldw	r2,0(r21)
 8007788:	b0800215 	stw	r2,8(r22)
 800778c:	a8800117 	ldw	r2,4(r21)
 8007790:	b0800315 	stw	r2,12(r22)
 8007794:	008006c4 	movi	r2,27
 8007798:	11803f36 	bltu	r2,r6,8007898 <_realloc_r+0x518>
 800779c:	b0800404 	addi	r2,r22,16
 80077a0:	ad400204 	addi	r21,r21,8
 80077a4:	a8c00017 	ldw	r3,0(r21)
 80077a8:	10c00015 	stw	r3,0(r2)
 80077ac:	a8c00117 	ldw	r3,4(r21)
 80077b0:	10c00115 	stw	r3,4(r2)
 80077b4:	a8c00217 	ldw	r3,8(r21)
 80077b8:	10c00215 	stw	r3,8(r2)
 80077bc:	b447883a 	add	r3,r22,r17
 80077c0:	bc45c83a 	sub	r2,r23,r17
 80077c4:	e0c00215 	stw	r3,8(fp)
 80077c8:	10800054 	ori	r2,r2,1
 80077cc:	18800115 	stw	r2,4(r3)
 80077d0:	b0800117 	ldw	r2,4(r22)
 80077d4:	a009883a 	mov	r4,r20
 80077d8:	1080004c 	andi	r2,r2,1
 80077dc:	1462b03a 	or	r17,r2,r17
 80077e0:	b4400115 	stw	r17,4(r22)
 80077e4:	800d3ac0 	call	800d3ac <__malloc_unlock>
 80077e8:	9005883a 	mov	r2,r18
 80077ec:	003f4006 	br	80074f0 <__alt_data_end+0xff0074f0>
 80077f0:	a8c00217 	ldw	r3,8(r21)
 80077f4:	90c00215 	stw	r3,8(r18)
 80077f8:	a8c00317 	ldw	r3,12(r21)
 80077fc:	90c00315 	stw	r3,12(r18)
 8007800:	30801126 	beq	r6,r2,8007848 <_realloc_r+0x4c8>
 8007804:	90800404 	addi	r2,r18,16
 8007808:	a8c00404 	addi	r3,r21,16
 800780c:	003f1906 	br	8007474 <__alt_data_end+0xff007474>
 8007810:	90ffff17 	ldw	r3,-4(r18)
 8007814:	00bfff04 	movi	r2,-4
 8007818:	a825883a 	mov	r18,r21
 800781c:	1884703a 	and	r2,r3,r2
 8007820:	80a1883a 	add	r16,r16,r2
 8007824:	003f2406 	br	80074b8 <__alt_data_end+0xff0074b8>
 8007828:	a8800217 	ldw	r2,8(r21)
 800782c:	b0800415 	stw	r2,16(r22)
 8007830:	a8800317 	ldw	r2,12(r21)
 8007834:	b0800515 	stw	r2,20(r22)
 8007838:	31000a26 	beq	r6,r4,8007864 <_realloc_r+0x4e4>
 800783c:	b0800604 	addi	r2,r22,24
 8007840:	ad400404 	addi	r21,r21,16
 8007844:	003fa906 	br	80076ec <__alt_data_end+0xff0076ec>
 8007848:	a9000417 	ldw	r4,16(r21)
 800784c:	90800604 	addi	r2,r18,24
 8007850:	a8c00604 	addi	r3,r21,24
 8007854:	91000415 	stw	r4,16(r18)
 8007858:	a9000517 	ldw	r4,20(r21)
 800785c:	91000515 	stw	r4,20(r18)
 8007860:	003f0406 	br	8007474 <__alt_data_end+0xff007474>
 8007864:	a8c00417 	ldw	r3,16(r21)
 8007868:	ad400604 	addi	r21,r21,24
 800786c:	b0800804 	addi	r2,r22,32
 8007870:	b0c00615 	stw	r3,24(r22)
 8007874:	a8ffff17 	ldw	r3,-4(r21)
 8007878:	b0c00715 	stw	r3,28(r22)
 800787c:	003f9b06 	br	80076ec <__alt_data_end+0xff0076ec>
 8007880:	9005883a 	mov	r2,r18
 8007884:	003fc706 	br	80077a4 <__alt_data_end+0xff0077a4>
 8007888:	a80b883a 	mov	r5,r21
 800788c:	9009883a 	mov	r4,r18
 8007890:	80061000 	call	8006100 <memmove>
 8007894:	003fc906 	br	80077bc <__alt_data_end+0xff0077bc>
 8007898:	a8800217 	ldw	r2,8(r21)
 800789c:	b0800415 	stw	r2,16(r22)
 80078a0:	a8800317 	ldw	r2,12(r21)
 80078a4:	b0800515 	stw	r2,20(r22)
 80078a8:	31000726 	beq	r6,r4,80078c8 <_realloc_r+0x548>
 80078ac:	b0800604 	addi	r2,r22,24
 80078b0:	ad400404 	addi	r21,r21,16
 80078b4:	003fbb06 	br	80077a4 <__alt_data_end+0xff0077a4>
 80078b8:	a009883a 	mov	r4,r20
 80078bc:	800d3ac0 	call	800d3ac <__malloc_unlock>
 80078c0:	0005883a 	mov	r2,zero
 80078c4:	003f0a06 	br	80074f0 <__alt_data_end+0xff0074f0>
 80078c8:	a8c00417 	ldw	r3,16(r21)
 80078cc:	ad400604 	addi	r21,r21,24
 80078d0:	b0800804 	addi	r2,r22,32
 80078d4:	b0c00615 	stw	r3,24(r22)
 80078d8:	a8ffff17 	ldw	r3,-4(r21)
 80078dc:	b0c00715 	stw	r3,28(r22)
 80078e0:	003fb006 	br	80077a4 <__alt_data_end+0xff0077a4>

080078e4 <__fpclassifyd>:
 80078e4:	00a00034 	movhi	r2,32768
 80078e8:	10bfffc4 	addi	r2,r2,-1
 80078ec:	2884703a 	and	r2,r5,r2
 80078f0:	10000726 	beq	r2,zero,8007910 <__fpclassifyd+0x2c>
 80078f4:	00fffc34 	movhi	r3,65520
 80078f8:	019ff834 	movhi	r6,32736
 80078fc:	28c7883a 	add	r3,r5,r3
 8007900:	31bfffc4 	addi	r6,r6,-1
 8007904:	30c00536 	bltu	r6,r3,800791c <__fpclassifyd+0x38>
 8007908:	00800104 	movi	r2,4
 800790c:	f800283a 	ret
 8007910:	2000021e 	bne	r4,zero,800791c <__fpclassifyd+0x38>
 8007914:	00800084 	movi	r2,2
 8007918:	f800283a 	ret
 800791c:	00dffc34 	movhi	r3,32752
 8007920:	019ff834 	movhi	r6,32736
 8007924:	28cb883a 	add	r5,r5,r3
 8007928:	31bfffc4 	addi	r6,r6,-1
 800792c:	317ff62e 	bgeu	r6,r5,8007908 <__alt_data_end+0xff007908>
 8007930:	01400434 	movhi	r5,16
 8007934:	297fffc4 	addi	r5,r5,-1
 8007938:	28800236 	bltu	r5,r2,8007944 <__fpclassifyd+0x60>
 800793c:	008000c4 	movi	r2,3
 8007940:	f800283a 	ret
 8007944:	10c00226 	beq	r2,r3,8007950 <__fpclassifyd+0x6c>
 8007948:	0005883a 	mov	r2,zero
 800794c:	f800283a 	ret
 8007950:	2005003a 	cmpeq	r2,r4,zero
 8007954:	f800283a 	ret

08007958 <_sbrk_r>:
 8007958:	defffd04 	addi	sp,sp,-12
 800795c:	dc000015 	stw	r16,0(sp)
 8007960:	04020074 	movhi	r16,2049
 8007964:	dc400115 	stw	r17,4(sp)
 8007968:	84144b04 	addi	r16,r16,20780
 800796c:	2023883a 	mov	r17,r4
 8007970:	2809883a 	mov	r4,r5
 8007974:	dfc00215 	stw	ra,8(sp)
 8007978:	80000015 	stw	zero,0(r16)
 800797c:	800d56c0 	call	800d56c <sbrk>
 8007980:	00ffffc4 	movi	r3,-1
 8007984:	10c00526 	beq	r2,r3,800799c <_sbrk_r+0x44>
 8007988:	dfc00217 	ldw	ra,8(sp)
 800798c:	dc400117 	ldw	r17,4(sp)
 8007990:	dc000017 	ldw	r16,0(sp)
 8007994:	dec00304 	addi	sp,sp,12
 8007998:	f800283a 	ret
 800799c:	80c00017 	ldw	r3,0(r16)
 80079a0:	183ff926 	beq	r3,zero,8007988 <__alt_data_end+0xff007988>
 80079a4:	88c00015 	stw	r3,0(r17)
 80079a8:	003ff706 	br	8007988 <__alt_data_end+0xff007988>

080079ac <__sread>:
 80079ac:	defffe04 	addi	sp,sp,-8
 80079b0:	dc000015 	stw	r16,0(sp)
 80079b4:	2821883a 	mov	r16,r5
 80079b8:	2940038f 	ldh	r5,14(r5)
 80079bc:	dfc00115 	stw	ra,4(sp)
 80079c0:	80097a00 	call	80097a0 <_read_r>
 80079c4:	10000716 	blt	r2,zero,80079e4 <__sread+0x38>
 80079c8:	80c01417 	ldw	r3,80(r16)
 80079cc:	1887883a 	add	r3,r3,r2
 80079d0:	80c01415 	stw	r3,80(r16)
 80079d4:	dfc00117 	ldw	ra,4(sp)
 80079d8:	dc000017 	ldw	r16,0(sp)
 80079dc:	dec00204 	addi	sp,sp,8
 80079e0:	f800283a 	ret
 80079e4:	80c0030b 	ldhu	r3,12(r16)
 80079e8:	18fbffcc 	andi	r3,r3,61439
 80079ec:	80c0030d 	sth	r3,12(r16)
 80079f0:	dfc00117 	ldw	ra,4(sp)
 80079f4:	dc000017 	ldw	r16,0(sp)
 80079f8:	dec00204 	addi	sp,sp,8
 80079fc:	f800283a 	ret

08007a00 <__seofread>:
 8007a00:	0005883a 	mov	r2,zero
 8007a04:	f800283a 	ret

08007a08 <__swrite>:
 8007a08:	2880030b 	ldhu	r2,12(r5)
 8007a0c:	defffb04 	addi	sp,sp,-20
 8007a10:	dcc00315 	stw	r19,12(sp)
 8007a14:	dc800215 	stw	r18,8(sp)
 8007a18:	dc400115 	stw	r17,4(sp)
 8007a1c:	dc000015 	stw	r16,0(sp)
 8007a20:	dfc00415 	stw	ra,16(sp)
 8007a24:	10c0400c 	andi	r3,r2,256
 8007a28:	2821883a 	mov	r16,r5
 8007a2c:	2023883a 	mov	r17,r4
 8007a30:	3025883a 	mov	r18,r6
 8007a34:	3827883a 	mov	r19,r7
 8007a38:	18000526 	beq	r3,zero,8007a50 <__swrite+0x48>
 8007a3c:	2940038f 	ldh	r5,14(r5)
 8007a40:	01c00084 	movi	r7,2
 8007a44:	000d883a 	mov	r6,zero
 8007a48:	80097400 	call	8009740 <_lseek_r>
 8007a4c:	8080030b 	ldhu	r2,12(r16)
 8007a50:	8140038f 	ldh	r5,14(r16)
 8007a54:	10bbffcc 	andi	r2,r2,61439
 8007a58:	980f883a 	mov	r7,r19
 8007a5c:	900d883a 	mov	r6,r18
 8007a60:	8809883a 	mov	r4,r17
 8007a64:	8080030d 	sth	r2,12(r16)
 8007a68:	dfc00417 	ldw	ra,16(sp)
 8007a6c:	dcc00317 	ldw	r19,12(sp)
 8007a70:	dc800217 	ldw	r18,8(sp)
 8007a74:	dc400117 	ldw	r17,4(sp)
 8007a78:	dc000017 	ldw	r16,0(sp)
 8007a7c:	dec00504 	addi	sp,sp,20
 8007a80:	800920c1 	jmpi	800920c <_write_r>

08007a84 <__sseek>:
 8007a84:	defffe04 	addi	sp,sp,-8
 8007a88:	dc000015 	stw	r16,0(sp)
 8007a8c:	2821883a 	mov	r16,r5
 8007a90:	2940038f 	ldh	r5,14(r5)
 8007a94:	dfc00115 	stw	ra,4(sp)
 8007a98:	80097400 	call	8009740 <_lseek_r>
 8007a9c:	00ffffc4 	movi	r3,-1
 8007aa0:	10c00826 	beq	r2,r3,8007ac4 <__sseek+0x40>
 8007aa4:	80c0030b 	ldhu	r3,12(r16)
 8007aa8:	80801415 	stw	r2,80(r16)
 8007aac:	18c40014 	ori	r3,r3,4096
 8007ab0:	80c0030d 	sth	r3,12(r16)
 8007ab4:	dfc00117 	ldw	ra,4(sp)
 8007ab8:	dc000017 	ldw	r16,0(sp)
 8007abc:	dec00204 	addi	sp,sp,8
 8007ac0:	f800283a 	ret
 8007ac4:	80c0030b 	ldhu	r3,12(r16)
 8007ac8:	18fbffcc 	andi	r3,r3,61439
 8007acc:	80c0030d 	sth	r3,12(r16)
 8007ad0:	dfc00117 	ldw	ra,4(sp)
 8007ad4:	dc000017 	ldw	r16,0(sp)
 8007ad8:	dec00204 	addi	sp,sp,8
 8007adc:	f800283a 	ret

08007ae0 <__sclose>:
 8007ae0:	2940038f 	ldh	r5,14(r5)
 8007ae4:	800926c1 	jmpi	800926c <_close_r>

08007ae8 <strcmp>:
 8007ae8:	2144b03a 	or	r2,r4,r5
 8007aec:	108000cc 	andi	r2,r2,3
 8007af0:	1000171e 	bne	r2,zero,8007b50 <strcmp+0x68>
 8007af4:	20800017 	ldw	r2,0(r4)
 8007af8:	28c00017 	ldw	r3,0(r5)
 8007afc:	10c0141e 	bne	r2,r3,8007b50 <strcmp+0x68>
 8007b00:	027fbff4 	movhi	r9,65279
 8007b04:	4a7fbfc4 	addi	r9,r9,-257
 8007b08:	0086303a 	nor	r3,zero,r2
 8007b0c:	02202074 	movhi	r8,32897
 8007b10:	1245883a 	add	r2,r2,r9
 8007b14:	42202004 	addi	r8,r8,-32640
 8007b18:	10c4703a 	and	r2,r2,r3
 8007b1c:	1204703a 	and	r2,r2,r8
 8007b20:	10000226 	beq	r2,zero,8007b2c <strcmp+0x44>
 8007b24:	00002306 	br	8007bb4 <strcmp+0xcc>
 8007b28:	1000221e 	bne	r2,zero,8007bb4 <strcmp+0xcc>
 8007b2c:	21000104 	addi	r4,r4,4
 8007b30:	20c00017 	ldw	r3,0(r4)
 8007b34:	29400104 	addi	r5,r5,4
 8007b38:	29800017 	ldw	r6,0(r5)
 8007b3c:	1a4f883a 	add	r7,r3,r9
 8007b40:	00c4303a 	nor	r2,zero,r3
 8007b44:	3884703a 	and	r2,r7,r2
 8007b48:	1204703a 	and	r2,r2,r8
 8007b4c:	19bff626 	beq	r3,r6,8007b28 <__alt_data_end+0xff007b28>
 8007b50:	20800003 	ldbu	r2,0(r4)
 8007b54:	10c03fcc 	andi	r3,r2,255
 8007b58:	18c0201c 	xori	r3,r3,128
 8007b5c:	18ffe004 	addi	r3,r3,-128
 8007b60:	18000c26 	beq	r3,zero,8007b94 <strcmp+0xac>
 8007b64:	29800007 	ldb	r6,0(r5)
 8007b68:	19800326 	beq	r3,r6,8007b78 <strcmp+0x90>
 8007b6c:	00001306 	br	8007bbc <strcmp+0xd4>
 8007b70:	29800007 	ldb	r6,0(r5)
 8007b74:	11800b1e 	bne	r2,r6,8007ba4 <strcmp+0xbc>
 8007b78:	21000044 	addi	r4,r4,1
 8007b7c:	20c00003 	ldbu	r3,0(r4)
 8007b80:	29400044 	addi	r5,r5,1
 8007b84:	18803fcc 	andi	r2,r3,255
 8007b88:	1080201c 	xori	r2,r2,128
 8007b8c:	10bfe004 	addi	r2,r2,-128
 8007b90:	103ff71e 	bne	r2,zero,8007b70 <__alt_data_end+0xff007b70>
 8007b94:	0007883a 	mov	r3,zero
 8007b98:	28800003 	ldbu	r2,0(r5)
 8007b9c:	1885c83a 	sub	r2,r3,r2
 8007ba0:	f800283a 	ret
 8007ba4:	28800003 	ldbu	r2,0(r5)
 8007ba8:	18c03fcc 	andi	r3,r3,255
 8007bac:	1885c83a 	sub	r2,r3,r2
 8007bb0:	f800283a 	ret
 8007bb4:	0005883a 	mov	r2,zero
 8007bb8:	f800283a 	ret
 8007bbc:	10c03fcc 	andi	r3,r2,255
 8007bc0:	003ff506 	br	8007b98 <__alt_data_end+0xff007b98>

08007bc4 <__sprint_r.part.0>:
 8007bc4:	28801917 	ldw	r2,100(r5)
 8007bc8:	defff604 	addi	sp,sp,-40
 8007bcc:	dd400515 	stw	r21,20(sp)
 8007bd0:	dfc00915 	stw	ra,36(sp)
 8007bd4:	df000815 	stw	fp,32(sp)
 8007bd8:	ddc00715 	stw	r23,28(sp)
 8007bdc:	dd800615 	stw	r22,24(sp)
 8007be0:	dd000415 	stw	r20,16(sp)
 8007be4:	dcc00315 	stw	r19,12(sp)
 8007be8:	dc800215 	stw	r18,8(sp)
 8007bec:	dc400115 	stw	r17,4(sp)
 8007bf0:	dc000015 	stw	r16,0(sp)
 8007bf4:	1088000c 	andi	r2,r2,8192
 8007bf8:	302b883a 	mov	r21,r6
 8007bfc:	10002e26 	beq	r2,zero,8007cb8 <__sprint_r.part.0+0xf4>
 8007c00:	30800217 	ldw	r2,8(r6)
 8007c04:	35800017 	ldw	r22,0(r6)
 8007c08:	10002926 	beq	r2,zero,8007cb0 <__sprint_r.part.0+0xec>
 8007c0c:	2827883a 	mov	r19,r5
 8007c10:	2029883a 	mov	r20,r4
 8007c14:	b5c00104 	addi	r23,r22,4
 8007c18:	04bfffc4 	movi	r18,-1
 8007c1c:	bc400017 	ldw	r17,0(r23)
 8007c20:	b4000017 	ldw	r16,0(r22)
 8007c24:	0039883a 	mov	fp,zero
 8007c28:	8822d0ba 	srli	r17,r17,2
 8007c2c:	8800031e 	bne	r17,zero,8007c3c <__sprint_r.part.0+0x78>
 8007c30:	00001806 	br	8007c94 <__sprint_r.part.0+0xd0>
 8007c34:	84000104 	addi	r16,r16,4
 8007c38:	8f001526 	beq	r17,fp,8007c90 <__sprint_r.part.0+0xcc>
 8007c3c:	81400017 	ldw	r5,0(r16)
 8007c40:	980d883a 	mov	r6,r19
 8007c44:	a009883a 	mov	r4,r20
 8007c48:	80095ec0 	call	80095ec <_fputwc_r>
 8007c4c:	e7000044 	addi	fp,fp,1
 8007c50:	14bff81e 	bne	r2,r18,8007c34 <__alt_data_end+0xff007c34>
 8007c54:	9005883a 	mov	r2,r18
 8007c58:	a8000215 	stw	zero,8(r21)
 8007c5c:	a8000115 	stw	zero,4(r21)
 8007c60:	dfc00917 	ldw	ra,36(sp)
 8007c64:	df000817 	ldw	fp,32(sp)
 8007c68:	ddc00717 	ldw	r23,28(sp)
 8007c6c:	dd800617 	ldw	r22,24(sp)
 8007c70:	dd400517 	ldw	r21,20(sp)
 8007c74:	dd000417 	ldw	r20,16(sp)
 8007c78:	dcc00317 	ldw	r19,12(sp)
 8007c7c:	dc800217 	ldw	r18,8(sp)
 8007c80:	dc400117 	ldw	r17,4(sp)
 8007c84:	dc000017 	ldw	r16,0(sp)
 8007c88:	dec00a04 	addi	sp,sp,40
 8007c8c:	f800283a 	ret
 8007c90:	a8800217 	ldw	r2,8(r21)
 8007c94:	8c63883a 	add	r17,r17,r17
 8007c98:	8c63883a 	add	r17,r17,r17
 8007c9c:	1445c83a 	sub	r2,r2,r17
 8007ca0:	a8800215 	stw	r2,8(r21)
 8007ca4:	b5800204 	addi	r22,r22,8
 8007ca8:	bdc00204 	addi	r23,r23,8
 8007cac:	103fdb1e 	bne	r2,zero,8007c1c <__alt_data_end+0xff007c1c>
 8007cb0:	0005883a 	mov	r2,zero
 8007cb4:	003fe806 	br	8007c58 <__alt_data_end+0xff007c58>
 8007cb8:	8004dec0 	call	8004dec <__sfvwrite_r>
 8007cbc:	003fe606 	br	8007c58 <__alt_data_end+0xff007c58>

08007cc0 <__sprint_r>:
 8007cc0:	30c00217 	ldw	r3,8(r6)
 8007cc4:	18000126 	beq	r3,zero,8007ccc <__sprint_r+0xc>
 8007cc8:	8007bc41 	jmpi	8007bc4 <__sprint_r.part.0>
 8007ccc:	30000115 	stw	zero,4(r6)
 8007cd0:	0005883a 	mov	r2,zero
 8007cd4:	f800283a 	ret

08007cd8 <___vfiprintf_internal_r>:
 8007cd8:	deffc904 	addi	sp,sp,-220
 8007cdc:	df003515 	stw	fp,212(sp)
 8007ce0:	dd003115 	stw	r20,196(sp)
 8007ce4:	dfc03615 	stw	ra,216(sp)
 8007ce8:	ddc03415 	stw	r23,208(sp)
 8007cec:	dd803315 	stw	r22,204(sp)
 8007cf0:	dd403215 	stw	r21,200(sp)
 8007cf4:	dcc03015 	stw	r19,192(sp)
 8007cf8:	dc802f15 	stw	r18,188(sp)
 8007cfc:	dc402e15 	stw	r17,184(sp)
 8007d00:	dc002d15 	stw	r16,180(sp)
 8007d04:	d9002015 	stw	r4,128(sp)
 8007d08:	d9c02215 	stw	r7,136(sp)
 8007d0c:	2829883a 	mov	r20,r5
 8007d10:	3039883a 	mov	fp,r6
 8007d14:	20000226 	beq	r4,zero,8007d20 <___vfiprintf_internal_r+0x48>
 8007d18:	20800e17 	ldw	r2,56(r4)
 8007d1c:	1000cf26 	beq	r2,zero,800805c <___vfiprintf_internal_r+0x384>
 8007d20:	a080030b 	ldhu	r2,12(r20)
 8007d24:	10c8000c 	andi	r3,r2,8192
 8007d28:	1800061e 	bne	r3,zero,8007d44 <___vfiprintf_internal_r+0x6c>
 8007d2c:	a1001917 	ldw	r4,100(r20)
 8007d30:	00f7ffc4 	movi	r3,-8193
 8007d34:	10880014 	ori	r2,r2,8192
 8007d38:	20c6703a 	and	r3,r4,r3
 8007d3c:	a080030d 	sth	r2,12(r20)
 8007d40:	a0c01915 	stw	r3,100(r20)
 8007d44:	10c0020c 	andi	r3,r2,8
 8007d48:	1800a926 	beq	r3,zero,8007ff0 <___vfiprintf_internal_r+0x318>
 8007d4c:	a0c00417 	ldw	r3,16(r20)
 8007d50:	1800a726 	beq	r3,zero,8007ff0 <___vfiprintf_internal_r+0x318>
 8007d54:	1080068c 	andi	r2,r2,26
 8007d58:	00c00284 	movi	r3,10
 8007d5c:	10c0ac26 	beq	r2,r3,8008010 <___vfiprintf_internal_r+0x338>
 8007d60:	da801a04 	addi	r10,sp,104
 8007d64:	da801e15 	stw	r10,120(sp)
 8007d68:	d8801e17 	ldw	r2,120(sp)
 8007d6c:	da8019c4 	addi	r10,sp,103
 8007d70:	05820074 	movhi	r22,2049
 8007d74:	05c20074 	movhi	r23,2049
 8007d78:	da801f15 	stw	r10,124(sp)
 8007d7c:	1295c83a 	sub	r10,r2,r10
 8007d80:	b5865304 	addi	r22,r22,6476
 8007d84:	bdc64f04 	addi	r23,r23,6460
 8007d88:	dec01a15 	stw	sp,104(sp)
 8007d8c:	d8001c15 	stw	zero,112(sp)
 8007d90:	d8001b15 	stw	zero,108(sp)
 8007d94:	d8002615 	stw	zero,152(sp)
 8007d98:	d8002315 	stw	zero,140(sp)
 8007d9c:	da802715 	stw	r10,156(sp)
 8007da0:	d811883a 	mov	r8,sp
 8007da4:	dd002115 	stw	r20,132(sp)
 8007da8:	e021883a 	mov	r16,fp
 8007dac:	80800007 	ldb	r2,0(r16)
 8007db0:	1003ea26 	beq	r2,zero,8008d5c <___vfiprintf_internal_r+0x1084>
 8007db4:	00c00944 	movi	r3,37
 8007db8:	8025883a 	mov	r18,r16
 8007dbc:	10c0021e 	bne	r2,r3,8007dc8 <___vfiprintf_internal_r+0xf0>
 8007dc0:	00001606 	br	8007e1c <___vfiprintf_internal_r+0x144>
 8007dc4:	10c00326 	beq	r2,r3,8007dd4 <___vfiprintf_internal_r+0xfc>
 8007dc8:	94800044 	addi	r18,r18,1
 8007dcc:	90800007 	ldb	r2,0(r18)
 8007dd0:	103ffc1e 	bne	r2,zero,8007dc4 <__alt_data_end+0xff007dc4>
 8007dd4:	9423c83a 	sub	r17,r18,r16
 8007dd8:	88001026 	beq	r17,zero,8007e1c <___vfiprintf_internal_r+0x144>
 8007ddc:	d8c01c17 	ldw	r3,112(sp)
 8007de0:	d8801b17 	ldw	r2,108(sp)
 8007de4:	44000015 	stw	r16,0(r8)
 8007de8:	88c7883a 	add	r3,r17,r3
 8007dec:	10800044 	addi	r2,r2,1
 8007df0:	44400115 	stw	r17,4(r8)
 8007df4:	d8c01c15 	stw	r3,112(sp)
 8007df8:	d8801b15 	stw	r2,108(sp)
 8007dfc:	010001c4 	movi	r4,7
 8007e00:	2080760e 	bge	r4,r2,8007fdc <___vfiprintf_internal_r+0x304>
 8007e04:	1803821e 	bne	r3,zero,8008c10 <___vfiprintf_internal_r+0xf38>
 8007e08:	da802317 	ldw	r10,140(sp)
 8007e0c:	d8001b15 	stw	zero,108(sp)
 8007e10:	d811883a 	mov	r8,sp
 8007e14:	5455883a 	add	r10,r10,r17
 8007e18:	da802315 	stw	r10,140(sp)
 8007e1c:	90800007 	ldb	r2,0(r18)
 8007e20:	10044626 	beq	r2,zero,8008f3c <___vfiprintf_internal_r+0x1264>
 8007e24:	90c00047 	ldb	r3,1(r18)
 8007e28:	94000044 	addi	r16,r18,1
 8007e2c:	d8001d85 	stb	zero,118(sp)
 8007e30:	0009883a 	mov	r4,zero
 8007e34:	000f883a 	mov	r7,zero
 8007e38:	027fffc4 	movi	r9,-1
 8007e3c:	0023883a 	mov	r17,zero
 8007e40:	0029883a 	mov	r20,zero
 8007e44:	01401604 	movi	r5,88
 8007e48:	01800244 	movi	r6,9
 8007e4c:	03400a84 	movi	r13,42
 8007e50:	03001b04 	movi	r12,108
 8007e54:	84000044 	addi	r16,r16,1
 8007e58:	18bff804 	addi	r2,r3,-32
 8007e5c:	28827336 	bltu	r5,r2,800882c <___vfiprintf_internal_r+0xb54>
 8007e60:	100490ba 	slli	r2,r2,2
 8007e64:	02820034 	movhi	r10,2048
 8007e68:	529f9e04 	addi	r10,r10,32376
 8007e6c:	1285883a 	add	r2,r2,r10
 8007e70:	10800017 	ldw	r2,0(r2)
 8007e74:	1000683a 	jmp	r2
 8007e78:	08008560 	cmpeqi	zero,at,533
 8007e7c:	0800882c 	andhi	zero,at,544
 8007e80:	0800882c 	andhi	zero,at,544
 8007e84:	08008580 	call	800858 <__alt_mem_onchip_memory2_0+0x800858>
 8007e88:	0800882c 	andhi	zero,at,544
 8007e8c:	0800882c 	andhi	zero,at,544
 8007e90:	0800882c 	andhi	zero,at,544
 8007e94:	0800882c 	andhi	zero,at,544
 8007e98:	0800882c 	andhi	zero,at,544
 8007e9c:	0800882c 	andhi	zero,at,544
 8007ea0:	08008768 	cmpgeui	zero,at,541
 8007ea4:	08008784 	addi	zero,at,542
 8007ea8:	0800882c 	andhi	zero,at,544
 8007eac:	0800806c 	andhi	zero,at,513
 8007eb0:	08008794 	ori	zero,at,542
 8007eb4:	0800882c 	andhi	zero,at,544
 8007eb8:	0800858c 	andi	zero,at,534
 8007ebc:	08008598 	cmpnei	zero,at,534
 8007ec0:	08008598 	cmpnei	zero,at,534
 8007ec4:	08008598 	cmpnei	zero,at,534
 8007ec8:	08008598 	cmpnei	zero,at,534
 8007ecc:	08008598 	cmpnei	zero,at,534
 8007ed0:	08008598 	cmpnei	zero,at,534
 8007ed4:	08008598 	cmpnei	zero,at,534
 8007ed8:	08008598 	cmpnei	zero,at,534
 8007edc:	08008598 	cmpnei	zero,at,534
 8007ee0:	0800882c 	andhi	zero,at,544
 8007ee4:	0800882c 	andhi	zero,at,544
 8007ee8:	0800882c 	andhi	zero,at,544
 8007eec:	0800882c 	andhi	zero,at,544
 8007ef0:	0800882c 	andhi	zero,at,544
 8007ef4:	0800882c 	andhi	zero,at,544
 8007ef8:	0800882c 	andhi	zero,at,544
 8007efc:	0800882c 	andhi	zero,at,544
 8007f00:	0800882c 	andhi	zero,at,544
 8007f04:	0800882c 	andhi	zero,at,544
 8007f08:	080085c4 	addi	zero,at,535
 8007f0c:	0800882c 	andhi	zero,at,544
 8007f10:	0800882c 	andhi	zero,at,544
 8007f14:	0800882c 	andhi	zero,at,544
 8007f18:	0800882c 	andhi	zero,at,544
 8007f1c:	0800882c 	andhi	zero,at,544
 8007f20:	0800882c 	andhi	zero,at,544
 8007f24:	0800882c 	andhi	zero,at,544
 8007f28:	0800882c 	andhi	zero,at,544
 8007f2c:	0800882c 	andhi	zero,at,544
 8007f30:	0800882c 	andhi	zero,at,544
 8007f34:	080085fc 	xorhi	zero,at,535
 8007f38:	0800882c 	andhi	zero,at,544
 8007f3c:	0800882c 	andhi	zero,at,544
 8007f40:	0800882c 	andhi	zero,at,544
 8007f44:	0800882c 	andhi	zero,at,544
 8007f48:	0800882c 	andhi	zero,at,544
 8007f4c:	08008654 	ori	zero,at,537
 8007f50:	0800882c 	andhi	zero,at,544
 8007f54:	0800882c 	andhi	zero,at,544
 8007f58:	080086c4 	addi	zero,at,539
 8007f5c:	0800882c 	andhi	zero,at,544
 8007f60:	0800882c 	andhi	zero,at,544
 8007f64:	0800882c 	andhi	zero,at,544
 8007f68:	0800882c 	andhi	zero,at,544
 8007f6c:	0800882c 	andhi	zero,at,544
 8007f70:	0800882c 	andhi	zero,at,544
 8007f74:	0800882c 	andhi	zero,at,544
 8007f78:	0800882c 	andhi	zero,at,544
 8007f7c:	0800882c 	andhi	zero,at,544
 8007f80:	0800882c 	andhi	zero,at,544
 8007f84:	08008470 	cmpltui	zero,at,529
 8007f88:	0800849c 	xori	zero,at,530
 8007f8c:	0800882c 	andhi	zero,at,544
 8007f90:	0800882c 	andhi	zero,at,544
 8007f94:	0800882c 	andhi	zero,at,544
 8007f98:	080087d4 	ori	zero,at,543
 8007f9c:	0800849c 	xori	zero,at,530
 8007fa0:	0800882c 	andhi	zero,at,544
 8007fa4:	0800882c 	andhi	zero,at,544
 8007fa8:	08008330 	cmpltui	zero,at,524
 8007fac:	0800882c 	andhi	zero,at,544
 8007fb0:	08008340 	call	800834 <__alt_mem_onchip_memory2_0+0x800834>
 8007fb4:	0800837c 	xorhi	zero,at,525
 8007fb8:	08008078 	rdprs	zero,at,513
 8007fbc:	08008324 	muli	zero,at,524
 8007fc0:	0800882c 	andhi	zero,at,544
 8007fc4:	08008700 	call	800870 <__alt_mem_onchip_memory2_0+0x800870>
 8007fc8:	0800882c 	andhi	zero,at,544
 8007fcc:	08008758 	cmpnei	zero,at,541
 8007fd0:	0800882c 	andhi	zero,at,544
 8007fd4:	0800882c 	andhi	zero,at,544
 8007fd8:	0800841c 	xori	zero,at,528
 8007fdc:	42000204 	addi	r8,r8,8
 8007fe0:	da802317 	ldw	r10,140(sp)
 8007fe4:	5455883a 	add	r10,r10,r17
 8007fe8:	da802315 	stw	r10,140(sp)
 8007fec:	003f8b06 	br	8007e1c <__alt_data_end+0xff007e1c>
 8007ff0:	d9002017 	ldw	r4,128(sp)
 8007ff4:	a00b883a 	mov	r5,r20
 8007ff8:	80029940 	call	8002994 <__swsetup_r>
 8007ffc:	1003b11e 	bne	r2,zero,8008ec4 <___vfiprintf_internal_r+0x11ec>
 8008000:	a080030b 	ldhu	r2,12(r20)
 8008004:	00c00284 	movi	r3,10
 8008008:	1080068c 	andi	r2,r2,26
 800800c:	10ff541e 	bne	r2,r3,8007d60 <__alt_data_end+0xff007d60>
 8008010:	a080038f 	ldh	r2,14(r20)
 8008014:	103f5216 	blt	r2,zero,8007d60 <__alt_data_end+0xff007d60>
 8008018:	d9c02217 	ldw	r7,136(sp)
 800801c:	d9002017 	ldw	r4,128(sp)
 8008020:	e00d883a 	mov	r6,fp
 8008024:	a00b883a 	mov	r5,r20
 8008028:	80091500 	call	8009150 <__sbprintf>
 800802c:	dfc03617 	ldw	ra,216(sp)
 8008030:	df003517 	ldw	fp,212(sp)
 8008034:	ddc03417 	ldw	r23,208(sp)
 8008038:	dd803317 	ldw	r22,204(sp)
 800803c:	dd403217 	ldw	r21,200(sp)
 8008040:	dd003117 	ldw	r20,196(sp)
 8008044:	dcc03017 	ldw	r19,192(sp)
 8008048:	dc802f17 	ldw	r18,188(sp)
 800804c:	dc402e17 	ldw	r17,184(sp)
 8008050:	dc002d17 	ldw	r16,180(sp)
 8008054:	dec03704 	addi	sp,sp,220
 8008058:	f800283a 	ret
 800805c:	80049680 	call	8004968 <__sinit>
 8008060:	003f2f06 	br	8007d20 <__alt_data_end+0xff007d20>
 8008064:	0463c83a 	sub	r17,zero,r17
 8008068:	d8802215 	stw	r2,136(sp)
 800806c:	a5000114 	ori	r20,r20,4
 8008070:	80c00007 	ldb	r3,0(r16)
 8008074:	003f7706 	br	8007e54 <__alt_data_end+0xff007e54>
 8008078:	00800c04 	movi	r2,48
 800807c:	da802217 	ldw	r10,136(sp)
 8008080:	d8801d05 	stb	r2,116(sp)
 8008084:	00801e04 	movi	r2,120
 8008088:	d8801d45 	stb	r2,117(sp)
 800808c:	d8001d85 	stb	zero,118(sp)
 8008090:	50c00104 	addi	r3,r10,4
 8008094:	54800017 	ldw	r18,0(r10)
 8008098:	0027883a 	mov	r19,zero
 800809c:	a0800094 	ori	r2,r20,2
 80080a0:	48030b16 	blt	r9,zero,8008cd0 <___vfiprintf_internal_r+0xff8>
 80080a4:	00bfdfc4 	movi	r2,-129
 80080a8:	a096703a 	and	r11,r20,r2
 80080ac:	d8c02215 	stw	r3,136(sp)
 80080b0:	5d000094 	ori	r20,r11,2
 80080b4:	90032b1e 	bne	r18,zero,8008d64 <___vfiprintf_internal_r+0x108c>
 80080b8:	00820074 	movhi	r2,2049
 80080bc:	1085ee04 	addi	r2,r2,6072
 80080c0:	d8802615 	stw	r2,152(sp)
 80080c4:	0039883a 	mov	fp,zero
 80080c8:	48017b1e 	bne	r9,zero,80086b8 <___vfiprintf_internal_r+0x9e0>
 80080cc:	0013883a 	mov	r9,zero
 80080d0:	0027883a 	mov	r19,zero
 80080d4:	dd401a04 	addi	r21,sp,104
 80080d8:	4825883a 	mov	r18,r9
 80080dc:	4cc0010e 	bge	r9,r19,80080e4 <___vfiprintf_internal_r+0x40c>
 80080e0:	9825883a 	mov	r18,r19
 80080e4:	e7003fcc 	andi	fp,fp,255
 80080e8:	e700201c 	xori	fp,fp,128
 80080ec:	e73fe004 	addi	fp,fp,-128
 80080f0:	e0000126 	beq	fp,zero,80080f8 <___vfiprintf_internal_r+0x420>
 80080f4:	94800044 	addi	r18,r18,1
 80080f8:	a380008c 	andi	r14,r20,2
 80080fc:	70000126 	beq	r14,zero,8008104 <___vfiprintf_internal_r+0x42c>
 8008100:	94800084 	addi	r18,r18,2
 8008104:	a700210c 	andi	fp,r20,132
 8008108:	e001df1e 	bne	fp,zero,8008888 <___vfiprintf_internal_r+0xbb0>
 800810c:	8c87c83a 	sub	r3,r17,r18
 8008110:	00c1dd0e 	bge	zero,r3,8008888 <___vfiprintf_internal_r+0xbb0>
 8008114:	01c00404 	movi	r7,16
 8008118:	d8801c17 	ldw	r2,112(sp)
 800811c:	38c3ad0e 	bge	r7,r3,8008fd4 <___vfiprintf_internal_r+0x12fc>
 8008120:	02820074 	movhi	r10,2049
 8008124:	52865304 	addi	r10,r10,6476
 8008128:	dc002915 	stw	r16,164(sp)
 800812c:	d9801b17 	ldw	r6,108(sp)
 8008130:	da802415 	stw	r10,144(sp)
 8008134:	03c001c4 	movi	r15,7
 8008138:	da402515 	stw	r9,148(sp)
 800813c:	db802815 	stw	r14,160(sp)
 8008140:	1821883a 	mov	r16,r3
 8008144:	00000506 	br	800815c <___vfiprintf_internal_r+0x484>
 8008148:	31400084 	addi	r5,r6,2
 800814c:	42000204 	addi	r8,r8,8
 8008150:	200d883a 	mov	r6,r4
 8008154:	843ffc04 	addi	r16,r16,-16
 8008158:	3c000d0e 	bge	r7,r16,8008190 <___vfiprintf_internal_r+0x4b8>
 800815c:	10800404 	addi	r2,r2,16
 8008160:	31000044 	addi	r4,r6,1
 8008164:	45800015 	stw	r22,0(r8)
 8008168:	41c00115 	stw	r7,4(r8)
 800816c:	d8801c15 	stw	r2,112(sp)
 8008170:	d9001b15 	stw	r4,108(sp)
 8008174:	793ff40e 	bge	r15,r4,8008148 <__alt_data_end+0xff008148>
 8008178:	1001b51e 	bne	r2,zero,8008850 <___vfiprintf_internal_r+0xb78>
 800817c:	843ffc04 	addi	r16,r16,-16
 8008180:	000d883a 	mov	r6,zero
 8008184:	01400044 	movi	r5,1
 8008188:	d811883a 	mov	r8,sp
 800818c:	3c3ff316 	blt	r7,r16,800815c <__alt_data_end+0xff00815c>
 8008190:	8007883a 	mov	r3,r16
 8008194:	da402517 	ldw	r9,148(sp)
 8008198:	db802817 	ldw	r14,160(sp)
 800819c:	dc002917 	ldw	r16,164(sp)
 80081a0:	da802417 	ldw	r10,144(sp)
 80081a4:	1885883a 	add	r2,r3,r2
 80081a8:	40c00115 	stw	r3,4(r8)
 80081ac:	42800015 	stw	r10,0(r8)
 80081b0:	d8801c15 	stw	r2,112(sp)
 80081b4:	d9401b15 	stw	r5,108(sp)
 80081b8:	00c001c4 	movi	r3,7
 80081bc:	19426016 	blt	r3,r5,8008b40 <___vfiprintf_internal_r+0xe68>
 80081c0:	d8c01d87 	ldb	r3,118(sp)
 80081c4:	42000204 	addi	r8,r8,8
 80081c8:	29000044 	addi	r4,r5,1
 80081cc:	1801b31e 	bne	r3,zero,800889c <___vfiprintf_internal_r+0xbc4>
 80081d0:	7001c026 	beq	r14,zero,80088d4 <___vfiprintf_internal_r+0xbfc>
 80081d4:	d8c01d04 	addi	r3,sp,116
 80081d8:	10800084 	addi	r2,r2,2
 80081dc:	40c00015 	stw	r3,0(r8)
 80081e0:	00c00084 	movi	r3,2
 80081e4:	40c00115 	stw	r3,4(r8)
 80081e8:	d8801c15 	stw	r2,112(sp)
 80081ec:	d9001b15 	stw	r4,108(sp)
 80081f0:	00c001c4 	movi	r3,7
 80081f4:	1902650e 	bge	r3,r4,8008b8c <___vfiprintf_internal_r+0xeb4>
 80081f8:	10029a1e 	bne	r2,zero,8008c64 <___vfiprintf_internal_r+0xf8c>
 80081fc:	00c02004 	movi	r3,128
 8008200:	01000044 	movi	r4,1
 8008204:	000b883a 	mov	r5,zero
 8008208:	d811883a 	mov	r8,sp
 800820c:	e0c1b31e 	bne	fp,r3,80088dc <___vfiprintf_internal_r+0xc04>
 8008210:	8cb9c83a 	sub	fp,r17,r18
 8008214:	0701b10e 	bge	zero,fp,80088dc <___vfiprintf_internal_r+0xc04>
 8008218:	01c00404 	movi	r7,16
 800821c:	3f03890e 	bge	r7,fp,8009044 <___vfiprintf_internal_r+0x136c>
 8008220:	00c20074 	movhi	r3,2049
 8008224:	18c64f04 	addi	r3,r3,6460
 8008228:	d8c02415 	stw	r3,144(sp)
 800822c:	8007883a 	mov	r3,r16
 8008230:	034001c4 	movi	r13,7
 8008234:	e021883a 	mov	r16,fp
 8008238:	da402515 	stw	r9,148(sp)
 800823c:	1839883a 	mov	fp,r3
 8008240:	00000506 	br	8008258 <___vfiprintf_internal_r+0x580>
 8008244:	29800084 	addi	r6,r5,2
 8008248:	42000204 	addi	r8,r8,8
 800824c:	180b883a 	mov	r5,r3
 8008250:	843ffc04 	addi	r16,r16,-16
 8008254:	3c000d0e 	bge	r7,r16,800828c <___vfiprintf_internal_r+0x5b4>
 8008258:	10800404 	addi	r2,r2,16
 800825c:	28c00044 	addi	r3,r5,1
 8008260:	45c00015 	stw	r23,0(r8)
 8008264:	41c00115 	stw	r7,4(r8)
 8008268:	d8801c15 	stw	r2,112(sp)
 800826c:	d8c01b15 	stw	r3,108(sp)
 8008270:	68fff40e 	bge	r13,r3,8008244 <__alt_data_end+0xff008244>
 8008274:	1002241e 	bne	r2,zero,8008b08 <___vfiprintf_internal_r+0xe30>
 8008278:	843ffc04 	addi	r16,r16,-16
 800827c:	01800044 	movi	r6,1
 8008280:	000b883a 	mov	r5,zero
 8008284:	d811883a 	mov	r8,sp
 8008288:	3c3ff316 	blt	r7,r16,8008258 <__alt_data_end+0xff008258>
 800828c:	da402517 	ldw	r9,148(sp)
 8008290:	e007883a 	mov	r3,fp
 8008294:	8039883a 	mov	fp,r16
 8008298:	1821883a 	mov	r16,r3
 800829c:	d8c02417 	ldw	r3,144(sp)
 80082a0:	1705883a 	add	r2,r2,fp
 80082a4:	47000115 	stw	fp,4(r8)
 80082a8:	40c00015 	stw	r3,0(r8)
 80082ac:	d8801c15 	stw	r2,112(sp)
 80082b0:	d9801b15 	stw	r6,108(sp)
 80082b4:	00c001c4 	movi	r3,7
 80082b8:	19827616 	blt	r3,r6,8008c94 <___vfiprintf_internal_r+0xfbc>
 80082bc:	4cf9c83a 	sub	fp,r9,r19
 80082c0:	42000204 	addi	r8,r8,8
 80082c4:	31000044 	addi	r4,r6,1
 80082c8:	300b883a 	mov	r5,r6
 80082cc:	07018516 	blt	zero,fp,80088e4 <___vfiprintf_internal_r+0xc0c>
 80082d0:	9885883a 	add	r2,r19,r2
 80082d4:	45400015 	stw	r21,0(r8)
 80082d8:	44c00115 	stw	r19,4(r8)
 80082dc:	d8801c15 	stw	r2,112(sp)
 80082e0:	d9001b15 	stw	r4,108(sp)
 80082e4:	00c001c4 	movi	r3,7
 80082e8:	1901dd0e 	bge	r3,r4,8008a60 <___vfiprintf_internal_r+0xd88>
 80082ec:	1002401e 	bne	r2,zero,8008bf0 <___vfiprintf_internal_r+0xf18>
 80082f0:	d8001b15 	stw	zero,108(sp)
 80082f4:	a2c0010c 	andi	r11,r20,4
 80082f8:	58000226 	beq	r11,zero,8008304 <___vfiprintf_internal_r+0x62c>
 80082fc:	8ca7c83a 	sub	r19,r17,r18
 8008300:	04c2f216 	blt	zero,r19,8008ecc <___vfiprintf_internal_r+0x11f4>
 8008304:	8c80010e 	bge	r17,r18,800830c <___vfiprintf_internal_r+0x634>
 8008308:	9023883a 	mov	r17,r18
 800830c:	da802317 	ldw	r10,140(sp)
 8008310:	5455883a 	add	r10,r10,r17
 8008314:	da802315 	stw	r10,140(sp)
 8008318:	d8001b15 	stw	zero,108(sp)
 800831c:	d811883a 	mov	r8,sp
 8008320:	003ea206 	br	8007dac <__alt_data_end+0xff007dac>
 8008324:	a5000814 	ori	r20,r20,32
 8008328:	80c00007 	ldb	r3,0(r16)
 800832c:	003ec906 	br	8007e54 <__alt_data_end+0xff007e54>
 8008330:	80c00007 	ldb	r3,0(r16)
 8008334:	1b030926 	beq	r3,r12,8008f5c <___vfiprintf_internal_r+0x1284>
 8008338:	a5000414 	ori	r20,r20,16
 800833c:	003ec506 	br	8007e54 <__alt_data_end+0xff007e54>
 8008340:	21003fcc 	andi	r4,r4,255
 8008344:	20035e1e 	bne	r4,zero,80090c0 <___vfiprintf_internal_r+0x13e8>
 8008348:	a080080c 	andi	r2,r20,32
 800834c:	1002a526 	beq	r2,zero,8008de4 <___vfiprintf_internal_r+0x110c>
 8008350:	da802217 	ldw	r10,136(sp)
 8008354:	50800017 	ldw	r2,0(r10)
 8008358:	da802317 	ldw	r10,140(sp)
 800835c:	5007d7fa 	srai	r3,r10,31
 8008360:	da802217 	ldw	r10,136(sp)
 8008364:	10c00115 	stw	r3,4(r2)
 8008368:	52800104 	addi	r10,r10,4
 800836c:	da802215 	stw	r10,136(sp)
 8008370:	da802317 	ldw	r10,140(sp)
 8008374:	12800015 	stw	r10,0(r2)
 8008378:	003e8c06 	br	8007dac <__alt_data_end+0xff007dac>
 800837c:	21003fcc 	andi	r4,r4,255
 8008380:	2003511e 	bne	r4,zero,80090c8 <___vfiprintf_internal_r+0x13f0>
 8008384:	a080080c 	andi	r2,r20,32
 8008388:	1000a126 	beq	r2,zero,8008610 <___vfiprintf_internal_r+0x938>
 800838c:	da802217 	ldw	r10,136(sp)
 8008390:	d8001d85 	stb	zero,118(sp)
 8008394:	50800204 	addi	r2,r10,8
 8008398:	54800017 	ldw	r18,0(r10)
 800839c:	54c00117 	ldw	r19,4(r10)
 80083a0:	4802b416 	blt	r9,zero,8008e74 <___vfiprintf_internal_r+0x119c>
 80083a4:	013fdfc4 	movi	r4,-129
 80083a8:	94c6b03a 	or	r3,r18,r19
 80083ac:	d8802215 	stw	r2,136(sp)
 80083b0:	a128703a 	and	r20,r20,r4
 80083b4:	1800a226 	beq	r3,zero,8008640 <___vfiprintf_internal_r+0x968>
 80083b8:	0039883a 	mov	fp,zero
 80083bc:	dd401a04 	addi	r21,sp,104
 80083c0:	9006d0fa 	srli	r3,r18,3
 80083c4:	9808977a 	slli	r4,r19,29
 80083c8:	9826d0fa 	srli	r19,r19,3
 80083cc:	948001cc 	andi	r18,r18,7
 80083d0:	90800c04 	addi	r2,r18,48
 80083d4:	ad7fffc4 	addi	r21,r21,-1
 80083d8:	20e4b03a 	or	r18,r4,r3
 80083dc:	a8800005 	stb	r2,0(r21)
 80083e0:	94c6b03a 	or	r3,r18,r19
 80083e4:	183ff61e 	bne	r3,zero,80083c0 <__alt_data_end+0xff0083c0>
 80083e8:	a0c0004c 	andi	r3,r20,1
 80083ec:	18005926 	beq	r3,zero,8008554 <___vfiprintf_internal_r+0x87c>
 80083f0:	10803fcc 	andi	r2,r2,255
 80083f4:	1080201c 	xori	r2,r2,128
 80083f8:	10bfe004 	addi	r2,r2,-128
 80083fc:	00c00c04 	movi	r3,48
 8008400:	10c05426 	beq	r2,r3,8008554 <___vfiprintf_internal_r+0x87c>
 8008404:	da801e17 	ldw	r10,120(sp)
 8008408:	a8bfffc4 	addi	r2,r21,-1
 800840c:	a8ffffc5 	stb	r3,-1(r21)
 8008410:	50a7c83a 	sub	r19,r10,r2
 8008414:	102b883a 	mov	r21,r2
 8008418:	003f2f06 	br	80080d8 <__alt_data_end+0xff0080d8>
 800841c:	21003fcc 	andi	r4,r4,255
 8008420:	2003421e 	bne	r4,zero,800912c <___vfiprintf_internal_r+0x1454>
 8008424:	00820074 	movhi	r2,2049
 8008428:	1085ee04 	addi	r2,r2,6072
 800842c:	d8802615 	stw	r2,152(sp)
 8008430:	a080080c 	andi	r2,r20,32
 8008434:	1000aa26 	beq	r2,zero,80086e0 <___vfiprintf_internal_r+0xa08>
 8008438:	da802217 	ldw	r10,136(sp)
 800843c:	54800017 	ldw	r18,0(r10)
 8008440:	54c00117 	ldw	r19,4(r10)
 8008444:	52800204 	addi	r10,r10,8
 8008448:	da802215 	stw	r10,136(sp)
 800844c:	a080004c 	andi	r2,r20,1
 8008450:	1001d226 	beq	r2,zero,8008b9c <___vfiprintf_internal_r+0xec4>
 8008454:	94c4b03a 	or	r2,r18,r19
 8008458:	1002351e 	bne	r2,zero,8008d30 <___vfiprintf_internal_r+0x1058>
 800845c:	d8001d85 	stb	zero,118(sp)
 8008460:	48022216 	blt	r9,zero,8008cec <___vfiprintf_internal_r+0x1014>
 8008464:	00bfdfc4 	movi	r2,-129
 8008468:	a0a8703a 	and	r20,r20,r2
 800846c:	003f1506 	br	80080c4 <__alt_data_end+0xff0080c4>
 8008470:	da802217 	ldw	r10,136(sp)
 8008474:	04800044 	movi	r18,1
 8008478:	d8001d85 	stb	zero,118(sp)
 800847c:	50800017 	ldw	r2,0(r10)
 8008480:	52800104 	addi	r10,r10,4
 8008484:	da802215 	stw	r10,136(sp)
 8008488:	d8801005 	stb	r2,64(sp)
 800848c:	9027883a 	mov	r19,r18
 8008490:	dd401004 	addi	r21,sp,64
 8008494:	0013883a 	mov	r9,zero
 8008498:	003f1706 	br	80080f8 <__alt_data_end+0xff0080f8>
 800849c:	21003fcc 	andi	r4,r4,255
 80084a0:	2003201e 	bne	r4,zero,8009124 <___vfiprintf_internal_r+0x144c>
 80084a4:	a080080c 	andi	r2,r20,32
 80084a8:	10004b26 	beq	r2,zero,80085d8 <___vfiprintf_internal_r+0x900>
 80084ac:	da802217 	ldw	r10,136(sp)
 80084b0:	50800117 	ldw	r2,4(r10)
 80084b4:	54800017 	ldw	r18,0(r10)
 80084b8:	52800204 	addi	r10,r10,8
 80084bc:	da802215 	stw	r10,136(sp)
 80084c0:	1027883a 	mov	r19,r2
 80084c4:	10022c16 	blt	r2,zero,8008d78 <___vfiprintf_internal_r+0x10a0>
 80084c8:	df001d83 	ldbu	fp,118(sp)
 80084cc:	48007216 	blt	r9,zero,8008698 <___vfiprintf_internal_r+0x9c0>
 80084d0:	00ffdfc4 	movi	r3,-129
 80084d4:	94c4b03a 	or	r2,r18,r19
 80084d8:	a0e8703a 	and	r20,r20,r3
 80084dc:	1000cc26 	beq	r2,zero,8008810 <___vfiprintf_internal_r+0xb38>
 80084e0:	98021026 	beq	r19,zero,8008d24 <___vfiprintf_internal_r+0x104c>
 80084e4:	dc402415 	stw	r17,144(sp)
 80084e8:	dc002515 	stw	r16,148(sp)
 80084ec:	9823883a 	mov	r17,r19
 80084f0:	9021883a 	mov	r16,r18
 80084f4:	dd401a04 	addi	r21,sp,104
 80084f8:	4825883a 	mov	r18,r9
 80084fc:	4027883a 	mov	r19,r8
 8008500:	8009883a 	mov	r4,r16
 8008504:	880b883a 	mov	r5,r17
 8008508:	01800284 	movi	r6,10
 800850c:	000f883a 	mov	r7,zero
 8008510:	800a0b80 	call	800a0b8 <__umoddi3>
 8008514:	10800c04 	addi	r2,r2,48
 8008518:	ad7fffc4 	addi	r21,r21,-1
 800851c:	8009883a 	mov	r4,r16
 8008520:	880b883a 	mov	r5,r17
 8008524:	a8800005 	stb	r2,0(r21)
 8008528:	01800284 	movi	r6,10
 800852c:	000f883a 	mov	r7,zero
 8008530:	8009b400 	call	8009b40 <__udivdi3>
 8008534:	1021883a 	mov	r16,r2
 8008538:	10c4b03a 	or	r2,r2,r3
 800853c:	1823883a 	mov	r17,r3
 8008540:	103fef1e 	bne	r2,zero,8008500 <__alt_data_end+0xff008500>
 8008544:	dc402417 	ldw	r17,144(sp)
 8008548:	dc002517 	ldw	r16,148(sp)
 800854c:	9013883a 	mov	r9,r18
 8008550:	9811883a 	mov	r8,r19
 8008554:	da801e17 	ldw	r10,120(sp)
 8008558:	5567c83a 	sub	r19,r10,r21
 800855c:	003ede06 	br	80080d8 <__alt_data_end+0xff0080d8>
 8008560:	38803fcc 	andi	r2,r7,255
 8008564:	1080201c 	xori	r2,r2,128
 8008568:	10bfe004 	addi	r2,r2,-128
 800856c:	1002371e 	bne	r2,zero,8008e4c <___vfiprintf_internal_r+0x1174>
 8008570:	01000044 	movi	r4,1
 8008574:	01c00804 	movi	r7,32
 8008578:	80c00007 	ldb	r3,0(r16)
 800857c:	003e3506 	br	8007e54 <__alt_data_end+0xff007e54>
 8008580:	a5000054 	ori	r20,r20,1
 8008584:	80c00007 	ldb	r3,0(r16)
 8008588:	003e3206 	br	8007e54 <__alt_data_end+0xff007e54>
 800858c:	a5002014 	ori	r20,r20,128
 8008590:	80c00007 	ldb	r3,0(r16)
 8008594:	003e2f06 	br	8007e54 <__alt_data_end+0xff007e54>
 8008598:	8015883a 	mov	r10,r16
 800859c:	0023883a 	mov	r17,zero
 80085a0:	18bff404 	addi	r2,r3,-48
 80085a4:	50c00007 	ldb	r3,0(r10)
 80085a8:	8c4002a4 	muli	r17,r17,10
 80085ac:	84000044 	addi	r16,r16,1
 80085b0:	8015883a 	mov	r10,r16
 80085b4:	1463883a 	add	r17,r2,r17
 80085b8:	18bff404 	addi	r2,r3,-48
 80085bc:	30bff92e 	bgeu	r6,r2,80085a4 <__alt_data_end+0xff0085a4>
 80085c0:	003e2506 	br	8007e58 <__alt_data_end+0xff007e58>
 80085c4:	21003fcc 	andi	r4,r4,255
 80085c8:	2002d41e 	bne	r4,zero,800911c <___vfiprintf_internal_r+0x1444>
 80085cc:	a5000414 	ori	r20,r20,16
 80085d0:	a080080c 	andi	r2,r20,32
 80085d4:	103fb51e 	bne	r2,zero,80084ac <__alt_data_end+0xff0084ac>
 80085d8:	a080040c 	andi	r2,r20,16
 80085dc:	1001f826 	beq	r2,zero,8008dc0 <___vfiprintf_internal_r+0x10e8>
 80085e0:	da802217 	ldw	r10,136(sp)
 80085e4:	54800017 	ldw	r18,0(r10)
 80085e8:	52800104 	addi	r10,r10,4
 80085ec:	da802215 	stw	r10,136(sp)
 80085f0:	9027d7fa 	srai	r19,r18,31
 80085f4:	9805883a 	mov	r2,r19
 80085f8:	003fb206 	br	80084c4 <__alt_data_end+0xff0084c4>
 80085fc:	21003fcc 	andi	r4,r4,255
 8008600:	2002c41e 	bne	r4,zero,8009114 <___vfiprintf_internal_r+0x143c>
 8008604:	a5000414 	ori	r20,r20,16
 8008608:	a080080c 	andi	r2,r20,32
 800860c:	103f5f1e 	bne	r2,zero,800838c <__alt_data_end+0xff00838c>
 8008610:	a080040c 	andi	r2,r20,16
 8008614:	10020f26 	beq	r2,zero,8008e54 <___vfiprintf_internal_r+0x117c>
 8008618:	da802217 	ldw	r10,136(sp)
 800861c:	d8001d85 	stb	zero,118(sp)
 8008620:	0027883a 	mov	r19,zero
 8008624:	50800104 	addi	r2,r10,4
 8008628:	54800017 	ldw	r18,0(r10)
 800862c:	48021116 	blt	r9,zero,8008e74 <___vfiprintf_internal_r+0x119c>
 8008630:	00ffdfc4 	movi	r3,-129
 8008634:	d8802215 	stw	r2,136(sp)
 8008638:	a0e8703a 	and	r20,r20,r3
 800863c:	903f5e1e 	bne	r18,zero,80083b8 <__alt_data_end+0xff0083b8>
 8008640:	0039883a 	mov	fp,zero
 8008644:	4802a626 	beq	r9,zero,80090e0 <___vfiprintf_internal_r+0x1408>
 8008648:	0025883a 	mov	r18,zero
 800864c:	0027883a 	mov	r19,zero
 8008650:	003f5a06 	br	80083bc <__alt_data_end+0xff0083bc>
 8008654:	21003fcc 	andi	r4,r4,255
 8008658:	20029f1e 	bne	r4,zero,80090d8 <___vfiprintf_internal_r+0x1400>
 800865c:	a5000414 	ori	r20,r20,16
 8008660:	a080080c 	andi	r2,r20,32
 8008664:	10005e1e 	bne	r2,zero,80087e0 <___vfiprintf_internal_r+0xb08>
 8008668:	a080040c 	andi	r2,r20,16
 800866c:	1001a21e 	bne	r2,zero,8008cf8 <___vfiprintf_internal_r+0x1020>
 8008670:	a080100c 	andi	r2,r20,64
 8008674:	d8001d85 	stb	zero,118(sp)
 8008678:	da802217 	ldw	r10,136(sp)
 800867c:	1002231e 	bne	r2,zero,8008f0c <___vfiprintf_internal_r+0x1234>
 8008680:	50800104 	addi	r2,r10,4
 8008684:	54800017 	ldw	r18,0(r10)
 8008688:	0027883a 	mov	r19,zero
 800868c:	4801a00e 	bge	r9,zero,8008d10 <___vfiprintf_internal_r+0x1038>
 8008690:	d8802215 	stw	r2,136(sp)
 8008694:	0039883a 	mov	fp,zero
 8008698:	94c4b03a 	or	r2,r18,r19
 800869c:	103f901e 	bne	r2,zero,80084e0 <__alt_data_end+0xff0084e0>
 80086a0:	00800044 	movi	r2,1
 80086a4:	10803fcc 	andi	r2,r2,255
 80086a8:	00c00044 	movi	r3,1
 80086ac:	10c05926 	beq	r2,r3,8008814 <___vfiprintf_internal_r+0xb3c>
 80086b0:	00c00084 	movi	r3,2
 80086b4:	10ffe41e 	bne	r2,r3,8008648 <__alt_data_end+0xff008648>
 80086b8:	0025883a 	mov	r18,zero
 80086bc:	0027883a 	mov	r19,zero
 80086c0:	00013d06 	br	8008bb8 <___vfiprintf_internal_r+0xee0>
 80086c4:	21003fcc 	andi	r4,r4,255
 80086c8:	2002811e 	bne	r4,zero,80090d0 <___vfiprintf_internal_r+0x13f8>
 80086cc:	00820074 	movhi	r2,2049
 80086d0:	1085e904 	addi	r2,r2,6052
 80086d4:	d8802615 	stw	r2,152(sp)
 80086d8:	a080080c 	andi	r2,r20,32
 80086dc:	103f561e 	bne	r2,zero,8008438 <__alt_data_end+0xff008438>
 80086e0:	a080040c 	andi	r2,r20,16
 80086e4:	1001d126 	beq	r2,zero,8008e2c <___vfiprintf_internal_r+0x1154>
 80086e8:	da802217 	ldw	r10,136(sp)
 80086ec:	0027883a 	mov	r19,zero
 80086f0:	54800017 	ldw	r18,0(r10)
 80086f4:	52800104 	addi	r10,r10,4
 80086f8:	da802215 	stw	r10,136(sp)
 80086fc:	003f5306 	br	800844c <__alt_data_end+0xff00844c>
 8008700:	da802217 	ldw	r10,136(sp)
 8008704:	d8001d85 	stb	zero,118(sp)
 8008708:	55400017 	ldw	r21,0(r10)
 800870c:	50c00104 	addi	r3,r10,4
 8008710:	a8024226 	beq	r21,zero,800901c <___vfiprintf_internal_r+0x1344>
 8008714:	48021816 	blt	r9,zero,8008f78 <___vfiprintf_internal_r+0x12a0>
 8008718:	480d883a 	mov	r6,r9
 800871c:	000b883a 	mov	r5,zero
 8008720:	a809883a 	mov	r4,r21
 8008724:	d8c02a15 	stw	r3,168(sp)
 8008728:	da002b15 	stw	r8,172(sp)
 800872c:	da402c15 	stw	r9,176(sp)
 8008730:	8005ed40 	call	8005ed4 <memchr>
 8008734:	d8c02a17 	ldw	r3,168(sp)
 8008738:	da002b17 	ldw	r8,172(sp)
 800873c:	da402c17 	ldw	r9,176(sp)
 8008740:	10024826 	beq	r2,zero,8009064 <___vfiprintf_internal_r+0x138c>
 8008744:	1567c83a 	sub	r19,r2,r21
 8008748:	df001d83 	ldbu	fp,118(sp)
 800874c:	d8c02215 	stw	r3,136(sp)
 8008750:	0013883a 	mov	r9,zero
 8008754:	003e6006 	br	80080d8 <__alt_data_end+0xff0080d8>
 8008758:	21003fcc 	andi	r4,r4,255
 800875c:	203fc026 	beq	r4,zero,8008660 <__alt_data_end+0xff008660>
 8008760:	d9c01d85 	stb	r7,118(sp)
 8008764:	003fbe06 	br	8008660 <__alt_data_end+0xff008660>
 8008768:	da802217 	ldw	r10,136(sp)
 800876c:	54400017 	ldw	r17,0(r10)
 8008770:	50800104 	addi	r2,r10,4
 8008774:	883e3b16 	blt	r17,zero,8008064 <__alt_data_end+0xff008064>
 8008778:	d8802215 	stw	r2,136(sp)
 800877c:	80c00007 	ldb	r3,0(r16)
 8008780:	003db406 	br	8007e54 <__alt_data_end+0xff007e54>
 8008784:	01000044 	movi	r4,1
 8008788:	01c00ac4 	movi	r7,43
 800878c:	80c00007 	ldb	r3,0(r16)
 8008790:	003db006 	br	8007e54 <__alt_data_end+0xff007e54>
 8008794:	80c00007 	ldb	r3,0(r16)
 8008798:	82800044 	addi	r10,r16,1
 800879c:	1b423c26 	beq	r3,r13,8009090 <___vfiprintf_internal_r+0x13b8>
 80087a0:	18bff404 	addi	r2,r3,-48
 80087a4:	0013883a 	mov	r9,zero
 80087a8:	30822b36 	bltu	r6,r2,8009058 <___vfiprintf_internal_r+0x1380>
 80087ac:	50c00007 	ldb	r3,0(r10)
 80087b0:	4a4002a4 	muli	r9,r9,10
 80087b4:	54000044 	addi	r16,r10,1
 80087b8:	8015883a 	mov	r10,r16
 80087bc:	4893883a 	add	r9,r9,r2
 80087c0:	18bff404 	addi	r2,r3,-48
 80087c4:	30bff92e 	bgeu	r6,r2,80087ac <__alt_data_end+0xff0087ac>
 80087c8:	483da30e 	bge	r9,zero,8007e58 <__alt_data_end+0xff007e58>
 80087cc:	027fffc4 	movi	r9,-1
 80087d0:	003da106 	br	8007e58 <__alt_data_end+0xff007e58>
 80087d4:	a5001014 	ori	r20,r20,64
 80087d8:	80c00007 	ldb	r3,0(r16)
 80087dc:	003d9d06 	br	8007e54 <__alt_data_end+0xff007e54>
 80087e0:	da802217 	ldw	r10,136(sp)
 80087e4:	d8001d85 	stb	zero,118(sp)
 80087e8:	50c00204 	addi	r3,r10,8
 80087ec:	54800017 	ldw	r18,0(r10)
 80087f0:	54c00117 	ldw	r19,4(r10)
 80087f4:	4801ca16 	blt	r9,zero,8008f20 <___vfiprintf_internal_r+0x1248>
 80087f8:	013fdfc4 	movi	r4,-129
 80087fc:	94c4b03a 	or	r2,r18,r19
 8008800:	d8c02215 	stw	r3,136(sp)
 8008804:	a128703a 	and	r20,r20,r4
 8008808:	0039883a 	mov	fp,zero
 800880c:	103f341e 	bne	r2,zero,80084e0 <__alt_data_end+0xff0084e0>
 8008810:	483e2e26 	beq	r9,zero,80080cc <__alt_data_end+0xff0080cc>
 8008814:	0025883a 	mov	r18,zero
 8008818:	94800c04 	addi	r18,r18,48
 800881c:	dc8019c5 	stb	r18,103(sp)
 8008820:	dcc02717 	ldw	r19,156(sp)
 8008824:	dd4019c4 	addi	r21,sp,103
 8008828:	003e2b06 	br	80080d8 <__alt_data_end+0xff0080d8>
 800882c:	21003fcc 	andi	r4,r4,255
 8008830:	2002361e 	bne	r4,zero,800910c <___vfiprintf_internal_r+0x1434>
 8008834:	1801c126 	beq	r3,zero,8008f3c <___vfiprintf_internal_r+0x1264>
 8008838:	04800044 	movi	r18,1
 800883c:	d8c01005 	stb	r3,64(sp)
 8008840:	d8001d85 	stb	zero,118(sp)
 8008844:	9027883a 	mov	r19,r18
 8008848:	dd401004 	addi	r21,sp,64
 800884c:	003f1106 	br	8008494 <__alt_data_end+0xff008494>
 8008850:	d9402117 	ldw	r5,132(sp)
 8008854:	d9002017 	ldw	r4,128(sp)
 8008858:	d9801a04 	addi	r6,sp,104
 800885c:	d9c02b15 	stw	r7,172(sp)
 8008860:	dbc02a15 	stw	r15,168(sp)
 8008864:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 8008868:	d9c02b17 	ldw	r7,172(sp)
 800886c:	dbc02a17 	ldw	r15,168(sp)
 8008870:	10006d1e 	bne	r2,zero,8008a28 <___vfiprintf_internal_r+0xd50>
 8008874:	d9801b17 	ldw	r6,108(sp)
 8008878:	d8801c17 	ldw	r2,112(sp)
 800887c:	d811883a 	mov	r8,sp
 8008880:	31400044 	addi	r5,r6,1
 8008884:	003e3306 	br	8008154 <__alt_data_end+0xff008154>
 8008888:	d9401b17 	ldw	r5,108(sp)
 800888c:	d8801c17 	ldw	r2,112(sp)
 8008890:	29000044 	addi	r4,r5,1
 8008894:	d8c01d87 	ldb	r3,118(sp)
 8008898:	183e4d26 	beq	r3,zero,80081d0 <__alt_data_end+0xff0081d0>
 800889c:	00c00044 	movi	r3,1
 80088a0:	d9401d84 	addi	r5,sp,118
 80088a4:	10c5883a 	add	r2,r2,r3
 80088a8:	41400015 	stw	r5,0(r8)
 80088ac:	40c00115 	stw	r3,4(r8)
 80088b0:	d8801c15 	stw	r2,112(sp)
 80088b4:	d9001b15 	stw	r4,108(sp)
 80088b8:	014001c4 	movi	r5,7
 80088bc:	2900a90e 	bge	r5,r4,8008b64 <___vfiprintf_internal_r+0xe8c>
 80088c0:	1000da1e 	bne	r2,zero,8008c2c <___vfiprintf_internal_r+0xf54>
 80088c4:	7000ab1e 	bne	r14,zero,8008b74 <___vfiprintf_internal_r+0xe9c>
 80088c8:	000b883a 	mov	r5,zero
 80088cc:	1809883a 	mov	r4,r3
 80088d0:	d811883a 	mov	r8,sp
 80088d4:	00c02004 	movi	r3,128
 80088d8:	e0fe4d26 	beq	fp,r3,8008210 <__alt_data_end+0xff008210>
 80088dc:	4cf9c83a 	sub	fp,r9,r19
 80088e0:	073e7b0e 	bge	zero,fp,80082d0 <__alt_data_end+0xff0082d0>
 80088e4:	01c00404 	movi	r7,16
 80088e8:	3f01900e 	bge	r7,fp,8008f2c <___vfiprintf_internal_r+0x1254>
 80088ec:	00c20074 	movhi	r3,2049
 80088f0:	18c64f04 	addi	r3,r3,6460
 80088f4:	d8c02415 	stw	r3,144(sp)
 80088f8:	034001c4 	movi	r13,7
 80088fc:	00000506 	br	8008914 <___vfiprintf_internal_r+0xc3c>
 8008900:	29000084 	addi	r4,r5,2
 8008904:	42000204 	addi	r8,r8,8
 8008908:	180b883a 	mov	r5,r3
 800890c:	e73ffc04 	addi	fp,fp,-16
 8008910:	3f000d0e 	bge	r7,fp,8008948 <___vfiprintf_internal_r+0xc70>
 8008914:	10800404 	addi	r2,r2,16
 8008918:	28c00044 	addi	r3,r5,1
 800891c:	45c00015 	stw	r23,0(r8)
 8008920:	41c00115 	stw	r7,4(r8)
 8008924:	d8801c15 	stw	r2,112(sp)
 8008928:	d8c01b15 	stw	r3,108(sp)
 800892c:	68fff40e 	bge	r13,r3,8008900 <__alt_data_end+0xff008900>
 8008930:	1000101e 	bne	r2,zero,8008974 <___vfiprintf_internal_r+0xc9c>
 8008934:	e73ffc04 	addi	fp,fp,-16
 8008938:	01000044 	movi	r4,1
 800893c:	000b883a 	mov	r5,zero
 8008940:	d811883a 	mov	r8,sp
 8008944:	3f3ff316 	blt	r7,fp,8008914 <__alt_data_end+0xff008914>
 8008948:	da802417 	ldw	r10,144(sp)
 800894c:	1705883a 	add	r2,r2,fp
 8008950:	47000115 	stw	fp,4(r8)
 8008954:	42800015 	stw	r10,0(r8)
 8008958:	d8801c15 	stw	r2,112(sp)
 800895c:	d9001b15 	stw	r4,108(sp)
 8008960:	00c001c4 	movi	r3,7
 8008964:	19003616 	blt	r3,r4,8008a40 <___vfiprintf_internal_r+0xd68>
 8008968:	42000204 	addi	r8,r8,8
 800896c:	21000044 	addi	r4,r4,1
 8008970:	003e5706 	br	80082d0 <__alt_data_end+0xff0082d0>
 8008974:	d9402117 	ldw	r5,132(sp)
 8008978:	d9002017 	ldw	r4,128(sp)
 800897c:	d9801a04 	addi	r6,sp,104
 8008980:	d9c02b15 	stw	r7,172(sp)
 8008984:	db402a15 	stw	r13,168(sp)
 8008988:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 800898c:	d9c02b17 	ldw	r7,172(sp)
 8008990:	db402a17 	ldw	r13,168(sp)
 8008994:	1000241e 	bne	r2,zero,8008a28 <___vfiprintf_internal_r+0xd50>
 8008998:	d9401b17 	ldw	r5,108(sp)
 800899c:	d8801c17 	ldw	r2,112(sp)
 80089a0:	d811883a 	mov	r8,sp
 80089a4:	29000044 	addi	r4,r5,1
 80089a8:	003fd806 	br	800890c <__alt_data_end+0xff00890c>
 80089ac:	d9401b17 	ldw	r5,108(sp)
 80089b0:	00c20074 	movhi	r3,2049
 80089b4:	18c65304 	addi	r3,r3,6476
 80089b8:	d8c02415 	stw	r3,144(sp)
 80089bc:	29400044 	addi	r5,r5,1
 80089c0:	d8c02417 	ldw	r3,144(sp)
 80089c4:	14c5883a 	add	r2,r2,r19
 80089c8:	44c00115 	stw	r19,4(r8)
 80089cc:	40c00015 	stw	r3,0(r8)
 80089d0:	d8801c15 	stw	r2,112(sp)
 80089d4:	d9401b15 	stw	r5,108(sp)
 80089d8:	00c001c4 	movi	r3,7
 80089dc:	1940070e 	bge	r3,r5,80089fc <___vfiprintf_internal_r+0xd24>
 80089e0:	103e4826 	beq	r2,zero,8008304 <__alt_data_end+0xff008304>
 80089e4:	d9402117 	ldw	r5,132(sp)
 80089e8:	d9002017 	ldw	r4,128(sp)
 80089ec:	d9801a04 	addi	r6,sp,104
 80089f0:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 80089f4:	10000c1e 	bne	r2,zero,8008a28 <___vfiprintf_internal_r+0xd50>
 80089f8:	d8801c17 	ldw	r2,112(sp)
 80089fc:	8c80010e 	bge	r17,r18,8008a04 <___vfiprintf_internal_r+0xd2c>
 8008a00:	9023883a 	mov	r17,r18
 8008a04:	da802317 	ldw	r10,140(sp)
 8008a08:	5455883a 	add	r10,r10,r17
 8008a0c:	da802315 	stw	r10,140(sp)
 8008a10:	103e4126 	beq	r2,zero,8008318 <__alt_data_end+0xff008318>
 8008a14:	d9402117 	ldw	r5,132(sp)
 8008a18:	d9002017 	ldw	r4,128(sp)
 8008a1c:	d9801a04 	addi	r6,sp,104
 8008a20:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 8008a24:	103e3c26 	beq	r2,zero,8008318 <__alt_data_end+0xff008318>
 8008a28:	dd002117 	ldw	r20,132(sp)
 8008a2c:	a080030b 	ldhu	r2,12(r20)
 8008a30:	1080100c 	andi	r2,r2,64
 8008a34:	1001231e 	bne	r2,zero,8008ec4 <___vfiprintf_internal_r+0x11ec>
 8008a38:	d8802317 	ldw	r2,140(sp)
 8008a3c:	003d7b06 	br	800802c <__alt_data_end+0xff00802c>
 8008a40:	1000991e 	bne	r2,zero,8008ca8 <___vfiprintf_internal_r+0xfd0>
 8008a44:	00c00044 	movi	r3,1
 8008a48:	9805883a 	mov	r2,r19
 8008a4c:	dd400015 	stw	r21,0(sp)
 8008a50:	dcc00115 	stw	r19,4(sp)
 8008a54:	dcc01c15 	stw	r19,112(sp)
 8008a58:	d8c01b15 	stw	r3,108(sp)
 8008a5c:	d811883a 	mov	r8,sp
 8008a60:	42000204 	addi	r8,r8,8
 8008a64:	a2c0010c 	andi	r11,r20,4
 8008a68:	583fe426 	beq	r11,zero,80089fc <__alt_data_end+0xff0089fc>
 8008a6c:	8ca7c83a 	sub	r19,r17,r18
 8008a70:	04ffe20e 	bge	zero,r19,80089fc <__alt_data_end+0xff0089fc>
 8008a74:	01c00404 	movi	r7,16
 8008a78:	3cffcc0e 	bge	r7,r19,80089ac <__alt_data_end+0xff0089ac>
 8008a7c:	02820074 	movhi	r10,2049
 8008a80:	52865304 	addi	r10,r10,6476
 8008a84:	d9001b17 	ldw	r4,108(sp)
 8008a88:	da802415 	stw	r10,144(sp)
 8008a8c:	382b883a 	mov	r21,r7
 8008a90:	050001c4 	movi	r20,7
 8008a94:	df002017 	ldw	fp,128(sp)
 8008a98:	00000506 	br	8008ab0 <___vfiprintf_internal_r+0xdd8>
 8008a9c:	21400084 	addi	r5,r4,2
 8008aa0:	42000204 	addi	r8,r8,8
 8008aa4:	1809883a 	mov	r4,r3
 8008aa8:	9cfffc04 	addi	r19,r19,-16
 8008aac:	acffc40e 	bge	r21,r19,80089c0 <__alt_data_end+0xff0089c0>
 8008ab0:	10800404 	addi	r2,r2,16
 8008ab4:	20c00044 	addi	r3,r4,1
 8008ab8:	45800015 	stw	r22,0(r8)
 8008abc:	45400115 	stw	r21,4(r8)
 8008ac0:	d8801c15 	stw	r2,112(sp)
 8008ac4:	d8c01b15 	stw	r3,108(sp)
 8008ac8:	a0fff40e 	bge	r20,r3,8008a9c <__alt_data_end+0xff008a9c>
 8008acc:	1000041e 	bne	r2,zero,8008ae0 <___vfiprintf_internal_r+0xe08>
 8008ad0:	01400044 	movi	r5,1
 8008ad4:	0009883a 	mov	r4,zero
 8008ad8:	d811883a 	mov	r8,sp
 8008adc:	003ff206 	br	8008aa8 <__alt_data_end+0xff008aa8>
 8008ae0:	d9402117 	ldw	r5,132(sp)
 8008ae4:	d9801a04 	addi	r6,sp,104
 8008ae8:	e009883a 	mov	r4,fp
 8008aec:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 8008af0:	103fcd1e 	bne	r2,zero,8008a28 <__alt_data_end+0xff008a28>
 8008af4:	d9001b17 	ldw	r4,108(sp)
 8008af8:	d8801c17 	ldw	r2,112(sp)
 8008afc:	d811883a 	mov	r8,sp
 8008b00:	21400044 	addi	r5,r4,1
 8008b04:	003fe806 	br	8008aa8 <__alt_data_end+0xff008aa8>
 8008b08:	d9402117 	ldw	r5,132(sp)
 8008b0c:	d9002017 	ldw	r4,128(sp)
 8008b10:	d9801a04 	addi	r6,sp,104
 8008b14:	d9c02b15 	stw	r7,172(sp)
 8008b18:	db402a15 	stw	r13,168(sp)
 8008b1c:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 8008b20:	d9c02b17 	ldw	r7,172(sp)
 8008b24:	db402a17 	ldw	r13,168(sp)
 8008b28:	103fbf1e 	bne	r2,zero,8008a28 <__alt_data_end+0xff008a28>
 8008b2c:	d9401b17 	ldw	r5,108(sp)
 8008b30:	d8801c17 	ldw	r2,112(sp)
 8008b34:	d811883a 	mov	r8,sp
 8008b38:	29800044 	addi	r6,r5,1
 8008b3c:	003dc406 	br	8008250 <__alt_data_end+0xff008250>
 8008b40:	1000d21e 	bne	r2,zero,8008e8c <___vfiprintf_internal_r+0x11b4>
 8008b44:	d8c01d87 	ldb	r3,118(sp)
 8008b48:	18009526 	beq	r3,zero,8008da0 <___vfiprintf_internal_r+0x10c8>
 8008b4c:	00800044 	movi	r2,1
 8008b50:	d8c01d84 	addi	r3,sp,118
 8008b54:	1009883a 	mov	r4,r2
 8008b58:	d8c00015 	stw	r3,0(sp)
 8008b5c:	d8800115 	stw	r2,4(sp)
 8008b60:	d811883a 	mov	r8,sp
 8008b64:	200b883a 	mov	r5,r4
 8008b68:	42000204 	addi	r8,r8,8
 8008b6c:	21000044 	addi	r4,r4,1
 8008b70:	003d9706 	br	80081d0 <__alt_data_end+0xff0081d0>
 8008b74:	d9001d04 	addi	r4,sp,116
 8008b78:	00800084 	movi	r2,2
 8008b7c:	d9000015 	stw	r4,0(sp)
 8008b80:	d8800115 	stw	r2,4(sp)
 8008b84:	1809883a 	mov	r4,r3
 8008b88:	d811883a 	mov	r8,sp
 8008b8c:	200b883a 	mov	r5,r4
 8008b90:	42000204 	addi	r8,r8,8
 8008b94:	21000044 	addi	r4,r4,1
 8008b98:	003f4e06 	br	80088d4 <__alt_data_end+0xff0088d4>
 8008b9c:	d8001d85 	stb	zero,118(sp)
 8008ba0:	48005016 	blt	r9,zero,8008ce4 <___vfiprintf_internal_r+0x100c>
 8008ba4:	00ffdfc4 	movi	r3,-129
 8008ba8:	94c4b03a 	or	r2,r18,r19
 8008bac:	a0e8703a 	and	r20,r20,r3
 8008bb0:	103d4426 	beq	r2,zero,80080c4 <__alt_data_end+0xff0080c4>
 8008bb4:	0039883a 	mov	fp,zero
 8008bb8:	d9002617 	ldw	r4,152(sp)
 8008bbc:	dd401a04 	addi	r21,sp,104
 8008bc0:	908003cc 	andi	r2,r18,15
 8008bc4:	9806973a 	slli	r3,r19,28
 8008bc8:	2085883a 	add	r2,r4,r2
 8008bcc:	9024d13a 	srli	r18,r18,4
 8008bd0:	10800003 	ldbu	r2,0(r2)
 8008bd4:	9826d13a 	srli	r19,r19,4
 8008bd8:	ad7fffc4 	addi	r21,r21,-1
 8008bdc:	1ca4b03a 	or	r18,r3,r18
 8008be0:	a8800005 	stb	r2,0(r21)
 8008be4:	94c4b03a 	or	r2,r18,r19
 8008be8:	103ff51e 	bne	r2,zero,8008bc0 <__alt_data_end+0xff008bc0>
 8008bec:	003e5906 	br	8008554 <__alt_data_end+0xff008554>
 8008bf0:	d9402117 	ldw	r5,132(sp)
 8008bf4:	d9002017 	ldw	r4,128(sp)
 8008bf8:	d9801a04 	addi	r6,sp,104
 8008bfc:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 8008c00:	103f891e 	bne	r2,zero,8008a28 <__alt_data_end+0xff008a28>
 8008c04:	d8801c17 	ldw	r2,112(sp)
 8008c08:	d811883a 	mov	r8,sp
 8008c0c:	003f9506 	br	8008a64 <__alt_data_end+0xff008a64>
 8008c10:	d9402117 	ldw	r5,132(sp)
 8008c14:	d9002017 	ldw	r4,128(sp)
 8008c18:	d9801a04 	addi	r6,sp,104
 8008c1c:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 8008c20:	103f811e 	bne	r2,zero,8008a28 <__alt_data_end+0xff008a28>
 8008c24:	d811883a 	mov	r8,sp
 8008c28:	003ced06 	br	8007fe0 <__alt_data_end+0xff007fe0>
 8008c2c:	d9402117 	ldw	r5,132(sp)
 8008c30:	d9002017 	ldw	r4,128(sp)
 8008c34:	d9801a04 	addi	r6,sp,104
 8008c38:	da402c15 	stw	r9,176(sp)
 8008c3c:	db802a15 	stw	r14,168(sp)
 8008c40:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 8008c44:	da402c17 	ldw	r9,176(sp)
 8008c48:	db802a17 	ldw	r14,168(sp)
 8008c4c:	103f761e 	bne	r2,zero,8008a28 <__alt_data_end+0xff008a28>
 8008c50:	d9401b17 	ldw	r5,108(sp)
 8008c54:	d8801c17 	ldw	r2,112(sp)
 8008c58:	d811883a 	mov	r8,sp
 8008c5c:	29000044 	addi	r4,r5,1
 8008c60:	003d5b06 	br	80081d0 <__alt_data_end+0xff0081d0>
 8008c64:	d9402117 	ldw	r5,132(sp)
 8008c68:	d9002017 	ldw	r4,128(sp)
 8008c6c:	d9801a04 	addi	r6,sp,104
 8008c70:	da402c15 	stw	r9,176(sp)
 8008c74:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 8008c78:	da402c17 	ldw	r9,176(sp)
 8008c7c:	103f6a1e 	bne	r2,zero,8008a28 <__alt_data_end+0xff008a28>
 8008c80:	d9401b17 	ldw	r5,108(sp)
 8008c84:	d8801c17 	ldw	r2,112(sp)
 8008c88:	d811883a 	mov	r8,sp
 8008c8c:	29000044 	addi	r4,r5,1
 8008c90:	003f1006 	br	80088d4 <__alt_data_end+0xff0088d4>
 8008c94:	1000c31e 	bne	r2,zero,8008fa4 <___vfiprintf_internal_r+0x12cc>
 8008c98:	01000044 	movi	r4,1
 8008c9c:	000b883a 	mov	r5,zero
 8008ca0:	d811883a 	mov	r8,sp
 8008ca4:	003f0d06 	br	80088dc <__alt_data_end+0xff0088dc>
 8008ca8:	d9402117 	ldw	r5,132(sp)
 8008cac:	d9002017 	ldw	r4,128(sp)
 8008cb0:	d9801a04 	addi	r6,sp,104
 8008cb4:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 8008cb8:	103f5b1e 	bne	r2,zero,8008a28 <__alt_data_end+0xff008a28>
 8008cbc:	d9001b17 	ldw	r4,108(sp)
 8008cc0:	d8801c17 	ldw	r2,112(sp)
 8008cc4:	d811883a 	mov	r8,sp
 8008cc8:	21000044 	addi	r4,r4,1
 8008ccc:	003d8006 	br	80082d0 <__alt_data_end+0xff0082d0>
 8008cd0:	01020074 	movhi	r4,2049
 8008cd4:	2105ee04 	addi	r4,r4,6072
 8008cd8:	d9002615 	stw	r4,152(sp)
 8008cdc:	d8c02215 	stw	r3,136(sp)
 8008ce0:	1029883a 	mov	r20,r2
 8008ce4:	94c4b03a 	or	r2,r18,r19
 8008ce8:	103fb21e 	bne	r2,zero,8008bb4 <__alt_data_end+0xff008bb4>
 8008cec:	0039883a 	mov	fp,zero
 8008cf0:	00800084 	movi	r2,2
 8008cf4:	003e6b06 	br	80086a4 <__alt_data_end+0xff0086a4>
 8008cf8:	da802217 	ldw	r10,136(sp)
 8008cfc:	d8001d85 	stb	zero,118(sp)
 8008d00:	0027883a 	mov	r19,zero
 8008d04:	50800104 	addi	r2,r10,4
 8008d08:	54800017 	ldw	r18,0(r10)
 8008d0c:	483e6016 	blt	r9,zero,8008690 <__alt_data_end+0xff008690>
 8008d10:	00ffdfc4 	movi	r3,-129
 8008d14:	d8802215 	stw	r2,136(sp)
 8008d18:	a0e8703a 	and	r20,r20,r3
 8008d1c:	0039883a 	mov	fp,zero
 8008d20:	903ebb26 	beq	r18,zero,8008810 <__alt_data_end+0xff008810>
 8008d24:	00800244 	movi	r2,9
 8008d28:	14bdee36 	bltu	r2,r18,80084e4 <__alt_data_end+0xff0084e4>
 8008d2c:	003eba06 	br	8008818 <__alt_data_end+0xff008818>
 8008d30:	00800c04 	movi	r2,48
 8008d34:	d8c01d45 	stb	r3,117(sp)
 8008d38:	d8801d05 	stb	r2,116(sp)
 8008d3c:	d8001d85 	stb	zero,118(sp)
 8008d40:	a0c00094 	ori	r3,r20,2
 8008d44:	4800a916 	blt	r9,zero,8008fec <___vfiprintf_internal_r+0x1314>
 8008d48:	00bfdfc4 	movi	r2,-129
 8008d4c:	a096703a 	and	r11,r20,r2
 8008d50:	5d000094 	ori	r20,r11,2
 8008d54:	0039883a 	mov	fp,zero
 8008d58:	003f9706 	br	8008bb8 <__alt_data_end+0xff008bb8>
 8008d5c:	8025883a 	mov	r18,r16
 8008d60:	003c2e06 	br	8007e1c <__alt_data_end+0xff007e1c>
 8008d64:	00820074 	movhi	r2,2049
 8008d68:	1085ee04 	addi	r2,r2,6072
 8008d6c:	0039883a 	mov	fp,zero
 8008d70:	d8802615 	stw	r2,152(sp)
 8008d74:	003f9006 	br	8008bb8 <__alt_data_end+0xff008bb8>
 8008d78:	04a5c83a 	sub	r18,zero,r18
 8008d7c:	07000b44 	movi	fp,45
 8008d80:	9004c03a 	cmpne	r2,r18,zero
 8008d84:	04e7c83a 	sub	r19,zero,r19
 8008d88:	df001d85 	stb	fp,118(sp)
 8008d8c:	98a7c83a 	sub	r19,r19,r2
 8008d90:	48009f16 	blt	r9,zero,8009010 <___vfiprintf_internal_r+0x1338>
 8008d94:	00bfdfc4 	movi	r2,-129
 8008d98:	a0a8703a 	and	r20,r20,r2
 8008d9c:	003dd006 	br	80084e0 <__alt_data_end+0xff0084e0>
 8008da0:	70004c26 	beq	r14,zero,8008ed4 <___vfiprintf_internal_r+0x11fc>
 8008da4:	00800084 	movi	r2,2
 8008da8:	d8c01d04 	addi	r3,sp,116
 8008dac:	d8c00015 	stw	r3,0(sp)
 8008db0:	d8800115 	stw	r2,4(sp)
 8008db4:	01000044 	movi	r4,1
 8008db8:	d811883a 	mov	r8,sp
 8008dbc:	003f7306 	br	8008b8c <__alt_data_end+0xff008b8c>
 8008dc0:	a080100c 	andi	r2,r20,64
 8008dc4:	da802217 	ldw	r10,136(sp)
 8008dc8:	103e0626 	beq	r2,zero,80085e4 <__alt_data_end+0xff0085e4>
 8008dcc:	5480000f 	ldh	r18,0(r10)
 8008dd0:	52800104 	addi	r10,r10,4
 8008dd4:	da802215 	stw	r10,136(sp)
 8008dd8:	9027d7fa 	srai	r19,r18,31
 8008ddc:	9805883a 	mov	r2,r19
 8008de0:	003db806 	br	80084c4 <__alt_data_end+0xff0084c4>
 8008de4:	a080040c 	andi	r2,r20,16
 8008de8:	1000091e 	bne	r2,zero,8008e10 <___vfiprintf_internal_r+0x1138>
 8008dec:	a2c0100c 	andi	r11,r20,64
 8008df0:	58000726 	beq	r11,zero,8008e10 <___vfiprintf_internal_r+0x1138>
 8008df4:	da802217 	ldw	r10,136(sp)
 8008df8:	50800017 	ldw	r2,0(r10)
 8008dfc:	52800104 	addi	r10,r10,4
 8008e00:	da802215 	stw	r10,136(sp)
 8008e04:	da802317 	ldw	r10,140(sp)
 8008e08:	1280000d 	sth	r10,0(r2)
 8008e0c:	003be706 	br	8007dac <__alt_data_end+0xff007dac>
 8008e10:	da802217 	ldw	r10,136(sp)
 8008e14:	50800017 	ldw	r2,0(r10)
 8008e18:	52800104 	addi	r10,r10,4
 8008e1c:	da802215 	stw	r10,136(sp)
 8008e20:	da802317 	ldw	r10,140(sp)
 8008e24:	12800015 	stw	r10,0(r2)
 8008e28:	003be006 	br	8007dac <__alt_data_end+0xff007dac>
 8008e2c:	a080100c 	andi	r2,r20,64
 8008e30:	da802217 	ldw	r10,136(sp)
 8008e34:	10003026 	beq	r2,zero,8008ef8 <___vfiprintf_internal_r+0x1220>
 8008e38:	5480000b 	ldhu	r18,0(r10)
 8008e3c:	52800104 	addi	r10,r10,4
 8008e40:	0027883a 	mov	r19,zero
 8008e44:	da802215 	stw	r10,136(sp)
 8008e48:	003d8006 	br	800844c <__alt_data_end+0xff00844c>
 8008e4c:	80c00007 	ldb	r3,0(r16)
 8008e50:	003c0006 	br	8007e54 <__alt_data_end+0xff007e54>
 8008e54:	a080100c 	andi	r2,r20,64
 8008e58:	d8001d85 	stb	zero,118(sp)
 8008e5c:	da802217 	ldw	r10,136(sp)
 8008e60:	1000201e 	bne	r2,zero,8008ee4 <___vfiprintf_internal_r+0x120c>
 8008e64:	50800104 	addi	r2,r10,4
 8008e68:	54800017 	ldw	r18,0(r10)
 8008e6c:	0027883a 	mov	r19,zero
 8008e70:	483def0e 	bge	r9,zero,8008630 <__alt_data_end+0xff008630>
 8008e74:	94c6b03a 	or	r3,r18,r19
 8008e78:	d8802215 	stw	r2,136(sp)
 8008e7c:	183d4e1e 	bne	r3,zero,80083b8 <__alt_data_end+0xff0083b8>
 8008e80:	0039883a 	mov	fp,zero
 8008e84:	0005883a 	mov	r2,zero
 8008e88:	003e0606 	br	80086a4 <__alt_data_end+0xff0086a4>
 8008e8c:	d9402117 	ldw	r5,132(sp)
 8008e90:	d9002017 	ldw	r4,128(sp)
 8008e94:	d9801a04 	addi	r6,sp,104
 8008e98:	da402c15 	stw	r9,176(sp)
 8008e9c:	db802a15 	stw	r14,168(sp)
 8008ea0:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 8008ea4:	da402c17 	ldw	r9,176(sp)
 8008ea8:	db802a17 	ldw	r14,168(sp)
 8008eac:	103ede1e 	bne	r2,zero,8008a28 <__alt_data_end+0xff008a28>
 8008eb0:	d9401b17 	ldw	r5,108(sp)
 8008eb4:	d8801c17 	ldw	r2,112(sp)
 8008eb8:	d811883a 	mov	r8,sp
 8008ebc:	29000044 	addi	r4,r5,1
 8008ec0:	003e7406 	br	8008894 <__alt_data_end+0xff008894>
 8008ec4:	00bfffc4 	movi	r2,-1
 8008ec8:	003c5806 	br	800802c <__alt_data_end+0xff00802c>
 8008ecc:	d811883a 	mov	r8,sp
 8008ed0:	003ee806 	br	8008a74 <__alt_data_end+0xff008a74>
 8008ed4:	000b883a 	mov	r5,zero
 8008ed8:	01000044 	movi	r4,1
 8008edc:	d811883a 	mov	r8,sp
 8008ee0:	003e7c06 	br	80088d4 <__alt_data_end+0xff0088d4>
 8008ee4:	50800104 	addi	r2,r10,4
 8008ee8:	5480000b 	ldhu	r18,0(r10)
 8008eec:	0027883a 	mov	r19,zero
 8008ef0:	483dcf0e 	bge	r9,zero,8008630 <__alt_data_end+0xff008630>
 8008ef4:	003fdf06 	br	8008e74 <__alt_data_end+0xff008e74>
 8008ef8:	54800017 	ldw	r18,0(r10)
 8008efc:	52800104 	addi	r10,r10,4
 8008f00:	0027883a 	mov	r19,zero
 8008f04:	da802215 	stw	r10,136(sp)
 8008f08:	003d5006 	br	800844c <__alt_data_end+0xff00844c>
 8008f0c:	50800104 	addi	r2,r10,4
 8008f10:	5480000b 	ldhu	r18,0(r10)
 8008f14:	0027883a 	mov	r19,zero
 8008f18:	483f7d0e 	bge	r9,zero,8008d10 <__alt_data_end+0xff008d10>
 8008f1c:	003ddc06 	br	8008690 <__alt_data_end+0xff008690>
 8008f20:	d8c02215 	stw	r3,136(sp)
 8008f24:	0039883a 	mov	fp,zero
 8008f28:	003ddb06 	br	8008698 <__alt_data_end+0xff008698>
 8008f2c:	02820074 	movhi	r10,2049
 8008f30:	52864f04 	addi	r10,r10,6460
 8008f34:	da802415 	stw	r10,144(sp)
 8008f38:	003e8306 	br	8008948 <__alt_data_end+0xff008948>
 8008f3c:	d8801c17 	ldw	r2,112(sp)
 8008f40:	dd002117 	ldw	r20,132(sp)
 8008f44:	103eb926 	beq	r2,zero,8008a2c <__alt_data_end+0xff008a2c>
 8008f48:	d9002017 	ldw	r4,128(sp)
 8008f4c:	d9801a04 	addi	r6,sp,104
 8008f50:	a00b883a 	mov	r5,r20
 8008f54:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 8008f58:	003eb406 	br	8008a2c <__alt_data_end+0xff008a2c>
 8008f5c:	80c00043 	ldbu	r3,1(r16)
 8008f60:	a5000814 	ori	r20,r20,32
 8008f64:	84000044 	addi	r16,r16,1
 8008f68:	18c03fcc 	andi	r3,r3,255
 8008f6c:	18c0201c 	xori	r3,r3,128
 8008f70:	18ffe004 	addi	r3,r3,-128
 8008f74:	003bb706 	br	8007e54 <__alt_data_end+0xff007e54>
 8008f78:	a809883a 	mov	r4,r21
 8008f7c:	d8c02a15 	stw	r3,168(sp)
 8008f80:	da002b15 	stw	r8,172(sp)
 8008f84:	800062c0 	call	800062c <strlen>
 8008f88:	d8c02a17 	ldw	r3,168(sp)
 8008f8c:	1027883a 	mov	r19,r2
 8008f90:	df001d83 	ldbu	fp,118(sp)
 8008f94:	d8c02215 	stw	r3,136(sp)
 8008f98:	0013883a 	mov	r9,zero
 8008f9c:	da002b17 	ldw	r8,172(sp)
 8008fa0:	003c4d06 	br	80080d8 <__alt_data_end+0xff0080d8>
 8008fa4:	d9402117 	ldw	r5,132(sp)
 8008fa8:	d9002017 	ldw	r4,128(sp)
 8008fac:	d9801a04 	addi	r6,sp,104
 8008fb0:	da402c15 	stw	r9,176(sp)
 8008fb4:	8007bc40 	call	8007bc4 <__sprint_r.part.0>
 8008fb8:	da402c17 	ldw	r9,176(sp)
 8008fbc:	103e9a1e 	bne	r2,zero,8008a28 <__alt_data_end+0xff008a28>
 8008fc0:	d9401b17 	ldw	r5,108(sp)
 8008fc4:	d8801c17 	ldw	r2,112(sp)
 8008fc8:	d811883a 	mov	r8,sp
 8008fcc:	29000044 	addi	r4,r5,1
 8008fd0:	003e4206 	br	80088dc <__alt_data_end+0xff0088dc>
 8008fd4:	d9401b17 	ldw	r5,108(sp)
 8008fd8:	01020074 	movhi	r4,2049
 8008fdc:	21065304 	addi	r4,r4,6476
 8008fe0:	d9002415 	stw	r4,144(sp)
 8008fe4:	29400044 	addi	r5,r5,1
 8008fe8:	003c6d06 	br	80081a0 <__alt_data_end+0xff0081a0>
 8008fec:	0039883a 	mov	fp,zero
 8008ff0:	00800084 	movi	r2,2
 8008ff4:	10803fcc 	andi	r2,r2,255
 8008ff8:	01000044 	movi	r4,1
 8008ffc:	11001e26 	beq	r2,r4,8009078 <___vfiprintf_internal_r+0x13a0>
 8009000:	01000084 	movi	r4,2
 8009004:	11001e1e 	bne	r2,r4,8009080 <___vfiprintf_internal_r+0x13a8>
 8009008:	1829883a 	mov	r20,r3
 800900c:	003eea06 	br	8008bb8 <__alt_data_end+0xff008bb8>
 8009010:	a007883a 	mov	r3,r20
 8009014:	00800044 	movi	r2,1
 8009018:	003ff606 	br	8008ff4 <__alt_data_end+0xff008ff4>
 800901c:	00800184 	movi	r2,6
 8009020:	1240012e 	bgeu	r2,r9,8009028 <___vfiprintf_internal_r+0x1350>
 8009024:	1013883a 	mov	r9,r2
 8009028:	4827883a 	mov	r19,r9
 800902c:	4825883a 	mov	r18,r9
 8009030:	48001516 	blt	r9,zero,8009088 <___vfiprintf_internal_r+0x13b0>
 8009034:	05420074 	movhi	r21,2049
 8009038:	d8c02215 	stw	r3,136(sp)
 800903c:	ad45f304 	addi	r21,r21,6092
 8009040:	003d1406 	br	8008494 <__alt_data_end+0xff008494>
 8009044:	02820074 	movhi	r10,2049
 8009048:	52864f04 	addi	r10,r10,6460
 800904c:	da802415 	stw	r10,144(sp)
 8009050:	200d883a 	mov	r6,r4
 8009054:	003c9106 	br	800829c <__alt_data_end+0xff00829c>
 8009058:	5021883a 	mov	r16,r10
 800905c:	0013883a 	mov	r9,zero
 8009060:	003b7d06 	br	8007e58 <__alt_data_end+0xff007e58>
 8009064:	4827883a 	mov	r19,r9
 8009068:	df001d83 	ldbu	fp,118(sp)
 800906c:	d8c02215 	stw	r3,136(sp)
 8009070:	0013883a 	mov	r9,zero
 8009074:	003c1806 	br	80080d8 <__alt_data_end+0xff0080d8>
 8009078:	1829883a 	mov	r20,r3
 800907c:	003d1806 	br	80084e0 <__alt_data_end+0xff0084e0>
 8009080:	1829883a 	mov	r20,r3
 8009084:	003ccd06 	br	80083bc <__alt_data_end+0xff0083bc>
 8009088:	0025883a 	mov	r18,zero
 800908c:	003fe906 	br	8009034 <__alt_data_end+0xff009034>
 8009090:	d8802217 	ldw	r2,136(sp)
 8009094:	80c00043 	ldbu	r3,1(r16)
 8009098:	5021883a 	mov	r16,r10
 800909c:	12400017 	ldw	r9,0(r2)
 80090a0:	10800104 	addi	r2,r2,4
 80090a4:	d8802215 	stw	r2,136(sp)
 80090a8:	483faf0e 	bge	r9,zero,8008f68 <__alt_data_end+0xff008f68>
 80090ac:	18c03fcc 	andi	r3,r3,255
 80090b0:	18c0201c 	xori	r3,r3,128
 80090b4:	027fffc4 	movi	r9,-1
 80090b8:	18ffe004 	addi	r3,r3,-128
 80090bc:	003b6506 	br	8007e54 <__alt_data_end+0xff007e54>
 80090c0:	d9c01d85 	stb	r7,118(sp)
 80090c4:	003ca006 	br	8008348 <__alt_data_end+0xff008348>
 80090c8:	d9c01d85 	stb	r7,118(sp)
 80090cc:	003cad06 	br	8008384 <__alt_data_end+0xff008384>
 80090d0:	d9c01d85 	stb	r7,118(sp)
 80090d4:	003d7d06 	br	80086cc <__alt_data_end+0xff0086cc>
 80090d8:	d9c01d85 	stb	r7,118(sp)
 80090dc:	003d5f06 	br	800865c <__alt_data_end+0xff00865c>
 80090e0:	a080004c 	andi	r2,r20,1
 80090e4:	0039883a 	mov	fp,zero
 80090e8:	10000526 	beq	r2,zero,8009100 <___vfiprintf_internal_r+0x1428>
 80090ec:	00800c04 	movi	r2,48
 80090f0:	d88019c5 	stb	r2,103(sp)
 80090f4:	dcc02717 	ldw	r19,156(sp)
 80090f8:	dd4019c4 	addi	r21,sp,103
 80090fc:	003bf606 	br	80080d8 <__alt_data_end+0xff0080d8>
 8009100:	0027883a 	mov	r19,zero
 8009104:	dd401a04 	addi	r21,sp,104
 8009108:	003bf306 	br	80080d8 <__alt_data_end+0xff0080d8>
 800910c:	d9c01d85 	stb	r7,118(sp)
 8009110:	003dc806 	br	8008834 <__alt_data_end+0xff008834>
 8009114:	d9c01d85 	stb	r7,118(sp)
 8009118:	003d3a06 	br	8008604 <__alt_data_end+0xff008604>
 800911c:	d9c01d85 	stb	r7,118(sp)
 8009120:	003d2a06 	br	80085cc <__alt_data_end+0xff0085cc>
 8009124:	d9c01d85 	stb	r7,118(sp)
 8009128:	003cde06 	br	80084a4 <__alt_data_end+0xff0084a4>
 800912c:	d9c01d85 	stb	r7,118(sp)
 8009130:	003cbc06 	br	8008424 <__alt_data_end+0xff008424>

08009134 <__vfiprintf_internal>:
 8009134:	00820074 	movhi	r2,2049
 8009138:	108d6904 	addi	r2,r2,13732
 800913c:	300f883a 	mov	r7,r6
 8009140:	280d883a 	mov	r6,r5
 8009144:	200b883a 	mov	r5,r4
 8009148:	11000017 	ldw	r4,0(r2)
 800914c:	8007cd81 	jmpi	8007cd8 <___vfiprintf_internal_r>

08009150 <__sbprintf>:
 8009150:	2880030b 	ldhu	r2,12(r5)
 8009154:	2ac01917 	ldw	r11,100(r5)
 8009158:	2a80038b 	ldhu	r10,14(r5)
 800915c:	2a400717 	ldw	r9,28(r5)
 8009160:	2a000917 	ldw	r8,36(r5)
 8009164:	defee204 	addi	sp,sp,-1144
 8009168:	00c10004 	movi	r3,1024
 800916c:	dc011a15 	stw	r16,1128(sp)
 8009170:	10bfff4c 	andi	r2,r2,65533
 8009174:	2821883a 	mov	r16,r5
 8009178:	d8cb883a 	add	r5,sp,r3
 800917c:	dc811c15 	stw	r18,1136(sp)
 8009180:	dc411b15 	stw	r17,1132(sp)
 8009184:	dfc11d15 	stw	ra,1140(sp)
 8009188:	2025883a 	mov	r18,r4
 800918c:	d881030d 	sth	r2,1036(sp)
 8009190:	dac11915 	stw	r11,1124(sp)
 8009194:	da81038d 	sth	r10,1038(sp)
 8009198:	da410715 	stw	r9,1052(sp)
 800919c:	da010915 	stw	r8,1060(sp)
 80091a0:	dec10015 	stw	sp,1024(sp)
 80091a4:	dec10415 	stw	sp,1040(sp)
 80091a8:	d8c10215 	stw	r3,1032(sp)
 80091ac:	d8c10515 	stw	r3,1044(sp)
 80091b0:	d8010615 	stw	zero,1048(sp)
 80091b4:	8007cd80 	call	8007cd8 <___vfiprintf_internal_r>
 80091b8:	1023883a 	mov	r17,r2
 80091bc:	10000416 	blt	r2,zero,80091d0 <__sbprintf+0x80>
 80091c0:	d9410004 	addi	r5,sp,1024
 80091c4:	9009883a 	mov	r4,r18
 80091c8:	800458c0 	call	800458c <_fflush_r>
 80091cc:	10000d1e 	bne	r2,zero,8009204 <__sbprintf+0xb4>
 80091d0:	d881030b 	ldhu	r2,1036(sp)
 80091d4:	1080100c 	andi	r2,r2,64
 80091d8:	10000326 	beq	r2,zero,80091e8 <__sbprintf+0x98>
 80091dc:	8080030b 	ldhu	r2,12(r16)
 80091e0:	10801014 	ori	r2,r2,64
 80091e4:	8080030d 	sth	r2,12(r16)
 80091e8:	8805883a 	mov	r2,r17
 80091ec:	dfc11d17 	ldw	ra,1140(sp)
 80091f0:	dc811c17 	ldw	r18,1136(sp)
 80091f4:	dc411b17 	ldw	r17,1132(sp)
 80091f8:	dc011a17 	ldw	r16,1128(sp)
 80091fc:	dec11e04 	addi	sp,sp,1144
 8009200:	f800283a 	ret
 8009204:	047fffc4 	movi	r17,-1
 8009208:	003ff106 	br	80091d0 <__alt_data_end+0xff0091d0>

0800920c <_write_r>:
 800920c:	defffd04 	addi	sp,sp,-12
 8009210:	2805883a 	mov	r2,r5
 8009214:	dc000015 	stw	r16,0(sp)
 8009218:	04020074 	movhi	r16,2049
 800921c:	dc400115 	stw	r17,4(sp)
 8009220:	300b883a 	mov	r5,r6
 8009224:	84144b04 	addi	r16,r16,20780
 8009228:	2023883a 	mov	r17,r4
 800922c:	380d883a 	mov	r6,r7
 8009230:	1009883a 	mov	r4,r2
 8009234:	dfc00215 	stw	ra,8(sp)
 8009238:	80000015 	stw	zero,0(r16)
 800923c:	800d6580 	call	800d658 <write>
 8009240:	00ffffc4 	movi	r3,-1
 8009244:	10c00526 	beq	r2,r3,800925c <_write_r+0x50>
 8009248:	dfc00217 	ldw	ra,8(sp)
 800924c:	dc400117 	ldw	r17,4(sp)
 8009250:	dc000017 	ldw	r16,0(sp)
 8009254:	dec00304 	addi	sp,sp,12
 8009258:	f800283a 	ret
 800925c:	80c00017 	ldw	r3,0(r16)
 8009260:	183ff926 	beq	r3,zero,8009248 <__alt_data_end+0xff009248>
 8009264:	88c00015 	stw	r3,0(r17)
 8009268:	003ff706 	br	8009248 <__alt_data_end+0xff009248>

0800926c <_close_r>:
 800926c:	defffd04 	addi	sp,sp,-12
 8009270:	dc000015 	stw	r16,0(sp)
 8009274:	04020074 	movhi	r16,2049
 8009278:	dc400115 	stw	r17,4(sp)
 800927c:	84144b04 	addi	r16,r16,20780
 8009280:	2023883a 	mov	r17,r4
 8009284:	2809883a 	mov	r4,r5
 8009288:	dfc00215 	stw	ra,8(sp)
 800928c:	80000015 	stw	zero,0(r16)
 8009290:	800ce480 	call	800ce48 <close>
 8009294:	00ffffc4 	movi	r3,-1
 8009298:	10c00526 	beq	r2,r3,80092b0 <_close_r+0x44>
 800929c:	dfc00217 	ldw	ra,8(sp)
 80092a0:	dc400117 	ldw	r17,4(sp)
 80092a4:	dc000017 	ldw	r16,0(sp)
 80092a8:	dec00304 	addi	sp,sp,12
 80092ac:	f800283a 	ret
 80092b0:	80c00017 	ldw	r3,0(r16)
 80092b4:	183ff926 	beq	r3,zero,800929c <__alt_data_end+0xff00929c>
 80092b8:	88c00015 	stw	r3,0(r17)
 80092bc:	003ff706 	br	800929c <__alt_data_end+0xff00929c>

080092c0 <_calloc_r>:
 80092c0:	298b383a 	mul	r5,r5,r6
 80092c4:	defffe04 	addi	sp,sp,-8
 80092c8:	dfc00115 	stw	ra,4(sp)
 80092cc:	dc000015 	stw	r16,0(sp)
 80092d0:	80056c80 	call	80056c8 <_malloc_r>
 80092d4:	10002926 	beq	r2,zero,800937c <_calloc_r+0xbc>
 80092d8:	11bfff17 	ldw	r6,-4(r2)
 80092dc:	1021883a 	mov	r16,r2
 80092e0:	00bfff04 	movi	r2,-4
 80092e4:	308c703a 	and	r6,r6,r2
 80092e8:	00c00904 	movi	r3,36
 80092ec:	308d883a 	add	r6,r6,r2
 80092f0:	19801636 	bltu	r3,r6,800934c <_calloc_r+0x8c>
 80092f4:	008004c4 	movi	r2,19
 80092f8:	11800b2e 	bgeu	r2,r6,8009328 <_calloc_r+0x68>
 80092fc:	80000015 	stw	zero,0(r16)
 8009300:	80000115 	stw	zero,4(r16)
 8009304:	008006c4 	movi	r2,27
 8009308:	11801a2e 	bgeu	r2,r6,8009374 <_calloc_r+0xb4>
 800930c:	80000215 	stw	zero,8(r16)
 8009310:	80000315 	stw	zero,12(r16)
 8009314:	30c0151e 	bne	r6,r3,800936c <_calloc_r+0xac>
 8009318:	80000415 	stw	zero,16(r16)
 800931c:	80800604 	addi	r2,r16,24
 8009320:	80000515 	stw	zero,20(r16)
 8009324:	00000106 	br	800932c <_calloc_r+0x6c>
 8009328:	8005883a 	mov	r2,r16
 800932c:	10000015 	stw	zero,0(r2)
 8009330:	10000115 	stw	zero,4(r2)
 8009334:	10000215 	stw	zero,8(r2)
 8009338:	8005883a 	mov	r2,r16
 800933c:	dfc00117 	ldw	ra,4(sp)
 8009340:	dc000017 	ldw	r16,0(sp)
 8009344:	dec00204 	addi	sp,sp,8
 8009348:	f800283a 	ret
 800934c:	000b883a 	mov	r5,zero
 8009350:	8009883a 	mov	r4,r16
 8009354:	800625c0 	call	800625c <memset>
 8009358:	8005883a 	mov	r2,r16
 800935c:	dfc00117 	ldw	ra,4(sp)
 8009360:	dc000017 	ldw	r16,0(sp)
 8009364:	dec00204 	addi	sp,sp,8
 8009368:	f800283a 	ret
 800936c:	80800404 	addi	r2,r16,16
 8009370:	003fee06 	br	800932c <__alt_data_end+0xff00932c>
 8009374:	80800204 	addi	r2,r16,8
 8009378:	003fec06 	br	800932c <__alt_data_end+0xff00932c>
 800937c:	0005883a 	mov	r2,zero
 8009380:	003fee06 	br	800933c <__alt_data_end+0xff00933c>

08009384 <_fclose_r>:
 8009384:	28003926 	beq	r5,zero,800946c <_fclose_r+0xe8>
 8009388:	defffc04 	addi	sp,sp,-16
 800938c:	dc400115 	stw	r17,4(sp)
 8009390:	dc000015 	stw	r16,0(sp)
 8009394:	dfc00315 	stw	ra,12(sp)
 8009398:	dc800215 	stw	r18,8(sp)
 800939c:	2023883a 	mov	r17,r4
 80093a0:	2821883a 	mov	r16,r5
 80093a4:	20000226 	beq	r4,zero,80093b0 <_fclose_r+0x2c>
 80093a8:	20800e17 	ldw	r2,56(r4)
 80093ac:	10002726 	beq	r2,zero,800944c <_fclose_r+0xc8>
 80093b0:	8080030f 	ldh	r2,12(r16)
 80093b4:	1000071e 	bne	r2,zero,80093d4 <_fclose_r+0x50>
 80093b8:	0005883a 	mov	r2,zero
 80093bc:	dfc00317 	ldw	ra,12(sp)
 80093c0:	dc800217 	ldw	r18,8(sp)
 80093c4:	dc400117 	ldw	r17,4(sp)
 80093c8:	dc000017 	ldw	r16,0(sp)
 80093cc:	dec00404 	addi	sp,sp,16
 80093d0:	f800283a 	ret
 80093d4:	800b883a 	mov	r5,r16
 80093d8:	8809883a 	mov	r4,r17
 80093dc:	80043700 	call	8004370 <__sflush_r>
 80093e0:	1025883a 	mov	r18,r2
 80093e4:	80800b17 	ldw	r2,44(r16)
 80093e8:	10000426 	beq	r2,zero,80093fc <_fclose_r+0x78>
 80093ec:	81400717 	ldw	r5,28(r16)
 80093f0:	8809883a 	mov	r4,r17
 80093f4:	103ee83a 	callr	r2
 80093f8:	10001616 	blt	r2,zero,8009454 <_fclose_r+0xd0>
 80093fc:	8080030b 	ldhu	r2,12(r16)
 8009400:	1080200c 	andi	r2,r2,128
 8009404:	1000151e 	bne	r2,zero,800945c <_fclose_r+0xd8>
 8009408:	81400c17 	ldw	r5,48(r16)
 800940c:	28000526 	beq	r5,zero,8009424 <_fclose_r+0xa0>
 8009410:	80801004 	addi	r2,r16,64
 8009414:	28800226 	beq	r5,r2,8009420 <_fclose_r+0x9c>
 8009418:	8809883a 	mov	r4,r17
 800941c:	8004adc0 	call	8004adc <_free_r>
 8009420:	80000c15 	stw	zero,48(r16)
 8009424:	81401117 	ldw	r5,68(r16)
 8009428:	28000326 	beq	r5,zero,8009438 <_fclose_r+0xb4>
 800942c:	8809883a 	mov	r4,r17
 8009430:	8004adc0 	call	8004adc <_free_r>
 8009434:	80001115 	stw	zero,68(r16)
 8009438:	80049780 	call	8004978 <__sfp_lock_acquire>
 800943c:	8000030d 	sth	zero,12(r16)
 8009440:	800497c0 	call	800497c <__sfp_lock_release>
 8009444:	9005883a 	mov	r2,r18
 8009448:	003fdc06 	br	80093bc <__alt_data_end+0xff0093bc>
 800944c:	80049680 	call	8004968 <__sinit>
 8009450:	003fd706 	br	80093b0 <__alt_data_end+0xff0093b0>
 8009454:	04bfffc4 	movi	r18,-1
 8009458:	003fe806 	br	80093fc <__alt_data_end+0xff0093fc>
 800945c:	81400417 	ldw	r5,16(r16)
 8009460:	8809883a 	mov	r4,r17
 8009464:	8004adc0 	call	8004adc <_free_r>
 8009468:	003fe706 	br	8009408 <__alt_data_end+0xff009408>
 800946c:	0005883a 	mov	r2,zero
 8009470:	f800283a 	ret

08009474 <fclose>:
 8009474:	00820074 	movhi	r2,2049
 8009478:	108d6904 	addi	r2,r2,13732
 800947c:	200b883a 	mov	r5,r4
 8009480:	11000017 	ldw	r4,0(r2)
 8009484:	80093841 	jmpi	8009384 <_fclose_r>

08009488 <__fputwc>:
 8009488:	defff804 	addi	sp,sp,-32
 800948c:	dcc00415 	stw	r19,16(sp)
 8009490:	dc800315 	stw	r18,12(sp)
 8009494:	dc000115 	stw	r16,4(sp)
 8009498:	dfc00715 	stw	ra,28(sp)
 800949c:	dd400615 	stw	r21,24(sp)
 80094a0:	dd000515 	stw	r20,20(sp)
 80094a4:	dc400215 	stw	r17,8(sp)
 80094a8:	2027883a 	mov	r19,r4
 80094ac:	2825883a 	mov	r18,r5
 80094b0:	3021883a 	mov	r16,r6
 80094b4:	80054b80 	call	80054b8 <__locale_mb_cur_max>
 80094b8:	00c00044 	movi	r3,1
 80094bc:	10c03e26 	beq	r2,r3,80095b8 <__fputwc+0x130>
 80094c0:	81c01704 	addi	r7,r16,92
 80094c4:	900d883a 	mov	r6,r18
 80094c8:	d80b883a 	mov	r5,sp
 80094cc:	9809883a 	mov	r4,r19
 80094d0:	80099580 	call	8009958 <_wcrtomb_r>
 80094d4:	1029883a 	mov	r20,r2
 80094d8:	00bfffc4 	movi	r2,-1
 80094dc:	a0802026 	beq	r20,r2,8009560 <__fputwc+0xd8>
 80094e0:	d9400003 	ldbu	r5,0(sp)
 80094e4:	a0001c26 	beq	r20,zero,8009558 <__fputwc+0xd0>
 80094e8:	0023883a 	mov	r17,zero
 80094ec:	05400284 	movi	r21,10
 80094f0:	00000906 	br	8009518 <__fputwc+0x90>
 80094f4:	80800017 	ldw	r2,0(r16)
 80094f8:	11400005 	stb	r5,0(r2)
 80094fc:	80c00017 	ldw	r3,0(r16)
 8009500:	18c00044 	addi	r3,r3,1
 8009504:	80c00015 	stw	r3,0(r16)
 8009508:	8c400044 	addi	r17,r17,1
 800950c:	dc45883a 	add	r2,sp,r17
 8009510:	8d00112e 	bgeu	r17,r20,8009558 <__fputwc+0xd0>
 8009514:	11400003 	ldbu	r5,0(r2)
 8009518:	80c00217 	ldw	r3,8(r16)
 800951c:	18ffffc4 	addi	r3,r3,-1
 8009520:	80c00215 	stw	r3,8(r16)
 8009524:	183ff30e 	bge	r3,zero,80094f4 <__alt_data_end+0xff0094f4>
 8009528:	80800617 	ldw	r2,24(r16)
 800952c:	18801916 	blt	r3,r2,8009594 <__fputwc+0x10c>
 8009530:	80800017 	ldw	r2,0(r16)
 8009534:	11400005 	stb	r5,0(r2)
 8009538:	80800017 	ldw	r2,0(r16)
 800953c:	10c00003 	ldbu	r3,0(r2)
 8009540:	10800044 	addi	r2,r2,1
 8009544:	1d402326 	beq	r3,r21,80095d4 <__fputwc+0x14c>
 8009548:	80800015 	stw	r2,0(r16)
 800954c:	8c400044 	addi	r17,r17,1
 8009550:	dc45883a 	add	r2,sp,r17
 8009554:	8d3fef36 	bltu	r17,r20,8009514 <__alt_data_end+0xff009514>
 8009558:	9005883a 	mov	r2,r18
 800955c:	00000406 	br	8009570 <__fputwc+0xe8>
 8009560:	80c0030b 	ldhu	r3,12(r16)
 8009564:	a005883a 	mov	r2,r20
 8009568:	18c01014 	ori	r3,r3,64
 800956c:	80c0030d 	sth	r3,12(r16)
 8009570:	dfc00717 	ldw	ra,28(sp)
 8009574:	dd400617 	ldw	r21,24(sp)
 8009578:	dd000517 	ldw	r20,20(sp)
 800957c:	dcc00417 	ldw	r19,16(sp)
 8009580:	dc800317 	ldw	r18,12(sp)
 8009584:	dc400217 	ldw	r17,8(sp)
 8009588:	dc000117 	ldw	r16,4(sp)
 800958c:	dec00804 	addi	sp,sp,32
 8009590:	f800283a 	ret
 8009594:	800d883a 	mov	r6,r16
 8009598:	29403fcc 	andi	r5,r5,255
 800959c:	9809883a 	mov	r4,r19
 80095a0:	80098000 	call	8009800 <__swbuf_r>
 80095a4:	10bfffe0 	cmpeqi	r2,r2,-1
 80095a8:	10803fcc 	andi	r2,r2,255
 80095ac:	103fd626 	beq	r2,zero,8009508 <__alt_data_end+0xff009508>
 80095b0:	00bfffc4 	movi	r2,-1
 80095b4:	003fee06 	br	8009570 <__alt_data_end+0xff009570>
 80095b8:	90ffffc4 	addi	r3,r18,-1
 80095bc:	01003f84 	movi	r4,254
 80095c0:	20ffbf36 	bltu	r4,r3,80094c0 <__alt_data_end+0xff0094c0>
 80095c4:	900b883a 	mov	r5,r18
 80095c8:	dc800005 	stb	r18,0(sp)
 80095cc:	1029883a 	mov	r20,r2
 80095d0:	003fc506 	br	80094e8 <__alt_data_end+0xff0094e8>
 80095d4:	800d883a 	mov	r6,r16
 80095d8:	a80b883a 	mov	r5,r21
 80095dc:	9809883a 	mov	r4,r19
 80095e0:	80098000 	call	8009800 <__swbuf_r>
 80095e4:	10bfffe0 	cmpeqi	r2,r2,-1
 80095e8:	003fef06 	br	80095a8 <__alt_data_end+0xff0095a8>

080095ec <_fputwc_r>:
 80095ec:	3080030b 	ldhu	r2,12(r6)
 80095f0:	10c8000c 	andi	r3,r2,8192
 80095f4:	1800051e 	bne	r3,zero,800960c <_fputwc_r+0x20>
 80095f8:	30c01917 	ldw	r3,100(r6)
 80095fc:	10880014 	ori	r2,r2,8192
 8009600:	3080030d 	sth	r2,12(r6)
 8009604:	18880014 	ori	r2,r3,8192
 8009608:	30801915 	stw	r2,100(r6)
 800960c:	80094881 	jmpi	8009488 <__fputwc>

08009610 <fputwc>:
 8009610:	00820074 	movhi	r2,2049
 8009614:	defffc04 	addi	sp,sp,-16
 8009618:	108d6904 	addi	r2,r2,13732
 800961c:	dc000115 	stw	r16,4(sp)
 8009620:	14000017 	ldw	r16,0(r2)
 8009624:	dc400215 	stw	r17,8(sp)
 8009628:	dfc00315 	stw	ra,12(sp)
 800962c:	2023883a 	mov	r17,r4
 8009630:	80000226 	beq	r16,zero,800963c <fputwc+0x2c>
 8009634:	80800e17 	ldw	r2,56(r16)
 8009638:	10001026 	beq	r2,zero,800967c <fputwc+0x6c>
 800963c:	2880030b 	ldhu	r2,12(r5)
 8009640:	10c8000c 	andi	r3,r2,8192
 8009644:	1800051e 	bne	r3,zero,800965c <fputwc+0x4c>
 8009648:	28c01917 	ldw	r3,100(r5)
 800964c:	10880014 	ori	r2,r2,8192
 8009650:	2880030d 	sth	r2,12(r5)
 8009654:	18880014 	ori	r2,r3,8192
 8009658:	28801915 	stw	r2,100(r5)
 800965c:	280d883a 	mov	r6,r5
 8009660:	8009883a 	mov	r4,r16
 8009664:	880b883a 	mov	r5,r17
 8009668:	dfc00317 	ldw	ra,12(sp)
 800966c:	dc400217 	ldw	r17,8(sp)
 8009670:	dc000117 	ldw	r16,4(sp)
 8009674:	dec00404 	addi	sp,sp,16
 8009678:	80094881 	jmpi	8009488 <__fputwc>
 800967c:	8009883a 	mov	r4,r16
 8009680:	d9400015 	stw	r5,0(sp)
 8009684:	80049680 	call	8004968 <__sinit>
 8009688:	d9400017 	ldw	r5,0(sp)
 800968c:	003feb06 	br	800963c <__alt_data_end+0xff00963c>

08009690 <_fstat_r>:
 8009690:	defffd04 	addi	sp,sp,-12
 8009694:	2805883a 	mov	r2,r5
 8009698:	dc000015 	stw	r16,0(sp)
 800969c:	04020074 	movhi	r16,2049
 80096a0:	dc400115 	stw	r17,4(sp)
 80096a4:	84144b04 	addi	r16,r16,20780
 80096a8:	2023883a 	mov	r17,r4
 80096ac:	300b883a 	mov	r5,r6
 80096b0:	1009883a 	mov	r4,r2
 80096b4:	dfc00215 	stw	ra,8(sp)
 80096b8:	80000015 	stw	zero,0(r16)
 80096bc:	800cf800 	call	800cf80 <fstat>
 80096c0:	00ffffc4 	movi	r3,-1
 80096c4:	10c00526 	beq	r2,r3,80096dc <_fstat_r+0x4c>
 80096c8:	dfc00217 	ldw	ra,8(sp)
 80096cc:	dc400117 	ldw	r17,4(sp)
 80096d0:	dc000017 	ldw	r16,0(sp)
 80096d4:	dec00304 	addi	sp,sp,12
 80096d8:	f800283a 	ret
 80096dc:	80c00017 	ldw	r3,0(r16)
 80096e0:	183ff926 	beq	r3,zero,80096c8 <__alt_data_end+0xff0096c8>
 80096e4:	88c00015 	stw	r3,0(r17)
 80096e8:	003ff706 	br	80096c8 <__alt_data_end+0xff0096c8>

080096ec <_isatty_r>:
 80096ec:	defffd04 	addi	sp,sp,-12
 80096f0:	dc000015 	stw	r16,0(sp)
 80096f4:	04020074 	movhi	r16,2049
 80096f8:	dc400115 	stw	r17,4(sp)
 80096fc:	84144b04 	addi	r16,r16,20780
 8009700:	2023883a 	mov	r17,r4
 8009704:	2809883a 	mov	r4,r5
 8009708:	dfc00215 	stw	ra,8(sp)
 800970c:	80000015 	stw	zero,0(r16)
 8009710:	800d06c0 	call	800d06c <isatty>
 8009714:	00ffffc4 	movi	r3,-1
 8009718:	10c00526 	beq	r2,r3,8009730 <_isatty_r+0x44>
 800971c:	dfc00217 	ldw	ra,8(sp)
 8009720:	dc400117 	ldw	r17,4(sp)
 8009724:	dc000017 	ldw	r16,0(sp)
 8009728:	dec00304 	addi	sp,sp,12
 800972c:	f800283a 	ret
 8009730:	80c00017 	ldw	r3,0(r16)
 8009734:	183ff926 	beq	r3,zero,800971c <__alt_data_end+0xff00971c>
 8009738:	88c00015 	stw	r3,0(r17)
 800973c:	003ff706 	br	800971c <__alt_data_end+0xff00971c>

08009740 <_lseek_r>:
 8009740:	defffd04 	addi	sp,sp,-12
 8009744:	2805883a 	mov	r2,r5
 8009748:	dc000015 	stw	r16,0(sp)
 800974c:	04020074 	movhi	r16,2049
 8009750:	dc400115 	stw	r17,4(sp)
 8009754:	300b883a 	mov	r5,r6
 8009758:	84144b04 	addi	r16,r16,20780
 800975c:	2023883a 	mov	r17,r4
 8009760:	380d883a 	mov	r6,r7
 8009764:	1009883a 	mov	r4,r2
 8009768:	dfc00215 	stw	ra,8(sp)
 800976c:	80000015 	stw	zero,0(r16)
 8009770:	800d2380 	call	800d238 <lseek>
 8009774:	00ffffc4 	movi	r3,-1
 8009778:	10c00526 	beq	r2,r3,8009790 <_lseek_r+0x50>
 800977c:	dfc00217 	ldw	ra,8(sp)
 8009780:	dc400117 	ldw	r17,4(sp)
 8009784:	dc000017 	ldw	r16,0(sp)
 8009788:	dec00304 	addi	sp,sp,12
 800978c:	f800283a 	ret
 8009790:	80c00017 	ldw	r3,0(r16)
 8009794:	183ff926 	beq	r3,zero,800977c <__alt_data_end+0xff00977c>
 8009798:	88c00015 	stw	r3,0(r17)
 800979c:	003ff706 	br	800977c <__alt_data_end+0xff00977c>

080097a0 <_read_r>:
 80097a0:	defffd04 	addi	sp,sp,-12
 80097a4:	2805883a 	mov	r2,r5
 80097a8:	dc000015 	stw	r16,0(sp)
 80097ac:	04020074 	movhi	r16,2049
 80097b0:	dc400115 	stw	r17,4(sp)
 80097b4:	300b883a 	mov	r5,r6
 80097b8:	84144b04 	addi	r16,r16,20780
 80097bc:	2023883a 	mov	r17,r4
 80097c0:	380d883a 	mov	r6,r7
 80097c4:	1009883a 	mov	r4,r2
 80097c8:	dfc00215 	stw	ra,8(sp)
 80097cc:	80000015 	stw	zero,0(r16)
 80097d0:	800d40c0 	call	800d40c <read>
 80097d4:	00ffffc4 	movi	r3,-1
 80097d8:	10c00526 	beq	r2,r3,80097f0 <_read_r+0x50>
 80097dc:	dfc00217 	ldw	ra,8(sp)
 80097e0:	dc400117 	ldw	r17,4(sp)
 80097e4:	dc000017 	ldw	r16,0(sp)
 80097e8:	dec00304 	addi	sp,sp,12
 80097ec:	f800283a 	ret
 80097f0:	80c00017 	ldw	r3,0(r16)
 80097f4:	183ff926 	beq	r3,zero,80097dc <__alt_data_end+0xff0097dc>
 80097f8:	88c00015 	stw	r3,0(r17)
 80097fc:	003ff706 	br	80097dc <__alt_data_end+0xff0097dc>

08009800 <__swbuf_r>:
 8009800:	defffb04 	addi	sp,sp,-20
 8009804:	dcc00315 	stw	r19,12(sp)
 8009808:	dc800215 	stw	r18,8(sp)
 800980c:	dc000015 	stw	r16,0(sp)
 8009810:	dfc00415 	stw	ra,16(sp)
 8009814:	dc400115 	stw	r17,4(sp)
 8009818:	2025883a 	mov	r18,r4
 800981c:	2827883a 	mov	r19,r5
 8009820:	3021883a 	mov	r16,r6
 8009824:	20000226 	beq	r4,zero,8009830 <__swbuf_r+0x30>
 8009828:	20800e17 	ldw	r2,56(r4)
 800982c:	10004226 	beq	r2,zero,8009938 <__swbuf_r+0x138>
 8009830:	80800617 	ldw	r2,24(r16)
 8009834:	8100030b 	ldhu	r4,12(r16)
 8009838:	80800215 	stw	r2,8(r16)
 800983c:	2080020c 	andi	r2,r4,8
 8009840:	10003626 	beq	r2,zero,800991c <__swbuf_r+0x11c>
 8009844:	80c00417 	ldw	r3,16(r16)
 8009848:	18003426 	beq	r3,zero,800991c <__swbuf_r+0x11c>
 800984c:	2088000c 	andi	r2,r4,8192
 8009850:	9c403fcc 	andi	r17,r19,255
 8009854:	10001a26 	beq	r2,zero,80098c0 <__swbuf_r+0xc0>
 8009858:	80800017 	ldw	r2,0(r16)
 800985c:	81000517 	ldw	r4,20(r16)
 8009860:	10c7c83a 	sub	r3,r2,r3
 8009864:	1900200e 	bge	r3,r4,80098e8 <__swbuf_r+0xe8>
 8009868:	18c00044 	addi	r3,r3,1
 800986c:	81000217 	ldw	r4,8(r16)
 8009870:	11400044 	addi	r5,r2,1
 8009874:	81400015 	stw	r5,0(r16)
 8009878:	213fffc4 	addi	r4,r4,-1
 800987c:	81000215 	stw	r4,8(r16)
 8009880:	14c00005 	stb	r19,0(r2)
 8009884:	80800517 	ldw	r2,20(r16)
 8009888:	10c01e26 	beq	r2,r3,8009904 <__swbuf_r+0x104>
 800988c:	8080030b 	ldhu	r2,12(r16)
 8009890:	1080004c 	andi	r2,r2,1
 8009894:	10000226 	beq	r2,zero,80098a0 <__swbuf_r+0xa0>
 8009898:	00800284 	movi	r2,10
 800989c:	88801926 	beq	r17,r2,8009904 <__swbuf_r+0x104>
 80098a0:	8805883a 	mov	r2,r17
 80098a4:	dfc00417 	ldw	ra,16(sp)
 80098a8:	dcc00317 	ldw	r19,12(sp)
 80098ac:	dc800217 	ldw	r18,8(sp)
 80098b0:	dc400117 	ldw	r17,4(sp)
 80098b4:	dc000017 	ldw	r16,0(sp)
 80098b8:	dec00504 	addi	sp,sp,20
 80098bc:	f800283a 	ret
 80098c0:	81401917 	ldw	r5,100(r16)
 80098c4:	00b7ffc4 	movi	r2,-8193
 80098c8:	21080014 	ori	r4,r4,8192
 80098cc:	2884703a 	and	r2,r5,r2
 80098d0:	80801915 	stw	r2,100(r16)
 80098d4:	80800017 	ldw	r2,0(r16)
 80098d8:	8100030d 	sth	r4,12(r16)
 80098dc:	81000517 	ldw	r4,20(r16)
 80098e0:	10c7c83a 	sub	r3,r2,r3
 80098e4:	193fe016 	blt	r3,r4,8009868 <__alt_data_end+0xff009868>
 80098e8:	800b883a 	mov	r5,r16
 80098ec:	9009883a 	mov	r4,r18
 80098f0:	800458c0 	call	800458c <_fflush_r>
 80098f4:	1000071e 	bne	r2,zero,8009914 <__swbuf_r+0x114>
 80098f8:	80800017 	ldw	r2,0(r16)
 80098fc:	00c00044 	movi	r3,1
 8009900:	003fda06 	br	800986c <__alt_data_end+0xff00986c>
 8009904:	800b883a 	mov	r5,r16
 8009908:	9009883a 	mov	r4,r18
 800990c:	800458c0 	call	800458c <_fflush_r>
 8009910:	103fe326 	beq	r2,zero,80098a0 <__alt_data_end+0xff0098a0>
 8009914:	00bfffc4 	movi	r2,-1
 8009918:	003fe206 	br	80098a4 <__alt_data_end+0xff0098a4>
 800991c:	800b883a 	mov	r5,r16
 8009920:	9009883a 	mov	r4,r18
 8009924:	80029940 	call	8002994 <__swsetup_r>
 8009928:	103ffa1e 	bne	r2,zero,8009914 <__alt_data_end+0xff009914>
 800992c:	8100030b 	ldhu	r4,12(r16)
 8009930:	80c00417 	ldw	r3,16(r16)
 8009934:	003fc506 	br	800984c <__alt_data_end+0xff00984c>
 8009938:	80049680 	call	8004968 <__sinit>
 800993c:	003fbc06 	br	8009830 <__alt_data_end+0xff009830>

08009940 <__swbuf>:
 8009940:	00820074 	movhi	r2,2049
 8009944:	108d6904 	addi	r2,r2,13732
 8009948:	280d883a 	mov	r6,r5
 800994c:	200b883a 	mov	r5,r4
 8009950:	11000017 	ldw	r4,0(r2)
 8009954:	80098001 	jmpi	8009800 <__swbuf_r>

08009958 <_wcrtomb_r>:
 8009958:	defff604 	addi	sp,sp,-40
 800995c:	00820074 	movhi	r2,2049
 8009960:	dc800815 	stw	r18,32(sp)
 8009964:	dc400715 	stw	r17,28(sp)
 8009968:	dc000615 	stw	r16,24(sp)
 800996c:	108d6d04 	addi	r2,r2,13748
 8009970:	dfc00915 	stw	ra,36(sp)
 8009974:	2021883a 	mov	r16,r4
 8009978:	3823883a 	mov	r17,r7
 800997c:	14800017 	ldw	r18,0(r2)
 8009980:	28001426 	beq	r5,zero,80099d4 <_wcrtomb_r+0x7c>
 8009984:	d9400415 	stw	r5,16(sp)
 8009988:	d9800515 	stw	r6,20(sp)
 800998c:	80054ac0 	call	80054ac <__locale_charset>
 8009990:	d9800517 	ldw	r6,20(sp)
 8009994:	d9400417 	ldw	r5,16(sp)
 8009998:	100f883a 	mov	r7,r2
 800999c:	dc400015 	stw	r17,0(sp)
 80099a0:	8009883a 	mov	r4,r16
 80099a4:	903ee83a 	callr	r18
 80099a8:	00ffffc4 	movi	r3,-1
 80099ac:	10c0031e 	bne	r2,r3,80099bc <_wcrtomb_r+0x64>
 80099b0:	88000015 	stw	zero,0(r17)
 80099b4:	00c02284 	movi	r3,138
 80099b8:	80c00015 	stw	r3,0(r16)
 80099bc:	dfc00917 	ldw	ra,36(sp)
 80099c0:	dc800817 	ldw	r18,32(sp)
 80099c4:	dc400717 	ldw	r17,28(sp)
 80099c8:	dc000617 	ldw	r16,24(sp)
 80099cc:	dec00a04 	addi	sp,sp,40
 80099d0:	f800283a 	ret
 80099d4:	80054ac0 	call	80054ac <__locale_charset>
 80099d8:	100f883a 	mov	r7,r2
 80099dc:	dc400015 	stw	r17,0(sp)
 80099e0:	000d883a 	mov	r6,zero
 80099e4:	d9400104 	addi	r5,sp,4
 80099e8:	8009883a 	mov	r4,r16
 80099ec:	903ee83a 	callr	r18
 80099f0:	003fed06 	br	80099a8 <__alt_data_end+0xff0099a8>

080099f4 <wcrtomb>:
 80099f4:	defff604 	addi	sp,sp,-40
 80099f8:	00820074 	movhi	r2,2049
 80099fc:	dc800615 	stw	r18,24(sp)
 8009a00:	dc400515 	stw	r17,20(sp)
 8009a04:	108d6904 	addi	r2,r2,13732
 8009a08:	dfc00915 	stw	ra,36(sp)
 8009a0c:	dd000815 	stw	r20,32(sp)
 8009a10:	dcc00715 	stw	r19,28(sp)
 8009a14:	dc000415 	stw	r16,16(sp)
 8009a18:	3025883a 	mov	r18,r6
 8009a1c:	14400017 	ldw	r17,0(r2)
 8009a20:	20001926 	beq	r4,zero,8009a88 <wcrtomb+0x94>
 8009a24:	00820074 	movhi	r2,2049
 8009a28:	108d6d04 	addi	r2,r2,13748
 8009a2c:	15000017 	ldw	r20,0(r2)
 8009a30:	2021883a 	mov	r16,r4
 8009a34:	2827883a 	mov	r19,r5
 8009a38:	80054ac0 	call	80054ac <__locale_charset>
 8009a3c:	100f883a 	mov	r7,r2
 8009a40:	dc800015 	stw	r18,0(sp)
 8009a44:	980d883a 	mov	r6,r19
 8009a48:	800b883a 	mov	r5,r16
 8009a4c:	8809883a 	mov	r4,r17
 8009a50:	a03ee83a 	callr	r20
 8009a54:	00ffffc4 	movi	r3,-1
 8009a58:	10c0031e 	bne	r2,r3,8009a68 <wcrtomb+0x74>
 8009a5c:	90000015 	stw	zero,0(r18)
 8009a60:	00c02284 	movi	r3,138
 8009a64:	88c00015 	stw	r3,0(r17)
 8009a68:	dfc00917 	ldw	ra,36(sp)
 8009a6c:	dd000817 	ldw	r20,32(sp)
 8009a70:	dcc00717 	ldw	r19,28(sp)
 8009a74:	dc800617 	ldw	r18,24(sp)
 8009a78:	dc400517 	ldw	r17,20(sp)
 8009a7c:	dc000417 	ldw	r16,16(sp)
 8009a80:	dec00a04 	addi	sp,sp,40
 8009a84:	f800283a 	ret
 8009a88:	00820074 	movhi	r2,2049
 8009a8c:	108d6d04 	addi	r2,r2,13748
 8009a90:	14000017 	ldw	r16,0(r2)
 8009a94:	80054ac0 	call	80054ac <__locale_charset>
 8009a98:	100f883a 	mov	r7,r2
 8009a9c:	dc800015 	stw	r18,0(sp)
 8009aa0:	000d883a 	mov	r6,zero
 8009aa4:	d9400104 	addi	r5,sp,4
 8009aa8:	8809883a 	mov	r4,r17
 8009aac:	803ee83a 	callr	r16
 8009ab0:	003fe806 	br	8009a54 <__alt_data_end+0xff009a54>

08009ab4 <__ascii_wctomb>:
 8009ab4:	28000526 	beq	r5,zero,8009acc <__ascii_wctomb+0x18>
 8009ab8:	00803fc4 	movi	r2,255
 8009abc:	11800536 	bltu	r2,r6,8009ad4 <__ascii_wctomb+0x20>
 8009ac0:	29800005 	stb	r6,0(r5)
 8009ac4:	00800044 	movi	r2,1
 8009ac8:	f800283a 	ret
 8009acc:	0005883a 	mov	r2,zero
 8009ad0:	f800283a 	ret
 8009ad4:	00802284 	movi	r2,138
 8009ad8:	20800015 	stw	r2,0(r4)
 8009adc:	00bfffc4 	movi	r2,-1
 8009ae0:	f800283a 	ret

08009ae4 <_wctomb_r>:
 8009ae4:	00820074 	movhi	r2,2049
 8009ae8:	defff904 	addi	sp,sp,-28
 8009aec:	108d6d04 	addi	r2,r2,13748
 8009af0:	dfc00615 	stw	ra,24(sp)
 8009af4:	dc400515 	stw	r17,20(sp)
 8009af8:	dc000415 	stw	r16,16(sp)
 8009afc:	3823883a 	mov	r17,r7
 8009b00:	14000017 	ldw	r16,0(r2)
 8009b04:	d9000115 	stw	r4,4(sp)
 8009b08:	d9400215 	stw	r5,8(sp)
 8009b0c:	d9800315 	stw	r6,12(sp)
 8009b10:	80054ac0 	call	80054ac <__locale_charset>
 8009b14:	d9800317 	ldw	r6,12(sp)
 8009b18:	d9400217 	ldw	r5,8(sp)
 8009b1c:	d9000117 	ldw	r4,4(sp)
 8009b20:	100f883a 	mov	r7,r2
 8009b24:	dc400015 	stw	r17,0(sp)
 8009b28:	803ee83a 	callr	r16
 8009b2c:	dfc00617 	ldw	ra,24(sp)
 8009b30:	dc400517 	ldw	r17,20(sp)
 8009b34:	dc000417 	ldw	r16,16(sp)
 8009b38:	dec00704 	addi	sp,sp,28
 8009b3c:	f800283a 	ret

08009b40 <__udivdi3>:
 8009b40:	defff504 	addi	sp,sp,-44
 8009b44:	dcc00415 	stw	r19,16(sp)
 8009b48:	dc000115 	stw	r16,4(sp)
 8009b4c:	dfc00a15 	stw	ra,40(sp)
 8009b50:	df000915 	stw	fp,36(sp)
 8009b54:	ddc00815 	stw	r23,32(sp)
 8009b58:	dd800715 	stw	r22,28(sp)
 8009b5c:	dd400615 	stw	r21,24(sp)
 8009b60:	dd000515 	stw	r20,20(sp)
 8009b64:	dc800315 	stw	r18,12(sp)
 8009b68:	dc400215 	stw	r17,8(sp)
 8009b6c:	2027883a 	mov	r19,r4
 8009b70:	2821883a 	mov	r16,r5
 8009b74:	3800411e 	bne	r7,zero,8009c7c <__udivdi3+0x13c>
 8009b78:	3023883a 	mov	r17,r6
 8009b7c:	2025883a 	mov	r18,r4
 8009b80:	2980522e 	bgeu	r5,r6,8009ccc <__udivdi3+0x18c>
 8009b84:	00bfffd4 	movui	r2,65535
 8009b88:	282d883a 	mov	r22,r5
 8009b8c:	1180a836 	bltu	r2,r6,8009e30 <__udivdi3+0x2f0>
 8009b90:	00803fc4 	movi	r2,255
 8009b94:	1185803a 	cmpltu	r2,r2,r6
 8009b98:	100490fa 	slli	r2,r2,3
 8009b9c:	3086d83a 	srl	r3,r6,r2
 8009ba0:	01020074 	movhi	r4,2049
 8009ba4:	21065704 	addi	r4,r4,6492
 8009ba8:	20c7883a 	add	r3,r4,r3
 8009bac:	18c00003 	ldbu	r3,0(r3)
 8009bb0:	1885883a 	add	r2,r3,r2
 8009bb4:	00c00804 	movi	r3,32
 8009bb8:	1887c83a 	sub	r3,r3,r2
 8009bbc:	18000526 	beq	r3,zero,8009bd4 <__udivdi3+0x94>
 8009bc0:	80e0983a 	sll	r16,r16,r3
 8009bc4:	9884d83a 	srl	r2,r19,r2
 8009bc8:	30e2983a 	sll	r17,r6,r3
 8009bcc:	98e4983a 	sll	r18,r19,r3
 8009bd0:	142cb03a 	or	r22,r2,r16
 8009bd4:	882ad43a 	srli	r21,r17,16
 8009bd8:	b009883a 	mov	r4,r22
 8009bdc:	8d3fffcc 	andi	r20,r17,65535
 8009be0:	a80b883a 	mov	r5,r21
 8009be4:	800a74c0 	call	800a74c <__umodsi3>
 8009be8:	b009883a 	mov	r4,r22
 8009bec:	a80b883a 	mov	r5,r21
 8009bf0:	1027883a 	mov	r19,r2
 8009bf4:	800a6e80 	call	800a6e8 <__udivsi3>
 8009bf8:	102d883a 	mov	r22,r2
 8009bfc:	9826943a 	slli	r19,r19,16
 8009c00:	9004d43a 	srli	r2,r18,16
 8009c04:	a5a1383a 	mul	r16,r20,r22
 8009c08:	14c4b03a 	or	r2,r2,r19
 8009c0c:	1400052e 	bgeu	r2,r16,8009c24 <__udivdi3+0xe4>
 8009c10:	1445883a 	add	r2,r2,r17
 8009c14:	b0ffffc4 	addi	r3,r22,-1
 8009c18:	14400136 	bltu	r2,r17,8009c20 <__udivdi3+0xe0>
 8009c1c:	14012336 	bltu	r2,r16,800a0ac <__udivdi3+0x56c>
 8009c20:	182d883a 	mov	r22,r3
 8009c24:	1421c83a 	sub	r16,r2,r16
 8009c28:	a80b883a 	mov	r5,r21
 8009c2c:	8009883a 	mov	r4,r16
 8009c30:	800a74c0 	call	800a74c <__umodsi3>
 8009c34:	1027883a 	mov	r19,r2
 8009c38:	a80b883a 	mov	r5,r21
 8009c3c:	8009883a 	mov	r4,r16
 8009c40:	800a6e80 	call	800a6e8 <__udivsi3>
 8009c44:	9826943a 	slli	r19,r19,16
 8009c48:	a0a9383a 	mul	r20,r20,r2
 8009c4c:	94bfffcc 	andi	r18,r18,65535
 8009c50:	94e4b03a 	or	r18,r18,r19
 8009c54:	9500052e 	bgeu	r18,r20,8009c6c <__udivdi3+0x12c>
 8009c58:	8ca5883a 	add	r18,r17,r18
 8009c5c:	10ffffc4 	addi	r3,r2,-1
 8009c60:	9440f136 	bltu	r18,r17,800a028 <__udivdi3+0x4e8>
 8009c64:	9500f02e 	bgeu	r18,r20,800a028 <__udivdi3+0x4e8>
 8009c68:	10bfff84 	addi	r2,r2,-2
 8009c6c:	b00c943a 	slli	r6,r22,16
 8009c70:	0007883a 	mov	r3,zero
 8009c74:	3084b03a 	or	r2,r6,r2
 8009c78:	00005906 	br	8009de0 <__udivdi3+0x2a0>
 8009c7c:	29c05636 	bltu	r5,r7,8009dd8 <__udivdi3+0x298>
 8009c80:	00bfffd4 	movui	r2,65535
 8009c84:	11c0622e 	bgeu	r2,r7,8009e10 <__udivdi3+0x2d0>
 8009c88:	00804034 	movhi	r2,256
 8009c8c:	10bfffc4 	addi	r2,r2,-1
 8009c90:	11c0ee36 	bltu	r2,r7,800a04c <__udivdi3+0x50c>
 8009c94:	00800404 	movi	r2,16
 8009c98:	3886d83a 	srl	r3,r7,r2
 8009c9c:	01020074 	movhi	r4,2049
 8009ca0:	21065704 	addi	r4,r4,6492
 8009ca4:	20c7883a 	add	r3,r4,r3
 8009ca8:	18c00003 	ldbu	r3,0(r3)
 8009cac:	05400804 	movi	r21,32
 8009cb0:	1885883a 	add	r2,r3,r2
 8009cb4:	a8abc83a 	sub	r21,r21,r2
 8009cb8:	a800621e 	bne	r21,zero,8009e44 <__udivdi3+0x304>
 8009cbc:	3c00e936 	bltu	r7,r16,800a064 <__udivdi3+0x524>
 8009cc0:	9985403a 	cmpgeu	r2,r19,r6
 8009cc4:	0007883a 	mov	r3,zero
 8009cc8:	00004506 	br	8009de0 <__udivdi3+0x2a0>
 8009ccc:	3000041e 	bne	r6,zero,8009ce0 <__udivdi3+0x1a0>
 8009cd0:	000b883a 	mov	r5,zero
 8009cd4:	01000044 	movi	r4,1
 8009cd8:	800a6e80 	call	800a6e8 <__udivsi3>
 8009cdc:	1023883a 	mov	r17,r2
 8009ce0:	00bfffd4 	movui	r2,65535
 8009ce4:	14404e2e 	bgeu	r2,r17,8009e20 <__udivdi3+0x2e0>
 8009ce8:	00804034 	movhi	r2,256
 8009cec:	10bfffc4 	addi	r2,r2,-1
 8009cf0:	1440d836 	bltu	r2,r17,800a054 <__udivdi3+0x514>
 8009cf4:	00800404 	movi	r2,16
 8009cf8:	8886d83a 	srl	r3,r17,r2
 8009cfc:	01020074 	movhi	r4,2049
 8009d00:	21065704 	addi	r4,r4,6492
 8009d04:	20c7883a 	add	r3,r4,r3
 8009d08:	18c00003 	ldbu	r3,0(r3)
 8009d0c:	1885883a 	add	r2,r3,r2
 8009d10:	00c00804 	movi	r3,32
 8009d14:	1887c83a 	sub	r3,r3,r2
 8009d18:	18008f1e 	bne	r3,zero,8009f58 <__udivdi3+0x418>
 8009d1c:	882ad43a 	srli	r21,r17,16
 8009d20:	8461c83a 	sub	r16,r16,r17
 8009d24:	8d3fffcc 	andi	r20,r17,65535
 8009d28:	00c00044 	movi	r3,1
 8009d2c:	8009883a 	mov	r4,r16
 8009d30:	a80b883a 	mov	r5,r21
 8009d34:	d8c00015 	stw	r3,0(sp)
 8009d38:	800a74c0 	call	800a74c <__umodsi3>
 8009d3c:	8009883a 	mov	r4,r16
 8009d40:	a80b883a 	mov	r5,r21
 8009d44:	1027883a 	mov	r19,r2
 8009d48:	800a6e80 	call	800a6e8 <__udivsi3>
 8009d4c:	9826943a 	slli	r19,r19,16
 8009d50:	9008d43a 	srli	r4,r18,16
 8009d54:	1521383a 	mul	r16,r2,r20
 8009d58:	102d883a 	mov	r22,r2
 8009d5c:	24c8b03a 	or	r4,r4,r19
 8009d60:	d8c00017 	ldw	r3,0(sp)
 8009d64:	2400052e 	bgeu	r4,r16,8009d7c <__udivdi3+0x23c>
 8009d68:	2449883a 	add	r4,r4,r17
 8009d6c:	b0bfffc4 	addi	r2,r22,-1
 8009d70:	24400136 	bltu	r4,r17,8009d78 <__udivdi3+0x238>
 8009d74:	2400ca36 	bltu	r4,r16,800a0a0 <__udivdi3+0x560>
 8009d78:	102d883a 	mov	r22,r2
 8009d7c:	2421c83a 	sub	r16,r4,r16
 8009d80:	a80b883a 	mov	r5,r21
 8009d84:	8009883a 	mov	r4,r16
 8009d88:	d8c00015 	stw	r3,0(sp)
 8009d8c:	800a74c0 	call	800a74c <__umodsi3>
 8009d90:	1027883a 	mov	r19,r2
 8009d94:	a80b883a 	mov	r5,r21
 8009d98:	8009883a 	mov	r4,r16
 8009d9c:	800a6e80 	call	800a6e8 <__udivsi3>
 8009da0:	9826943a 	slli	r19,r19,16
 8009da4:	1529383a 	mul	r20,r2,r20
 8009da8:	94bfffcc 	andi	r18,r18,65535
 8009dac:	94e4b03a 	or	r18,r18,r19
 8009db0:	d8c00017 	ldw	r3,0(sp)
 8009db4:	9500052e 	bgeu	r18,r20,8009dcc <__udivdi3+0x28c>
 8009db8:	8ca5883a 	add	r18,r17,r18
 8009dbc:	113fffc4 	addi	r4,r2,-1
 8009dc0:	94409736 	bltu	r18,r17,800a020 <__udivdi3+0x4e0>
 8009dc4:	9500962e 	bgeu	r18,r20,800a020 <__udivdi3+0x4e0>
 8009dc8:	10bfff84 	addi	r2,r2,-2
 8009dcc:	b00c943a 	slli	r6,r22,16
 8009dd0:	3084b03a 	or	r2,r6,r2
 8009dd4:	00000206 	br	8009de0 <__udivdi3+0x2a0>
 8009dd8:	0007883a 	mov	r3,zero
 8009ddc:	0005883a 	mov	r2,zero
 8009de0:	dfc00a17 	ldw	ra,40(sp)
 8009de4:	df000917 	ldw	fp,36(sp)
 8009de8:	ddc00817 	ldw	r23,32(sp)
 8009dec:	dd800717 	ldw	r22,28(sp)
 8009df0:	dd400617 	ldw	r21,24(sp)
 8009df4:	dd000517 	ldw	r20,20(sp)
 8009df8:	dcc00417 	ldw	r19,16(sp)
 8009dfc:	dc800317 	ldw	r18,12(sp)
 8009e00:	dc400217 	ldw	r17,8(sp)
 8009e04:	dc000117 	ldw	r16,4(sp)
 8009e08:	dec00b04 	addi	sp,sp,44
 8009e0c:	f800283a 	ret
 8009e10:	00803fc4 	movi	r2,255
 8009e14:	11c5803a 	cmpltu	r2,r2,r7
 8009e18:	100490fa 	slli	r2,r2,3
 8009e1c:	003f9e06 	br	8009c98 <__alt_data_end+0xff009c98>
 8009e20:	00803fc4 	movi	r2,255
 8009e24:	1445803a 	cmpltu	r2,r2,r17
 8009e28:	100490fa 	slli	r2,r2,3
 8009e2c:	003fb206 	br	8009cf8 <__alt_data_end+0xff009cf8>
 8009e30:	00804034 	movhi	r2,256
 8009e34:	10bfffc4 	addi	r2,r2,-1
 8009e38:	11808836 	bltu	r2,r6,800a05c <__udivdi3+0x51c>
 8009e3c:	00800404 	movi	r2,16
 8009e40:	003f5606 	br	8009b9c <__alt_data_end+0xff009b9c>
 8009e44:	30aed83a 	srl	r23,r6,r2
 8009e48:	3d4e983a 	sll	r7,r7,r21
 8009e4c:	80acd83a 	srl	r22,r16,r2
 8009e50:	9884d83a 	srl	r2,r19,r2
 8009e54:	3deeb03a 	or	r23,r7,r23
 8009e58:	b824d43a 	srli	r18,r23,16
 8009e5c:	8560983a 	sll	r16,r16,r21
 8009e60:	b009883a 	mov	r4,r22
 8009e64:	900b883a 	mov	r5,r18
 8009e68:	3568983a 	sll	r20,r6,r21
 8009e6c:	1420b03a 	or	r16,r2,r16
 8009e70:	800a74c0 	call	800a74c <__umodsi3>
 8009e74:	b009883a 	mov	r4,r22
 8009e78:	900b883a 	mov	r5,r18
 8009e7c:	1023883a 	mov	r17,r2
 8009e80:	800a6e80 	call	800a6e8 <__udivsi3>
 8009e84:	8808943a 	slli	r4,r17,16
 8009e88:	bf3fffcc 	andi	fp,r23,65535
 8009e8c:	8006d43a 	srli	r3,r16,16
 8009e90:	e0a3383a 	mul	r17,fp,r2
 8009e94:	100d883a 	mov	r6,r2
 8009e98:	1906b03a 	or	r3,r3,r4
 8009e9c:	1c40042e 	bgeu	r3,r17,8009eb0 <__udivdi3+0x370>
 8009ea0:	1dc7883a 	add	r3,r3,r23
 8009ea4:	10bfffc4 	addi	r2,r2,-1
 8009ea8:	1dc0752e 	bgeu	r3,r23,800a080 <__udivdi3+0x540>
 8009eac:	100d883a 	mov	r6,r2
 8009eb0:	1c63c83a 	sub	r17,r3,r17
 8009eb4:	900b883a 	mov	r5,r18
 8009eb8:	8809883a 	mov	r4,r17
 8009ebc:	d9800015 	stw	r6,0(sp)
 8009ec0:	800a74c0 	call	800a74c <__umodsi3>
 8009ec4:	102d883a 	mov	r22,r2
 8009ec8:	8809883a 	mov	r4,r17
 8009ecc:	900b883a 	mov	r5,r18
 8009ed0:	800a6e80 	call	800a6e8 <__udivsi3>
 8009ed4:	b02c943a 	slli	r22,r22,16
 8009ed8:	e089383a 	mul	r4,fp,r2
 8009edc:	843fffcc 	andi	r16,r16,65535
 8009ee0:	85a0b03a 	or	r16,r16,r22
 8009ee4:	d9800017 	ldw	r6,0(sp)
 8009ee8:	8100042e 	bgeu	r16,r4,8009efc <__udivdi3+0x3bc>
 8009eec:	85e1883a 	add	r16,r16,r23
 8009ef0:	10ffffc4 	addi	r3,r2,-1
 8009ef4:	85c05e2e 	bgeu	r16,r23,800a070 <__udivdi3+0x530>
 8009ef8:	1805883a 	mov	r2,r3
 8009efc:	300c943a 	slli	r6,r6,16
 8009f00:	a17fffcc 	andi	r5,r20,65535
 8009f04:	a028d43a 	srli	r20,r20,16
 8009f08:	3084b03a 	or	r2,r6,r2
 8009f0c:	10ffffcc 	andi	r3,r2,65535
 8009f10:	100cd43a 	srli	r6,r2,16
 8009f14:	194f383a 	mul	r7,r3,r5
 8009f18:	1d07383a 	mul	r3,r3,r20
 8009f1c:	314b383a 	mul	r5,r6,r5
 8009f20:	3810d43a 	srli	r8,r7,16
 8009f24:	8121c83a 	sub	r16,r16,r4
 8009f28:	1947883a 	add	r3,r3,r5
 8009f2c:	40c7883a 	add	r3,r8,r3
 8009f30:	350d383a 	mul	r6,r6,r20
 8009f34:	1940022e 	bgeu	r3,r5,8009f40 <__udivdi3+0x400>
 8009f38:	01000074 	movhi	r4,1
 8009f3c:	310d883a 	add	r6,r6,r4
 8009f40:	1828d43a 	srli	r20,r3,16
 8009f44:	a18d883a 	add	r6,r20,r6
 8009f48:	81803e36 	bltu	r16,r6,800a044 <__udivdi3+0x504>
 8009f4c:	81803826 	beq	r16,r6,800a030 <__udivdi3+0x4f0>
 8009f50:	0007883a 	mov	r3,zero
 8009f54:	003fa206 	br	8009de0 <__alt_data_end+0xff009de0>
 8009f58:	88e2983a 	sll	r17,r17,r3
 8009f5c:	80a8d83a 	srl	r20,r16,r2
 8009f60:	80e0983a 	sll	r16,r16,r3
 8009f64:	882ad43a 	srli	r21,r17,16
 8009f68:	9884d83a 	srl	r2,r19,r2
 8009f6c:	a009883a 	mov	r4,r20
 8009f70:	a80b883a 	mov	r5,r21
 8009f74:	142eb03a 	or	r23,r2,r16
 8009f78:	98e4983a 	sll	r18,r19,r3
 8009f7c:	800a74c0 	call	800a74c <__umodsi3>
 8009f80:	a009883a 	mov	r4,r20
 8009f84:	a80b883a 	mov	r5,r21
 8009f88:	1021883a 	mov	r16,r2
 8009f8c:	800a6e80 	call	800a6e8 <__udivsi3>
 8009f90:	1039883a 	mov	fp,r2
 8009f94:	8d3fffcc 	andi	r20,r17,65535
 8009f98:	8020943a 	slli	r16,r16,16
 8009f9c:	b804d43a 	srli	r2,r23,16
 8009fa0:	a72d383a 	mul	r22,r20,fp
 8009fa4:	1404b03a 	or	r2,r2,r16
 8009fa8:	1580062e 	bgeu	r2,r22,8009fc4 <__udivdi3+0x484>
 8009fac:	1445883a 	add	r2,r2,r17
 8009fb0:	e0ffffc4 	addi	r3,fp,-1
 8009fb4:	14403836 	bltu	r2,r17,800a098 <__udivdi3+0x558>
 8009fb8:	1580372e 	bgeu	r2,r22,800a098 <__udivdi3+0x558>
 8009fbc:	e73fff84 	addi	fp,fp,-2
 8009fc0:	1445883a 	add	r2,r2,r17
 8009fc4:	15adc83a 	sub	r22,r2,r22
 8009fc8:	a80b883a 	mov	r5,r21
 8009fcc:	b009883a 	mov	r4,r22
 8009fd0:	800a74c0 	call	800a74c <__umodsi3>
 8009fd4:	1027883a 	mov	r19,r2
 8009fd8:	b009883a 	mov	r4,r22
 8009fdc:	a80b883a 	mov	r5,r21
 8009fe0:	800a6e80 	call	800a6e8 <__udivsi3>
 8009fe4:	9826943a 	slli	r19,r19,16
 8009fe8:	a0a1383a 	mul	r16,r20,r2
 8009fec:	b93fffcc 	andi	r4,r23,65535
 8009ff0:	24c8b03a 	or	r4,r4,r19
 8009ff4:	2400062e 	bgeu	r4,r16,800a010 <__udivdi3+0x4d0>
 8009ff8:	2449883a 	add	r4,r4,r17
 8009ffc:	10ffffc4 	addi	r3,r2,-1
 800a000:	24402336 	bltu	r4,r17,800a090 <__udivdi3+0x550>
 800a004:	2400222e 	bgeu	r4,r16,800a090 <__udivdi3+0x550>
 800a008:	10bfff84 	addi	r2,r2,-2
 800a00c:	2449883a 	add	r4,r4,r17
 800a010:	e038943a 	slli	fp,fp,16
 800a014:	2421c83a 	sub	r16,r4,r16
 800a018:	e086b03a 	or	r3,fp,r2
 800a01c:	003f4306 	br	8009d2c <__alt_data_end+0xff009d2c>
 800a020:	2005883a 	mov	r2,r4
 800a024:	003f6906 	br	8009dcc <__alt_data_end+0xff009dcc>
 800a028:	1805883a 	mov	r2,r3
 800a02c:	003f0f06 	br	8009c6c <__alt_data_end+0xff009c6c>
 800a030:	1806943a 	slli	r3,r3,16
 800a034:	9d66983a 	sll	r19,r19,r21
 800a038:	39ffffcc 	andi	r7,r7,65535
 800a03c:	19c7883a 	add	r3,r3,r7
 800a040:	98ffc32e 	bgeu	r19,r3,8009f50 <__alt_data_end+0xff009f50>
 800a044:	10bfffc4 	addi	r2,r2,-1
 800a048:	003fc106 	br	8009f50 <__alt_data_end+0xff009f50>
 800a04c:	00800604 	movi	r2,24
 800a050:	003f1106 	br	8009c98 <__alt_data_end+0xff009c98>
 800a054:	00800604 	movi	r2,24
 800a058:	003f2706 	br	8009cf8 <__alt_data_end+0xff009cf8>
 800a05c:	00800604 	movi	r2,24
 800a060:	003ece06 	br	8009b9c <__alt_data_end+0xff009b9c>
 800a064:	0007883a 	mov	r3,zero
 800a068:	00800044 	movi	r2,1
 800a06c:	003f5c06 	br	8009de0 <__alt_data_end+0xff009de0>
 800a070:	813fa12e 	bgeu	r16,r4,8009ef8 <__alt_data_end+0xff009ef8>
 800a074:	10bfff84 	addi	r2,r2,-2
 800a078:	85e1883a 	add	r16,r16,r23
 800a07c:	003f9f06 	br	8009efc <__alt_data_end+0xff009efc>
 800a080:	1c7f8a2e 	bgeu	r3,r17,8009eac <__alt_data_end+0xff009eac>
 800a084:	31bfff84 	addi	r6,r6,-2
 800a088:	1dc7883a 	add	r3,r3,r23
 800a08c:	003f8806 	br	8009eb0 <__alt_data_end+0xff009eb0>
 800a090:	1805883a 	mov	r2,r3
 800a094:	003fde06 	br	800a010 <__alt_data_end+0xff00a010>
 800a098:	1839883a 	mov	fp,r3
 800a09c:	003fc906 	br	8009fc4 <__alt_data_end+0xff009fc4>
 800a0a0:	b5bfff84 	addi	r22,r22,-2
 800a0a4:	2449883a 	add	r4,r4,r17
 800a0a8:	003f3406 	br	8009d7c <__alt_data_end+0xff009d7c>
 800a0ac:	b5bfff84 	addi	r22,r22,-2
 800a0b0:	1445883a 	add	r2,r2,r17
 800a0b4:	003edb06 	br	8009c24 <__alt_data_end+0xff009c24>

0800a0b8 <__umoddi3>:
 800a0b8:	defff404 	addi	sp,sp,-48
 800a0bc:	df000a15 	stw	fp,40(sp)
 800a0c0:	dc400315 	stw	r17,12(sp)
 800a0c4:	dc000215 	stw	r16,8(sp)
 800a0c8:	dfc00b15 	stw	ra,44(sp)
 800a0cc:	ddc00915 	stw	r23,36(sp)
 800a0d0:	dd800815 	stw	r22,32(sp)
 800a0d4:	dd400715 	stw	r21,28(sp)
 800a0d8:	dd000615 	stw	r20,24(sp)
 800a0dc:	dcc00515 	stw	r19,20(sp)
 800a0e0:	dc800415 	stw	r18,16(sp)
 800a0e4:	2021883a 	mov	r16,r4
 800a0e8:	2823883a 	mov	r17,r5
 800a0ec:	2839883a 	mov	fp,r5
 800a0f0:	38003c1e 	bne	r7,zero,800a1e4 <__umoddi3+0x12c>
 800a0f4:	3027883a 	mov	r19,r6
 800a0f8:	2029883a 	mov	r20,r4
 800a0fc:	2980512e 	bgeu	r5,r6,800a244 <__umoddi3+0x18c>
 800a100:	00bfffd4 	movui	r2,65535
 800a104:	11809a36 	bltu	r2,r6,800a370 <__umoddi3+0x2b8>
 800a108:	01003fc4 	movi	r4,255
 800a10c:	2189803a 	cmpltu	r4,r4,r6
 800a110:	200890fa 	slli	r4,r4,3
 800a114:	3104d83a 	srl	r2,r6,r4
 800a118:	00c20074 	movhi	r3,2049
 800a11c:	18c65704 	addi	r3,r3,6492
 800a120:	1885883a 	add	r2,r3,r2
 800a124:	10c00003 	ldbu	r3,0(r2)
 800a128:	00800804 	movi	r2,32
 800a12c:	1909883a 	add	r4,r3,r4
 800a130:	1125c83a 	sub	r18,r2,r4
 800a134:	90000526 	beq	r18,zero,800a14c <__umoddi3+0x94>
 800a138:	8ca2983a 	sll	r17,r17,r18
 800a13c:	8108d83a 	srl	r4,r16,r4
 800a140:	34a6983a 	sll	r19,r6,r18
 800a144:	84a8983a 	sll	r20,r16,r18
 800a148:	2478b03a 	or	fp,r4,r17
 800a14c:	982ed43a 	srli	r23,r19,16
 800a150:	e009883a 	mov	r4,fp
 800a154:	9dbfffcc 	andi	r22,r19,65535
 800a158:	b80b883a 	mov	r5,r23
 800a15c:	800a74c0 	call	800a74c <__umodsi3>
 800a160:	e009883a 	mov	r4,fp
 800a164:	b80b883a 	mov	r5,r23
 800a168:	102b883a 	mov	r21,r2
 800a16c:	800a6e80 	call	800a6e8 <__udivsi3>
 800a170:	a806943a 	slli	r3,r21,16
 800a174:	a008d43a 	srli	r4,r20,16
 800a178:	b085383a 	mul	r2,r22,r2
 800a17c:	20c8b03a 	or	r4,r4,r3
 800a180:	2080032e 	bgeu	r4,r2,800a190 <__umoddi3+0xd8>
 800a184:	24c9883a 	add	r4,r4,r19
 800a188:	24c00136 	bltu	r4,r19,800a190 <__umoddi3+0xd8>
 800a18c:	20811036 	bltu	r4,r2,800a5d0 <__umoddi3+0x518>
 800a190:	20abc83a 	sub	r21,r4,r2
 800a194:	b80b883a 	mov	r5,r23
 800a198:	a809883a 	mov	r4,r21
 800a19c:	800a74c0 	call	800a74c <__umodsi3>
 800a1a0:	1023883a 	mov	r17,r2
 800a1a4:	b80b883a 	mov	r5,r23
 800a1a8:	a809883a 	mov	r4,r21
 800a1ac:	800a6e80 	call	800a6e8 <__udivsi3>
 800a1b0:	8822943a 	slli	r17,r17,16
 800a1b4:	b085383a 	mul	r2,r22,r2
 800a1b8:	a0ffffcc 	andi	r3,r20,65535
 800a1bc:	1c46b03a 	or	r3,r3,r17
 800a1c0:	1880042e 	bgeu	r3,r2,800a1d4 <__umoddi3+0x11c>
 800a1c4:	1cc7883a 	add	r3,r3,r19
 800a1c8:	1cc00236 	bltu	r3,r19,800a1d4 <__umoddi3+0x11c>
 800a1cc:	1880012e 	bgeu	r3,r2,800a1d4 <__umoddi3+0x11c>
 800a1d0:	1cc7883a 	add	r3,r3,r19
 800a1d4:	1885c83a 	sub	r2,r3,r2
 800a1d8:	1484d83a 	srl	r2,r2,r18
 800a1dc:	0007883a 	mov	r3,zero
 800a1e0:	00004f06 	br	800a320 <__umoddi3+0x268>
 800a1e4:	29c04c36 	bltu	r5,r7,800a318 <__umoddi3+0x260>
 800a1e8:	00bfffd4 	movui	r2,65535
 800a1ec:	11c0582e 	bgeu	r2,r7,800a350 <__umoddi3+0x298>
 800a1f0:	00804034 	movhi	r2,256
 800a1f4:	10bfffc4 	addi	r2,r2,-1
 800a1f8:	11c0e736 	bltu	r2,r7,800a598 <__umoddi3+0x4e0>
 800a1fc:	01000404 	movi	r4,16
 800a200:	3904d83a 	srl	r2,r7,r4
 800a204:	00c20074 	movhi	r3,2049
 800a208:	18c65704 	addi	r3,r3,6492
 800a20c:	1885883a 	add	r2,r3,r2
 800a210:	14c00003 	ldbu	r19,0(r2)
 800a214:	00c00804 	movi	r3,32
 800a218:	9927883a 	add	r19,r19,r4
 800a21c:	1ce9c83a 	sub	r20,r3,r19
 800a220:	a000581e 	bne	r20,zero,800a384 <__umoddi3+0x2cc>
 800a224:	3c400136 	bltu	r7,r17,800a22c <__umoddi3+0x174>
 800a228:	8180eb36 	bltu	r16,r6,800a5d8 <__umoddi3+0x520>
 800a22c:	8185c83a 	sub	r2,r16,r6
 800a230:	89e3c83a 	sub	r17,r17,r7
 800a234:	8089803a 	cmpltu	r4,r16,r2
 800a238:	8939c83a 	sub	fp,r17,r4
 800a23c:	e007883a 	mov	r3,fp
 800a240:	00003706 	br	800a320 <__umoddi3+0x268>
 800a244:	3000041e 	bne	r6,zero,800a258 <__umoddi3+0x1a0>
 800a248:	000b883a 	mov	r5,zero
 800a24c:	01000044 	movi	r4,1
 800a250:	800a6e80 	call	800a6e8 <__udivsi3>
 800a254:	1027883a 	mov	r19,r2
 800a258:	00bfffd4 	movui	r2,65535
 800a25c:	14c0402e 	bgeu	r2,r19,800a360 <__umoddi3+0x2a8>
 800a260:	00804034 	movhi	r2,256
 800a264:	10bfffc4 	addi	r2,r2,-1
 800a268:	14c0cd36 	bltu	r2,r19,800a5a0 <__umoddi3+0x4e8>
 800a26c:	00800404 	movi	r2,16
 800a270:	9886d83a 	srl	r3,r19,r2
 800a274:	01020074 	movhi	r4,2049
 800a278:	21065704 	addi	r4,r4,6492
 800a27c:	20c7883a 	add	r3,r4,r3
 800a280:	18c00003 	ldbu	r3,0(r3)
 800a284:	1887883a 	add	r3,r3,r2
 800a288:	00800804 	movi	r2,32
 800a28c:	10e5c83a 	sub	r18,r2,r3
 800a290:	9000901e 	bne	r18,zero,800a4d4 <__umoddi3+0x41c>
 800a294:	982cd43a 	srli	r22,r19,16
 800a298:	8ce3c83a 	sub	r17,r17,r19
 800a29c:	9d7fffcc 	andi	r21,r19,65535
 800a2a0:	b00b883a 	mov	r5,r22
 800a2a4:	8809883a 	mov	r4,r17
 800a2a8:	800a74c0 	call	800a74c <__umodsi3>
 800a2ac:	8809883a 	mov	r4,r17
 800a2b0:	b00b883a 	mov	r5,r22
 800a2b4:	1021883a 	mov	r16,r2
 800a2b8:	800a6e80 	call	800a6e8 <__udivsi3>
 800a2bc:	8006943a 	slli	r3,r16,16
 800a2c0:	a008d43a 	srli	r4,r20,16
 800a2c4:	1545383a 	mul	r2,r2,r21
 800a2c8:	20c8b03a 	or	r4,r4,r3
 800a2cc:	2080042e 	bgeu	r4,r2,800a2e0 <__umoddi3+0x228>
 800a2d0:	24c9883a 	add	r4,r4,r19
 800a2d4:	24c00236 	bltu	r4,r19,800a2e0 <__umoddi3+0x228>
 800a2d8:	2080012e 	bgeu	r4,r2,800a2e0 <__umoddi3+0x228>
 800a2dc:	24c9883a 	add	r4,r4,r19
 800a2e0:	20a1c83a 	sub	r16,r4,r2
 800a2e4:	b00b883a 	mov	r5,r22
 800a2e8:	8009883a 	mov	r4,r16
 800a2ec:	800a74c0 	call	800a74c <__umodsi3>
 800a2f0:	1023883a 	mov	r17,r2
 800a2f4:	b00b883a 	mov	r5,r22
 800a2f8:	8009883a 	mov	r4,r16
 800a2fc:	800a6e80 	call	800a6e8 <__udivsi3>
 800a300:	8822943a 	slli	r17,r17,16
 800a304:	1545383a 	mul	r2,r2,r21
 800a308:	a53fffcc 	andi	r20,r20,65535
 800a30c:	a446b03a 	or	r3,r20,r17
 800a310:	18bfb02e 	bgeu	r3,r2,800a1d4 <__alt_data_end+0xff00a1d4>
 800a314:	003fab06 	br	800a1c4 <__alt_data_end+0xff00a1c4>
 800a318:	2005883a 	mov	r2,r4
 800a31c:	2807883a 	mov	r3,r5
 800a320:	dfc00b17 	ldw	ra,44(sp)
 800a324:	df000a17 	ldw	fp,40(sp)
 800a328:	ddc00917 	ldw	r23,36(sp)
 800a32c:	dd800817 	ldw	r22,32(sp)
 800a330:	dd400717 	ldw	r21,28(sp)
 800a334:	dd000617 	ldw	r20,24(sp)
 800a338:	dcc00517 	ldw	r19,20(sp)
 800a33c:	dc800417 	ldw	r18,16(sp)
 800a340:	dc400317 	ldw	r17,12(sp)
 800a344:	dc000217 	ldw	r16,8(sp)
 800a348:	dec00c04 	addi	sp,sp,48
 800a34c:	f800283a 	ret
 800a350:	04c03fc4 	movi	r19,255
 800a354:	99c9803a 	cmpltu	r4,r19,r7
 800a358:	200890fa 	slli	r4,r4,3
 800a35c:	003fa806 	br	800a200 <__alt_data_end+0xff00a200>
 800a360:	00803fc4 	movi	r2,255
 800a364:	14c5803a 	cmpltu	r2,r2,r19
 800a368:	100490fa 	slli	r2,r2,3
 800a36c:	003fc006 	br	800a270 <__alt_data_end+0xff00a270>
 800a370:	00804034 	movhi	r2,256
 800a374:	10bfffc4 	addi	r2,r2,-1
 800a378:	11808b36 	bltu	r2,r6,800a5a8 <__umoddi3+0x4f0>
 800a37c:	01000404 	movi	r4,16
 800a380:	003f6406 	br	800a114 <__alt_data_end+0xff00a114>
 800a384:	34c4d83a 	srl	r2,r6,r19
 800a388:	3d0e983a 	sll	r7,r7,r20
 800a38c:	8cf8d83a 	srl	fp,r17,r19
 800a390:	8d10983a 	sll	r8,r17,r20
 800a394:	38aab03a 	or	r21,r7,r2
 800a398:	a82cd43a 	srli	r22,r21,16
 800a39c:	84e2d83a 	srl	r17,r16,r19
 800a3a0:	e009883a 	mov	r4,fp
 800a3a4:	b00b883a 	mov	r5,r22
 800a3a8:	8a22b03a 	or	r17,r17,r8
 800a3ac:	3524983a 	sll	r18,r6,r20
 800a3b0:	800a74c0 	call	800a74c <__umodsi3>
 800a3b4:	e009883a 	mov	r4,fp
 800a3b8:	b00b883a 	mov	r5,r22
 800a3bc:	102f883a 	mov	r23,r2
 800a3c0:	800a6e80 	call	800a6e8 <__udivsi3>
 800a3c4:	100d883a 	mov	r6,r2
 800a3c8:	b808943a 	slli	r4,r23,16
 800a3cc:	aa3fffcc 	andi	r8,r21,65535
 800a3d0:	8804d43a 	srli	r2,r17,16
 800a3d4:	41af383a 	mul	r23,r8,r6
 800a3d8:	8520983a 	sll	r16,r16,r20
 800a3dc:	1104b03a 	or	r2,r2,r4
 800a3e0:	15c0042e 	bgeu	r2,r23,800a3f4 <__umoddi3+0x33c>
 800a3e4:	1545883a 	add	r2,r2,r21
 800a3e8:	30ffffc4 	addi	r3,r6,-1
 800a3ec:	1540742e 	bgeu	r2,r21,800a5c0 <__umoddi3+0x508>
 800a3f0:	180d883a 	mov	r6,r3
 800a3f4:	15efc83a 	sub	r23,r2,r23
 800a3f8:	b00b883a 	mov	r5,r22
 800a3fc:	b809883a 	mov	r4,r23
 800a400:	d9800115 	stw	r6,4(sp)
 800a404:	da000015 	stw	r8,0(sp)
 800a408:	800a74c0 	call	800a74c <__umodsi3>
 800a40c:	b00b883a 	mov	r5,r22
 800a410:	b809883a 	mov	r4,r23
 800a414:	1039883a 	mov	fp,r2
 800a418:	800a6e80 	call	800a6e8 <__udivsi3>
 800a41c:	da000017 	ldw	r8,0(sp)
 800a420:	e038943a 	slli	fp,fp,16
 800a424:	100b883a 	mov	r5,r2
 800a428:	4089383a 	mul	r4,r8,r2
 800a42c:	8a3fffcc 	andi	r8,r17,65535
 800a430:	4710b03a 	or	r8,r8,fp
 800a434:	d9800117 	ldw	r6,4(sp)
 800a438:	4100042e 	bgeu	r8,r4,800a44c <__umoddi3+0x394>
 800a43c:	4551883a 	add	r8,r8,r21
 800a440:	10bfffc4 	addi	r2,r2,-1
 800a444:	45405a2e 	bgeu	r8,r21,800a5b0 <__umoddi3+0x4f8>
 800a448:	100b883a 	mov	r5,r2
 800a44c:	300c943a 	slli	r6,r6,16
 800a450:	91ffffcc 	andi	r7,r18,65535
 800a454:	9004d43a 	srli	r2,r18,16
 800a458:	314cb03a 	or	r6,r6,r5
 800a45c:	317fffcc 	andi	r5,r6,65535
 800a460:	300cd43a 	srli	r6,r6,16
 800a464:	29d3383a 	mul	r9,r5,r7
 800a468:	288b383a 	mul	r5,r5,r2
 800a46c:	31cf383a 	mul	r7,r6,r7
 800a470:	4806d43a 	srli	r3,r9,16
 800a474:	4111c83a 	sub	r8,r8,r4
 800a478:	29cb883a 	add	r5,r5,r7
 800a47c:	194b883a 	add	r5,r3,r5
 800a480:	3085383a 	mul	r2,r6,r2
 800a484:	29c0022e 	bgeu	r5,r7,800a490 <__umoddi3+0x3d8>
 800a488:	00c00074 	movhi	r3,1
 800a48c:	10c5883a 	add	r2,r2,r3
 800a490:	2808d43a 	srli	r4,r5,16
 800a494:	280a943a 	slli	r5,r5,16
 800a498:	4a7fffcc 	andi	r9,r9,65535
 800a49c:	2085883a 	add	r2,r4,r2
 800a4a0:	2a4b883a 	add	r5,r5,r9
 800a4a4:	40803636 	bltu	r8,r2,800a580 <__umoddi3+0x4c8>
 800a4a8:	40804d26 	beq	r8,r2,800a5e0 <__umoddi3+0x528>
 800a4ac:	4089c83a 	sub	r4,r8,r2
 800a4b0:	280f883a 	mov	r7,r5
 800a4b4:	81cfc83a 	sub	r7,r16,r7
 800a4b8:	81c7803a 	cmpltu	r3,r16,r7
 800a4bc:	20c7c83a 	sub	r3,r4,r3
 800a4c0:	1cc4983a 	sll	r2,r3,r19
 800a4c4:	3d0ed83a 	srl	r7,r7,r20
 800a4c8:	1d06d83a 	srl	r3,r3,r20
 800a4cc:	11c4b03a 	or	r2,r2,r7
 800a4d0:	003f9306 	br	800a320 <__alt_data_end+0xff00a320>
 800a4d4:	9ca6983a 	sll	r19,r19,r18
 800a4d8:	88e8d83a 	srl	r20,r17,r3
 800a4dc:	80c4d83a 	srl	r2,r16,r3
 800a4e0:	982cd43a 	srli	r22,r19,16
 800a4e4:	8ca2983a 	sll	r17,r17,r18
 800a4e8:	a009883a 	mov	r4,r20
 800a4ec:	b00b883a 	mov	r5,r22
 800a4f0:	1478b03a 	or	fp,r2,r17
 800a4f4:	800a74c0 	call	800a74c <__umodsi3>
 800a4f8:	a009883a 	mov	r4,r20
 800a4fc:	b00b883a 	mov	r5,r22
 800a500:	1023883a 	mov	r17,r2
 800a504:	800a6e80 	call	800a6e8 <__udivsi3>
 800a508:	9d7fffcc 	andi	r21,r19,65535
 800a50c:	880a943a 	slli	r5,r17,16
 800a510:	e008d43a 	srli	r4,fp,16
 800a514:	a885383a 	mul	r2,r21,r2
 800a518:	84a8983a 	sll	r20,r16,r18
 800a51c:	2148b03a 	or	r4,r4,r5
 800a520:	2080042e 	bgeu	r4,r2,800a534 <__umoddi3+0x47c>
 800a524:	24c9883a 	add	r4,r4,r19
 800a528:	24c00236 	bltu	r4,r19,800a534 <__umoddi3+0x47c>
 800a52c:	2080012e 	bgeu	r4,r2,800a534 <__umoddi3+0x47c>
 800a530:	24c9883a 	add	r4,r4,r19
 800a534:	20a3c83a 	sub	r17,r4,r2
 800a538:	b00b883a 	mov	r5,r22
 800a53c:	8809883a 	mov	r4,r17
 800a540:	800a74c0 	call	800a74c <__umodsi3>
 800a544:	102f883a 	mov	r23,r2
 800a548:	8809883a 	mov	r4,r17
 800a54c:	b00b883a 	mov	r5,r22
 800a550:	800a6e80 	call	800a6e8 <__udivsi3>
 800a554:	b82e943a 	slli	r23,r23,16
 800a558:	a885383a 	mul	r2,r21,r2
 800a55c:	e13fffcc 	andi	r4,fp,65535
 800a560:	25c8b03a 	or	r4,r4,r23
 800a564:	2080042e 	bgeu	r4,r2,800a578 <__umoddi3+0x4c0>
 800a568:	24c9883a 	add	r4,r4,r19
 800a56c:	24c00236 	bltu	r4,r19,800a578 <__umoddi3+0x4c0>
 800a570:	2080012e 	bgeu	r4,r2,800a578 <__umoddi3+0x4c0>
 800a574:	24c9883a 	add	r4,r4,r19
 800a578:	20a3c83a 	sub	r17,r4,r2
 800a57c:	003f4806 	br	800a2a0 <__alt_data_end+0xff00a2a0>
 800a580:	2c8fc83a 	sub	r7,r5,r18
 800a584:	1545c83a 	sub	r2,r2,r21
 800a588:	29cb803a 	cmpltu	r5,r5,r7
 800a58c:	1145c83a 	sub	r2,r2,r5
 800a590:	4089c83a 	sub	r4,r8,r2
 800a594:	003fc706 	br	800a4b4 <__alt_data_end+0xff00a4b4>
 800a598:	01000604 	movi	r4,24
 800a59c:	003f1806 	br	800a200 <__alt_data_end+0xff00a200>
 800a5a0:	00800604 	movi	r2,24
 800a5a4:	003f3206 	br	800a270 <__alt_data_end+0xff00a270>
 800a5a8:	01000604 	movi	r4,24
 800a5ac:	003ed906 	br	800a114 <__alt_data_end+0xff00a114>
 800a5b0:	413fa52e 	bgeu	r8,r4,800a448 <__alt_data_end+0xff00a448>
 800a5b4:	297fff84 	addi	r5,r5,-2
 800a5b8:	4551883a 	add	r8,r8,r21
 800a5bc:	003fa306 	br	800a44c <__alt_data_end+0xff00a44c>
 800a5c0:	15ff8b2e 	bgeu	r2,r23,800a3f0 <__alt_data_end+0xff00a3f0>
 800a5c4:	31bfff84 	addi	r6,r6,-2
 800a5c8:	1545883a 	add	r2,r2,r21
 800a5cc:	003f8906 	br	800a3f4 <__alt_data_end+0xff00a3f4>
 800a5d0:	24c9883a 	add	r4,r4,r19
 800a5d4:	003eee06 	br	800a190 <__alt_data_end+0xff00a190>
 800a5d8:	8005883a 	mov	r2,r16
 800a5dc:	003f1706 	br	800a23c <__alt_data_end+0xff00a23c>
 800a5e0:	817fe736 	bltu	r16,r5,800a580 <__alt_data_end+0xff00a580>
 800a5e4:	280f883a 	mov	r7,r5
 800a5e8:	0009883a 	mov	r4,zero
 800a5ec:	003fb106 	br	800a4b4 <__alt_data_end+0xff00a4b4>

0800a5f0 <__divsi3>:
 800a5f0:	20001b16 	blt	r4,zero,800a660 <__divsi3+0x70>
 800a5f4:	000f883a 	mov	r7,zero
 800a5f8:	28001616 	blt	r5,zero,800a654 <__divsi3+0x64>
 800a5fc:	200d883a 	mov	r6,r4
 800a600:	29001a2e 	bgeu	r5,r4,800a66c <__divsi3+0x7c>
 800a604:	00800804 	movi	r2,32
 800a608:	00c00044 	movi	r3,1
 800a60c:	00000106 	br	800a614 <__divsi3+0x24>
 800a610:	10000d26 	beq	r2,zero,800a648 <__divsi3+0x58>
 800a614:	294b883a 	add	r5,r5,r5
 800a618:	10bfffc4 	addi	r2,r2,-1
 800a61c:	18c7883a 	add	r3,r3,r3
 800a620:	293ffb36 	bltu	r5,r4,800a610 <__alt_data_end+0xff00a610>
 800a624:	0005883a 	mov	r2,zero
 800a628:	18000726 	beq	r3,zero,800a648 <__divsi3+0x58>
 800a62c:	0005883a 	mov	r2,zero
 800a630:	31400236 	bltu	r6,r5,800a63c <__divsi3+0x4c>
 800a634:	314dc83a 	sub	r6,r6,r5
 800a638:	10c4b03a 	or	r2,r2,r3
 800a63c:	1806d07a 	srli	r3,r3,1
 800a640:	280ad07a 	srli	r5,r5,1
 800a644:	183ffa1e 	bne	r3,zero,800a630 <__alt_data_end+0xff00a630>
 800a648:	38000126 	beq	r7,zero,800a650 <__divsi3+0x60>
 800a64c:	0085c83a 	sub	r2,zero,r2
 800a650:	f800283a 	ret
 800a654:	014bc83a 	sub	r5,zero,r5
 800a658:	39c0005c 	xori	r7,r7,1
 800a65c:	003fe706 	br	800a5fc <__alt_data_end+0xff00a5fc>
 800a660:	0109c83a 	sub	r4,zero,r4
 800a664:	01c00044 	movi	r7,1
 800a668:	003fe306 	br	800a5f8 <__alt_data_end+0xff00a5f8>
 800a66c:	00c00044 	movi	r3,1
 800a670:	003fee06 	br	800a62c <__alt_data_end+0xff00a62c>

0800a674 <__modsi3>:
 800a674:	20001716 	blt	r4,zero,800a6d4 <__modsi3+0x60>
 800a678:	000f883a 	mov	r7,zero
 800a67c:	2005883a 	mov	r2,r4
 800a680:	28001216 	blt	r5,zero,800a6cc <__modsi3+0x58>
 800a684:	2900162e 	bgeu	r5,r4,800a6e0 <__modsi3+0x6c>
 800a688:	01800804 	movi	r6,32
 800a68c:	00c00044 	movi	r3,1
 800a690:	00000106 	br	800a698 <__modsi3+0x24>
 800a694:	30000a26 	beq	r6,zero,800a6c0 <__modsi3+0x4c>
 800a698:	294b883a 	add	r5,r5,r5
 800a69c:	31bfffc4 	addi	r6,r6,-1
 800a6a0:	18c7883a 	add	r3,r3,r3
 800a6a4:	293ffb36 	bltu	r5,r4,800a694 <__alt_data_end+0xff00a694>
 800a6a8:	18000526 	beq	r3,zero,800a6c0 <__modsi3+0x4c>
 800a6ac:	1806d07a 	srli	r3,r3,1
 800a6b0:	11400136 	bltu	r2,r5,800a6b8 <__modsi3+0x44>
 800a6b4:	1145c83a 	sub	r2,r2,r5
 800a6b8:	280ad07a 	srli	r5,r5,1
 800a6bc:	183ffb1e 	bne	r3,zero,800a6ac <__alt_data_end+0xff00a6ac>
 800a6c0:	38000126 	beq	r7,zero,800a6c8 <__modsi3+0x54>
 800a6c4:	0085c83a 	sub	r2,zero,r2
 800a6c8:	f800283a 	ret
 800a6cc:	014bc83a 	sub	r5,zero,r5
 800a6d0:	003fec06 	br	800a684 <__alt_data_end+0xff00a684>
 800a6d4:	0109c83a 	sub	r4,zero,r4
 800a6d8:	01c00044 	movi	r7,1
 800a6dc:	003fe706 	br	800a67c <__alt_data_end+0xff00a67c>
 800a6e0:	00c00044 	movi	r3,1
 800a6e4:	003ff106 	br	800a6ac <__alt_data_end+0xff00a6ac>

0800a6e8 <__udivsi3>:
 800a6e8:	200d883a 	mov	r6,r4
 800a6ec:	2900152e 	bgeu	r5,r4,800a744 <__udivsi3+0x5c>
 800a6f0:	28001416 	blt	r5,zero,800a744 <__udivsi3+0x5c>
 800a6f4:	00800804 	movi	r2,32
 800a6f8:	00c00044 	movi	r3,1
 800a6fc:	00000206 	br	800a708 <__udivsi3+0x20>
 800a700:	10000e26 	beq	r2,zero,800a73c <__udivsi3+0x54>
 800a704:	28000516 	blt	r5,zero,800a71c <__udivsi3+0x34>
 800a708:	294b883a 	add	r5,r5,r5
 800a70c:	10bfffc4 	addi	r2,r2,-1
 800a710:	18c7883a 	add	r3,r3,r3
 800a714:	293ffa36 	bltu	r5,r4,800a700 <__alt_data_end+0xff00a700>
 800a718:	18000826 	beq	r3,zero,800a73c <__udivsi3+0x54>
 800a71c:	0005883a 	mov	r2,zero
 800a720:	31400236 	bltu	r6,r5,800a72c <__udivsi3+0x44>
 800a724:	314dc83a 	sub	r6,r6,r5
 800a728:	10c4b03a 	or	r2,r2,r3
 800a72c:	1806d07a 	srli	r3,r3,1
 800a730:	280ad07a 	srli	r5,r5,1
 800a734:	183ffa1e 	bne	r3,zero,800a720 <__alt_data_end+0xff00a720>
 800a738:	f800283a 	ret
 800a73c:	0005883a 	mov	r2,zero
 800a740:	f800283a 	ret
 800a744:	00c00044 	movi	r3,1
 800a748:	003ff406 	br	800a71c <__alt_data_end+0xff00a71c>

0800a74c <__umodsi3>:
 800a74c:	2005883a 	mov	r2,r4
 800a750:	2900122e 	bgeu	r5,r4,800a79c <__umodsi3+0x50>
 800a754:	28001116 	blt	r5,zero,800a79c <__umodsi3+0x50>
 800a758:	01800804 	movi	r6,32
 800a75c:	00c00044 	movi	r3,1
 800a760:	00000206 	br	800a76c <__umodsi3+0x20>
 800a764:	30000c26 	beq	r6,zero,800a798 <__umodsi3+0x4c>
 800a768:	28000516 	blt	r5,zero,800a780 <__umodsi3+0x34>
 800a76c:	294b883a 	add	r5,r5,r5
 800a770:	31bfffc4 	addi	r6,r6,-1
 800a774:	18c7883a 	add	r3,r3,r3
 800a778:	293ffa36 	bltu	r5,r4,800a764 <__alt_data_end+0xff00a764>
 800a77c:	18000626 	beq	r3,zero,800a798 <__umodsi3+0x4c>
 800a780:	1806d07a 	srli	r3,r3,1
 800a784:	11400136 	bltu	r2,r5,800a78c <__umodsi3+0x40>
 800a788:	1145c83a 	sub	r2,r2,r5
 800a78c:	280ad07a 	srli	r5,r5,1
 800a790:	183ffb1e 	bne	r3,zero,800a780 <__alt_data_end+0xff00a780>
 800a794:	f800283a 	ret
 800a798:	f800283a 	ret
 800a79c:	00c00044 	movi	r3,1
 800a7a0:	003ff706 	br	800a780 <__alt_data_end+0xff00a780>

0800a7a4 <__adddf3>:
 800a7a4:	02c00434 	movhi	r11,16
 800a7a8:	5affffc4 	addi	r11,r11,-1
 800a7ac:	2806d7fa 	srli	r3,r5,31
 800a7b0:	2ad4703a 	and	r10,r5,r11
 800a7b4:	3ad2703a 	and	r9,r7,r11
 800a7b8:	3804d53a 	srli	r2,r7,20
 800a7bc:	3018d77a 	srli	r12,r6,29
 800a7c0:	280ad53a 	srli	r5,r5,20
 800a7c4:	501490fa 	slli	r10,r10,3
 800a7c8:	2010d77a 	srli	r8,r4,29
 800a7cc:	481290fa 	slli	r9,r9,3
 800a7d0:	380ed7fa 	srli	r7,r7,31
 800a7d4:	defffb04 	addi	sp,sp,-20
 800a7d8:	dc800215 	stw	r18,8(sp)
 800a7dc:	dc400115 	stw	r17,4(sp)
 800a7e0:	dc000015 	stw	r16,0(sp)
 800a7e4:	dfc00415 	stw	ra,16(sp)
 800a7e8:	dcc00315 	stw	r19,12(sp)
 800a7ec:	1c803fcc 	andi	r18,r3,255
 800a7f0:	2c01ffcc 	andi	r16,r5,2047
 800a7f4:	5210b03a 	or	r8,r10,r8
 800a7f8:	202290fa 	slli	r17,r4,3
 800a7fc:	1081ffcc 	andi	r2,r2,2047
 800a800:	4b12b03a 	or	r9,r9,r12
 800a804:	300c90fa 	slli	r6,r6,3
 800a808:	91c07526 	beq	r18,r7,800a9e0 <__adddf3+0x23c>
 800a80c:	8087c83a 	sub	r3,r16,r2
 800a810:	00c0ab0e 	bge	zero,r3,800aac0 <__adddf3+0x31c>
 800a814:	10002a1e 	bne	r2,zero,800a8c0 <__adddf3+0x11c>
 800a818:	4984b03a 	or	r2,r9,r6
 800a81c:	1000961e 	bne	r2,zero,800aa78 <__adddf3+0x2d4>
 800a820:	888001cc 	andi	r2,r17,7
 800a824:	10000726 	beq	r2,zero,800a844 <__adddf3+0xa0>
 800a828:	888003cc 	andi	r2,r17,15
 800a82c:	00c00104 	movi	r3,4
 800a830:	10c00426 	beq	r2,r3,800a844 <__adddf3+0xa0>
 800a834:	88c7883a 	add	r3,r17,r3
 800a838:	1c63803a 	cmpltu	r17,r3,r17
 800a83c:	4451883a 	add	r8,r8,r17
 800a840:	1823883a 	mov	r17,r3
 800a844:	4080202c 	andhi	r2,r8,128
 800a848:	10005926 	beq	r2,zero,800a9b0 <__adddf3+0x20c>
 800a84c:	84000044 	addi	r16,r16,1
 800a850:	0081ffc4 	movi	r2,2047
 800a854:	8080ba26 	beq	r16,r2,800ab40 <__adddf3+0x39c>
 800a858:	00bfe034 	movhi	r2,65408
 800a85c:	10bfffc4 	addi	r2,r2,-1
 800a860:	4090703a 	and	r8,r8,r2
 800a864:	4004977a 	slli	r2,r8,29
 800a868:	4010927a 	slli	r8,r8,9
 800a86c:	8822d0fa 	srli	r17,r17,3
 800a870:	8401ffcc 	andi	r16,r16,2047
 800a874:	4010d33a 	srli	r8,r8,12
 800a878:	9007883a 	mov	r3,r18
 800a87c:	1444b03a 	or	r2,r2,r17
 800a880:	8401ffcc 	andi	r16,r16,2047
 800a884:	8020953a 	slli	r16,r16,20
 800a888:	18c03fcc 	andi	r3,r3,255
 800a88c:	01000434 	movhi	r4,16
 800a890:	213fffc4 	addi	r4,r4,-1
 800a894:	180697fa 	slli	r3,r3,31
 800a898:	4110703a 	and	r8,r8,r4
 800a89c:	4410b03a 	or	r8,r8,r16
 800a8a0:	40c6b03a 	or	r3,r8,r3
 800a8a4:	dfc00417 	ldw	ra,16(sp)
 800a8a8:	dcc00317 	ldw	r19,12(sp)
 800a8ac:	dc800217 	ldw	r18,8(sp)
 800a8b0:	dc400117 	ldw	r17,4(sp)
 800a8b4:	dc000017 	ldw	r16,0(sp)
 800a8b8:	dec00504 	addi	sp,sp,20
 800a8bc:	f800283a 	ret
 800a8c0:	0081ffc4 	movi	r2,2047
 800a8c4:	80bfd626 	beq	r16,r2,800a820 <__alt_data_end+0xff00a820>
 800a8c8:	4a402034 	orhi	r9,r9,128
 800a8cc:	00800e04 	movi	r2,56
 800a8d0:	10c09f16 	blt	r2,r3,800ab50 <__adddf3+0x3ac>
 800a8d4:	008007c4 	movi	r2,31
 800a8d8:	10c0c216 	blt	r2,r3,800abe4 <__adddf3+0x440>
 800a8dc:	00800804 	movi	r2,32
 800a8e0:	10c5c83a 	sub	r2,r2,r3
 800a8e4:	488a983a 	sll	r5,r9,r2
 800a8e8:	30c8d83a 	srl	r4,r6,r3
 800a8ec:	3084983a 	sll	r2,r6,r2
 800a8f0:	48c6d83a 	srl	r3,r9,r3
 800a8f4:	290cb03a 	or	r6,r5,r4
 800a8f8:	1004c03a 	cmpne	r2,r2,zero
 800a8fc:	308cb03a 	or	r6,r6,r2
 800a900:	898dc83a 	sub	r6,r17,r6
 800a904:	89a3803a 	cmpltu	r17,r17,r6
 800a908:	40d1c83a 	sub	r8,r8,r3
 800a90c:	4451c83a 	sub	r8,r8,r17
 800a910:	3023883a 	mov	r17,r6
 800a914:	4080202c 	andhi	r2,r8,128
 800a918:	10002326 	beq	r2,zero,800a9a8 <__adddf3+0x204>
 800a91c:	04c02034 	movhi	r19,128
 800a920:	9cffffc4 	addi	r19,r19,-1
 800a924:	44e6703a 	and	r19,r8,r19
 800a928:	98007626 	beq	r19,zero,800ab04 <__adddf3+0x360>
 800a92c:	9809883a 	mov	r4,r19
 800a930:	800cda80 	call	800cda8 <__clzsi2>
 800a934:	10fffe04 	addi	r3,r2,-8
 800a938:	010007c4 	movi	r4,31
 800a93c:	20c07716 	blt	r4,r3,800ab1c <__adddf3+0x378>
 800a940:	00800804 	movi	r2,32
 800a944:	10c5c83a 	sub	r2,r2,r3
 800a948:	8884d83a 	srl	r2,r17,r2
 800a94c:	98d0983a 	sll	r8,r19,r3
 800a950:	88e2983a 	sll	r17,r17,r3
 800a954:	1204b03a 	or	r2,r2,r8
 800a958:	1c007416 	blt	r3,r16,800ab2c <__adddf3+0x388>
 800a95c:	1c21c83a 	sub	r16,r3,r16
 800a960:	82000044 	addi	r8,r16,1
 800a964:	00c007c4 	movi	r3,31
 800a968:	1a009116 	blt	r3,r8,800abb0 <__adddf3+0x40c>
 800a96c:	00c00804 	movi	r3,32
 800a970:	1a07c83a 	sub	r3,r3,r8
 800a974:	8a08d83a 	srl	r4,r17,r8
 800a978:	88e2983a 	sll	r17,r17,r3
 800a97c:	10c6983a 	sll	r3,r2,r3
 800a980:	1210d83a 	srl	r8,r2,r8
 800a984:	8804c03a 	cmpne	r2,r17,zero
 800a988:	1906b03a 	or	r3,r3,r4
 800a98c:	18a2b03a 	or	r17,r3,r2
 800a990:	0021883a 	mov	r16,zero
 800a994:	003fa206 	br	800a820 <__alt_data_end+0xff00a820>
 800a998:	1890b03a 	or	r8,r3,r2
 800a99c:	40017d26 	beq	r8,zero,800af94 <__adddf3+0x7f0>
 800a9a0:	1011883a 	mov	r8,r2
 800a9a4:	1823883a 	mov	r17,r3
 800a9a8:	888001cc 	andi	r2,r17,7
 800a9ac:	103f9e1e 	bne	r2,zero,800a828 <__alt_data_end+0xff00a828>
 800a9b0:	4004977a 	slli	r2,r8,29
 800a9b4:	8822d0fa 	srli	r17,r17,3
 800a9b8:	4010d0fa 	srli	r8,r8,3
 800a9bc:	9007883a 	mov	r3,r18
 800a9c0:	1444b03a 	or	r2,r2,r17
 800a9c4:	0101ffc4 	movi	r4,2047
 800a9c8:	81002426 	beq	r16,r4,800aa5c <__adddf3+0x2b8>
 800a9cc:	8120703a 	and	r16,r16,r4
 800a9d0:	01000434 	movhi	r4,16
 800a9d4:	213fffc4 	addi	r4,r4,-1
 800a9d8:	4110703a 	and	r8,r8,r4
 800a9dc:	003fa806 	br	800a880 <__alt_data_end+0xff00a880>
 800a9e0:	8089c83a 	sub	r4,r16,r2
 800a9e4:	01005e0e 	bge	zero,r4,800ab60 <__adddf3+0x3bc>
 800a9e8:	10002b26 	beq	r2,zero,800aa98 <__adddf3+0x2f4>
 800a9ec:	0081ffc4 	movi	r2,2047
 800a9f0:	80bf8b26 	beq	r16,r2,800a820 <__alt_data_end+0xff00a820>
 800a9f4:	4a402034 	orhi	r9,r9,128
 800a9f8:	00800e04 	movi	r2,56
 800a9fc:	1100a40e 	bge	r2,r4,800ac90 <__adddf3+0x4ec>
 800aa00:	498cb03a 	or	r6,r9,r6
 800aa04:	300ac03a 	cmpne	r5,r6,zero
 800aa08:	0013883a 	mov	r9,zero
 800aa0c:	2c4b883a 	add	r5,r5,r17
 800aa10:	2c63803a 	cmpltu	r17,r5,r17
 800aa14:	4a11883a 	add	r8,r9,r8
 800aa18:	8a11883a 	add	r8,r17,r8
 800aa1c:	2823883a 	mov	r17,r5
 800aa20:	4080202c 	andhi	r2,r8,128
 800aa24:	103fe026 	beq	r2,zero,800a9a8 <__alt_data_end+0xff00a9a8>
 800aa28:	84000044 	addi	r16,r16,1
 800aa2c:	0081ffc4 	movi	r2,2047
 800aa30:	8080d226 	beq	r16,r2,800ad7c <__adddf3+0x5d8>
 800aa34:	00bfe034 	movhi	r2,65408
 800aa38:	10bfffc4 	addi	r2,r2,-1
 800aa3c:	4090703a 	and	r8,r8,r2
 800aa40:	880ad07a 	srli	r5,r17,1
 800aa44:	400897fa 	slli	r4,r8,31
 800aa48:	88c0004c 	andi	r3,r17,1
 800aa4c:	28e2b03a 	or	r17,r5,r3
 800aa50:	4010d07a 	srli	r8,r8,1
 800aa54:	2462b03a 	or	r17,r4,r17
 800aa58:	003f7106 	br	800a820 <__alt_data_end+0xff00a820>
 800aa5c:	4088b03a 	or	r4,r8,r2
 800aa60:	20014526 	beq	r4,zero,800af78 <__adddf3+0x7d4>
 800aa64:	01000434 	movhi	r4,16
 800aa68:	42000234 	orhi	r8,r8,8
 800aa6c:	213fffc4 	addi	r4,r4,-1
 800aa70:	4110703a 	and	r8,r8,r4
 800aa74:	003f8206 	br	800a880 <__alt_data_end+0xff00a880>
 800aa78:	18ffffc4 	addi	r3,r3,-1
 800aa7c:	1800491e 	bne	r3,zero,800aba4 <__adddf3+0x400>
 800aa80:	898bc83a 	sub	r5,r17,r6
 800aa84:	8963803a 	cmpltu	r17,r17,r5
 800aa88:	4251c83a 	sub	r8,r8,r9
 800aa8c:	4451c83a 	sub	r8,r8,r17
 800aa90:	2823883a 	mov	r17,r5
 800aa94:	003f9f06 	br	800a914 <__alt_data_end+0xff00a914>
 800aa98:	4984b03a 	or	r2,r9,r6
 800aa9c:	103f6026 	beq	r2,zero,800a820 <__alt_data_end+0xff00a820>
 800aaa0:	213fffc4 	addi	r4,r4,-1
 800aaa4:	2000931e 	bne	r4,zero,800acf4 <__adddf3+0x550>
 800aaa8:	898d883a 	add	r6,r17,r6
 800aaac:	3463803a 	cmpltu	r17,r6,r17
 800aab0:	4251883a 	add	r8,r8,r9
 800aab4:	8a11883a 	add	r8,r17,r8
 800aab8:	3023883a 	mov	r17,r6
 800aabc:	003fd806 	br	800aa20 <__alt_data_end+0xff00aa20>
 800aac0:	1800541e 	bne	r3,zero,800ac14 <__adddf3+0x470>
 800aac4:	80800044 	addi	r2,r16,1
 800aac8:	1081ffcc 	andi	r2,r2,2047
 800aacc:	00c00044 	movi	r3,1
 800aad0:	1880a00e 	bge	r3,r2,800ad54 <__adddf3+0x5b0>
 800aad4:	8989c83a 	sub	r4,r17,r6
 800aad8:	8905803a 	cmpltu	r2,r17,r4
 800aadc:	4267c83a 	sub	r19,r8,r9
 800aae0:	98a7c83a 	sub	r19,r19,r2
 800aae4:	9880202c 	andhi	r2,r19,128
 800aae8:	10006326 	beq	r2,zero,800ac78 <__adddf3+0x4d4>
 800aaec:	3463c83a 	sub	r17,r6,r17
 800aaf0:	4a07c83a 	sub	r3,r9,r8
 800aaf4:	344d803a 	cmpltu	r6,r6,r17
 800aaf8:	19a7c83a 	sub	r19,r3,r6
 800aafc:	3825883a 	mov	r18,r7
 800ab00:	983f8a1e 	bne	r19,zero,800a92c <__alt_data_end+0xff00a92c>
 800ab04:	8809883a 	mov	r4,r17
 800ab08:	800cda80 	call	800cda8 <__clzsi2>
 800ab0c:	10800804 	addi	r2,r2,32
 800ab10:	10fffe04 	addi	r3,r2,-8
 800ab14:	010007c4 	movi	r4,31
 800ab18:	20ff890e 	bge	r4,r3,800a940 <__alt_data_end+0xff00a940>
 800ab1c:	10bff604 	addi	r2,r2,-40
 800ab20:	8884983a 	sll	r2,r17,r2
 800ab24:	0023883a 	mov	r17,zero
 800ab28:	1c3f8c0e 	bge	r3,r16,800a95c <__alt_data_end+0xff00a95c>
 800ab2c:	023fe034 	movhi	r8,65408
 800ab30:	423fffc4 	addi	r8,r8,-1
 800ab34:	80e1c83a 	sub	r16,r16,r3
 800ab38:	1210703a 	and	r8,r2,r8
 800ab3c:	003f3806 	br	800a820 <__alt_data_end+0xff00a820>
 800ab40:	9007883a 	mov	r3,r18
 800ab44:	0011883a 	mov	r8,zero
 800ab48:	0005883a 	mov	r2,zero
 800ab4c:	003f4c06 	br	800a880 <__alt_data_end+0xff00a880>
 800ab50:	498cb03a 	or	r6,r9,r6
 800ab54:	300cc03a 	cmpne	r6,r6,zero
 800ab58:	0007883a 	mov	r3,zero
 800ab5c:	003f6806 	br	800a900 <__alt_data_end+0xff00a900>
 800ab60:	20009c1e 	bne	r4,zero,800add4 <__adddf3+0x630>
 800ab64:	80800044 	addi	r2,r16,1
 800ab68:	1141ffcc 	andi	r5,r2,2047
 800ab6c:	01000044 	movi	r4,1
 800ab70:	2140670e 	bge	r4,r5,800ad10 <__adddf3+0x56c>
 800ab74:	0101ffc4 	movi	r4,2047
 800ab78:	11007f26 	beq	r2,r4,800ad78 <__adddf3+0x5d4>
 800ab7c:	898d883a 	add	r6,r17,r6
 800ab80:	4247883a 	add	r3,r8,r9
 800ab84:	3451803a 	cmpltu	r8,r6,r17
 800ab88:	40d1883a 	add	r8,r8,r3
 800ab8c:	402297fa 	slli	r17,r8,31
 800ab90:	300cd07a 	srli	r6,r6,1
 800ab94:	4010d07a 	srli	r8,r8,1
 800ab98:	1021883a 	mov	r16,r2
 800ab9c:	89a2b03a 	or	r17,r17,r6
 800aba0:	003f1f06 	br	800a820 <__alt_data_end+0xff00a820>
 800aba4:	0081ffc4 	movi	r2,2047
 800aba8:	80bf481e 	bne	r16,r2,800a8cc <__alt_data_end+0xff00a8cc>
 800abac:	003f1c06 	br	800a820 <__alt_data_end+0xff00a820>
 800abb0:	843ff844 	addi	r16,r16,-31
 800abb4:	01000804 	movi	r4,32
 800abb8:	1406d83a 	srl	r3,r2,r16
 800abbc:	41005026 	beq	r8,r4,800ad00 <__adddf3+0x55c>
 800abc0:	01001004 	movi	r4,64
 800abc4:	2211c83a 	sub	r8,r4,r8
 800abc8:	1204983a 	sll	r2,r2,r8
 800abcc:	88a2b03a 	or	r17,r17,r2
 800abd0:	8822c03a 	cmpne	r17,r17,zero
 800abd4:	1c62b03a 	or	r17,r3,r17
 800abd8:	0011883a 	mov	r8,zero
 800abdc:	0021883a 	mov	r16,zero
 800abe0:	003f7106 	br	800a9a8 <__alt_data_end+0xff00a9a8>
 800abe4:	193ff804 	addi	r4,r3,-32
 800abe8:	00800804 	movi	r2,32
 800abec:	4908d83a 	srl	r4,r9,r4
 800abf0:	18804526 	beq	r3,r2,800ad08 <__adddf3+0x564>
 800abf4:	00801004 	movi	r2,64
 800abf8:	10c5c83a 	sub	r2,r2,r3
 800abfc:	4886983a 	sll	r3,r9,r2
 800ac00:	198cb03a 	or	r6,r3,r6
 800ac04:	300cc03a 	cmpne	r6,r6,zero
 800ac08:	218cb03a 	or	r6,r4,r6
 800ac0c:	0007883a 	mov	r3,zero
 800ac10:	003f3b06 	br	800a900 <__alt_data_end+0xff00a900>
 800ac14:	80002a26 	beq	r16,zero,800acc0 <__adddf3+0x51c>
 800ac18:	0101ffc4 	movi	r4,2047
 800ac1c:	11006826 	beq	r2,r4,800adc0 <__adddf3+0x61c>
 800ac20:	00c7c83a 	sub	r3,zero,r3
 800ac24:	42002034 	orhi	r8,r8,128
 800ac28:	01000e04 	movi	r4,56
 800ac2c:	20c07c16 	blt	r4,r3,800ae20 <__adddf3+0x67c>
 800ac30:	010007c4 	movi	r4,31
 800ac34:	20c0da16 	blt	r4,r3,800afa0 <__adddf3+0x7fc>
 800ac38:	01000804 	movi	r4,32
 800ac3c:	20c9c83a 	sub	r4,r4,r3
 800ac40:	4114983a 	sll	r10,r8,r4
 800ac44:	88cad83a 	srl	r5,r17,r3
 800ac48:	8908983a 	sll	r4,r17,r4
 800ac4c:	40c6d83a 	srl	r3,r8,r3
 800ac50:	5162b03a 	or	r17,r10,r5
 800ac54:	2008c03a 	cmpne	r4,r4,zero
 800ac58:	8922b03a 	or	r17,r17,r4
 800ac5c:	3463c83a 	sub	r17,r6,r17
 800ac60:	48c7c83a 	sub	r3,r9,r3
 800ac64:	344d803a 	cmpltu	r6,r6,r17
 800ac68:	1991c83a 	sub	r8,r3,r6
 800ac6c:	1021883a 	mov	r16,r2
 800ac70:	3825883a 	mov	r18,r7
 800ac74:	003f2706 	br	800a914 <__alt_data_end+0xff00a914>
 800ac78:	24d0b03a 	or	r8,r4,r19
 800ac7c:	40001b1e 	bne	r8,zero,800acec <__adddf3+0x548>
 800ac80:	0005883a 	mov	r2,zero
 800ac84:	0007883a 	mov	r3,zero
 800ac88:	0021883a 	mov	r16,zero
 800ac8c:	003f4d06 	br	800a9c4 <__alt_data_end+0xff00a9c4>
 800ac90:	008007c4 	movi	r2,31
 800ac94:	11003c16 	blt	r2,r4,800ad88 <__adddf3+0x5e4>
 800ac98:	00800804 	movi	r2,32
 800ac9c:	1105c83a 	sub	r2,r2,r4
 800aca0:	488e983a 	sll	r7,r9,r2
 800aca4:	310ad83a 	srl	r5,r6,r4
 800aca8:	3084983a 	sll	r2,r6,r2
 800acac:	4912d83a 	srl	r9,r9,r4
 800acb0:	394ab03a 	or	r5,r7,r5
 800acb4:	1004c03a 	cmpne	r2,r2,zero
 800acb8:	288ab03a 	or	r5,r5,r2
 800acbc:	003f5306 	br	800aa0c <__alt_data_end+0xff00aa0c>
 800acc0:	4448b03a 	or	r4,r8,r17
 800acc4:	20003e26 	beq	r4,zero,800adc0 <__adddf3+0x61c>
 800acc8:	00c6303a 	nor	r3,zero,r3
 800accc:	18003a1e 	bne	r3,zero,800adb8 <__adddf3+0x614>
 800acd0:	3463c83a 	sub	r17,r6,r17
 800acd4:	4a07c83a 	sub	r3,r9,r8
 800acd8:	344d803a 	cmpltu	r6,r6,r17
 800acdc:	1991c83a 	sub	r8,r3,r6
 800ace0:	1021883a 	mov	r16,r2
 800ace4:	3825883a 	mov	r18,r7
 800ace8:	003f0a06 	br	800a914 <__alt_data_end+0xff00a914>
 800acec:	2023883a 	mov	r17,r4
 800acf0:	003f0d06 	br	800a928 <__alt_data_end+0xff00a928>
 800acf4:	0081ffc4 	movi	r2,2047
 800acf8:	80bf3f1e 	bne	r16,r2,800a9f8 <__alt_data_end+0xff00a9f8>
 800acfc:	003ec806 	br	800a820 <__alt_data_end+0xff00a820>
 800ad00:	0005883a 	mov	r2,zero
 800ad04:	003fb106 	br	800abcc <__alt_data_end+0xff00abcc>
 800ad08:	0007883a 	mov	r3,zero
 800ad0c:	003fbc06 	br	800ac00 <__alt_data_end+0xff00ac00>
 800ad10:	4444b03a 	or	r2,r8,r17
 800ad14:	8000871e 	bne	r16,zero,800af34 <__adddf3+0x790>
 800ad18:	1000ba26 	beq	r2,zero,800b004 <__adddf3+0x860>
 800ad1c:	4984b03a 	or	r2,r9,r6
 800ad20:	103ebf26 	beq	r2,zero,800a820 <__alt_data_end+0xff00a820>
 800ad24:	8985883a 	add	r2,r17,r6
 800ad28:	4247883a 	add	r3,r8,r9
 800ad2c:	1451803a 	cmpltu	r8,r2,r17
 800ad30:	40d1883a 	add	r8,r8,r3
 800ad34:	40c0202c 	andhi	r3,r8,128
 800ad38:	1023883a 	mov	r17,r2
 800ad3c:	183f1a26 	beq	r3,zero,800a9a8 <__alt_data_end+0xff00a9a8>
 800ad40:	00bfe034 	movhi	r2,65408
 800ad44:	10bfffc4 	addi	r2,r2,-1
 800ad48:	2021883a 	mov	r16,r4
 800ad4c:	4090703a 	and	r8,r8,r2
 800ad50:	003eb306 	br	800a820 <__alt_data_end+0xff00a820>
 800ad54:	4444b03a 	or	r2,r8,r17
 800ad58:	8000291e 	bne	r16,zero,800ae00 <__adddf3+0x65c>
 800ad5c:	10004b1e 	bne	r2,zero,800ae8c <__adddf3+0x6e8>
 800ad60:	4990b03a 	or	r8,r9,r6
 800ad64:	40008b26 	beq	r8,zero,800af94 <__adddf3+0x7f0>
 800ad68:	4811883a 	mov	r8,r9
 800ad6c:	3023883a 	mov	r17,r6
 800ad70:	3825883a 	mov	r18,r7
 800ad74:	003eaa06 	br	800a820 <__alt_data_end+0xff00a820>
 800ad78:	1021883a 	mov	r16,r2
 800ad7c:	0011883a 	mov	r8,zero
 800ad80:	0005883a 	mov	r2,zero
 800ad84:	003f0f06 	br	800a9c4 <__alt_data_end+0xff00a9c4>
 800ad88:	217ff804 	addi	r5,r4,-32
 800ad8c:	00800804 	movi	r2,32
 800ad90:	494ad83a 	srl	r5,r9,r5
 800ad94:	20807d26 	beq	r4,r2,800af8c <__adddf3+0x7e8>
 800ad98:	00801004 	movi	r2,64
 800ad9c:	1109c83a 	sub	r4,r2,r4
 800ada0:	4912983a 	sll	r9,r9,r4
 800ada4:	498cb03a 	or	r6,r9,r6
 800ada8:	300cc03a 	cmpne	r6,r6,zero
 800adac:	298ab03a 	or	r5,r5,r6
 800adb0:	0013883a 	mov	r9,zero
 800adb4:	003f1506 	br	800aa0c <__alt_data_end+0xff00aa0c>
 800adb8:	0101ffc4 	movi	r4,2047
 800adbc:	113f9a1e 	bne	r2,r4,800ac28 <__alt_data_end+0xff00ac28>
 800adc0:	4811883a 	mov	r8,r9
 800adc4:	3023883a 	mov	r17,r6
 800adc8:	1021883a 	mov	r16,r2
 800adcc:	3825883a 	mov	r18,r7
 800add0:	003e9306 	br	800a820 <__alt_data_end+0xff00a820>
 800add4:	8000161e 	bne	r16,zero,800ae30 <__adddf3+0x68c>
 800add8:	444ab03a 	or	r5,r8,r17
 800addc:	28005126 	beq	r5,zero,800af24 <__adddf3+0x780>
 800ade0:	0108303a 	nor	r4,zero,r4
 800ade4:	20004d1e 	bne	r4,zero,800af1c <__adddf3+0x778>
 800ade8:	89a3883a 	add	r17,r17,r6
 800adec:	4253883a 	add	r9,r8,r9
 800adf0:	898d803a 	cmpltu	r6,r17,r6
 800adf4:	3251883a 	add	r8,r6,r9
 800adf8:	1021883a 	mov	r16,r2
 800adfc:	003f0806 	br	800aa20 <__alt_data_end+0xff00aa20>
 800ae00:	1000301e 	bne	r2,zero,800aec4 <__adddf3+0x720>
 800ae04:	4984b03a 	or	r2,r9,r6
 800ae08:	10007126 	beq	r2,zero,800afd0 <__adddf3+0x82c>
 800ae0c:	4811883a 	mov	r8,r9
 800ae10:	3023883a 	mov	r17,r6
 800ae14:	3825883a 	mov	r18,r7
 800ae18:	0401ffc4 	movi	r16,2047
 800ae1c:	003e8006 	br	800a820 <__alt_data_end+0xff00a820>
 800ae20:	4462b03a 	or	r17,r8,r17
 800ae24:	8822c03a 	cmpne	r17,r17,zero
 800ae28:	0007883a 	mov	r3,zero
 800ae2c:	003f8b06 	br	800ac5c <__alt_data_end+0xff00ac5c>
 800ae30:	0141ffc4 	movi	r5,2047
 800ae34:	11403b26 	beq	r2,r5,800af24 <__adddf3+0x780>
 800ae38:	0109c83a 	sub	r4,zero,r4
 800ae3c:	42002034 	orhi	r8,r8,128
 800ae40:	01400e04 	movi	r5,56
 800ae44:	29006716 	blt	r5,r4,800afe4 <__adddf3+0x840>
 800ae48:	014007c4 	movi	r5,31
 800ae4c:	29007016 	blt	r5,r4,800b010 <__adddf3+0x86c>
 800ae50:	01400804 	movi	r5,32
 800ae54:	290bc83a 	sub	r5,r5,r4
 800ae58:	4154983a 	sll	r10,r8,r5
 800ae5c:	890ed83a 	srl	r7,r17,r4
 800ae60:	894a983a 	sll	r5,r17,r5
 800ae64:	4108d83a 	srl	r4,r8,r4
 800ae68:	51e2b03a 	or	r17,r10,r7
 800ae6c:	280ac03a 	cmpne	r5,r5,zero
 800ae70:	8962b03a 	or	r17,r17,r5
 800ae74:	89a3883a 	add	r17,r17,r6
 800ae78:	2253883a 	add	r9,r4,r9
 800ae7c:	898d803a 	cmpltu	r6,r17,r6
 800ae80:	3251883a 	add	r8,r6,r9
 800ae84:	1021883a 	mov	r16,r2
 800ae88:	003ee506 	br	800aa20 <__alt_data_end+0xff00aa20>
 800ae8c:	4984b03a 	or	r2,r9,r6
 800ae90:	103e6326 	beq	r2,zero,800a820 <__alt_data_end+0xff00a820>
 800ae94:	8987c83a 	sub	r3,r17,r6
 800ae98:	88c9803a 	cmpltu	r4,r17,r3
 800ae9c:	4245c83a 	sub	r2,r8,r9
 800aea0:	1105c83a 	sub	r2,r2,r4
 800aea4:	1100202c 	andhi	r4,r2,128
 800aea8:	203ebb26 	beq	r4,zero,800a998 <__alt_data_end+0xff00a998>
 800aeac:	3463c83a 	sub	r17,r6,r17
 800aeb0:	4a07c83a 	sub	r3,r9,r8
 800aeb4:	344d803a 	cmpltu	r6,r6,r17
 800aeb8:	1991c83a 	sub	r8,r3,r6
 800aebc:	3825883a 	mov	r18,r7
 800aec0:	003e5706 	br	800a820 <__alt_data_end+0xff00a820>
 800aec4:	4984b03a 	or	r2,r9,r6
 800aec8:	10002e26 	beq	r2,zero,800af84 <__adddf3+0x7e0>
 800aecc:	4004d0fa 	srli	r2,r8,3
 800aed0:	8822d0fa 	srli	r17,r17,3
 800aed4:	4010977a 	slli	r8,r8,29
 800aed8:	10c0022c 	andhi	r3,r2,8
 800aedc:	4462b03a 	or	r17,r8,r17
 800aee0:	18000826 	beq	r3,zero,800af04 <__adddf3+0x760>
 800aee4:	4808d0fa 	srli	r4,r9,3
 800aee8:	20c0022c 	andhi	r3,r4,8
 800aeec:	1800051e 	bne	r3,zero,800af04 <__adddf3+0x760>
 800aef0:	300cd0fa 	srli	r6,r6,3
 800aef4:	4806977a 	slli	r3,r9,29
 800aef8:	2005883a 	mov	r2,r4
 800aefc:	3825883a 	mov	r18,r7
 800af00:	19a2b03a 	or	r17,r3,r6
 800af04:	8810d77a 	srli	r8,r17,29
 800af08:	100490fa 	slli	r2,r2,3
 800af0c:	882290fa 	slli	r17,r17,3
 800af10:	0401ffc4 	movi	r16,2047
 800af14:	4090b03a 	or	r8,r8,r2
 800af18:	003e4106 	br	800a820 <__alt_data_end+0xff00a820>
 800af1c:	0141ffc4 	movi	r5,2047
 800af20:	117fc71e 	bne	r2,r5,800ae40 <__alt_data_end+0xff00ae40>
 800af24:	4811883a 	mov	r8,r9
 800af28:	3023883a 	mov	r17,r6
 800af2c:	1021883a 	mov	r16,r2
 800af30:	003e3b06 	br	800a820 <__alt_data_end+0xff00a820>
 800af34:	10002f26 	beq	r2,zero,800aff4 <__adddf3+0x850>
 800af38:	4984b03a 	or	r2,r9,r6
 800af3c:	10001126 	beq	r2,zero,800af84 <__adddf3+0x7e0>
 800af40:	4004d0fa 	srli	r2,r8,3
 800af44:	8822d0fa 	srli	r17,r17,3
 800af48:	4010977a 	slli	r8,r8,29
 800af4c:	10c0022c 	andhi	r3,r2,8
 800af50:	4462b03a 	or	r17,r8,r17
 800af54:	183feb26 	beq	r3,zero,800af04 <__alt_data_end+0xff00af04>
 800af58:	4808d0fa 	srli	r4,r9,3
 800af5c:	20c0022c 	andhi	r3,r4,8
 800af60:	183fe81e 	bne	r3,zero,800af04 <__alt_data_end+0xff00af04>
 800af64:	300cd0fa 	srli	r6,r6,3
 800af68:	4806977a 	slli	r3,r9,29
 800af6c:	2005883a 	mov	r2,r4
 800af70:	19a2b03a 	or	r17,r3,r6
 800af74:	003fe306 	br	800af04 <__alt_data_end+0xff00af04>
 800af78:	0011883a 	mov	r8,zero
 800af7c:	0005883a 	mov	r2,zero
 800af80:	003e3f06 	br	800a880 <__alt_data_end+0xff00a880>
 800af84:	0401ffc4 	movi	r16,2047
 800af88:	003e2506 	br	800a820 <__alt_data_end+0xff00a820>
 800af8c:	0013883a 	mov	r9,zero
 800af90:	003f8406 	br	800ada4 <__alt_data_end+0xff00ada4>
 800af94:	0005883a 	mov	r2,zero
 800af98:	0007883a 	mov	r3,zero
 800af9c:	003e8906 	br	800a9c4 <__alt_data_end+0xff00a9c4>
 800afa0:	197ff804 	addi	r5,r3,-32
 800afa4:	01000804 	movi	r4,32
 800afa8:	414ad83a 	srl	r5,r8,r5
 800afac:	19002426 	beq	r3,r4,800b040 <__adddf3+0x89c>
 800afb0:	01001004 	movi	r4,64
 800afb4:	20c7c83a 	sub	r3,r4,r3
 800afb8:	40c6983a 	sll	r3,r8,r3
 800afbc:	1c46b03a 	or	r3,r3,r17
 800afc0:	1806c03a 	cmpne	r3,r3,zero
 800afc4:	28e2b03a 	or	r17,r5,r3
 800afc8:	0007883a 	mov	r3,zero
 800afcc:	003f2306 	br	800ac5c <__alt_data_end+0xff00ac5c>
 800afd0:	0007883a 	mov	r3,zero
 800afd4:	5811883a 	mov	r8,r11
 800afd8:	00bfffc4 	movi	r2,-1
 800afdc:	0401ffc4 	movi	r16,2047
 800afe0:	003e7806 	br	800a9c4 <__alt_data_end+0xff00a9c4>
 800afe4:	4462b03a 	or	r17,r8,r17
 800afe8:	8822c03a 	cmpne	r17,r17,zero
 800afec:	0009883a 	mov	r4,zero
 800aff0:	003fa006 	br	800ae74 <__alt_data_end+0xff00ae74>
 800aff4:	4811883a 	mov	r8,r9
 800aff8:	3023883a 	mov	r17,r6
 800affc:	0401ffc4 	movi	r16,2047
 800b000:	003e0706 	br	800a820 <__alt_data_end+0xff00a820>
 800b004:	4811883a 	mov	r8,r9
 800b008:	3023883a 	mov	r17,r6
 800b00c:	003e0406 	br	800a820 <__alt_data_end+0xff00a820>
 800b010:	21fff804 	addi	r7,r4,-32
 800b014:	01400804 	movi	r5,32
 800b018:	41ced83a 	srl	r7,r8,r7
 800b01c:	21400a26 	beq	r4,r5,800b048 <__adddf3+0x8a4>
 800b020:	01401004 	movi	r5,64
 800b024:	2909c83a 	sub	r4,r5,r4
 800b028:	4108983a 	sll	r4,r8,r4
 800b02c:	2448b03a 	or	r4,r4,r17
 800b030:	2008c03a 	cmpne	r4,r4,zero
 800b034:	3922b03a 	or	r17,r7,r4
 800b038:	0009883a 	mov	r4,zero
 800b03c:	003f8d06 	br	800ae74 <__alt_data_end+0xff00ae74>
 800b040:	0007883a 	mov	r3,zero
 800b044:	003fdd06 	br	800afbc <__alt_data_end+0xff00afbc>
 800b048:	0009883a 	mov	r4,zero
 800b04c:	003ff706 	br	800b02c <__alt_data_end+0xff00b02c>

0800b050 <__divdf3>:
 800b050:	defff204 	addi	sp,sp,-56
 800b054:	dd400915 	stw	r21,36(sp)
 800b058:	282ad53a 	srli	r21,r5,20
 800b05c:	dd000815 	stw	r20,32(sp)
 800b060:	2828d7fa 	srli	r20,r5,31
 800b064:	dc000415 	stw	r16,16(sp)
 800b068:	04000434 	movhi	r16,16
 800b06c:	df000c15 	stw	fp,48(sp)
 800b070:	843fffc4 	addi	r16,r16,-1
 800b074:	dfc00d15 	stw	ra,52(sp)
 800b078:	ddc00b15 	stw	r23,44(sp)
 800b07c:	dd800a15 	stw	r22,40(sp)
 800b080:	dcc00715 	stw	r19,28(sp)
 800b084:	dc800615 	stw	r18,24(sp)
 800b088:	dc400515 	stw	r17,20(sp)
 800b08c:	ad41ffcc 	andi	r21,r21,2047
 800b090:	2c20703a 	and	r16,r5,r16
 800b094:	a7003fcc 	andi	fp,r20,255
 800b098:	a8006126 	beq	r21,zero,800b220 <__divdf3+0x1d0>
 800b09c:	0081ffc4 	movi	r2,2047
 800b0a0:	2025883a 	mov	r18,r4
 800b0a4:	a8803726 	beq	r21,r2,800b184 <__divdf3+0x134>
 800b0a8:	80800434 	orhi	r2,r16,16
 800b0ac:	100490fa 	slli	r2,r2,3
 800b0b0:	2020d77a 	srli	r16,r4,29
 800b0b4:	202490fa 	slli	r18,r4,3
 800b0b8:	ad7f0044 	addi	r21,r21,-1023
 800b0bc:	80a0b03a 	or	r16,r16,r2
 800b0c0:	0027883a 	mov	r19,zero
 800b0c4:	0013883a 	mov	r9,zero
 800b0c8:	3804d53a 	srli	r2,r7,20
 800b0cc:	382cd7fa 	srli	r22,r7,31
 800b0d0:	04400434 	movhi	r17,16
 800b0d4:	8c7fffc4 	addi	r17,r17,-1
 800b0d8:	1081ffcc 	andi	r2,r2,2047
 800b0dc:	3011883a 	mov	r8,r6
 800b0e0:	3c62703a 	and	r17,r7,r17
 800b0e4:	b5c03fcc 	andi	r23,r22,255
 800b0e8:	10006c26 	beq	r2,zero,800b29c <__divdf3+0x24c>
 800b0ec:	00c1ffc4 	movi	r3,2047
 800b0f0:	10c06426 	beq	r2,r3,800b284 <__divdf3+0x234>
 800b0f4:	88c00434 	orhi	r3,r17,16
 800b0f8:	180690fa 	slli	r3,r3,3
 800b0fc:	3022d77a 	srli	r17,r6,29
 800b100:	301090fa 	slli	r8,r6,3
 800b104:	10bf0044 	addi	r2,r2,-1023
 800b108:	88e2b03a 	or	r17,r17,r3
 800b10c:	000f883a 	mov	r7,zero
 800b110:	a58cf03a 	xor	r6,r20,r22
 800b114:	3cc8b03a 	or	r4,r7,r19
 800b118:	a8abc83a 	sub	r21,r21,r2
 800b11c:	008003c4 	movi	r2,15
 800b120:	3007883a 	mov	r3,r6
 800b124:	34c03fcc 	andi	r19,r6,255
 800b128:	11009036 	bltu	r2,r4,800b36c <__divdf3+0x31c>
 800b12c:	200890ba 	slli	r4,r4,2
 800b130:	00820074 	movhi	r2,2049
 800b134:	10ac5104 	addi	r2,r2,-20156
 800b138:	2089883a 	add	r4,r4,r2
 800b13c:	20800017 	ldw	r2,0(r4)
 800b140:	1000683a 	jmp	r2
 800b144:	0800b36c 	andhi	zero,at,717
 800b148:	0800b1bc 	xorhi	zero,at,710
 800b14c:	0800b35c 	xori	zero,at,717
 800b150:	0800b1b0 	cmpltui	zero,at,710
 800b154:	0800b35c 	xori	zero,at,717
 800b158:	0800b330 	cmpltui	zero,at,716
 800b15c:	0800b35c 	xori	zero,at,717
 800b160:	0800b1b0 	cmpltui	zero,at,710
 800b164:	0800b1bc 	xorhi	zero,at,710
 800b168:	0800b1bc 	xorhi	zero,at,710
 800b16c:	0800b330 	cmpltui	zero,at,716
 800b170:	0800b1b0 	cmpltui	zero,at,710
 800b174:	0800b1a0 	cmpeqi	zero,at,710
 800b178:	0800b1a0 	cmpeqi	zero,at,710
 800b17c:	0800b1a0 	cmpeqi	zero,at,710
 800b180:	0800b650 	cmplti	zero,at,729
 800b184:	2404b03a 	or	r2,r4,r16
 800b188:	1000661e 	bne	r2,zero,800b324 <__divdf3+0x2d4>
 800b18c:	04c00204 	movi	r19,8
 800b190:	0021883a 	mov	r16,zero
 800b194:	0025883a 	mov	r18,zero
 800b198:	02400084 	movi	r9,2
 800b19c:	003fca06 	br	800b0c8 <__alt_data_end+0xff00b0c8>
 800b1a0:	8023883a 	mov	r17,r16
 800b1a4:	9011883a 	mov	r8,r18
 800b1a8:	e02f883a 	mov	r23,fp
 800b1ac:	480f883a 	mov	r7,r9
 800b1b0:	00800084 	movi	r2,2
 800b1b4:	3881311e 	bne	r7,r2,800b67c <__divdf3+0x62c>
 800b1b8:	b827883a 	mov	r19,r23
 800b1bc:	98c0004c 	andi	r3,r19,1
 800b1c0:	0081ffc4 	movi	r2,2047
 800b1c4:	000b883a 	mov	r5,zero
 800b1c8:	0025883a 	mov	r18,zero
 800b1cc:	1004953a 	slli	r2,r2,20
 800b1d0:	18c03fcc 	andi	r3,r3,255
 800b1d4:	04400434 	movhi	r17,16
 800b1d8:	8c7fffc4 	addi	r17,r17,-1
 800b1dc:	180697fa 	slli	r3,r3,31
 800b1e0:	2c4a703a 	and	r5,r5,r17
 800b1e4:	288ab03a 	or	r5,r5,r2
 800b1e8:	28c6b03a 	or	r3,r5,r3
 800b1ec:	9005883a 	mov	r2,r18
 800b1f0:	dfc00d17 	ldw	ra,52(sp)
 800b1f4:	df000c17 	ldw	fp,48(sp)
 800b1f8:	ddc00b17 	ldw	r23,44(sp)
 800b1fc:	dd800a17 	ldw	r22,40(sp)
 800b200:	dd400917 	ldw	r21,36(sp)
 800b204:	dd000817 	ldw	r20,32(sp)
 800b208:	dcc00717 	ldw	r19,28(sp)
 800b20c:	dc800617 	ldw	r18,24(sp)
 800b210:	dc400517 	ldw	r17,20(sp)
 800b214:	dc000417 	ldw	r16,16(sp)
 800b218:	dec00e04 	addi	sp,sp,56
 800b21c:	f800283a 	ret
 800b220:	2404b03a 	or	r2,r4,r16
 800b224:	2027883a 	mov	r19,r4
 800b228:	10003926 	beq	r2,zero,800b310 <__divdf3+0x2c0>
 800b22c:	80012e26 	beq	r16,zero,800b6e8 <__divdf3+0x698>
 800b230:	8009883a 	mov	r4,r16
 800b234:	d9800315 	stw	r6,12(sp)
 800b238:	d9c00215 	stw	r7,8(sp)
 800b23c:	800cda80 	call	800cda8 <__clzsi2>
 800b240:	d9800317 	ldw	r6,12(sp)
 800b244:	d9c00217 	ldw	r7,8(sp)
 800b248:	113ffd44 	addi	r4,r2,-11
 800b24c:	00c00704 	movi	r3,28
 800b250:	19012116 	blt	r3,r4,800b6d8 <__divdf3+0x688>
 800b254:	00c00744 	movi	r3,29
 800b258:	147ffe04 	addi	r17,r2,-8
 800b25c:	1907c83a 	sub	r3,r3,r4
 800b260:	8460983a 	sll	r16,r16,r17
 800b264:	98c6d83a 	srl	r3,r19,r3
 800b268:	9c64983a 	sll	r18,r19,r17
 800b26c:	1c20b03a 	or	r16,r3,r16
 800b270:	1080fcc4 	addi	r2,r2,1011
 800b274:	00abc83a 	sub	r21,zero,r2
 800b278:	0027883a 	mov	r19,zero
 800b27c:	0013883a 	mov	r9,zero
 800b280:	003f9106 	br	800b0c8 <__alt_data_end+0xff00b0c8>
 800b284:	3446b03a 	or	r3,r6,r17
 800b288:	18001f1e 	bne	r3,zero,800b308 <__divdf3+0x2b8>
 800b28c:	0023883a 	mov	r17,zero
 800b290:	0011883a 	mov	r8,zero
 800b294:	01c00084 	movi	r7,2
 800b298:	003f9d06 	br	800b110 <__alt_data_end+0xff00b110>
 800b29c:	3446b03a 	or	r3,r6,r17
 800b2a0:	18001526 	beq	r3,zero,800b2f8 <__divdf3+0x2a8>
 800b2a4:	88011b26 	beq	r17,zero,800b714 <__divdf3+0x6c4>
 800b2a8:	8809883a 	mov	r4,r17
 800b2ac:	d9800315 	stw	r6,12(sp)
 800b2b0:	da400115 	stw	r9,4(sp)
 800b2b4:	800cda80 	call	800cda8 <__clzsi2>
 800b2b8:	d9800317 	ldw	r6,12(sp)
 800b2bc:	da400117 	ldw	r9,4(sp)
 800b2c0:	113ffd44 	addi	r4,r2,-11
 800b2c4:	00c00704 	movi	r3,28
 800b2c8:	19010e16 	blt	r3,r4,800b704 <__divdf3+0x6b4>
 800b2cc:	00c00744 	movi	r3,29
 800b2d0:	123ffe04 	addi	r8,r2,-8
 800b2d4:	1907c83a 	sub	r3,r3,r4
 800b2d8:	8a22983a 	sll	r17,r17,r8
 800b2dc:	30c6d83a 	srl	r3,r6,r3
 800b2e0:	3210983a 	sll	r8,r6,r8
 800b2e4:	1c62b03a 	or	r17,r3,r17
 800b2e8:	1080fcc4 	addi	r2,r2,1011
 800b2ec:	0085c83a 	sub	r2,zero,r2
 800b2f0:	000f883a 	mov	r7,zero
 800b2f4:	003f8606 	br	800b110 <__alt_data_end+0xff00b110>
 800b2f8:	0023883a 	mov	r17,zero
 800b2fc:	0011883a 	mov	r8,zero
 800b300:	01c00044 	movi	r7,1
 800b304:	003f8206 	br	800b110 <__alt_data_end+0xff00b110>
 800b308:	01c000c4 	movi	r7,3
 800b30c:	003f8006 	br	800b110 <__alt_data_end+0xff00b110>
 800b310:	04c00104 	movi	r19,4
 800b314:	0021883a 	mov	r16,zero
 800b318:	0025883a 	mov	r18,zero
 800b31c:	02400044 	movi	r9,1
 800b320:	003f6906 	br	800b0c8 <__alt_data_end+0xff00b0c8>
 800b324:	04c00304 	movi	r19,12
 800b328:	024000c4 	movi	r9,3
 800b32c:	003f6606 	br	800b0c8 <__alt_data_end+0xff00b0c8>
 800b330:	01400434 	movhi	r5,16
 800b334:	0007883a 	mov	r3,zero
 800b338:	297fffc4 	addi	r5,r5,-1
 800b33c:	04bfffc4 	movi	r18,-1
 800b340:	0081ffc4 	movi	r2,2047
 800b344:	003fa106 	br	800b1cc <__alt_data_end+0xff00b1cc>
 800b348:	00c00044 	movi	r3,1
 800b34c:	1887c83a 	sub	r3,r3,r2
 800b350:	01000e04 	movi	r4,56
 800b354:	20c1210e 	bge	r4,r3,800b7dc <__divdf3+0x78c>
 800b358:	98c0004c 	andi	r3,r19,1
 800b35c:	0005883a 	mov	r2,zero
 800b360:	000b883a 	mov	r5,zero
 800b364:	0025883a 	mov	r18,zero
 800b368:	003f9806 	br	800b1cc <__alt_data_end+0xff00b1cc>
 800b36c:	8c00fd36 	bltu	r17,r16,800b764 <__divdf3+0x714>
 800b370:	8440fb26 	beq	r16,r17,800b760 <__divdf3+0x710>
 800b374:	8007883a 	mov	r3,r16
 800b378:	ad7fffc4 	addi	r21,r21,-1
 800b37c:	0021883a 	mov	r16,zero
 800b380:	4004d63a 	srli	r2,r8,24
 800b384:	8822923a 	slli	r17,r17,8
 800b388:	1809883a 	mov	r4,r3
 800b38c:	402c923a 	slli	r22,r8,8
 800b390:	88b8b03a 	or	fp,r17,r2
 800b394:	e028d43a 	srli	r20,fp,16
 800b398:	d8c00015 	stw	r3,0(sp)
 800b39c:	e5ffffcc 	andi	r23,fp,65535
 800b3a0:	a00b883a 	mov	r5,r20
 800b3a4:	800a6e80 	call	800a6e8 <__udivsi3>
 800b3a8:	d8c00017 	ldw	r3,0(sp)
 800b3ac:	a00b883a 	mov	r5,r20
 800b3b0:	d8800315 	stw	r2,12(sp)
 800b3b4:	1809883a 	mov	r4,r3
 800b3b8:	800a74c0 	call	800a74c <__umodsi3>
 800b3bc:	d9800317 	ldw	r6,12(sp)
 800b3c0:	1006943a 	slli	r3,r2,16
 800b3c4:	9004d43a 	srli	r2,r18,16
 800b3c8:	b9a3383a 	mul	r17,r23,r6
 800b3cc:	10c4b03a 	or	r2,r2,r3
 800b3d0:	1440062e 	bgeu	r2,r17,800b3ec <__divdf3+0x39c>
 800b3d4:	1705883a 	add	r2,r2,fp
 800b3d8:	30ffffc4 	addi	r3,r6,-1
 800b3dc:	1700ee36 	bltu	r2,fp,800b798 <__divdf3+0x748>
 800b3e0:	1440ed2e 	bgeu	r2,r17,800b798 <__divdf3+0x748>
 800b3e4:	31bfff84 	addi	r6,r6,-2
 800b3e8:	1705883a 	add	r2,r2,fp
 800b3ec:	1463c83a 	sub	r17,r2,r17
 800b3f0:	a00b883a 	mov	r5,r20
 800b3f4:	8809883a 	mov	r4,r17
 800b3f8:	d9800315 	stw	r6,12(sp)
 800b3fc:	800a6e80 	call	800a6e8 <__udivsi3>
 800b400:	a00b883a 	mov	r5,r20
 800b404:	8809883a 	mov	r4,r17
 800b408:	d8800215 	stw	r2,8(sp)
 800b40c:	800a74c0 	call	800a74c <__umodsi3>
 800b410:	d9c00217 	ldw	r7,8(sp)
 800b414:	1004943a 	slli	r2,r2,16
 800b418:	94bfffcc 	andi	r18,r18,65535
 800b41c:	b9d1383a 	mul	r8,r23,r7
 800b420:	90a4b03a 	or	r18,r18,r2
 800b424:	d9800317 	ldw	r6,12(sp)
 800b428:	9200062e 	bgeu	r18,r8,800b444 <__divdf3+0x3f4>
 800b42c:	9725883a 	add	r18,r18,fp
 800b430:	38bfffc4 	addi	r2,r7,-1
 800b434:	9700d636 	bltu	r18,fp,800b790 <__divdf3+0x740>
 800b438:	9200d52e 	bgeu	r18,r8,800b790 <__divdf3+0x740>
 800b43c:	39ffff84 	addi	r7,r7,-2
 800b440:	9725883a 	add	r18,r18,fp
 800b444:	3004943a 	slli	r2,r6,16
 800b448:	b012d43a 	srli	r9,r22,16
 800b44c:	b1bfffcc 	andi	r6,r22,65535
 800b450:	11e2b03a 	or	r17,r2,r7
 800b454:	8806d43a 	srli	r3,r17,16
 800b458:	893fffcc 	andi	r4,r17,65535
 800b45c:	218b383a 	mul	r5,r4,r6
 800b460:	30c5383a 	mul	r2,r6,r3
 800b464:	2249383a 	mul	r4,r4,r9
 800b468:	280ed43a 	srli	r7,r5,16
 800b46c:	9225c83a 	sub	r18,r18,r8
 800b470:	2089883a 	add	r4,r4,r2
 800b474:	3909883a 	add	r4,r7,r4
 800b478:	1a47383a 	mul	r3,r3,r9
 800b47c:	2080022e 	bgeu	r4,r2,800b488 <__divdf3+0x438>
 800b480:	00800074 	movhi	r2,1
 800b484:	1887883a 	add	r3,r3,r2
 800b488:	2004d43a 	srli	r2,r4,16
 800b48c:	2008943a 	slli	r4,r4,16
 800b490:	297fffcc 	andi	r5,r5,65535
 800b494:	10c7883a 	add	r3,r2,r3
 800b498:	2149883a 	add	r4,r4,r5
 800b49c:	90c0a536 	bltu	r18,r3,800b734 <__divdf3+0x6e4>
 800b4a0:	90c0bf26 	beq	r18,r3,800b7a0 <__divdf3+0x750>
 800b4a4:	90c7c83a 	sub	r3,r18,r3
 800b4a8:	810fc83a 	sub	r7,r16,r4
 800b4ac:	81e5803a 	cmpltu	r18,r16,r7
 800b4b0:	1ca5c83a 	sub	r18,r3,r18
 800b4b4:	e480c126 	beq	fp,r18,800b7bc <__divdf3+0x76c>
 800b4b8:	a00b883a 	mov	r5,r20
 800b4bc:	9009883a 	mov	r4,r18
 800b4c0:	d9800315 	stw	r6,12(sp)
 800b4c4:	d9c00215 	stw	r7,8(sp)
 800b4c8:	da400115 	stw	r9,4(sp)
 800b4cc:	800a6e80 	call	800a6e8 <__udivsi3>
 800b4d0:	a00b883a 	mov	r5,r20
 800b4d4:	9009883a 	mov	r4,r18
 800b4d8:	d8800015 	stw	r2,0(sp)
 800b4dc:	800a74c0 	call	800a74c <__umodsi3>
 800b4e0:	d9c00217 	ldw	r7,8(sp)
 800b4e4:	da000017 	ldw	r8,0(sp)
 800b4e8:	1006943a 	slli	r3,r2,16
 800b4ec:	3804d43a 	srli	r2,r7,16
 800b4f0:	ba21383a 	mul	r16,r23,r8
 800b4f4:	d9800317 	ldw	r6,12(sp)
 800b4f8:	10c4b03a 	or	r2,r2,r3
 800b4fc:	da400117 	ldw	r9,4(sp)
 800b500:	1400062e 	bgeu	r2,r16,800b51c <__divdf3+0x4cc>
 800b504:	1705883a 	add	r2,r2,fp
 800b508:	40ffffc4 	addi	r3,r8,-1
 800b50c:	1700ad36 	bltu	r2,fp,800b7c4 <__divdf3+0x774>
 800b510:	1400ac2e 	bgeu	r2,r16,800b7c4 <__divdf3+0x774>
 800b514:	423fff84 	addi	r8,r8,-2
 800b518:	1705883a 	add	r2,r2,fp
 800b51c:	1421c83a 	sub	r16,r2,r16
 800b520:	a00b883a 	mov	r5,r20
 800b524:	8009883a 	mov	r4,r16
 800b528:	d9800315 	stw	r6,12(sp)
 800b52c:	d9c00215 	stw	r7,8(sp)
 800b530:	da000015 	stw	r8,0(sp)
 800b534:	da400115 	stw	r9,4(sp)
 800b538:	800a6e80 	call	800a6e8 <__udivsi3>
 800b53c:	8009883a 	mov	r4,r16
 800b540:	a00b883a 	mov	r5,r20
 800b544:	1025883a 	mov	r18,r2
 800b548:	800a74c0 	call	800a74c <__umodsi3>
 800b54c:	d9c00217 	ldw	r7,8(sp)
 800b550:	1004943a 	slli	r2,r2,16
 800b554:	bcaf383a 	mul	r23,r23,r18
 800b558:	393fffcc 	andi	r4,r7,65535
 800b55c:	2088b03a 	or	r4,r4,r2
 800b560:	d9800317 	ldw	r6,12(sp)
 800b564:	da000017 	ldw	r8,0(sp)
 800b568:	da400117 	ldw	r9,4(sp)
 800b56c:	25c0062e 	bgeu	r4,r23,800b588 <__divdf3+0x538>
 800b570:	2709883a 	add	r4,r4,fp
 800b574:	90bfffc4 	addi	r2,r18,-1
 800b578:	27009436 	bltu	r4,fp,800b7cc <__divdf3+0x77c>
 800b57c:	25c0932e 	bgeu	r4,r23,800b7cc <__divdf3+0x77c>
 800b580:	94bfff84 	addi	r18,r18,-2
 800b584:	2709883a 	add	r4,r4,fp
 800b588:	4004943a 	slli	r2,r8,16
 800b58c:	25efc83a 	sub	r23,r4,r23
 800b590:	1490b03a 	or	r8,r2,r18
 800b594:	4008d43a 	srli	r4,r8,16
 800b598:	40ffffcc 	andi	r3,r8,65535
 800b59c:	30c5383a 	mul	r2,r6,r3
 800b5a0:	1a47383a 	mul	r3,r3,r9
 800b5a4:	310d383a 	mul	r6,r6,r4
 800b5a8:	100ad43a 	srli	r5,r2,16
 800b5ac:	4913383a 	mul	r9,r9,r4
 800b5b0:	1987883a 	add	r3,r3,r6
 800b5b4:	28c7883a 	add	r3,r5,r3
 800b5b8:	1980022e 	bgeu	r3,r6,800b5c4 <__divdf3+0x574>
 800b5bc:	01000074 	movhi	r4,1
 800b5c0:	4913883a 	add	r9,r9,r4
 800b5c4:	1808d43a 	srli	r4,r3,16
 800b5c8:	1806943a 	slli	r3,r3,16
 800b5cc:	10bfffcc 	andi	r2,r2,65535
 800b5d0:	2253883a 	add	r9,r4,r9
 800b5d4:	1887883a 	add	r3,r3,r2
 800b5d8:	ba403836 	bltu	r23,r9,800b6bc <__divdf3+0x66c>
 800b5dc:	ba403626 	beq	r23,r9,800b6b8 <__divdf3+0x668>
 800b5e0:	42000054 	ori	r8,r8,1
 800b5e4:	a880ffc4 	addi	r2,r21,1023
 800b5e8:	00bf570e 	bge	zero,r2,800b348 <__alt_data_end+0xff00b348>
 800b5ec:	40c001cc 	andi	r3,r8,7
 800b5f0:	18000726 	beq	r3,zero,800b610 <__divdf3+0x5c0>
 800b5f4:	40c003cc 	andi	r3,r8,15
 800b5f8:	01000104 	movi	r4,4
 800b5fc:	19000426 	beq	r3,r4,800b610 <__divdf3+0x5c0>
 800b600:	4107883a 	add	r3,r8,r4
 800b604:	1a11803a 	cmpltu	r8,r3,r8
 800b608:	8a23883a 	add	r17,r17,r8
 800b60c:	1811883a 	mov	r8,r3
 800b610:	88c0402c 	andhi	r3,r17,256
 800b614:	18000426 	beq	r3,zero,800b628 <__divdf3+0x5d8>
 800b618:	00ffc034 	movhi	r3,65280
 800b61c:	18ffffc4 	addi	r3,r3,-1
 800b620:	a8810004 	addi	r2,r21,1024
 800b624:	88e2703a 	and	r17,r17,r3
 800b628:	00c1ff84 	movi	r3,2046
 800b62c:	18bee316 	blt	r3,r2,800b1bc <__alt_data_end+0xff00b1bc>
 800b630:	8824977a 	slli	r18,r17,29
 800b634:	4010d0fa 	srli	r8,r8,3
 800b638:	8822927a 	slli	r17,r17,9
 800b63c:	1081ffcc 	andi	r2,r2,2047
 800b640:	9224b03a 	or	r18,r18,r8
 800b644:	880ad33a 	srli	r5,r17,12
 800b648:	98c0004c 	andi	r3,r19,1
 800b64c:	003edf06 	br	800b1cc <__alt_data_end+0xff00b1cc>
 800b650:	8080022c 	andhi	r2,r16,8
 800b654:	10001226 	beq	r2,zero,800b6a0 <__divdf3+0x650>
 800b658:	8880022c 	andhi	r2,r17,8
 800b65c:	1000101e 	bne	r2,zero,800b6a0 <__divdf3+0x650>
 800b660:	00800434 	movhi	r2,16
 800b664:	89400234 	orhi	r5,r17,8
 800b668:	10bfffc4 	addi	r2,r2,-1
 800b66c:	b007883a 	mov	r3,r22
 800b670:	288a703a 	and	r5,r5,r2
 800b674:	4025883a 	mov	r18,r8
 800b678:	003f3106 	br	800b340 <__alt_data_end+0xff00b340>
 800b67c:	008000c4 	movi	r2,3
 800b680:	3880a626 	beq	r7,r2,800b91c <__divdf3+0x8cc>
 800b684:	00800044 	movi	r2,1
 800b688:	3880521e 	bne	r7,r2,800b7d4 <__divdf3+0x784>
 800b68c:	b807883a 	mov	r3,r23
 800b690:	0005883a 	mov	r2,zero
 800b694:	000b883a 	mov	r5,zero
 800b698:	0025883a 	mov	r18,zero
 800b69c:	003ecb06 	br	800b1cc <__alt_data_end+0xff00b1cc>
 800b6a0:	00800434 	movhi	r2,16
 800b6a4:	81400234 	orhi	r5,r16,8
 800b6a8:	10bfffc4 	addi	r2,r2,-1
 800b6ac:	a007883a 	mov	r3,r20
 800b6b0:	288a703a 	and	r5,r5,r2
 800b6b4:	003f2206 	br	800b340 <__alt_data_end+0xff00b340>
 800b6b8:	183fca26 	beq	r3,zero,800b5e4 <__alt_data_end+0xff00b5e4>
 800b6bc:	e5ef883a 	add	r23,fp,r23
 800b6c0:	40bfffc4 	addi	r2,r8,-1
 800b6c4:	bf00392e 	bgeu	r23,fp,800b7ac <__divdf3+0x75c>
 800b6c8:	1011883a 	mov	r8,r2
 800b6cc:	ba7fc41e 	bne	r23,r9,800b5e0 <__alt_data_end+0xff00b5e0>
 800b6d0:	b0ffc31e 	bne	r22,r3,800b5e0 <__alt_data_end+0xff00b5e0>
 800b6d4:	003fc306 	br	800b5e4 <__alt_data_end+0xff00b5e4>
 800b6d8:	143ff604 	addi	r16,r2,-40
 800b6dc:	9c20983a 	sll	r16,r19,r16
 800b6e0:	0025883a 	mov	r18,zero
 800b6e4:	003ee206 	br	800b270 <__alt_data_end+0xff00b270>
 800b6e8:	d9800315 	stw	r6,12(sp)
 800b6ec:	d9c00215 	stw	r7,8(sp)
 800b6f0:	800cda80 	call	800cda8 <__clzsi2>
 800b6f4:	10800804 	addi	r2,r2,32
 800b6f8:	d9c00217 	ldw	r7,8(sp)
 800b6fc:	d9800317 	ldw	r6,12(sp)
 800b700:	003ed106 	br	800b248 <__alt_data_end+0xff00b248>
 800b704:	147ff604 	addi	r17,r2,-40
 800b708:	3462983a 	sll	r17,r6,r17
 800b70c:	0011883a 	mov	r8,zero
 800b710:	003ef506 	br	800b2e8 <__alt_data_end+0xff00b2e8>
 800b714:	3009883a 	mov	r4,r6
 800b718:	d9800315 	stw	r6,12(sp)
 800b71c:	da400115 	stw	r9,4(sp)
 800b720:	800cda80 	call	800cda8 <__clzsi2>
 800b724:	10800804 	addi	r2,r2,32
 800b728:	da400117 	ldw	r9,4(sp)
 800b72c:	d9800317 	ldw	r6,12(sp)
 800b730:	003ee306 	br	800b2c0 <__alt_data_end+0xff00b2c0>
 800b734:	85a1883a 	add	r16,r16,r22
 800b738:	8585803a 	cmpltu	r2,r16,r22
 800b73c:	1705883a 	add	r2,r2,fp
 800b740:	14a5883a 	add	r18,r2,r18
 800b744:	88bfffc4 	addi	r2,r17,-1
 800b748:	e4800c2e 	bgeu	fp,r18,800b77c <__divdf3+0x72c>
 800b74c:	90c03e36 	bltu	r18,r3,800b848 <__divdf3+0x7f8>
 800b750:	1c806926 	beq	r3,r18,800b8f8 <__divdf3+0x8a8>
 800b754:	90c7c83a 	sub	r3,r18,r3
 800b758:	1023883a 	mov	r17,r2
 800b75c:	003f5206 	br	800b4a8 <__alt_data_end+0xff00b4a8>
 800b760:	923f0436 	bltu	r18,r8,800b374 <__alt_data_end+0xff00b374>
 800b764:	800897fa 	slli	r4,r16,31
 800b768:	9004d07a 	srli	r2,r18,1
 800b76c:	8006d07a 	srli	r3,r16,1
 800b770:	902097fa 	slli	r16,r18,31
 800b774:	20a4b03a 	or	r18,r4,r2
 800b778:	003f0106 	br	800b380 <__alt_data_end+0xff00b380>
 800b77c:	e4bff51e 	bne	fp,r18,800b754 <__alt_data_end+0xff00b754>
 800b780:	85bff22e 	bgeu	r16,r22,800b74c <__alt_data_end+0xff00b74c>
 800b784:	e0c7c83a 	sub	r3,fp,r3
 800b788:	1023883a 	mov	r17,r2
 800b78c:	003f4606 	br	800b4a8 <__alt_data_end+0xff00b4a8>
 800b790:	100f883a 	mov	r7,r2
 800b794:	003f2b06 	br	800b444 <__alt_data_end+0xff00b444>
 800b798:	180d883a 	mov	r6,r3
 800b79c:	003f1306 	br	800b3ec <__alt_data_end+0xff00b3ec>
 800b7a0:	813fe436 	bltu	r16,r4,800b734 <__alt_data_end+0xff00b734>
 800b7a4:	0007883a 	mov	r3,zero
 800b7a8:	003f3f06 	br	800b4a8 <__alt_data_end+0xff00b4a8>
 800b7ac:	ba402c36 	bltu	r23,r9,800b860 <__divdf3+0x810>
 800b7b0:	4dc05426 	beq	r9,r23,800b904 <__divdf3+0x8b4>
 800b7b4:	1011883a 	mov	r8,r2
 800b7b8:	003f8906 	br	800b5e0 <__alt_data_end+0xff00b5e0>
 800b7bc:	023fffc4 	movi	r8,-1
 800b7c0:	003f8806 	br	800b5e4 <__alt_data_end+0xff00b5e4>
 800b7c4:	1811883a 	mov	r8,r3
 800b7c8:	003f5406 	br	800b51c <__alt_data_end+0xff00b51c>
 800b7cc:	1025883a 	mov	r18,r2
 800b7d0:	003f6d06 	br	800b588 <__alt_data_end+0xff00b588>
 800b7d4:	b827883a 	mov	r19,r23
 800b7d8:	003f8206 	br	800b5e4 <__alt_data_end+0xff00b5e4>
 800b7dc:	010007c4 	movi	r4,31
 800b7e0:	20c02616 	blt	r4,r3,800b87c <__divdf3+0x82c>
 800b7e4:	00800804 	movi	r2,32
 800b7e8:	10c5c83a 	sub	r2,r2,r3
 800b7ec:	888a983a 	sll	r5,r17,r2
 800b7f0:	40c8d83a 	srl	r4,r8,r3
 800b7f4:	4084983a 	sll	r2,r8,r2
 800b7f8:	88e2d83a 	srl	r17,r17,r3
 800b7fc:	2906b03a 	or	r3,r5,r4
 800b800:	1004c03a 	cmpne	r2,r2,zero
 800b804:	1886b03a 	or	r3,r3,r2
 800b808:	188001cc 	andi	r2,r3,7
 800b80c:	10000726 	beq	r2,zero,800b82c <__divdf3+0x7dc>
 800b810:	188003cc 	andi	r2,r3,15
 800b814:	01000104 	movi	r4,4
 800b818:	11000426 	beq	r2,r4,800b82c <__divdf3+0x7dc>
 800b81c:	1805883a 	mov	r2,r3
 800b820:	10c00104 	addi	r3,r2,4
 800b824:	1885803a 	cmpltu	r2,r3,r2
 800b828:	88a3883a 	add	r17,r17,r2
 800b82c:	8880202c 	andhi	r2,r17,128
 800b830:	10002726 	beq	r2,zero,800b8d0 <__divdf3+0x880>
 800b834:	98c0004c 	andi	r3,r19,1
 800b838:	00800044 	movi	r2,1
 800b83c:	000b883a 	mov	r5,zero
 800b840:	0025883a 	mov	r18,zero
 800b844:	003e6106 	br	800b1cc <__alt_data_end+0xff00b1cc>
 800b848:	85a1883a 	add	r16,r16,r22
 800b84c:	8585803a 	cmpltu	r2,r16,r22
 800b850:	1705883a 	add	r2,r2,fp
 800b854:	14a5883a 	add	r18,r2,r18
 800b858:	8c7fff84 	addi	r17,r17,-2
 800b85c:	003f1106 	br	800b4a4 <__alt_data_end+0xff00b4a4>
 800b860:	b589883a 	add	r4,r22,r22
 800b864:	25ad803a 	cmpltu	r22,r4,r22
 800b868:	b739883a 	add	fp,r22,fp
 800b86c:	40bfff84 	addi	r2,r8,-2
 800b870:	bf2f883a 	add	r23,r23,fp
 800b874:	202d883a 	mov	r22,r4
 800b878:	003f9306 	br	800b6c8 <__alt_data_end+0xff00b6c8>
 800b87c:	013ff844 	movi	r4,-31
 800b880:	2085c83a 	sub	r2,r4,r2
 800b884:	8888d83a 	srl	r4,r17,r2
 800b888:	00800804 	movi	r2,32
 800b88c:	18802126 	beq	r3,r2,800b914 <__divdf3+0x8c4>
 800b890:	00801004 	movi	r2,64
 800b894:	10c5c83a 	sub	r2,r2,r3
 800b898:	8884983a 	sll	r2,r17,r2
 800b89c:	1204b03a 	or	r2,r2,r8
 800b8a0:	1004c03a 	cmpne	r2,r2,zero
 800b8a4:	2084b03a 	or	r2,r4,r2
 800b8a8:	144001cc 	andi	r17,r2,7
 800b8ac:	88000d1e 	bne	r17,zero,800b8e4 <__divdf3+0x894>
 800b8b0:	000b883a 	mov	r5,zero
 800b8b4:	1024d0fa 	srli	r18,r2,3
 800b8b8:	98c0004c 	andi	r3,r19,1
 800b8bc:	0005883a 	mov	r2,zero
 800b8c0:	9464b03a 	or	r18,r18,r17
 800b8c4:	003e4106 	br	800b1cc <__alt_data_end+0xff00b1cc>
 800b8c8:	1007883a 	mov	r3,r2
 800b8cc:	0023883a 	mov	r17,zero
 800b8d0:	880a927a 	slli	r5,r17,9
 800b8d4:	1805883a 	mov	r2,r3
 800b8d8:	8822977a 	slli	r17,r17,29
 800b8dc:	280ad33a 	srli	r5,r5,12
 800b8e0:	003ff406 	br	800b8b4 <__alt_data_end+0xff00b8b4>
 800b8e4:	10c003cc 	andi	r3,r2,15
 800b8e8:	01000104 	movi	r4,4
 800b8ec:	193ff626 	beq	r3,r4,800b8c8 <__alt_data_end+0xff00b8c8>
 800b8f0:	0023883a 	mov	r17,zero
 800b8f4:	003fca06 	br	800b820 <__alt_data_end+0xff00b820>
 800b8f8:	813fd336 	bltu	r16,r4,800b848 <__alt_data_end+0xff00b848>
 800b8fc:	1023883a 	mov	r17,r2
 800b900:	003fa806 	br	800b7a4 <__alt_data_end+0xff00b7a4>
 800b904:	b0ffd636 	bltu	r22,r3,800b860 <__alt_data_end+0xff00b860>
 800b908:	1011883a 	mov	r8,r2
 800b90c:	b0ff341e 	bne	r22,r3,800b5e0 <__alt_data_end+0xff00b5e0>
 800b910:	003f3406 	br	800b5e4 <__alt_data_end+0xff00b5e4>
 800b914:	0005883a 	mov	r2,zero
 800b918:	003fe006 	br	800b89c <__alt_data_end+0xff00b89c>
 800b91c:	00800434 	movhi	r2,16
 800b920:	89400234 	orhi	r5,r17,8
 800b924:	10bfffc4 	addi	r2,r2,-1
 800b928:	b807883a 	mov	r3,r23
 800b92c:	288a703a 	and	r5,r5,r2
 800b930:	4025883a 	mov	r18,r8
 800b934:	003e8206 	br	800b340 <__alt_data_end+0xff00b340>

0800b938 <__eqdf2>:
 800b938:	2804d53a 	srli	r2,r5,20
 800b93c:	3806d53a 	srli	r3,r7,20
 800b940:	02000434 	movhi	r8,16
 800b944:	423fffc4 	addi	r8,r8,-1
 800b948:	1081ffcc 	andi	r2,r2,2047
 800b94c:	0281ffc4 	movi	r10,2047
 800b950:	2a12703a 	and	r9,r5,r8
 800b954:	18c1ffcc 	andi	r3,r3,2047
 800b958:	3a10703a 	and	r8,r7,r8
 800b95c:	280ad7fa 	srli	r5,r5,31
 800b960:	380ed7fa 	srli	r7,r7,31
 800b964:	12801026 	beq	r2,r10,800b9a8 <__eqdf2+0x70>
 800b968:	0281ffc4 	movi	r10,2047
 800b96c:	1a800a26 	beq	r3,r10,800b998 <__eqdf2+0x60>
 800b970:	10c00226 	beq	r2,r3,800b97c <__eqdf2+0x44>
 800b974:	00800044 	movi	r2,1
 800b978:	f800283a 	ret
 800b97c:	4a3ffd1e 	bne	r9,r8,800b974 <__alt_data_end+0xff00b974>
 800b980:	21bffc1e 	bne	r4,r6,800b974 <__alt_data_end+0xff00b974>
 800b984:	29c00c26 	beq	r5,r7,800b9b8 <__eqdf2+0x80>
 800b988:	103ffa1e 	bne	r2,zero,800b974 <__alt_data_end+0xff00b974>
 800b98c:	2244b03a 	or	r2,r4,r9
 800b990:	1004c03a 	cmpne	r2,r2,zero
 800b994:	f800283a 	ret
 800b998:	3214b03a 	or	r10,r6,r8
 800b99c:	503ff426 	beq	r10,zero,800b970 <__alt_data_end+0xff00b970>
 800b9a0:	00800044 	movi	r2,1
 800b9a4:	f800283a 	ret
 800b9a8:	2254b03a 	or	r10,r4,r9
 800b9ac:	503fee26 	beq	r10,zero,800b968 <__alt_data_end+0xff00b968>
 800b9b0:	00800044 	movi	r2,1
 800b9b4:	f800283a 	ret
 800b9b8:	0005883a 	mov	r2,zero
 800b9bc:	f800283a 	ret

0800b9c0 <__gedf2>:
 800b9c0:	2804d53a 	srli	r2,r5,20
 800b9c4:	3806d53a 	srli	r3,r7,20
 800b9c8:	02000434 	movhi	r8,16
 800b9cc:	423fffc4 	addi	r8,r8,-1
 800b9d0:	1081ffcc 	andi	r2,r2,2047
 800b9d4:	0241ffc4 	movi	r9,2047
 800b9d8:	2a14703a 	and	r10,r5,r8
 800b9dc:	18c1ffcc 	andi	r3,r3,2047
 800b9e0:	3a10703a 	and	r8,r7,r8
 800b9e4:	280ad7fa 	srli	r5,r5,31
 800b9e8:	380ed7fa 	srli	r7,r7,31
 800b9ec:	12401d26 	beq	r2,r9,800ba64 <__gedf2+0xa4>
 800b9f0:	0241ffc4 	movi	r9,2047
 800b9f4:	1a401226 	beq	r3,r9,800ba40 <__gedf2+0x80>
 800b9f8:	1000081e 	bne	r2,zero,800ba1c <__gedf2+0x5c>
 800b9fc:	2296b03a 	or	r11,r4,r10
 800ba00:	5813003a 	cmpeq	r9,r11,zero
 800ba04:	1800091e 	bne	r3,zero,800ba2c <__gedf2+0x6c>
 800ba08:	3218b03a 	or	r12,r6,r8
 800ba0c:	6000071e 	bne	r12,zero,800ba2c <__gedf2+0x6c>
 800ba10:	0005883a 	mov	r2,zero
 800ba14:	5800101e 	bne	r11,zero,800ba58 <__gedf2+0x98>
 800ba18:	f800283a 	ret
 800ba1c:	18000c1e 	bne	r3,zero,800ba50 <__gedf2+0x90>
 800ba20:	3212b03a 	or	r9,r6,r8
 800ba24:	48000c26 	beq	r9,zero,800ba58 <__gedf2+0x98>
 800ba28:	0013883a 	mov	r9,zero
 800ba2c:	39c03fcc 	andi	r7,r7,255
 800ba30:	48000826 	beq	r9,zero,800ba54 <__gedf2+0x94>
 800ba34:	38000926 	beq	r7,zero,800ba5c <__gedf2+0x9c>
 800ba38:	00800044 	movi	r2,1
 800ba3c:	f800283a 	ret
 800ba40:	3212b03a 	or	r9,r6,r8
 800ba44:	483fec26 	beq	r9,zero,800b9f8 <__alt_data_end+0xff00b9f8>
 800ba48:	00bfff84 	movi	r2,-2
 800ba4c:	f800283a 	ret
 800ba50:	39c03fcc 	andi	r7,r7,255
 800ba54:	29c00626 	beq	r5,r7,800ba70 <__gedf2+0xb0>
 800ba58:	283ff726 	beq	r5,zero,800ba38 <__alt_data_end+0xff00ba38>
 800ba5c:	00bfffc4 	movi	r2,-1
 800ba60:	f800283a 	ret
 800ba64:	2292b03a 	or	r9,r4,r10
 800ba68:	483fe126 	beq	r9,zero,800b9f0 <__alt_data_end+0xff00b9f0>
 800ba6c:	003ff606 	br	800ba48 <__alt_data_end+0xff00ba48>
 800ba70:	18bff916 	blt	r3,r2,800ba58 <__alt_data_end+0xff00ba58>
 800ba74:	10c00316 	blt	r2,r3,800ba84 <__gedf2+0xc4>
 800ba78:	42bff736 	bltu	r8,r10,800ba58 <__alt_data_end+0xff00ba58>
 800ba7c:	52000326 	beq	r10,r8,800ba8c <__gedf2+0xcc>
 800ba80:	5200042e 	bgeu	r10,r8,800ba94 <__gedf2+0xd4>
 800ba84:	283fec1e 	bne	r5,zero,800ba38 <__alt_data_end+0xff00ba38>
 800ba88:	003ff406 	br	800ba5c <__alt_data_end+0xff00ba5c>
 800ba8c:	313ff236 	bltu	r6,r4,800ba58 <__alt_data_end+0xff00ba58>
 800ba90:	21bffc36 	bltu	r4,r6,800ba84 <__alt_data_end+0xff00ba84>
 800ba94:	0005883a 	mov	r2,zero
 800ba98:	f800283a 	ret

0800ba9c <__ledf2>:
 800ba9c:	2804d53a 	srli	r2,r5,20
 800baa0:	3810d53a 	srli	r8,r7,20
 800baa4:	00c00434 	movhi	r3,16
 800baa8:	18ffffc4 	addi	r3,r3,-1
 800baac:	1081ffcc 	andi	r2,r2,2047
 800bab0:	0241ffc4 	movi	r9,2047
 800bab4:	28d4703a 	and	r10,r5,r3
 800bab8:	4201ffcc 	andi	r8,r8,2047
 800babc:	38c6703a 	and	r3,r7,r3
 800bac0:	280ad7fa 	srli	r5,r5,31
 800bac4:	380ed7fa 	srli	r7,r7,31
 800bac8:	12401f26 	beq	r2,r9,800bb48 <__ledf2+0xac>
 800bacc:	0241ffc4 	movi	r9,2047
 800bad0:	42401426 	beq	r8,r9,800bb24 <__ledf2+0x88>
 800bad4:	1000091e 	bne	r2,zero,800bafc <__ledf2+0x60>
 800bad8:	2296b03a 	or	r11,r4,r10
 800badc:	5813003a 	cmpeq	r9,r11,zero
 800bae0:	29403fcc 	andi	r5,r5,255
 800bae4:	40000a1e 	bne	r8,zero,800bb10 <__ledf2+0x74>
 800bae8:	30d8b03a 	or	r12,r6,r3
 800baec:	6000081e 	bne	r12,zero,800bb10 <__ledf2+0x74>
 800baf0:	0005883a 	mov	r2,zero
 800baf4:	5800111e 	bne	r11,zero,800bb3c <__ledf2+0xa0>
 800baf8:	f800283a 	ret
 800bafc:	29403fcc 	andi	r5,r5,255
 800bb00:	40000c1e 	bne	r8,zero,800bb34 <__ledf2+0x98>
 800bb04:	30d2b03a 	or	r9,r6,r3
 800bb08:	48000c26 	beq	r9,zero,800bb3c <__ledf2+0xa0>
 800bb0c:	0013883a 	mov	r9,zero
 800bb10:	39c03fcc 	andi	r7,r7,255
 800bb14:	48000826 	beq	r9,zero,800bb38 <__ledf2+0x9c>
 800bb18:	38001126 	beq	r7,zero,800bb60 <__ledf2+0xc4>
 800bb1c:	00800044 	movi	r2,1
 800bb20:	f800283a 	ret
 800bb24:	30d2b03a 	or	r9,r6,r3
 800bb28:	483fea26 	beq	r9,zero,800bad4 <__alt_data_end+0xff00bad4>
 800bb2c:	00800084 	movi	r2,2
 800bb30:	f800283a 	ret
 800bb34:	39c03fcc 	andi	r7,r7,255
 800bb38:	39400726 	beq	r7,r5,800bb58 <__ledf2+0xbc>
 800bb3c:	2800081e 	bne	r5,zero,800bb60 <__ledf2+0xc4>
 800bb40:	00800044 	movi	r2,1
 800bb44:	f800283a 	ret
 800bb48:	2292b03a 	or	r9,r4,r10
 800bb4c:	483fdf26 	beq	r9,zero,800bacc <__alt_data_end+0xff00bacc>
 800bb50:	00800084 	movi	r2,2
 800bb54:	f800283a 	ret
 800bb58:	4080030e 	bge	r8,r2,800bb68 <__ledf2+0xcc>
 800bb5c:	383fef26 	beq	r7,zero,800bb1c <__alt_data_end+0xff00bb1c>
 800bb60:	00bfffc4 	movi	r2,-1
 800bb64:	f800283a 	ret
 800bb68:	123feb16 	blt	r2,r8,800bb18 <__alt_data_end+0xff00bb18>
 800bb6c:	1abff336 	bltu	r3,r10,800bb3c <__alt_data_end+0xff00bb3c>
 800bb70:	50c00326 	beq	r10,r3,800bb80 <__ledf2+0xe4>
 800bb74:	50c0042e 	bgeu	r10,r3,800bb88 <__ledf2+0xec>
 800bb78:	283fe81e 	bne	r5,zero,800bb1c <__alt_data_end+0xff00bb1c>
 800bb7c:	003ff806 	br	800bb60 <__alt_data_end+0xff00bb60>
 800bb80:	313fee36 	bltu	r6,r4,800bb3c <__alt_data_end+0xff00bb3c>
 800bb84:	21bffc36 	bltu	r4,r6,800bb78 <__alt_data_end+0xff00bb78>
 800bb88:	0005883a 	mov	r2,zero
 800bb8c:	f800283a 	ret

0800bb90 <__muldf3>:
 800bb90:	defff304 	addi	sp,sp,-52
 800bb94:	2804d53a 	srli	r2,r5,20
 800bb98:	dd800915 	stw	r22,36(sp)
 800bb9c:	282cd7fa 	srli	r22,r5,31
 800bba0:	dc000315 	stw	r16,12(sp)
 800bba4:	04000434 	movhi	r16,16
 800bba8:	dd400815 	stw	r21,32(sp)
 800bbac:	dc800515 	stw	r18,20(sp)
 800bbb0:	843fffc4 	addi	r16,r16,-1
 800bbb4:	dfc00c15 	stw	ra,48(sp)
 800bbb8:	df000b15 	stw	fp,44(sp)
 800bbbc:	ddc00a15 	stw	r23,40(sp)
 800bbc0:	dd000715 	stw	r20,28(sp)
 800bbc4:	dcc00615 	stw	r19,24(sp)
 800bbc8:	dc400415 	stw	r17,16(sp)
 800bbcc:	1481ffcc 	andi	r18,r2,2047
 800bbd0:	2c20703a 	and	r16,r5,r16
 800bbd4:	b02b883a 	mov	r21,r22
 800bbd8:	b2403fcc 	andi	r9,r22,255
 800bbdc:	90006026 	beq	r18,zero,800bd60 <__muldf3+0x1d0>
 800bbe0:	0081ffc4 	movi	r2,2047
 800bbe4:	2029883a 	mov	r20,r4
 800bbe8:	90803626 	beq	r18,r2,800bcc4 <__muldf3+0x134>
 800bbec:	80800434 	orhi	r2,r16,16
 800bbf0:	100490fa 	slli	r2,r2,3
 800bbf4:	2020d77a 	srli	r16,r4,29
 800bbf8:	202890fa 	slli	r20,r4,3
 800bbfc:	94bf0044 	addi	r18,r18,-1023
 800bc00:	80a0b03a 	or	r16,r16,r2
 800bc04:	0027883a 	mov	r19,zero
 800bc08:	0039883a 	mov	fp,zero
 800bc0c:	3804d53a 	srli	r2,r7,20
 800bc10:	382ed7fa 	srli	r23,r7,31
 800bc14:	04400434 	movhi	r17,16
 800bc18:	8c7fffc4 	addi	r17,r17,-1
 800bc1c:	1081ffcc 	andi	r2,r2,2047
 800bc20:	3011883a 	mov	r8,r6
 800bc24:	3c62703a 	and	r17,r7,r17
 800bc28:	ba803fcc 	andi	r10,r23,255
 800bc2c:	10006d26 	beq	r2,zero,800bde4 <__muldf3+0x254>
 800bc30:	00c1ffc4 	movi	r3,2047
 800bc34:	10c06526 	beq	r2,r3,800bdcc <__muldf3+0x23c>
 800bc38:	88c00434 	orhi	r3,r17,16
 800bc3c:	180690fa 	slli	r3,r3,3
 800bc40:	3022d77a 	srli	r17,r6,29
 800bc44:	301090fa 	slli	r8,r6,3
 800bc48:	10bf0044 	addi	r2,r2,-1023
 800bc4c:	88e2b03a 	or	r17,r17,r3
 800bc50:	000b883a 	mov	r5,zero
 800bc54:	9085883a 	add	r2,r18,r2
 800bc58:	2cc8b03a 	or	r4,r5,r19
 800bc5c:	00c003c4 	movi	r3,15
 800bc60:	bdacf03a 	xor	r22,r23,r22
 800bc64:	12c00044 	addi	r11,r2,1
 800bc68:	19009936 	bltu	r3,r4,800bed0 <__muldf3+0x340>
 800bc6c:	200890ba 	slli	r4,r4,2
 800bc70:	00c20074 	movhi	r3,2049
 800bc74:	18ef2104 	addi	r3,r3,-17276
 800bc78:	20c9883a 	add	r4,r4,r3
 800bc7c:	20c00017 	ldw	r3,0(r4)
 800bc80:	1800683a 	jmp	r3
 800bc84:	0800bed0 	cmplti	zero,at,763
 800bc88:	0800bce4 	muli	zero,at,755
 800bc8c:	0800bce4 	muli	zero,at,755
 800bc90:	0800bce0 	cmpeqi	zero,at,755
 800bc94:	0800beac 	andhi	zero,at,762
 800bc98:	0800beac 	andhi	zero,at,762
 800bc9c:	0800be94 	ori	zero,at,762
 800bca0:	0800bce0 	cmpeqi	zero,at,755
 800bca4:	0800beac 	andhi	zero,at,762
 800bca8:	0800be94 	ori	zero,at,762
 800bcac:	0800beac 	andhi	zero,at,762
 800bcb0:	0800bce0 	cmpeqi	zero,at,755
 800bcb4:	0800bebc 	xorhi	zero,at,762
 800bcb8:	0800bebc 	xorhi	zero,at,762
 800bcbc:	0800bebc 	xorhi	zero,at,762
 800bcc0:	0800c0d8 	cmpnei	zero,at,771
 800bcc4:	2404b03a 	or	r2,r4,r16
 800bcc8:	10006f1e 	bne	r2,zero,800be88 <__muldf3+0x2f8>
 800bccc:	04c00204 	movi	r19,8
 800bcd0:	0021883a 	mov	r16,zero
 800bcd4:	0029883a 	mov	r20,zero
 800bcd8:	07000084 	movi	fp,2
 800bcdc:	003fcb06 	br	800bc0c <__alt_data_end+0xff00bc0c>
 800bce0:	502d883a 	mov	r22,r10
 800bce4:	00800084 	movi	r2,2
 800bce8:	28805726 	beq	r5,r2,800be48 <__muldf3+0x2b8>
 800bcec:	008000c4 	movi	r2,3
 800bcf0:	28816626 	beq	r5,r2,800c28c <__muldf3+0x6fc>
 800bcf4:	00800044 	movi	r2,1
 800bcf8:	2881411e 	bne	r5,r2,800c200 <__muldf3+0x670>
 800bcfc:	b02b883a 	mov	r21,r22
 800bd00:	0005883a 	mov	r2,zero
 800bd04:	000b883a 	mov	r5,zero
 800bd08:	0029883a 	mov	r20,zero
 800bd0c:	1004953a 	slli	r2,r2,20
 800bd10:	a8c03fcc 	andi	r3,r21,255
 800bd14:	04400434 	movhi	r17,16
 800bd18:	8c7fffc4 	addi	r17,r17,-1
 800bd1c:	180697fa 	slli	r3,r3,31
 800bd20:	2c4a703a 	and	r5,r5,r17
 800bd24:	288ab03a 	or	r5,r5,r2
 800bd28:	28c6b03a 	or	r3,r5,r3
 800bd2c:	a005883a 	mov	r2,r20
 800bd30:	dfc00c17 	ldw	ra,48(sp)
 800bd34:	df000b17 	ldw	fp,44(sp)
 800bd38:	ddc00a17 	ldw	r23,40(sp)
 800bd3c:	dd800917 	ldw	r22,36(sp)
 800bd40:	dd400817 	ldw	r21,32(sp)
 800bd44:	dd000717 	ldw	r20,28(sp)
 800bd48:	dcc00617 	ldw	r19,24(sp)
 800bd4c:	dc800517 	ldw	r18,20(sp)
 800bd50:	dc400417 	ldw	r17,16(sp)
 800bd54:	dc000317 	ldw	r16,12(sp)
 800bd58:	dec00d04 	addi	sp,sp,52
 800bd5c:	f800283a 	ret
 800bd60:	2404b03a 	or	r2,r4,r16
 800bd64:	2027883a 	mov	r19,r4
 800bd68:	10004226 	beq	r2,zero,800be74 <__muldf3+0x2e4>
 800bd6c:	8000fc26 	beq	r16,zero,800c160 <__muldf3+0x5d0>
 800bd70:	8009883a 	mov	r4,r16
 800bd74:	d9800215 	stw	r6,8(sp)
 800bd78:	d9c00015 	stw	r7,0(sp)
 800bd7c:	da400115 	stw	r9,4(sp)
 800bd80:	800cda80 	call	800cda8 <__clzsi2>
 800bd84:	d9800217 	ldw	r6,8(sp)
 800bd88:	d9c00017 	ldw	r7,0(sp)
 800bd8c:	da400117 	ldw	r9,4(sp)
 800bd90:	113ffd44 	addi	r4,r2,-11
 800bd94:	00c00704 	movi	r3,28
 800bd98:	1900ed16 	blt	r3,r4,800c150 <__muldf3+0x5c0>
 800bd9c:	00c00744 	movi	r3,29
 800bda0:	147ffe04 	addi	r17,r2,-8
 800bda4:	1907c83a 	sub	r3,r3,r4
 800bda8:	8460983a 	sll	r16,r16,r17
 800bdac:	98c6d83a 	srl	r3,r19,r3
 800bdb0:	9c68983a 	sll	r20,r19,r17
 800bdb4:	1c20b03a 	or	r16,r3,r16
 800bdb8:	1080fcc4 	addi	r2,r2,1011
 800bdbc:	00a5c83a 	sub	r18,zero,r2
 800bdc0:	0027883a 	mov	r19,zero
 800bdc4:	0039883a 	mov	fp,zero
 800bdc8:	003f9006 	br	800bc0c <__alt_data_end+0xff00bc0c>
 800bdcc:	3446b03a 	or	r3,r6,r17
 800bdd0:	1800261e 	bne	r3,zero,800be6c <__muldf3+0x2dc>
 800bdd4:	0023883a 	mov	r17,zero
 800bdd8:	0011883a 	mov	r8,zero
 800bddc:	01400084 	movi	r5,2
 800bde0:	003f9c06 	br	800bc54 <__alt_data_end+0xff00bc54>
 800bde4:	3446b03a 	or	r3,r6,r17
 800bde8:	18001c26 	beq	r3,zero,800be5c <__muldf3+0x2cc>
 800bdec:	8800ce26 	beq	r17,zero,800c128 <__muldf3+0x598>
 800bdf0:	8809883a 	mov	r4,r17
 800bdf4:	d9800215 	stw	r6,8(sp)
 800bdf8:	da400115 	stw	r9,4(sp)
 800bdfc:	da800015 	stw	r10,0(sp)
 800be00:	800cda80 	call	800cda8 <__clzsi2>
 800be04:	d9800217 	ldw	r6,8(sp)
 800be08:	da400117 	ldw	r9,4(sp)
 800be0c:	da800017 	ldw	r10,0(sp)
 800be10:	113ffd44 	addi	r4,r2,-11
 800be14:	00c00704 	movi	r3,28
 800be18:	1900bf16 	blt	r3,r4,800c118 <__muldf3+0x588>
 800be1c:	00c00744 	movi	r3,29
 800be20:	123ffe04 	addi	r8,r2,-8
 800be24:	1907c83a 	sub	r3,r3,r4
 800be28:	8a22983a 	sll	r17,r17,r8
 800be2c:	30c6d83a 	srl	r3,r6,r3
 800be30:	3210983a 	sll	r8,r6,r8
 800be34:	1c62b03a 	or	r17,r3,r17
 800be38:	1080fcc4 	addi	r2,r2,1011
 800be3c:	0085c83a 	sub	r2,zero,r2
 800be40:	000b883a 	mov	r5,zero
 800be44:	003f8306 	br	800bc54 <__alt_data_end+0xff00bc54>
 800be48:	b02b883a 	mov	r21,r22
 800be4c:	0081ffc4 	movi	r2,2047
 800be50:	000b883a 	mov	r5,zero
 800be54:	0029883a 	mov	r20,zero
 800be58:	003fac06 	br	800bd0c <__alt_data_end+0xff00bd0c>
 800be5c:	0023883a 	mov	r17,zero
 800be60:	0011883a 	mov	r8,zero
 800be64:	01400044 	movi	r5,1
 800be68:	003f7a06 	br	800bc54 <__alt_data_end+0xff00bc54>
 800be6c:	014000c4 	movi	r5,3
 800be70:	003f7806 	br	800bc54 <__alt_data_end+0xff00bc54>
 800be74:	04c00104 	movi	r19,4
 800be78:	0021883a 	mov	r16,zero
 800be7c:	0029883a 	mov	r20,zero
 800be80:	07000044 	movi	fp,1
 800be84:	003f6106 	br	800bc0c <__alt_data_end+0xff00bc0c>
 800be88:	04c00304 	movi	r19,12
 800be8c:	070000c4 	movi	fp,3
 800be90:	003f5e06 	br	800bc0c <__alt_data_end+0xff00bc0c>
 800be94:	01400434 	movhi	r5,16
 800be98:	002b883a 	mov	r21,zero
 800be9c:	297fffc4 	addi	r5,r5,-1
 800bea0:	053fffc4 	movi	r20,-1
 800bea4:	0081ffc4 	movi	r2,2047
 800bea8:	003f9806 	br	800bd0c <__alt_data_end+0xff00bd0c>
 800beac:	8023883a 	mov	r17,r16
 800beb0:	a011883a 	mov	r8,r20
 800beb4:	e00b883a 	mov	r5,fp
 800beb8:	003f8a06 	br	800bce4 <__alt_data_end+0xff00bce4>
 800bebc:	8023883a 	mov	r17,r16
 800bec0:	a011883a 	mov	r8,r20
 800bec4:	482d883a 	mov	r22,r9
 800bec8:	e00b883a 	mov	r5,fp
 800becc:	003f8506 	br	800bce4 <__alt_data_end+0xff00bce4>
 800bed0:	a00ad43a 	srli	r5,r20,16
 800bed4:	401ad43a 	srli	r13,r8,16
 800bed8:	a53fffcc 	andi	r20,r20,65535
 800bedc:	423fffcc 	andi	r8,r8,65535
 800bee0:	4519383a 	mul	r12,r8,r20
 800bee4:	4147383a 	mul	r3,r8,r5
 800bee8:	6d09383a 	mul	r4,r13,r20
 800beec:	600cd43a 	srli	r6,r12,16
 800bef0:	2b5d383a 	mul	r14,r5,r13
 800bef4:	20c9883a 	add	r4,r4,r3
 800bef8:	310d883a 	add	r6,r6,r4
 800befc:	30c0022e 	bgeu	r6,r3,800bf08 <__muldf3+0x378>
 800bf00:	00c00074 	movhi	r3,1
 800bf04:	70dd883a 	add	r14,r14,r3
 800bf08:	8826d43a 	srli	r19,r17,16
 800bf0c:	8bffffcc 	andi	r15,r17,65535
 800bf10:	7d23383a 	mul	r17,r15,r20
 800bf14:	7949383a 	mul	r4,r15,r5
 800bf18:	9d29383a 	mul	r20,r19,r20
 800bf1c:	8814d43a 	srli	r10,r17,16
 800bf20:	3012943a 	slli	r9,r6,16
 800bf24:	a129883a 	add	r20,r20,r4
 800bf28:	633fffcc 	andi	r12,r12,65535
 800bf2c:	5515883a 	add	r10,r10,r20
 800bf30:	3006d43a 	srli	r3,r6,16
 800bf34:	4b13883a 	add	r9,r9,r12
 800bf38:	2ccb383a 	mul	r5,r5,r19
 800bf3c:	5100022e 	bgeu	r10,r4,800bf48 <__muldf3+0x3b8>
 800bf40:	01000074 	movhi	r4,1
 800bf44:	290b883a 	add	r5,r5,r4
 800bf48:	802ad43a 	srli	r21,r16,16
 800bf4c:	843fffcc 	andi	r16,r16,65535
 800bf50:	440d383a 	mul	r6,r8,r16
 800bf54:	4565383a 	mul	r18,r8,r21
 800bf58:	8349383a 	mul	r4,r16,r13
 800bf5c:	500e943a 	slli	r7,r10,16
 800bf60:	3010d43a 	srli	r8,r6,16
 800bf64:	5028d43a 	srli	r20,r10,16
 800bf68:	2489883a 	add	r4,r4,r18
 800bf6c:	8abfffcc 	andi	r10,r17,65535
 800bf70:	3a95883a 	add	r10,r7,r10
 800bf74:	4119883a 	add	r12,r8,r4
 800bf78:	a169883a 	add	r20,r20,r5
 800bf7c:	1a87883a 	add	r3,r3,r10
 800bf80:	6d5b383a 	mul	r13,r13,r21
 800bf84:	6480022e 	bgeu	r12,r18,800bf90 <__muldf3+0x400>
 800bf88:	01000074 	movhi	r4,1
 800bf8c:	691b883a 	add	r13,r13,r4
 800bf90:	7c25383a 	mul	r18,r15,r16
 800bf94:	7d4b383a 	mul	r5,r15,r21
 800bf98:	84cf383a 	mul	r7,r16,r19
 800bf9c:	901ed43a 	srli	r15,r18,16
 800bfa0:	6008d43a 	srli	r4,r12,16
 800bfa4:	6010943a 	slli	r8,r12,16
 800bfa8:	394f883a 	add	r7,r7,r5
 800bfac:	333fffcc 	andi	r12,r6,65535
 800bfb0:	79df883a 	add	r15,r15,r7
 800bfb4:	235b883a 	add	r13,r4,r13
 800bfb8:	9d63383a 	mul	r17,r19,r21
 800bfbc:	4309883a 	add	r4,r8,r12
 800bfc0:	7940022e 	bgeu	r15,r5,800bfcc <__muldf3+0x43c>
 800bfc4:	01400074 	movhi	r5,1
 800bfc8:	8963883a 	add	r17,r17,r5
 800bfcc:	780a943a 	slli	r5,r15,16
 800bfd0:	91bfffcc 	andi	r6,r18,65535
 800bfd4:	70c7883a 	add	r3,r14,r3
 800bfd8:	298d883a 	add	r6,r5,r6
 800bfdc:	1a8f803a 	cmpltu	r7,r3,r10
 800bfe0:	350b883a 	add	r5,r6,r20
 800bfe4:	20c7883a 	add	r3,r4,r3
 800bfe8:	3955883a 	add	r10,r7,r5
 800bfec:	1909803a 	cmpltu	r4,r3,r4
 800bff0:	6a91883a 	add	r8,r13,r10
 800bff4:	780cd43a 	srli	r6,r15,16
 800bff8:	2219883a 	add	r12,r4,r8
 800bffc:	2d0b803a 	cmpltu	r5,r5,r20
 800c000:	51cf803a 	cmpltu	r7,r10,r7
 800c004:	29ceb03a 	or	r7,r5,r7
 800c008:	4351803a 	cmpltu	r8,r8,r13
 800c00c:	610b803a 	cmpltu	r5,r12,r4
 800c010:	4148b03a 	or	r4,r8,r5
 800c014:	398f883a 	add	r7,r7,r6
 800c018:	3909883a 	add	r4,r7,r4
 800c01c:	1810927a 	slli	r8,r3,9
 800c020:	2449883a 	add	r4,r4,r17
 800c024:	2008927a 	slli	r4,r4,9
 800c028:	6022d5fa 	srli	r17,r12,23
 800c02c:	1806d5fa 	srli	r3,r3,23
 800c030:	4252b03a 	or	r9,r8,r9
 800c034:	600a927a 	slli	r5,r12,9
 800c038:	4810c03a 	cmpne	r8,r9,zero
 800c03c:	2462b03a 	or	r17,r4,r17
 800c040:	40c6b03a 	or	r3,r8,r3
 800c044:	8900402c 	andhi	r4,r17,256
 800c048:	1950b03a 	or	r8,r3,r5
 800c04c:	20000726 	beq	r4,zero,800c06c <__muldf3+0x4dc>
 800c050:	4006d07a 	srli	r3,r8,1
 800c054:	880497fa 	slli	r2,r17,31
 800c058:	4200004c 	andi	r8,r8,1
 800c05c:	8822d07a 	srli	r17,r17,1
 800c060:	1a10b03a 	or	r8,r3,r8
 800c064:	1210b03a 	or	r8,r2,r8
 800c068:	5805883a 	mov	r2,r11
 800c06c:	1140ffc4 	addi	r5,r2,1023
 800c070:	0140440e 	bge	zero,r5,800c184 <__muldf3+0x5f4>
 800c074:	40c001cc 	andi	r3,r8,7
 800c078:	18000726 	beq	r3,zero,800c098 <__muldf3+0x508>
 800c07c:	40c003cc 	andi	r3,r8,15
 800c080:	01000104 	movi	r4,4
 800c084:	19000426 	beq	r3,r4,800c098 <__muldf3+0x508>
 800c088:	4107883a 	add	r3,r8,r4
 800c08c:	1a11803a 	cmpltu	r8,r3,r8
 800c090:	8a23883a 	add	r17,r17,r8
 800c094:	1811883a 	mov	r8,r3
 800c098:	88c0402c 	andhi	r3,r17,256
 800c09c:	18000426 	beq	r3,zero,800c0b0 <__muldf3+0x520>
 800c0a0:	11410004 	addi	r5,r2,1024
 800c0a4:	00bfc034 	movhi	r2,65280
 800c0a8:	10bfffc4 	addi	r2,r2,-1
 800c0ac:	88a2703a 	and	r17,r17,r2
 800c0b0:	0081ff84 	movi	r2,2046
 800c0b4:	117f6416 	blt	r2,r5,800be48 <__alt_data_end+0xff00be48>
 800c0b8:	8828977a 	slli	r20,r17,29
 800c0bc:	4010d0fa 	srli	r8,r8,3
 800c0c0:	8822927a 	slli	r17,r17,9
 800c0c4:	2881ffcc 	andi	r2,r5,2047
 800c0c8:	a228b03a 	or	r20,r20,r8
 800c0cc:	880ad33a 	srli	r5,r17,12
 800c0d0:	b02b883a 	mov	r21,r22
 800c0d4:	003f0d06 	br	800bd0c <__alt_data_end+0xff00bd0c>
 800c0d8:	8080022c 	andhi	r2,r16,8
 800c0dc:	10000926 	beq	r2,zero,800c104 <__muldf3+0x574>
 800c0e0:	8880022c 	andhi	r2,r17,8
 800c0e4:	1000071e 	bne	r2,zero,800c104 <__muldf3+0x574>
 800c0e8:	00800434 	movhi	r2,16
 800c0ec:	89400234 	orhi	r5,r17,8
 800c0f0:	10bfffc4 	addi	r2,r2,-1
 800c0f4:	b82b883a 	mov	r21,r23
 800c0f8:	288a703a 	and	r5,r5,r2
 800c0fc:	4029883a 	mov	r20,r8
 800c100:	003f6806 	br	800bea4 <__alt_data_end+0xff00bea4>
 800c104:	00800434 	movhi	r2,16
 800c108:	81400234 	orhi	r5,r16,8
 800c10c:	10bfffc4 	addi	r2,r2,-1
 800c110:	288a703a 	and	r5,r5,r2
 800c114:	003f6306 	br	800bea4 <__alt_data_end+0xff00bea4>
 800c118:	147ff604 	addi	r17,r2,-40
 800c11c:	3462983a 	sll	r17,r6,r17
 800c120:	0011883a 	mov	r8,zero
 800c124:	003f4406 	br	800be38 <__alt_data_end+0xff00be38>
 800c128:	3009883a 	mov	r4,r6
 800c12c:	d9800215 	stw	r6,8(sp)
 800c130:	da400115 	stw	r9,4(sp)
 800c134:	da800015 	stw	r10,0(sp)
 800c138:	800cda80 	call	800cda8 <__clzsi2>
 800c13c:	10800804 	addi	r2,r2,32
 800c140:	da800017 	ldw	r10,0(sp)
 800c144:	da400117 	ldw	r9,4(sp)
 800c148:	d9800217 	ldw	r6,8(sp)
 800c14c:	003f3006 	br	800be10 <__alt_data_end+0xff00be10>
 800c150:	143ff604 	addi	r16,r2,-40
 800c154:	9c20983a 	sll	r16,r19,r16
 800c158:	0029883a 	mov	r20,zero
 800c15c:	003f1606 	br	800bdb8 <__alt_data_end+0xff00bdb8>
 800c160:	d9800215 	stw	r6,8(sp)
 800c164:	d9c00015 	stw	r7,0(sp)
 800c168:	da400115 	stw	r9,4(sp)
 800c16c:	800cda80 	call	800cda8 <__clzsi2>
 800c170:	10800804 	addi	r2,r2,32
 800c174:	da400117 	ldw	r9,4(sp)
 800c178:	d9c00017 	ldw	r7,0(sp)
 800c17c:	d9800217 	ldw	r6,8(sp)
 800c180:	003f0306 	br	800bd90 <__alt_data_end+0xff00bd90>
 800c184:	00c00044 	movi	r3,1
 800c188:	1947c83a 	sub	r3,r3,r5
 800c18c:	00800e04 	movi	r2,56
 800c190:	10feda16 	blt	r2,r3,800bcfc <__alt_data_end+0xff00bcfc>
 800c194:	008007c4 	movi	r2,31
 800c198:	10c01b16 	blt	r2,r3,800c208 <__muldf3+0x678>
 800c19c:	00800804 	movi	r2,32
 800c1a0:	10c5c83a 	sub	r2,r2,r3
 800c1a4:	888a983a 	sll	r5,r17,r2
 800c1a8:	40c8d83a 	srl	r4,r8,r3
 800c1ac:	4084983a 	sll	r2,r8,r2
 800c1b0:	88e2d83a 	srl	r17,r17,r3
 800c1b4:	2906b03a 	or	r3,r5,r4
 800c1b8:	1004c03a 	cmpne	r2,r2,zero
 800c1bc:	1886b03a 	or	r3,r3,r2
 800c1c0:	188001cc 	andi	r2,r3,7
 800c1c4:	10000726 	beq	r2,zero,800c1e4 <__muldf3+0x654>
 800c1c8:	188003cc 	andi	r2,r3,15
 800c1cc:	01000104 	movi	r4,4
 800c1d0:	11000426 	beq	r2,r4,800c1e4 <__muldf3+0x654>
 800c1d4:	1805883a 	mov	r2,r3
 800c1d8:	10c00104 	addi	r3,r2,4
 800c1dc:	1885803a 	cmpltu	r2,r3,r2
 800c1e0:	88a3883a 	add	r17,r17,r2
 800c1e4:	8880202c 	andhi	r2,r17,128
 800c1e8:	10001c26 	beq	r2,zero,800c25c <__muldf3+0x6cc>
 800c1ec:	b02b883a 	mov	r21,r22
 800c1f0:	00800044 	movi	r2,1
 800c1f4:	000b883a 	mov	r5,zero
 800c1f8:	0029883a 	mov	r20,zero
 800c1fc:	003ec306 	br	800bd0c <__alt_data_end+0xff00bd0c>
 800c200:	5805883a 	mov	r2,r11
 800c204:	003f9906 	br	800c06c <__alt_data_end+0xff00c06c>
 800c208:	00bff844 	movi	r2,-31
 800c20c:	1145c83a 	sub	r2,r2,r5
 800c210:	8888d83a 	srl	r4,r17,r2
 800c214:	00800804 	movi	r2,32
 800c218:	18801a26 	beq	r3,r2,800c284 <__muldf3+0x6f4>
 800c21c:	00801004 	movi	r2,64
 800c220:	10c5c83a 	sub	r2,r2,r3
 800c224:	8884983a 	sll	r2,r17,r2
 800c228:	1204b03a 	or	r2,r2,r8
 800c22c:	1004c03a 	cmpne	r2,r2,zero
 800c230:	2084b03a 	or	r2,r4,r2
 800c234:	144001cc 	andi	r17,r2,7
 800c238:	88000d1e 	bne	r17,zero,800c270 <__muldf3+0x6e0>
 800c23c:	000b883a 	mov	r5,zero
 800c240:	1028d0fa 	srli	r20,r2,3
 800c244:	b02b883a 	mov	r21,r22
 800c248:	0005883a 	mov	r2,zero
 800c24c:	a468b03a 	or	r20,r20,r17
 800c250:	003eae06 	br	800bd0c <__alt_data_end+0xff00bd0c>
 800c254:	1007883a 	mov	r3,r2
 800c258:	0023883a 	mov	r17,zero
 800c25c:	880a927a 	slli	r5,r17,9
 800c260:	1805883a 	mov	r2,r3
 800c264:	8822977a 	slli	r17,r17,29
 800c268:	280ad33a 	srli	r5,r5,12
 800c26c:	003ff406 	br	800c240 <__alt_data_end+0xff00c240>
 800c270:	10c003cc 	andi	r3,r2,15
 800c274:	01000104 	movi	r4,4
 800c278:	193ff626 	beq	r3,r4,800c254 <__alt_data_end+0xff00c254>
 800c27c:	0023883a 	mov	r17,zero
 800c280:	003fd506 	br	800c1d8 <__alt_data_end+0xff00c1d8>
 800c284:	0005883a 	mov	r2,zero
 800c288:	003fe706 	br	800c228 <__alt_data_end+0xff00c228>
 800c28c:	00800434 	movhi	r2,16
 800c290:	89400234 	orhi	r5,r17,8
 800c294:	10bfffc4 	addi	r2,r2,-1
 800c298:	b02b883a 	mov	r21,r22
 800c29c:	288a703a 	and	r5,r5,r2
 800c2a0:	4029883a 	mov	r20,r8
 800c2a4:	003eff06 	br	800bea4 <__alt_data_end+0xff00bea4>

0800c2a8 <__subdf3>:
 800c2a8:	02000434 	movhi	r8,16
 800c2ac:	423fffc4 	addi	r8,r8,-1
 800c2b0:	defffb04 	addi	sp,sp,-20
 800c2b4:	2a14703a 	and	r10,r5,r8
 800c2b8:	3812d53a 	srli	r9,r7,20
 800c2bc:	3a10703a 	and	r8,r7,r8
 800c2c0:	2006d77a 	srli	r3,r4,29
 800c2c4:	3004d77a 	srli	r2,r6,29
 800c2c8:	dc000015 	stw	r16,0(sp)
 800c2cc:	501490fa 	slli	r10,r10,3
 800c2d0:	2820d53a 	srli	r16,r5,20
 800c2d4:	401090fa 	slli	r8,r8,3
 800c2d8:	dc800215 	stw	r18,8(sp)
 800c2dc:	dc400115 	stw	r17,4(sp)
 800c2e0:	dfc00415 	stw	ra,16(sp)
 800c2e4:	202290fa 	slli	r17,r4,3
 800c2e8:	dcc00315 	stw	r19,12(sp)
 800c2ec:	4a41ffcc 	andi	r9,r9,2047
 800c2f0:	0101ffc4 	movi	r4,2047
 800c2f4:	2824d7fa 	srli	r18,r5,31
 800c2f8:	8401ffcc 	andi	r16,r16,2047
 800c2fc:	50c6b03a 	or	r3,r10,r3
 800c300:	380ed7fa 	srli	r7,r7,31
 800c304:	408ab03a 	or	r5,r8,r2
 800c308:	300c90fa 	slli	r6,r6,3
 800c30c:	49009626 	beq	r9,r4,800c568 <__subdf3+0x2c0>
 800c310:	39c0005c 	xori	r7,r7,1
 800c314:	8245c83a 	sub	r2,r16,r9
 800c318:	3c807426 	beq	r7,r18,800c4ec <__subdf3+0x244>
 800c31c:	0080af0e 	bge	zero,r2,800c5dc <__subdf3+0x334>
 800c320:	48002a1e 	bne	r9,zero,800c3cc <__subdf3+0x124>
 800c324:	2988b03a 	or	r4,r5,r6
 800c328:	20009a1e 	bne	r4,zero,800c594 <__subdf3+0x2ec>
 800c32c:	888001cc 	andi	r2,r17,7
 800c330:	10000726 	beq	r2,zero,800c350 <__subdf3+0xa8>
 800c334:	888003cc 	andi	r2,r17,15
 800c338:	01000104 	movi	r4,4
 800c33c:	11000426 	beq	r2,r4,800c350 <__subdf3+0xa8>
 800c340:	890b883a 	add	r5,r17,r4
 800c344:	2c63803a 	cmpltu	r17,r5,r17
 800c348:	1c47883a 	add	r3,r3,r17
 800c34c:	2823883a 	mov	r17,r5
 800c350:	1880202c 	andhi	r2,r3,128
 800c354:	10005926 	beq	r2,zero,800c4bc <__subdf3+0x214>
 800c358:	84000044 	addi	r16,r16,1
 800c35c:	0081ffc4 	movi	r2,2047
 800c360:	8080be26 	beq	r16,r2,800c65c <__subdf3+0x3b4>
 800c364:	017fe034 	movhi	r5,65408
 800c368:	297fffc4 	addi	r5,r5,-1
 800c36c:	1946703a 	and	r3,r3,r5
 800c370:	1804977a 	slli	r2,r3,29
 800c374:	1806927a 	slli	r3,r3,9
 800c378:	8822d0fa 	srli	r17,r17,3
 800c37c:	8401ffcc 	andi	r16,r16,2047
 800c380:	180ad33a 	srli	r5,r3,12
 800c384:	9100004c 	andi	r4,r18,1
 800c388:	1444b03a 	or	r2,r2,r17
 800c38c:	80c1ffcc 	andi	r3,r16,2047
 800c390:	1820953a 	slli	r16,r3,20
 800c394:	20c03fcc 	andi	r3,r4,255
 800c398:	180897fa 	slli	r4,r3,31
 800c39c:	00c00434 	movhi	r3,16
 800c3a0:	18ffffc4 	addi	r3,r3,-1
 800c3a4:	28c6703a 	and	r3,r5,r3
 800c3a8:	1c06b03a 	or	r3,r3,r16
 800c3ac:	1906b03a 	or	r3,r3,r4
 800c3b0:	dfc00417 	ldw	ra,16(sp)
 800c3b4:	dcc00317 	ldw	r19,12(sp)
 800c3b8:	dc800217 	ldw	r18,8(sp)
 800c3bc:	dc400117 	ldw	r17,4(sp)
 800c3c0:	dc000017 	ldw	r16,0(sp)
 800c3c4:	dec00504 	addi	sp,sp,20
 800c3c8:	f800283a 	ret
 800c3cc:	0101ffc4 	movi	r4,2047
 800c3d0:	813fd626 	beq	r16,r4,800c32c <__alt_data_end+0xff00c32c>
 800c3d4:	29402034 	orhi	r5,r5,128
 800c3d8:	01000e04 	movi	r4,56
 800c3dc:	2080a316 	blt	r4,r2,800c66c <__subdf3+0x3c4>
 800c3e0:	010007c4 	movi	r4,31
 800c3e4:	2080c616 	blt	r4,r2,800c700 <__subdf3+0x458>
 800c3e8:	01000804 	movi	r4,32
 800c3ec:	2089c83a 	sub	r4,r4,r2
 800c3f0:	2910983a 	sll	r8,r5,r4
 800c3f4:	308ed83a 	srl	r7,r6,r2
 800c3f8:	3108983a 	sll	r4,r6,r4
 800c3fc:	2884d83a 	srl	r2,r5,r2
 800c400:	41ccb03a 	or	r6,r8,r7
 800c404:	2008c03a 	cmpne	r4,r4,zero
 800c408:	310cb03a 	or	r6,r6,r4
 800c40c:	898dc83a 	sub	r6,r17,r6
 800c410:	89a3803a 	cmpltu	r17,r17,r6
 800c414:	1887c83a 	sub	r3,r3,r2
 800c418:	1c47c83a 	sub	r3,r3,r17
 800c41c:	3023883a 	mov	r17,r6
 800c420:	1880202c 	andhi	r2,r3,128
 800c424:	10002326 	beq	r2,zero,800c4b4 <__subdf3+0x20c>
 800c428:	04c02034 	movhi	r19,128
 800c42c:	9cffffc4 	addi	r19,r19,-1
 800c430:	1ce6703a 	and	r19,r3,r19
 800c434:	98007a26 	beq	r19,zero,800c620 <__subdf3+0x378>
 800c438:	9809883a 	mov	r4,r19
 800c43c:	800cda80 	call	800cda8 <__clzsi2>
 800c440:	113ffe04 	addi	r4,r2,-8
 800c444:	00c007c4 	movi	r3,31
 800c448:	19007b16 	blt	r3,r4,800c638 <__subdf3+0x390>
 800c44c:	00800804 	movi	r2,32
 800c450:	1105c83a 	sub	r2,r2,r4
 800c454:	8884d83a 	srl	r2,r17,r2
 800c458:	9906983a 	sll	r3,r19,r4
 800c45c:	8922983a 	sll	r17,r17,r4
 800c460:	10c4b03a 	or	r2,r2,r3
 800c464:	24007816 	blt	r4,r16,800c648 <__subdf3+0x3a0>
 800c468:	2421c83a 	sub	r16,r4,r16
 800c46c:	80c00044 	addi	r3,r16,1
 800c470:	010007c4 	movi	r4,31
 800c474:	20c09516 	blt	r4,r3,800c6cc <__subdf3+0x424>
 800c478:	01400804 	movi	r5,32
 800c47c:	28cbc83a 	sub	r5,r5,r3
 800c480:	88c8d83a 	srl	r4,r17,r3
 800c484:	8962983a 	sll	r17,r17,r5
 800c488:	114a983a 	sll	r5,r2,r5
 800c48c:	10c6d83a 	srl	r3,r2,r3
 800c490:	8804c03a 	cmpne	r2,r17,zero
 800c494:	290ab03a 	or	r5,r5,r4
 800c498:	28a2b03a 	or	r17,r5,r2
 800c49c:	0021883a 	mov	r16,zero
 800c4a0:	003fa206 	br	800c32c <__alt_data_end+0xff00c32c>
 800c4a4:	2090b03a 	or	r8,r4,r2
 800c4a8:	40018e26 	beq	r8,zero,800cae4 <__subdf3+0x83c>
 800c4ac:	1007883a 	mov	r3,r2
 800c4b0:	2023883a 	mov	r17,r4
 800c4b4:	888001cc 	andi	r2,r17,7
 800c4b8:	103f9e1e 	bne	r2,zero,800c334 <__alt_data_end+0xff00c334>
 800c4bc:	1804977a 	slli	r2,r3,29
 800c4c0:	8822d0fa 	srli	r17,r17,3
 800c4c4:	1810d0fa 	srli	r8,r3,3
 800c4c8:	9100004c 	andi	r4,r18,1
 800c4cc:	1444b03a 	or	r2,r2,r17
 800c4d0:	00c1ffc4 	movi	r3,2047
 800c4d4:	80c02826 	beq	r16,r3,800c578 <__subdf3+0x2d0>
 800c4d8:	01400434 	movhi	r5,16
 800c4dc:	297fffc4 	addi	r5,r5,-1
 800c4e0:	80e0703a 	and	r16,r16,r3
 800c4e4:	414a703a 	and	r5,r8,r5
 800c4e8:	003fa806 	br	800c38c <__alt_data_end+0xff00c38c>
 800c4ec:	0080630e 	bge	zero,r2,800c67c <__subdf3+0x3d4>
 800c4f0:	48003026 	beq	r9,zero,800c5b4 <__subdf3+0x30c>
 800c4f4:	0101ffc4 	movi	r4,2047
 800c4f8:	813f8c26 	beq	r16,r4,800c32c <__alt_data_end+0xff00c32c>
 800c4fc:	29402034 	orhi	r5,r5,128
 800c500:	01000e04 	movi	r4,56
 800c504:	2080a90e 	bge	r4,r2,800c7ac <__subdf3+0x504>
 800c508:	298cb03a 	or	r6,r5,r6
 800c50c:	3012c03a 	cmpne	r9,r6,zero
 800c510:	0005883a 	mov	r2,zero
 800c514:	4c53883a 	add	r9,r9,r17
 800c518:	4c63803a 	cmpltu	r17,r9,r17
 800c51c:	10c7883a 	add	r3,r2,r3
 800c520:	88c7883a 	add	r3,r17,r3
 800c524:	4823883a 	mov	r17,r9
 800c528:	1880202c 	andhi	r2,r3,128
 800c52c:	1000d026 	beq	r2,zero,800c870 <__subdf3+0x5c8>
 800c530:	84000044 	addi	r16,r16,1
 800c534:	0081ffc4 	movi	r2,2047
 800c538:	8080fe26 	beq	r16,r2,800c934 <__subdf3+0x68c>
 800c53c:	00bfe034 	movhi	r2,65408
 800c540:	10bfffc4 	addi	r2,r2,-1
 800c544:	1886703a 	and	r3,r3,r2
 800c548:	880ad07a 	srli	r5,r17,1
 800c54c:	180497fa 	slli	r2,r3,31
 800c550:	8900004c 	andi	r4,r17,1
 800c554:	2922b03a 	or	r17,r5,r4
 800c558:	1806d07a 	srli	r3,r3,1
 800c55c:	1462b03a 	or	r17,r2,r17
 800c560:	3825883a 	mov	r18,r7
 800c564:	003f7106 	br	800c32c <__alt_data_end+0xff00c32c>
 800c568:	2984b03a 	or	r2,r5,r6
 800c56c:	103f6826 	beq	r2,zero,800c310 <__alt_data_end+0xff00c310>
 800c570:	39c03fcc 	andi	r7,r7,255
 800c574:	003f6706 	br	800c314 <__alt_data_end+0xff00c314>
 800c578:	4086b03a 	or	r3,r8,r2
 800c57c:	18015226 	beq	r3,zero,800cac8 <__subdf3+0x820>
 800c580:	00c00434 	movhi	r3,16
 800c584:	41400234 	orhi	r5,r8,8
 800c588:	18ffffc4 	addi	r3,r3,-1
 800c58c:	28ca703a 	and	r5,r5,r3
 800c590:	003f7e06 	br	800c38c <__alt_data_end+0xff00c38c>
 800c594:	10bfffc4 	addi	r2,r2,-1
 800c598:	1000491e 	bne	r2,zero,800c6c0 <__subdf3+0x418>
 800c59c:	898fc83a 	sub	r7,r17,r6
 800c5a0:	89e3803a 	cmpltu	r17,r17,r7
 800c5a4:	1947c83a 	sub	r3,r3,r5
 800c5a8:	1c47c83a 	sub	r3,r3,r17
 800c5ac:	3823883a 	mov	r17,r7
 800c5b0:	003f9b06 	br	800c420 <__alt_data_end+0xff00c420>
 800c5b4:	2988b03a 	or	r4,r5,r6
 800c5b8:	203f5c26 	beq	r4,zero,800c32c <__alt_data_end+0xff00c32c>
 800c5bc:	10bfffc4 	addi	r2,r2,-1
 800c5c0:	1000931e 	bne	r2,zero,800c810 <__subdf3+0x568>
 800c5c4:	898d883a 	add	r6,r17,r6
 800c5c8:	3463803a 	cmpltu	r17,r6,r17
 800c5cc:	1947883a 	add	r3,r3,r5
 800c5d0:	88c7883a 	add	r3,r17,r3
 800c5d4:	3023883a 	mov	r17,r6
 800c5d8:	003fd306 	br	800c528 <__alt_data_end+0xff00c528>
 800c5dc:	1000541e 	bne	r2,zero,800c730 <__subdf3+0x488>
 800c5e0:	80800044 	addi	r2,r16,1
 800c5e4:	1081ffcc 	andi	r2,r2,2047
 800c5e8:	01000044 	movi	r4,1
 800c5ec:	2080a20e 	bge	r4,r2,800c878 <__subdf3+0x5d0>
 800c5f0:	8989c83a 	sub	r4,r17,r6
 800c5f4:	8905803a 	cmpltu	r2,r17,r4
 800c5f8:	1967c83a 	sub	r19,r3,r5
 800c5fc:	98a7c83a 	sub	r19,r19,r2
 800c600:	9880202c 	andhi	r2,r19,128
 800c604:	10006326 	beq	r2,zero,800c794 <__subdf3+0x4ec>
 800c608:	3463c83a 	sub	r17,r6,r17
 800c60c:	28c7c83a 	sub	r3,r5,r3
 800c610:	344d803a 	cmpltu	r6,r6,r17
 800c614:	19a7c83a 	sub	r19,r3,r6
 800c618:	3825883a 	mov	r18,r7
 800c61c:	983f861e 	bne	r19,zero,800c438 <__alt_data_end+0xff00c438>
 800c620:	8809883a 	mov	r4,r17
 800c624:	800cda80 	call	800cda8 <__clzsi2>
 800c628:	10800804 	addi	r2,r2,32
 800c62c:	113ffe04 	addi	r4,r2,-8
 800c630:	00c007c4 	movi	r3,31
 800c634:	193f850e 	bge	r3,r4,800c44c <__alt_data_end+0xff00c44c>
 800c638:	10bff604 	addi	r2,r2,-40
 800c63c:	8884983a 	sll	r2,r17,r2
 800c640:	0023883a 	mov	r17,zero
 800c644:	243f880e 	bge	r4,r16,800c468 <__alt_data_end+0xff00c468>
 800c648:	00ffe034 	movhi	r3,65408
 800c64c:	18ffffc4 	addi	r3,r3,-1
 800c650:	8121c83a 	sub	r16,r16,r4
 800c654:	10c6703a 	and	r3,r2,r3
 800c658:	003f3406 	br	800c32c <__alt_data_end+0xff00c32c>
 800c65c:	9100004c 	andi	r4,r18,1
 800c660:	000b883a 	mov	r5,zero
 800c664:	0005883a 	mov	r2,zero
 800c668:	003f4806 	br	800c38c <__alt_data_end+0xff00c38c>
 800c66c:	298cb03a 	or	r6,r5,r6
 800c670:	300cc03a 	cmpne	r6,r6,zero
 800c674:	0005883a 	mov	r2,zero
 800c678:	003f6406 	br	800c40c <__alt_data_end+0xff00c40c>
 800c67c:	10009a1e 	bne	r2,zero,800c8e8 <__subdf3+0x640>
 800c680:	82400044 	addi	r9,r16,1
 800c684:	4881ffcc 	andi	r2,r9,2047
 800c688:	02800044 	movi	r10,1
 800c68c:	5080670e 	bge	r10,r2,800c82c <__subdf3+0x584>
 800c690:	0081ffc4 	movi	r2,2047
 800c694:	4880af26 	beq	r9,r2,800c954 <__subdf3+0x6ac>
 800c698:	898d883a 	add	r6,r17,r6
 800c69c:	1945883a 	add	r2,r3,r5
 800c6a0:	3447803a 	cmpltu	r3,r6,r17
 800c6a4:	1887883a 	add	r3,r3,r2
 800c6a8:	182297fa 	slli	r17,r3,31
 800c6ac:	300cd07a 	srli	r6,r6,1
 800c6b0:	1806d07a 	srli	r3,r3,1
 800c6b4:	4821883a 	mov	r16,r9
 800c6b8:	89a2b03a 	or	r17,r17,r6
 800c6bc:	003f1b06 	br	800c32c <__alt_data_end+0xff00c32c>
 800c6c0:	0101ffc4 	movi	r4,2047
 800c6c4:	813f441e 	bne	r16,r4,800c3d8 <__alt_data_end+0xff00c3d8>
 800c6c8:	003f1806 	br	800c32c <__alt_data_end+0xff00c32c>
 800c6cc:	843ff844 	addi	r16,r16,-31
 800c6d0:	01400804 	movi	r5,32
 800c6d4:	1408d83a 	srl	r4,r2,r16
 800c6d8:	19405026 	beq	r3,r5,800c81c <__subdf3+0x574>
 800c6dc:	01401004 	movi	r5,64
 800c6e0:	28c7c83a 	sub	r3,r5,r3
 800c6e4:	10c4983a 	sll	r2,r2,r3
 800c6e8:	88a2b03a 	or	r17,r17,r2
 800c6ec:	8822c03a 	cmpne	r17,r17,zero
 800c6f0:	2462b03a 	or	r17,r4,r17
 800c6f4:	0007883a 	mov	r3,zero
 800c6f8:	0021883a 	mov	r16,zero
 800c6fc:	003f6d06 	br	800c4b4 <__alt_data_end+0xff00c4b4>
 800c700:	11fff804 	addi	r7,r2,-32
 800c704:	01000804 	movi	r4,32
 800c708:	29ced83a 	srl	r7,r5,r7
 800c70c:	11004526 	beq	r2,r4,800c824 <__subdf3+0x57c>
 800c710:	01001004 	movi	r4,64
 800c714:	2089c83a 	sub	r4,r4,r2
 800c718:	2904983a 	sll	r2,r5,r4
 800c71c:	118cb03a 	or	r6,r2,r6
 800c720:	300cc03a 	cmpne	r6,r6,zero
 800c724:	398cb03a 	or	r6,r7,r6
 800c728:	0005883a 	mov	r2,zero
 800c72c:	003f3706 	br	800c40c <__alt_data_end+0xff00c40c>
 800c730:	80002a26 	beq	r16,zero,800c7dc <__subdf3+0x534>
 800c734:	0101ffc4 	movi	r4,2047
 800c738:	49006626 	beq	r9,r4,800c8d4 <__subdf3+0x62c>
 800c73c:	0085c83a 	sub	r2,zero,r2
 800c740:	18c02034 	orhi	r3,r3,128
 800c744:	01000e04 	movi	r4,56
 800c748:	20807e16 	blt	r4,r2,800c944 <__subdf3+0x69c>
 800c74c:	010007c4 	movi	r4,31
 800c750:	2080e716 	blt	r4,r2,800caf0 <__subdf3+0x848>
 800c754:	01000804 	movi	r4,32
 800c758:	2089c83a 	sub	r4,r4,r2
 800c75c:	1914983a 	sll	r10,r3,r4
 800c760:	8890d83a 	srl	r8,r17,r2
 800c764:	8908983a 	sll	r4,r17,r4
 800c768:	1884d83a 	srl	r2,r3,r2
 800c76c:	5222b03a 	or	r17,r10,r8
 800c770:	2006c03a 	cmpne	r3,r4,zero
 800c774:	88e2b03a 	or	r17,r17,r3
 800c778:	3463c83a 	sub	r17,r6,r17
 800c77c:	2885c83a 	sub	r2,r5,r2
 800c780:	344d803a 	cmpltu	r6,r6,r17
 800c784:	1187c83a 	sub	r3,r2,r6
 800c788:	4821883a 	mov	r16,r9
 800c78c:	3825883a 	mov	r18,r7
 800c790:	003f2306 	br	800c420 <__alt_data_end+0xff00c420>
 800c794:	24d0b03a 	or	r8,r4,r19
 800c798:	40001b1e 	bne	r8,zero,800c808 <__subdf3+0x560>
 800c79c:	0005883a 	mov	r2,zero
 800c7a0:	0009883a 	mov	r4,zero
 800c7a4:	0021883a 	mov	r16,zero
 800c7a8:	003f4906 	br	800c4d0 <__alt_data_end+0xff00c4d0>
 800c7ac:	010007c4 	movi	r4,31
 800c7b0:	20803a16 	blt	r4,r2,800c89c <__subdf3+0x5f4>
 800c7b4:	01000804 	movi	r4,32
 800c7b8:	2089c83a 	sub	r4,r4,r2
 800c7bc:	2912983a 	sll	r9,r5,r4
 800c7c0:	3090d83a 	srl	r8,r6,r2
 800c7c4:	3108983a 	sll	r4,r6,r4
 800c7c8:	2884d83a 	srl	r2,r5,r2
 800c7cc:	4a12b03a 	or	r9,r9,r8
 800c7d0:	2008c03a 	cmpne	r4,r4,zero
 800c7d4:	4912b03a 	or	r9,r9,r4
 800c7d8:	003f4e06 	br	800c514 <__alt_data_end+0xff00c514>
 800c7dc:	1c48b03a 	or	r4,r3,r17
 800c7e0:	20003c26 	beq	r4,zero,800c8d4 <__subdf3+0x62c>
 800c7e4:	0084303a 	nor	r2,zero,r2
 800c7e8:	1000381e 	bne	r2,zero,800c8cc <__subdf3+0x624>
 800c7ec:	3463c83a 	sub	r17,r6,r17
 800c7f0:	28c5c83a 	sub	r2,r5,r3
 800c7f4:	344d803a 	cmpltu	r6,r6,r17
 800c7f8:	1187c83a 	sub	r3,r2,r6
 800c7fc:	4821883a 	mov	r16,r9
 800c800:	3825883a 	mov	r18,r7
 800c804:	003f0606 	br	800c420 <__alt_data_end+0xff00c420>
 800c808:	2023883a 	mov	r17,r4
 800c80c:	003f0906 	br	800c434 <__alt_data_end+0xff00c434>
 800c810:	0101ffc4 	movi	r4,2047
 800c814:	813f3a1e 	bne	r16,r4,800c500 <__alt_data_end+0xff00c500>
 800c818:	003ec406 	br	800c32c <__alt_data_end+0xff00c32c>
 800c81c:	0005883a 	mov	r2,zero
 800c820:	003fb106 	br	800c6e8 <__alt_data_end+0xff00c6e8>
 800c824:	0005883a 	mov	r2,zero
 800c828:	003fbc06 	br	800c71c <__alt_data_end+0xff00c71c>
 800c82c:	1c44b03a 	or	r2,r3,r17
 800c830:	80008e1e 	bne	r16,zero,800ca6c <__subdf3+0x7c4>
 800c834:	1000c826 	beq	r2,zero,800cb58 <__subdf3+0x8b0>
 800c838:	2984b03a 	or	r2,r5,r6
 800c83c:	103ebb26 	beq	r2,zero,800c32c <__alt_data_end+0xff00c32c>
 800c840:	8989883a 	add	r4,r17,r6
 800c844:	1945883a 	add	r2,r3,r5
 800c848:	2447803a 	cmpltu	r3,r4,r17
 800c84c:	1887883a 	add	r3,r3,r2
 800c850:	1880202c 	andhi	r2,r3,128
 800c854:	2023883a 	mov	r17,r4
 800c858:	103f1626 	beq	r2,zero,800c4b4 <__alt_data_end+0xff00c4b4>
 800c85c:	00bfe034 	movhi	r2,65408
 800c860:	10bfffc4 	addi	r2,r2,-1
 800c864:	5021883a 	mov	r16,r10
 800c868:	1886703a 	and	r3,r3,r2
 800c86c:	003eaf06 	br	800c32c <__alt_data_end+0xff00c32c>
 800c870:	3825883a 	mov	r18,r7
 800c874:	003f0f06 	br	800c4b4 <__alt_data_end+0xff00c4b4>
 800c878:	1c44b03a 	or	r2,r3,r17
 800c87c:	8000251e 	bne	r16,zero,800c914 <__subdf3+0x66c>
 800c880:	1000661e 	bne	r2,zero,800ca1c <__subdf3+0x774>
 800c884:	2990b03a 	or	r8,r5,r6
 800c888:	40009626 	beq	r8,zero,800cae4 <__subdf3+0x83c>
 800c88c:	2807883a 	mov	r3,r5
 800c890:	3023883a 	mov	r17,r6
 800c894:	3825883a 	mov	r18,r7
 800c898:	003ea406 	br	800c32c <__alt_data_end+0xff00c32c>
 800c89c:	127ff804 	addi	r9,r2,-32
 800c8a0:	01000804 	movi	r4,32
 800c8a4:	2a52d83a 	srl	r9,r5,r9
 800c8a8:	11008c26 	beq	r2,r4,800cadc <__subdf3+0x834>
 800c8ac:	01001004 	movi	r4,64
 800c8b0:	2085c83a 	sub	r2,r4,r2
 800c8b4:	2884983a 	sll	r2,r5,r2
 800c8b8:	118cb03a 	or	r6,r2,r6
 800c8bc:	300cc03a 	cmpne	r6,r6,zero
 800c8c0:	4992b03a 	or	r9,r9,r6
 800c8c4:	0005883a 	mov	r2,zero
 800c8c8:	003f1206 	br	800c514 <__alt_data_end+0xff00c514>
 800c8cc:	0101ffc4 	movi	r4,2047
 800c8d0:	493f9c1e 	bne	r9,r4,800c744 <__alt_data_end+0xff00c744>
 800c8d4:	2807883a 	mov	r3,r5
 800c8d8:	3023883a 	mov	r17,r6
 800c8dc:	4821883a 	mov	r16,r9
 800c8e0:	3825883a 	mov	r18,r7
 800c8e4:	003e9106 	br	800c32c <__alt_data_end+0xff00c32c>
 800c8e8:	80001f1e 	bne	r16,zero,800c968 <__subdf3+0x6c0>
 800c8ec:	1c48b03a 	or	r4,r3,r17
 800c8f0:	20005a26 	beq	r4,zero,800ca5c <__subdf3+0x7b4>
 800c8f4:	0084303a 	nor	r2,zero,r2
 800c8f8:	1000561e 	bne	r2,zero,800ca54 <__subdf3+0x7ac>
 800c8fc:	89a3883a 	add	r17,r17,r6
 800c900:	1945883a 	add	r2,r3,r5
 800c904:	898d803a 	cmpltu	r6,r17,r6
 800c908:	3087883a 	add	r3,r6,r2
 800c90c:	4821883a 	mov	r16,r9
 800c910:	003f0506 	br	800c528 <__alt_data_end+0xff00c528>
 800c914:	10002b1e 	bne	r2,zero,800c9c4 <__subdf3+0x71c>
 800c918:	2984b03a 	or	r2,r5,r6
 800c91c:	10008026 	beq	r2,zero,800cb20 <__subdf3+0x878>
 800c920:	2807883a 	mov	r3,r5
 800c924:	3023883a 	mov	r17,r6
 800c928:	3825883a 	mov	r18,r7
 800c92c:	0401ffc4 	movi	r16,2047
 800c930:	003e7e06 	br	800c32c <__alt_data_end+0xff00c32c>
 800c934:	3809883a 	mov	r4,r7
 800c938:	0011883a 	mov	r8,zero
 800c93c:	0005883a 	mov	r2,zero
 800c940:	003ee306 	br	800c4d0 <__alt_data_end+0xff00c4d0>
 800c944:	1c62b03a 	or	r17,r3,r17
 800c948:	8822c03a 	cmpne	r17,r17,zero
 800c94c:	0005883a 	mov	r2,zero
 800c950:	003f8906 	br	800c778 <__alt_data_end+0xff00c778>
 800c954:	3809883a 	mov	r4,r7
 800c958:	4821883a 	mov	r16,r9
 800c95c:	0011883a 	mov	r8,zero
 800c960:	0005883a 	mov	r2,zero
 800c964:	003eda06 	br	800c4d0 <__alt_data_end+0xff00c4d0>
 800c968:	0101ffc4 	movi	r4,2047
 800c96c:	49003b26 	beq	r9,r4,800ca5c <__subdf3+0x7b4>
 800c970:	0085c83a 	sub	r2,zero,r2
 800c974:	18c02034 	orhi	r3,r3,128
 800c978:	01000e04 	movi	r4,56
 800c97c:	20806e16 	blt	r4,r2,800cb38 <__subdf3+0x890>
 800c980:	010007c4 	movi	r4,31
 800c984:	20807716 	blt	r4,r2,800cb64 <__subdf3+0x8bc>
 800c988:	01000804 	movi	r4,32
 800c98c:	2089c83a 	sub	r4,r4,r2
 800c990:	1914983a 	sll	r10,r3,r4
 800c994:	8890d83a 	srl	r8,r17,r2
 800c998:	8908983a 	sll	r4,r17,r4
 800c99c:	1884d83a 	srl	r2,r3,r2
 800c9a0:	5222b03a 	or	r17,r10,r8
 800c9a4:	2006c03a 	cmpne	r3,r4,zero
 800c9a8:	88e2b03a 	or	r17,r17,r3
 800c9ac:	89a3883a 	add	r17,r17,r6
 800c9b0:	1145883a 	add	r2,r2,r5
 800c9b4:	898d803a 	cmpltu	r6,r17,r6
 800c9b8:	3087883a 	add	r3,r6,r2
 800c9bc:	4821883a 	mov	r16,r9
 800c9c0:	003ed906 	br	800c528 <__alt_data_end+0xff00c528>
 800c9c4:	2984b03a 	or	r2,r5,r6
 800c9c8:	10004226 	beq	r2,zero,800cad4 <__subdf3+0x82c>
 800c9cc:	1808d0fa 	srli	r4,r3,3
 800c9d0:	8822d0fa 	srli	r17,r17,3
 800c9d4:	1806977a 	slli	r3,r3,29
 800c9d8:	2080022c 	andhi	r2,r4,8
 800c9dc:	1c62b03a 	or	r17,r3,r17
 800c9e0:	10000826 	beq	r2,zero,800ca04 <__subdf3+0x75c>
 800c9e4:	2812d0fa 	srli	r9,r5,3
 800c9e8:	4880022c 	andhi	r2,r9,8
 800c9ec:	1000051e 	bne	r2,zero,800ca04 <__subdf3+0x75c>
 800c9f0:	300cd0fa 	srli	r6,r6,3
 800c9f4:	2804977a 	slli	r2,r5,29
 800c9f8:	4809883a 	mov	r4,r9
 800c9fc:	3825883a 	mov	r18,r7
 800ca00:	11a2b03a 	or	r17,r2,r6
 800ca04:	8806d77a 	srli	r3,r17,29
 800ca08:	200890fa 	slli	r4,r4,3
 800ca0c:	882290fa 	slli	r17,r17,3
 800ca10:	0401ffc4 	movi	r16,2047
 800ca14:	1906b03a 	or	r3,r3,r4
 800ca18:	003e4406 	br	800c32c <__alt_data_end+0xff00c32c>
 800ca1c:	2984b03a 	or	r2,r5,r6
 800ca20:	103e4226 	beq	r2,zero,800c32c <__alt_data_end+0xff00c32c>
 800ca24:	8989c83a 	sub	r4,r17,r6
 800ca28:	8911803a 	cmpltu	r8,r17,r4
 800ca2c:	1945c83a 	sub	r2,r3,r5
 800ca30:	1205c83a 	sub	r2,r2,r8
 800ca34:	1200202c 	andhi	r8,r2,128
 800ca38:	403e9a26 	beq	r8,zero,800c4a4 <__alt_data_end+0xff00c4a4>
 800ca3c:	3463c83a 	sub	r17,r6,r17
 800ca40:	28c5c83a 	sub	r2,r5,r3
 800ca44:	344d803a 	cmpltu	r6,r6,r17
 800ca48:	1187c83a 	sub	r3,r2,r6
 800ca4c:	3825883a 	mov	r18,r7
 800ca50:	003e3606 	br	800c32c <__alt_data_end+0xff00c32c>
 800ca54:	0101ffc4 	movi	r4,2047
 800ca58:	493fc71e 	bne	r9,r4,800c978 <__alt_data_end+0xff00c978>
 800ca5c:	2807883a 	mov	r3,r5
 800ca60:	3023883a 	mov	r17,r6
 800ca64:	4821883a 	mov	r16,r9
 800ca68:	003e3006 	br	800c32c <__alt_data_end+0xff00c32c>
 800ca6c:	10003626 	beq	r2,zero,800cb48 <__subdf3+0x8a0>
 800ca70:	2984b03a 	or	r2,r5,r6
 800ca74:	10001726 	beq	r2,zero,800cad4 <__subdf3+0x82c>
 800ca78:	1808d0fa 	srli	r4,r3,3
 800ca7c:	8822d0fa 	srli	r17,r17,3
 800ca80:	1806977a 	slli	r3,r3,29
 800ca84:	2080022c 	andhi	r2,r4,8
 800ca88:	1c62b03a 	or	r17,r3,r17
 800ca8c:	10000726 	beq	r2,zero,800caac <__subdf3+0x804>
 800ca90:	2812d0fa 	srli	r9,r5,3
 800ca94:	4880022c 	andhi	r2,r9,8
 800ca98:	1000041e 	bne	r2,zero,800caac <__subdf3+0x804>
 800ca9c:	300cd0fa 	srli	r6,r6,3
 800caa0:	2804977a 	slli	r2,r5,29
 800caa4:	4809883a 	mov	r4,r9
 800caa8:	11a2b03a 	or	r17,r2,r6
 800caac:	8806d77a 	srli	r3,r17,29
 800cab0:	200890fa 	slli	r4,r4,3
 800cab4:	882290fa 	slli	r17,r17,3
 800cab8:	3825883a 	mov	r18,r7
 800cabc:	1906b03a 	or	r3,r3,r4
 800cac0:	0401ffc4 	movi	r16,2047
 800cac4:	003e1906 	br	800c32c <__alt_data_end+0xff00c32c>
 800cac8:	000b883a 	mov	r5,zero
 800cacc:	0005883a 	mov	r2,zero
 800cad0:	003e2e06 	br	800c38c <__alt_data_end+0xff00c38c>
 800cad4:	0401ffc4 	movi	r16,2047
 800cad8:	003e1406 	br	800c32c <__alt_data_end+0xff00c32c>
 800cadc:	0005883a 	mov	r2,zero
 800cae0:	003f7506 	br	800c8b8 <__alt_data_end+0xff00c8b8>
 800cae4:	0005883a 	mov	r2,zero
 800cae8:	0009883a 	mov	r4,zero
 800caec:	003e7806 	br	800c4d0 <__alt_data_end+0xff00c4d0>
 800caf0:	123ff804 	addi	r8,r2,-32
 800caf4:	01000804 	movi	r4,32
 800caf8:	1a10d83a 	srl	r8,r3,r8
 800cafc:	11002526 	beq	r2,r4,800cb94 <__subdf3+0x8ec>
 800cb00:	01001004 	movi	r4,64
 800cb04:	2085c83a 	sub	r2,r4,r2
 800cb08:	1884983a 	sll	r2,r3,r2
 800cb0c:	1444b03a 	or	r2,r2,r17
 800cb10:	1004c03a 	cmpne	r2,r2,zero
 800cb14:	40a2b03a 	or	r17,r8,r2
 800cb18:	0005883a 	mov	r2,zero
 800cb1c:	003f1606 	br	800c778 <__alt_data_end+0xff00c778>
 800cb20:	02000434 	movhi	r8,16
 800cb24:	0009883a 	mov	r4,zero
 800cb28:	423fffc4 	addi	r8,r8,-1
 800cb2c:	00bfffc4 	movi	r2,-1
 800cb30:	0401ffc4 	movi	r16,2047
 800cb34:	003e6606 	br	800c4d0 <__alt_data_end+0xff00c4d0>
 800cb38:	1c62b03a 	or	r17,r3,r17
 800cb3c:	8822c03a 	cmpne	r17,r17,zero
 800cb40:	0005883a 	mov	r2,zero
 800cb44:	003f9906 	br	800c9ac <__alt_data_end+0xff00c9ac>
 800cb48:	2807883a 	mov	r3,r5
 800cb4c:	3023883a 	mov	r17,r6
 800cb50:	0401ffc4 	movi	r16,2047
 800cb54:	003df506 	br	800c32c <__alt_data_end+0xff00c32c>
 800cb58:	2807883a 	mov	r3,r5
 800cb5c:	3023883a 	mov	r17,r6
 800cb60:	003df206 	br	800c32c <__alt_data_end+0xff00c32c>
 800cb64:	123ff804 	addi	r8,r2,-32
 800cb68:	01000804 	movi	r4,32
 800cb6c:	1a10d83a 	srl	r8,r3,r8
 800cb70:	11000a26 	beq	r2,r4,800cb9c <__subdf3+0x8f4>
 800cb74:	01001004 	movi	r4,64
 800cb78:	2085c83a 	sub	r2,r4,r2
 800cb7c:	1884983a 	sll	r2,r3,r2
 800cb80:	1444b03a 	or	r2,r2,r17
 800cb84:	1004c03a 	cmpne	r2,r2,zero
 800cb88:	40a2b03a 	or	r17,r8,r2
 800cb8c:	0005883a 	mov	r2,zero
 800cb90:	003f8606 	br	800c9ac <__alt_data_end+0xff00c9ac>
 800cb94:	0005883a 	mov	r2,zero
 800cb98:	003fdc06 	br	800cb0c <__alt_data_end+0xff00cb0c>
 800cb9c:	0005883a 	mov	r2,zero
 800cba0:	003ff706 	br	800cb80 <__alt_data_end+0xff00cb80>

0800cba4 <__fixdfsi>:
 800cba4:	280cd53a 	srli	r6,r5,20
 800cba8:	00c00434 	movhi	r3,16
 800cbac:	18ffffc4 	addi	r3,r3,-1
 800cbb0:	3181ffcc 	andi	r6,r6,2047
 800cbb4:	01c0ff84 	movi	r7,1022
 800cbb8:	28c6703a 	and	r3,r5,r3
 800cbbc:	280ad7fa 	srli	r5,r5,31
 800cbc0:	3980120e 	bge	r7,r6,800cc0c <__fixdfsi+0x68>
 800cbc4:	00810744 	movi	r2,1053
 800cbc8:	11800c16 	blt	r2,r6,800cbfc <__fixdfsi+0x58>
 800cbcc:	00810cc4 	movi	r2,1075
 800cbd0:	1185c83a 	sub	r2,r2,r6
 800cbd4:	01c007c4 	movi	r7,31
 800cbd8:	18c00434 	orhi	r3,r3,16
 800cbdc:	38800d16 	blt	r7,r2,800cc14 <__fixdfsi+0x70>
 800cbe0:	31befb44 	addi	r6,r6,-1043
 800cbe4:	2084d83a 	srl	r2,r4,r2
 800cbe8:	1986983a 	sll	r3,r3,r6
 800cbec:	1884b03a 	or	r2,r3,r2
 800cbf0:	28000726 	beq	r5,zero,800cc10 <__fixdfsi+0x6c>
 800cbf4:	0085c83a 	sub	r2,zero,r2
 800cbf8:	f800283a 	ret
 800cbfc:	00a00034 	movhi	r2,32768
 800cc00:	10bfffc4 	addi	r2,r2,-1
 800cc04:	2885883a 	add	r2,r5,r2
 800cc08:	f800283a 	ret
 800cc0c:	0005883a 	mov	r2,zero
 800cc10:	f800283a 	ret
 800cc14:	008104c4 	movi	r2,1043
 800cc18:	1185c83a 	sub	r2,r2,r6
 800cc1c:	1884d83a 	srl	r2,r3,r2
 800cc20:	003ff306 	br	800cbf0 <__alt_data_end+0xff00cbf0>

0800cc24 <__floatsidf>:
 800cc24:	defffd04 	addi	sp,sp,-12
 800cc28:	dfc00215 	stw	ra,8(sp)
 800cc2c:	dc400115 	stw	r17,4(sp)
 800cc30:	dc000015 	stw	r16,0(sp)
 800cc34:	20002b26 	beq	r4,zero,800cce4 <__floatsidf+0xc0>
 800cc38:	2023883a 	mov	r17,r4
 800cc3c:	2020d7fa 	srli	r16,r4,31
 800cc40:	20002d16 	blt	r4,zero,800ccf8 <__floatsidf+0xd4>
 800cc44:	8809883a 	mov	r4,r17
 800cc48:	800cda80 	call	800cda8 <__clzsi2>
 800cc4c:	01410784 	movi	r5,1054
 800cc50:	288bc83a 	sub	r5,r5,r2
 800cc54:	01010cc4 	movi	r4,1075
 800cc58:	2149c83a 	sub	r4,r4,r5
 800cc5c:	00c007c4 	movi	r3,31
 800cc60:	1900160e 	bge	r3,r4,800ccbc <__floatsidf+0x98>
 800cc64:	00c104c4 	movi	r3,1043
 800cc68:	1947c83a 	sub	r3,r3,r5
 800cc6c:	88c6983a 	sll	r3,r17,r3
 800cc70:	00800434 	movhi	r2,16
 800cc74:	10bfffc4 	addi	r2,r2,-1
 800cc78:	1886703a 	and	r3,r3,r2
 800cc7c:	2941ffcc 	andi	r5,r5,2047
 800cc80:	800d883a 	mov	r6,r16
 800cc84:	0005883a 	mov	r2,zero
 800cc88:	280a953a 	slli	r5,r5,20
 800cc8c:	31803fcc 	andi	r6,r6,255
 800cc90:	01000434 	movhi	r4,16
 800cc94:	300c97fa 	slli	r6,r6,31
 800cc98:	213fffc4 	addi	r4,r4,-1
 800cc9c:	1906703a 	and	r3,r3,r4
 800cca0:	1946b03a 	or	r3,r3,r5
 800cca4:	1986b03a 	or	r3,r3,r6
 800cca8:	dfc00217 	ldw	ra,8(sp)
 800ccac:	dc400117 	ldw	r17,4(sp)
 800ccb0:	dc000017 	ldw	r16,0(sp)
 800ccb4:	dec00304 	addi	sp,sp,12
 800ccb8:	f800283a 	ret
 800ccbc:	00c002c4 	movi	r3,11
 800ccc0:	1887c83a 	sub	r3,r3,r2
 800ccc4:	88c6d83a 	srl	r3,r17,r3
 800ccc8:	8904983a 	sll	r2,r17,r4
 800cccc:	01000434 	movhi	r4,16
 800ccd0:	213fffc4 	addi	r4,r4,-1
 800ccd4:	2941ffcc 	andi	r5,r5,2047
 800ccd8:	1906703a 	and	r3,r3,r4
 800ccdc:	800d883a 	mov	r6,r16
 800cce0:	003fe906 	br	800cc88 <__alt_data_end+0xff00cc88>
 800cce4:	000d883a 	mov	r6,zero
 800cce8:	000b883a 	mov	r5,zero
 800ccec:	0007883a 	mov	r3,zero
 800ccf0:	0005883a 	mov	r2,zero
 800ccf4:	003fe406 	br	800cc88 <__alt_data_end+0xff00cc88>
 800ccf8:	0123c83a 	sub	r17,zero,r4
 800ccfc:	003fd106 	br	800cc44 <__alt_data_end+0xff00cc44>

0800cd00 <__floatunsidf>:
 800cd00:	defffe04 	addi	sp,sp,-8
 800cd04:	dc000015 	stw	r16,0(sp)
 800cd08:	dfc00115 	stw	ra,4(sp)
 800cd0c:	2021883a 	mov	r16,r4
 800cd10:	20002226 	beq	r4,zero,800cd9c <__floatunsidf+0x9c>
 800cd14:	800cda80 	call	800cda8 <__clzsi2>
 800cd18:	01010784 	movi	r4,1054
 800cd1c:	2089c83a 	sub	r4,r4,r2
 800cd20:	01810cc4 	movi	r6,1075
 800cd24:	310dc83a 	sub	r6,r6,r4
 800cd28:	00c007c4 	movi	r3,31
 800cd2c:	1980120e 	bge	r3,r6,800cd78 <__floatunsidf+0x78>
 800cd30:	00c104c4 	movi	r3,1043
 800cd34:	1907c83a 	sub	r3,r3,r4
 800cd38:	80ca983a 	sll	r5,r16,r3
 800cd3c:	00800434 	movhi	r2,16
 800cd40:	10bfffc4 	addi	r2,r2,-1
 800cd44:	2101ffcc 	andi	r4,r4,2047
 800cd48:	0021883a 	mov	r16,zero
 800cd4c:	288a703a 	and	r5,r5,r2
 800cd50:	2008953a 	slli	r4,r4,20
 800cd54:	00c00434 	movhi	r3,16
 800cd58:	18ffffc4 	addi	r3,r3,-1
 800cd5c:	28c6703a 	and	r3,r5,r3
 800cd60:	8005883a 	mov	r2,r16
 800cd64:	1906b03a 	or	r3,r3,r4
 800cd68:	dfc00117 	ldw	ra,4(sp)
 800cd6c:	dc000017 	ldw	r16,0(sp)
 800cd70:	dec00204 	addi	sp,sp,8
 800cd74:	f800283a 	ret
 800cd78:	00c002c4 	movi	r3,11
 800cd7c:	188bc83a 	sub	r5,r3,r2
 800cd80:	814ad83a 	srl	r5,r16,r5
 800cd84:	00c00434 	movhi	r3,16
 800cd88:	18ffffc4 	addi	r3,r3,-1
 800cd8c:	81a0983a 	sll	r16,r16,r6
 800cd90:	2101ffcc 	andi	r4,r4,2047
 800cd94:	28ca703a 	and	r5,r5,r3
 800cd98:	003fed06 	br	800cd50 <__alt_data_end+0xff00cd50>
 800cd9c:	0009883a 	mov	r4,zero
 800cda0:	000b883a 	mov	r5,zero
 800cda4:	003fea06 	br	800cd50 <__alt_data_end+0xff00cd50>

0800cda8 <__clzsi2>:
 800cda8:	00bfffd4 	movui	r2,65535
 800cdac:	11000536 	bltu	r2,r4,800cdc4 <__clzsi2+0x1c>
 800cdb0:	00803fc4 	movi	r2,255
 800cdb4:	11000f36 	bltu	r2,r4,800cdf4 <__clzsi2+0x4c>
 800cdb8:	00800804 	movi	r2,32
 800cdbc:	0007883a 	mov	r3,zero
 800cdc0:	00000506 	br	800cdd8 <__clzsi2+0x30>
 800cdc4:	00804034 	movhi	r2,256
 800cdc8:	10bfffc4 	addi	r2,r2,-1
 800cdcc:	11000c2e 	bgeu	r2,r4,800ce00 <__clzsi2+0x58>
 800cdd0:	00800204 	movi	r2,8
 800cdd4:	00c00604 	movi	r3,24
 800cdd8:	20c8d83a 	srl	r4,r4,r3
 800cddc:	00c20074 	movhi	r3,2049
 800cde0:	18c65704 	addi	r3,r3,6492
 800cde4:	1909883a 	add	r4,r3,r4
 800cde8:	20c00003 	ldbu	r3,0(r4)
 800cdec:	10c5c83a 	sub	r2,r2,r3
 800cdf0:	f800283a 	ret
 800cdf4:	00800604 	movi	r2,24
 800cdf8:	00c00204 	movi	r3,8
 800cdfc:	003ff606 	br	800cdd8 <__alt_data_end+0xff00cdd8>
 800ce00:	00800404 	movi	r2,16
 800ce04:	1007883a 	mov	r3,r2
 800ce08:	003ff306 	br	800cdd8 <__alt_data_end+0xff00cdd8>

0800ce0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ce0c:	defffe04 	addi	sp,sp,-8
 800ce10:	dfc00115 	stw	ra,4(sp)
 800ce14:	df000015 	stw	fp,0(sp)
 800ce18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ce1c:	d0a00b17 	ldw	r2,-32724(gp)
 800ce20:	10000326 	beq	r2,zero,800ce30 <alt_get_errno+0x24>
 800ce24:	d0a00b17 	ldw	r2,-32724(gp)
 800ce28:	103ee83a 	callr	r2
 800ce2c:	00000106 	br	800ce34 <alt_get_errno+0x28>
 800ce30:	d0a6e304 	addi	r2,gp,-25716
}
 800ce34:	e037883a 	mov	sp,fp
 800ce38:	dfc00117 	ldw	ra,4(sp)
 800ce3c:	df000017 	ldw	fp,0(sp)
 800ce40:	dec00204 	addi	sp,sp,8
 800ce44:	f800283a 	ret

0800ce48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800ce48:	defffb04 	addi	sp,sp,-20
 800ce4c:	dfc00415 	stw	ra,16(sp)
 800ce50:	df000315 	stw	fp,12(sp)
 800ce54:	df000304 	addi	fp,sp,12
 800ce58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800ce5c:	e0bfff17 	ldw	r2,-4(fp)
 800ce60:	10000616 	blt	r2,zero,800ce7c <close+0x34>
 800ce64:	e0bfff17 	ldw	r2,-4(fp)
 800ce68:	10c00324 	muli	r3,r2,12
 800ce6c:	00820074 	movhi	r2,2049
 800ce70:	1088e204 	addi	r2,r2,9096
 800ce74:	1885883a 	add	r2,r3,r2
 800ce78:	00000106 	br	800ce80 <close+0x38>
 800ce7c:	0005883a 	mov	r2,zero
 800ce80:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800ce84:	e0bffd17 	ldw	r2,-12(fp)
 800ce88:	10001926 	beq	r2,zero,800cef0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800ce8c:	e0bffd17 	ldw	r2,-12(fp)
 800ce90:	10800017 	ldw	r2,0(r2)
 800ce94:	10800417 	ldw	r2,16(r2)
 800ce98:	10000626 	beq	r2,zero,800ceb4 <close+0x6c>
 800ce9c:	e0bffd17 	ldw	r2,-12(fp)
 800cea0:	10800017 	ldw	r2,0(r2)
 800cea4:	10800417 	ldw	r2,16(r2)
 800cea8:	e13ffd17 	ldw	r4,-12(fp)
 800ceac:	103ee83a 	callr	r2
 800ceb0:	00000106 	br	800ceb8 <close+0x70>
 800ceb4:	0005883a 	mov	r2,zero
 800ceb8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800cebc:	e13fff17 	ldw	r4,-4(fp)
 800cec0:	800d5080 	call	800d508 <alt_release_fd>
    if (rval < 0)
 800cec4:	e0bffe17 	ldw	r2,-8(fp)
 800cec8:	1000070e 	bge	r2,zero,800cee8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800cecc:	800ce0c0 	call	800ce0c <alt_get_errno>
 800ced0:	1007883a 	mov	r3,r2
 800ced4:	e0bffe17 	ldw	r2,-8(fp)
 800ced8:	0085c83a 	sub	r2,zero,r2
 800cedc:	18800015 	stw	r2,0(r3)
      return -1;
 800cee0:	00bfffc4 	movi	r2,-1
 800cee4:	00000706 	br	800cf04 <close+0xbc>
    }
    return 0;
 800cee8:	0005883a 	mov	r2,zero
 800ceec:	00000506 	br	800cf04 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800cef0:	800ce0c0 	call	800ce0c <alt_get_errno>
 800cef4:	1007883a 	mov	r3,r2
 800cef8:	00801444 	movi	r2,81
 800cefc:	18800015 	stw	r2,0(r3)
    return -1;
 800cf00:	00bfffc4 	movi	r2,-1
  }
}
 800cf04:	e037883a 	mov	sp,fp
 800cf08:	dfc00117 	ldw	ra,4(sp)
 800cf0c:	df000017 	ldw	fp,0(sp)
 800cf10:	dec00204 	addi	sp,sp,8
 800cf14:	f800283a 	ret

0800cf18 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800cf18:	defffc04 	addi	sp,sp,-16
 800cf1c:	df000315 	stw	fp,12(sp)
 800cf20:	df000304 	addi	fp,sp,12
 800cf24:	e13ffd15 	stw	r4,-12(fp)
 800cf28:	e17ffe15 	stw	r5,-8(fp)
 800cf2c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800cf30:	e0bfff17 	ldw	r2,-4(fp)
}
 800cf34:	e037883a 	mov	sp,fp
 800cf38:	df000017 	ldw	fp,0(sp)
 800cf3c:	dec00104 	addi	sp,sp,4
 800cf40:	f800283a 	ret

0800cf44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cf44:	defffe04 	addi	sp,sp,-8
 800cf48:	dfc00115 	stw	ra,4(sp)
 800cf4c:	df000015 	stw	fp,0(sp)
 800cf50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cf54:	d0a00b17 	ldw	r2,-32724(gp)
 800cf58:	10000326 	beq	r2,zero,800cf68 <alt_get_errno+0x24>
 800cf5c:	d0a00b17 	ldw	r2,-32724(gp)
 800cf60:	103ee83a 	callr	r2
 800cf64:	00000106 	br	800cf6c <alt_get_errno+0x28>
 800cf68:	d0a6e304 	addi	r2,gp,-25716
}
 800cf6c:	e037883a 	mov	sp,fp
 800cf70:	dfc00117 	ldw	ra,4(sp)
 800cf74:	df000017 	ldw	fp,0(sp)
 800cf78:	dec00204 	addi	sp,sp,8
 800cf7c:	f800283a 	ret

0800cf80 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800cf80:	defffb04 	addi	sp,sp,-20
 800cf84:	dfc00415 	stw	ra,16(sp)
 800cf88:	df000315 	stw	fp,12(sp)
 800cf8c:	df000304 	addi	fp,sp,12
 800cf90:	e13ffe15 	stw	r4,-8(fp)
 800cf94:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800cf98:	e0bffe17 	ldw	r2,-8(fp)
 800cf9c:	10000616 	blt	r2,zero,800cfb8 <fstat+0x38>
 800cfa0:	e0bffe17 	ldw	r2,-8(fp)
 800cfa4:	10c00324 	muli	r3,r2,12
 800cfa8:	00820074 	movhi	r2,2049
 800cfac:	1088e204 	addi	r2,r2,9096
 800cfb0:	1885883a 	add	r2,r3,r2
 800cfb4:	00000106 	br	800cfbc <fstat+0x3c>
 800cfb8:	0005883a 	mov	r2,zero
 800cfbc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800cfc0:	e0bffd17 	ldw	r2,-12(fp)
 800cfc4:	10001026 	beq	r2,zero,800d008 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800cfc8:	e0bffd17 	ldw	r2,-12(fp)
 800cfcc:	10800017 	ldw	r2,0(r2)
 800cfd0:	10800817 	ldw	r2,32(r2)
 800cfd4:	10000726 	beq	r2,zero,800cff4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800cfd8:	e0bffd17 	ldw	r2,-12(fp)
 800cfdc:	10800017 	ldw	r2,0(r2)
 800cfe0:	10800817 	ldw	r2,32(r2)
 800cfe4:	e17fff17 	ldw	r5,-4(fp)
 800cfe8:	e13ffd17 	ldw	r4,-12(fp)
 800cfec:	103ee83a 	callr	r2
 800cff0:	00000a06 	br	800d01c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800cff4:	e0bfff17 	ldw	r2,-4(fp)
 800cff8:	00c80004 	movi	r3,8192
 800cffc:	10c00115 	stw	r3,4(r2)
      return 0;
 800d000:	0005883a 	mov	r2,zero
 800d004:	00000506 	br	800d01c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d008:	800cf440 	call	800cf44 <alt_get_errno>
 800d00c:	1007883a 	mov	r3,r2
 800d010:	00801444 	movi	r2,81
 800d014:	18800015 	stw	r2,0(r3)
    return -1;
 800d018:	00bfffc4 	movi	r2,-1
  }
}
 800d01c:	e037883a 	mov	sp,fp
 800d020:	dfc00117 	ldw	ra,4(sp)
 800d024:	df000017 	ldw	fp,0(sp)
 800d028:	dec00204 	addi	sp,sp,8
 800d02c:	f800283a 	ret

0800d030 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d030:	defffe04 	addi	sp,sp,-8
 800d034:	dfc00115 	stw	ra,4(sp)
 800d038:	df000015 	stw	fp,0(sp)
 800d03c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d040:	d0a00b17 	ldw	r2,-32724(gp)
 800d044:	10000326 	beq	r2,zero,800d054 <alt_get_errno+0x24>
 800d048:	d0a00b17 	ldw	r2,-32724(gp)
 800d04c:	103ee83a 	callr	r2
 800d050:	00000106 	br	800d058 <alt_get_errno+0x28>
 800d054:	d0a6e304 	addi	r2,gp,-25716
}
 800d058:	e037883a 	mov	sp,fp
 800d05c:	dfc00117 	ldw	ra,4(sp)
 800d060:	df000017 	ldw	fp,0(sp)
 800d064:	dec00204 	addi	sp,sp,8
 800d068:	f800283a 	ret

0800d06c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800d06c:	deffed04 	addi	sp,sp,-76
 800d070:	dfc01215 	stw	ra,72(sp)
 800d074:	df001115 	stw	fp,68(sp)
 800d078:	df001104 	addi	fp,sp,68
 800d07c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d080:	e0bfff17 	ldw	r2,-4(fp)
 800d084:	10000616 	blt	r2,zero,800d0a0 <isatty+0x34>
 800d088:	e0bfff17 	ldw	r2,-4(fp)
 800d08c:	10c00324 	muli	r3,r2,12
 800d090:	00820074 	movhi	r2,2049
 800d094:	1088e204 	addi	r2,r2,9096
 800d098:	1885883a 	add	r2,r3,r2
 800d09c:	00000106 	br	800d0a4 <isatty+0x38>
 800d0a0:	0005883a 	mov	r2,zero
 800d0a4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800d0a8:	e0bfef17 	ldw	r2,-68(fp)
 800d0ac:	10000e26 	beq	r2,zero,800d0e8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800d0b0:	e0bfef17 	ldw	r2,-68(fp)
 800d0b4:	10800017 	ldw	r2,0(r2)
 800d0b8:	10800817 	ldw	r2,32(r2)
 800d0bc:	1000021e 	bne	r2,zero,800d0c8 <isatty+0x5c>
    {
      return 1;
 800d0c0:	00800044 	movi	r2,1
 800d0c4:	00000d06 	br	800d0fc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800d0c8:	e0bff004 	addi	r2,fp,-64
 800d0cc:	100b883a 	mov	r5,r2
 800d0d0:	e13fff17 	ldw	r4,-4(fp)
 800d0d4:	800cf800 	call	800cf80 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800d0d8:	e0bff117 	ldw	r2,-60(fp)
 800d0dc:	10880020 	cmpeqi	r2,r2,8192
 800d0e0:	10803fcc 	andi	r2,r2,255
 800d0e4:	00000506 	br	800d0fc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d0e8:	800d0300 	call	800d030 <alt_get_errno>
 800d0ec:	1007883a 	mov	r3,r2
 800d0f0:	00801444 	movi	r2,81
 800d0f4:	18800015 	stw	r2,0(r3)
    return 0;
 800d0f8:	0005883a 	mov	r2,zero
  }
}
 800d0fc:	e037883a 	mov	sp,fp
 800d100:	dfc00117 	ldw	ra,4(sp)
 800d104:	df000017 	ldw	fp,0(sp)
 800d108:	dec00204 	addi	sp,sp,8
 800d10c:	f800283a 	ret

0800d110 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800d110:	defffc04 	addi	sp,sp,-16
 800d114:	df000315 	stw	fp,12(sp)
 800d118:	df000304 	addi	fp,sp,12
 800d11c:	e13ffd15 	stw	r4,-12(fp)
 800d120:	e17ffe15 	stw	r5,-8(fp)
 800d124:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800d128:	e0fffe17 	ldw	r3,-8(fp)
 800d12c:	e0bffd17 	ldw	r2,-12(fp)
 800d130:	18800c26 	beq	r3,r2,800d164 <alt_load_section+0x54>
  {
    while( to != end )
 800d134:	00000806 	br	800d158 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800d138:	e0bffe17 	ldw	r2,-8(fp)
 800d13c:	10c00104 	addi	r3,r2,4
 800d140:	e0fffe15 	stw	r3,-8(fp)
 800d144:	e0fffd17 	ldw	r3,-12(fp)
 800d148:	19000104 	addi	r4,r3,4
 800d14c:	e13ffd15 	stw	r4,-12(fp)
 800d150:	18c00017 	ldw	r3,0(r3)
 800d154:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800d158:	e0fffe17 	ldw	r3,-8(fp)
 800d15c:	e0bfff17 	ldw	r2,-4(fp)
 800d160:	18bff51e 	bne	r3,r2,800d138 <__alt_data_end+0xff00d138>
    {
      *to++ = *from++;
    }
  }
}
 800d164:	0001883a 	nop
 800d168:	e037883a 	mov	sp,fp
 800d16c:	df000017 	ldw	fp,0(sp)
 800d170:	dec00104 	addi	sp,sp,4
 800d174:	f800283a 	ret

0800d178 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800d178:	defffe04 	addi	sp,sp,-8
 800d17c:	dfc00115 	stw	ra,4(sp)
 800d180:	df000015 	stw	fp,0(sp)
 800d184:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800d188:	01820074 	movhi	r6,2049
 800d18c:	318d7a04 	addi	r6,r6,13800
 800d190:	01420074 	movhi	r5,2049
 800d194:	2946af04 	addi	r5,r5,6844
 800d198:	01020074 	movhi	r4,2049
 800d19c:	210d7a04 	addi	r4,r4,13800
 800d1a0:	800d1100 	call	800d110 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800d1a4:	01820034 	movhi	r6,2048
 800d1a8:	31809104 	addi	r6,r6,580
 800d1ac:	01420034 	movhi	r5,2048
 800d1b0:	29400804 	addi	r5,r5,32
 800d1b4:	01020034 	movhi	r4,2048
 800d1b8:	21000804 	addi	r4,r4,32
 800d1bc:	800d1100 	call	800d110 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800d1c0:	01820074 	movhi	r6,2049
 800d1c4:	3186af04 	addi	r6,r6,6844
 800d1c8:	01420074 	movhi	r5,2049
 800d1cc:	2945bc04 	addi	r5,r5,5872
 800d1d0:	01020074 	movhi	r4,2049
 800d1d4:	2105bc04 	addi	r4,r4,5872
 800d1d8:	800d1100 	call	800d110 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800d1dc:	801020c0 	call	801020c <alt_dcache_flush_all>
  alt_icache_flush_all();
 800d1e0:	80104840 	call	8010484 <alt_icache_flush_all>
}
 800d1e4:	0001883a 	nop
 800d1e8:	e037883a 	mov	sp,fp
 800d1ec:	dfc00117 	ldw	ra,4(sp)
 800d1f0:	df000017 	ldw	fp,0(sp)
 800d1f4:	dec00204 	addi	sp,sp,8
 800d1f8:	f800283a 	ret

0800d1fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d1fc:	defffe04 	addi	sp,sp,-8
 800d200:	dfc00115 	stw	ra,4(sp)
 800d204:	df000015 	stw	fp,0(sp)
 800d208:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d20c:	d0a00b17 	ldw	r2,-32724(gp)
 800d210:	10000326 	beq	r2,zero,800d220 <alt_get_errno+0x24>
 800d214:	d0a00b17 	ldw	r2,-32724(gp)
 800d218:	103ee83a 	callr	r2
 800d21c:	00000106 	br	800d224 <alt_get_errno+0x28>
 800d220:	d0a6e304 	addi	r2,gp,-25716
}
 800d224:	e037883a 	mov	sp,fp
 800d228:	dfc00117 	ldw	ra,4(sp)
 800d22c:	df000017 	ldw	fp,0(sp)
 800d230:	dec00204 	addi	sp,sp,8
 800d234:	f800283a 	ret

0800d238 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800d238:	defff904 	addi	sp,sp,-28
 800d23c:	dfc00615 	stw	ra,24(sp)
 800d240:	df000515 	stw	fp,20(sp)
 800d244:	df000504 	addi	fp,sp,20
 800d248:	e13ffd15 	stw	r4,-12(fp)
 800d24c:	e17ffe15 	stw	r5,-8(fp)
 800d250:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800d254:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d258:	e0bffd17 	ldw	r2,-12(fp)
 800d25c:	10000616 	blt	r2,zero,800d278 <lseek+0x40>
 800d260:	e0bffd17 	ldw	r2,-12(fp)
 800d264:	10c00324 	muli	r3,r2,12
 800d268:	00820074 	movhi	r2,2049
 800d26c:	1088e204 	addi	r2,r2,9096
 800d270:	1885883a 	add	r2,r3,r2
 800d274:	00000106 	br	800d27c <lseek+0x44>
 800d278:	0005883a 	mov	r2,zero
 800d27c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800d280:	e0bffc17 	ldw	r2,-16(fp)
 800d284:	10001026 	beq	r2,zero,800d2c8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800d288:	e0bffc17 	ldw	r2,-16(fp)
 800d28c:	10800017 	ldw	r2,0(r2)
 800d290:	10800717 	ldw	r2,28(r2)
 800d294:	10000926 	beq	r2,zero,800d2bc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800d298:	e0bffc17 	ldw	r2,-16(fp)
 800d29c:	10800017 	ldw	r2,0(r2)
 800d2a0:	10800717 	ldw	r2,28(r2)
 800d2a4:	e1bfff17 	ldw	r6,-4(fp)
 800d2a8:	e17ffe17 	ldw	r5,-8(fp)
 800d2ac:	e13ffc17 	ldw	r4,-16(fp)
 800d2b0:	103ee83a 	callr	r2
 800d2b4:	e0bffb15 	stw	r2,-20(fp)
 800d2b8:	00000506 	br	800d2d0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800d2bc:	00bfde84 	movi	r2,-134
 800d2c0:	e0bffb15 	stw	r2,-20(fp)
 800d2c4:	00000206 	br	800d2d0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800d2c8:	00bfebc4 	movi	r2,-81
 800d2cc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800d2d0:	e0bffb17 	ldw	r2,-20(fp)
 800d2d4:	1000070e 	bge	r2,zero,800d2f4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800d2d8:	800d1fc0 	call	800d1fc <alt_get_errno>
 800d2dc:	1007883a 	mov	r3,r2
 800d2e0:	e0bffb17 	ldw	r2,-20(fp)
 800d2e4:	0085c83a 	sub	r2,zero,r2
 800d2e8:	18800015 	stw	r2,0(r3)
    rc = -1;
 800d2ec:	00bfffc4 	movi	r2,-1
 800d2f0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800d2f4:	e0bffb17 	ldw	r2,-20(fp)
}
 800d2f8:	e037883a 	mov	sp,fp
 800d2fc:	dfc00117 	ldw	ra,4(sp)
 800d300:	df000017 	ldw	fp,0(sp)
 800d304:	dec00204 	addi	sp,sp,8
 800d308:	f800283a 	ret

0800d30c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800d30c:	defffd04 	addi	sp,sp,-12
 800d310:	dfc00215 	stw	ra,8(sp)
 800d314:	df000115 	stw	fp,4(sp)
 800d318:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800d31c:	0009883a 	mov	r4,zero
 800d320:	800d7840 	call	800d784 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800d324:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800d328:	800d7bc0 	call	800d7bc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800d32c:	01820074 	movhi	r6,2049
 800d330:	31869a04 	addi	r6,r6,6760
 800d334:	01420074 	movhi	r5,2049
 800d338:	29469a04 	addi	r5,r5,6760
 800d33c:	01020074 	movhi	r4,2049
 800d340:	21069a04 	addi	r4,r4,6760
 800d344:	801081c0 	call	801081c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800d348:	80103340 	call	8010334 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800d34c:	01020074 	movhi	r4,2049
 800d350:	2100e504 	addi	r4,r4,916
 800d354:	80111f40 	call	80111f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800d358:	d0a6e417 	ldw	r2,-25712(gp)
 800d35c:	d0e6e517 	ldw	r3,-25708(gp)
 800d360:	d126e617 	ldw	r4,-25704(gp)
 800d364:	200d883a 	mov	r6,r4
 800d368:	180b883a 	mov	r5,r3
 800d36c:	1009883a 	mov	r4,r2
 800d370:	80004740 	call	8000474 <main>
 800d374:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800d378:	01000044 	movi	r4,1
 800d37c:	800ce480 	call	800ce48 <close>
  exit (result);
 800d380:	e13fff17 	ldw	r4,-4(fp)
 800d384:	80112080 	call	8011208 <exit>

0800d388 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800d388:	defffe04 	addi	sp,sp,-8
 800d38c:	df000115 	stw	fp,4(sp)
 800d390:	df000104 	addi	fp,sp,4
 800d394:	e13fff15 	stw	r4,-4(fp)
}
 800d398:	0001883a 	nop
 800d39c:	e037883a 	mov	sp,fp
 800d3a0:	df000017 	ldw	fp,0(sp)
 800d3a4:	dec00104 	addi	sp,sp,4
 800d3a8:	f800283a 	ret

0800d3ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800d3ac:	defffe04 	addi	sp,sp,-8
 800d3b0:	df000115 	stw	fp,4(sp)
 800d3b4:	df000104 	addi	fp,sp,4
 800d3b8:	e13fff15 	stw	r4,-4(fp)
}
 800d3bc:	0001883a 	nop
 800d3c0:	e037883a 	mov	sp,fp
 800d3c4:	df000017 	ldw	fp,0(sp)
 800d3c8:	dec00104 	addi	sp,sp,4
 800d3cc:	f800283a 	ret

0800d3d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d3d0:	defffe04 	addi	sp,sp,-8
 800d3d4:	dfc00115 	stw	ra,4(sp)
 800d3d8:	df000015 	stw	fp,0(sp)
 800d3dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d3e0:	d0a00b17 	ldw	r2,-32724(gp)
 800d3e4:	10000326 	beq	r2,zero,800d3f4 <alt_get_errno+0x24>
 800d3e8:	d0a00b17 	ldw	r2,-32724(gp)
 800d3ec:	103ee83a 	callr	r2
 800d3f0:	00000106 	br	800d3f8 <alt_get_errno+0x28>
 800d3f4:	d0a6e304 	addi	r2,gp,-25716
}
 800d3f8:	e037883a 	mov	sp,fp
 800d3fc:	dfc00117 	ldw	ra,4(sp)
 800d400:	df000017 	ldw	fp,0(sp)
 800d404:	dec00204 	addi	sp,sp,8
 800d408:	f800283a 	ret

0800d40c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800d40c:	defff904 	addi	sp,sp,-28
 800d410:	dfc00615 	stw	ra,24(sp)
 800d414:	df000515 	stw	fp,20(sp)
 800d418:	df000504 	addi	fp,sp,20
 800d41c:	e13ffd15 	stw	r4,-12(fp)
 800d420:	e17ffe15 	stw	r5,-8(fp)
 800d424:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d428:	e0bffd17 	ldw	r2,-12(fp)
 800d42c:	10000616 	blt	r2,zero,800d448 <read+0x3c>
 800d430:	e0bffd17 	ldw	r2,-12(fp)
 800d434:	10c00324 	muli	r3,r2,12
 800d438:	00820074 	movhi	r2,2049
 800d43c:	1088e204 	addi	r2,r2,9096
 800d440:	1885883a 	add	r2,r3,r2
 800d444:	00000106 	br	800d44c <read+0x40>
 800d448:	0005883a 	mov	r2,zero
 800d44c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d450:	e0bffb17 	ldw	r2,-20(fp)
 800d454:	10002226 	beq	r2,zero,800d4e0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d458:	e0bffb17 	ldw	r2,-20(fp)
 800d45c:	10800217 	ldw	r2,8(r2)
 800d460:	108000cc 	andi	r2,r2,3
 800d464:	10800060 	cmpeqi	r2,r2,1
 800d468:	1000181e 	bne	r2,zero,800d4cc <read+0xc0>
        (fd->dev->read))
 800d46c:	e0bffb17 	ldw	r2,-20(fp)
 800d470:	10800017 	ldw	r2,0(r2)
 800d474:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d478:	10001426 	beq	r2,zero,800d4cc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800d47c:	e0bffb17 	ldw	r2,-20(fp)
 800d480:	10800017 	ldw	r2,0(r2)
 800d484:	10800517 	ldw	r2,20(r2)
 800d488:	e0ffff17 	ldw	r3,-4(fp)
 800d48c:	180d883a 	mov	r6,r3
 800d490:	e17ffe17 	ldw	r5,-8(fp)
 800d494:	e13ffb17 	ldw	r4,-20(fp)
 800d498:	103ee83a 	callr	r2
 800d49c:	e0bffc15 	stw	r2,-16(fp)
 800d4a0:	e0bffc17 	ldw	r2,-16(fp)
 800d4a4:	1000070e 	bge	r2,zero,800d4c4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800d4a8:	800d3d00 	call	800d3d0 <alt_get_errno>
 800d4ac:	1007883a 	mov	r3,r2
 800d4b0:	e0bffc17 	ldw	r2,-16(fp)
 800d4b4:	0085c83a 	sub	r2,zero,r2
 800d4b8:	18800015 	stw	r2,0(r3)
          return -1;
 800d4bc:	00bfffc4 	movi	r2,-1
 800d4c0:	00000c06 	br	800d4f4 <read+0xe8>
        }
        return rval;
 800d4c4:	e0bffc17 	ldw	r2,-16(fp)
 800d4c8:	00000a06 	br	800d4f4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800d4cc:	800d3d00 	call	800d3d0 <alt_get_errno>
 800d4d0:	1007883a 	mov	r3,r2
 800d4d4:	00800344 	movi	r2,13
 800d4d8:	18800015 	stw	r2,0(r3)
 800d4dc:	00000406 	br	800d4f0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800d4e0:	800d3d00 	call	800d3d0 <alt_get_errno>
 800d4e4:	1007883a 	mov	r3,r2
 800d4e8:	00801444 	movi	r2,81
 800d4ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d4f0:	00bfffc4 	movi	r2,-1
}
 800d4f4:	e037883a 	mov	sp,fp
 800d4f8:	dfc00117 	ldw	ra,4(sp)
 800d4fc:	df000017 	ldw	fp,0(sp)
 800d500:	dec00204 	addi	sp,sp,8
 800d504:	f800283a 	ret

0800d508 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d508:	defffe04 	addi	sp,sp,-8
 800d50c:	df000115 	stw	fp,4(sp)
 800d510:	df000104 	addi	fp,sp,4
 800d514:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800d518:	e0bfff17 	ldw	r2,-4(fp)
 800d51c:	108000d0 	cmplti	r2,r2,3
 800d520:	10000d1e 	bne	r2,zero,800d558 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d524:	00820074 	movhi	r2,2049
 800d528:	1088e204 	addi	r2,r2,9096
 800d52c:	e0ffff17 	ldw	r3,-4(fp)
 800d530:	18c00324 	muli	r3,r3,12
 800d534:	10c5883a 	add	r2,r2,r3
 800d538:	10800204 	addi	r2,r2,8
 800d53c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800d540:	00820074 	movhi	r2,2049
 800d544:	1088e204 	addi	r2,r2,9096
 800d548:	e0ffff17 	ldw	r3,-4(fp)
 800d54c:	18c00324 	muli	r3,r3,12
 800d550:	10c5883a 	add	r2,r2,r3
 800d554:	10000015 	stw	zero,0(r2)
  }
}
 800d558:	0001883a 	nop
 800d55c:	e037883a 	mov	sp,fp
 800d560:	df000017 	ldw	fp,0(sp)
 800d564:	dec00104 	addi	sp,sp,4
 800d568:	f800283a 	ret

0800d56c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800d56c:	defff904 	addi	sp,sp,-28
 800d570:	df000615 	stw	fp,24(sp)
 800d574:	df000604 	addi	fp,sp,24
 800d578:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d57c:	0005303a 	rdctl	r2,status
 800d580:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d584:	e0fffe17 	ldw	r3,-8(fp)
 800d588:	00bfff84 	movi	r2,-2
 800d58c:	1884703a 	and	r2,r3,r2
 800d590:	1001703a 	wrctl	status,r2
  
  return context;
 800d594:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800d598:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800d59c:	d0a00c17 	ldw	r2,-32720(gp)
 800d5a0:	10c000c4 	addi	r3,r2,3
 800d5a4:	00bfff04 	movi	r2,-4
 800d5a8:	1884703a 	and	r2,r3,r2
 800d5ac:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800d5b0:	d0e00c17 	ldw	r3,-32720(gp)
 800d5b4:	e0bfff17 	ldw	r2,-4(fp)
 800d5b8:	1887883a 	add	r3,r3,r2
 800d5bc:	00824034 	movhi	r2,2304
 800d5c0:	10800004 	addi	r2,r2,0
 800d5c4:	10c0062e 	bgeu	r2,r3,800d5e0 <sbrk+0x74>
 800d5c8:	e0bffb17 	ldw	r2,-20(fp)
 800d5cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d5d0:	e0bffa17 	ldw	r2,-24(fp)
 800d5d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800d5d8:	00bfffc4 	movi	r2,-1
 800d5dc:	00000b06 	br	800d60c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800d5e0:	d0a00c17 	ldw	r2,-32720(gp)
 800d5e4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800d5e8:	d0e00c17 	ldw	r3,-32720(gp)
 800d5ec:	e0bfff17 	ldw	r2,-4(fp)
 800d5f0:	1885883a 	add	r2,r3,r2
 800d5f4:	d0a00c15 	stw	r2,-32720(gp)
 800d5f8:	e0bffb17 	ldw	r2,-20(fp)
 800d5fc:	e0bffc15 	stw	r2,-16(fp)
 800d600:	e0bffc17 	ldw	r2,-16(fp)
 800d604:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800d608:	e0bffd17 	ldw	r2,-12(fp)
} 
 800d60c:	e037883a 	mov	sp,fp
 800d610:	df000017 	ldw	fp,0(sp)
 800d614:	dec00104 	addi	sp,sp,4
 800d618:	f800283a 	ret

0800d61c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d61c:	defffe04 	addi	sp,sp,-8
 800d620:	dfc00115 	stw	ra,4(sp)
 800d624:	df000015 	stw	fp,0(sp)
 800d628:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d62c:	d0a00b17 	ldw	r2,-32724(gp)
 800d630:	10000326 	beq	r2,zero,800d640 <alt_get_errno+0x24>
 800d634:	d0a00b17 	ldw	r2,-32724(gp)
 800d638:	103ee83a 	callr	r2
 800d63c:	00000106 	br	800d644 <alt_get_errno+0x28>
 800d640:	d0a6e304 	addi	r2,gp,-25716
}
 800d644:	e037883a 	mov	sp,fp
 800d648:	dfc00117 	ldw	ra,4(sp)
 800d64c:	df000017 	ldw	fp,0(sp)
 800d650:	dec00204 	addi	sp,sp,8
 800d654:	f800283a 	ret

0800d658 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800d658:	defff904 	addi	sp,sp,-28
 800d65c:	dfc00615 	stw	ra,24(sp)
 800d660:	df000515 	stw	fp,20(sp)
 800d664:	df000504 	addi	fp,sp,20
 800d668:	e13ffd15 	stw	r4,-12(fp)
 800d66c:	e17ffe15 	stw	r5,-8(fp)
 800d670:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d674:	e0bffd17 	ldw	r2,-12(fp)
 800d678:	10000616 	blt	r2,zero,800d694 <write+0x3c>
 800d67c:	e0bffd17 	ldw	r2,-12(fp)
 800d680:	10c00324 	muli	r3,r2,12
 800d684:	00820074 	movhi	r2,2049
 800d688:	1088e204 	addi	r2,r2,9096
 800d68c:	1885883a 	add	r2,r3,r2
 800d690:	00000106 	br	800d698 <write+0x40>
 800d694:	0005883a 	mov	r2,zero
 800d698:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d69c:	e0bffb17 	ldw	r2,-20(fp)
 800d6a0:	10002126 	beq	r2,zero,800d728 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800d6a4:	e0bffb17 	ldw	r2,-20(fp)
 800d6a8:	10800217 	ldw	r2,8(r2)
 800d6ac:	108000cc 	andi	r2,r2,3
 800d6b0:	10001826 	beq	r2,zero,800d714 <write+0xbc>
 800d6b4:	e0bffb17 	ldw	r2,-20(fp)
 800d6b8:	10800017 	ldw	r2,0(r2)
 800d6bc:	10800617 	ldw	r2,24(r2)
 800d6c0:	10001426 	beq	r2,zero,800d714 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800d6c4:	e0bffb17 	ldw	r2,-20(fp)
 800d6c8:	10800017 	ldw	r2,0(r2)
 800d6cc:	10800617 	ldw	r2,24(r2)
 800d6d0:	e0ffff17 	ldw	r3,-4(fp)
 800d6d4:	180d883a 	mov	r6,r3
 800d6d8:	e17ffe17 	ldw	r5,-8(fp)
 800d6dc:	e13ffb17 	ldw	r4,-20(fp)
 800d6e0:	103ee83a 	callr	r2
 800d6e4:	e0bffc15 	stw	r2,-16(fp)
 800d6e8:	e0bffc17 	ldw	r2,-16(fp)
 800d6ec:	1000070e 	bge	r2,zero,800d70c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800d6f0:	800d61c0 	call	800d61c <alt_get_errno>
 800d6f4:	1007883a 	mov	r3,r2
 800d6f8:	e0bffc17 	ldw	r2,-16(fp)
 800d6fc:	0085c83a 	sub	r2,zero,r2
 800d700:	18800015 	stw	r2,0(r3)
        return -1;
 800d704:	00bfffc4 	movi	r2,-1
 800d708:	00000c06 	br	800d73c <write+0xe4>
      }
      return rval;
 800d70c:	e0bffc17 	ldw	r2,-16(fp)
 800d710:	00000a06 	br	800d73c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800d714:	800d61c0 	call	800d61c <alt_get_errno>
 800d718:	1007883a 	mov	r3,r2
 800d71c:	00800344 	movi	r2,13
 800d720:	18800015 	stw	r2,0(r3)
 800d724:	00000406 	br	800d738 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800d728:	800d61c0 	call	800d61c <alt_get_errno>
 800d72c:	1007883a 	mov	r3,r2
 800d730:	00801444 	movi	r2,81
 800d734:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d738:	00bfffc4 	movi	r2,-1
}
 800d73c:	e037883a 	mov	sp,fp
 800d740:	dfc00117 	ldw	ra,4(sp)
 800d744:	df000017 	ldw	fp,0(sp)
 800d748:	dec00204 	addi	sp,sp,8
 800d74c:	f800283a 	ret

0800d750 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800d750:	defffd04 	addi	sp,sp,-12
 800d754:	dfc00215 	stw	ra,8(sp)
 800d758:	df000115 	stw	fp,4(sp)
 800d75c:	df000104 	addi	fp,sp,4
 800d760:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800d764:	d1600804 	addi	r5,gp,-32736
 800d768:	e13fff17 	ldw	r4,-4(fp)
 800d76c:	80102900 	call	8010290 <alt_dev_llist_insert>
}
 800d770:	e037883a 	mov	sp,fp
 800d774:	dfc00117 	ldw	ra,4(sp)
 800d778:	df000017 	ldw	fp,0(sp)
 800d77c:	dec00204 	addi	sp,sp,8
 800d780:	f800283a 	ret

0800d784 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800d784:	defffd04 	addi	sp,sp,-12
 800d788:	dfc00215 	stw	ra,8(sp)
 800d78c:	df000115 	stw	fp,4(sp)
 800d790:	df000104 	addi	fp,sp,4
 800d794:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800d798:	8010ef80 	call	8010ef8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800d79c:	00800044 	movi	r2,1
 800d7a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800d7a4:	0001883a 	nop
 800d7a8:	e037883a 	mov	sp,fp
 800d7ac:	dfc00117 	ldw	ra,4(sp)
 800d7b0:	df000017 	ldw	fp,0(sp)
 800d7b4:	dec00204 	addi	sp,sp,8
 800d7b8:	f800283a 	ret

0800d7bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800d7bc:	defffe04 	addi	sp,sp,-8
 800d7c0:	dfc00115 	stw	ra,4(sp)
 800d7c4:	df000015 	stw	fp,0(sp)
 800d7c8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800d7cc:	01c0fa04 	movi	r7,1000
 800d7d0:	01800044 	movi	r6,1
 800d7d4:	000b883a 	mov	r5,zero
 800d7d8:	01081804 	movi	r4,8288
 800d7dc:	800ff0c0 	call	800ff0c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 800d7e0:	01020074 	movhi	r4,2049
 800d7e4:	21094204 	addi	r4,r4,9480
 800d7e8:	800da7c0 	call	800da7c <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800d7ec:	000d883a 	mov	r6,zero
 800d7f0:	000b883a 	mov	r5,zero
 800d7f4:	01020074 	movhi	r4,2049
 800d7f8:	21095a04 	addi	r4,r4,9576
 800d7fc:	800f5900 	call	800f590 <altera_avalon_jtag_uart_init>
 800d800:	01020074 	movhi	r4,2049
 800d804:	21095004 	addi	r4,r4,9536
 800d808:	800d7500 	call	800d750 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 800d80c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800d810:	0001883a 	nop
}
 800d814:	0001883a 	nop
 800d818:	e037883a 	mov	sp,fp
 800d81c:	dfc00117 	ldw	ra,4(sp)
 800d820:	df000017 	ldw	fp,0(sp)
 800d824:	dec00204 	addi	sp,sp,8
 800d828:	f800283a 	ret

0800d82c <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 800d82c:	defff904 	addi	sp,sp,-28
 800d830:	dfc00615 	stw	ra,24(sp)
 800d834:	df000515 	stw	fp,20(sp)
 800d838:	df000504 	addi	fp,sp,20
 800d83c:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 800d840:	008000b4 	movhi	r2,2
 800d844:	10a1a804 	addi	r2,r2,-31072
 800d848:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 800d84c:	e0bfff17 	ldw	r2,-4(fp)
 800d850:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 800d854:	e0bffc17 	ldw	r2,-16(fp)
 800d858:	10800717 	ldw	r2,28(r2)
 800d85c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 800d860:	e0bffd17 	ldw	r2,-12(fp)
 800d864:	10800217 	ldw	r2,8(r2)
 800d868:	10800098 	cmpnei	r2,r2,2
 800d86c:	1000251e 	bne	r2,zero,800d904 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 800d870:	e0bffd17 	ldw	r2,-12(fp)
 800d874:	10c00017 	ldw	r3,0(r2)
 800d878:	e0bffd17 	ldw	r2,-12(fp)
 800d87c:	10800117 	ldw	r2,4(r2)
 800d880:	e13ffe04 	addi	r4,fp,-8
 800d884:	200f883a 	mov	r7,r4
 800d888:	100d883a 	mov	r6,r2
 800d88c:	180b883a 	mov	r5,r3
 800d890:	e13ffc17 	ldw	r4,-16(fp)
 800d894:	800dfdc0 	call	800dfdc <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 800d898:	e0bffd17 	ldw	r2,-12(fp)
 800d89c:	10c00117 	ldw	r3,4(r2)
 800d8a0:	e0bffe17 	ldw	r2,-8(fp)
 800d8a4:	1887c83a 	sub	r3,r3,r2
 800d8a8:	e0bffd17 	ldw	r2,-12(fp)
 800d8ac:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 800d8b0:	e0bffd17 	ldw	r2,-12(fp)
 800d8b4:	10c00017 	ldw	r3,0(r2)
 800d8b8:	e0bffe17 	ldw	r2,-8(fp)
 800d8bc:	1887883a 	add	r3,r3,r2
 800d8c0:	e0bffd17 	ldw	r2,-12(fp)
 800d8c4:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 800d8c8:	e0bffd17 	ldw	r2,-12(fp)
 800d8cc:	10800117 	ldw	r2,4(r2)
 800d8d0:	10000c26 	beq	r2,zero,800d904 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800d8d4:	01400704 	movi	r5,28
 800d8d8:	e13ffc17 	ldw	r4,-16(fp)
 800d8dc:	800f17c0 	call	800f17c <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 800d8e0:	01400084 	movi	r5,2
 800d8e4:	e13ffc17 	ldw	r4,-16(fp)
 800d8e8:	800f2200 	call	800f220 <alt_avalon_i2c_int_enable>
 800d8ec:	00000e06 	br	800d928 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 800d8f0:	e0bffb17 	ldw	r2,-20(fp)
 800d8f4:	10bfffc4 	addi	r2,r2,-1
 800d8f8:	e0bffb15 	stw	r2,-20(fp)
 800d8fc:	e0bffb17 	ldw	r2,-20(fp)
 800d900:	10000426 	beq	r2,zero,800d914 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 800d904:	e13ffc17 	ldw	r4,-16(fp)
 800d908:	800df980 	call	800df98 <alt_avalon_i2c_is_busy>
 800d90c:	103ff81e 	bne	r2,zero,800d8f0 <__alt_data_end+0xff00d8f0>
 800d910:	00000106 	br	800d918 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 800d914:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 800d918:	e13ffc17 	ldw	r4,-16(fp)
 800d91c:	800dc400 	call	800dc40 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 800d920:	e0bffd17 	ldw	r2,-12(fp)
 800d924:	10000215 	stw	zero,8(r2)
}
 800d928:	e037883a 	mov	sp,fp
 800d92c:	dfc00117 	ldw	ra,4(sp)
 800d930:	df000017 	ldw	fp,0(sp)
 800d934:	dec00204 	addi	sp,sp,8
 800d938:	f800283a 	ret

0800d93c <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 800d93c:	defffc04 	addi	sp,sp,-16
 800d940:	dfc00315 	stw	ra,12(sp)
 800d944:	df000215 	stw	fp,8(sp)
 800d948:	df000204 	addi	fp,sp,8
 800d94c:	e13ffe15 	stw	r4,-8(fp)
 800d950:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 800d954:	e0bfff17 	ldw	r2,-4(fp)
 800d958:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 800d95c:	e1ffff17 	ldw	r7,-4(fp)
 800d960:	000d883a 	mov	r6,zero
 800d964:	01420074 	movhi	r5,2049
 800d968:	29760b04 	addi	r5,r5,-10196
 800d96c:	e13ffe17 	ldw	r4,-8(fp)
 800d970:	800da280 	call	800da28 <alt_avalon_i2c_register_callback>
}
 800d974:	0001883a 	nop
 800d978:	e037883a 	mov	sp,fp
 800d97c:	dfc00117 	ldw	ra,4(sp)
 800d980:	df000017 	ldw	fp,0(sp)
 800d984:	dec00204 	addi	sp,sp,8
 800d988:	f800283a 	ret

0800d98c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 800d98c:	defff904 	addi	sp,sp,-28
 800d990:	dfc00615 	stw	ra,24(sp)
 800d994:	df000515 	stw	fp,20(sp)
 800d998:	df000504 	addi	fp,sp,20
 800d99c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 800d9a0:	e0bfff17 	ldw	r2,-4(fp)
 800d9a4:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 800d9a8:	014007c4 	movi	r5,31
 800d9ac:	e13ffb17 	ldw	r4,-20(fp)
 800d9b0:	800f1b80 	call	800f1b8 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800d9b4:	01400704 	movi	r5,28
 800d9b8:	e13ffb17 	ldw	r4,-20(fp)
 800d9bc:	800f17c0 	call	800f17c <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 800d9c0:	e0bffb17 	ldw	r2,-20(fp)
 800d9c4:	10800617 	ldw	r2,24(r2)
 800d9c8:	10001126 	beq	r2,zero,800da10 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d9cc:	0005303a 	rdctl	r2,status
 800d9d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d9d4:	e0fffd17 	ldw	r3,-12(fp)
 800d9d8:	00bfff84 	movi	r2,-2
 800d9dc:	1884703a 	and	r2,r3,r2
 800d9e0:	1001703a 	wrctl	status,r2
  
  return context;
 800d9e4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 800d9e8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 800d9ec:	e0bffb17 	ldw	r2,-20(fp)
 800d9f0:	10800617 	ldw	r2,24(r2)
 800d9f4:	e13ffb17 	ldw	r4,-20(fp)
 800d9f8:	103ee83a 	callr	r2
 800d9fc:	e0bffc17 	ldw	r2,-16(fp)
 800da00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800da04:	e0bffe17 	ldw	r2,-8(fp)
 800da08:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 800da0c:	0001883a 	nop
 800da10:	0001883a 	nop
}
 800da14:	e037883a 	mov	sp,fp
 800da18:	dfc00117 	ldw	ra,4(sp)
 800da1c:	df000017 	ldw	fp,0(sp)
 800da20:	dec00204 	addi	sp,sp,8
 800da24:	f800283a 	ret

0800da28 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 800da28:	defffb04 	addi	sp,sp,-20
 800da2c:	df000415 	stw	fp,16(sp)
 800da30:	df000404 	addi	fp,sp,16
 800da34:	e13ffc15 	stw	r4,-16(fp)
 800da38:	e17ffd15 	stw	r5,-12(fp)
 800da3c:	e1bffe15 	stw	r6,-8(fp)
 800da40:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 800da44:	e0bffc17 	ldw	r2,-16(fp)
 800da48:	e0fffd17 	ldw	r3,-12(fp)
 800da4c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 800da50:	e0bffc17 	ldw	r2,-16(fp)
 800da54:	e0ffff17 	ldw	r3,-4(fp)
 800da58:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 800da5c:	e0bffc17 	ldw	r2,-16(fp)
 800da60:	e0fffe17 	ldw	r3,-8(fp)
 800da64:	10c00815 	stw	r3,32(r2)

    return ;
 800da68:	0001883a 	nop
}
 800da6c:	e037883a 	mov	sp,fp
 800da70:	df000017 	ldw	fp,0(sp)
 800da74:	dec00104 	addi	sp,sp,4
 800da78:	f800283a 	ret

0800da7c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 800da7c:	defff704 	addi	sp,sp,-36
 800da80:	dfc00815 	stw	ra,32(sp)
 800da84:	df000715 	stw	fp,28(sp)
 800da88:	df000704 	addi	fp,sp,28
 800da8c:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 800da90:	e13fff17 	ldw	r4,-4(fp)
 800da94:	800dc400 	call	800dc40 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 800da98:	014007c4 	movi	r5,31
 800da9c:	e13fff17 	ldw	r4,-4(fp)
 800daa0:	800f1b80 	call	800f1b8 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800daa4:	01400704 	movi	r5,28
 800daa8:	e13fff17 	ldw	r4,-4(fp)
 800daac:	800f17c0 	call	800f17c <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 800dab0:	014000c4 	movi	r5,3
 800dab4:	e13fff17 	ldw	r4,-4(fp)
 800dab8:	800f3c40 	call	800f3c4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 800dabc:	014000c4 	movi	r5,3
 800dac0:	e13fff17 	ldw	r4,-4(fp)
 800dac4:	800f3140 	call	800f314 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 800dac8:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 800dacc:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 800dad0:	e0bffb04 	addi	r2,fp,-20
 800dad4:	018000b4 	movhi	r6,2
 800dad8:	31a1a804 	addi	r6,r6,-31072
 800dadc:	100b883a 	mov	r5,r2
 800dae0:	e13fff17 	ldw	r4,-4(fp)
 800dae4:	800de9c0 	call	800de9c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 800dae8:	e0bffb04 	addi	r2,fp,-20
 800daec:	100b883a 	mov	r5,r2
 800daf0:	e13fff17 	ldw	r4,-4(fp)
 800daf4:	800dd3c0 	call	800dd3c <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 800daf8:	d1600d04 	addi	r5,gp,-32716
 800dafc:	e13fff17 	ldw	r4,-4(fp)
 800db00:	80102900 	call	8010290 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 800db04:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 800db08:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 800db0c:	e0bffa17 	ldw	r2,-24(fp)
 800db10:	10000c1e 	bne	r2,zero,800db44 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 800db14:	e0bfff17 	ldw	r2,-4(fp)
 800db18:	10c00417 	ldw	r3,16(r2)
 800db1c:	e0bfff17 	ldw	r2,-4(fp)
 800db20:	10800517 	ldw	r2,20(r2)
 800db24:	d8000015 	stw	zero,0(sp)
 800db28:	e1ffff17 	ldw	r7,-4(fp)
 800db2c:	01820074 	movhi	r6,2049
 800db30:	31b66304 	addi	r6,r6,-9844
 800db34:	100b883a 	mov	r5,r2
 800db38:	1809883a 	mov	r4,r3
 800db3c:	80104b80 	call	80104b8 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 800db40:	00000406 	br	800db54 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 800db44:	01020074 	movhi	r4,2049
 800db48:	2106a704 	addi	r4,r4,6812
 800db4c:	8010aec0 	call	8010aec <alt_printf>
    }

    return;
 800db50:	0001883a 	nop

}
 800db54:	e037883a 	mov	sp,fp
 800db58:	dfc00117 	ldw	ra,4(sp)
 800db5c:	df000017 	ldw	fp,0(sp)
 800db60:	dec00204 	addi	sp,sp,8
 800db64:	f800283a 	ret

0800db68 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 800db68:	defffc04 	addi	sp,sp,-16
 800db6c:	dfc00315 	stw	ra,12(sp)
 800db70:	df000215 	stw	fp,8(sp)
 800db74:	df000204 	addi	fp,sp,8
 800db78:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 800db7c:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 800db80:	d1600d04 	addi	r5,gp,-32716
 800db84:	e13fff17 	ldw	r4,-4(fp)
 800db88:	80103f40 	call	80103f4 <alt_find_dev>
 800db8c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 800db90:	e0bffe17 	ldw	r2,-8(fp)
}
 800db94:	e037883a 	mov	sp,fp
 800db98:	dfc00117 	ldw	ra,4(sp)
 800db9c:	df000017 	ldw	fp,0(sp)
 800dba0:	dec00204 	addi	sp,sp,8
 800dba4:	f800283a 	ret

0800dba8 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 800dba8:	defffc04 	addi	sp,sp,-16
 800dbac:	df000315 	stw	fp,12(sp)
 800dbb0:	df000304 	addi	fp,sp,12
 800dbb4:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 800dbb8:	e0bfff17 	ldw	r2,-4(fp)
 800dbbc:	10800717 	ldw	r2,28(r2)
 800dbc0:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 800dbc4:	e0bfff17 	ldw	r2,-4(fp)
 800dbc8:	10800317 	ldw	r2,12(r2)
 800dbcc:	10800204 	addi	r2,r2,8
 800dbd0:	10800037 	ldwio	r2,0(r2)
 800dbd4:	1080004c 	andi	r2,r2,1
 800dbd8:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 800dbdc:	e0bffe17 	ldw	r2,-8(fp)
 800dbe0:	10000226 	beq	r2,zero,800dbec <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 800dbe4:	00bffe44 	movi	r2,-7
 800dbe8:	00001106 	br	800dc30 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 800dbec:	e0bfff17 	ldw	r2,-4(fp)
 800dbf0:	10c00617 	ldw	r3,24(r2)
 800dbf4:	00820074 	movhi	r2,2049
 800dbf8:	10b60b04 	addi	r2,r2,-10196
 800dbfc:	1880021e 	bne	r3,r2,800dc08 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 800dc00:	e0bffd17 	ldw	r2,-12(fp)
 800dc04:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 800dc08:	e0bfff17 	ldw	r2,-4(fp)
 800dc0c:	10800317 	ldw	r2,12(r2)
 800dc10:	10800204 	addi	r2,r2,8
 800dc14:	e0ffff17 	ldw	r3,-4(fp)
 800dc18:	18c00317 	ldw	r3,12(r3)
 800dc1c:	18c00204 	addi	r3,r3,8
 800dc20:	18c00037 	ldwio	r3,0(r3)
 800dc24:	18c00054 	ori	r3,r3,1
 800dc28:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 800dc2c:	0005883a 	mov	r2,zero
}
 800dc30:	e037883a 	mov	sp,fp
 800dc34:	df000017 	ldw	fp,0(sp)
 800dc38:	dec00104 	addi	sp,sp,4
 800dc3c:	f800283a 	ret

0800dc40 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 800dc40:	defffe04 	addi	sp,sp,-8
 800dc44:	df000115 	stw	fp,4(sp)
 800dc48:	df000104 	addi	fp,sp,4
 800dc4c:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 800dc50:	e0bfff17 	ldw	r2,-4(fp)
 800dc54:	10800317 	ldw	r2,12(r2)
 800dc58:	10800204 	addi	r2,r2,8
 800dc5c:	e0ffff17 	ldw	r3,-4(fp)
 800dc60:	18c00317 	ldw	r3,12(r3)
 800dc64:	18c00204 	addi	r3,r3,8
 800dc68:	19000037 	ldwio	r4,0(r3)
 800dc6c:	00ffff84 	movi	r3,-2
 800dc70:	20c6703a 	and	r3,r4,r3
 800dc74:	10c00035 	stwio	r3,0(r2)

}
 800dc78:	0001883a 	nop
 800dc7c:	e037883a 	mov	sp,fp
 800dc80:	df000017 	ldw	fp,0(sp)
 800dc84:	dec00104 	addi	sp,sp,4
 800dc88:	f800283a 	ret

0800dc8c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 800dc8c:	defffd04 	addi	sp,sp,-12
 800dc90:	df000215 	stw	fp,8(sp)
 800dc94:	df000204 	addi	fp,sp,8
 800dc98:	e13ffe15 	stw	r4,-8(fp)
 800dc9c:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 800dca0:	e0bffe17 	ldw	r2,-8(fp)
 800dca4:	10c00d17 	ldw	r3,52(r2)
 800dca8:	e0bfff17 	ldw	r2,-4(fp)
 800dcac:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 800dcb0:	e0bffe17 	ldw	r2,-8(fp)
 800dcb4:	10800317 	ldw	r2,12(r2)
 800dcb8:	10800204 	addi	r2,r2,8
 800dcbc:	10800037 	ldwio	r2,0(r2)
 800dcc0:	1080008c 	andi	r2,r2,2
 800dcc4:	1005d07a 	srai	r2,r2,1
 800dcc8:	1007883a 	mov	r3,r2
 800dccc:	e0bfff17 	ldw	r2,-4(fp)
 800dcd0:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 800dcd4:	e0bffe17 	ldw	r2,-8(fp)
 800dcd8:	10800317 	ldw	r2,12(r2)
 800dcdc:	10800904 	addi	r2,r2,36
 800dce0:	10800037 	ldwio	r2,0(r2)
 800dce4:	1007883a 	mov	r3,r2
 800dce8:	e0bfff17 	ldw	r2,-4(fp)
 800dcec:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 800dcf0:	e0bffe17 	ldw	r2,-8(fp)
 800dcf4:	10800317 	ldw	r2,12(r2)
 800dcf8:	10800804 	addi	r2,r2,32
 800dcfc:	10800037 	ldwio	r2,0(r2)
 800dd00:	1007883a 	mov	r3,r2
 800dd04:	e0bfff17 	ldw	r2,-4(fp)
 800dd08:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 800dd0c:	e0bffe17 	ldw	r2,-8(fp)
 800dd10:	10800317 	ldw	r2,12(r2)
 800dd14:	10800a04 	addi	r2,r2,40
 800dd18:	10800037 	ldwio	r2,0(r2)
 800dd1c:	1007883a 	mov	r3,r2
 800dd20:	e0bfff17 	ldw	r2,-4(fp)
 800dd24:	10c0030d 	sth	r3,12(r2)
}
 800dd28:	0001883a 	nop
 800dd2c:	e037883a 	mov	sp,fp
 800dd30:	df000017 	ldw	fp,0(sp)
 800dd34:	dec00104 	addi	sp,sp,4
 800dd38:	f800283a 	ret

0800dd3c <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 800dd3c:	defffd04 	addi	sp,sp,-12
 800dd40:	df000215 	stw	fp,8(sp)
 800dd44:	df000204 	addi	fp,sp,8
 800dd48:	e13ffe15 	stw	r4,-8(fp)
 800dd4c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 800dd50:	e0bfff17 	ldw	r2,-4(fp)
 800dd54:	10c00017 	ldw	r3,0(r2)
 800dd58:	e0bffe17 	ldw	r2,-8(fp)
 800dd5c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 800dd60:	e0bffe17 	ldw	r2,-8(fp)
 800dd64:	10800317 	ldw	r2,12(r2)
 800dd68:	10c00204 	addi	r3,r2,8
 800dd6c:	e0bffe17 	ldw	r2,-8(fp)
 800dd70:	10800317 	ldw	r2,12(r2)
 800dd74:	10800204 	addi	r2,r2,8
 800dd78:	10800037 	ldwio	r2,0(r2)
 800dd7c:	1009883a 	mov	r4,r2
 800dd80:	00bfff44 	movi	r2,-3
 800dd84:	2088703a 	and	r4,r4,r2
 800dd88:	e0bfff17 	ldw	r2,-4(fp)
 800dd8c:	10800117 	ldw	r2,4(r2)
 800dd90:	1085883a 	add	r2,r2,r2
 800dd94:	1080008c 	andi	r2,r2,2
 800dd98:	2084b03a 	or	r2,r4,r2
 800dd9c:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 800dda0:	e0bffe17 	ldw	r2,-8(fp)
 800dda4:	10800317 	ldw	r2,12(r2)
 800dda8:	10800904 	addi	r2,r2,36
 800ddac:	e0ffff17 	ldw	r3,-4(fp)
 800ddb0:	18c0020b 	ldhu	r3,8(r3)
 800ddb4:	18ffffcc 	andi	r3,r3,65535
 800ddb8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 800ddbc:	e0bffe17 	ldw	r2,-8(fp)
 800ddc0:	10800317 	ldw	r2,12(r2)
 800ddc4:	10800804 	addi	r2,r2,32
 800ddc8:	e0ffff17 	ldw	r3,-4(fp)
 800ddcc:	18c0028b 	ldhu	r3,10(r3)
 800ddd0:	18ffffcc 	andi	r3,r3,65535
 800ddd4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 800ddd8:	e0bffe17 	ldw	r2,-8(fp)
 800dddc:	10800317 	ldw	r2,12(r2)
 800dde0:	10800a04 	addi	r2,r2,40
 800dde4:	e0ffff17 	ldw	r3,-4(fp)
 800dde8:	18c0030b 	ldhu	r3,12(r3)
 800ddec:	18ffffcc 	andi	r3,r3,65535
 800ddf0:	10c00035 	stwio	r3,0(r2)
}
 800ddf4:	0001883a 	nop
 800ddf8:	e037883a 	mov	sp,fp
 800ddfc:	df000017 	ldw	fp,0(sp)
 800de00:	dec00104 	addi	sp,sp,4
 800de04:	f800283a 	ret

0800de08 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 800de08:	defffb04 	addi	sp,sp,-20
 800de0c:	dfc00415 	stw	ra,16(sp)
 800de10:	df000315 	stw	fp,12(sp)
 800de14:	df000304 	addi	fp,sp,12
 800de18:	e13ffd15 	stw	r4,-12(fp)
 800de1c:	e17ffe15 	stw	r5,-8(fp)
 800de20:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 800de24:	e0bffe17 	ldw	r2,-8(fp)
 800de28:	1080028b 	ldhu	r2,10(r2)
 800de2c:	10bfffcc 	andi	r2,r2,65535
 800de30:	10000426 	beq	r2,zero,800de44 <alt_avalon_i2c_master_config_speed_get+0x3c>
 800de34:	e0bffe17 	ldw	r2,-8(fp)
 800de38:	1080020b 	ldhu	r2,8(r2)
 800de3c:	10bfffcc 	andi	r2,r2,65535
 800de40:	1000021e 	bne	r2,zero,800de4c <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 800de44:	00bfff44 	movi	r2,-3
 800de48:	00000f06 	br	800de88 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 800de4c:	e0bffd17 	ldw	r2,-12(fp)
 800de50:	11000c17 	ldw	r4,48(r2)
 800de54:	e0bffe17 	ldw	r2,-8(fp)
 800de58:	1080028b 	ldhu	r2,10(r2)
 800de5c:	10ffffcc 	andi	r3,r2,65535
 800de60:	e0bffe17 	ldw	r2,-8(fp)
 800de64:	1080020b 	ldhu	r2,8(r2)
 800de68:	10bfffcc 	andi	r2,r2,65535
 800de6c:	1885883a 	add	r2,r3,r2
 800de70:	100b883a 	mov	r5,r2
 800de74:	800a6e80 	call	800a6e8 <__udivsi3>
 800de78:	1007883a 	mov	r3,r2
 800de7c:	e0bfff17 	ldw	r2,-4(fp)
 800de80:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 800de84:	0005883a 	mov	r2,zero
}
 800de88:	e037883a 	mov	sp,fp
 800de8c:	dfc00117 	ldw	ra,4(sp)
 800de90:	df000017 	ldw	fp,0(sp)
 800de94:	dec00204 	addi	sp,sp,8
 800de98:	f800283a 	ret

0800de9c <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 800de9c:	defff904 	addi	sp,sp,-28
 800dea0:	dfc00615 	stw	ra,24(sp)
 800dea4:	df000515 	stw	fp,20(sp)
 800dea8:	df000504 	addi	fp,sp,20
 800deac:	e13ffd15 	stw	r4,-12(fp)
 800deb0:	e17ffe15 	stw	r5,-8(fp)
 800deb4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 800deb8:	e0ffff17 	ldw	r3,-4(fp)
 800debc:	008001b4 	movhi	r2,6
 800dec0:	1086a004 	addi	r2,r2,6784
 800dec4:	10c00436 	bltu	r2,r3,800ded8 <alt_avalon_i2c_master_config_speed_set+0x3c>
 800dec8:	e0bfff17 	ldw	r2,-4(fp)
 800decc:	10000226 	beq	r2,zero,800ded8 <alt_avalon_i2c_master_config_speed_set+0x3c>
 800ded0:	e0bfff17 	ldw	r2,-4(fp)
 800ded4:	1000021e 	bne	r2,zero,800dee0 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 800ded8:	00bfff04 	movi	r2,-4
 800dedc:	00002906 	br	800df84 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 800dee0:	e0bffd17 	ldw	r2,-12(fp)
 800dee4:	10c00c17 	ldw	r3,48(r2)
 800dee8:	e0bfff17 	ldw	r2,-4(fp)
 800deec:	1085883a 	add	r2,r2,r2
 800def0:	100b883a 	mov	r5,r2
 800def4:	1809883a 	mov	r4,r3
 800def8:	800a6e80 	call	800a6e8 <__udivsi3>
 800defc:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 800df00:	e0bffb17 	ldw	r2,-20(fp)
 800df04:	10800f04 	addi	r2,r2,60
 800df08:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 800df0c:	e0bffb17 	ldw	r2,-20(fp)
 800df10:	10bff104 	addi	r2,r2,-60
 800df14:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 800df18:	e0ffff17 	ldw	r3,-4(fp)
 800df1c:	008000b4 	movhi	r2,2
 800df20:	10a1a804 	addi	r2,r2,-31072
 800df24:	10c0042e 	bgeu	r2,r3,800df38 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 800df28:	e0bffe17 	ldw	r2,-8(fp)
 800df2c:	00c00044 	movi	r3,1
 800df30:	10c00115 	stw	r3,4(r2)
 800df34:	00000206 	br	800df40 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 800df38:	e0bffe17 	ldw	r2,-8(fp)
 800df3c:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 800df40:	e0bffb17 	ldw	r2,-20(fp)
 800df44:	1007883a 	mov	r3,r2
 800df48:	e0bffe17 	ldw	r2,-8(fp)
 800df4c:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 800df50:	e0bffc17 	ldw	r2,-16(fp)
 800df54:	1007883a 	mov	r3,r2
 800df58:	e0bffe17 	ldw	r2,-8(fp)
 800df5c:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 800df60:	e0bffb17 	ldw	r2,-20(fp)
 800df64:	1007883a 	mov	r3,r2
 800df68:	e0bffb17 	ldw	r2,-20(fp)
 800df6c:	1004d07a 	srli	r2,r2,1
 800df70:	1885c83a 	sub	r2,r3,r2
 800df74:	1007883a 	mov	r3,r2
 800df78:	e0bffe17 	ldw	r2,-8(fp)
 800df7c:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 800df80:	0005883a 	mov	r2,zero

}
 800df84:	e037883a 	mov	sp,fp
 800df88:	dfc00117 	ldw	ra,4(sp)
 800df8c:	df000017 	ldw	fp,0(sp)
 800df90:	dec00204 	addi	sp,sp,8
 800df94:	f800283a 	ret

0800df98 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 800df98:	defffe04 	addi	sp,sp,-8
 800df9c:	df000115 	stw	fp,4(sp)
 800dfa0:	df000104 	addi	fp,sp,4
 800dfa4:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 800dfa8:	e0bfff17 	ldw	r2,-4(fp)
 800dfac:	10800317 	ldw	r2,12(r2)
 800dfb0:	10800504 	addi	r2,r2,20
 800dfb4:	10800037 	ldwio	r2,0(r2)
 800dfb8:	1080004c 	andi	r2,r2,1
 800dfbc:	10000226 	beq	r2,zero,800dfc8 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 800dfc0:	00800044 	movi	r2,1
 800dfc4:	00000106 	br	800dfcc <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 800dfc8:	0005883a 	mov	r2,zero
}
 800dfcc:	e037883a 	mov	sp,fp
 800dfd0:	df000017 	ldw	fp,0(sp)
 800dfd4:	dec00104 	addi	sp,sp,4
 800dfd8:	f800283a 	ret

0800dfdc <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 800dfdc:	defffb04 	addi	sp,sp,-20
 800dfe0:	df000415 	stw	fp,16(sp)
 800dfe4:	df000404 	addi	fp,sp,16
 800dfe8:	e13ffc15 	stw	r4,-16(fp)
 800dfec:	e17ffd15 	stw	r5,-12(fp)
 800dff0:	e1bffe15 	stw	r6,-8(fp)
 800dff4:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 800dff8:	e0bfff17 	ldw	r2,-4(fp)
 800dffc:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 800e000:	00001406 	br	800e054 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 800e004:	e0bfff17 	ldw	r2,-4(fp)
 800e008:	10800017 	ldw	r2,0(r2)
 800e00c:	e0fffd17 	ldw	r3,-12(fp)
 800e010:	1885883a 	add	r2,r3,r2
 800e014:	e0fffc17 	ldw	r3,-16(fp)
 800e018:	18c00317 	ldw	r3,12(r3)
 800e01c:	18c00104 	addi	r3,r3,4
 800e020:	18c00037 	ldwio	r3,0(r3)
 800e024:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 800e028:	e0bfff17 	ldw	r2,-4(fp)
 800e02c:	10800017 	ldw	r2,0(r2)
 800e030:	10c00044 	addi	r3,r2,1
 800e034:	e0bfff17 	ldw	r2,-4(fp)
 800e038:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 800e03c:	e0bfff17 	ldw	r2,-4(fp)
 800e040:	10c00017 	ldw	r3,0(r2)
 800e044:	e0bffe17 	ldw	r2,-8(fp)
 800e048:	1880021e 	bne	r3,r2,800e054 <alt_avalon_i2c_rx_read_available+0x78>
 800e04c:	e0bffe17 	ldw	r2,-8(fp)
 800e050:	1000061e 	bne	r2,zero,800e06c <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 800e054:	e0bffc17 	ldw	r2,-16(fp)
 800e058:	10800317 	ldw	r2,12(r2)
 800e05c:	10800704 	addi	r2,r2,28
 800e060:	10800037 	ldwio	r2,0(r2)
 800e064:	103fe71e 	bne	r2,zero,800e004 <__alt_data_end+0xff00e004>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 800e068:	00000106 	br	800e070 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 800e06c:	0001883a 	nop
    }
}
 800e070:	0001883a 	nop
 800e074:	e037883a 	mov	sp,fp
 800e078:	df000017 	ldw	fp,0(sp)
 800e07c:	dec00104 	addi	sp,sp,4
 800e080:	f800283a 	ret

0800e084 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 800e084:	defffa04 	addi	sp,sp,-24
 800e088:	dfc00515 	stw	ra,20(sp)
 800e08c:	df000415 	stw	fp,16(sp)
 800e090:	df000404 	addi	fp,sp,16
 800e094:	e13ffe15 	stw	r4,-8(fp)
 800e098:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 800e09c:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 800e0a0:	008000b4 	movhi	r2,2
 800e0a4:	10a1a804 	addi	r2,r2,-31072
 800e0a8:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 800e0ac:	00000d06 	br	800e0e4 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 800e0b0:	e0bffd17 	ldw	r2,-12(fp)
 800e0b4:	108002a8 	cmpgeui	r2,r2,10
 800e0b8:	1000021e 	bne	r2,zero,800e0c4 <alt_avalon_i2c_rx_read+0x40>
 800e0bc:	0109c404 	movi	r4,10000
 800e0c0:	80100b40 	call	80100b4 <alt_busy_sleep>
      if (--timeout == 0)
 800e0c4:	e0bffd17 	ldw	r2,-12(fp)
 800e0c8:	10bfffc4 	addi	r2,r2,-1
 800e0cc:	e0bffd15 	stw	r2,-12(fp)
 800e0d0:	e0bffd17 	ldw	r2,-12(fp)
 800e0d4:	1000031e 	bne	r2,zero,800e0e4 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 800e0d8:	00bfff84 	movi	r2,-2
 800e0dc:	e0bffc15 	stw	r2,-16(fp)
        break;
 800e0e0:	00000506 	br	800e0f8 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 800e0e4:	e0bffe17 	ldw	r2,-8(fp)
 800e0e8:	10800317 	ldw	r2,12(r2)
 800e0ec:	10800704 	addi	r2,r2,28
 800e0f0:	10800037 	ldwio	r2,0(r2)
 800e0f4:	103fee26 	beq	r2,zero,800e0b0 <__alt_data_end+0xff00e0b0>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 800e0f8:	e0bffe17 	ldw	r2,-8(fp)
 800e0fc:	10800317 	ldw	r2,12(r2)
 800e100:	10800104 	addi	r2,r2,4
 800e104:	10800037 	ldwio	r2,0(r2)
 800e108:	1007883a 	mov	r3,r2
 800e10c:	e0bfff17 	ldw	r2,-4(fp)
 800e110:	10c00005 	stb	r3,0(r2)
        
    return status;
 800e114:	e0bffc17 	ldw	r2,-16(fp)
}
 800e118:	e037883a 	mov	sp,fp
 800e11c:	dfc00117 	ldw	ra,4(sp)
 800e120:	df000017 	ldw	fp,0(sp)
 800e124:	dec00204 	addi	sp,sp,8
 800e128:	f800283a 	ret

0800e12c <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 800e12c:	defff804 	addi	sp,sp,-32
 800e130:	dfc00715 	stw	ra,28(sp)
 800e134:	df000615 	stw	fp,24(sp)
 800e138:	df000604 	addi	fp,sp,24
 800e13c:	e13ffc15 	stw	r4,-16(fp)
 800e140:	2809883a 	mov	r4,r5
 800e144:	3007883a 	mov	r3,r6
 800e148:	3805883a 	mov	r2,r7
 800e14c:	e13ffd05 	stb	r4,-12(fp)
 800e150:	e0fffe05 	stb	r3,-8(fp)
 800e154:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 800e158:	0089c404 	movi	r2,10000
 800e15c:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800e160:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 800e164:	00000c06 	br	800e198 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 800e168:	e0bffa17 	ldw	r2,-24(fp)
 800e16c:	108002a8 	cmpgeui	r2,r2,10
 800e170:	1000021e 	bne	r2,zero,800e17c <alt_avalon_i2c_cmd_write+0x50>
 800e174:	0109c404 	movi	r4,10000
 800e178:	80100b40 	call	80100b4 <alt_busy_sleep>
      if (--timeout == 0)
 800e17c:	e0bffa17 	ldw	r2,-24(fp)
 800e180:	10bfffc4 	addi	r2,r2,-1
 800e184:	e0bffa15 	stw	r2,-24(fp)
 800e188:	e0bffa17 	ldw	r2,-24(fp)
 800e18c:	1000021e 	bne	r2,zero,800e198 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 800e190:	00bfff84 	movi	r2,-2
 800e194:	00001906 	br	800e1fc <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 800e198:	e0bffc17 	ldw	r2,-16(fp)
 800e19c:	10800317 	ldw	r2,12(r2)
 800e1a0:	10800404 	addi	r2,r2,16
 800e1a4:	10800037 	ldwio	r2,0(r2)
 800e1a8:	1080004c 	andi	r2,r2,1
 800e1ac:	103fee26 	beq	r2,zero,800e168 <__alt_data_end+0xff00e168>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 800e1b0:	e0bffc17 	ldw	r2,-16(fp)
 800e1b4:	10800317 	ldw	r2,12(r2)
 800e1b8:	e13ffd03 	ldbu	r4,-12(fp)
 800e1bc:	e0fffe03 	ldbu	r3,-8(fp)
 800e1c0:	1806927a 	slli	r3,r3,9
 800e1c4:	20c8b03a 	or	r4,r4,r3
 800e1c8:	e0ffff03 	ldbu	r3,-4(fp)
 800e1cc:	1806923a 	slli	r3,r3,8
 800e1d0:	20c6b03a 	or	r3,r4,r3
 800e1d4:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 800e1d8:	e0bffb04 	addi	r2,fp,-20
 800e1dc:	100b883a 	mov	r5,r2
 800e1e0:	e13ffc17 	ldw	r4,-16(fp)
 800e1e4:	800e36c0 	call	800e36c <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 800e1e8:	e0bffb04 	addi	r2,fp,-20
 800e1ec:	100b883a 	mov	r5,r2
 800e1f0:	e13ffc17 	ldw	r4,-16(fp)
 800e1f4:	800e3b80 	call	800e3b8 <alt_avalon_i2c_check_arblost>
    
    return status;
 800e1f8:	e0bffb17 	ldw	r2,-20(fp)
}
 800e1fc:	e037883a 	mov	sp,fp
 800e200:	dfc00117 	ldw	ra,4(sp)
 800e204:	df000017 	ldw	fp,0(sp)
 800e208:	dec00204 	addi	sp,sp,8
 800e20c:	f800283a 	ret

0800e210 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 800e210:	defffa04 	addi	sp,sp,-24
 800e214:	dfc00515 	stw	ra,20(sp)
 800e218:	df000415 	stw	fp,16(sp)
 800e21c:	df000404 	addi	fp,sp,16
 800e220:	e13ffd15 	stw	r4,-12(fp)
 800e224:	e17ffe15 	stw	r5,-8(fp)
 800e228:	3005883a 	mov	r2,r6
 800e22c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 800e230:	e0bffd17 	ldw	r2,-12(fp)
 800e234:	10800d17 	ldw	r2,52(r2)
 800e238:	10800058 	cmpnei	r2,r2,1
 800e23c:	10001c1e 	bne	r2,zero,800e2b0 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 800e240:	e0bffd17 	ldw	r2,-12(fp)
 800e244:	10800917 	ldw	r2,36(r2)
 800e248:	109e0014 	ori	r2,r2,30720
 800e24c:	1004d1fa 	srli	r2,r2,7
 800e250:	1007883a 	mov	r3,r2
 800e254:	00bfff84 	movi	r2,-2
 800e258:	1884703a 	and	r2,r3,r2
 800e25c:	1007883a 	mov	r3,r2
 800e260:	e0bffe17 	ldw	r2,-8(fp)
 800e264:	1884b03a 	or	r2,r3,r2
 800e268:	10803fcc 	andi	r2,r2,255
 800e26c:	e0ffff03 	ldbu	r3,-4(fp)
 800e270:	000f883a 	mov	r7,zero
 800e274:	180d883a 	mov	r6,r3
 800e278:	100b883a 	mov	r5,r2
 800e27c:	e13ffd17 	ldw	r4,-12(fp)
 800e280:	800e12c0 	call	800e12c <alt_avalon_i2c_cmd_write>
 800e284:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 800e288:	e0bffd17 	ldw	r2,-12(fp)
 800e28c:	10800917 	ldw	r2,36(r2)
 800e290:	10803fcc 	andi	r2,r2,255
 800e294:	000f883a 	mov	r7,zero
 800e298:	000d883a 	mov	r6,zero
 800e29c:	100b883a 	mov	r5,r2
 800e2a0:	e13ffd17 	ldw	r4,-12(fp)
 800e2a4:	800e12c0 	call	800e12c <alt_avalon_i2c_cmd_write>
 800e2a8:	e0bffc15 	stw	r2,-16(fp)
 800e2ac:	00000e06 	br	800e2e8 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 800e2b0:	e0bffd17 	ldw	r2,-12(fp)
 800e2b4:	10800917 	ldw	r2,36(r2)
 800e2b8:	1085883a 	add	r2,r2,r2
 800e2bc:	1007883a 	mov	r3,r2
 800e2c0:	e0bffe17 	ldw	r2,-8(fp)
 800e2c4:	1884b03a 	or	r2,r3,r2
 800e2c8:	10803fcc 	andi	r2,r2,255
 800e2cc:	e0ffff03 	ldbu	r3,-4(fp)
 800e2d0:	000f883a 	mov	r7,zero
 800e2d4:	180d883a 	mov	r6,r3
 800e2d8:	100b883a 	mov	r5,r2
 800e2dc:	e13ffd17 	ldw	r4,-12(fp)
 800e2e0:	800e12c0 	call	800e12c <alt_avalon_i2c_cmd_write>
 800e2e4:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 800e2e8:	e0bffc17 	ldw	r2,-16(fp)
}
 800e2ec:	e037883a 	mov	sp,fp
 800e2f0:	dfc00117 	ldw	ra,4(sp)
 800e2f4:	df000017 	ldw	fp,0(sp)
 800e2f8:	dec00204 	addi	sp,sp,8
 800e2fc:	f800283a 	ret

0800e300 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 800e300:	defffd04 	addi	sp,sp,-12
 800e304:	df000215 	stw	fp,8(sp)
 800e308:	df000204 	addi	fp,sp,8
 800e30c:	e13ffe15 	stw	r4,-8(fp)
 800e310:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 800e314:	e0bffe17 	ldw	r2,-8(fp)
 800e318:	10c00917 	ldw	r3,36(r2)
 800e31c:	e0bfff17 	ldw	r2,-4(fp)
 800e320:	10c00015 	stw	r3,0(r2)
}
 800e324:	0001883a 	nop
 800e328:	e037883a 	mov	sp,fp
 800e32c:	df000017 	ldw	fp,0(sp)
 800e330:	dec00104 	addi	sp,sp,4
 800e334:	f800283a 	ret

0800e338 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 800e338:	defffd04 	addi	sp,sp,-12
 800e33c:	df000215 	stw	fp,8(sp)
 800e340:	df000204 	addi	fp,sp,8
 800e344:	e13ffe15 	stw	r4,-8(fp)
 800e348:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 800e34c:	e0bffe17 	ldw	r2,-8(fp)
 800e350:	e0ffff17 	ldw	r3,-4(fp)
 800e354:	10c00915 	stw	r3,36(r2)
}
 800e358:	0001883a 	nop
 800e35c:	e037883a 	mov	sp,fp
 800e360:	df000017 	ldw	fp,0(sp)
 800e364:	dec00104 	addi	sp,sp,4
 800e368:	f800283a 	ret

0800e36c <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 800e36c:	defffd04 	addi	sp,sp,-12
 800e370:	df000215 	stw	fp,8(sp)
 800e374:	df000204 	addi	fp,sp,8
 800e378:	e13ffe15 	stw	r4,-8(fp)
 800e37c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 800e380:	e0bffe17 	ldw	r2,-8(fp)
 800e384:	10800317 	ldw	r2,12(r2)
 800e388:	10800404 	addi	r2,r2,16
 800e38c:	10800037 	ldwio	r2,0(r2)
 800e390:	1080010c 	andi	r2,r2,4
 800e394:	10000326 	beq	r2,zero,800e3a4 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 800e398:	e0bfff17 	ldw	r2,-4(fp)
 800e39c:	00fffec4 	movi	r3,-5
 800e3a0:	10c00015 	stw	r3,0(r2)
    }
}
 800e3a4:	0001883a 	nop
 800e3a8:	e037883a 	mov	sp,fp
 800e3ac:	df000017 	ldw	fp,0(sp)
 800e3b0:	dec00104 	addi	sp,sp,4
 800e3b4:	f800283a 	ret

0800e3b8 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 800e3b8:	defffd04 	addi	sp,sp,-12
 800e3bc:	df000215 	stw	fp,8(sp)
 800e3c0:	df000204 	addi	fp,sp,8
 800e3c4:	e13ffe15 	stw	r4,-8(fp)
 800e3c8:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 800e3cc:	e0bffe17 	ldw	r2,-8(fp)
 800e3d0:	10800317 	ldw	r2,12(r2)
 800e3d4:	10800404 	addi	r2,r2,16
 800e3d8:	10800037 	ldwio	r2,0(r2)
 800e3dc:	1080020c 	andi	r2,r2,8
 800e3e0:	10000326 	beq	r2,zero,800e3f0 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 800e3e4:	e0bfff17 	ldw	r2,-4(fp)
 800e3e8:	00fffe84 	movi	r3,-6
 800e3ec:	10c00015 	stw	r3,0(r2)
    }
}
 800e3f0:	0001883a 	nop
 800e3f4:	e037883a 	mov	sp,fp
 800e3f8:	df000017 	ldw	fp,0(sp)
 800e3fc:	dec00104 	addi	sp,sp,4
 800e400:	f800283a 	ret

0800e404 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 800e404:	defff804 	addi	sp,sp,-32
 800e408:	dfc00715 	stw	ra,28(sp)
 800e40c:	df000615 	stw	fp,24(sp)
 800e410:	df000604 	addi	fp,sp,24
 800e414:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800e418:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 800e41c:	e0bfff17 	ldw	r2,-4(fp)
 800e420:	10800717 	ldw	r2,28(r2)
 800e424:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 800e428:	e0bffb17 	ldw	r2,-20(fp)
 800e42c:	10800117 	ldw	r2,4(r2)
 800e430:	10800044 	addi	r2,r2,1
 800e434:	1089c424 	muli	r2,r2,10000
 800e438:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 800e43c:	e0bffd04 	addi	r2,fp,-12
 800e440:	100b883a 	mov	r5,r2
 800e444:	e13fff17 	ldw	r4,-4(fp)
 800e448:	800f2840 	call	800f284 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 800e44c:	e0bffd17 	ldw	r2,-12(fp)
 800e450:	100b883a 	mov	r5,r2
 800e454:	e13fff17 	ldw	r4,-4(fp)
 800e458:	800f1b80 	call	800f1b8 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 800e45c:	e0bffc04 	addi	r2,fp,-16
 800e460:	100b883a 	mov	r5,r2
 800e464:	e13fff17 	ldw	r4,-4(fp)
 800e468:	800e36c0 	call	800e36c <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 800e46c:	e0bffc17 	ldw	r2,-16(fp)
 800e470:	10002226 	beq	r2,zero,800e4fc <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
 800e474:	e0bffb17 	ldw	r2,-20(fp)
 800e478:	10800217 	ldw	r2,8(r2)
 800e47c:	10001d26 	beq	r2,zero,800e4f4 <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800e480:	00000d06 	br	800e4b8 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
 800e484:	e0bffa17 	ldw	r2,-24(fp)
 800e488:	108002a8 	cmpgeui	r2,r2,10
 800e48c:	1000021e 	bne	r2,zero,800e498 <alt_avalon_i2c_interrupt_transaction_status+0x94>
 800e490:	0109c404 	movi	r4,10000
 800e494:	80100b40 	call	80100b4 <alt_busy_sleep>
              if (--timeout == 0)
 800e498:	e0bffa17 	ldw	r2,-24(fp)
 800e49c:	10bfffc4 	addi	r2,r2,-1
 800e4a0:	e0bffa15 	stw	r2,-24(fp)
 800e4a4:	e0bffa17 	ldw	r2,-24(fp)
 800e4a8:	1000031e 	bne	r2,zero,800e4b8 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 800e4ac:	00bfff84 	movi	r2,-2
 800e4b0:	e0bffc15 	stw	r2,-16(fp)
                 break;
 800e4b4:	00000306 	br	800e4c4 <alt_avalon_i2c_interrupt_transaction_status+0xc0>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800e4b8:	e13fff17 	ldw	r4,-4(fp)
 800e4bc:	800df980 	call	800df98 <alt_avalon_i2c_is_busy>
 800e4c0:	103ff01e 	bne	r2,zero,800e484 <__alt_data_end+0xff00e484>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 800e4c4:	e0bffb17 	ldw	r2,-20(fp)
 800e4c8:	10800017 	ldw	r2,0(r2)
 800e4cc:	e0fffe04 	addi	r3,fp,-8
 800e4d0:	180f883a 	mov	r7,r3
 800e4d4:	000d883a 	mov	r6,zero
 800e4d8:	100b883a 	mov	r5,r2
 800e4dc:	e13fff17 	ldw	r4,-4(fp)
 800e4e0:	800dfdc0 	call	800dfdc <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 800e4e4:	e13fff17 	ldw	r4,-4(fp)
 800e4e8:	800dc400 	call	800dc40 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 800e4ec:	e0bffb17 	ldw	r2,-20(fp)
 800e4f0:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 800e4f4:	e0bffc17 	ldw	r2,-16(fp)
 800e4f8:	00000a06 	br	800e524 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
 800e4fc:	e0bffb17 	ldw	r2,-20(fp)
 800e500:	10800217 	ldw	r2,8(r2)
 800e504:	10000626 	beq	r2,zero,800e520 <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 800e508:	e0bffd17 	ldw	r2,-12(fp)
 800e50c:	100b883a 	mov	r5,r2
 800e510:	e13fff17 	ldw	r4,-4(fp)
 800e514:	800f2200 	call	800f220 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 800e518:	00bffe44 	movi	r2,-7
 800e51c:	00000106 	br	800e524 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 800e520:	0005883a 	mov	r2,zero
}
 800e524:	e037883a 	mov	sp,fp
 800e528:	dfc00117 	ldw	ra,4(sp)
 800e52c:	df000017 	ldw	fp,0(sp)
 800e530:	dec00204 	addi	sp,sp,8
 800e534:	f800283a 	ret

0800e538 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 800e538:	defff704 	addi	sp,sp,-36
 800e53c:	dfc00815 	stw	ra,32(sp)
 800e540:	df000715 	stw	fp,28(sp)
 800e544:	df000704 	addi	fp,sp,28
 800e548:	e13ffc15 	stw	r4,-16(fp)
 800e54c:	e17ffd15 	stw	r5,-12(fp)
 800e550:	e1bffe15 	stw	r6,-8(fp)
 800e554:	3805883a 	mov	r2,r7
 800e558:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 800e55c:	0089c404 	movi	r2,10000
 800e560:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 800e564:	00002206 	br	800e5f0 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 800e568:	e0bffb17 	ldw	r2,-20(fp)
 800e56c:	108002a8 	cmpgeui	r2,r2,10
 800e570:	1000021e 	bne	r2,zero,800e57c <alt_avalon_i2c_master_tx+0x44>
 800e574:	0109c404 	movi	r4,10000
 800e578:	80100b40 	call	80100b4 <alt_busy_sleep>
      if (use_interrupts)
 800e57c:	e0bfff03 	ldbu	r2,-4(fp)
 800e580:	10000926 	beq	r2,zero,800e5a8 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 800e584:	00800044 	movi	r2,1
 800e588:	d8800015 	stw	r2,0(sp)
 800e58c:	000f883a 	mov	r7,zero
 800e590:	e1bffe17 	ldw	r6,-8(fp)
 800e594:	e17ffd17 	ldw	r5,-12(fp)
 800e598:	e13ffc17 	ldw	r4,-16(fp)
 800e59c:	800eae00 	call	800eae0 <alt_avalon_i2c_master_transmit_using_interrupts>
 800e5a0:	e0bffa15 	stw	r2,-24(fp)
 800e5a4:	00000806 	br	800e5c8 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 800e5a8:	00800044 	movi	r2,1
 800e5ac:	d8800015 	stw	r2,0(sp)
 800e5b0:	000f883a 	mov	r7,zero
 800e5b4:	e1bffe17 	ldw	r6,-8(fp)
 800e5b8:	e17ffd17 	ldw	r5,-12(fp)
 800e5bc:	e13ffc17 	ldw	r4,-16(fp)
 800e5c0:	800e9240 	call	800e924 <alt_avalon_i2c_master_transmit>
 800e5c4:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800e5c8:	e0bffa17 	ldw	r2,-24(fp)
 800e5cc:	10bffea0 	cmpeqi	r2,r2,-6
 800e5d0:	1000061e 	bne	r2,zero,800e5ec <alt_avalon_i2c_master_tx+0xb4>
 800e5d4:	e0bffa17 	ldw	r2,-24(fp)
 800e5d8:	10bffee0 	cmpeqi	r2,r2,-5
 800e5dc:	1000031e 	bne	r2,zero,800e5ec <alt_avalon_i2c_master_tx+0xb4>
 800e5e0:	e0bffa17 	ldw	r2,-24(fp)
 800e5e4:	10bffe58 	cmpnei	r2,r2,-7
 800e5e8:	1000061e 	bne	r2,zero,800e604 <alt_avalon_i2c_master_tx+0xcc>
 800e5ec:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 800e5f0:	e0bffb17 	ldw	r2,-20(fp)
 800e5f4:	10ffffc4 	addi	r3,r2,-1
 800e5f8:	e0fffb15 	stw	r3,-20(fp)
 800e5fc:	103fda1e 	bne	r2,zero,800e568 <__alt_data_end+0xff00e568>
 800e600:	00000106 	br	800e608 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 800e604:	0001883a 	nop
    }

    return status;
 800e608:	e0bffa17 	ldw	r2,-24(fp)
}        
 800e60c:	e037883a 	mov	sp,fp
 800e610:	dfc00117 	ldw	ra,4(sp)
 800e614:	df000017 	ldw	fp,0(sp)
 800e618:	dec00204 	addi	sp,sp,8
 800e61c:	f800283a 	ret

0800e620 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 800e620:	defff704 	addi	sp,sp,-36
 800e624:	dfc00815 	stw	ra,32(sp)
 800e628:	df000715 	stw	fp,28(sp)
 800e62c:	df000704 	addi	fp,sp,28
 800e630:	e13ffc15 	stw	r4,-16(fp)
 800e634:	e17ffd15 	stw	r5,-12(fp)
 800e638:	e1bffe15 	stw	r6,-8(fp)
 800e63c:	3805883a 	mov	r2,r7
 800e640:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 800e644:	0089c404 	movi	r2,10000
 800e648:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 800e64c:	e0bfff03 	ldbu	r2,-4(fp)
 800e650:	10003426 	beq	r2,zero,800e724 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 800e654:	00001706 	br	800e6b4 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 800e658:	e0bffb17 	ldw	r2,-20(fp)
 800e65c:	108002a8 	cmpgeui	r2,r2,10
 800e660:	1000021e 	bne	r2,zero,800e66c <alt_avalon_i2c_master_rx+0x4c>
 800e664:	0109c404 	movi	r4,10000
 800e668:	80100b40 	call	80100b4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 800e66c:	00800044 	movi	r2,1
 800e670:	d8800015 	stw	r2,0(sp)
 800e674:	000f883a 	mov	r7,zero
 800e678:	e1bffe17 	ldw	r6,-8(fp)
 800e67c:	e17ffd17 	ldw	r5,-12(fp)
 800e680:	e13ffc17 	ldw	r4,-16(fp)
 800e684:	800eef40 	call	800eef4 <alt_avalon_i2c_master_receive_using_interrupts>
 800e688:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800e68c:	e0bffa17 	ldw	r2,-24(fp)
 800e690:	10bffea0 	cmpeqi	r2,r2,-6
 800e694:	1000061e 	bne	r2,zero,800e6b0 <alt_avalon_i2c_master_rx+0x90>
 800e698:	e0bffa17 	ldw	r2,-24(fp)
 800e69c:	10bffee0 	cmpeqi	r2,r2,-5
 800e6a0:	1000031e 	bne	r2,zero,800e6b0 <alt_avalon_i2c_master_rx+0x90>
 800e6a4:	e0bffa17 	ldw	r2,-24(fp)
 800e6a8:	10bffe58 	cmpnei	r2,r2,-7
 800e6ac:	1000221e 	bne	r2,zero,800e738 <alt_avalon_i2c_master_rx+0x118>
 800e6b0:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 800e6b4:	e0bffb17 	ldw	r2,-20(fp)
 800e6b8:	10ffffc4 	addi	r3,r2,-1
 800e6bc:	e0fffb15 	stw	r3,-20(fp)
 800e6c0:	103fe51e 	bne	r2,zero,800e658 <__alt_data_end+0xff00e658>
 800e6c4:	00001f06 	br	800e744 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 800e6c8:	e0bffb17 	ldw	r2,-20(fp)
 800e6cc:	108002a8 	cmpgeui	r2,r2,10
 800e6d0:	1000021e 	bne	r2,zero,800e6dc <alt_avalon_i2c_master_rx+0xbc>
 800e6d4:	0109c404 	movi	r4,10000
 800e6d8:	80100b40 	call	80100b4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 800e6dc:	00800044 	movi	r2,1
 800e6e0:	d8800015 	stw	r2,0(sp)
 800e6e4:	000f883a 	mov	r7,zero
 800e6e8:	e1bffe17 	ldw	r6,-8(fp)
 800e6ec:	e17ffd17 	ldw	r5,-12(fp)
 800e6f0:	e13ffc17 	ldw	r4,-16(fp)
 800e6f4:	800ece80 	call	800ece8 <alt_avalon_i2c_master_receive>
 800e6f8:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800e6fc:	e0bffa17 	ldw	r2,-24(fp)
 800e700:	10bffea0 	cmpeqi	r2,r2,-6
 800e704:	1000061e 	bne	r2,zero,800e720 <alt_avalon_i2c_master_rx+0x100>
 800e708:	e0bffa17 	ldw	r2,-24(fp)
 800e70c:	10bffee0 	cmpeqi	r2,r2,-5
 800e710:	1000031e 	bne	r2,zero,800e720 <alt_avalon_i2c_master_rx+0x100>
 800e714:	e0bffa17 	ldw	r2,-24(fp)
 800e718:	10bffe58 	cmpnei	r2,r2,-7
 800e71c:	1000081e 	bne	r2,zero,800e740 <alt_avalon_i2c_master_rx+0x120>
 800e720:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 800e724:	e0bffb17 	ldw	r2,-20(fp)
 800e728:	10ffffc4 	addi	r3,r2,-1
 800e72c:	e0fffb15 	stw	r3,-20(fp)
 800e730:	103fe51e 	bne	r2,zero,800e6c8 <__alt_data_end+0xff00e6c8>
 800e734:	00000306 	br	800e744 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 800e738:	0001883a 	nop
 800e73c:	00000106 	br	800e744 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 800e740:	0001883a 	nop
      }
    }
    
    return status;
 800e744:	e0bffa17 	ldw	r2,-24(fp)
}        
 800e748:	e037883a 	mov	sp,fp
 800e74c:	dfc00117 	ldw	ra,4(sp)
 800e750:	df000017 	ldw	fp,0(sp)
 800e754:	dec00204 	addi	sp,sp,8
 800e758:	f800283a 	ret

0800e75c <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 800e75c:	defff604 	addi	sp,sp,-40
 800e760:	dfc00915 	stw	ra,36(sp)
 800e764:	df000815 	stw	fp,32(sp)
 800e768:	df000804 	addi	fp,sp,32
 800e76c:	e13ffb15 	stw	r4,-20(fp)
 800e770:	e17ffc15 	stw	r5,-16(fp)
 800e774:	e1bffd15 	stw	r6,-12(fp)
 800e778:	e1fffe15 	stw	r7,-8(fp)
 800e77c:	e0800317 	ldw	r2,12(fp)
 800e780:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 800e784:	0089c404 	movi	r2,10000
 800e788:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 800e78c:	e0bfff03 	ldbu	r2,-4(fp)
 800e790:	10005626 	beq	r2,zero,800e8ec <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 800e794:	00002806 	br	800e838 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 800e798:	e0bffa17 	ldw	r2,-24(fp)
 800e79c:	108002a8 	cmpgeui	r2,r2,10
 800e7a0:	1000021e 	bne	r2,zero,800e7ac <alt_avalon_i2c_master_tx_rx+0x50>
 800e7a4:	0109c404 	movi	r4,10000
 800e7a8:	80100b40 	call	80100b4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 800e7ac:	d8000015 	stw	zero,0(sp)
 800e7b0:	000f883a 	mov	r7,zero
 800e7b4:	e1bffd17 	ldw	r6,-12(fp)
 800e7b8:	e17ffc17 	ldw	r5,-16(fp)
 800e7bc:	e13ffb17 	ldw	r4,-20(fp)
 800e7c0:	800eae00 	call	800eae0 <alt_avalon_i2c_master_transmit_using_interrupts>
 800e7c4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800e7c8:	e0bff917 	ldw	r2,-28(fp)
 800e7cc:	10bffea0 	cmpeqi	r2,r2,-6
 800e7d0:	1000191e 	bne	r2,zero,800e838 <alt_avalon_i2c_master_tx_rx+0xdc>
 800e7d4:	e0bff917 	ldw	r2,-28(fp)
 800e7d8:	10bffee0 	cmpeqi	r2,r2,-5
 800e7dc:	1000161e 	bne	r2,zero,800e838 <alt_avalon_i2c_master_tx_rx+0xdc>
 800e7e0:	e0bff917 	ldw	r2,-28(fp)
 800e7e4:	10bffe58 	cmpnei	r2,r2,-7
 800e7e8:	1000011e 	bne	r2,zero,800e7f0 <alt_avalon_i2c_master_tx_rx+0x94>
 800e7ec:	00001206 	br	800e838 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 800e7f0:	00800044 	movi	r2,1
 800e7f4:	d8800015 	stw	r2,0(sp)
 800e7f8:	01c00044 	movi	r7,1
 800e7fc:	e1800217 	ldw	r6,8(fp)
 800e800:	e17ffe17 	ldw	r5,-8(fp)
 800e804:	e13ffb17 	ldw	r4,-20(fp)
 800e808:	800eef40 	call	800eef4 <alt_avalon_i2c_master_receive_using_interrupts>
 800e80c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800e810:	e0bff917 	ldw	r2,-28(fp)
 800e814:	10bffea0 	cmpeqi	r2,r2,-6
 800e818:	1000061e 	bne	r2,zero,800e834 <alt_avalon_i2c_master_tx_rx+0xd8>
 800e81c:	e0bff917 	ldw	r2,-28(fp)
 800e820:	10bffee0 	cmpeqi	r2,r2,-5
 800e824:	1000031e 	bne	r2,zero,800e834 <alt_avalon_i2c_master_tx_rx+0xd8>
 800e828:	e0bff917 	ldw	r2,-28(fp)
 800e82c:	10bffe58 	cmpnei	r2,r2,-7
 800e830:	1000331e 	bne	r2,zero,800e900 <alt_avalon_i2c_master_tx_rx+0x1a4>
 800e834:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 800e838:	e0bffa17 	ldw	r2,-24(fp)
 800e83c:	10ffffc4 	addi	r3,r2,-1
 800e840:	e0fffa15 	stw	r3,-24(fp)
 800e844:	103fd41e 	bne	r2,zero,800e798 <__alt_data_end+0xff00e798>
 800e848:	00003006 	br	800e90c <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 800e84c:	e0bffa17 	ldw	r2,-24(fp)
 800e850:	108002a8 	cmpgeui	r2,r2,10
 800e854:	1000021e 	bne	r2,zero,800e860 <alt_avalon_i2c_master_tx_rx+0x104>
 800e858:	0109c404 	movi	r4,10000
 800e85c:	80100b40 	call	80100b4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 800e860:	d8000015 	stw	zero,0(sp)
 800e864:	000f883a 	mov	r7,zero
 800e868:	e1bffd17 	ldw	r6,-12(fp)
 800e86c:	e17ffc17 	ldw	r5,-16(fp)
 800e870:	e13ffb17 	ldw	r4,-20(fp)
 800e874:	800e9240 	call	800e924 <alt_avalon_i2c_master_transmit>
 800e878:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800e87c:	e0bff917 	ldw	r2,-28(fp)
 800e880:	10bffea0 	cmpeqi	r2,r2,-6
 800e884:	1000191e 	bne	r2,zero,800e8ec <alt_avalon_i2c_master_tx_rx+0x190>
 800e888:	e0bff917 	ldw	r2,-28(fp)
 800e88c:	10bffee0 	cmpeqi	r2,r2,-5
 800e890:	1000161e 	bne	r2,zero,800e8ec <alt_avalon_i2c_master_tx_rx+0x190>
 800e894:	e0bff917 	ldw	r2,-28(fp)
 800e898:	10bffe58 	cmpnei	r2,r2,-7
 800e89c:	1000011e 	bne	r2,zero,800e8a4 <alt_avalon_i2c_master_tx_rx+0x148>
 800e8a0:	00001206 	br	800e8ec <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 800e8a4:	00800044 	movi	r2,1
 800e8a8:	d8800015 	stw	r2,0(sp)
 800e8ac:	01c00044 	movi	r7,1
 800e8b0:	e1800217 	ldw	r6,8(fp)
 800e8b4:	e17ffe17 	ldw	r5,-8(fp)
 800e8b8:	e13ffb17 	ldw	r4,-20(fp)
 800e8bc:	800ece80 	call	800ece8 <alt_avalon_i2c_master_receive>
 800e8c0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 800e8c4:	e0bff917 	ldw	r2,-28(fp)
 800e8c8:	10bffea0 	cmpeqi	r2,r2,-6
 800e8cc:	1000061e 	bne	r2,zero,800e8e8 <alt_avalon_i2c_master_tx_rx+0x18c>
 800e8d0:	e0bff917 	ldw	r2,-28(fp)
 800e8d4:	10bffee0 	cmpeqi	r2,r2,-5
 800e8d8:	1000031e 	bne	r2,zero,800e8e8 <alt_avalon_i2c_master_tx_rx+0x18c>
 800e8dc:	e0bff917 	ldw	r2,-28(fp)
 800e8e0:	10bffe58 	cmpnei	r2,r2,-7
 800e8e4:	1000081e 	bne	r2,zero,800e908 <alt_avalon_i2c_master_tx_rx+0x1ac>
 800e8e8:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 800e8ec:	e0bffa17 	ldw	r2,-24(fp)
 800e8f0:	10ffffc4 	addi	r3,r2,-1
 800e8f4:	e0fffa15 	stw	r3,-24(fp)
 800e8f8:	103fd41e 	bne	r2,zero,800e84c <__alt_data_end+0xff00e84c>
 800e8fc:	00000306 	br	800e90c <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 800e900:	0001883a 	nop
 800e904:	00000106 	br	800e90c <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 800e908:	0001883a 	nop
      }
    }
    
    return status;
 800e90c:	e0bff917 	ldw	r2,-28(fp)
}                                       
 800e910:	e037883a 	mov	sp,fp
 800e914:	dfc00117 	ldw	ra,4(sp)
 800e918:	df000017 	ldw	fp,0(sp)
 800e91c:	dec00204 	addi	sp,sp,8
 800e920:	f800283a 	ret

0800e924 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 800e924:	defff704 	addi	sp,sp,-36
 800e928:	dfc00815 	stw	ra,32(sp)
 800e92c:	df000715 	stw	fp,28(sp)
 800e930:	df000704 	addi	fp,sp,28
 800e934:	e13ffb15 	stw	r4,-20(fp)
 800e938:	e17ffc15 	stw	r5,-16(fp)
 800e93c:	e1bffd15 	stw	r6,-12(fp)
 800e940:	3807883a 	mov	r3,r7
 800e944:	e0800217 	ldw	r2,8(fp)
 800e948:	e0fffe05 	stb	r3,-8(fp)
 800e94c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800e950:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 800e954:	e0bffd17 	ldw	r2,-12(fp)
 800e958:	1089c424 	muli	r2,r2,10000
 800e95c:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 800e960:	e0bffd17 	ldw	r2,-12(fp)
 800e964:	1000021e 	bne	r2,zero,800e970 <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 800e968:	0005883a 	mov	r2,zero
 800e96c:	00005706 	br	800eacc <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 800e970:	e0bffe03 	ldbu	r2,-8(fp)
 800e974:	10000a1e 	bne	r2,zero,800e9a0 <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 800e978:	e13ffb17 	ldw	r4,-20(fp)
 800e97c:	800dba80 	call	800dba8 <alt_avalon_i2c_enable>
 800e980:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 800e984:	e0bffa17 	ldw	r2,-24(fp)
 800e988:	10000226 	beq	r2,zero,800e994 <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
 800e98c:	e0bffa17 	ldw	r2,-24(fp)
 800e990:	00004e06 	br	800eacc <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800e994:	01400704 	movi	r5,28
 800e998:	e13ffb17 	ldw	r4,-20(fp)
 800e99c:	800f17c0 	call	800f17c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 800e9a0:	e0bffe03 	ldbu	r2,-8(fp)
 800e9a4:	100d883a 	mov	r6,r2
 800e9a8:	000b883a 	mov	r5,zero
 800e9ac:	e13ffb17 	ldw	r4,-20(fp)
 800e9b0:	800e2100 	call	800e210 <alt_avalon_i2c_send_address>
 800e9b4:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 800e9b8:	e0bffa17 	ldw	r2,-24(fp)
 800e9bc:	1000271e 	bne	r2,zero,800ea5c <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800e9c0:	00000f06 	br	800ea00 <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 800e9c4:	e0bffc17 	ldw	r2,-16(fp)
 800e9c8:	10800003 	ldbu	r2,0(r2)
 800e9cc:	10803fcc 	andi	r2,r2,255
 800e9d0:	000f883a 	mov	r7,zero
 800e9d4:	000d883a 	mov	r6,zero
 800e9d8:	100b883a 	mov	r5,r2
 800e9dc:	e13ffb17 	ldw	r4,-20(fp)
 800e9e0:	800e12c0 	call	800e12c <alt_avalon_i2c_cmd_write>
 800e9e4:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 800e9e8:	e0bffc17 	ldw	r2,-16(fp)
 800e9ec:	10800044 	addi	r2,r2,1
 800e9f0:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800e9f4:	e0bffd17 	ldw	r2,-12(fp)
 800e9f8:	10bfffc4 	addi	r2,r2,-1
 800e9fc:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800ea00:	e0bffd17 	ldw	r2,-12(fp)
 800ea04:	108000b0 	cmpltui	r2,r2,2
 800ea08:	1000021e 	bne	r2,zero,800ea14 <alt_avalon_i2c_master_transmit+0xf0>
 800ea0c:	e0bffa17 	ldw	r2,-24(fp)
 800ea10:	103fec26 	beq	r2,zero,800e9c4 <__alt_data_end+0xff00e9c4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 800ea14:	e0bffa17 	ldw	r2,-24(fp)
 800ea18:	1000101e 	bne	r2,zero,800ea5c <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 800ea1c:	e0bffc17 	ldw	r2,-16(fp)
 800ea20:	10800003 	ldbu	r2,0(r2)
 800ea24:	10803fcc 	andi	r2,r2,255
 800ea28:	e0ffff03 	ldbu	r3,-4(fp)
 800ea2c:	180f883a 	mov	r7,r3
 800ea30:	000d883a 	mov	r6,zero
 800ea34:	100b883a 	mov	r5,r2
 800ea38:	e13ffb17 	ldw	r4,-20(fp)
 800ea3c:	800e12c0 	call	800e12c <alt_avalon_i2c_cmd_write>
 800ea40:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 800ea44:	e0bffc17 	ldw	r2,-16(fp)
 800ea48:	10800044 	addi	r2,r2,1
 800ea4c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800ea50:	e0bffd17 	ldw	r2,-12(fp)
 800ea54:	10bfffc4 	addi	r2,r2,-1
 800ea58:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 800ea5c:	e0bfff03 	ldbu	r2,-4(fp)
 800ea60:	1000101e 	bne	r2,zero,800eaa4 <alt_avalon_i2c_master_transmit+0x180>
 800ea64:	e0bffa17 	ldw	r2,-24(fp)
 800ea68:	10001726 	beq	r2,zero,800eac8 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 800ea6c:	00000d06 	br	800eaa4 <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
 800ea70:	e0bff917 	ldw	r2,-28(fp)
 800ea74:	108002a8 	cmpgeui	r2,r2,10
 800ea78:	1000021e 	bne	r2,zero,800ea84 <alt_avalon_i2c_master_transmit+0x160>
 800ea7c:	0109c404 	movi	r4,10000
 800ea80:	80100b40 	call	80100b4 <alt_busy_sleep>
            if (--timeout == 0)
 800ea84:	e0bff917 	ldw	r2,-28(fp)
 800ea88:	10bfffc4 	addi	r2,r2,-1
 800ea8c:	e0bff915 	stw	r2,-28(fp)
 800ea90:	e0bff917 	ldw	r2,-28(fp)
 800ea94:	1000031e 	bne	r2,zero,800eaa4 <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 800ea98:	00bfff84 	movi	r2,-2
 800ea9c:	e0bffa15 	stw	r2,-24(fp)
               break;
 800eaa0:	00000306 	br	800eab0 <alt_avalon_i2c_master_transmit+0x18c>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 800eaa4:	e13ffb17 	ldw	r4,-20(fp)
 800eaa8:	800df980 	call	800df98 <alt_avalon_i2c_is_busy>
 800eaac:	103ff01e 	bne	r2,zero,800ea70 <__alt_data_end+0xff00ea70>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 800eab0:	e0bffa04 	addi	r2,fp,-24
 800eab4:	100b883a 	mov	r5,r2
 800eab8:	e13ffb17 	ldw	r4,-20(fp)
 800eabc:	800e36c0 	call	800e36c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 800eac0:	e13ffb17 	ldw	r4,-20(fp)
 800eac4:	800dc400 	call	800dc40 <alt_avalon_i2c_disable>
    }


    return status;
 800eac8:	e0bffa17 	ldw	r2,-24(fp)
}
 800eacc:	e037883a 	mov	sp,fp
 800ead0:	dfc00117 	ldw	ra,4(sp)
 800ead4:	df000017 	ldw	fp,0(sp)
 800ead8:	dec00204 	addi	sp,sp,8
 800eadc:	f800283a 	ret

0800eae0 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 800eae0:	defff604 	addi	sp,sp,-40
 800eae4:	dfc00915 	stw	ra,36(sp)
 800eae8:	df000815 	stw	fp,32(sp)
 800eaec:	df000804 	addi	fp,sp,32
 800eaf0:	e13ffb15 	stw	r4,-20(fp)
 800eaf4:	e17ffc15 	stw	r5,-16(fp)
 800eaf8:	e1bffd15 	stw	r6,-12(fp)
 800eafc:	3807883a 	mov	r3,r7
 800eb00:	e0800217 	ldw	r2,8(fp)
 800eb04:	e0fffe05 	stb	r3,-8(fp)
 800eb08:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800eb0c:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 800eb10:	e0bffd17 	ldw	r2,-12(fp)
 800eb14:	1089c424 	muli	r2,r2,10000
 800eb18:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 800eb1c:	e0bffb17 	ldw	r2,-20(fp)
 800eb20:	10800717 	ldw	r2,28(r2)
 800eb24:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 800eb28:	e0bffd17 	ldw	r2,-12(fp)
 800eb2c:	1000021e 	bne	r2,zero,800eb38 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
 800eb30:	0005883a 	mov	r2,zero
 800eb34:	00006706 	br	800ecd4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 800eb38:	e0bffb17 	ldw	r2,-20(fp)
 800eb3c:	10c00617 	ldw	r3,24(r2)
 800eb40:	00820074 	movhi	r2,2049
 800eb44:	10b60b04 	addi	r2,r2,-10196
 800eb48:	18800226 	beq	r3,r2,800eb54 <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 800eb4c:	00bfff44 	movi	r2,-3
 800eb50:	00006006 	br	800ecd4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 800eb54:	e0bffe03 	ldbu	r2,-8(fp)
 800eb58:	10000a1e 	bne	r2,zero,800eb84 <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 800eb5c:	e13ffb17 	ldw	r4,-20(fp)
 800eb60:	800dba80 	call	800dba8 <alt_avalon_i2c_enable>
 800eb64:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 800eb68:	e0bff817 	ldw	r2,-32(fp)
 800eb6c:	10000226 	beq	r2,zero,800eb78 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
 800eb70:	e0bff817 	ldw	r2,-32(fp)
 800eb74:	00005706 	br	800ecd4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800eb78:	01400704 	movi	r5,28
 800eb7c:	e13ffb17 	ldw	r4,-20(fp)
 800eb80:	800f17c0 	call	800f17c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 800eb84:	e0bffe03 	ldbu	r2,-8(fp)
 800eb88:	100d883a 	mov	r6,r2
 800eb8c:	000b883a 	mov	r5,zero
 800eb90:	e13ffb17 	ldw	r4,-20(fp)
 800eb94:	800e2100 	call	800e210 <alt_avalon_i2c_send_address>
 800eb98:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 800eb9c:	e0bff817 	ldw	r2,-32(fp)
 800eba0:	1000271e 	bne	r2,zero,800ec40 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800eba4:	00000f06 	br	800ebe4 <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 800eba8:	e0bffc17 	ldw	r2,-16(fp)
 800ebac:	10800003 	ldbu	r2,0(r2)
 800ebb0:	10803fcc 	andi	r2,r2,255
 800ebb4:	000f883a 	mov	r7,zero
 800ebb8:	000d883a 	mov	r6,zero
 800ebbc:	100b883a 	mov	r5,r2
 800ebc0:	e13ffb17 	ldw	r4,-20(fp)
 800ebc4:	800e12c0 	call	800e12c <alt_avalon_i2c_cmd_write>
 800ebc8:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 800ebcc:	e0bffc17 	ldw	r2,-16(fp)
 800ebd0:	10800044 	addi	r2,r2,1
 800ebd4:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800ebd8:	e0bffd17 	ldw	r2,-12(fp)
 800ebdc:	10bfffc4 	addi	r2,r2,-1
 800ebe0:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 800ebe4:	e0bffd17 	ldw	r2,-12(fp)
 800ebe8:	108000b0 	cmpltui	r2,r2,2
 800ebec:	1000021e 	bne	r2,zero,800ebf8 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
 800ebf0:	e0bff817 	ldw	r2,-32(fp)
 800ebf4:	103fec26 	beq	r2,zero,800eba8 <__alt_data_end+0xff00eba8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 800ebf8:	e0bff817 	ldw	r2,-32(fp)
 800ebfc:	1000101e 	bne	r2,zero,800ec40 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 800ec00:	e0bffc17 	ldw	r2,-16(fp)
 800ec04:	10800003 	ldbu	r2,0(r2)
 800ec08:	10803fcc 	andi	r2,r2,255
 800ec0c:	e0ffff03 	ldbu	r3,-4(fp)
 800ec10:	180f883a 	mov	r7,r3
 800ec14:	000d883a 	mov	r6,zero
 800ec18:	100b883a 	mov	r5,r2
 800ec1c:	e13ffb17 	ldw	r4,-20(fp)
 800ec20:	800e12c0 	call	800e12c <alt_avalon_i2c_cmd_write>
 800ec24:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 800ec28:	e0bffc17 	ldw	r2,-16(fp)
 800ec2c:	10800044 	addi	r2,r2,1
 800ec30:	e0bffc15 	stw	r2,-16(fp)
            --size;
 800ec34:	e0bffd17 	ldw	r2,-12(fp)
 800ec38:	10bfffc4 	addi	r2,r2,-1
 800ec3c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 800ec40:	e0bff817 	ldw	r2,-32(fp)
 800ec44:	10001426 	beq	r2,zero,800ec98 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 800ec48:	00000d06 	br	800ec80 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 800ec4c:	e0bff917 	ldw	r2,-28(fp)
 800ec50:	108002a8 	cmpgeui	r2,r2,10
 800ec54:	1000021e 	bne	r2,zero,800ec60 <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
 800ec58:	0109c404 	movi	r4,10000
 800ec5c:	80100b40 	call	80100b4 <alt_busy_sleep>
            if (--timeout == 0)
 800ec60:	e0bff917 	ldw	r2,-28(fp)
 800ec64:	10bfffc4 	addi	r2,r2,-1
 800ec68:	e0bff915 	stw	r2,-28(fp)
 800ec6c:	e0bff917 	ldw	r2,-28(fp)
 800ec70:	1000031e 	bne	r2,zero,800ec80 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 800ec74:	00bfff84 	movi	r2,-2
 800ec78:	e0bff815 	stw	r2,-32(fp)
               break;
 800ec7c:	00000306 	br	800ec8c <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 800ec80:	e13ffb17 	ldw	r4,-20(fp)
 800ec84:	800df980 	call	800df98 <alt_avalon_i2c_is_busy>
 800ec88:	103ff01e 	bne	r2,zero,800ec4c <__alt_data_end+0xff00ec4c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 800ec8c:	e13ffb17 	ldw	r4,-20(fp)
 800ec90:	800dc400 	call	800dc40 <alt_avalon_i2c_disable>
 800ec94:	00000e06 	br	800ecd0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
 800ec98:	e0bfff03 	ldbu	r2,-4(fp)
 800ec9c:	10000c26 	beq	r2,zero,800ecd0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800eca0:	01400704 	movi	r5,28
 800eca4:	e13ffb17 	ldw	r4,-20(fp)
 800eca8:	800f17c0 	call	800f17c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 800ecac:	000b883a 	mov	r5,zero
 800ecb0:	e13ffb17 	ldw	r4,-20(fp)
 800ecb4:	800f3c40 	call	800f3c4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 800ecb8:	e0bffa17 	ldw	r2,-24(fp)
 800ecbc:	00c00044 	movi	r3,1
 800ecc0:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 800ecc4:	01400044 	movi	r5,1
 800ecc8:	e13ffb17 	ldw	r4,-20(fp)
 800eccc:	800f2200 	call	800f220 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 800ecd0:	e0bff817 	ldw	r2,-32(fp)
}
 800ecd4:	e037883a 	mov	sp,fp
 800ecd8:	dfc00117 	ldw	ra,4(sp)
 800ecdc:	df000017 	ldw	fp,0(sp)
 800ece0:	dec00204 	addi	sp,sp,8
 800ece4:	f800283a 	ret

0800ece8 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 800ece8:	defff404 	addi	sp,sp,-48
 800ecec:	dfc00b15 	stw	ra,44(sp)
 800ecf0:	df000a15 	stw	fp,40(sp)
 800ecf4:	df000a04 	addi	fp,sp,40
 800ecf8:	e13ffb15 	stw	r4,-20(fp)
 800ecfc:	e17ffc15 	stw	r5,-16(fp)
 800ed00:	e1bffd15 	stw	r6,-12(fp)
 800ed04:	3807883a 	mov	r3,r7
 800ed08:	e0800217 	ldw	r2,8(fp)
 800ed0c:	e0fffe05 	stb	r3,-8(fp)
 800ed10:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800ed14:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 800ed18:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 800ed1c:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 800ed20:	e0bffd17 	ldw	r2,-12(fp)
 800ed24:	1000021e 	bne	r2,zero,800ed30 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 800ed28:	0005883a 	mov	r2,zero
 800ed2c:	00006c06 	br	800eee0 <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 800ed30:	e0bffe03 	ldbu	r2,-8(fp)
 800ed34:	10000a1e 	bne	r2,zero,800ed60 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 800ed38:	e13ffb17 	ldw	r4,-20(fp)
 800ed3c:	800dba80 	call	800dba8 <alt_avalon_i2c_enable>
 800ed40:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 800ed44:	e0bff917 	ldw	r2,-28(fp)
 800ed48:	10000226 	beq	r2,zero,800ed54 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 800ed4c:	e0bff917 	ldw	r2,-28(fp)
 800ed50:	00006306 	br	800eee0 <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800ed54:	01400704 	movi	r5,28
 800ed58:	e13ffb17 	ldw	r4,-20(fp)
 800ed5c:	800f17c0 	call	800f17c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 800ed60:	e0bffe03 	ldbu	r2,-8(fp)
 800ed64:	100d883a 	mov	r6,r2
 800ed68:	01400044 	movi	r5,1
 800ed6c:	e13ffb17 	ldw	r4,-20(fp)
 800ed70:	800e2100 	call	800e210 <alt_avalon_i2c_send_address>
 800ed74:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 800ed78:	e0bff917 	ldw	r2,-28(fp)
 800ed7c:	1000341e 	bne	r2,zero,800ee50 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 800ed80:	00001906 	br	800ede8 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 800ed84:	000f883a 	mov	r7,zero
 800ed88:	000d883a 	mov	r6,zero
 800ed8c:	000b883a 	mov	r5,zero
 800ed90:	e13ffb17 	ldw	r4,-20(fp)
 800ed94:	800e12c0 	call	800e12c <alt_avalon_i2c_cmd_write>
 800ed98:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 800ed9c:	e0bff817 	ldw	r2,-32(fp)
 800eda0:	10800044 	addi	r2,r2,1
 800eda4:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 800eda8:	e0bff917 	ldw	r2,-28(fp)
 800edac:	10000e1e 	bne	r2,zero,800ede8 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 800edb0:	e0bffa04 	addi	r2,fp,-24
 800edb4:	100f883a 	mov	r7,r2
 800edb8:	000d883a 	mov	r6,zero
 800edbc:	e17ffc17 	ldw	r5,-16(fp)
 800edc0:	e13ffb17 	ldw	r4,-20(fp)
 800edc4:	800dfdc0 	call	800dfdc <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 800edc8:	e0bffa17 	ldw	r2,-24(fp)
 800edcc:	e0fffc17 	ldw	r3,-16(fp)
 800edd0:	1885883a 	add	r2,r3,r2
 800edd4:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 800edd8:	e0bffa17 	ldw	r2,-24(fp)
 800eddc:	e0fff717 	ldw	r3,-36(fp)
 800ede0:	1885883a 	add	r2,r3,r2
 800ede4:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 800ede8:	e0bffd17 	ldw	r2,-12(fp)
 800edec:	10bfffc4 	addi	r2,r2,-1
 800edf0:	e0fff817 	ldw	r3,-32(fp)
 800edf4:	1880022e 	bgeu	r3,r2,800ee00 <alt_avalon_i2c_master_receive+0x118>
 800edf8:	e0bff917 	ldw	r2,-28(fp)
 800edfc:	103fe126 	beq	r2,zero,800ed84 <__alt_data_end+0xff00ed84>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 800ee00:	e0bff917 	ldw	r2,-28(fp)
 800ee04:	1000121e 	bne	r2,zero,800ee50 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 800ee08:	e0bfff03 	ldbu	r2,-4(fp)
 800ee0c:	100f883a 	mov	r7,r2
 800ee10:	000d883a 	mov	r6,zero
 800ee14:	000b883a 	mov	r5,zero
 800ee18:	e13ffb17 	ldw	r4,-20(fp)
 800ee1c:	800e12c0 	call	800e12c <alt_avalon_i2c_cmd_write>
 800ee20:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 800ee24:	00000a06 	br	800ee50 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 800ee28:	e17ffc17 	ldw	r5,-16(fp)
 800ee2c:	e13ffb17 	ldw	r4,-20(fp)
 800ee30:	800e0840 	call	800e084 <alt_avalon_i2c_rx_read>
 800ee34:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 800ee38:	e0bffc17 	ldw	r2,-16(fp)
 800ee3c:	10800044 	addi	r2,r2,1
 800ee40:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 800ee44:	e0bff717 	ldw	r2,-36(fp)
 800ee48:	10800044 	addi	r2,r2,1
 800ee4c:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 800ee50:	e0fff717 	ldw	r3,-36(fp)
 800ee54:	e0bffd17 	ldw	r2,-12(fp)
 800ee58:	1880022e 	bgeu	r3,r2,800ee64 <alt_avalon_i2c_master_receive+0x17c>
 800ee5c:	e0bff917 	ldw	r2,-28(fp)
 800ee60:	103ff126 	beq	r2,zero,800ee28 <__alt_data_end+0xff00ee28>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 800ee64:	e0bfff03 	ldbu	r2,-4(fp)
 800ee68:	1000021e 	bne	r2,zero,800ee74 <alt_avalon_i2c_master_receive+0x18c>
 800ee6c:	e0bff917 	ldw	r2,-28(fp)
 800ee70:	10001a26 	beq	r2,zero,800eedc <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
 800ee74:	e0bffd17 	ldw	r2,-12(fp)
 800ee78:	1089c424 	muli	r2,r2,10000
 800ee7c:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800ee80:	00000d06 	br	800eeb8 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
 800ee84:	e0bff617 	ldw	r2,-40(fp)
 800ee88:	108002a8 	cmpgeui	r2,r2,10
 800ee8c:	1000021e 	bne	r2,zero,800ee98 <alt_avalon_i2c_master_receive+0x1b0>
 800ee90:	0109c404 	movi	r4,10000
 800ee94:	80100b40 	call	80100b4 <alt_busy_sleep>
            if (--timeout == 0)
 800ee98:	e0bff617 	ldw	r2,-40(fp)
 800ee9c:	10bfffc4 	addi	r2,r2,-1
 800eea0:	e0bff615 	stw	r2,-40(fp)
 800eea4:	e0bff617 	ldw	r2,-40(fp)
 800eea8:	1000031e 	bne	r2,zero,800eeb8 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 800eeac:	00bfff84 	movi	r2,-2
 800eeb0:	e0bff915 	stw	r2,-28(fp)
               break;
 800eeb4:	00000306 	br	800eec4 <alt_avalon_i2c_master_receive+0x1dc>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800eeb8:	e13ffb17 	ldw	r4,-20(fp)
 800eebc:	800df980 	call	800df98 <alt_avalon_i2c_is_busy>
 800eec0:	103ff01e 	bne	r2,zero,800ee84 <__alt_data_end+0xff00ee84>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 800eec4:	e0bff904 	addi	r2,fp,-28
 800eec8:	100b883a 	mov	r5,r2
 800eecc:	e13ffb17 	ldw	r4,-20(fp)
 800eed0:	800e36c0 	call	800e36c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 800eed4:	e13ffb17 	ldw	r4,-20(fp)
 800eed8:	800dc400 	call	800dc40 <alt_avalon_i2c_disable>
    }

    return status;
 800eedc:	e0bff917 	ldw	r2,-28(fp)
}
 800eee0:	e037883a 	mov	sp,fp
 800eee4:	dfc00117 	ldw	ra,4(sp)
 800eee8:	df000017 	ldw	fp,0(sp)
 800eeec:	dec00204 	addi	sp,sp,8
 800eef0:	f800283a 	ret

0800eef4 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 800eef4:	defff504 	addi	sp,sp,-44
 800eef8:	dfc00a15 	stw	ra,40(sp)
 800eefc:	df000915 	stw	fp,36(sp)
 800ef00:	df000904 	addi	fp,sp,36
 800ef04:	e13ffb15 	stw	r4,-20(fp)
 800ef08:	e17ffc15 	stw	r5,-16(fp)
 800ef0c:	e1bffd15 	stw	r6,-12(fp)
 800ef10:	3807883a 	mov	r3,r7
 800ef14:	e0800217 	ldw	r2,8(fp)
 800ef18:	e0fffe05 	stb	r3,-8(fp)
 800ef1c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 800ef20:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 800ef24:	e0bffb17 	ldw	r2,-20(fp)
 800ef28:	10800717 	ldw	r2,28(r2)
 800ef2c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 800ef30:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 800ef34:	e0bffd17 	ldw	r2,-12(fp)
 800ef38:	1000021e 	bne	r2,zero,800ef44 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 800ef3c:	0005883a 	mov	r2,zero
 800ef40:	00006206 	br	800f0cc <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 800ef44:	e0bffb17 	ldw	r2,-20(fp)
 800ef48:	10c00617 	ldw	r3,24(r2)
 800ef4c:	00820074 	movhi	r2,2049
 800ef50:	10b60b04 	addi	r2,r2,-10196
 800ef54:	18800226 	beq	r3,r2,800ef60 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 800ef58:	00bfff44 	movi	r2,-3
 800ef5c:	00005b06 	br	800f0cc <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 800ef60:	e0bffe03 	ldbu	r2,-8(fp)
 800ef64:	10000a1e 	bne	r2,zero,800ef90 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 800ef68:	e13ffb17 	ldw	r4,-20(fp)
 800ef6c:	800dba80 	call	800dba8 <alt_avalon_i2c_enable>
 800ef70:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 800ef74:	e0bff717 	ldw	r2,-36(fp)
 800ef78:	10000226 	beq	r2,zero,800ef84 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 800ef7c:	e0bff717 	ldw	r2,-36(fp)
 800ef80:	00005206 	br	800f0cc <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800ef84:	01400704 	movi	r5,28
 800ef88:	e13ffb17 	ldw	r4,-20(fp)
 800ef8c:	800f17c0 	call	800f17c <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 800ef90:	e0bffe03 	ldbu	r2,-8(fp)
 800ef94:	100d883a 	mov	r6,r2
 800ef98:	01400044 	movi	r5,1
 800ef9c:	e13ffb17 	ldw	r4,-20(fp)
 800efa0:	800e2100 	call	800e210 <alt_avalon_i2c_send_address>
 800efa4:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 800efa8:	e0bff717 	ldw	r2,-36(fp)
 800efac:	1000191e 	bne	r2,zero,800f014 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 800efb0:	00000906 	br	800efd8 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 800efb4:	000f883a 	mov	r7,zero
 800efb8:	000d883a 	mov	r6,zero
 800efbc:	000b883a 	mov	r5,zero
 800efc0:	e13ffb17 	ldw	r4,-20(fp)
 800efc4:	800e12c0 	call	800e12c <alt_avalon_i2c_cmd_write>
 800efc8:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 800efcc:	e0bff917 	ldw	r2,-28(fp)
 800efd0:	10800044 	addi	r2,r2,1
 800efd4:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 800efd8:	e0bffd17 	ldw	r2,-12(fp)
 800efdc:	10bfffc4 	addi	r2,r2,-1
 800efe0:	e0fff917 	ldw	r3,-28(fp)
 800efe4:	1880022e 	bgeu	r3,r2,800eff0 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 800efe8:	e0bff717 	ldw	r2,-36(fp)
 800efec:	103ff126 	beq	r2,zero,800efb4 <__alt_data_end+0xff00efb4>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 800eff0:	e0bff717 	ldw	r2,-36(fp)
 800eff4:	1000071e 	bne	r2,zero,800f014 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 800eff8:	e0bfff03 	ldbu	r2,-4(fp)
 800effc:	100f883a 	mov	r7,r2
 800f000:	000d883a 	mov	r6,zero
 800f004:	000b883a 	mov	r5,zero
 800f008:	e13ffb17 	ldw	r4,-20(fp)
 800f00c:	800e12c0 	call	800e12c <alt_avalon_i2c_cmd_write>
 800f010:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 800f014:	e0bff717 	ldw	r2,-36(fp)
 800f018:	10001726 	beq	r2,zero,800f078 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
 800f01c:	e0bffd17 	ldw	r2,-12(fp)
 800f020:	1089c424 	muli	r2,r2,10000
 800f024:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800f028:	00000d06 	br	800f060 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
 800f02c:	e0bff817 	ldw	r2,-32(fp)
 800f030:	108002a8 	cmpgeui	r2,r2,10
 800f034:	1000021e 	bne	r2,zero,800f040 <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
 800f038:	0109c404 	movi	r4,10000
 800f03c:	80100b40 	call	80100b4 <alt_busy_sleep>
            if (--timeout == 0)
 800f040:	e0bff817 	ldw	r2,-32(fp)
 800f044:	10bfffc4 	addi	r2,r2,-1
 800f048:	e0bff815 	stw	r2,-32(fp)
 800f04c:	e0bff817 	ldw	r2,-32(fp)
 800f050:	1000031e 	bne	r2,zero,800f060 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 800f054:	00bfff84 	movi	r2,-2
 800f058:	e0bff715 	stw	r2,-36(fp)
               break;
 800f05c:	00000306 	br	800f06c <alt_avalon_i2c_master_receive_using_interrupts+0x178>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 800f060:	e13ffb17 	ldw	r4,-20(fp)
 800f064:	800df980 	call	800df98 <alt_avalon_i2c_is_busy>
 800f068:	103ff01e 	bne	r2,zero,800f02c <__alt_data_end+0xff00f02c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 800f06c:	e13ffb17 	ldw	r4,-20(fp)
 800f070:	800dc400 	call	800dc40 <alt_avalon_i2c_disable>
 800f074:	00001406 	br	800f0c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
 800f078:	e0bfff03 	ldbu	r2,-4(fp)
 800f07c:	10001226 	beq	r2,zero,800f0c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 800f080:	01400704 	movi	r5,28
 800f084:	e13ffb17 	ldw	r4,-20(fp)
 800f088:	800f17c0 	call	800f17c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 800f08c:	000b883a 	mov	r5,zero
 800f090:	e13ffb17 	ldw	r4,-20(fp)
 800f094:	800f3140 	call	800f314 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 800f098:	e0bffa17 	ldw	r2,-24(fp)
 800f09c:	00c00084 	movi	r3,2
 800f0a0:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 800f0a4:	e0bffa17 	ldw	r2,-24(fp)
 800f0a8:	e0fffc17 	ldw	r3,-16(fp)
 800f0ac:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 800f0b0:	e0bffa17 	ldw	r2,-24(fp)
 800f0b4:	e0fffd17 	ldw	r3,-12(fp)
 800f0b8:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 800f0bc:	01400084 	movi	r5,2
 800f0c0:	e13ffb17 	ldw	r4,-20(fp)
 800f0c4:	800f2200 	call	800f220 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 800f0c8:	e0bff717 	ldw	r2,-36(fp)
}
 800f0cc:	e037883a 	mov	sp,fp
 800f0d0:	dfc00117 	ldw	ra,4(sp)
 800f0d4:	df000017 	ldw	fp,0(sp)
 800f0d8:	dec00204 	addi	sp,sp,8
 800f0dc:	f800283a 	ret

0800f0e0 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 800f0e0:	defffd04 	addi	sp,sp,-12
 800f0e4:	df000215 	stw	fp,8(sp)
 800f0e8:	df000204 	addi	fp,sp,8
 800f0ec:	e13ffe15 	stw	r4,-8(fp)
 800f0f0:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 800f0f4:	e0bffe17 	ldw	r2,-8(fp)
 800f0f8:	10800317 	ldw	r2,12(r2)
 800f0fc:	10800404 	addi	r2,r2,16
 800f100:	10c00037 	ldwio	r3,0(r2)
 800f104:	e0bffe17 	ldw	r2,-8(fp)
 800f108:	10800317 	ldw	r2,12(r2)
 800f10c:	10800304 	addi	r2,r2,12
 800f110:	10800037 	ldwio	r2,0(r2)
 800f114:	1884703a 	and	r2,r3,r2
 800f118:	1007883a 	mov	r3,r2
 800f11c:	e0bfff17 	ldw	r2,-4(fp)
 800f120:	10c00015 	stw	r3,0(r2)
}
 800f124:	0001883a 	nop
 800f128:	e037883a 	mov	sp,fp
 800f12c:	df000017 	ldw	fp,0(sp)
 800f130:	dec00104 	addi	sp,sp,4
 800f134:	f800283a 	ret

0800f138 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 800f138:	defffd04 	addi	sp,sp,-12
 800f13c:	df000215 	stw	fp,8(sp)
 800f140:	df000204 	addi	fp,sp,8
 800f144:	e13ffe15 	stw	r4,-8(fp)
 800f148:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 800f14c:	e0bffe17 	ldw	r2,-8(fp)
 800f150:	10800317 	ldw	r2,12(r2)
 800f154:	10800404 	addi	r2,r2,16
 800f158:	10800037 	ldwio	r2,0(r2)
 800f15c:	1007883a 	mov	r3,r2
 800f160:	e0bfff17 	ldw	r2,-4(fp)
 800f164:	10c00015 	stw	r3,0(r2)
}
 800f168:	0001883a 	nop
 800f16c:	e037883a 	mov	sp,fp
 800f170:	df000017 	ldw	fp,0(sp)
 800f174:	dec00104 	addi	sp,sp,4
 800f178:	f800283a 	ret

0800f17c <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 800f17c:	defffd04 	addi	sp,sp,-12
 800f180:	df000215 	stw	fp,8(sp)
 800f184:	df000204 	addi	fp,sp,8
 800f188:	e13ffe15 	stw	r4,-8(fp)
 800f18c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 800f190:	e0bffe17 	ldw	r2,-8(fp)
 800f194:	10800317 	ldw	r2,12(r2)
 800f198:	10800404 	addi	r2,r2,16
 800f19c:	e0ffff17 	ldw	r3,-4(fp)
 800f1a0:	10c00035 	stwio	r3,0(r2)
}
 800f1a4:	0001883a 	nop
 800f1a8:	e037883a 	mov	sp,fp
 800f1ac:	df000017 	ldw	fp,0(sp)
 800f1b0:	dec00104 	addi	sp,sp,4
 800f1b4:	f800283a 	ret

0800f1b8 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 800f1b8:	defffb04 	addi	sp,sp,-20
 800f1bc:	dfc00415 	stw	ra,16(sp)
 800f1c0:	df000315 	stw	fp,12(sp)
 800f1c4:	df000304 	addi	fp,sp,12
 800f1c8:	e13ffe15 	stw	r4,-8(fp)
 800f1cc:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 800f1d0:	e17ffd04 	addi	r5,fp,-12
 800f1d4:	e13ffe17 	ldw	r4,-8(fp)
 800f1d8:	800f2840 	call	800f284 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 800f1dc:	e0bfff17 	ldw	r2,-4(fp)
 800f1e0:	0086303a 	nor	r3,zero,r2
 800f1e4:	e0bffd17 	ldw	r2,-12(fp)
 800f1e8:	1884703a 	and	r2,r3,r2
 800f1ec:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 800f1f0:	e0bffe17 	ldw	r2,-8(fp)
 800f1f4:	10800317 	ldw	r2,12(r2)
 800f1f8:	10800304 	addi	r2,r2,12
 800f1fc:	e0fffd17 	ldw	r3,-12(fp)
 800f200:	18c007cc 	andi	r3,r3,31
 800f204:	10c00035 	stwio	r3,0(r2)
}
 800f208:	0001883a 	nop
 800f20c:	e037883a 	mov	sp,fp
 800f210:	dfc00117 	ldw	ra,4(sp)
 800f214:	df000017 	ldw	fp,0(sp)
 800f218:	dec00204 	addi	sp,sp,8
 800f21c:	f800283a 	ret

0800f220 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 800f220:	defffb04 	addi	sp,sp,-20
 800f224:	dfc00415 	stw	ra,16(sp)
 800f228:	df000315 	stw	fp,12(sp)
 800f22c:	df000304 	addi	fp,sp,12
 800f230:	e13ffe15 	stw	r4,-8(fp)
 800f234:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 800f238:	e17ffd04 	addi	r5,fp,-12
 800f23c:	e13ffe17 	ldw	r4,-8(fp)
 800f240:	800f2840 	call	800f284 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 800f244:	e0fffd17 	ldw	r3,-12(fp)
 800f248:	e0bfff17 	ldw	r2,-4(fp)
 800f24c:	1884b03a 	or	r2,r3,r2
 800f250:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 800f254:	e0bffe17 	ldw	r2,-8(fp)
 800f258:	10800317 	ldw	r2,12(r2)
 800f25c:	10800304 	addi	r2,r2,12
 800f260:	e0fffd17 	ldw	r3,-12(fp)
 800f264:	18c007cc 	andi	r3,r3,31
 800f268:	10c00035 	stwio	r3,0(r2)
}
 800f26c:	0001883a 	nop
 800f270:	e037883a 	mov	sp,fp
 800f274:	dfc00117 	ldw	ra,4(sp)
 800f278:	df000017 	ldw	fp,0(sp)
 800f27c:	dec00204 	addi	sp,sp,8
 800f280:	f800283a 	ret

0800f284 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 800f284:	defffd04 	addi	sp,sp,-12
 800f288:	df000215 	stw	fp,8(sp)
 800f28c:	df000204 	addi	fp,sp,8
 800f290:	e13ffe15 	stw	r4,-8(fp)
 800f294:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 800f298:	e0bffe17 	ldw	r2,-8(fp)
 800f29c:	10800317 	ldw	r2,12(r2)
 800f2a0:	10800304 	addi	r2,r2,12
 800f2a4:	10800037 	ldwio	r2,0(r2)
 800f2a8:	10c007cc 	andi	r3,r2,31
 800f2ac:	e0bfff17 	ldw	r2,-4(fp)
 800f2b0:	10c00015 	stw	r3,0(r2)
}
 800f2b4:	0001883a 	nop
 800f2b8:	e037883a 	mov	sp,fp
 800f2bc:	df000017 	ldw	fp,0(sp)
 800f2c0:	dec00104 	addi	sp,sp,4
 800f2c4:	f800283a 	ret

0800f2c8 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 800f2c8:	defffd04 	addi	sp,sp,-12
 800f2cc:	df000215 	stw	fp,8(sp)
 800f2d0:	df000204 	addi	fp,sp,8
 800f2d4:	e13ffe15 	stw	r4,-8(fp)
 800f2d8:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 800f2dc:	e0bffe17 	ldw	r2,-8(fp)
 800f2e0:	10800317 	ldw	r2,12(r2)
 800f2e4:	10800204 	addi	r2,r2,8
 800f2e8:	10800037 	ldwio	r2,0(r2)
 800f2ec:	10800c0c 	andi	r2,r2,48
 800f2f0:	1005d13a 	srai	r2,r2,4
 800f2f4:	1007883a 	mov	r3,r2
 800f2f8:	e0bfff17 	ldw	r2,-4(fp)
 800f2fc:	10c00015 	stw	r3,0(r2)
}
 800f300:	0001883a 	nop
 800f304:	e037883a 	mov	sp,fp
 800f308:	df000017 	ldw	fp,0(sp)
 800f30c:	dec00104 	addi	sp,sp,4
 800f310:	f800283a 	ret

0800f314 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 800f314:	defffd04 	addi	sp,sp,-12
 800f318:	df000215 	stw	fp,8(sp)
 800f31c:	df000204 	addi	fp,sp,8
 800f320:	e13ffe15 	stw	r4,-8(fp)
 800f324:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 800f328:	e0bffe17 	ldw	r2,-8(fp)
 800f32c:	10800317 	ldw	r2,12(r2)
 800f330:	10800204 	addi	r2,r2,8
 800f334:	e0fffe17 	ldw	r3,-8(fp)
 800f338:	18c00317 	ldw	r3,12(r3)
 800f33c:	18c00204 	addi	r3,r3,8
 800f340:	18c00037 	ldwio	r3,0(r3)
 800f344:	1809883a 	mov	r4,r3
 800f348:	00fff3c4 	movi	r3,-49
 800f34c:	20c8703a 	and	r4,r4,r3
 800f350:	e0ffff17 	ldw	r3,-4(fp)
 800f354:	1806913a 	slli	r3,r3,4
 800f358:	18c00c0c 	andi	r3,r3,48
 800f35c:	20c6b03a 	or	r3,r4,r3
 800f360:	10c00035 	stwio	r3,0(r2)
}
 800f364:	0001883a 	nop
 800f368:	e037883a 	mov	sp,fp
 800f36c:	df000017 	ldw	fp,0(sp)
 800f370:	dec00104 	addi	sp,sp,4
 800f374:	f800283a 	ret

0800f378 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 800f378:	defffd04 	addi	sp,sp,-12
 800f37c:	df000215 	stw	fp,8(sp)
 800f380:	df000204 	addi	fp,sp,8
 800f384:	e13ffe15 	stw	r4,-8(fp)
 800f388:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 800f38c:	e0bffe17 	ldw	r2,-8(fp)
 800f390:	10800317 	ldw	r2,12(r2)
 800f394:	10800204 	addi	r2,r2,8
 800f398:	10800037 	ldwio	r2,0(r2)
 800f39c:	1080030c 	andi	r2,r2,12
 800f3a0:	1005d0ba 	srai	r2,r2,2
 800f3a4:	1007883a 	mov	r3,r2
 800f3a8:	e0bfff17 	ldw	r2,-4(fp)
 800f3ac:	10c00015 	stw	r3,0(r2)
}
 800f3b0:	0001883a 	nop
 800f3b4:	e037883a 	mov	sp,fp
 800f3b8:	df000017 	ldw	fp,0(sp)
 800f3bc:	dec00104 	addi	sp,sp,4
 800f3c0:	f800283a 	ret

0800f3c4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 800f3c4:	defffd04 	addi	sp,sp,-12
 800f3c8:	df000215 	stw	fp,8(sp)
 800f3cc:	df000204 	addi	fp,sp,8
 800f3d0:	e13ffe15 	stw	r4,-8(fp)
 800f3d4:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 800f3d8:	e0bffe17 	ldw	r2,-8(fp)
 800f3dc:	10800317 	ldw	r2,12(r2)
 800f3e0:	10c00204 	addi	r3,r2,8
 800f3e4:	e0bffe17 	ldw	r2,-8(fp)
 800f3e8:	10800317 	ldw	r2,12(r2)
 800f3ec:	10800204 	addi	r2,r2,8
 800f3f0:	10800037 	ldwio	r2,0(r2)
 800f3f4:	1009883a 	mov	r4,r2
 800f3f8:	00bffcc4 	movi	r2,-13
 800f3fc:	2088703a 	and	r4,r4,r2
 800f400:	e0bfff17 	ldw	r2,-4(fp)
 800f404:	1085883a 	add	r2,r2,r2
 800f408:	1085883a 	add	r2,r2,r2
 800f40c:	1080030c 	andi	r2,r2,12
 800f410:	2084b03a 	or	r2,r4,r2
 800f414:	18800035 	stwio	r2,0(r3)
}
 800f418:	0001883a 	nop
 800f41c:	e037883a 	mov	sp,fp
 800f420:	df000017 	ldw	fp,0(sp)
 800f424:	dec00104 	addi	sp,sp,4
 800f428:	f800283a 	ret

0800f42c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800f42c:	defffa04 	addi	sp,sp,-24
 800f430:	dfc00515 	stw	ra,20(sp)
 800f434:	df000415 	stw	fp,16(sp)
 800f438:	df000404 	addi	fp,sp,16
 800f43c:	e13ffd15 	stw	r4,-12(fp)
 800f440:	e17ffe15 	stw	r5,-8(fp)
 800f444:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f448:	e0bffd17 	ldw	r2,-12(fp)
 800f44c:	10800017 	ldw	r2,0(r2)
 800f450:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800f454:	e0bffc17 	ldw	r2,-16(fp)
 800f458:	10c00a04 	addi	r3,r2,40
 800f45c:	e0bffd17 	ldw	r2,-12(fp)
 800f460:	10800217 	ldw	r2,8(r2)
 800f464:	100f883a 	mov	r7,r2
 800f468:	e1bfff17 	ldw	r6,-4(fp)
 800f46c:	e17ffe17 	ldw	r5,-8(fp)
 800f470:	1809883a 	mov	r4,r3
 800f474:	800fa540 	call	800fa54 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800f478:	e037883a 	mov	sp,fp
 800f47c:	dfc00117 	ldw	ra,4(sp)
 800f480:	df000017 	ldw	fp,0(sp)
 800f484:	dec00204 	addi	sp,sp,8
 800f488:	f800283a 	ret

0800f48c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800f48c:	defffa04 	addi	sp,sp,-24
 800f490:	dfc00515 	stw	ra,20(sp)
 800f494:	df000415 	stw	fp,16(sp)
 800f498:	df000404 	addi	fp,sp,16
 800f49c:	e13ffd15 	stw	r4,-12(fp)
 800f4a0:	e17ffe15 	stw	r5,-8(fp)
 800f4a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f4a8:	e0bffd17 	ldw	r2,-12(fp)
 800f4ac:	10800017 	ldw	r2,0(r2)
 800f4b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800f4b4:	e0bffc17 	ldw	r2,-16(fp)
 800f4b8:	10c00a04 	addi	r3,r2,40
 800f4bc:	e0bffd17 	ldw	r2,-12(fp)
 800f4c0:	10800217 	ldw	r2,8(r2)
 800f4c4:	100f883a 	mov	r7,r2
 800f4c8:	e1bfff17 	ldw	r6,-4(fp)
 800f4cc:	e17ffe17 	ldw	r5,-8(fp)
 800f4d0:	1809883a 	mov	r4,r3
 800f4d4:	800fc700 	call	800fc70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800f4d8:	e037883a 	mov	sp,fp
 800f4dc:	dfc00117 	ldw	ra,4(sp)
 800f4e0:	df000017 	ldw	fp,0(sp)
 800f4e4:	dec00204 	addi	sp,sp,8
 800f4e8:	f800283a 	ret

0800f4ec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800f4ec:	defffc04 	addi	sp,sp,-16
 800f4f0:	dfc00315 	stw	ra,12(sp)
 800f4f4:	df000215 	stw	fp,8(sp)
 800f4f8:	df000204 	addi	fp,sp,8
 800f4fc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f500:	e0bfff17 	ldw	r2,-4(fp)
 800f504:	10800017 	ldw	r2,0(r2)
 800f508:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800f50c:	e0bffe17 	ldw	r2,-8(fp)
 800f510:	10c00a04 	addi	r3,r2,40
 800f514:	e0bfff17 	ldw	r2,-4(fp)
 800f518:	10800217 	ldw	r2,8(r2)
 800f51c:	100b883a 	mov	r5,r2
 800f520:	1809883a 	mov	r4,r3
 800f524:	800f8fc0 	call	800f8fc <altera_avalon_jtag_uart_close>
}
 800f528:	e037883a 	mov	sp,fp
 800f52c:	dfc00117 	ldw	ra,4(sp)
 800f530:	df000017 	ldw	fp,0(sp)
 800f534:	dec00204 	addi	sp,sp,8
 800f538:	f800283a 	ret

0800f53c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800f53c:	defffa04 	addi	sp,sp,-24
 800f540:	dfc00515 	stw	ra,20(sp)
 800f544:	df000415 	stw	fp,16(sp)
 800f548:	df000404 	addi	fp,sp,16
 800f54c:	e13ffd15 	stw	r4,-12(fp)
 800f550:	e17ffe15 	stw	r5,-8(fp)
 800f554:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800f558:	e0bffd17 	ldw	r2,-12(fp)
 800f55c:	10800017 	ldw	r2,0(r2)
 800f560:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800f564:	e0bffc17 	ldw	r2,-16(fp)
 800f568:	10800a04 	addi	r2,r2,40
 800f56c:	e1bfff17 	ldw	r6,-4(fp)
 800f570:	e17ffe17 	ldw	r5,-8(fp)
 800f574:	1009883a 	mov	r4,r2
 800f578:	800f9640 	call	800f964 <altera_avalon_jtag_uart_ioctl>
}
 800f57c:	e037883a 	mov	sp,fp
 800f580:	dfc00117 	ldw	ra,4(sp)
 800f584:	df000017 	ldw	fp,0(sp)
 800f588:	dec00204 	addi	sp,sp,8
 800f58c:	f800283a 	ret

0800f590 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800f590:	defffa04 	addi	sp,sp,-24
 800f594:	dfc00515 	stw	ra,20(sp)
 800f598:	df000415 	stw	fp,16(sp)
 800f59c:	df000404 	addi	fp,sp,16
 800f5a0:	e13ffd15 	stw	r4,-12(fp)
 800f5a4:	e17ffe15 	stw	r5,-8(fp)
 800f5a8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f5ac:	e0bffd17 	ldw	r2,-12(fp)
 800f5b0:	00c00044 	movi	r3,1
 800f5b4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800f5b8:	e0bffd17 	ldw	r2,-12(fp)
 800f5bc:	10800017 	ldw	r2,0(r2)
 800f5c0:	10800104 	addi	r2,r2,4
 800f5c4:	1007883a 	mov	r3,r2
 800f5c8:	e0bffd17 	ldw	r2,-12(fp)
 800f5cc:	10800817 	ldw	r2,32(r2)
 800f5d0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800f5d4:	e0bffe17 	ldw	r2,-8(fp)
 800f5d8:	e0ffff17 	ldw	r3,-4(fp)
 800f5dc:	d8000015 	stw	zero,0(sp)
 800f5e0:	e1fffd17 	ldw	r7,-12(fp)
 800f5e4:	01820074 	movhi	r6,2049
 800f5e8:	31bd9404 	addi	r6,r6,-2480
 800f5ec:	180b883a 	mov	r5,r3
 800f5f0:	1009883a 	mov	r4,r2
 800f5f4:	80104b80 	call	80104b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800f5f8:	e0bffd17 	ldw	r2,-12(fp)
 800f5fc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800f600:	e0bffd17 	ldw	r2,-12(fp)
 800f604:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800f608:	d0e6e817 	ldw	r3,-25696(gp)
 800f60c:	e1fffd17 	ldw	r7,-12(fp)
 800f610:	01820074 	movhi	r6,2049
 800f614:	31be1704 	addi	r6,r6,-1956
 800f618:	180b883a 	mov	r5,r3
 800f61c:	1009883a 	mov	r4,r2
 800f620:	800ff880 	call	800ff88 <alt_alarm_start>
 800f624:	1000040e 	bge	r2,zero,800f638 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800f628:	e0fffd17 	ldw	r3,-12(fp)
 800f62c:	00a00034 	movhi	r2,32768
 800f630:	10bfffc4 	addi	r2,r2,-1
 800f634:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800f638:	0001883a 	nop
 800f63c:	e037883a 	mov	sp,fp
 800f640:	dfc00117 	ldw	ra,4(sp)
 800f644:	df000017 	ldw	fp,0(sp)
 800f648:	dec00204 	addi	sp,sp,8
 800f64c:	f800283a 	ret

0800f650 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800f650:	defff804 	addi	sp,sp,-32
 800f654:	df000715 	stw	fp,28(sp)
 800f658:	df000704 	addi	fp,sp,28
 800f65c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800f660:	e0bfff17 	ldw	r2,-4(fp)
 800f664:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800f668:	e0bffb17 	ldw	r2,-20(fp)
 800f66c:	10800017 	ldw	r2,0(r2)
 800f670:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f674:	e0bffc17 	ldw	r2,-16(fp)
 800f678:	10800104 	addi	r2,r2,4
 800f67c:	10800037 	ldwio	r2,0(r2)
 800f680:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800f684:	e0bffd17 	ldw	r2,-12(fp)
 800f688:	1080c00c 	andi	r2,r2,768
 800f68c:	10006d26 	beq	r2,zero,800f844 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800f690:	e0bffd17 	ldw	r2,-12(fp)
 800f694:	1080400c 	andi	r2,r2,256
 800f698:	10003526 	beq	r2,zero,800f770 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800f69c:	00800074 	movhi	r2,1
 800f6a0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f6a4:	e0bffb17 	ldw	r2,-20(fp)
 800f6a8:	10800a17 	ldw	r2,40(r2)
 800f6ac:	10800044 	addi	r2,r2,1
 800f6b0:	1081ffcc 	andi	r2,r2,2047
 800f6b4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800f6b8:	e0bffb17 	ldw	r2,-20(fp)
 800f6bc:	10c00b17 	ldw	r3,44(r2)
 800f6c0:	e0bffe17 	ldw	r2,-8(fp)
 800f6c4:	18801526 	beq	r3,r2,800f71c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800f6c8:	e0bffc17 	ldw	r2,-16(fp)
 800f6cc:	10800037 	ldwio	r2,0(r2)
 800f6d0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800f6d4:	e0bff917 	ldw	r2,-28(fp)
 800f6d8:	10a0000c 	andi	r2,r2,32768
 800f6dc:	10001126 	beq	r2,zero,800f724 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800f6e0:	e0bffb17 	ldw	r2,-20(fp)
 800f6e4:	10800a17 	ldw	r2,40(r2)
 800f6e8:	e0fff917 	ldw	r3,-28(fp)
 800f6ec:	1809883a 	mov	r4,r3
 800f6f0:	e0fffb17 	ldw	r3,-20(fp)
 800f6f4:	1885883a 	add	r2,r3,r2
 800f6f8:	10800e04 	addi	r2,r2,56
 800f6fc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f700:	e0bffb17 	ldw	r2,-20(fp)
 800f704:	10800a17 	ldw	r2,40(r2)
 800f708:	10800044 	addi	r2,r2,1
 800f70c:	10c1ffcc 	andi	r3,r2,2047
 800f710:	e0bffb17 	ldw	r2,-20(fp)
 800f714:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800f718:	003fe206 	br	800f6a4 <__alt_data_end+0xff00f6a4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800f71c:	0001883a 	nop
 800f720:	00000106 	br	800f728 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800f724:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800f728:	e0bff917 	ldw	r2,-28(fp)
 800f72c:	10bfffec 	andhi	r2,r2,65535
 800f730:	10000f26 	beq	r2,zero,800f770 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f734:	e0bffb17 	ldw	r2,-20(fp)
 800f738:	10c00817 	ldw	r3,32(r2)
 800f73c:	00bfff84 	movi	r2,-2
 800f740:	1886703a 	and	r3,r3,r2
 800f744:	e0bffb17 	ldw	r2,-20(fp)
 800f748:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800f74c:	e0bffc17 	ldw	r2,-16(fp)
 800f750:	10800104 	addi	r2,r2,4
 800f754:	1007883a 	mov	r3,r2
 800f758:	e0bffb17 	ldw	r2,-20(fp)
 800f75c:	10800817 	ldw	r2,32(r2)
 800f760:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f764:	e0bffc17 	ldw	r2,-16(fp)
 800f768:	10800104 	addi	r2,r2,4
 800f76c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800f770:	e0bffd17 	ldw	r2,-12(fp)
 800f774:	1080800c 	andi	r2,r2,512
 800f778:	103fbe26 	beq	r2,zero,800f674 <__alt_data_end+0xff00f674>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800f77c:	e0bffd17 	ldw	r2,-12(fp)
 800f780:	1004d43a 	srli	r2,r2,16
 800f784:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f788:	00001406 	br	800f7dc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800f78c:	e0bffc17 	ldw	r2,-16(fp)
 800f790:	e0fffb17 	ldw	r3,-20(fp)
 800f794:	18c00d17 	ldw	r3,52(r3)
 800f798:	e13ffb17 	ldw	r4,-20(fp)
 800f79c:	20c7883a 	add	r3,r4,r3
 800f7a0:	18c20e04 	addi	r3,r3,2104
 800f7a4:	18c00003 	ldbu	r3,0(r3)
 800f7a8:	18c03fcc 	andi	r3,r3,255
 800f7ac:	18c0201c 	xori	r3,r3,128
 800f7b0:	18ffe004 	addi	r3,r3,-128
 800f7b4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f7b8:	e0bffb17 	ldw	r2,-20(fp)
 800f7bc:	10800d17 	ldw	r2,52(r2)
 800f7c0:	10800044 	addi	r2,r2,1
 800f7c4:	10c1ffcc 	andi	r3,r2,2047
 800f7c8:	e0bffb17 	ldw	r2,-20(fp)
 800f7cc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800f7d0:	e0bffa17 	ldw	r2,-24(fp)
 800f7d4:	10bfffc4 	addi	r2,r2,-1
 800f7d8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f7dc:	e0bffa17 	ldw	r2,-24(fp)
 800f7e0:	10000526 	beq	r2,zero,800f7f8 <altera_avalon_jtag_uart_irq+0x1a8>
 800f7e4:	e0bffb17 	ldw	r2,-20(fp)
 800f7e8:	10c00d17 	ldw	r3,52(r2)
 800f7ec:	e0bffb17 	ldw	r2,-20(fp)
 800f7f0:	10800c17 	ldw	r2,48(r2)
 800f7f4:	18bfe51e 	bne	r3,r2,800f78c <__alt_data_end+0xff00f78c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800f7f8:	e0bffa17 	ldw	r2,-24(fp)
 800f7fc:	103f9d26 	beq	r2,zero,800f674 <__alt_data_end+0xff00f674>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f800:	e0bffb17 	ldw	r2,-20(fp)
 800f804:	10c00817 	ldw	r3,32(r2)
 800f808:	00bfff44 	movi	r2,-3
 800f80c:	1886703a 	and	r3,r3,r2
 800f810:	e0bffb17 	ldw	r2,-20(fp)
 800f814:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f818:	e0bffb17 	ldw	r2,-20(fp)
 800f81c:	10800017 	ldw	r2,0(r2)
 800f820:	10800104 	addi	r2,r2,4
 800f824:	1007883a 	mov	r3,r2
 800f828:	e0bffb17 	ldw	r2,-20(fp)
 800f82c:	10800817 	ldw	r2,32(r2)
 800f830:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f834:	e0bffc17 	ldw	r2,-16(fp)
 800f838:	10800104 	addi	r2,r2,4
 800f83c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800f840:	003f8c06 	br	800f674 <__alt_data_end+0xff00f674>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800f844:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800f848:	0001883a 	nop
 800f84c:	e037883a 	mov	sp,fp
 800f850:	df000017 	ldw	fp,0(sp)
 800f854:	dec00104 	addi	sp,sp,4
 800f858:	f800283a 	ret

0800f85c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800f85c:	defff804 	addi	sp,sp,-32
 800f860:	df000715 	stw	fp,28(sp)
 800f864:	df000704 	addi	fp,sp,28
 800f868:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800f86c:	e0bffb17 	ldw	r2,-20(fp)
 800f870:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800f874:	e0bff917 	ldw	r2,-28(fp)
 800f878:	10800017 	ldw	r2,0(r2)
 800f87c:	10800104 	addi	r2,r2,4
 800f880:	10800037 	ldwio	r2,0(r2)
 800f884:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800f888:	e0bffa17 	ldw	r2,-24(fp)
 800f88c:	1081000c 	andi	r2,r2,1024
 800f890:	10000b26 	beq	r2,zero,800f8c0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800f894:	e0bff917 	ldw	r2,-28(fp)
 800f898:	10800017 	ldw	r2,0(r2)
 800f89c:	10800104 	addi	r2,r2,4
 800f8a0:	1007883a 	mov	r3,r2
 800f8a4:	e0bff917 	ldw	r2,-28(fp)
 800f8a8:	10800817 	ldw	r2,32(r2)
 800f8ac:	10810014 	ori	r2,r2,1024
 800f8b0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800f8b4:	e0bff917 	ldw	r2,-28(fp)
 800f8b8:	10000915 	stw	zero,36(r2)
 800f8bc:	00000a06 	br	800f8e8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800f8c0:	e0bff917 	ldw	r2,-28(fp)
 800f8c4:	10c00917 	ldw	r3,36(r2)
 800f8c8:	00a00034 	movhi	r2,32768
 800f8cc:	10bfff04 	addi	r2,r2,-4
 800f8d0:	10c00536 	bltu	r2,r3,800f8e8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800f8d4:	e0bff917 	ldw	r2,-28(fp)
 800f8d8:	10800917 	ldw	r2,36(r2)
 800f8dc:	10c00044 	addi	r3,r2,1
 800f8e0:	e0bff917 	ldw	r2,-28(fp)
 800f8e4:	10c00915 	stw	r3,36(r2)
 800f8e8:	d0a6e817 	ldw	r2,-25696(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800f8ec:	e037883a 	mov	sp,fp
 800f8f0:	df000017 	ldw	fp,0(sp)
 800f8f4:	dec00104 	addi	sp,sp,4
 800f8f8:	f800283a 	ret

0800f8fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800f8fc:	defffd04 	addi	sp,sp,-12
 800f900:	df000215 	stw	fp,8(sp)
 800f904:	df000204 	addi	fp,sp,8
 800f908:	e13ffe15 	stw	r4,-8(fp)
 800f90c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800f910:	00000506 	br	800f928 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800f914:	e0bfff17 	ldw	r2,-4(fp)
 800f918:	1090000c 	andi	r2,r2,16384
 800f91c:	10000226 	beq	r2,zero,800f928 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800f920:	00bffd44 	movi	r2,-11
 800f924:	00000b06 	br	800f954 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800f928:	e0bffe17 	ldw	r2,-8(fp)
 800f92c:	10c00d17 	ldw	r3,52(r2)
 800f930:	e0bffe17 	ldw	r2,-8(fp)
 800f934:	10800c17 	ldw	r2,48(r2)
 800f938:	18800526 	beq	r3,r2,800f950 <altera_avalon_jtag_uart_close+0x54>
 800f93c:	e0bffe17 	ldw	r2,-8(fp)
 800f940:	10c00917 	ldw	r3,36(r2)
 800f944:	e0bffe17 	ldw	r2,-8(fp)
 800f948:	10800117 	ldw	r2,4(r2)
 800f94c:	18bff136 	bltu	r3,r2,800f914 <__alt_data_end+0xff00f914>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800f950:	0005883a 	mov	r2,zero
}
 800f954:	e037883a 	mov	sp,fp
 800f958:	df000017 	ldw	fp,0(sp)
 800f95c:	dec00104 	addi	sp,sp,4
 800f960:	f800283a 	ret

0800f964 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800f964:	defffa04 	addi	sp,sp,-24
 800f968:	df000515 	stw	fp,20(sp)
 800f96c:	df000504 	addi	fp,sp,20
 800f970:	e13ffd15 	stw	r4,-12(fp)
 800f974:	e17ffe15 	stw	r5,-8(fp)
 800f978:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800f97c:	00bff9c4 	movi	r2,-25
 800f980:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800f984:	e0bffe17 	ldw	r2,-8(fp)
 800f988:	10da8060 	cmpeqi	r3,r2,27137
 800f98c:	1800031e 	bne	r3,zero,800f99c <altera_avalon_jtag_uart_ioctl+0x38>
 800f990:	109a80a0 	cmpeqi	r2,r2,27138
 800f994:	1000181e 	bne	r2,zero,800f9f8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 800f998:	00002906 	br	800fa40 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800f99c:	e0bffd17 	ldw	r2,-12(fp)
 800f9a0:	10c00117 	ldw	r3,4(r2)
 800f9a4:	00a00034 	movhi	r2,32768
 800f9a8:	10bfffc4 	addi	r2,r2,-1
 800f9ac:	18802126 	beq	r3,r2,800fa34 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800f9b0:	e0bfff17 	ldw	r2,-4(fp)
 800f9b4:	10800017 	ldw	r2,0(r2)
 800f9b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800f9bc:	e0bffc17 	ldw	r2,-16(fp)
 800f9c0:	10800090 	cmplti	r2,r2,2
 800f9c4:	1000061e 	bne	r2,zero,800f9e0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800f9c8:	e0fffc17 	ldw	r3,-16(fp)
 800f9cc:	00a00034 	movhi	r2,32768
 800f9d0:	10bfffc4 	addi	r2,r2,-1
 800f9d4:	18800226 	beq	r3,r2,800f9e0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800f9d8:	e0bffc17 	ldw	r2,-16(fp)
 800f9dc:	00000206 	br	800f9e8 <altera_avalon_jtag_uart_ioctl+0x84>
 800f9e0:	00a00034 	movhi	r2,32768
 800f9e4:	10bfff84 	addi	r2,r2,-2
 800f9e8:	e0fffd17 	ldw	r3,-12(fp)
 800f9ec:	18800115 	stw	r2,4(r3)
      rc = 0;
 800f9f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800f9f4:	00000f06 	br	800fa34 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800f9f8:	e0bffd17 	ldw	r2,-12(fp)
 800f9fc:	10c00117 	ldw	r3,4(r2)
 800fa00:	00a00034 	movhi	r2,32768
 800fa04:	10bfffc4 	addi	r2,r2,-1
 800fa08:	18800c26 	beq	r3,r2,800fa3c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800fa0c:	e0bffd17 	ldw	r2,-12(fp)
 800fa10:	10c00917 	ldw	r3,36(r2)
 800fa14:	e0bffd17 	ldw	r2,-12(fp)
 800fa18:	10800117 	ldw	r2,4(r2)
 800fa1c:	1885803a 	cmpltu	r2,r3,r2
 800fa20:	10c03fcc 	andi	r3,r2,255
 800fa24:	e0bfff17 	ldw	r2,-4(fp)
 800fa28:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800fa2c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fa30:	00000206 	br	800fa3c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800fa34:	0001883a 	nop
 800fa38:	00000106 	br	800fa40 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800fa3c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800fa40:	e0bffb17 	ldw	r2,-20(fp)
}
 800fa44:	e037883a 	mov	sp,fp
 800fa48:	df000017 	ldw	fp,0(sp)
 800fa4c:	dec00104 	addi	sp,sp,4
 800fa50:	f800283a 	ret

0800fa54 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800fa54:	defff304 	addi	sp,sp,-52
 800fa58:	dfc00c15 	stw	ra,48(sp)
 800fa5c:	df000b15 	stw	fp,44(sp)
 800fa60:	df000b04 	addi	fp,sp,44
 800fa64:	e13ffc15 	stw	r4,-16(fp)
 800fa68:	e17ffd15 	stw	r5,-12(fp)
 800fa6c:	e1bffe15 	stw	r6,-8(fp)
 800fa70:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800fa74:	e0bffd17 	ldw	r2,-12(fp)
 800fa78:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fa7c:	00004706 	br	800fb9c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800fa80:	e0bffc17 	ldw	r2,-16(fp)
 800fa84:	10800a17 	ldw	r2,40(r2)
 800fa88:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800fa8c:	e0bffc17 	ldw	r2,-16(fp)
 800fa90:	10800b17 	ldw	r2,44(r2)
 800fa94:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800fa98:	e0fff717 	ldw	r3,-36(fp)
 800fa9c:	e0bff817 	ldw	r2,-32(fp)
 800faa0:	18800536 	bltu	r3,r2,800fab8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800faa4:	e0fff717 	ldw	r3,-36(fp)
 800faa8:	e0bff817 	ldw	r2,-32(fp)
 800faac:	1885c83a 	sub	r2,r3,r2
 800fab0:	e0bff615 	stw	r2,-40(fp)
 800fab4:	00000406 	br	800fac8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800fab8:	00c20004 	movi	r3,2048
 800fabc:	e0bff817 	ldw	r2,-32(fp)
 800fac0:	1885c83a 	sub	r2,r3,r2
 800fac4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fac8:	e0bff617 	ldw	r2,-40(fp)
 800facc:	10001e26 	beq	r2,zero,800fb48 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800fad0:	e0fffe17 	ldw	r3,-8(fp)
 800fad4:	e0bff617 	ldw	r2,-40(fp)
 800fad8:	1880022e 	bgeu	r3,r2,800fae4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800fadc:	e0bffe17 	ldw	r2,-8(fp)
 800fae0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800fae4:	e0bffc17 	ldw	r2,-16(fp)
 800fae8:	10c00e04 	addi	r3,r2,56
 800faec:	e0bff817 	ldw	r2,-32(fp)
 800faf0:	1885883a 	add	r2,r3,r2
 800faf4:	e1bff617 	ldw	r6,-40(fp)
 800faf8:	100b883a 	mov	r5,r2
 800fafc:	e13ff517 	ldw	r4,-44(fp)
 800fb00:	8005fb80 	call	8005fb8 <memcpy>
      ptr   += n;
 800fb04:	e0fff517 	ldw	r3,-44(fp)
 800fb08:	e0bff617 	ldw	r2,-40(fp)
 800fb0c:	1885883a 	add	r2,r3,r2
 800fb10:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800fb14:	e0fffe17 	ldw	r3,-8(fp)
 800fb18:	e0bff617 	ldw	r2,-40(fp)
 800fb1c:	1885c83a 	sub	r2,r3,r2
 800fb20:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fb24:	e0fff817 	ldw	r3,-32(fp)
 800fb28:	e0bff617 	ldw	r2,-40(fp)
 800fb2c:	1885883a 	add	r2,r3,r2
 800fb30:	10c1ffcc 	andi	r3,r2,2047
 800fb34:	e0bffc17 	ldw	r2,-16(fp)
 800fb38:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800fb3c:	e0bffe17 	ldw	r2,-8(fp)
 800fb40:	00bfcf16 	blt	zero,r2,800fa80 <__alt_data_end+0xff00fa80>
 800fb44:	00000106 	br	800fb4c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800fb48:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800fb4c:	e0fff517 	ldw	r3,-44(fp)
 800fb50:	e0bffd17 	ldw	r2,-12(fp)
 800fb54:	1880141e 	bne	r3,r2,800fba8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800fb58:	e0bfff17 	ldw	r2,-4(fp)
 800fb5c:	1090000c 	andi	r2,r2,16384
 800fb60:	1000131e 	bne	r2,zero,800fbb0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800fb64:	0001883a 	nop
 800fb68:	e0bffc17 	ldw	r2,-16(fp)
 800fb6c:	10c00a17 	ldw	r3,40(r2)
 800fb70:	e0bff717 	ldw	r2,-36(fp)
 800fb74:	1880051e 	bne	r3,r2,800fb8c <altera_avalon_jtag_uart_read+0x138>
 800fb78:	e0bffc17 	ldw	r2,-16(fp)
 800fb7c:	10c00917 	ldw	r3,36(r2)
 800fb80:	e0bffc17 	ldw	r2,-16(fp)
 800fb84:	10800117 	ldw	r2,4(r2)
 800fb88:	18bff736 	bltu	r3,r2,800fb68 <__alt_data_end+0xff00fb68>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800fb8c:	e0bffc17 	ldw	r2,-16(fp)
 800fb90:	10c00a17 	ldw	r3,40(r2)
 800fb94:	e0bff717 	ldw	r2,-36(fp)
 800fb98:	18800726 	beq	r3,r2,800fbb8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fb9c:	e0bffe17 	ldw	r2,-8(fp)
 800fba0:	00bfb716 	blt	zero,r2,800fa80 <__alt_data_end+0xff00fa80>
 800fba4:	00000506 	br	800fbbc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800fba8:	0001883a 	nop
 800fbac:	00000306 	br	800fbbc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800fbb0:	0001883a 	nop
 800fbb4:	00000106 	br	800fbbc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800fbb8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800fbbc:	e0fff517 	ldw	r3,-44(fp)
 800fbc0:	e0bffd17 	ldw	r2,-12(fp)
 800fbc4:	18801826 	beq	r3,r2,800fc28 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fbc8:	0005303a 	rdctl	r2,status
 800fbcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fbd0:	e0fffb17 	ldw	r3,-20(fp)
 800fbd4:	00bfff84 	movi	r2,-2
 800fbd8:	1884703a 	and	r2,r3,r2
 800fbdc:	1001703a 	wrctl	status,r2
  
  return context;
 800fbe0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800fbe4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800fbe8:	e0bffc17 	ldw	r2,-16(fp)
 800fbec:	10800817 	ldw	r2,32(r2)
 800fbf0:	10c00054 	ori	r3,r2,1
 800fbf4:	e0bffc17 	ldw	r2,-16(fp)
 800fbf8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fbfc:	e0bffc17 	ldw	r2,-16(fp)
 800fc00:	10800017 	ldw	r2,0(r2)
 800fc04:	10800104 	addi	r2,r2,4
 800fc08:	1007883a 	mov	r3,r2
 800fc0c:	e0bffc17 	ldw	r2,-16(fp)
 800fc10:	10800817 	ldw	r2,32(r2)
 800fc14:	18800035 	stwio	r2,0(r3)
 800fc18:	e0bffa17 	ldw	r2,-24(fp)
 800fc1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fc20:	e0bff917 	ldw	r2,-28(fp)
 800fc24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800fc28:	e0fff517 	ldw	r3,-44(fp)
 800fc2c:	e0bffd17 	ldw	r2,-12(fp)
 800fc30:	18800426 	beq	r3,r2,800fc44 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800fc34:	e0fff517 	ldw	r3,-44(fp)
 800fc38:	e0bffd17 	ldw	r2,-12(fp)
 800fc3c:	1885c83a 	sub	r2,r3,r2
 800fc40:	00000606 	br	800fc5c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800fc44:	e0bfff17 	ldw	r2,-4(fp)
 800fc48:	1090000c 	andi	r2,r2,16384
 800fc4c:	10000226 	beq	r2,zero,800fc58 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800fc50:	00bffd44 	movi	r2,-11
 800fc54:	00000106 	br	800fc5c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800fc58:	00bffec4 	movi	r2,-5
}
 800fc5c:	e037883a 	mov	sp,fp
 800fc60:	dfc00117 	ldw	ra,4(sp)
 800fc64:	df000017 	ldw	fp,0(sp)
 800fc68:	dec00204 	addi	sp,sp,8
 800fc6c:	f800283a 	ret

0800fc70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800fc70:	defff304 	addi	sp,sp,-52
 800fc74:	dfc00c15 	stw	ra,48(sp)
 800fc78:	df000b15 	stw	fp,44(sp)
 800fc7c:	df000b04 	addi	fp,sp,44
 800fc80:	e13ffc15 	stw	r4,-16(fp)
 800fc84:	e17ffd15 	stw	r5,-12(fp)
 800fc88:	e1bffe15 	stw	r6,-8(fp)
 800fc8c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800fc90:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800fc94:	e0bffd17 	ldw	r2,-12(fp)
 800fc98:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fc9c:	00003706 	br	800fd7c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800fca0:	e0bffc17 	ldw	r2,-16(fp)
 800fca4:	10800c17 	ldw	r2,48(r2)
 800fca8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 800fcac:	e0bffc17 	ldw	r2,-16(fp)
 800fcb0:	10800d17 	ldw	r2,52(r2)
 800fcb4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800fcb8:	e0fff917 	ldw	r3,-28(fp)
 800fcbc:	e0bff517 	ldw	r2,-44(fp)
 800fcc0:	1880062e 	bgeu	r3,r2,800fcdc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800fcc4:	e0fff517 	ldw	r3,-44(fp)
 800fcc8:	e0bff917 	ldw	r2,-28(fp)
 800fccc:	1885c83a 	sub	r2,r3,r2
 800fcd0:	10bfffc4 	addi	r2,r2,-1
 800fcd4:	e0bff615 	stw	r2,-40(fp)
 800fcd8:	00000b06 	br	800fd08 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800fcdc:	e0bff517 	ldw	r2,-44(fp)
 800fce0:	10000526 	beq	r2,zero,800fcf8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800fce4:	00c20004 	movi	r3,2048
 800fce8:	e0bff917 	ldw	r2,-28(fp)
 800fcec:	1885c83a 	sub	r2,r3,r2
 800fcf0:	e0bff615 	stw	r2,-40(fp)
 800fcf4:	00000406 	br	800fd08 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800fcf8:	00c1ffc4 	movi	r3,2047
 800fcfc:	e0bff917 	ldw	r2,-28(fp)
 800fd00:	1885c83a 	sub	r2,r3,r2
 800fd04:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fd08:	e0bff617 	ldw	r2,-40(fp)
 800fd0c:	10001e26 	beq	r2,zero,800fd88 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800fd10:	e0fffe17 	ldw	r3,-8(fp)
 800fd14:	e0bff617 	ldw	r2,-40(fp)
 800fd18:	1880022e 	bgeu	r3,r2,800fd24 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800fd1c:	e0bffe17 	ldw	r2,-8(fp)
 800fd20:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800fd24:	e0bffc17 	ldw	r2,-16(fp)
 800fd28:	10c20e04 	addi	r3,r2,2104
 800fd2c:	e0bff917 	ldw	r2,-28(fp)
 800fd30:	1885883a 	add	r2,r3,r2
 800fd34:	e1bff617 	ldw	r6,-40(fp)
 800fd38:	e17ffd17 	ldw	r5,-12(fp)
 800fd3c:	1009883a 	mov	r4,r2
 800fd40:	8005fb80 	call	8005fb8 <memcpy>
      ptr   += n;
 800fd44:	e0fffd17 	ldw	r3,-12(fp)
 800fd48:	e0bff617 	ldw	r2,-40(fp)
 800fd4c:	1885883a 	add	r2,r3,r2
 800fd50:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800fd54:	e0fffe17 	ldw	r3,-8(fp)
 800fd58:	e0bff617 	ldw	r2,-40(fp)
 800fd5c:	1885c83a 	sub	r2,r3,r2
 800fd60:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fd64:	e0fff917 	ldw	r3,-28(fp)
 800fd68:	e0bff617 	ldw	r2,-40(fp)
 800fd6c:	1885883a 	add	r2,r3,r2
 800fd70:	10c1ffcc 	andi	r3,r2,2047
 800fd74:	e0bffc17 	ldw	r2,-16(fp)
 800fd78:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fd7c:	e0bffe17 	ldw	r2,-8(fp)
 800fd80:	00bfc716 	blt	zero,r2,800fca0 <__alt_data_end+0xff00fca0>
 800fd84:	00000106 	br	800fd8c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800fd88:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fd8c:	0005303a 	rdctl	r2,status
 800fd90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fd94:	e0fffb17 	ldw	r3,-20(fp)
 800fd98:	00bfff84 	movi	r2,-2
 800fd9c:	1884703a 	and	r2,r3,r2
 800fda0:	1001703a 	wrctl	status,r2
  
  return context;
 800fda4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800fda8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800fdac:	e0bffc17 	ldw	r2,-16(fp)
 800fdb0:	10800817 	ldw	r2,32(r2)
 800fdb4:	10c00094 	ori	r3,r2,2
 800fdb8:	e0bffc17 	ldw	r2,-16(fp)
 800fdbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fdc0:	e0bffc17 	ldw	r2,-16(fp)
 800fdc4:	10800017 	ldw	r2,0(r2)
 800fdc8:	10800104 	addi	r2,r2,4
 800fdcc:	1007883a 	mov	r3,r2
 800fdd0:	e0bffc17 	ldw	r2,-16(fp)
 800fdd4:	10800817 	ldw	r2,32(r2)
 800fdd8:	18800035 	stwio	r2,0(r3)
 800fddc:	e0bffa17 	ldw	r2,-24(fp)
 800fde0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fde4:	e0bff817 	ldw	r2,-32(fp)
 800fde8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800fdec:	e0bffe17 	ldw	r2,-8(fp)
 800fdf0:	0080100e 	bge	zero,r2,800fe34 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800fdf4:	e0bfff17 	ldw	r2,-4(fp)
 800fdf8:	1090000c 	andi	r2,r2,16384
 800fdfc:	1000101e 	bne	r2,zero,800fe40 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800fe00:	0001883a 	nop
 800fe04:	e0bffc17 	ldw	r2,-16(fp)
 800fe08:	10c00d17 	ldw	r3,52(r2)
 800fe0c:	e0bff517 	ldw	r2,-44(fp)
 800fe10:	1880051e 	bne	r3,r2,800fe28 <altera_avalon_jtag_uart_write+0x1b8>
 800fe14:	e0bffc17 	ldw	r2,-16(fp)
 800fe18:	10c00917 	ldw	r3,36(r2)
 800fe1c:	e0bffc17 	ldw	r2,-16(fp)
 800fe20:	10800117 	ldw	r2,4(r2)
 800fe24:	18bff736 	bltu	r3,r2,800fe04 <__alt_data_end+0xff00fe04>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800fe28:	e0bffc17 	ldw	r2,-16(fp)
 800fe2c:	10800917 	ldw	r2,36(r2)
 800fe30:	1000051e 	bne	r2,zero,800fe48 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800fe34:	e0bffe17 	ldw	r2,-8(fp)
 800fe38:	00bfd016 	blt	zero,r2,800fd7c <__alt_data_end+0xff00fd7c>
 800fe3c:	00000306 	br	800fe4c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800fe40:	0001883a 	nop
 800fe44:	00000106 	br	800fe4c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800fe48:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800fe4c:	e0fffd17 	ldw	r3,-12(fp)
 800fe50:	e0bff717 	ldw	r2,-36(fp)
 800fe54:	18800426 	beq	r3,r2,800fe68 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800fe58:	e0fffd17 	ldw	r3,-12(fp)
 800fe5c:	e0bff717 	ldw	r2,-36(fp)
 800fe60:	1885c83a 	sub	r2,r3,r2
 800fe64:	00000606 	br	800fe80 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800fe68:	e0bfff17 	ldw	r2,-4(fp)
 800fe6c:	1090000c 	andi	r2,r2,16384
 800fe70:	10000226 	beq	r2,zero,800fe7c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800fe74:	00bffd44 	movi	r2,-11
 800fe78:	00000106 	br	800fe80 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800fe7c:	00bffec4 	movi	r2,-5
}
 800fe80:	e037883a 	mov	sp,fp
 800fe84:	dfc00117 	ldw	ra,4(sp)
 800fe88:	df000017 	ldw	fp,0(sp)
 800fe8c:	dec00204 	addi	sp,sp,8
 800fe90:	f800283a 	ret

0800fe94 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800fe94:	defffa04 	addi	sp,sp,-24
 800fe98:	dfc00515 	stw	ra,20(sp)
 800fe9c:	df000415 	stw	fp,16(sp)
 800fea0:	df000404 	addi	fp,sp,16
 800fea4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800fea8:	0007883a 	mov	r3,zero
 800feac:	e0bfff17 	ldw	r2,-4(fp)
 800feb0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800feb4:	e0bfff17 	ldw	r2,-4(fp)
 800feb8:	10800104 	addi	r2,r2,4
 800febc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fec0:	0005303a 	rdctl	r2,status
 800fec4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fec8:	e0fffd17 	ldw	r3,-12(fp)
 800fecc:	00bfff84 	movi	r2,-2
 800fed0:	1884703a 	and	r2,r3,r2
 800fed4:	1001703a 	wrctl	status,r2
  
  return context;
 800fed8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800fedc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800fee0:	8010df00 	call	8010df0 <alt_tick>
 800fee4:	e0bffc17 	ldw	r2,-16(fp)
 800fee8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800feec:	e0bffe17 	ldw	r2,-8(fp)
 800fef0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800fef4:	0001883a 	nop
 800fef8:	e037883a 	mov	sp,fp
 800fefc:	dfc00117 	ldw	ra,4(sp)
 800ff00:	df000017 	ldw	fp,0(sp)
 800ff04:	dec00204 	addi	sp,sp,8
 800ff08:	f800283a 	ret

0800ff0c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800ff0c:	defff804 	addi	sp,sp,-32
 800ff10:	dfc00715 	stw	ra,28(sp)
 800ff14:	df000615 	stw	fp,24(sp)
 800ff18:	df000604 	addi	fp,sp,24
 800ff1c:	e13ffc15 	stw	r4,-16(fp)
 800ff20:	e17ffd15 	stw	r5,-12(fp)
 800ff24:	e1bffe15 	stw	r6,-8(fp)
 800ff28:	e1ffff15 	stw	r7,-4(fp)
 800ff2c:	e0bfff17 	ldw	r2,-4(fp)
 800ff30:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800ff34:	d0a6e817 	ldw	r2,-25696(gp)
 800ff38:	1000021e 	bne	r2,zero,800ff44 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 800ff3c:	e0bffb17 	ldw	r2,-20(fp)
 800ff40:	d0a6e815 	stw	r2,-25696(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800ff44:	e0bffc17 	ldw	r2,-16(fp)
 800ff48:	10800104 	addi	r2,r2,4
 800ff4c:	00c001c4 	movi	r3,7
 800ff50:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800ff54:	d8000015 	stw	zero,0(sp)
 800ff58:	e1fffc17 	ldw	r7,-16(fp)
 800ff5c:	01820074 	movhi	r6,2049
 800ff60:	31bfa504 	addi	r6,r6,-364
 800ff64:	e17ffe17 	ldw	r5,-8(fp)
 800ff68:	e13ffd17 	ldw	r4,-12(fp)
 800ff6c:	80104b80 	call	80104b8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800ff70:	0001883a 	nop
 800ff74:	e037883a 	mov	sp,fp
 800ff78:	dfc00117 	ldw	ra,4(sp)
 800ff7c:	df000017 	ldw	fp,0(sp)
 800ff80:	dec00204 	addi	sp,sp,8
 800ff84:	f800283a 	ret

0800ff88 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800ff88:	defff504 	addi	sp,sp,-44
 800ff8c:	df000a15 	stw	fp,40(sp)
 800ff90:	df000a04 	addi	fp,sp,40
 800ff94:	e13ffc15 	stw	r4,-16(fp)
 800ff98:	e17ffd15 	stw	r5,-12(fp)
 800ff9c:	e1bffe15 	stw	r6,-8(fp)
 800ffa0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800ffa4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800ffa8:	d0a6e817 	ldw	r2,-25696(gp)
  
  if (alt_ticks_per_second ())
 800ffac:	10003c26 	beq	r2,zero,80100a0 <alt_alarm_start+0x118>
  {
    if (alarm)
 800ffb0:	e0bffc17 	ldw	r2,-16(fp)
 800ffb4:	10003826 	beq	r2,zero,8010098 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800ffb8:	e0bffc17 	ldw	r2,-16(fp)
 800ffbc:	e0fffe17 	ldw	r3,-8(fp)
 800ffc0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800ffc4:	e0bffc17 	ldw	r2,-16(fp)
 800ffc8:	e0ffff17 	ldw	r3,-4(fp)
 800ffcc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ffd0:	0005303a 	rdctl	r2,status
 800ffd4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ffd8:	e0fff917 	ldw	r3,-28(fp)
 800ffdc:	00bfff84 	movi	r2,-2
 800ffe0:	1884703a 	and	r2,r3,r2
 800ffe4:	1001703a 	wrctl	status,r2
  
  return context;
 800ffe8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 800ffec:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800fff0:	d0a6e917 	ldw	r2,-25692(gp)
      
      current_nticks = alt_nticks();
 800fff4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800fff8:	e0fffd17 	ldw	r3,-12(fp)
 800fffc:	e0bff617 	ldw	r2,-40(fp)
 8010000:	1885883a 	add	r2,r3,r2
 8010004:	10c00044 	addi	r3,r2,1
 8010008:	e0bffc17 	ldw	r2,-16(fp)
 801000c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8010010:	e0bffc17 	ldw	r2,-16(fp)
 8010014:	10c00217 	ldw	r3,8(r2)
 8010018:	e0bff617 	ldw	r2,-40(fp)
 801001c:	1880042e 	bgeu	r3,r2,8010030 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8010020:	e0bffc17 	ldw	r2,-16(fp)
 8010024:	00c00044 	movi	r3,1
 8010028:	10c00405 	stb	r3,16(r2)
 801002c:	00000206 	br	8010038 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8010030:	e0bffc17 	ldw	r2,-16(fp)
 8010034:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8010038:	e0bffc17 	ldw	r2,-16(fp)
 801003c:	d0e01004 	addi	r3,gp,-32704
 8010040:	e0fffa15 	stw	r3,-24(fp)
 8010044:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010048:	e0bffb17 	ldw	r2,-20(fp)
 801004c:	e0fffa17 	ldw	r3,-24(fp)
 8010050:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010054:	e0bffa17 	ldw	r2,-24(fp)
 8010058:	10c00017 	ldw	r3,0(r2)
 801005c:	e0bffb17 	ldw	r2,-20(fp)
 8010060:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010064:	e0bffa17 	ldw	r2,-24(fp)
 8010068:	10800017 	ldw	r2,0(r2)
 801006c:	e0fffb17 	ldw	r3,-20(fp)
 8010070:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010074:	e0bffa17 	ldw	r2,-24(fp)
 8010078:	e0fffb17 	ldw	r3,-20(fp)
 801007c:	10c00015 	stw	r3,0(r2)
 8010080:	e0bff817 	ldw	r2,-32(fp)
 8010084:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010088:	e0bff717 	ldw	r2,-36(fp)
 801008c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8010090:	0005883a 	mov	r2,zero
 8010094:	00000306 	br	80100a4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8010098:	00bffa84 	movi	r2,-22
 801009c:	00000106 	br	80100a4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 80100a0:	00bfde84 	movi	r2,-134
  }
}
 80100a4:	e037883a 	mov	sp,fp
 80100a8:	df000017 	ldw	fp,0(sp)
 80100ac:	dec00104 	addi	sp,sp,4
 80100b0:	f800283a 	ret

080100b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80100b4:	defffa04 	addi	sp,sp,-24
 80100b8:	dfc00515 	stw	ra,20(sp)
 80100bc:	df000415 	stw	fp,16(sp)
 80100c0:	df000404 	addi	fp,sp,16
 80100c4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 80100c8:	008000c4 	movi	r2,3
 80100cc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80100d0:	e0fffd17 	ldw	r3,-12(fp)
 80100d4:	008003f4 	movhi	r2,15
 80100d8:	10909004 	addi	r2,r2,16960
 80100dc:	1885383a 	mul	r2,r3,r2
 80100e0:	100b883a 	mov	r5,r2
 80100e4:	0100bef4 	movhi	r4,763
 80100e8:	213c2004 	addi	r4,r4,-3968
 80100ec:	800a6e80 	call	800a6e8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 80100f0:	100b883a 	mov	r5,r2
 80100f4:	01200034 	movhi	r4,32768
 80100f8:	213fffc4 	addi	r4,r4,-1
 80100fc:	800a6e80 	call	800a6e8 <__udivsi3>
 8010100:	100b883a 	mov	r5,r2
 8010104:	e13fff17 	ldw	r4,-4(fp)
 8010108:	800a6e80 	call	800a6e8 <__udivsi3>
 801010c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8010110:	e0bffe17 	ldw	r2,-8(fp)
 8010114:	10002a26 	beq	r2,zero,80101c0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8010118:	e03ffc15 	stw	zero,-16(fp)
 801011c:	00001706 	br	801017c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8010120:	00a00034 	movhi	r2,32768
 8010124:	10bfffc4 	addi	r2,r2,-1
 8010128:	10bfffc4 	addi	r2,r2,-1
 801012c:	103ffe1e 	bne	r2,zero,8010128 <__alt_data_end+0xff010128>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8010130:	e0fffd17 	ldw	r3,-12(fp)
 8010134:	008003f4 	movhi	r2,15
 8010138:	10909004 	addi	r2,r2,16960
 801013c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8010140:	100b883a 	mov	r5,r2
 8010144:	0100bef4 	movhi	r4,763
 8010148:	213c2004 	addi	r4,r4,-3968
 801014c:	800a6e80 	call	800a6e8 <__udivsi3>
 8010150:	100b883a 	mov	r5,r2
 8010154:	01200034 	movhi	r4,32768
 8010158:	213fffc4 	addi	r4,r4,-1
 801015c:	800a6e80 	call	800a6e8 <__udivsi3>
 8010160:	1007883a 	mov	r3,r2
 8010164:	e0bfff17 	ldw	r2,-4(fp)
 8010168:	10c5c83a 	sub	r2,r2,r3
 801016c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8010170:	e0bffc17 	ldw	r2,-16(fp)
 8010174:	10800044 	addi	r2,r2,1
 8010178:	e0bffc15 	stw	r2,-16(fp)
 801017c:	e0fffc17 	ldw	r3,-16(fp)
 8010180:	e0bffe17 	ldw	r2,-8(fp)
 8010184:	18bfe616 	blt	r3,r2,8010120 <__alt_data_end+0xff010120>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010188:	e0fffd17 	ldw	r3,-12(fp)
 801018c:	008003f4 	movhi	r2,15
 8010190:	10909004 	addi	r2,r2,16960
 8010194:	1885383a 	mul	r2,r3,r2
 8010198:	100b883a 	mov	r5,r2
 801019c:	0100bef4 	movhi	r4,763
 80101a0:	213c2004 	addi	r4,r4,-3968
 80101a4:	800a6e80 	call	800a6e8 <__udivsi3>
 80101a8:	1007883a 	mov	r3,r2
 80101ac:	e0bfff17 	ldw	r2,-4(fp)
 80101b0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80101b4:	10bfffc4 	addi	r2,r2,-1
 80101b8:	103ffe1e 	bne	r2,zero,80101b4 <__alt_data_end+0xff0101b4>
 80101bc:	00000d06 	br	80101f4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80101c0:	e0fffd17 	ldw	r3,-12(fp)
 80101c4:	008003f4 	movhi	r2,15
 80101c8:	10909004 	addi	r2,r2,16960
 80101cc:	1885383a 	mul	r2,r3,r2
 80101d0:	100b883a 	mov	r5,r2
 80101d4:	0100bef4 	movhi	r4,763
 80101d8:	213c2004 	addi	r4,r4,-3968
 80101dc:	800a6e80 	call	800a6e8 <__udivsi3>
 80101e0:	1007883a 	mov	r3,r2
 80101e4:	e0bfff17 	ldw	r2,-4(fp)
 80101e8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80101ec:	10bfffc4 	addi	r2,r2,-1
 80101f0:	00bffe16 	blt	zero,r2,80101ec <__alt_data_end+0xff0101ec>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 80101f4:	0005883a 	mov	r2,zero
}
 80101f8:	e037883a 	mov	sp,fp
 80101fc:	dfc00117 	ldw	ra,4(sp)
 8010200:	df000017 	ldw	fp,0(sp)
 8010204:	dec00204 	addi	sp,sp,8
 8010208:	f800283a 	ret

0801020c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 801020c:	defffe04 	addi	sp,sp,-8
 8010210:	df000115 	stw	fp,4(sp)
 8010214:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8010218:	e03fff15 	stw	zero,-4(fp)
 801021c:	00000506 	br	8010234 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8010220:	e0bfff17 	ldw	r2,-4(fp)
 8010224:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8010228:	e0bfff17 	ldw	r2,-4(fp)
 801022c:	10800804 	addi	r2,r2,32
 8010230:	e0bfff15 	stw	r2,-4(fp)
 8010234:	e0bfff17 	ldw	r2,-4(fp)
 8010238:	10820030 	cmpltui	r2,r2,2048
 801023c:	103ff81e 	bne	r2,zero,8010220 <__alt_data_end+0xff010220>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010240:	0001883a 	nop
 8010244:	e037883a 	mov	sp,fp
 8010248:	df000017 	ldw	fp,0(sp)
 801024c:	dec00104 	addi	sp,sp,4
 8010250:	f800283a 	ret

08010254 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010254:	defffe04 	addi	sp,sp,-8
 8010258:	dfc00115 	stw	ra,4(sp)
 801025c:	df000015 	stw	fp,0(sp)
 8010260:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010264:	d0a00b17 	ldw	r2,-32724(gp)
 8010268:	10000326 	beq	r2,zero,8010278 <alt_get_errno+0x24>
 801026c:	d0a00b17 	ldw	r2,-32724(gp)
 8010270:	103ee83a 	callr	r2
 8010274:	00000106 	br	801027c <alt_get_errno+0x28>
 8010278:	d0a6e304 	addi	r2,gp,-25716
}
 801027c:	e037883a 	mov	sp,fp
 8010280:	dfc00117 	ldw	ra,4(sp)
 8010284:	df000017 	ldw	fp,0(sp)
 8010288:	dec00204 	addi	sp,sp,8
 801028c:	f800283a 	ret

08010290 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010290:	defffa04 	addi	sp,sp,-24
 8010294:	dfc00515 	stw	ra,20(sp)
 8010298:	df000415 	stw	fp,16(sp)
 801029c:	df000404 	addi	fp,sp,16
 80102a0:	e13ffe15 	stw	r4,-8(fp)
 80102a4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80102a8:	e0bffe17 	ldw	r2,-8(fp)
 80102ac:	10000326 	beq	r2,zero,80102bc <alt_dev_llist_insert+0x2c>
 80102b0:	e0bffe17 	ldw	r2,-8(fp)
 80102b4:	10800217 	ldw	r2,8(r2)
 80102b8:	1000061e 	bne	r2,zero,80102d4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80102bc:	80102540 	call	8010254 <alt_get_errno>
 80102c0:	1007883a 	mov	r3,r2
 80102c4:	00800584 	movi	r2,22
 80102c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80102cc:	00bffa84 	movi	r2,-22
 80102d0:	00001306 	br	8010320 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80102d4:	e0bffe17 	ldw	r2,-8(fp)
 80102d8:	e0ffff17 	ldw	r3,-4(fp)
 80102dc:	e0fffc15 	stw	r3,-16(fp)
 80102e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80102e4:	e0bffd17 	ldw	r2,-12(fp)
 80102e8:	e0fffc17 	ldw	r3,-16(fp)
 80102ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80102f0:	e0bffc17 	ldw	r2,-16(fp)
 80102f4:	10c00017 	ldw	r3,0(r2)
 80102f8:	e0bffd17 	ldw	r2,-12(fp)
 80102fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010300:	e0bffc17 	ldw	r2,-16(fp)
 8010304:	10800017 	ldw	r2,0(r2)
 8010308:	e0fffd17 	ldw	r3,-12(fp)
 801030c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010310:	e0bffc17 	ldw	r2,-16(fp)
 8010314:	e0fffd17 	ldw	r3,-12(fp)
 8010318:	10c00015 	stw	r3,0(r2)

  return 0;  
 801031c:	0005883a 	mov	r2,zero
}
 8010320:	e037883a 	mov	sp,fp
 8010324:	dfc00117 	ldw	ra,4(sp)
 8010328:	df000017 	ldw	fp,0(sp)
 801032c:	dec00204 	addi	sp,sp,8
 8010330:	f800283a 	ret

08010334 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8010334:	defffd04 	addi	sp,sp,-12
 8010338:	dfc00215 	stw	ra,8(sp)
 801033c:	df000115 	stw	fp,4(sp)
 8010340:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010344:	00820074 	movhi	r2,2049
 8010348:	1085bb04 	addi	r2,r2,5868
 801034c:	e0bfff15 	stw	r2,-4(fp)
 8010350:	00000606 	br	801036c <_do_ctors+0x38>
        (*ctor) (); 
 8010354:	e0bfff17 	ldw	r2,-4(fp)
 8010358:	10800017 	ldw	r2,0(r2)
 801035c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010360:	e0bfff17 	ldw	r2,-4(fp)
 8010364:	10bfff04 	addi	r2,r2,-4
 8010368:	e0bfff15 	stw	r2,-4(fp)
 801036c:	e0ffff17 	ldw	r3,-4(fp)
 8010370:	00820074 	movhi	r2,2049
 8010374:	1085bc04 	addi	r2,r2,5872
 8010378:	18bff62e 	bgeu	r3,r2,8010354 <__alt_data_end+0xff010354>
        (*ctor) (); 
}
 801037c:	0001883a 	nop
 8010380:	e037883a 	mov	sp,fp
 8010384:	dfc00117 	ldw	ra,4(sp)
 8010388:	df000017 	ldw	fp,0(sp)
 801038c:	dec00204 	addi	sp,sp,8
 8010390:	f800283a 	ret

08010394 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8010394:	defffd04 	addi	sp,sp,-12
 8010398:	dfc00215 	stw	ra,8(sp)
 801039c:	df000115 	stw	fp,4(sp)
 80103a0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80103a4:	00820074 	movhi	r2,2049
 80103a8:	1085bb04 	addi	r2,r2,5868
 80103ac:	e0bfff15 	stw	r2,-4(fp)
 80103b0:	00000606 	br	80103cc <_do_dtors+0x38>
        (*dtor) (); 
 80103b4:	e0bfff17 	ldw	r2,-4(fp)
 80103b8:	10800017 	ldw	r2,0(r2)
 80103bc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80103c0:	e0bfff17 	ldw	r2,-4(fp)
 80103c4:	10bfff04 	addi	r2,r2,-4
 80103c8:	e0bfff15 	stw	r2,-4(fp)
 80103cc:	e0ffff17 	ldw	r3,-4(fp)
 80103d0:	00820074 	movhi	r2,2049
 80103d4:	1085bc04 	addi	r2,r2,5872
 80103d8:	18bff62e 	bgeu	r3,r2,80103b4 <__alt_data_end+0xff0103b4>
        (*dtor) (); 
}
 80103dc:	0001883a 	nop
 80103e0:	e037883a 	mov	sp,fp
 80103e4:	dfc00117 	ldw	ra,4(sp)
 80103e8:	df000017 	ldw	fp,0(sp)
 80103ec:	dec00204 	addi	sp,sp,8
 80103f0:	f800283a 	ret

080103f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80103f4:	defffa04 	addi	sp,sp,-24
 80103f8:	dfc00515 	stw	ra,20(sp)
 80103fc:	df000415 	stw	fp,16(sp)
 8010400:	df000404 	addi	fp,sp,16
 8010404:	e13ffe15 	stw	r4,-8(fp)
 8010408:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801040c:	e0bfff17 	ldw	r2,-4(fp)
 8010410:	10800017 	ldw	r2,0(r2)
 8010414:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8010418:	e13ffe17 	ldw	r4,-8(fp)
 801041c:	800062c0 	call	800062c <strlen>
 8010420:	10800044 	addi	r2,r2,1
 8010424:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010428:	00000d06 	br	8010460 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801042c:	e0bffc17 	ldw	r2,-16(fp)
 8010430:	10800217 	ldw	r2,8(r2)
 8010434:	e0fffd17 	ldw	r3,-12(fp)
 8010438:	180d883a 	mov	r6,r3
 801043c:	e17ffe17 	ldw	r5,-8(fp)
 8010440:	1009883a 	mov	r4,r2
 8010444:	80112400 	call	8011240 <memcmp>
 8010448:	1000021e 	bne	r2,zero,8010454 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801044c:	e0bffc17 	ldw	r2,-16(fp)
 8010450:	00000706 	br	8010470 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8010454:	e0bffc17 	ldw	r2,-16(fp)
 8010458:	10800017 	ldw	r2,0(r2)
 801045c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010460:	e0fffc17 	ldw	r3,-16(fp)
 8010464:	e0bfff17 	ldw	r2,-4(fp)
 8010468:	18bff01e 	bne	r3,r2,801042c <__alt_data_end+0xff01042c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 801046c:	0005883a 	mov	r2,zero
}
 8010470:	e037883a 	mov	sp,fp
 8010474:	dfc00117 	ldw	ra,4(sp)
 8010478:	df000017 	ldw	fp,0(sp)
 801047c:	dec00204 	addi	sp,sp,8
 8010480:	f800283a 	ret

08010484 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8010484:	defffe04 	addi	sp,sp,-8
 8010488:	dfc00115 	stw	ra,4(sp)
 801048c:	df000015 	stw	fp,0(sp)
 8010490:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8010494:	01440004 	movi	r5,4096
 8010498:	0009883a 	mov	r4,zero
 801049c:	80110c80 	call	80110c8 <alt_icache_flush>
#endif
}
 80104a0:	0001883a 	nop
 80104a4:	e037883a 	mov	sp,fp
 80104a8:	dfc00117 	ldw	ra,4(sp)
 80104ac:	df000017 	ldw	fp,0(sp)
 80104b0:	dec00204 	addi	sp,sp,8
 80104b4:	f800283a 	ret

080104b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80104b8:	defff904 	addi	sp,sp,-28
 80104bc:	dfc00615 	stw	ra,24(sp)
 80104c0:	df000515 	stw	fp,20(sp)
 80104c4:	df000504 	addi	fp,sp,20
 80104c8:	e13ffc15 	stw	r4,-16(fp)
 80104cc:	e17ffd15 	stw	r5,-12(fp)
 80104d0:	e1bffe15 	stw	r6,-8(fp)
 80104d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80104d8:	e0800217 	ldw	r2,8(fp)
 80104dc:	d8800015 	stw	r2,0(sp)
 80104e0:	e1ffff17 	ldw	r7,-4(fp)
 80104e4:	e1bffe17 	ldw	r6,-8(fp)
 80104e8:	e17ffd17 	ldw	r5,-12(fp)
 80104ec:	e13ffc17 	ldw	r4,-16(fp)
 80104f0:	80106680 	call	8010668 <alt_iic_isr_register>
}  
 80104f4:	e037883a 	mov	sp,fp
 80104f8:	dfc00117 	ldw	ra,4(sp)
 80104fc:	df000017 	ldw	fp,0(sp)
 8010500:	dec00204 	addi	sp,sp,8
 8010504:	f800283a 	ret

08010508 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8010508:	defff904 	addi	sp,sp,-28
 801050c:	df000615 	stw	fp,24(sp)
 8010510:	df000604 	addi	fp,sp,24
 8010514:	e13ffe15 	stw	r4,-8(fp)
 8010518:	e17fff15 	stw	r5,-4(fp)
 801051c:	e0bfff17 	ldw	r2,-4(fp)
 8010520:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010524:	0005303a 	rdctl	r2,status
 8010528:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801052c:	e0fffb17 	ldw	r3,-20(fp)
 8010530:	00bfff84 	movi	r2,-2
 8010534:	1884703a 	and	r2,r3,r2
 8010538:	1001703a 	wrctl	status,r2
  
  return context;
 801053c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010540:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8010544:	00c00044 	movi	r3,1
 8010548:	e0bffa17 	ldw	r2,-24(fp)
 801054c:	1884983a 	sll	r2,r3,r2
 8010550:	1007883a 	mov	r3,r2
 8010554:	d0a6e717 	ldw	r2,-25700(gp)
 8010558:	1884b03a 	or	r2,r3,r2
 801055c:	d0a6e715 	stw	r2,-25700(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010560:	d0a6e717 	ldw	r2,-25700(gp)
 8010564:	100170fa 	wrctl	ienable,r2
 8010568:	e0bffc17 	ldw	r2,-16(fp)
 801056c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010570:	e0bffd17 	ldw	r2,-12(fp)
 8010574:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010578:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 801057c:	0001883a 	nop
}
 8010580:	e037883a 	mov	sp,fp
 8010584:	df000017 	ldw	fp,0(sp)
 8010588:	dec00104 	addi	sp,sp,4
 801058c:	f800283a 	ret

08010590 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8010590:	defff904 	addi	sp,sp,-28
 8010594:	df000615 	stw	fp,24(sp)
 8010598:	df000604 	addi	fp,sp,24
 801059c:	e13ffe15 	stw	r4,-8(fp)
 80105a0:	e17fff15 	stw	r5,-4(fp)
 80105a4:	e0bfff17 	ldw	r2,-4(fp)
 80105a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80105ac:	0005303a 	rdctl	r2,status
 80105b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80105b4:	e0fffb17 	ldw	r3,-20(fp)
 80105b8:	00bfff84 	movi	r2,-2
 80105bc:	1884703a 	and	r2,r3,r2
 80105c0:	1001703a 	wrctl	status,r2
  
  return context;
 80105c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80105c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80105cc:	00c00044 	movi	r3,1
 80105d0:	e0bffa17 	ldw	r2,-24(fp)
 80105d4:	1884983a 	sll	r2,r3,r2
 80105d8:	0084303a 	nor	r2,zero,r2
 80105dc:	1007883a 	mov	r3,r2
 80105e0:	d0a6e717 	ldw	r2,-25700(gp)
 80105e4:	1884703a 	and	r2,r3,r2
 80105e8:	d0a6e715 	stw	r2,-25700(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80105ec:	d0a6e717 	ldw	r2,-25700(gp)
 80105f0:	100170fa 	wrctl	ienable,r2
 80105f4:	e0bffc17 	ldw	r2,-16(fp)
 80105f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80105fc:	e0bffd17 	ldw	r2,-12(fp)
 8010600:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010604:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8010608:	0001883a 	nop
}
 801060c:	e037883a 	mov	sp,fp
 8010610:	df000017 	ldw	fp,0(sp)
 8010614:	dec00104 	addi	sp,sp,4
 8010618:	f800283a 	ret

0801061c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 801061c:	defffc04 	addi	sp,sp,-16
 8010620:	df000315 	stw	fp,12(sp)
 8010624:	df000304 	addi	fp,sp,12
 8010628:	e13ffe15 	stw	r4,-8(fp)
 801062c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010630:	000530fa 	rdctl	r2,ienable
 8010634:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8010638:	00c00044 	movi	r3,1
 801063c:	e0bfff17 	ldw	r2,-4(fp)
 8010640:	1884983a 	sll	r2,r3,r2
 8010644:	1007883a 	mov	r3,r2
 8010648:	e0bffd17 	ldw	r2,-12(fp)
 801064c:	1884703a 	and	r2,r3,r2
 8010650:	1004c03a 	cmpne	r2,r2,zero
 8010654:	10803fcc 	andi	r2,r2,255
}
 8010658:	e037883a 	mov	sp,fp
 801065c:	df000017 	ldw	fp,0(sp)
 8010660:	dec00104 	addi	sp,sp,4
 8010664:	f800283a 	ret

08010668 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010668:	defff504 	addi	sp,sp,-44
 801066c:	dfc00a15 	stw	ra,40(sp)
 8010670:	df000915 	stw	fp,36(sp)
 8010674:	df000904 	addi	fp,sp,36
 8010678:	e13ffc15 	stw	r4,-16(fp)
 801067c:	e17ffd15 	stw	r5,-12(fp)
 8010680:	e1bffe15 	stw	r6,-8(fp)
 8010684:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8010688:	00bffa84 	movi	r2,-22
 801068c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010690:	e0bffd17 	ldw	r2,-12(fp)
 8010694:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8010698:	e0bff817 	ldw	r2,-32(fp)
 801069c:	10800808 	cmpgei	r2,r2,32
 80106a0:	1000271e 	bne	r2,zero,8010740 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80106a4:	0005303a 	rdctl	r2,status
 80106a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80106ac:	e0fffb17 	ldw	r3,-20(fp)
 80106b0:	00bfff84 	movi	r2,-2
 80106b4:	1884703a 	and	r2,r3,r2
 80106b8:	1001703a 	wrctl	status,r2
  
  return context;
 80106bc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80106c0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 80106c4:	00820074 	movhi	r2,2049
 80106c8:	10945d04 	addi	r2,r2,20852
 80106cc:	e0fff817 	ldw	r3,-32(fp)
 80106d0:	180690fa 	slli	r3,r3,3
 80106d4:	10c5883a 	add	r2,r2,r3
 80106d8:	e0fffe17 	ldw	r3,-8(fp)
 80106dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80106e0:	00820074 	movhi	r2,2049
 80106e4:	10945d04 	addi	r2,r2,20852
 80106e8:	e0fff817 	ldw	r3,-32(fp)
 80106ec:	180690fa 	slli	r3,r3,3
 80106f0:	10c5883a 	add	r2,r2,r3
 80106f4:	10800104 	addi	r2,r2,4
 80106f8:	e0ffff17 	ldw	r3,-4(fp)
 80106fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010700:	e0bffe17 	ldw	r2,-8(fp)
 8010704:	10000526 	beq	r2,zero,801071c <alt_iic_isr_register+0xb4>
 8010708:	e0bff817 	ldw	r2,-32(fp)
 801070c:	100b883a 	mov	r5,r2
 8010710:	e13ffc17 	ldw	r4,-16(fp)
 8010714:	80105080 	call	8010508 <alt_ic_irq_enable>
 8010718:	00000406 	br	801072c <alt_iic_isr_register+0xc4>
 801071c:	e0bff817 	ldw	r2,-32(fp)
 8010720:	100b883a 	mov	r5,r2
 8010724:	e13ffc17 	ldw	r4,-16(fp)
 8010728:	80105900 	call	8010590 <alt_ic_irq_disable>
 801072c:	e0bff715 	stw	r2,-36(fp)
 8010730:	e0bffa17 	ldw	r2,-24(fp)
 8010734:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010738:	e0bff917 	ldw	r2,-28(fp)
 801073c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8010740:	e0bff717 	ldw	r2,-36(fp)
}
 8010744:	e037883a 	mov	sp,fp
 8010748:	dfc00117 	ldw	ra,4(sp)
 801074c:	df000017 	ldw	fp,0(sp)
 8010750:	dec00204 	addi	sp,sp,8
 8010754:	f800283a 	ret

08010758 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8010758:	defff904 	addi	sp,sp,-28
 801075c:	dfc00615 	stw	ra,24(sp)
 8010760:	df000515 	stw	fp,20(sp)
 8010764:	df000504 	addi	fp,sp,20
 8010768:	e13ffc15 	stw	r4,-16(fp)
 801076c:	e17ffd15 	stw	r5,-12(fp)
 8010770:	e1bffe15 	stw	r6,-8(fp)
 8010774:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8010778:	e1bfff17 	ldw	r6,-4(fp)
 801077c:	e17ffe17 	ldw	r5,-8(fp)
 8010780:	e13ffd17 	ldw	r4,-12(fp)
 8010784:	80109980 	call	8010998 <open>
 8010788:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 801078c:	e0bffb17 	ldw	r2,-20(fp)
 8010790:	10001c16 	blt	r2,zero,8010804 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8010794:	00820074 	movhi	r2,2049
 8010798:	1088e204 	addi	r2,r2,9096
 801079c:	e0fffb17 	ldw	r3,-20(fp)
 80107a0:	18c00324 	muli	r3,r3,12
 80107a4:	10c5883a 	add	r2,r2,r3
 80107a8:	10c00017 	ldw	r3,0(r2)
 80107ac:	e0bffc17 	ldw	r2,-16(fp)
 80107b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80107b4:	00820074 	movhi	r2,2049
 80107b8:	1088e204 	addi	r2,r2,9096
 80107bc:	e0fffb17 	ldw	r3,-20(fp)
 80107c0:	18c00324 	muli	r3,r3,12
 80107c4:	10c5883a 	add	r2,r2,r3
 80107c8:	10800104 	addi	r2,r2,4
 80107cc:	10c00017 	ldw	r3,0(r2)
 80107d0:	e0bffc17 	ldw	r2,-16(fp)
 80107d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80107d8:	00820074 	movhi	r2,2049
 80107dc:	1088e204 	addi	r2,r2,9096
 80107e0:	e0fffb17 	ldw	r3,-20(fp)
 80107e4:	18c00324 	muli	r3,r3,12
 80107e8:	10c5883a 	add	r2,r2,r3
 80107ec:	10800204 	addi	r2,r2,8
 80107f0:	10c00017 	ldw	r3,0(r2)
 80107f4:	e0bffc17 	ldw	r2,-16(fp)
 80107f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80107fc:	e13ffb17 	ldw	r4,-20(fp)
 8010800:	800d5080 	call	800d508 <alt_release_fd>
  }
} 
 8010804:	0001883a 	nop
 8010808:	e037883a 	mov	sp,fp
 801080c:	dfc00117 	ldw	ra,4(sp)
 8010810:	df000017 	ldw	fp,0(sp)
 8010814:	dec00204 	addi	sp,sp,8
 8010818:	f800283a 	ret

0801081c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 801081c:	defffb04 	addi	sp,sp,-20
 8010820:	dfc00415 	stw	ra,16(sp)
 8010824:	df000315 	stw	fp,12(sp)
 8010828:	df000304 	addi	fp,sp,12
 801082c:	e13ffd15 	stw	r4,-12(fp)
 8010830:	e17ffe15 	stw	r5,-8(fp)
 8010834:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8010838:	01c07fc4 	movi	r7,511
 801083c:	01800044 	movi	r6,1
 8010840:	e17ffd17 	ldw	r5,-12(fp)
 8010844:	01020074 	movhi	r4,2049
 8010848:	2108e504 	addi	r4,r4,9108
 801084c:	80107580 	call	8010758 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8010850:	01c07fc4 	movi	r7,511
 8010854:	000d883a 	mov	r6,zero
 8010858:	e17ffe17 	ldw	r5,-8(fp)
 801085c:	01020074 	movhi	r4,2049
 8010860:	2108e204 	addi	r4,r4,9096
 8010864:	80107580 	call	8010758 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8010868:	01c07fc4 	movi	r7,511
 801086c:	01800044 	movi	r6,1
 8010870:	e17fff17 	ldw	r5,-4(fp)
 8010874:	01020074 	movhi	r4,2049
 8010878:	2108e804 	addi	r4,r4,9120
 801087c:	80107580 	call	8010758 <alt_open_fd>
}  
 8010880:	0001883a 	nop
 8010884:	e037883a 	mov	sp,fp
 8010888:	dfc00117 	ldw	ra,4(sp)
 801088c:	df000017 	ldw	fp,0(sp)
 8010890:	dec00204 	addi	sp,sp,8
 8010894:	f800283a 	ret

08010898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010898:	defffe04 	addi	sp,sp,-8
 801089c:	dfc00115 	stw	ra,4(sp)
 80108a0:	df000015 	stw	fp,0(sp)
 80108a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80108a8:	d0a00b17 	ldw	r2,-32724(gp)
 80108ac:	10000326 	beq	r2,zero,80108bc <alt_get_errno+0x24>
 80108b0:	d0a00b17 	ldw	r2,-32724(gp)
 80108b4:	103ee83a 	callr	r2
 80108b8:	00000106 	br	80108c0 <alt_get_errno+0x28>
 80108bc:	d0a6e304 	addi	r2,gp,-25716
}
 80108c0:	e037883a 	mov	sp,fp
 80108c4:	dfc00117 	ldw	ra,4(sp)
 80108c8:	df000017 	ldw	fp,0(sp)
 80108cc:	dec00204 	addi	sp,sp,8
 80108d0:	f800283a 	ret

080108d4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80108d4:	defffd04 	addi	sp,sp,-12
 80108d8:	df000215 	stw	fp,8(sp)
 80108dc:	df000204 	addi	fp,sp,8
 80108e0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80108e4:	e0bfff17 	ldw	r2,-4(fp)
 80108e8:	10800217 	ldw	r2,8(r2)
 80108ec:	10d00034 	orhi	r3,r2,16384
 80108f0:	e0bfff17 	ldw	r2,-4(fp)
 80108f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80108f8:	e03ffe15 	stw	zero,-8(fp)
 80108fc:	00001d06 	br	8010974 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010900:	00820074 	movhi	r2,2049
 8010904:	1088e204 	addi	r2,r2,9096
 8010908:	e0fffe17 	ldw	r3,-8(fp)
 801090c:	18c00324 	muli	r3,r3,12
 8010910:	10c5883a 	add	r2,r2,r3
 8010914:	10c00017 	ldw	r3,0(r2)
 8010918:	e0bfff17 	ldw	r2,-4(fp)
 801091c:	10800017 	ldw	r2,0(r2)
 8010920:	1880111e 	bne	r3,r2,8010968 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010924:	00820074 	movhi	r2,2049
 8010928:	1088e204 	addi	r2,r2,9096
 801092c:	e0fffe17 	ldw	r3,-8(fp)
 8010930:	18c00324 	muli	r3,r3,12
 8010934:	10c5883a 	add	r2,r2,r3
 8010938:	10800204 	addi	r2,r2,8
 801093c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010940:	1000090e 	bge	r2,zero,8010968 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8010944:	e0bffe17 	ldw	r2,-8(fp)
 8010948:	10c00324 	muli	r3,r2,12
 801094c:	00820074 	movhi	r2,2049
 8010950:	1088e204 	addi	r2,r2,9096
 8010954:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010958:	e0bfff17 	ldw	r2,-4(fp)
 801095c:	18800226 	beq	r3,r2,8010968 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8010960:	00bffcc4 	movi	r2,-13
 8010964:	00000806 	br	8010988 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010968:	e0bffe17 	ldw	r2,-8(fp)
 801096c:	10800044 	addi	r2,r2,1
 8010970:	e0bffe15 	stw	r2,-8(fp)
 8010974:	d0a00a17 	ldw	r2,-32728(gp)
 8010978:	1007883a 	mov	r3,r2
 801097c:	e0bffe17 	ldw	r2,-8(fp)
 8010980:	18bfdf2e 	bgeu	r3,r2,8010900 <__alt_data_end+0xff010900>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8010984:	0005883a 	mov	r2,zero
}
 8010988:	e037883a 	mov	sp,fp
 801098c:	df000017 	ldw	fp,0(sp)
 8010990:	dec00104 	addi	sp,sp,4
 8010994:	f800283a 	ret

08010998 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8010998:	defff604 	addi	sp,sp,-40
 801099c:	dfc00915 	stw	ra,36(sp)
 80109a0:	df000815 	stw	fp,32(sp)
 80109a4:	df000804 	addi	fp,sp,32
 80109a8:	e13ffd15 	stw	r4,-12(fp)
 80109ac:	e17ffe15 	stw	r5,-8(fp)
 80109b0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80109b4:	00bfffc4 	movi	r2,-1
 80109b8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80109bc:	00bffb44 	movi	r2,-19
 80109c0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80109c4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80109c8:	d1600804 	addi	r5,gp,-32736
 80109cc:	e13ffd17 	ldw	r4,-12(fp)
 80109d0:	80103f40 	call	80103f4 <alt_find_dev>
 80109d4:	e0bff815 	stw	r2,-32(fp)
 80109d8:	e0bff817 	ldw	r2,-32(fp)
 80109dc:	1000051e 	bne	r2,zero,80109f4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80109e0:	e13ffd17 	ldw	r4,-12(fp)
 80109e4:	8010f1c0 	call	8010f1c <alt_find_file>
 80109e8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80109ec:	00800044 	movi	r2,1
 80109f0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80109f4:	e0bff817 	ldw	r2,-32(fp)
 80109f8:	10002926 	beq	r2,zero,8010aa0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80109fc:	e13ff817 	ldw	r4,-32(fp)
 8010a00:	80110240 	call	8011024 <alt_get_fd>
 8010a04:	e0bff915 	stw	r2,-28(fp)
 8010a08:	e0bff917 	ldw	r2,-28(fp)
 8010a0c:	1000030e 	bge	r2,zero,8010a1c <open+0x84>
    {
      status = index;
 8010a10:	e0bff917 	ldw	r2,-28(fp)
 8010a14:	e0bffa15 	stw	r2,-24(fp)
 8010a18:	00002306 	br	8010aa8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 8010a1c:	e0bff917 	ldw	r2,-28(fp)
 8010a20:	10c00324 	muli	r3,r2,12
 8010a24:	00820074 	movhi	r2,2049
 8010a28:	1088e204 	addi	r2,r2,9096
 8010a2c:	1885883a 	add	r2,r3,r2
 8010a30:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8010a34:	e0fffe17 	ldw	r3,-8(fp)
 8010a38:	00900034 	movhi	r2,16384
 8010a3c:	10bfffc4 	addi	r2,r2,-1
 8010a40:	1886703a 	and	r3,r3,r2
 8010a44:	e0bffc17 	ldw	r2,-16(fp)
 8010a48:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8010a4c:	e0bffb17 	ldw	r2,-20(fp)
 8010a50:	1000051e 	bne	r2,zero,8010a68 <open+0xd0>
 8010a54:	e13ffc17 	ldw	r4,-16(fp)
 8010a58:	80108d40 	call	80108d4 <alt_file_locked>
 8010a5c:	e0bffa15 	stw	r2,-24(fp)
 8010a60:	e0bffa17 	ldw	r2,-24(fp)
 8010a64:	10001016 	blt	r2,zero,8010aa8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8010a68:	e0bff817 	ldw	r2,-32(fp)
 8010a6c:	10800317 	ldw	r2,12(r2)
 8010a70:	10000826 	beq	r2,zero,8010a94 <open+0xfc>
 8010a74:	e0bff817 	ldw	r2,-32(fp)
 8010a78:	10800317 	ldw	r2,12(r2)
 8010a7c:	e1ffff17 	ldw	r7,-4(fp)
 8010a80:	e1bffe17 	ldw	r6,-8(fp)
 8010a84:	e17ffd17 	ldw	r5,-12(fp)
 8010a88:	e13ffc17 	ldw	r4,-16(fp)
 8010a8c:	103ee83a 	callr	r2
 8010a90:	00000106 	br	8010a98 <open+0x100>
 8010a94:	0005883a 	mov	r2,zero
 8010a98:	e0bffa15 	stw	r2,-24(fp)
 8010a9c:	00000206 	br	8010aa8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8010aa0:	00bffb44 	movi	r2,-19
 8010aa4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8010aa8:	e0bffa17 	ldw	r2,-24(fp)
 8010aac:	1000090e 	bge	r2,zero,8010ad4 <open+0x13c>
  {
    alt_release_fd (index);  
 8010ab0:	e13ff917 	ldw	r4,-28(fp)
 8010ab4:	800d5080 	call	800d508 <alt_release_fd>
    ALT_ERRNO = -status;
 8010ab8:	80108980 	call	8010898 <alt_get_errno>
 8010abc:	1007883a 	mov	r3,r2
 8010ac0:	e0bffa17 	ldw	r2,-24(fp)
 8010ac4:	0085c83a 	sub	r2,zero,r2
 8010ac8:	18800015 	stw	r2,0(r3)
    return -1;
 8010acc:	00bfffc4 	movi	r2,-1
 8010ad0:	00000106 	br	8010ad8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 8010ad4:	e0bff917 	ldw	r2,-28(fp)
}
 8010ad8:	e037883a 	mov	sp,fp
 8010adc:	dfc00117 	ldw	ra,4(sp)
 8010ae0:	df000017 	ldw	fp,0(sp)
 8010ae4:	dec00204 	addi	sp,sp,8
 8010ae8:	f800283a 	ret

08010aec <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8010aec:	defff204 	addi	sp,sp,-56
 8010af0:	dfc00a15 	stw	ra,40(sp)
 8010af4:	df000915 	stw	fp,36(sp)
 8010af8:	df000904 	addi	fp,sp,36
 8010afc:	e13fff15 	stw	r4,-4(fp)
 8010b00:	e1400215 	stw	r5,8(fp)
 8010b04:	e1800315 	stw	r6,12(fp)
 8010b08:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 8010b0c:	e0800204 	addi	r2,fp,8
 8010b10:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8010b14:	e0bfff17 	ldw	r2,-4(fp)
 8010b18:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 8010b1c:	00006f06 	br	8010cdc <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8010b20:	e0bff807 	ldb	r2,-32(fp)
 8010b24:	10800960 	cmpeqi	r2,r2,37
 8010b28:	1000041e 	bne	r2,zero,8010b3c <alt_printf+0x50>
        {
            alt_putchar(c);
 8010b2c:	e0bff807 	ldb	r2,-32(fp)
 8010b30:	1009883a 	mov	r4,r2
 8010b34:	8010d180 	call	8010d18 <alt_putchar>
 8010b38:	00006806 	br	8010cdc <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8010b3c:	e0bff717 	ldw	r2,-36(fp)
 8010b40:	10c00044 	addi	r3,r2,1
 8010b44:	e0fff715 	stw	r3,-36(fp)
 8010b48:	10800003 	ldbu	r2,0(r2)
 8010b4c:	e0bff805 	stb	r2,-32(fp)
 8010b50:	e0bff807 	ldb	r2,-32(fp)
 8010b54:	10006926 	beq	r2,zero,8010cfc <alt_printf+0x210>
            {
                if (c == '%')
 8010b58:	e0bff807 	ldb	r2,-32(fp)
 8010b5c:	10800958 	cmpnei	r2,r2,37
 8010b60:	1000041e 	bne	r2,zero,8010b74 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8010b64:	e0bff807 	ldb	r2,-32(fp)
 8010b68:	1009883a 	mov	r4,r2
 8010b6c:	8010d180 	call	8010d18 <alt_putchar>
 8010b70:	00005a06 	br	8010cdc <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 8010b74:	e0bff807 	ldb	r2,-32(fp)
 8010b78:	108018d8 	cmpnei	r2,r2,99
 8010b7c:	1000081e 	bne	r2,zero,8010ba0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 8010b80:	e0bffe17 	ldw	r2,-8(fp)
 8010b84:	10c00104 	addi	r3,r2,4
 8010b88:	e0fffe15 	stw	r3,-8(fp)
 8010b8c:	10800017 	ldw	r2,0(r2)
 8010b90:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 8010b94:	e13ffd17 	ldw	r4,-12(fp)
 8010b98:	8010d180 	call	8010d18 <alt_putchar>
 8010b9c:	00004f06 	br	8010cdc <alt_printf+0x1f0>
                }
                else if (c == 'x')
 8010ba0:	e0bff807 	ldb	r2,-32(fp)
 8010ba4:	10801e18 	cmpnei	r2,r2,120
 8010ba8:	1000341e 	bne	r2,zero,8010c7c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 8010bac:	e0bffe17 	ldw	r2,-8(fp)
 8010bb0:	10c00104 	addi	r3,r2,4
 8010bb4:	e0fffe15 	stw	r3,-8(fp)
 8010bb8:	10800017 	ldw	r2,0(r2)
 8010bbc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 8010bc0:	e0bffb17 	ldw	r2,-20(fp)
 8010bc4:	1000031e 	bne	r2,zero,8010bd4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 8010bc8:	01000c04 	movi	r4,48
 8010bcc:	8010d180 	call	8010d18 <alt_putchar>
                        continue;
 8010bd0:	00004206 	br	8010cdc <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 8010bd4:	00800704 	movi	r2,28
 8010bd8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 8010bdc:	00000306 	br	8010bec <alt_printf+0x100>
                        digit_shift -= 4;
 8010be0:	e0bff917 	ldw	r2,-28(fp)
 8010be4:	10bfff04 	addi	r2,r2,-4
 8010be8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8010bec:	00c003c4 	movi	r3,15
 8010bf0:	e0bff917 	ldw	r2,-28(fp)
 8010bf4:	1884983a 	sll	r2,r3,r2
 8010bf8:	1007883a 	mov	r3,r2
 8010bfc:	e0bffb17 	ldw	r2,-20(fp)
 8010c00:	1884703a 	and	r2,r3,r2
 8010c04:	103ff626 	beq	r2,zero,8010be0 <__alt_data_end+0xff010be0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8010c08:	00001906 	br	8010c70 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8010c0c:	00c003c4 	movi	r3,15
 8010c10:	e0bff917 	ldw	r2,-28(fp)
 8010c14:	1884983a 	sll	r2,r3,r2
 8010c18:	1007883a 	mov	r3,r2
 8010c1c:	e0bffb17 	ldw	r2,-20(fp)
 8010c20:	1886703a 	and	r3,r3,r2
 8010c24:	e0bff917 	ldw	r2,-28(fp)
 8010c28:	1884d83a 	srl	r2,r3,r2
 8010c2c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 8010c30:	e0bffc17 	ldw	r2,-16(fp)
 8010c34:	108002a8 	cmpgeui	r2,r2,10
 8010c38:	1000041e 	bne	r2,zero,8010c4c <alt_printf+0x160>
                            c = '0' + digit;
 8010c3c:	e0bffc17 	ldw	r2,-16(fp)
 8010c40:	10800c04 	addi	r2,r2,48
 8010c44:	e0bff805 	stb	r2,-32(fp)
 8010c48:	00000306 	br	8010c58 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 8010c4c:	e0bffc17 	ldw	r2,-16(fp)
 8010c50:	108015c4 	addi	r2,r2,87
 8010c54:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 8010c58:	e0bff807 	ldb	r2,-32(fp)
 8010c5c:	1009883a 	mov	r4,r2
 8010c60:	8010d180 	call	8010d18 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8010c64:	e0bff917 	ldw	r2,-28(fp)
 8010c68:	10bfff04 	addi	r2,r2,-4
 8010c6c:	e0bff915 	stw	r2,-28(fp)
 8010c70:	e0bff917 	ldw	r2,-28(fp)
 8010c74:	103fe50e 	bge	r2,zero,8010c0c <__alt_data_end+0xff010c0c>
 8010c78:	00001806 	br	8010cdc <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8010c7c:	e0bff807 	ldb	r2,-32(fp)
 8010c80:	10801cd8 	cmpnei	r2,r2,115
 8010c84:	1000151e 	bne	r2,zero,8010cdc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 8010c88:	e0bffe17 	ldw	r2,-8(fp)
 8010c8c:	10c00104 	addi	r3,r2,4
 8010c90:	e0fffe15 	stw	r3,-8(fp)
 8010c94:	10800017 	ldw	r2,0(r2)
 8010c98:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 8010c9c:	00000906 	br	8010cc4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 8010ca0:	e0bffa17 	ldw	r2,-24(fp)
 8010ca4:	10c00044 	addi	r3,r2,1
 8010ca8:	e0fffa15 	stw	r3,-24(fp)
 8010cac:	10800003 	ldbu	r2,0(r2)
 8010cb0:	10803fcc 	andi	r2,r2,255
 8010cb4:	1080201c 	xori	r2,r2,128
 8010cb8:	10bfe004 	addi	r2,r2,-128
 8010cbc:	1009883a 	mov	r4,r2
 8010cc0:	8010d180 	call	8010d18 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 8010cc4:	e0bffa17 	ldw	r2,-24(fp)
 8010cc8:	10800003 	ldbu	r2,0(r2)
 8010ccc:	10803fcc 	andi	r2,r2,255
 8010cd0:	1080201c 	xori	r2,r2,128
 8010cd4:	10bfe004 	addi	r2,r2,-128
 8010cd8:	103ff11e 	bne	r2,zero,8010ca0 <__alt_data_end+0xff010ca0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 8010cdc:	e0bff717 	ldw	r2,-36(fp)
 8010ce0:	10c00044 	addi	r3,r2,1
 8010ce4:	e0fff715 	stw	r3,-36(fp)
 8010ce8:	10800003 	ldbu	r2,0(r2)
 8010cec:	e0bff805 	stb	r2,-32(fp)
 8010cf0:	e0bff807 	ldb	r2,-32(fp)
 8010cf4:	103f8a1e 	bne	r2,zero,8010b20 <__alt_data_end+0xff010b20>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8010cf8:	00000106 	br	8010d00 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 8010cfc:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8010d00:	0001883a 	nop
 8010d04:	e037883a 	mov	sp,fp
 8010d08:	dfc00117 	ldw	ra,4(sp)
 8010d0c:	df000017 	ldw	fp,0(sp)
 8010d10:	dec00504 	addi	sp,sp,20
 8010d14:	f800283a 	ret

08010d18 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8010d18:	defffd04 	addi	sp,sp,-12
 8010d1c:	dfc00215 	stw	ra,8(sp)
 8010d20:	df000115 	stw	fp,4(sp)
 8010d24:	df000104 	addi	fp,sp,4
 8010d28:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 8010d2c:	d0a00117 	ldw	r2,-32764(gp)
 8010d30:	10800217 	ldw	r2,8(r2)
 8010d34:	100b883a 	mov	r5,r2
 8010d38:	e13fff17 	ldw	r4,-4(fp)
 8010d3c:	801135c0 	call	801135c <putc>
#endif
#endif
}
 8010d40:	e037883a 	mov	sp,fp
 8010d44:	dfc00117 	ldw	ra,4(sp)
 8010d48:	df000017 	ldw	fp,0(sp)
 8010d4c:	dec00204 	addi	sp,sp,8
 8010d50:	f800283a 	ret

08010d54 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8010d54:	defffa04 	addi	sp,sp,-24
 8010d58:	df000515 	stw	fp,20(sp)
 8010d5c:	df000504 	addi	fp,sp,20
 8010d60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010d64:	0005303a 	rdctl	r2,status
 8010d68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010d6c:	e0fffc17 	ldw	r3,-16(fp)
 8010d70:	00bfff84 	movi	r2,-2
 8010d74:	1884703a 	and	r2,r3,r2
 8010d78:	1001703a 	wrctl	status,r2
  
  return context;
 8010d7c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8010d80:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8010d84:	e0bfff17 	ldw	r2,-4(fp)
 8010d88:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8010d8c:	e0bffd17 	ldw	r2,-12(fp)
 8010d90:	10800017 	ldw	r2,0(r2)
 8010d94:	e0fffd17 	ldw	r3,-12(fp)
 8010d98:	18c00117 	ldw	r3,4(r3)
 8010d9c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8010da0:	e0bffd17 	ldw	r2,-12(fp)
 8010da4:	10800117 	ldw	r2,4(r2)
 8010da8:	e0fffd17 	ldw	r3,-12(fp)
 8010dac:	18c00017 	ldw	r3,0(r3)
 8010db0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010db4:	e0bffd17 	ldw	r2,-12(fp)
 8010db8:	e0fffd17 	ldw	r3,-12(fp)
 8010dbc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010dc0:	e0bffd17 	ldw	r2,-12(fp)
 8010dc4:	e0fffd17 	ldw	r3,-12(fp)
 8010dc8:	10c00015 	stw	r3,0(r2)
 8010dcc:	e0bffb17 	ldw	r2,-20(fp)
 8010dd0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010dd4:	e0bffe17 	ldw	r2,-8(fp)
 8010dd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8010ddc:	0001883a 	nop
 8010de0:	e037883a 	mov	sp,fp
 8010de4:	df000017 	ldw	fp,0(sp)
 8010de8:	dec00104 	addi	sp,sp,4
 8010dec:	f800283a 	ret

08010df0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8010df0:	defffb04 	addi	sp,sp,-20
 8010df4:	dfc00415 	stw	ra,16(sp)
 8010df8:	df000315 	stw	fp,12(sp)
 8010dfc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8010e00:	d0a01017 	ldw	r2,-32704(gp)
 8010e04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010e08:	d0a6e917 	ldw	r2,-25692(gp)
 8010e0c:	10800044 	addi	r2,r2,1
 8010e10:	d0a6e915 	stw	r2,-25692(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010e14:	00002e06 	br	8010ed0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010e18:	e0bffd17 	ldw	r2,-12(fp)
 8010e1c:	10800017 	ldw	r2,0(r2)
 8010e20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8010e24:	e0bffd17 	ldw	r2,-12(fp)
 8010e28:	10800403 	ldbu	r2,16(r2)
 8010e2c:	10803fcc 	andi	r2,r2,255
 8010e30:	10000426 	beq	r2,zero,8010e44 <alt_tick+0x54>
 8010e34:	d0a6e917 	ldw	r2,-25692(gp)
 8010e38:	1000021e 	bne	r2,zero,8010e44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8010e3c:	e0bffd17 	ldw	r2,-12(fp)
 8010e40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8010e44:	e0bffd17 	ldw	r2,-12(fp)
 8010e48:	10800217 	ldw	r2,8(r2)
 8010e4c:	d0e6e917 	ldw	r3,-25692(gp)
 8010e50:	18801d36 	bltu	r3,r2,8010ec8 <alt_tick+0xd8>
 8010e54:	e0bffd17 	ldw	r2,-12(fp)
 8010e58:	10800403 	ldbu	r2,16(r2)
 8010e5c:	10803fcc 	andi	r2,r2,255
 8010e60:	1000191e 	bne	r2,zero,8010ec8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8010e64:	e0bffd17 	ldw	r2,-12(fp)
 8010e68:	10800317 	ldw	r2,12(r2)
 8010e6c:	e0fffd17 	ldw	r3,-12(fp)
 8010e70:	18c00517 	ldw	r3,20(r3)
 8010e74:	1809883a 	mov	r4,r3
 8010e78:	103ee83a 	callr	r2
 8010e7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8010e80:	e0bfff17 	ldw	r2,-4(fp)
 8010e84:	1000031e 	bne	r2,zero,8010e94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010e88:	e13ffd17 	ldw	r4,-12(fp)
 8010e8c:	8010d540 	call	8010d54 <alt_alarm_stop>
 8010e90:	00000d06 	br	8010ec8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8010e94:	e0bffd17 	ldw	r2,-12(fp)
 8010e98:	10c00217 	ldw	r3,8(r2)
 8010e9c:	e0bfff17 	ldw	r2,-4(fp)
 8010ea0:	1887883a 	add	r3,r3,r2
 8010ea4:	e0bffd17 	ldw	r2,-12(fp)
 8010ea8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010eac:	e0bffd17 	ldw	r2,-12(fp)
 8010eb0:	10c00217 	ldw	r3,8(r2)
 8010eb4:	d0a6e917 	ldw	r2,-25692(gp)
 8010eb8:	1880032e 	bgeu	r3,r2,8010ec8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010ebc:	e0bffd17 	ldw	r2,-12(fp)
 8010ec0:	00c00044 	movi	r3,1
 8010ec4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010ec8:	e0bffe17 	ldw	r2,-8(fp)
 8010ecc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010ed0:	e0fffd17 	ldw	r3,-12(fp)
 8010ed4:	d0a01004 	addi	r2,gp,-32704
 8010ed8:	18bfcf1e 	bne	r3,r2,8010e18 <__alt_data_end+0xff010e18>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010edc:	0001883a 	nop
}
 8010ee0:	0001883a 	nop
 8010ee4:	e037883a 	mov	sp,fp
 8010ee8:	dfc00117 	ldw	ra,4(sp)
 8010eec:	df000017 	ldw	fp,0(sp)
 8010ef0:	dec00204 	addi	sp,sp,8
 8010ef4:	f800283a 	ret

08010ef8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8010ef8:	deffff04 	addi	sp,sp,-4
 8010efc:	df000015 	stw	fp,0(sp)
 8010f00:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8010f04:	000170fa 	wrctl	ienable,zero
}
 8010f08:	0001883a 	nop
 8010f0c:	e037883a 	mov	sp,fp
 8010f10:	df000017 	ldw	fp,0(sp)
 8010f14:	dec00104 	addi	sp,sp,4
 8010f18:	f800283a 	ret

08010f1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8010f1c:	defffb04 	addi	sp,sp,-20
 8010f20:	dfc00415 	stw	ra,16(sp)
 8010f24:	df000315 	stw	fp,12(sp)
 8010f28:	df000304 	addi	fp,sp,12
 8010f2c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8010f30:	d0a00617 	ldw	r2,-32744(gp)
 8010f34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010f38:	00003106 	br	8011000 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8010f3c:	e0bffd17 	ldw	r2,-12(fp)
 8010f40:	10800217 	ldw	r2,8(r2)
 8010f44:	1009883a 	mov	r4,r2
 8010f48:	800062c0 	call	800062c <strlen>
 8010f4c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8010f50:	e0bffd17 	ldw	r2,-12(fp)
 8010f54:	10c00217 	ldw	r3,8(r2)
 8010f58:	e0bffe17 	ldw	r2,-8(fp)
 8010f5c:	10bfffc4 	addi	r2,r2,-1
 8010f60:	1885883a 	add	r2,r3,r2
 8010f64:	10800003 	ldbu	r2,0(r2)
 8010f68:	10803fcc 	andi	r2,r2,255
 8010f6c:	1080201c 	xori	r2,r2,128
 8010f70:	10bfe004 	addi	r2,r2,-128
 8010f74:	10800bd8 	cmpnei	r2,r2,47
 8010f78:	1000031e 	bne	r2,zero,8010f88 <alt_find_file+0x6c>
    {
      len -= 1;
 8010f7c:	e0bffe17 	ldw	r2,-8(fp)
 8010f80:	10bfffc4 	addi	r2,r2,-1
 8010f84:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010f88:	e0bffe17 	ldw	r2,-8(fp)
 8010f8c:	e0ffff17 	ldw	r3,-4(fp)
 8010f90:	1885883a 	add	r2,r3,r2
 8010f94:	10800003 	ldbu	r2,0(r2)
 8010f98:	10803fcc 	andi	r2,r2,255
 8010f9c:	1080201c 	xori	r2,r2,128
 8010fa0:	10bfe004 	addi	r2,r2,-128
 8010fa4:	10800be0 	cmpeqi	r2,r2,47
 8010fa8:	1000081e 	bne	r2,zero,8010fcc <alt_find_file+0xb0>
 8010fac:	e0bffe17 	ldw	r2,-8(fp)
 8010fb0:	e0ffff17 	ldw	r3,-4(fp)
 8010fb4:	1885883a 	add	r2,r3,r2
 8010fb8:	10800003 	ldbu	r2,0(r2)
 8010fbc:	10803fcc 	andi	r2,r2,255
 8010fc0:	1080201c 	xori	r2,r2,128
 8010fc4:	10bfe004 	addi	r2,r2,-128
 8010fc8:	10000a1e 	bne	r2,zero,8010ff4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8010fcc:	e0bffd17 	ldw	r2,-12(fp)
 8010fd0:	10800217 	ldw	r2,8(r2)
 8010fd4:	e0fffe17 	ldw	r3,-8(fp)
 8010fd8:	180d883a 	mov	r6,r3
 8010fdc:	e17fff17 	ldw	r5,-4(fp)
 8010fe0:	1009883a 	mov	r4,r2
 8010fe4:	80112400 	call	8011240 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010fe8:	1000021e 	bne	r2,zero,8010ff4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8010fec:	e0bffd17 	ldw	r2,-12(fp)
 8010ff0:	00000706 	br	8011010 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8010ff4:	e0bffd17 	ldw	r2,-12(fp)
 8010ff8:	10800017 	ldw	r2,0(r2)
 8010ffc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011000:	e0fffd17 	ldw	r3,-12(fp)
 8011004:	d0a00604 	addi	r2,gp,-32744
 8011008:	18bfcc1e 	bne	r3,r2,8010f3c <__alt_data_end+0xff010f3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 801100c:	0005883a 	mov	r2,zero
}
 8011010:	e037883a 	mov	sp,fp
 8011014:	dfc00117 	ldw	ra,4(sp)
 8011018:	df000017 	ldw	fp,0(sp)
 801101c:	dec00204 	addi	sp,sp,8
 8011020:	f800283a 	ret

08011024 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8011024:	defffc04 	addi	sp,sp,-16
 8011028:	df000315 	stw	fp,12(sp)
 801102c:	df000304 	addi	fp,sp,12
 8011030:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8011034:	00bffa04 	movi	r2,-24
 8011038:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801103c:	e03ffd15 	stw	zero,-12(fp)
 8011040:	00001906 	br	80110a8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8011044:	00820074 	movhi	r2,2049
 8011048:	1088e204 	addi	r2,r2,9096
 801104c:	e0fffd17 	ldw	r3,-12(fp)
 8011050:	18c00324 	muli	r3,r3,12
 8011054:	10c5883a 	add	r2,r2,r3
 8011058:	10800017 	ldw	r2,0(r2)
 801105c:	10000f1e 	bne	r2,zero,801109c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 8011060:	00820074 	movhi	r2,2049
 8011064:	1088e204 	addi	r2,r2,9096
 8011068:	e0fffd17 	ldw	r3,-12(fp)
 801106c:	18c00324 	muli	r3,r3,12
 8011070:	10c5883a 	add	r2,r2,r3
 8011074:	e0ffff17 	ldw	r3,-4(fp)
 8011078:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 801107c:	d0e00a17 	ldw	r3,-32728(gp)
 8011080:	e0bffd17 	ldw	r2,-12(fp)
 8011084:	1880020e 	bge	r3,r2,8011090 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8011088:	e0bffd17 	ldw	r2,-12(fp)
 801108c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 8011090:	e0bffd17 	ldw	r2,-12(fp)
 8011094:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8011098:	00000606 	br	80110b4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801109c:	e0bffd17 	ldw	r2,-12(fp)
 80110a0:	10800044 	addi	r2,r2,1
 80110a4:	e0bffd15 	stw	r2,-12(fp)
 80110a8:	e0bffd17 	ldw	r2,-12(fp)
 80110ac:	10800810 	cmplti	r2,r2,32
 80110b0:	103fe41e 	bne	r2,zero,8011044 <__alt_data_end+0xff011044>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80110b4:	e0bffe17 	ldw	r2,-8(fp)
}
 80110b8:	e037883a 	mov	sp,fp
 80110bc:	df000017 	ldw	fp,0(sp)
 80110c0:	dec00104 	addi	sp,sp,4
 80110c4:	f800283a 	ret

080110c8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 80110c8:	defffb04 	addi	sp,sp,-20
 80110cc:	df000415 	stw	fp,16(sp)
 80110d0:	df000404 	addi	fp,sp,16
 80110d4:	e13ffe15 	stw	r4,-8(fp)
 80110d8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 80110dc:	e0bfff17 	ldw	r2,-4(fp)
 80110e0:	10840070 	cmpltui	r2,r2,4097
 80110e4:	1000021e 	bne	r2,zero,80110f0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 80110e8:	00840004 	movi	r2,4096
 80110ec:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 80110f0:	e0fffe17 	ldw	r3,-8(fp)
 80110f4:	e0bfff17 	ldw	r2,-4(fp)
 80110f8:	1885883a 	add	r2,r3,r2
 80110fc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8011100:	e0bffe17 	ldw	r2,-8(fp)
 8011104:	e0bffc15 	stw	r2,-16(fp)
 8011108:	00000506 	br	8011120 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 801110c:	e0bffc17 	ldw	r2,-16(fp)
 8011110:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8011114:	e0bffc17 	ldw	r2,-16(fp)
 8011118:	10800804 	addi	r2,r2,32
 801111c:	e0bffc15 	stw	r2,-16(fp)
 8011120:	e0fffc17 	ldw	r3,-16(fp)
 8011124:	e0bffd17 	ldw	r2,-12(fp)
 8011128:	18bff836 	bltu	r3,r2,801110c <__alt_data_end+0xff01110c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 801112c:	e0bffe17 	ldw	r2,-8(fp)
 8011130:	108007cc 	andi	r2,r2,31
 8011134:	10000226 	beq	r2,zero,8011140 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8011138:	e0bffc17 	ldw	r2,-16(fp)
 801113c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8011140:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8011144:	0001883a 	nop
 8011148:	e037883a 	mov	sp,fp
 801114c:	df000017 	ldw	fp,0(sp)
 8011150:	dec00104 	addi	sp,sp,4
 8011154:	f800283a 	ret

08011158 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8011158:	defffe04 	addi	sp,sp,-8
 801115c:	df000115 	stw	fp,4(sp)
 8011160:	df000104 	addi	fp,sp,4
 8011164:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8011168:	e0bfff17 	ldw	r2,-4(fp)
 801116c:	10bffe84 	addi	r2,r2,-6
 8011170:	10c00428 	cmpgeui	r3,r2,16
 8011174:	18001a1e 	bne	r3,zero,80111e0 <alt_exception_cause_generated_bad_addr+0x88>
 8011178:	100690ba 	slli	r3,r2,2
 801117c:	00820074 	movhi	r2,2049
 8011180:	10846404 	addi	r2,r2,4496
 8011184:	1885883a 	add	r2,r3,r2
 8011188:	10800017 	ldw	r2,0(r2)
 801118c:	1000683a 	jmp	r2
 8011190:	080111d0 	cmplti	zero,at,1095
 8011194:	080111d0 	cmplti	zero,at,1095
 8011198:	080111e0 	cmpeqi	zero,at,1095
 801119c:	080111e0 	cmpeqi	zero,at,1095
 80111a0:	080111e0 	cmpeqi	zero,at,1095
 80111a4:	080111d0 	cmplti	zero,at,1095
 80111a8:	080111d8 	cmpnei	zero,at,1095
 80111ac:	080111e0 	cmpeqi	zero,at,1095
 80111b0:	080111d0 	cmplti	zero,at,1095
 80111b4:	080111d0 	cmplti	zero,at,1095
 80111b8:	080111e0 	cmpeqi	zero,at,1095
 80111bc:	080111d0 	cmplti	zero,at,1095
 80111c0:	080111d8 	cmpnei	zero,at,1095
 80111c4:	080111e0 	cmpeqi	zero,at,1095
 80111c8:	080111e0 	cmpeqi	zero,at,1095
 80111cc:	080111d0 	cmplti	zero,at,1095
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80111d0:	00800044 	movi	r2,1
 80111d4:	00000306 	br	80111e4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80111d8:	0005883a 	mov	r2,zero
 80111dc:	00000106 	br	80111e4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80111e0:	0005883a 	mov	r2,zero
  }
}
 80111e4:	e037883a 	mov	sp,fp
 80111e8:	df000017 	ldw	fp,0(sp)
 80111ec:	dec00104 	addi	sp,sp,4
 80111f0:	f800283a 	ret

080111f4 <atexit>:
 80111f4:	200b883a 	mov	r5,r4
 80111f8:	000f883a 	mov	r7,zero
 80111fc:	000d883a 	mov	r6,zero
 8011200:	0009883a 	mov	r4,zero
 8011204:	80114241 	jmpi	8011424 <__register_exitproc>

08011208 <exit>:
 8011208:	defffe04 	addi	sp,sp,-8
 801120c:	000b883a 	mov	r5,zero
 8011210:	dc000015 	stw	r16,0(sp)
 8011214:	dfc00115 	stw	ra,4(sp)
 8011218:	2021883a 	mov	r16,r4
 801121c:	801153c0 	call	801153c <__call_exitprocs>
 8011220:	00820074 	movhi	r2,2049
 8011224:	108d6804 	addi	r2,r2,13728
 8011228:	11000017 	ldw	r4,0(r2)
 801122c:	20800f17 	ldw	r2,60(r4)
 8011230:	10000126 	beq	r2,zero,8011238 <exit+0x30>
 8011234:	103ee83a 	callr	r2
 8011238:	8009883a 	mov	r4,r16
 801123c:	80116bc0 	call	80116bc <_exit>

08011240 <memcmp>:
 8011240:	01c000c4 	movi	r7,3
 8011244:	3980192e 	bgeu	r7,r6,80112ac <memcmp+0x6c>
 8011248:	2144b03a 	or	r2,r4,r5
 801124c:	11c4703a 	and	r2,r2,r7
 8011250:	10000f26 	beq	r2,zero,8011290 <memcmp+0x50>
 8011254:	20800003 	ldbu	r2,0(r4)
 8011258:	28c00003 	ldbu	r3,0(r5)
 801125c:	10c0151e 	bne	r2,r3,80112b4 <memcmp+0x74>
 8011260:	31bfff84 	addi	r6,r6,-2
 8011264:	01ffffc4 	movi	r7,-1
 8011268:	00000406 	br	801127c <memcmp+0x3c>
 801126c:	20800003 	ldbu	r2,0(r4)
 8011270:	28c00003 	ldbu	r3,0(r5)
 8011274:	31bfffc4 	addi	r6,r6,-1
 8011278:	10c00e1e 	bne	r2,r3,80112b4 <memcmp+0x74>
 801127c:	21000044 	addi	r4,r4,1
 8011280:	29400044 	addi	r5,r5,1
 8011284:	31fff91e 	bne	r6,r7,801126c <__alt_data_end+0xff01126c>
 8011288:	0005883a 	mov	r2,zero
 801128c:	f800283a 	ret
 8011290:	20c00017 	ldw	r3,0(r4)
 8011294:	28800017 	ldw	r2,0(r5)
 8011298:	18bfee1e 	bne	r3,r2,8011254 <__alt_data_end+0xff011254>
 801129c:	31bfff04 	addi	r6,r6,-4
 80112a0:	21000104 	addi	r4,r4,4
 80112a4:	29400104 	addi	r5,r5,4
 80112a8:	39bff936 	bltu	r7,r6,8011290 <__alt_data_end+0xff011290>
 80112ac:	303fe91e 	bne	r6,zero,8011254 <__alt_data_end+0xff011254>
 80112b0:	003ff506 	br	8011288 <__alt_data_end+0xff011288>
 80112b4:	10c5c83a 	sub	r2,r2,r3
 80112b8:	f800283a 	ret

080112bc <_putc_r>:
 80112bc:	defffc04 	addi	sp,sp,-16
 80112c0:	dc000215 	stw	r16,8(sp)
 80112c4:	dfc00315 	stw	ra,12(sp)
 80112c8:	2021883a 	mov	r16,r4
 80112cc:	20000226 	beq	r4,zero,80112d8 <_putc_r+0x1c>
 80112d0:	20800e17 	ldw	r2,56(r4)
 80112d4:	10001b26 	beq	r2,zero,8011344 <_putc_r+0x88>
 80112d8:	30800217 	ldw	r2,8(r6)
 80112dc:	10bfffc4 	addi	r2,r2,-1
 80112e0:	30800215 	stw	r2,8(r6)
 80112e4:	10000a16 	blt	r2,zero,8011310 <_putc_r+0x54>
 80112e8:	30800017 	ldw	r2,0(r6)
 80112ec:	11400005 	stb	r5,0(r2)
 80112f0:	30800017 	ldw	r2,0(r6)
 80112f4:	10c00044 	addi	r3,r2,1
 80112f8:	30c00015 	stw	r3,0(r6)
 80112fc:	10800003 	ldbu	r2,0(r2)
 8011300:	dfc00317 	ldw	ra,12(sp)
 8011304:	dc000217 	ldw	r16,8(sp)
 8011308:	dec00404 	addi	sp,sp,16
 801130c:	f800283a 	ret
 8011310:	30c00617 	ldw	r3,24(r6)
 8011314:	10c00616 	blt	r2,r3,8011330 <_putc_r+0x74>
 8011318:	30800017 	ldw	r2,0(r6)
 801131c:	00c00284 	movi	r3,10
 8011320:	11400005 	stb	r5,0(r2)
 8011324:	30800017 	ldw	r2,0(r6)
 8011328:	11400003 	ldbu	r5,0(r2)
 801132c:	28fff11e 	bne	r5,r3,80112f4 <__alt_data_end+0xff0112f4>
 8011330:	8009883a 	mov	r4,r16
 8011334:	dfc00317 	ldw	ra,12(sp)
 8011338:	dc000217 	ldw	r16,8(sp)
 801133c:	dec00404 	addi	sp,sp,16
 8011340:	80098001 	jmpi	8009800 <__swbuf_r>
 8011344:	d9400015 	stw	r5,0(sp)
 8011348:	d9800115 	stw	r6,4(sp)
 801134c:	80049680 	call	8004968 <__sinit>
 8011350:	d9800117 	ldw	r6,4(sp)
 8011354:	d9400017 	ldw	r5,0(sp)
 8011358:	003fdf06 	br	80112d8 <__alt_data_end+0xff0112d8>

0801135c <putc>:
 801135c:	00820074 	movhi	r2,2049
 8011360:	defffc04 	addi	sp,sp,-16
 8011364:	108d6904 	addi	r2,r2,13732
 8011368:	dc000115 	stw	r16,4(sp)
 801136c:	14000017 	ldw	r16,0(r2)
 8011370:	dc400215 	stw	r17,8(sp)
 8011374:	dfc00315 	stw	ra,12(sp)
 8011378:	2023883a 	mov	r17,r4
 801137c:	80000226 	beq	r16,zero,8011388 <putc+0x2c>
 8011380:	80800e17 	ldw	r2,56(r16)
 8011384:	10001a26 	beq	r2,zero,80113f0 <putc+0x94>
 8011388:	28800217 	ldw	r2,8(r5)
 801138c:	10bfffc4 	addi	r2,r2,-1
 8011390:	28800215 	stw	r2,8(r5)
 8011394:	10000b16 	blt	r2,zero,80113c4 <putc+0x68>
 8011398:	28800017 	ldw	r2,0(r5)
 801139c:	14400005 	stb	r17,0(r2)
 80113a0:	28800017 	ldw	r2,0(r5)
 80113a4:	10c00044 	addi	r3,r2,1
 80113a8:	28c00015 	stw	r3,0(r5)
 80113ac:	10800003 	ldbu	r2,0(r2)
 80113b0:	dfc00317 	ldw	ra,12(sp)
 80113b4:	dc400217 	ldw	r17,8(sp)
 80113b8:	dc000117 	ldw	r16,4(sp)
 80113bc:	dec00404 	addi	sp,sp,16
 80113c0:	f800283a 	ret
 80113c4:	28c00617 	ldw	r3,24(r5)
 80113c8:	10c00e16 	blt	r2,r3,8011404 <putc+0xa8>
 80113cc:	28800017 	ldw	r2,0(r5)
 80113d0:	01000284 	movi	r4,10
 80113d4:	14400005 	stb	r17,0(r2)
 80113d8:	28800017 	ldw	r2,0(r5)
 80113dc:	10c00003 	ldbu	r3,0(r2)
 80113e0:	193ff01e 	bne	r3,r4,80113a4 <__alt_data_end+0xff0113a4>
 80113e4:	280d883a 	mov	r6,r5
 80113e8:	180b883a 	mov	r5,r3
 80113ec:	00000706 	br	801140c <putc+0xb0>
 80113f0:	8009883a 	mov	r4,r16
 80113f4:	d9400015 	stw	r5,0(sp)
 80113f8:	80049680 	call	8004968 <__sinit>
 80113fc:	d9400017 	ldw	r5,0(sp)
 8011400:	003fe106 	br	8011388 <__alt_data_end+0xff011388>
 8011404:	280d883a 	mov	r6,r5
 8011408:	880b883a 	mov	r5,r17
 801140c:	8009883a 	mov	r4,r16
 8011410:	dfc00317 	ldw	ra,12(sp)
 8011414:	dc400217 	ldw	r17,8(sp)
 8011418:	dc000117 	ldw	r16,4(sp)
 801141c:	dec00404 	addi	sp,sp,16
 8011420:	80098001 	jmpi	8009800 <__swbuf_r>

08011424 <__register_exitproc>:
 8011424:	defffa04 	addi	sp,sp,-24
 8011428:	dc000315 	stw	r16,12(sp)
 801142c:	04020074 	movhi	r16,2049
 8011430:	840d6804 	addi	r16,r16,13728
 8011434:	80c00017 	ldw	r3,0(r16)
 8011438:	dc400415 	stw	r17,16(sp)
 801143c:	dfc00515 	stw	ra,20(sp)
 8011440:	18805217 	ldw	r2,328(r3)
 8011444:	2023883a 	mov	r17,r4
 8011448:	10003726 	beq	r2,zero,8011528 <__register_exitproc+0x104>
 801144c:	10c00117 	ldw	r3,4(r2)
 8011450:	010007c4 	movi	r4,31
 8011454:	20c00e16 	blt	r4,r3,8011490 <__register_exitproc+0x6c>
 8011458:	1a000044 	addi	r8,r3,1
 801145c:	8800221e 	bne	r17,zero,80114e8 <__register_exitproc+0xc4>
 8011460:	18c00084 	addi	r3,r3,2
 8011464:	18c7883a 	add	r3,r3,r3
 8011468:	18c7883a 	add	r3,r3,r3
 801146c:	12000115 	stw	r8,4(r2)
 8011470:	10c7883a 	add	r3,r2,r3
 8011474:	19400015 	stw	r5,0(r3)
 8011478:	0005883a 	mov	r2,zero
 801147c:	dfc00517 	ldw	ra,20(sp)
 8011480:	dc400417 	ldw	r17,16(sp)
 8011484:	dc000317 	ldw	r16,12(sp)
 8011488:	dec00604 	addi	sp,sp,24
 801148c:	f800283a 	ret
 8011490:	00800034 	movhi	r2,0
 8011494:	10800004 	addi	r2,r2,0
 8011498:	10002626 	beq	r2,zero,8011534 <__register_exitproc+0x110>
 801149c:	01006404 	movi	r4,400
 80114a0:	d9400015 	stw	r5,0(sp)
 80114a4:	d9800115 	stw	r6,4(sp)
 80114a8:	d9c00215 	stw	r7,8(sp)
 80114ac:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 80114b0:	d9400017 	ldw	r5,0(sp)
 80114b4:	d9800117 	ldw	r6,4(sp)
 80114b8:	d9c00217 	ldw	r7,8(sp)
 80114bc:	10001d26 	beq	r2,zero,8011534 <__register_exitproc+0x110>
 80114c0:	81000017 	ldw	r4,0(r16)
 80114c4:	10000115 	stw	zero,4(r2)
 80114c8:	02000044 	movi	r8,1
 80114cc:	22405217 	ldw	r9,328(r4)
 80114d0:	0007883a 	mov	r3,zero
 80114d4:	12400015 	stw	r9,0(r2)
 80114d8:	20805215 	stw	r2,328(r4)
 80114dc:	10006215 	stw	zero,392(r2)
 80114e0:	10006315 	stw	zero,396(r2)
 80114e4:	883fde26 	beq	r17,zero,8011460 <__alt_data_end+0xff011460>
 80114e8:	18c9883a 	add	r4,r3,r3
 80114ec:	2109883a 	add	r4,r4,r4
 80114f0:	1109883a 	add	r4,r2,r4
 80114f4:	21802215 	stw	r6,136(r4)
 80114f8:	01800044 	movi	r6,1
 80114fc:	12406217 	ldw	r9,392(r2)
 8011500:	30cc983a 	sll	r6,r6,r3
 8011504:	4992b03a 	or	r9,r9,r6
 8011508:	12406215 	stw	r9,392(r2)
 801150c:	21c04215 	stw	r7,264(r4)
 8011510:	01000084 	movi	r4,2
 8011514:	893fd21e 	bne	r17,r4,8011460 <__alt_data_end+0xff011460>
 8011518:	11006317 	ldw	r4,396(r2)
 801151c:	218cb03a 	or	r6,r4,r6
 8011520:	11806315 	stw	r6,396(r2)
 8011524:	003fce06 	br	8011460 <__alt_data_end+0xff011460>
 8011528:	18805304 	addi	r2,r3,332
 801152c:	18805215 	stw	r2,328(r3)
 8011530:	003fc606 	br	801144c <__alt_data_end+0xff01144c>
 8011534:	00bfffc4 	movi	r2,-1
 8011538:	003fd006 	br	801147c <__alt_data_end+0xff01147c>

0801153c <__call_exitprocs>:
 801153c:	defff504 	addi	sp,sp,-44
 8011540:	df000915 	stw	fp,36(sp)
 8011544:	dd400615 	stw	r21,24(sp)
 8011548:	dc800315 	stw	r18,12(sp)
 801154c:	dfc00a15 	stw	ra,40(sp)
 8011550:	ddc00815 	stw	r23,32(sp)
 8011554:	dd800715 	stw	r22,28(sp)
 8011558:	dd000515 	stw	r20,20(sp)
 801155c:	dcc00415 	stw	r19,16(sp)
 8011560:	dc400215 	stw	r17,8(sp)
 8011564:	dc000115 	stw	r16,4(sp)
 8011568:	d9000015 	stw	r4,0(sp)
 801156c:	2839883a 	mov	fp,r5
 8011570:	04800044 	movi	r18,1
 8011574:	057fffc4 	movi	r21,-1
 8011578:	00820074 	movhi	r2,2049
 801157c:	108d6804 	addi	r2,r2,13728
 8011580:	12000017 	ldw	r8,0(r2)
 8011584:	45005217 	ldw	r20,328(r8)
 8011588:	44c05204 	addi	r19,r8,328
 801158c:	a0001c26 	beq	r20,zero,8011600 <__call_exitprocs+0xc4>
 8011590:	a0800117 	ldw	r2,4(r20)
 8011594:	15ffffc4 	addi	r23,r2,-1
 8011598:	b8000d16 	blt	r23,zero,80115d0 <__call_exitprocs+0x94>
 801159c:	14000044 	addi	r16,r2,1
 80115a0:	8421883a 	add	r16,r16,r16
 80115a4:	8421883a 	add	r16,r16,r16
 80115a8:	84402004 	addi	r17,r16,128
 80115ac:	a463883a 	add	r17,r20,r17
 80115b0:	a421883a 	add	r16,r20,r16
 80115b4:	e0001e26 	beq	fp,zero,8011630 <__call_exitprocs+0xf4>
 80115b8:	80804017 	ldw	r2,256(r16)
 80115bc:	e0801c26 	beq	fp,r2,8011630 <__call_exitprocs+0xf4>
 80115c0:	bdffffc4 	addi	r23,r23,-1
 80115c4:	843fff04 	addi	r16,r16,-4
 80115c8:	8c7fff04 	addi	r17,r17,-4
 80115cc:	bd7ff91e 	bne	r23,r21,80115b4 <__alt_data_end+0xff0115b4>
 80115d0:	00800034 	movhi	r2,0
 80115d4:	10800004 	addi	r2,r2,0
 80115d8:	10000926 	beq	r2,zero,8011600 <__call_exitprocs+0xc4>
 80115dc:	a0800117 	ldw	r2,4(r20)
 80115e0:	1000301e 	bne	r2,zero,80116a4 <__call_exitprocs+0x168>
 80115e4:	a0800017 	ldw	r2,0(r20)
 80115e8:	10003226 	beq	r2,zero,80116b4 <__call_exitprocs+0x178>
 80115ec:	a009883a 	mov	r4,r20
 80115f0:	98800015 	stw	r2,0(r19)
 80115f4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 80115f8:	9d000017 	ldw	r20,0(r19)
 80115fc:	a03fe41e 	bne	r20,zero,8011590 <__alt_data_end+0xff011590>
 8011600:	dfc00a17 	ldw	ra,40(sp)
 8011604:	df000917 	ldw	fp,36(sp)
 8011608:	ddc00817 	ldw	r23,32(sp)
 801160c:	dd800717 	ldw	r22,28(sp)
 8011610:	dd400617 	ldw	r21,24(sp)
 8011614:	dd000517 	ldw	r20,20(sp)
 8011618:	dcc00417 	ldw	r19,16(sp)
 801161c:	dc800317 	ldw	r18,12(sp)
 8011620:	dc400217 	ldw	r17,8(sp)
 8011624:	dc000117 	ldw	r16,4(sp)
 8011628:	dec00b04 	addi	sp,sp,44
 801162c:	f800283a 	ret
 8011630:	a0800117 	ldw	r2,4(r20)
 8011634:	80c00017 	ldw	r3,0(r16)
 8011638:	10bfffc4 	addi	r2,r2,-1
 801163c:	15c01426 	beq	r2,r23,8011690 <__call_exitprocs+0x154>
 8011640:	80000015 	stw	zero,0(r16)
 8011644:	183fde26 	beq	r3,zero,80115c0 <__alt_data_end+0xff0115c0>
 8011648:	95c8983a 	sll	r4,r18,r23
 801164c:	a0806217 	ldw	r2,392(r20)
 8011650:	a5800117 	ldw	r22,4(r20)
 8011654:	2084703a 	and	r2,r4,r2
 8011658:	10000b26 	beq	r2,zero,8011688 <__call_exitprocs+0x14c>
 801165c:	a0806317 	ldw	r2,396(r20)
 8011660:	2088703a 	and	r4,r4,r2
 8011664:	20000c1e 	bne	r4,zero,8011698 <__call_exitprocs+0x15c>
 8011668:	89400017 	ldw	r5,0(r17)
 801166c:	d9000017 	ldw	r4,0(sp)
 8011670:	183ee83a 	callr	r3
 8011674:	a0800117 	ldw	r2,4(r20)
 8011678:	15bfbf1e 	bne	r2,r22,8011578 <__alt_data_end+0xff011578>
 801167c:	98800017 	ldw	r2,0(r19)
 8011680:	153fcf26 	beq	r2,r20,80115c0 <__alt_data_end+0xff0115c0>
 8011684:	003fbc06 	br	8011578 <__alt_data_end+0xff011578>
 8011688:	183ee83a 	callr	r3
 801168c:	003ff906 	br	8011674 <__alt_data_end+0xff011674>
 8011690:	a5c00115 	stw	r23,4(r20)
 8011694:	003feb06 	br	8011644 <__alt_data_end+0xff011644>
 8011698:	89000017 	ldw	r4,0(r17)
 801169c:	183ee83a 	callr	r3
 80116a0:	003ff406 	br	8011674 <__alt_data_end+0xff011674>
 80116a4:	a0800017 	ldw	r2,0(r20)
 80116a8:	a027883a 	mov	r19,r20
 80116ac:	1029883a 	mov	r20,r2
 80116b0:	003fb606 	br	801158c <__alt_data_end+0xff01158c>
 80116b4:	0005883a 	mov	r2,zero
 80116b8:	003ffb06 	br	80116a8 <__alt_data_end+0xff0116a8>

080116bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80116bc:	defffd04 	addi	sp,sp,-12
 80116c0:	df000215 	stw	fp,8(sp)
 80116c4:	df000204 	addi	fp,sp,8
 80116c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80116cc:	0001883a 	nop
 80116d0:	e0bfff17 	ldw	r2,-4(fp)
 80116d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80116d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80116dc:	10000226 	beq	r2,zero,80116e8 <_exit+0x2c>
    ALT_SIM_FAIL();
 80116e0:	002af070 	cmpltui	zero,zero,43969
 80116e4:	00000106 	br	80116ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80116e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80116ec:	003fff06 	br	80116ec <__alt_data_end+0xff0116ec>
